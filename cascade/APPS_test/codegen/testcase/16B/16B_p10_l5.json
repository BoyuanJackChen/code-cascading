[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5\\n1 8 6'\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n3 6') == '2\\n1 6 3'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n3 6') == '2\\n1 6 3'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n3 6') == '2\\n1 6 3'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '2\\n1 4 3'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('8\\n1 2\\n3 4\\n4 5\\n3 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('8\\n1 2\\n3 4\\n4 5\\n3 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n3 7\\n3 8') == '4\\n1 8 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n3 7\\n3 8') == '4\\n1 8 6'\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '5'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '5'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '5'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '5\\n1 6 2'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '5\\n1 6 2'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '5\\n1 6 2'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(Solution().solution(stdin=\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\"), \"5\\n1 8 6\")\n\n    def test_2(self):\n        self.assertEqual(Solution().solution(stdin=\"8\\n4 3\\n4 1\\n4 2\\n3 7\\n3 8\\n7 8\\n7 1\\n1 5\"), \"5\\n1 8 6\")\n\n    def test_3(self):\n        self.assertEqual(Solution().solution(stdin=\"6\\n1 3\\n3 1\\n3 2\\n2 4\\n4 2\"), \"2\\n2 4 6\")\n\n    def test_4(self):\n        self.assertEqual(Solution().solution(stdin=\"6\\n2 4\\n4 2\"), \"2\\n2 4 6\")\n\n    def test_5(self):\n        self."
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == '5\\n1 8 6'\n\"\"\"\n\nimport sys\nfrom collections import deque\nimport math"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_expected\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n10 2 8 1 2 4 1 20 4 5''') == \"20 8\"\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4 1 2') == '2 3'\nassert solution('10\\n1 1 3 2 2 2 5 4 5') == '2 1'"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n8\\n1\\n2\\n4\\n1\\n2\\n3\\n6\") == \"20 8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n10\n10 2 8 1 2 4 1 20 4 5\n''') == '20 8'\nprint(solution(stdin))\n\n'''\n10\n10 2 8 1 2 4 1 20 4 5\n20 8\n\n10\n10 2 8 1 2 4 1 20 4 5\n20 8\n'''\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 2 8 1 2 4 1 20 4 5\") == \"20 8\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nprint(solution(\"10 2 8 1 2 4 1 20 4 5\"))\n\n\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nprint(max(l), min(l))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nn = int(stdin.readline())\n\ndivisors = set()\n\nfor i in range(1, n + 1):\n    divisors.update(set(range(1, i + 1)))\n\nfor i in stdin.readline().strip().split(' '):\n    divisors.discard(int(i))\n\nx, y = 1, 1\n\nfor d in sorted(divisors):\n    x *= d\n    y *= d\n\nprint(x, y)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3\\n1 2 3\\n3 2 1\") == \"4\"\nassert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\nfrom collections import Counter\n\nfrom collections import namedtuple\n\nCase = namedtuple('Case', ['n','m', 'k', 'a'])\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n') == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\"\"\"\n\nimport sys\nimport math\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == 24\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\n\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2\\n3') == '4'\nassert solution('1\\n2\\n3\\n4\\n5') == '5'\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == answer\n\nimport sys\na = [int(s) for s in sys.stdin.readline().split()]\nanswer = 0"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\\n\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRR\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == '4'\nassert solution(\"7\\n1 3 5 6 5 4 2\") == '6'\nassert solution(\"3\\n2 2 2\") == '1'\nassert solution(\"4\\n1 2 4 3\") == '4'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\n\n------\n\n\nimport random\n\nn = random.randint(1,10**5)\n\na = []\n\nfor i in range(n):\n    a.append(random.randint(1,2*10**5))\n\nprint(n)\nprint(' '.join(map(str, a)))\n\n##############################################################"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 3 2') == 4\nassert solution('7\\n1 3 5 6 5 4 2') == 6\nassert solution('3\\n2 2 2') == 1\nassert solution('4\\n1 2 4 3') == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\ns = []\n\nfor i in range(n):\n    s.append(a[i])\n    s.append(a[n - 1 - i])\n\ns.sort()\nk = len(s)\n\nprint(k)\nfor i in s:\n    print(i, end='')\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 3 7') == '3'\nassert solution('2\\n2 5') == '3'\nassert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\n\"\"\"\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]\n\nmini = min(a)"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 8\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 3 7') == 3\nassert solution('5\\n2 2 5 2 5') == 3\nassert solution('5\\n1 3 3 7') == -1\n\n\"\"\"\n\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3', 'Test 1'\nassert solution('5\\n2 2 5 2 5') == '3', 'Test 2'\nassert solution('4\\n1 3 3 7') == '-1', 'Test 3'\nassert solution('2\\n2 8') == '3', 'Test 4'\nprint('The local tests are done. Try Solution')\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 4 4 7 4 1') == '3'\nassert solution('2 2 5 2 5') == '3'\nassert solution('1 3 3 7') == '-1'\nassert solution('2 2 5 2 5') == '3'\nassert solution('1 2 3 7') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n1 3 3 7') == '3'\nassert solution(\n    '5\\n2 2 5 2 5') == '3'\nassert solution(\n    '5\\n2 2 5 2 5') == '3'\nassert solution(\n    '5\\n1 1 1 1 1') == '-1'\nassert solution(\n    '5\\n8 8 8 8 8') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 5 2 5\") == '3'\nassert solution(\"1 3 3 7\") == '-1'\nassert solution(\"4 4 4 4\") == '0'\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\\n\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 5\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Union, Set\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('17') == 5\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == 21\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10098\") == 20\n\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport sys\nsys.path.append('../')\nimport common_functions\nimport math"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 0 0 2 4') == '5 3 1 2 4'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\narr = [int(i) for i in sys.stdin.readline().split()]\narr.sort()\narr.reverse()\nresult = []\n\nfor i in range(len(arr)):\n    if arr[i]!= 0:\n        result.append(arr[i])"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\n\nassert solution('7\\n7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\n\nassert solution('7\\n7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7 2 0 1 0 5 1\") == \"7 2 3 4 6 5 1\"\nassert solution(\"3 0 0 0 0\") == \"3 0 0 0 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\n\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n\nassert solution(\"5\\n0 0 2 4\") == \"5 3 1 2 4\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    if a[i] not in d:\n        d[a[i]] = 0\n    d[a[i]] += 1"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"4 2\", \"1 2 2 3\"]) == \"YES\\n2 1 1 2 1\"\nassert solution([\"5 2\", \"3 2 1 2 3\"]) == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\nassert solution('5 2\\n1 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(['4 2', '1 2 2 3']) == 'YES\\n2 1 1 2 1'\nassert solution(['5 2', '3 2 1 2 3']) == 'YES\\n2 1 1 2 1'\nassert solution(['5 2', '2 1 1 2 1']) == 'NO'\nassert solution(['5 2', '2 1 1 2 1']) == 'NO'\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n3 2 1 2 3\") == 'YES\\n2 1 1 2 1'\nassert solution(\"5 2\\n2 1 1 2 1\") == 'NO'\nassert solution(\"5 2\\n2 1 1 2 2\") == 'NO'\nassert solution(\"5 2\\n1 1 1 2 2\") == 'NO'\nassert solution(\"5 2\\n1 2 2 2 2\") == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == 'YES\\n1 1 2 2'\nassert solution(\"5 2\\n3 2 1 2 3\") == 'YES\\n2 1 1 2 1'\nassert solution(\"5 2\\n2 1 1 2 1\") == 'NO'\nassert solution(\"4 2\\n3 2 1 2\") == 'NO'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(11 5 2) == 1\nassert solution(11 5 1) == 3\n\nassert solution('11 5 2') == 1\nassert solution('11 5 1') == 3\n\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('11 5 5') == '0'\nassert solution('11 5 6') == '0'\n\nassert solution('11 10 3') == '1'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 1\") == \"3\"\n\n\nimport unittest\nimport numpy as np\n\n\nclass SolutionTests(unittest.TestCase):\n    def test1(self):\n        stdin = \"11 5 2\"\n        expected = \"1\"\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test2(self):\n        stdin = \"11 5 1\"\n        expected = \"3\"\n        actual = solution(stdin)\n        self."
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 5 2\\n11010100101') == 1\nassert solution('11 5 1\\n11010100101') == 3\nassert solution('12 5 4\\n10101010') == 6\n\nassert solution('11 5 2\\n11010100101') == 1\nassert solution('11 5 1\\n11010100101') == 3\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\n\nprint('Success')\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\nassert solution(\"11 5 1\\n11010101010\") == '5'\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n\n\"\"\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('\\n1\\n1') == 'YES'\nassert solution('\\n2\\n1 1') == 'YES'\nassert solution('\\n3\\n1 1 2') == 'NO'\nassert solution('\\n4\\n1 1 2 2') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\\nNO\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"3\\n1 1 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\\nYES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"2\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"1\\n1 1 2\\n5\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"1\\n1 1 2\\n5\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"1\\n1 1 2\\n5\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"NO\\nNO\\nNO\\nYES\\nYES\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'NO'\nassert solution('3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\nassert solution('3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES'\nassert solution(\"5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == 'YES'\nassert solution(\"5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == 'NO'\nassert solution(\"5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == 'NO'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1337\\n1 2 5 4 6 6 3 1 9') == '1557'\nassert solution('5\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\nassert solution('2\\n33') == '33'\n\n\"\"\"\nimport numpy as np\n\nnum = int(stdin)\na = list(map(int, list(stdin)))\nb = list(map(int, stdin.split()))\n\nprint(max(a))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"111111\") == \"99999\"\nassert solution(\"9 8 7 6 5 4 3 2 1\") == \"99999\"\n\n\"\"\"\nfrom typing import List\nfrom math import ceil, log10\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\n\"\"\"\n\na = input()\nf = input().split()\n\ndigits = len(a)\ndigits_result = [int(i) for i in a]\n\nmax_result = 0\n\nfor i in range(digits):\n    if f[digits_result[i] - 1] > max_result:\n        max_result = f[digits_result[i] - 1]\n\nprint(max_result)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\n\nprint('Success')\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1337') == '1557'\nassert solution('5 11111') == '99999'\nassert solution('2 33') == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11111') == '99999'\nassert solution('1337') == '1553'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 5 4 6 6 3 1 9') == '1553'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1337\") == \"1553\"\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\na = list(map(int, list(input())))\nb = np.array(list(map(int, list(input()))))"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\"\nprint(\"OK\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 3 4\\n5 6 7\") == \"1\\n1 1 3\"\nassert solution(\"2\\n3 2 1\\n4 7 6\") == \"2\\n2 3 2\"\nassert solution(\"2\\n3 4 5\") == \"2\\n1 2 2\"\nassert solution(\"1\\n7 7 7\") == \"0\\n7 7 7\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 5 1\") == \"1\\n1 1 3\"\nassert solution(\"6\\n2 4 5\") == \"2\\n2 4 6\"\nassert solution(\"4\\n3 5 7\") == \"2\\n6 6 14\"\nassert solution(\"2\\n7 5 1\") == \"0\\n1 5 7\"\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    if a % b == 0:\n        print(a)\n    elif b % a == 0:\n        print(b)\n    else:\n        print(c)\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    print(a if a % b == 0 else b if b % a == 0 else c)\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    \n    if b % a == 0:\n        print(a)\n    elif c % b == 0:\n        print(b)\n    else:\n        print(a)\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    print(min(a, b, c) if min(a, b, c) % max(a, b, c) == 0 else max(a, b, c))\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    print(max(a, b, c) if max(a, b, c) % min(a, b, c) == 0 else min(a, b, c))\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    print(a if a % max(a, b, c) == 0 else b if b % max(a, b, c) == 0 else c)\n\"\"\"\n\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    print(min(a, b, c)) if a % min(a, b, c) == 0 or b % min(a, b, c) == 0 or c % min(a, b, c) == 0 else print(max(a, b, c))\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    print(max(a, b, c)) if max(a, b, c) % min(a, b, c) == 0 else print(min(a, b, c))\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    print(a if a % max(a, b, c) == 0 else b if b % max(a, b, c) == 0 else c)\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    if min(a, b, c) % max(a, b, c) == 0:\n        print(a if a % min(a, b, c) == 0 else b if b % min(a, b, c) == 0 else c)\n    else:\n        print(a if a % min(a, b, c) == 0 else b if b % min(a, b, c) == 0 else c)\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    if max(a, b, c) % min(a, b, c) == 0:\n        print(max(a, b, c)) if a % max(a, b, c) == 0 else print(b if b % max(a, b, c) == 0 else c)\n    else:\n        print(max(a, b, c)) if a % max(a, b, c) == 0 else print(b if b % max(a, b, c) == 0 else c)\n\"\"\"\n\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    if min(a, b, c) % max(a, b, c) == 0:\n        print(max(a, b, c)) if a % max(a, b, c) == 0 else print(b if b % max(a, b, c) == 0 else c)\n    else:\n        print(max(a, b, c)) if a % max(a, b, c) == 0 else print(b if b % max(a, b, c) == 0 else c)\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b += 1\n    c += 1\n    if min(a, b, c) % max(a, b, c) == 0:\n        print(max(a, b, c)) if a % max(a, b, c) == 0 else print(b if b % max(a, b, c) == 0 else c)\n    else:\n        print(max(a, b, c)) if a % max(a, b, c) == 0 else print(b if b % max(a, b, c) == 0 else c)\n\"\"\"\n\n\"\"\"\nnum = int(input())\n\nfor i in range(num):\n    a, b, c = map(int, input().split())\n    a += 1\n    b"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"123 321 456\") == \"1\"\nassert solution(\"5 10 15\") == \"1\"\nassert solution(\"15 18 21\") == \"1\"\nassert solution(\"100 100 101\") == \"1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2 3\\n') == '1\\n1 2 3\\n'\nassert solution('2\\n1 2 3\\n') == '1\\n1 2 3\\n'\nassert solution('2\\n1 2 3\\n') == '1\\n1 2 3\\n'\nassert solution('2\\n1 2 3\\n') == '1\\n1 2 3\\n'\nassert solution('2\\n1 2 3\\n') == '1\\n1 2 3\\n'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 5 7\n15 15 15\n7 7 7\n''') == '''\n3\n1 1 3\n102\n114 228 456\n\n'''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3\\n123 321 456\") == '1\\n1 1 3\\n4\\n4 8 16\\n6\\n6 24 48'\nprint('\"Run\" is good. How is \"Check\"?')\n\n-----Problem-----\n\n*After some time of working on problems like this, I realized that it\u2019s just a small matter of iterating over all possible cases.\n\nFor example, we could change the initial values to [1,1,2], we could change the initial values to [1,1,3], and so on, we could change the initial values to [1,2,3].\n\nIf you change the initial values, you get three or more initial values that we can use to make an arbitrary solution.\n\nYou can use the general formula for finding the solution.\n\n*Given:\n\n3 <= t <= 100\n1 <= a, b, c <= 10^4\n\n*Find:\n\na + b + c = A\n\n1 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <= 10^4\n\n0 <= a, b, c <= 10^4\n\n0 <= A <="
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 3\") == \"3 2 6\"\nassert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"1 2 4\") == \"2 2 4\"\nassert solution(\"1 2 5\") == \"3 2 5\"\nassert solution(\"1 2 6\") == \"3 2 6\"\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('3\\n1 2 3') == '0'\nassert solution('2\\n1 100000') == '0'\nassert solution('1\\n100000') == '0'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nmaxi = min(a)\nmini = max(a)\n\nfor i in a:\n    if i > maxi:\n        maxi = i\n    elif i < mini:\n        mini = i\n\nmaxi -= mini\nprint(maxi)"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 7\") == \"2\"\nassert solution(\"2 1 100000\") == \"0\"\n\n\n    \n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"4\n1 3 3 7\"\"\"\n    ) == \"2\"\nassert solution(\n    \"\"\"2\n1 100000\"\"\"\n    ) == \"0\"\nprint('The local tests are done. Click on \"Check\" to get your reward!');\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('4\\n1 10 10 10') == '3'\nassert solution('1\\n1') == '0'\n\nassert solution('4\\n1 3 3 7') == '2'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\n\"\"\"\nimport math"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\"\nfrom typing import List, Optional\n\nimport sys\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1 3 3 7''') == 2\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 3 1\\n1 2 1') == '1 2 2 1 1 0 3 4 3 4'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == '1 2 3 0 3'\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == '-1'\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\nn, m = map(int, stdin.readline().split())\nd = {}\np = {}\nfor i in range(m):\n    s, d, p = map(int, stdin.readline().split())\n    d = d - 1\n    d = str(d)\n    if not d in d:\n        d = '0'\n    p = str(p)\n    d = '{} {}'.format(d, p)\n    if not d in d:\n        d = '0 {}'.format(p)\n    d = '{} {}'.format(d, s)\n    if not d in d:\n        d = '{} 0'.format(s)\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:\n        d = '{} 0'.format(i + 1)\n    d = int(d)\n    if not d in d:\n        d = 0\n    d = '{} {}'.format(d, i + 1)\n    if not d in d:"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 1\\n1 2 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 1 0 1\"\nassert solution(\"4 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == answer\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n\n\nfrom math import factorial\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\nprint('Success')"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba', 3, 4) == 'ababababa', 'wrong result'\nassert solution('cat', 3, 2) == 'catcat', 'wrong result'\n\nprint(solution(stdin.split('\\n')[1]))\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'ababababa'\n\n-----Explanation-----\nIn the first example, string 'aba' has length 3. So the first substring is 'aba' and there are no other substrings.\n\nIn the second example, string 'cat' has length 3. So the first substring is 'cat' and there are no other substrings.\n\nIn the third example, string 'cat' has length 3. So the first substring is 'cat' and there are no other substrings.\n\n-----Test cases-----\n\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nprint(solution(\"aba\"))\n\nassert solution(\"cat\") == \"catcat\"\nprint(solution(\"cat\"))\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\n\nprint(\"OK!\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba') == 'ababa'\nassert solution('abc') == 'abcabc'\nassert solution('a') == 'a'\nassert solution('aaa') == 'aa'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"ababababa\"\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aa') == 'aa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"abababa\"\n\nassert solution(\"cat\") == \"catcat\"\n\nassert solution(\"abababa\") == \"abababa\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaaa') == 'aaaa'\nassert solution('aaaaa') == 'aaaaaaaa'\nassert solution('aa') == 'aa'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n2 3 1 2 3\") == \"3\\n3 2\"\nassert solution(\"7\\n2 1 2 2 3 3\") == \"3\\n3 2 1\"\nassert solution(\"5\\n2 1 2 2 3\") == \"0\"\nassert solution(\"4\\n2 1 2 3\") == \"1\\n1 2 3\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 2 2\") == \"3\\n1 4\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == '3\\n1 4\\n'\nassert solution(\"5\\n2 1 2 2\\n\") == '2\\n1 4\\n'\nassert solution(\"5\\n2 1 2 4 3\\n\") == '0\\n'\n\n\n\n-----\n5\n2 5 1 2 2\n\n3\n4 1 5\n\n4\n8 3 5 2\n\n\n-----"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 1 2 2\") == 3\nassert solution(\"8 3 5 2\") == 2\nassert solution(\"2 1 2 4 3\") == 0\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nnice = set()\n\nfor x in a:\n    if x!= sum(a):\n        nice.add(a.index(x))\n\nprint(len(nice))\nprint(*nice)\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 5 1 2 2\\n') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2\\n') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3\\n') == '0'\nassert solution('4\\n8 3 5 2\\n') == '2\\n1 4'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\\n1 4\\n\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\\n\"\nassert solution(\"5\\n2 1 2 4 3\\n\") == \"0\\n\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"0\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 1 2 2\") == '3'\nassert solution(\"8 3 5 2\") == '0'\nassert solution(\"2 1 2 4 3\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 2\\n\") == \"0\"\nassert solution(\"5\\n2 1 2 4 3\\n\") == \"0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 2 4 3') == '2\\n1 4'\nassert solution('4\\n8 3 5 2') == '0'\nassert solution('5\\n2 1 2 4 3') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '2\\n1 4'\n\n\n\n-----Explanation-----\n\nn=5,\na=[2, 1, 2, 4, 3]\n\nAfter removing the element at the index 0, the resulting array has sum equals to 6:\n\na=[2, 1, 2, 3] => a[1]=1, a[2]=2, a[3]=3, a[4]=4,\n\nAfter removing the element at the index 1, the resulting array has sum equals to 7:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nAfter removing the element at the index 2, the resulting array has sum equals to 9:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nAfter removing the element at the index 3, the resulting array has sum equals to 10:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nAfter removing the element at the index 4, the resulting array has sum equals to 10:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nAfter removing the element at the index 4, the resulting array has sum equals to 10:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nYou cannot remove the element at the index 0, because it is the element that has the largest value, so it is already good.\n\nAfter removing the element at the index 4, the resulting array has sum equals to 10:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nAfter removing the element at the index 1, the resulting array has sum equals to 11:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nFinally, you can remove the element at the index 2, so the resulting array has sum equals to 13:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\nYou cannot remove the element at the index 1, because it is the element that has the largest value, so it is already good.\n\nFinally, after removing the element at the index 3, the resulting array has sum equals to 13:\n\na=[2, 1, 3] => a[1]=1, a[2]=2, a[3]=3,\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = input()\ns_dict = {}\nfor char in s:\n    if char in s_dict:\n        s_dict[char] += 1\n    else:\n        s_dict[char] = 1"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"233\"\n\n\"\"\"\n\nfrom math import factorial as fact"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaaaa') == '15'\nassert solution('asdf') == '4'\nassert solution('ajihiushda') == '233'\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == answer\n\"\"\"\n\nn, k = tuple(map(int, stdin.readline().split()))\ns = stdin.readline()[:-1]\ncost = {x: n - len(x) for x in set(s)}\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ajihiushda\") == 233\nassert solution(\"aabba\") == -1\nassert solution(\"aaaaa\") == 4\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()\n\ncost = 0\nfor i in range(len(s)):\n    if i+1 == len(s):\n        break\n    if s.count(s[i]) == 1:\n        continue\n    cost += (len(s)-1) - s.rfind(s[i], i+1)"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('asdf', 5) == 4\nassert solution('aaaaa', 6) == 15\nassert solution('aaaaa', 7) == -1"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"asdf\") in [\"asd\", \"asdf\"]\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"ajihiushda\") == 233\n\n\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\najihiushda') == '5'\nassert solution('3 2\\najihiushda') == '-1'\nassert solution('5 7\\najihiushda') == '233'\nassert solution('4 100\\najihiushda') == '233'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaaa') == 15\n\"\"\"\n\n\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n\"\nassert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n2 1\\n2 3\\n3 4'\n\nassert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n2 1\\n2 3\\n3 4'\n\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\n\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'NO'\n\nassert solution('''2 4 1\n1 2\n2 3''') == 'YES\\n1 3'"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\"\"\") == 'YES\\n2 1\\n2 3\\n3 4'\n\nassert solution(\"\"\"4 5 3\n1 2\n1 4\n2 3\n3 4\"\"\") == 'YES\\n1 2\\n1 4\\n4 1'\n\nassert solution(\"\"\"4 4 3\n1 2\n1 4\n2 3\n3 4\"\"\") == 'NO'\n\nassert solution(\"\"\"4 4 3\n1 2\n1 3\n1 4\n2 3\n3 4\"\"\") == 'YES\\n1 2\\n1 3\\n1 4\\n3 1'\n\nassert solution(\"\"\"4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\"\"\") == 'NO'\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4\\n'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 3\\n4 1\\n'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'NO\\n'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n4 3\"\nassert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n4 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n\n\nclass Vertex:\n    def __init__(self, id):\n        self.id = id\n        self.neighbors = []\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n4 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\n\nhttps://www.codewars.com/kata/53ba7e5c45adf64b8e00018f/train/python\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\nassert solution('11:10 11:12') == '11:11 11:12'\nassert solution('01:02 03:02') == '02:02 03:02'\n\n\"\"\"\nfrom dataclasses import dataclass\nfrom typing import Dict, List, Tuple, Union\n\n\n@dataclass\nclass Time:\n    hours: int\n    minutes: int\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\nprint(\"Passed!\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11:00\") == \"11:30\"\nassert solution(\"10:00\") == \"10:30\"\n\"\"\"\n\n\nfrom datetime import datetime, timedelta\n\n\nclass Contest:\n    def __init__(self, start_time: str, end_time: str):\n        self.start_time = datetime.strptime(start_time, '%H:%M')\n        self.end_time = datetime.strptime(end_time, '%H:%M')\n        self.delta = timedelta(minutes=1)\n\n    def __repr__(self):\n        return f'{self.start_time} {self.end_time}'\n\n    def __str__(self):\n        return f'{self.start_time} {self.end_time}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\nassert solution(\"22:22 00:00\") == \"22:22\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n\n\"\"\"\nimport math\nimport sys\n\nstdin = sys.stdin\n\nh_1, m_1 = stdin.readline().split(' ')\nh_1, m_1 = int(h_1), int(m_1)\nh_2, m_2 = stdin.readline().split(' ')\nh_2, m_2 = int(h_2), int(m_2)\n\nmid_h = math.floor((h_1 + h_2) / 2)\nmid_m = math.floor((m_1 + m_2) / 2)\n\nprint(str(mid_h).zfill(2) + ':' + str(mid_m).zfill(2))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\nh1, m1 = input().split(\":\")\nh2, m2 = input().split(\":\")\n\nh3 = int(h1)\nm3 = int(m1)"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\n\"\"\"\nfrom typing import List\nfrom datetime import datetime\nfrom typing import Union\nfrom typing import Optional\n\n_FORMAT = \"%H:%M\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == 2\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == 2\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\nfrom typing import Dict, List\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"42\") == 6\nprint(\"Tests passed\")"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n1 3\n2 6\n0 4\n3 3''') == '1\n\nassert solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4''') == '2\n\nassert solution('''3\n4 5\n1 2\n9 20\n''') == '0\n\nassert solution('''2\n3 10\n1 5\n''') == '7\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5') == '7'\n\n\"\"\"\n\nfrom math import inf\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 3\n2 6\n0 4\n3 3''') == '1'\n\nassert solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4''') == '2'\n\nassert solution('''3\n4 5\n1 2\n9 20\n''') == '0'\n\nassert solution('''2\n3 10\n1 5\n''') == '7'\n\nassert solution('''3\n4 5\n1 2\n9 20\n''') == '0'"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\"\"\"\n\n\"\"\"\ninput\n4\n1 3\n2 6\n0 4\n3 3\n\noutput\n1\n\ninput\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\noutput\n2\n\ninput\n3\n4 5\n1 2\n9 20\n\noutput\n0\n\ninput\n2\n3 10\n1 5\n\noutput\n7\n\"\"\"\n\n\"\"\"\ninput\n4\n1 3\n2 6\n0 4\n3 3\n\noutput\n1\n\ninput\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\noutput\n2\n\ninput\n3\n4 5\n1 2\n9 20\n\noutput\n0\n\ninput\n2\n3 10\n1 5\n\noutput\n7\n\"\"\"\n\n\"\"\"\n1. \u6784\u5efasorted_arr\uff0c\u5c06\u6240\u6709\u7684[l,r]\u653e\u5230sorted_arr\u4e2d\n2. \u5bf9sorted_arr\u8fdb\u884c\u904d\u5386\uff0c\u904d\u5386\u5230\u4e00\u4e2a[l,r]\u65f6\uff0c\u5982\u679c\u8be5[l,r]\u5df2\u7ecf\u5728sorted_arr\u4e2d\uff0c\u5219\u9000\u51fa\u5faa\u73af\n3. \u5982\u679c\u4e00\u4e2a[l,r]\u5df2\u7ecf\u5728sorted_arr\u4e2d\uff0c\u5219\u628asorted_arr[:i]\u548c[l,r]\u52a0\u8fdb\u6765\n4. \u5982\u679c\u4e00\u4e2a[l,r]\u6ca1\u6709\u5728sorted_arr\u4e2d\uff0c\u5219\u5bf9sorted_arr\u8fdb\u884c\u6392\u5e8f\uff0c\u9009\u51fasorted_arr[mid]\uff0c\u628a[l,r]\u52a0\u8fdb\u6765\n\"\"\"\n\nn = int(input())\narr = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    arr.append([l, r])\narr.sort(key=lambda x: x[0])\nsorted_arr = []\nfor i in range(n):\n    l, r = arr[i]\n    if l not in sorted_arr:\n        sorted_arr.append(l)\n    if r not in sorted_arr:\n        sorted_arr.append(r)\n\nans = 0\nfor i in range(len(sorted_arr) - 1):\n    l = sorted_arr[i]\n    r = sorted_arr[i + 1]\n    ans = max(ans, r - l)\nprint(ans)\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3\\n2 6\\n0 4\\n1 20\\n0 4\\n\") == \"1\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\nsys.stdin = open(\"input.txt\", \"r\")\ninput = sys.stdin.readline"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0'\nassert solution(\"2\\n3 10\\n1 5\") == '7'\n\nSolution:\n\n1. Sort the intervals by their left coordinate.\n2. Check if any two intervals have a right coordinate that's less than or equal to the left coordinate of the first interval.\n3. If so, then this interval can be removed.\n4. We return the length of the longest intersection we've found so far."
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"4\\n4 5 3\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 5 4\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"2 2 2 2 5\") == \"YES\"\nassert solution(\"1 1 1 2 5\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\nassert solution(\"5 2 1 4 3\") == \"YES\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nlast_h = a[0]\nlast_i = 0\nfor i in range(n):\n    h = a[i]\n    if last_h!= h:\n        print(\"YES\")\n        exit()\n    if last_i == i and last_h!= h:\n        print(\"NO\")\n        exit()\n    last_i = i\n    last_h = h\n\nprint(\"YES\")\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 3') == 'NO'\nassert solution('2 10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 2 5\") == 'YES'\nassert solution(\"5 2 1 2 5\") == 'NO'\nassert solution(\"3 1 1 2 5\") == 'NO'\nassert solution(\"2 10 1 2 5\") == 'YES'\nassert solution(\"1 10 1 2 5\") == 'NO'"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaa') == 'a'\nassert solution('abca') == 'abca'\nassert solution('aabca') == 'aabca'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaca\") == \"3\"\nassert solution(\"aabaca\") == \"3\"\nassert solution(\"aabac\") == \"5\"\nassert solution(\"aabac\") == \"5\"\nassert solution(\"aabac\") == \"5\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\n\nassert solution(\"5 6\\naaaaa\") == \"15\"\n\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\nassert solution(\"10 100\\najihiushda\") == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n asdf\") == \"4\"\nassert solution(\"5 6\\n aaaaa\") == \"15\"\nassert solution(\"5 7\\n aaaaa\") == \"-1\"\nassert solution(\"10 100\\n ajihiushda\") == \"233\"\n\n\n-----\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"5 7\") == \"15\"\nassert solution(\"10 100\") == \"233\"\nassert solution(\"10 101\") == \"2\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\nprint(\"Success!\")\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"asdf\") == 4\n\nassert solution(\"ajihiushda\") == 233\n\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == -1\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\nassert solution('10 100\\najihiushda') == '233'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaaa\") == \"15\"\nassert solution(\"asdf\") == \"4\"\nassert solution(\"ajihiushda\") == \"233\"\n\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 1 1\"\n) == \"4\"\nassert solution(\n    \"3 2 2\"\n) == \"7\"\nassert solution(\n    \"1 100 1\"\n) == \"3\"\n\n\"\"\"\n\na, b, c = [int(n) for n in input().split()]"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"4\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100 1\") == \"4\"\nassert solution(\"2 1 1\") == \"4\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 1 1''') == '4'\nassert solution('''3 2 2''') == '7'\nassert solution('''1 100 1''') == '3'\nassert solution('''30 20 10''') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 2 2\") == \"7\"\n\"\"\"\n\na, b, c = map(int, input().split())\n\nfood = [0] * 7\n\nfor i in range(7):\n    food[i] = a - b * i\n\nfood[2] = food[2] + c\n\nprint(max(food))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\"\"\"\n\na, b, c = map(int, input().split(' '))"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n''') == 'YES'\n\nassert solution('''\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n''') == 'NO'\n\nassert solution('''\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n''') == 'YES'\n\nassert solution('''\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n2 1\\n\") == \"YES\"\nassert solution(\"1 100\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"YES\"\nassert solution(\"1 100\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"NO\"\nassert solution(\"1 2\\n2 1\\n\") == \"NO\"\nassert solution(\"1 1\\n1 2\\n\") == \"YES\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    matrix = [sys.stdin.readline().split() for _ in range(2 * n)]\n\n    # print(matrix)\n    # print()\n    # print()\n    matrix.sort(key=lambda x: x[0])\n    matrix.sort(key=lambda x: x[1])\n    # print(matrix)\n    # print()\n    # print()\n    # print()\n\n    d = dict()\n    for i in range(len(matrix)):\n        d[matrix[i][0]] = i // 2\n        d[matrix[i][1]] = i // 2\n\n    # print(d)\n\n    for i in range(m):\n        for j in range(m):\n            if i!= j and d[i] == d[j]:\n                print(\"NO\")\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"YES\")"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2') == 'NO'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4') == 'YES'\nassert solution('2 3\\n1 1\\n1 1\\n2 2') == 'NO'\nassert solution('1 3\\n1 1\\n1 1') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n5 6\") == \"YES\"\nassert solution(\"1 2\\n5 6\\n5 7\") == \"NO\"\nassert solution(\"1 1\\n2 2\") == \"YES\"\nassert solution(\"1 1\\n1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n7\\n8\\n9\\n\\n9\\n8\\n7\\n5\") == \"YES\"\nassert solution(\"2\\n1\\n1\\n1\\n\\n1\\n1\\n1\\n2\") == \"YES\"\nassert solution(\"1\\n2\\n1\\n1\\n\\n1\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"1\\n1\\n1\\n2\\n\\n2\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"1\\n100\\n1\\n1\\n\\n1\\n1\\n1\\n2\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n5 6\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 1\\n1 1\\n1 1\\n') == 'YES'\nassert solution('1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n') == 'NO'\nassert solution('2 2\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n') == 'YES'\nassert solution('2 2\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n') == 'NO'\nassert solution('1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 1\\n1 2\\n3 4\\n1 1\\n1 1\\n1 1\\n') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\\n5 6\\n7 8\") == \"YES\"\nassert solution(\"1 1\\n1 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 8\\n9 7\\n9 6\\n9 5\\n9 4\") == \"NO\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 8\\n9 7\\n9 6\\n9 5\\n9 4\\n9 3\\n9 2\") == \"NO\"\nassert solution(\"1 100\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n7\\n8\\n9\\n4\\n9\\n8\\n5\\n7\\n8\\n9\\n8\\n7\\n4\\n9') == 'YES'\nassert solution('5\\n7\\n8\\n9\\n4\\n9\\n8\\n5\\n7\\n8\\n9\\n8\\n7\\n4\\n9') == 'NO'\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\nassert solution('12') == '1'\nassert solution('-12') == '1'"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\nassert solution(\"9\") == \"1\"\nassert solution(\"9 10 11 13\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 0\nassert solution('5') == 1\nassert solution('6') == 1\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == '1'\n\nassert solution(\"5\") == '1'\n\nassert solution(\"5\") == '1'\n\nassert solution(\"5\") == '1'\n\nassert solution(\"5\") == '1'"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\nassert solution(\"1\") == 0\n\nassert solution(\"2\") == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import Counter\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()()))\") == 4\nassert solution(\"((()))\") == 0\nassert solution(\"(()(()))\") == 1\nassert solution(\"(())()\") == 2\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((())))\") == 4\nassert solution(\"(((()))\") == 4\nassert solution(\"(((()\")) == 0\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == \"5\"\n\nassert solution(\"(((()))())\") == \"4\"\n\nassert solution(\"(()(()))()\") == \"0\"\n\nassert solution(\"()((()))()\") == \"4\"\n\nassert solution(\"(())()\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()()\") == \"4\"\nassert solution(\"()(((()())))\") == \"7\"\nassert solution(\"((((())))(((())))\") == \"19\"\nassert solution(\"((()))(()(()))((((())))()\") == \"19\"\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, \"(())\") == \"5\"\nassert solution(3, \"(()())\") == \"4\"\nassert solution(2, \"(()())\") == \"0\"\nassert solution(5, \"(((())))\") == \"1\"\nassert solution(3, \"((()(()))\") == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((()))())\") == 5\nassert solution(\"(()(()))()\") == 4\nassert solution(\"(((()))())\") == 5\n\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"5\"\nassert solution(\"(((((())))())())\") == \"4\"\nassert solution(\"((((((((((((()())))))()))())()))())\") == \"0\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('()))()') == 5\nassert solution('(()()))') == 4\nassert solution('(((())))') == 0\nassert solution('(())()') == 4\nassert solution('(()()') == 4"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()()))()\") == \"4\"\nassert solution(\"((((()))())(((())))\") == \"0\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\nassert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5071'\n) == 4\nassert solution(\n    '705'\n) == 1\nassert solution(\n    '1241367'\n) == -1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5071\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5071) == 4\nassert solution(705) == 1\nassert solution(1241367) == -1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == 2\n\"\"\"\n\nimport copy\n\nn = int(stdin.readline())\ns = stdin.readline()"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcde\") == \"1\"\nassert solution(\"abcdedc\") == \"3\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == '1 1 2 1 3'\nassert solution('abce') == '1 1 1 2 2 3'\n\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('ab') == '1 1'\nassert solution('abcd') == '2 2 2 1 1'\nassert solution('cba') == '1 1 3 1'\nassert solution('aabbccdde') == '2 2 2 2 2 1 1 3 1'\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcd') == '1 1 1 1 2 3'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"1 1 2 1 3\"\nassert solution(\"abcdedc\") == \"1 2 1 2 1 2 1 1\"\nassert solution(\"abcdef\") == \"1 1 1 1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == '2'\nassert solution(\"aaabbcbb\") == '2'\nassert solution(\"abcdedc\") == '3'\nassert solution(\"abcde\") == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1'\nassert solution('abacbecfd') == '2 1 1 2 1 2 1 2 1'\nassert solution('abcdedc') == '1 2 1 2 1 2 1 1'\nassert solution('abcde') == '1 1 1 1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"qwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\"\n\"\"\"\n\n\n\"\"\"\n5\na\naba\nabacaba\nba\naba\n\n4\na\nabacaba\nba\naba\nabab\n\n5\na\nabacaba\nba\naba\nabab\n\n5\nqwerty\nqwerty\nqwerty\n\n3\nqwerty\nqwerty\nqwerty\n\n3\nqwerty\nqwerty\nqwerty\n\n3\nqwerty\nqwerty\nqwerty\n\n3\nqwerty\nqwerty\nqwerty\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\"\nassert solution(\"a\\nab\\nba\\n\") == \"YES\\nab\\nba\\n\"\nassert solution(\"a\\nab\\nba\") == \"YES\\nab\\nba\\n\"\nassert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\na\\nab\\nabc\\nabcd\\n\") == 'YES\\na\\nab\\nabcd\\nabc\\nab'\nassert solution(\"5\\nabacaba\\nba\\naba\\nabab\\n\") == 'NO'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == 'YES'\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacaba') == \"YES\"\nassert solution('aba') == \"YES\"\nassert solution('ab') == \"YES\"\nassert solution('a') == \"YES\"\nassert solution('ba') == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\na\\nab\\na\\nbc\\nac\\n\") == \"YES\"\nassert solution(\"4\\na\\nab\\nab\\na\\nbc\\nac\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"aabbaccc\") == \"YES\"\nassert solution(\"abcabcabcabc\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\na\naba\nabacaba\nba\naba\n\n''') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\n\nassert solution('''3\nqwerty\nqwerty\nqwerty\n\n''') == 'YES\\nqwerty\\nqwerty\\nqwerty\\n'\n\nassert solution('''5\na\nabacaba\nba\naba\nabab\n\n''') == 'NO'\n\nassert solution('''5\na\nabacaba\nba\naba\nabab\n\n''') == 'NO'\n\nassert solution('''3\nqwerty\nqwerty\nqwerty\n\n''') == 'YES\\nqwerty\\nqwerty\\nqwerty\\n'"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a\\naba\\nabacaba\\nba\\naba\\nabab') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\nassert solution('q\\nq\\nq\\n') == 'YES\\nq\\nq\\nq\\n'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"5 23\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == 5\nassert solution(\"5 2 1 3 2 1 3\") == 0\nassert solution(\"5 100 12 34 55 43 21\") == 5\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == 5\nassert solution(\"5 2 3 1 2 3\") == 0\nassert solution(\"5 100\") == 5\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == 5\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n\"\"\"\n\nn, k = list(map(int, input().split()))\ns = [int(i) for i in input().split()]"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\n\nassert solution(\"506 2708\") == \"3218\"\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\"\"\"\n\nfrom typing import List\nfrom itertools import product\nimport math\n\n\nclass Solution:\n    def __init__(self, a: int, b: int) -> None:\n        self.a, self.b = a, b\n\n    def run(self) -> None:\n        # a <= b\n        for perm in product(range(self.a, self.b + 1), repeat=2):\n            # all permutations with length = 2\n            if self.is_rectangle(perm):\n                perimeter = sum(perm)\n                print(perimeter)\n                return\n\n        print(\"-1\")\n\n    def is_rectangle(self, perm: List[int]) -> bool:\n        # perm: [a, b, c, d]\n        # return a*d == b*c\n        return all([\n            math.gcd(perm[0], perm[1]) == 1,\n            math.gcd(perm[0], perm[2]) == 1,\n            math.gcd(perm[0], perm[3]) == 1,\n            math.gcd(perm[1], perm[2]) == 1,\n            math.gcd(perm[1], perm[3]) == 1,\n            math.gcd(perm[2], perm[3]) == 1,\n        ])\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '2'\nassert solution('1 2\\n3 4') == '6'\nassert solution('10 5\\n5 10') == '12'\nassert solution('10 10\\n5 5') == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\\n\") == \"14\"\nassert solution(\"4 4\\n\") == \"12\"\nassert solution(\"3 6\\n\") == \"12\"\nassert solution(\"506 2708\\n\") == \"3218\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd') == '101010'\nassert solution('abcde') == '010110'\nassert solution('abcef') == '101010'\nassert solution('abcd') == '101010'\nassert solution('abcde') == '010110'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('abcde') == '0'\nassert solution('abcd') == '1'\nassert solution('abacbecfd') == '001010101'\nassert solution('abcdedc') == '01011011'\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcd') == '0 0 0 1 0 0'\nassert solution('abcde') == '0 0 1 0 1'\nassert solution('bcdewq') == '1 0 0 1 1'\nassert solution('edcba') == '0 0 1 1 0'"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"YES\\n01010\"\nassert solution(\"abcde\") == \"YES\\n01010\"\nassert solution(\"abcbde\") == \"NO\"\nassert solution(\"edcba\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\\n\"\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES\\n001\\n'\nassert solution('aaabbcbb') == 'YES\\n01011011\\n'\nassert solution('abccba') == 'YES\\n010\\n010\\n1\\n010\\n010\\n'\nassert solution('abcde') == 'NO\\n'\nassert solution('aabbcc') == 'YES\\n10011010\\n'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"YES\\n01110\"\nassert solution(\"acb\") == \"YES\\n11010\"\nassert solution(\"ade\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n\nassert solution(\"abacbecfd\") == \"YES\\n001010101\"\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcdedc') == 'NO\\n'\nassert solution('abcde') == 'YES\\n00000'\nassert solution('abacde') == 'NO\\n'"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 3\") == \"30\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"0 0\") == \"-1\"\nassert solution(\"0 1\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2, 2) == 25\nassert solution(3, 1) == 4\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == -1\nassert solution(\"2 2\") == 25\nassert solution(\"3 2\") == 26\n\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"25\"\nassert solution(\"3 9\") == \"3\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"3 5\") == 22\nassert solution(\"100 100\") == 100\nassert solution(\"100 50\") == 50\nassert solution(\"50 100\") == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == -1\nassert solution(\"1 2\") == 3\nassert solution(\"2 2\") == -1\nassert solution(\"2 3\") == -1\nassert solution(\"1 0\") == 0\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2, 2) == 25\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '25'\nassert solution('3 5') == '-1'\nassert solution('100 100') == '-1'\nassert solution('100 1') == '50'\nassert solution('3 4') == '10'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 1') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n\") == \"25\"\nassert solution(\"2 2\\n\") == \"25\"\nassert solution(\"2 2\\n\") == \"25\"\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\nprint(solution(\"1 1\"))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"26 6\") == 'YES\\n1 2 4 5 6 8'\nassert solution(\"8 3\") == 'NO\\n'\nassert solution(\"1 1\") == 'YES\\n1'\nassert solution(\"9 4\") == 'NO\\n'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\n\"\"\"\n\nimport numpy as np\nimport copy"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == 'YES'\nassert solution(\"4 7\") == 'NO'\nassert solution(\"4 5\") == 'NO'\n\"\"\"\n\n\"\"\"\nExplanation:\nThe array [1, 2, 4, 5, 6, 8] satisfies the requirements:\n\nThe sum of all its elements is 18;\nThe first element is 1;\nThe last element is 8;\nIts second element is 2;\nThe second last element is 4;\nAnd so on...\n\nSolution:\n\nI use a greedy approach:\n\nthe first element will always be 1\nthe second element will always be 2\nthe third element will always be 4\nthe forth element will always be 5\n\nthe fifth element will be the remaining problem\n\nthe sixth element will be 8,\n\nthen:\n\n1 + 2 + 4 + 5 + 8 + remaining_problem\n= 18\n\nthe seventh element will always be 6\n\nthe eighth element will be the remaining problem\n\n1 + 2 + 4 + 5 + 8 + remaining_problem = 18\n\nand so on\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\nassert solution(\"1\") == \"YES\\n1\"\nprint('All tests passed.')\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('26 6\\n1 2 4 5 6 8\\n') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3\\n1 2 3 4 5 6 7 8\\n') == 'NO\\n'\nassert solution('1 1\\n1\\n') == 'YES\\n1\\n'\nassert solution('9 4\\n1 2 3 4 5 6 7 8 9\\n') == 'NO\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"7 6\") == \"NO\"\nassert solution(\"10 6\") == \"YES\"\nassert solution(\"10 5\") == \"YES\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1 2') == '1'\nassert solution('1 3') == '0'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == '3'\nassert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5'\nassert solution('''3 2\n300 -300\n1 299\n1 123''') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\\n10 -2\\n8 -1\") == \"3\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5\nassert solution('3 2\\n300 -300\\n1 299\\n1 123') == 3\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('3 4\\n4 6\\n10 -2\\n8 -1'), 3)\n        self.assertEqual(solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45'), 5)\n        self."
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '3'\nassert solution('3 3') == '0'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == expected_result\nprint(solution(input))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5'\nassert solution('''3 2\n300 -300\n1 299\n1 123''') == '3'\nassert solution('''5 1\n4 6\n-3 -2\n-1 -1\n10 34\n1 27\n40 -45''') == '3'\nassert solution('''5 2\n4 6\n-3 -2\n-1 -1\n10 34\n1 27\n40 -45''') == '3'\nassert solution('''5 3\n4 6\n-3 -2\n-1 -1\n10 34\n1 27\n40 -45''') == '4'\n\n'''\n3\n4 6\n10 -2\n8 -1\n4 -3\n4 -3\n3 -5\n5 3\n1 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n2 4\n3 5\n1 2\n2 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('4 2') == 1\nassert solution('10 -2') == 0\nassert solution('8 -1') == 0\nassert solution('100 -100') == 1\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\") == \"YES\\n1\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1\\n1') == 'YES\\n1 1'\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == 'NO'\nassert solution(\"1\\n10\") == 'YES\\n10'"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\nassert solution(\"1\") == \"YES\\n10\"\nassert solution(\"4\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\nassert solution(\"1\") == \"YES\\n10\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('1') == 'YES'\nassert solution('1 2') == 'YES'\nassert solution('1 2 1') == 'YES'\nassert solution('1 2 1 3') == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\"\nassert solution(\"1\\n10\\n\") == \"YES\\n10\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 'YES'\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == 'NO'\n\"\"\"\n\nimport sys\n\nN, R = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"3 4\", \"4 6\", \"10 -2\", \"8 -1\"]) == \"YES\"\nassert solution([\"3 5\", \"4 -5\", \"4 -2\", \"1 3\", \"5 -3\"]) == \"YES\"\nassert solution([\"4 4\", \"5 2\", \"5 -3\", \"2 1\", \"4 -2\"]) == \"YES\"\nassert solution([\"3 10\", \"10 0\", \"10 -10\", \"30 0\"]) == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('4 10\\n10 -10\\n30 0\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 4\n4 6\n10 -2\n8 -1\"\"\") == \"YES\"\nassert solution(\"\"\"3 5\n4 -5\n4 -2\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\") == \"YES\"\nassert solution(\"\"\"3 10\n10 0\n10 -10\n30 0\n\"\"\") == \"NO\"\nassert solution(\"\"\"4 10\n10 -5\n10 -2\n30 0\n4 -2\n\"\"\") == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n5 -3\\n2 1\\n4 -2') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'NO'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'NO'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 4\\n'\n    '4 6\\n'\n    '10 -2\\n'\n    '8 -1'\n) == 'YES'\nassert solution(\n    '3 5\\n'\n    '4 -5\\n'\n    '4 -2\\n'\n    '1 3\\n'\n) == 'YES'\nassert solution(\n    '4 4\\n'\n    '5 2\\n'\n    '5 -3\\n'\n    '2 1\\n'\n    '4 -2'\n) == 'YES'\nassert solution(\n    '3 10\\n'\n    '10 0\\n'\n    '10 -10\\n'\n    '30 0'\n) == 'NO'\nassert solution(\n    '4 4\\n'\n    '5 2\\n'\n    '5 -3\\n'\n    '2 1\\n'\n    '4 -2'\n) == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == 'YES\\n0 1 0 2 2 0 3'\nassert solution(\"10 1 11\\n1\\n\") == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution(\"10 1 5\\n2\\n\") == 'YES\\n0 0 0 0 1 1 0 0 0 0'\nassert solution(\"4 3\\n1 2 1\\n\") == 'NO'\nassert solution(\"10 1 4\\n1\\n\") == 'NO'\n\nprint('Success')\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \"\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3\\n'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 1\\n'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0\\n'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == 'YES\\n0 1 0 2 2 0 3'\nassert solution(\"10 1 11\\n1\\n\") == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution(\"10 1 5\\n2\\n\") == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\nassert solution(\"4 2 4\\n1 2 1\") == \"YES\\n0 0 0 1 2 0 2 1 0 0 \""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 1\nassert solution('aa') == 2\nassert solution('aaaa') == 4\nassert solution('ab') == 1\nassert solution('ba') == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 3\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"se\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\n\"\"\"\n\nimport unittest\nimport collections"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaa') == 0\nassert solution('ab') == 0\nassert solution('abcd') == 1\nassert solution('abc') == 1\nassert solution('abcd') == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 4\nassert solution(\"tt\") == 0\nassert solution(\"tst\") == 1\nassert solution(\"tset\") == 2\nassert solution(\"testtest\") == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abba') == 2\nassert solution('ba') == 0\nassert solution('ab') == 1\nassert solution('a') == 0\nassert solution('aa') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"test\"\nassert solution(\"tt\") == \"tt\"\nassert solution(\"tst\") == \"tst\"\nassert solution(\"tt\") == \"tt\"\nassert solution(\"et\") == \"et\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"\") == 0\nassert solution(\"a\") == 0\nassert solution(\"aab\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd') == 1\nassert solution('abcdefg') == 0\nassert solution('aaa') == 0\nassert solution('aa') == 1\nassert solution('abcd') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0\") == \"10 9\"\nassert solution(\"2.0\") == \"9 10\"\nassert solution(\"2.5\") == \"10 3\"\nassert solution(\"4.0\") == \"9 9\"\nassert solution(\"4.25\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\nassert solution(\"0.000060\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"1.200000\"\n) == \"3 2\"\nassert solution(\n    \"2.572479\"\n) == \"10 3\"\nassert solution(\n    \"4.024922\"\n) == \"9 9\"\nprint(\"All tests passed.\")\n\n-----"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.213411') == '3 2'\n\nassert solution('.00500') == '10 3'\n\nassert solution('.020506') == '10 9'\n\nprint('tests passed...')\n\n\n\n-----\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\n\n\nsolution(\"1.200000\")\nsolution(\"2.572479\")\nsolution(\"4.024922\")\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\nassert solution('6 10 3') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    6 3 3\n    \"\"\"\n) == \"YES\"\nassert solution(\n    \"\"\"\n    6 2 3\n    \"\"\"\n) == \"NO\"\nassert solution(\n    \"\"\"\n    10 4 3\n    \"\"\"\n) == \"YES\"\nassert solution(\n    \"\"\"\n    8 5 3\n    \"\"\"\n) == \"YES\"\nassert solution(\n    \"\"\"\n    8 5 3\n    \"\"\"\n) == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 3\\n') == 'YES'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('10 4 3\\n') == 'YES'\nassert solution('8 5 3\\n') == 'YES'\nassert solution('8 5 3\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(6) + \"\\n\" + str(3) + \"\\n\" + str(3)) == \"YES\"\nassert solution(str(6) + \"\\n\" + str(3) + \"\\n\" + str(3))!= \"NO\"\nassert solution(str(8) + \"\\n\" + str(5) + \"\\n\" + str(3)) == \"YES\"\nassert solution(str(8) + \"\\n\" + str(5) + \"\\n\" + str(3))!= \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 4') == 'YES\\n3 1\\n4 1\\n1 2'\nassert solution('6 3 2') == 'NO'\nassert solution('8 5 3') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\nassert solution('8 5 4') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 10 3\") == \"NO\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 1\") == \"11\"\nassert solution(\"1 0 1\") == \"10\"\nassert solution(\"0 1 0\") == \"10\"\nassert solution(\"1 0 0\") == \"1\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1, 1, 0) == \"1100\"\nassert solution(2, 2, 0) == \"1100\"\nassert solution(1, 1, 1) == \"1110\"\nassert solution(1, 1, 2) == \"1110\"\nassert solution(1, 1, 3) == \"1110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\") == \"101100\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('01010') == '1100'\nassert solution('111001') == '101100'\nassert solution('101010') == '110010'\nassert solution('101010') == '101100'\nassert solution('111010') == '110110'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('01010') == '1100'\nassert solution('111001') == '101100'\n\nprint('Success')"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11101\") == \"1100\"\nassert solution(\"1110\") == \"1100\"\nassert solution(\"1110\") == \"1100\"\nassert solution(\"11101\") == \"1100\"\nassert solution(\"101010\") == \"1110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s=\"101100\") == \"110100\"\nassert solution(s=\"111001\") == \"101100\"\nassert solution(s=\"111011010\") == \"01101100\"\nassert solution(s=\"111011011\") == \"111011010\"\n\"\"\"\n\na, b, x = map(int, input().split())\ns = '0' * a + '1' * b + '0' * x\n\nfor i in range(a, len(s)):\n    print(s[i])\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1110\") == \"101010\"\nassert solution(\"11101\") == \"101011\"\nassert solution(\"111111\") == \"1110111\"\nassert solution
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"ccb\"\nassert solution(\"bb\") == \"bcc\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"ab\"\nassert solution(\"cc\") == \"cb\"\nassert solution(\"ca\") == \"ba\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"bc\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cbac\"\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bb'\nassert solution('bb') == 'ac'\nassert solution('bc') == 'cb'\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"bc\") == \"acb\"\nassert solution(\"ca\") == \"cab\"\nassert solution(\"bb\") == \"bac\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n\nx = len(s) * 3\ny = len(t) * 3\n\na = s.count(\"a\")\nb = s.count(\"b\")\nc = s.count(\"c\")"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"ca\") == \"cc\"\n\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ab') == 'c'\nassert solution('ca') == 'bb'\nassert solution('bb') == 'c'\n\nassert solution('abcc') == 'ccc'\nassert solution('cc') == 'c'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"cc\"\nassert solution(\"abcd\") == \"cdabcdab\"\nassert solution(\"caba\") == \"cdabcc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"ccc\"\n\nassert solution(\"ac\") == \"abc\"\n\nassert solution(\"cb\") == \"cbac\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 -1 2') == '3 1 2'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 -2 1\\n\") == \"3 1 2\"\nassert solution(\"5 -1 2\\n\") == \"-1\"\nassert solution(\"4 -1 2\\n\") == \"-1\"\n\n\"\"\"\n\nn = int(stdin.readline())\n\nq = [int(x) for x in stdin.readline().split()]\n\np = [n] * n\n\nfor i in range(n-1):\n    p[i+1] = p[i] + q[i]\n\nprint(*p)\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"1 2 3 4 5 6 7\"\n\nprint(\"Success\")"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 2\") == \"-1\"\nassert solution(\"3 1 -2\") == \"3 -1 2\"\n\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 -1\") == \"3 1 2 4\"\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n1 2 2\") == \"1 2 3 4\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial\n\nn = int(input())\nq = list(map(int, input().split()))\n\nd = Counter(q)\nprint(-1 if d[0] > 0 else 1)\nprint(f\"1 {' '.join(map(str, q[::-1]))}\")\n\n\n\"\"\"\nExample solutions\n\nimport collections\nimport math\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-1 2 2\") == '-1'\nassert solution(\"4\\n1 1 1\") == '1 2 3 4'\nassert solution(\"4\\n2 1 2\") == '1 2 3 4'\nassert solution(\"4\\n-1 2 2\") == '-1'\nassert solution(\"4\\n1 2 1\") == '1 2 3 4'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\") == \"1 2 3 4\"\nassert solution(\"3 1 2\") == \"1 2 3\"\nassert solution(\"5 -1 2\") == \"5 4 3 1 2\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"4\\n-1 2 2\") == \"1 2 3 4\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\nassert solution('10\\n9 8 7 6 5 4 3 2 1') == '6'\nassert solution('100\\n9 8 7 6 5 4 3 2 1') == '26'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == 1\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 3 3') == '2'\nassert solution('3\\n1 2 3') == '1'\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline()\n\nans = 0\nfor i in range(1, int(n)+1):\n    ans = ans + 1 + (i - 1) // 5\nprint(ans)"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '5'\nassert solution('50') == '14'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == 5\nassert solution(10) == 5\nassert solution(1) == 0\nassert solution(20) == 16\nassert solution(10**12) == 10**11\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'2\\n0 1 1\\n1 1 0'\n) == '0 1'\n\nassert solution(\n'15\\n5 5 5\\n5 5 5'\n) == '0 15'\n\nassert solution(\n'3\\n0 0 3\\n3 0 0'\n) == '3 3'\n\nassert solution(\n'686\\n479 178 29\\n11 145 530'\n) == '22 334'\n\nassert solution(\n'319\\n10 53 256\\n182 103 34'\n) == '119 226'\n\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\\n\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\\n\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\\n\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1\\n0 0 3\") == \"3 3\"\nassert solution(\"3\\n0 0 3\") == \"3 3\"\nassert solution(\"686\\n479 178 29\") == \"22 334\"\nassert solution(\"319\\n10 53 256\") == \"119 226\"\n\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5 5\\n5 5 5') == '0 1'\nassert solution('1 1 1') == '0 1'\nassert solution('3 0 3') == '1 2'\nassert solution('686\\n479 178 29') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '2 1'\nassert solution('4 5 5') == '0 4'\nassert solution('2 2 0') == '1 0'\nassert solution('17 0 0') == '0 17'\nassert solution('2 0 1') == '0 1'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\nprint('The local tests are done. Try Solution for HackerRank')"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 6 5\") == \"0 1\"\nassert solution(\"319 3 0 0\") == \"3 3\"\nassert solution(\"686 479 178 29\") == \"22 334\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686 479 178 29\\n11 145 530\") == \"22 334\"\nassert solution(\"319 10 53 256\\n182 103 34\") == \"119 226\"\nassert solution(\"3 1 2\\n1 1 0\") == \"0 1\"\nassert solution(\"3 1 2\\n0 1 0\") == \"0 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == 3\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == 2\nassert solution(\"7 4 1 2 2 1 5 3\") == 3\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7\\n2 3\\n4 5'\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"4\\n4 4\\n1 1\") == \"1 1\\n2 2\"\n\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\"\"\"\n\nn = int(stdin.readline())\nlst = list(map(int, stdin.readline().split()))\n\nblocks = {}\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        if sum(lst[i:j]) not in blocks.keys():\n            blocks[sum(lst[i:j])] = [[i, j - 1]]\n        else:\n            blocks[sum(lst[i:j])].append([i, j - 1])\n\nblocks = list(blocks.items())\nblocks.sort(key=lambda x: x[1], reverse=True)\n\nfor i in range(len(blocks)):\n    if len(blocks[i][1]) > 1:\n        print(len(blocks[i][1]))\n        for j in range(len(blocks[i][1])):\n            print(*blocks[i][1][j])\n    elif len(blocks[i][1]) == 1:\n        print(len(blocks[i][1]))\n        print(*blocks[i][1][0])\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"1\\n1\") == \"1\\n1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"2\\n3 3\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7\") == \"3\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 3') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n3 1 2') == 'NO'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2 1\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 3\") == \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3') == 'YES'\nassert solution('4\\n3 1 2') == 'NO'\nassert solution('4\\n3 1 2 4') == 'NO'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0\\n0'\nassert solution('a') == '1\\na'\nassert solution('aa') == '2\\naa'\nassert solution('ab') == '3\\nab'\nassert solution('aba') == '4\\nba'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"accd\") == -1\nassert solution(\"abcd\") == 0\n\nassert solution(\"abcdef\") == \"abdcef\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcfe'\n\nassert solution('abcde') == 'abcd'\nassert solution('abcdee') == 'abcdee'\n\nassert solution('abcd') == 'abcd'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"abcef\") == 3\nassert solution(\"abcde\") == 4\n\"\"\"\n\nimport sys\n\nn = int(input().strip())\ns = input().strip()\nt = input().strip()\n\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n - 1):\n    if s[i] == t[i]:\n        dp[i][i + 1] = 1\n    if s[i] == t[i + 1]:\n        dp[i][i + 1] = 1\n\nfor i in range(n - 2):\n    for j in range(n - 1):\n        if s[j] == t[i]:\n            dp[j][j + 2] = max(dp[j + 1][j + 2], dp[j][j + 1] + 1)\n        elif s[j + 1] == t[i + 1]:\n            dp[j][j + 2] = max(dp[j][j + 1], dp[j + 1][j + 2])\n\nfor i in range(n - 2, -1, -1):\n    for j in range(n - 1, i, -1):\n        if s[j] == t[i]:\n            dp[j][j + 1] = max(dp[j + 1][j + 1], dp[j][j + 1] + 1)\n        elif s[j + 1] == t[i + 1]:\n            dp[j][j + 1] = max(dp[j][j + 1], dp[j + 1][j + 1])\n\nm = max(dp[0][-1], dp[-1][0])\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\n\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"abdc\") == \"accd\"\nassert solution(\"abdd\") == \"accd\"\nassert solution(\"abde\") == \"accd\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdef\", \"abdcef\") == \"3 5 4 5\", 'wrong result'\nassert solution(\"abcd\", \"accd\") == -1, 'wrong result'"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcef'\nassert solution('aacd') == 'aacd'\nassert solution('aa') == 'a'\n\"\"\"\n\n\n\"\"\"\nsolution 1\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba') == 'SPPSPSPS'\nassert solution('3\\na\\naa\\naa\\na\\n') == 'PPSS'\nassert solution('2\\na\\nc\\n') == 'PS'"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ababa\") == \"PSPSPSPS\"\nassert solution(\"aaaa\") == \"PSPS\"\nassert solution(\"ac\") == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\naa\\na\") == \"PPSS\"\nassert solution(\"2\\na\\nc\") == \"PS\"\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ba\") == 'SPPSPSPS'\nassert solution(\"a\") == 'PS'\nassert solution(\"abab\") == 'SPPSPSPS'\nassert solution(\"a\") == 'PS'\nassert solution(\"aba\") == 'PPSS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == 'PSPSPSPS'\nassert solution(\"3\\na\\naa\\naa\\na\\n\") == 'PS'\nassert solution(\"2\\na\\nc\\n\") == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"SPS\"\nassert solution(\"ababa\") == \"SPSSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"a\" * 5) == \"PSPSPSPS\"\nassert solution(\"b\" * 4) == \"PSSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == 'PSPSPSPS'\nassert solution(\"3\\na\\naa\\naa\\na\") == 'PS'\nassert solution(\"2\\na\\nc\") == 'PS'\n\n\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == 'PSPSPSPS'\nassert solution('''3\na\naa\naa\na''') == 'PPSS'\nassert solution('''2\na\nc\n''') == 'PS'\n'''"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\naa\\na\") == \"PPSS\"\nassert solution(\"2\\na\\nc\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"PS\"\nassert solution(\"ab\") == \"PS\"\nassert solution(\"aba\") == \"PS\"\nassert solution(\"abab\") == \"SPPS\"\nassert solution(\"abaab\") == \"SPPS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\nimport sys\n\narr = [int(i) for i in sys.stdin.readline().strip().split(\" \")]\nm = max(arr)\nprint(arr.index(m) + 1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n\na = [int(i) for i in stdin.split()]\nans = 0\nfor i in range(0, len(a)):\n    if a[i] % 2 == 1:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == 0\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 4 6 8 10''') == '1'\nassert solution('''10 10 10 10 10 10 10 10 10 10 10 10 10''') == '1'\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1''') == '0'\nassert solution('''2 1 2 1 2 1 2 1 2 1 2 1''') == '1'\nassert solution('''2 2 2 2 2 2 2 2 2 2 2 2''') == '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\"\"\"\nfrom __future__ import annotations\nfrom typing import List\n\ntest_cases = [\n    (2, 4, 6, 8, 10),\n]\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"3\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom typing import List\n\nfrom input_utils import decode_input\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4 6') == '4'\nassert solution('1 2 3 4 6 7') == '7'\nassert solution('1 2 3 4 6 7 8') == '8'\nassert solution('1 2 3 4 6 7 8 9') == '9'\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 1 1') == '0'\nassert solution('5 1 1 1') == '0'\nassert solution('4 0 0 0') == '0'\nassert solution('1 1 1 1') == '0'\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 1 1\") == \"0\"\nassert solution(\"4 1 1 1 1\") == \"0\"\nassert solution(\"5 1 1 1 1\") == \"0\"\nassert solution(\"5 0 1 1 1\") == \"0\"\nassert solution(\"4 1 1 0 0\") == \"2\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('4\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 1 1\") == \"0\"\nassert solution(\"5 1 1 1\") == \"0\"\nassert solution(\"6 1 1 1\") == \"0\"\nassert solution(\"6 0 0 1\") == \"0\"\n\"\"\"\n\nimport sys\nimport string\nimport itertools\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nk = 0\ni = 0\nwhile i < n - 1:\n    if a[i] == a[i+1]:\n        k += 1\n    else:\n        k = 0\n    i += 1\n\nprint(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('4\\n1 1 1 1') == '0'\n\n\n---\n\nclass Solution:\n    def __init__(self, input):\n        self.input = input\n        self.house = []\n    \n    def solve(self):\n        for i in self.input:\n            self.house.append(int(i))\n\n    def num(self):\n        a = 0\n        for i in range(1, len(self.house)):\n            if self.house[i] == 0:\n                if self.house[i - 1] == self.house[i + 1] == 1:\n                    a += 1\n                else:\n                    a = 0\n        return a\n\n    def __repr__(self):\n        return self.num()\n        \n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\nimport sys\nassert sys.stdin.read() == solution(sys.stdout.read())\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n6\\n12') == '2'\nassert solution('3\\n6\\n12\\n18') == '3'\nassert solution('3\\n6\\n12\\n18\\n30') == '1'"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"1\\n\"\nassert solution(\"6\\n6 90 12 18 30 18\\n\") == \"4\\n\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n\n\nimport unittest\nfrom io import StringIO\nimport sys\n\n\nclass TestGCD(unittest.TestCase):\n    def test_print_one_gcd(self):\n        self.assertEqual(solution('5\\n1 2 3 4 5'), '2')\n\n    def test_print_two_gcd(self):\n        self.assertEqual(solution('6\\n6 90 12 18 30 18'), '4')\n\n    def test_print_three_gcd(self):\n        self.assertEqual(solution('1\\n1'), '1')\n\n    def test_print_more_than_three_gcd(self):\n        self."
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == 2\nassert solution('6 90 12 18 30 18') == 4\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 90 12 18 30 18\") == 4\nassert solution(\"5 9 15 21 23\") == 4\nassert solution(\"1 2 3 4 5\") == 1\n\nimport sys\nassert sys.stdin.readline() == \"5\\n1 2 3 4 5\\n\"\nassert sys.stdin.readline() == \"6 90 12 18 30 18\\n\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == 1\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 90 12 18 30 18\") == \"4\"\nassert solution(\"5 12 32 10 8\") == \"3\"\nassert solution(\"6 90 12 18 30 18\") == \"4\"\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_1) == answer_1\nassert solution(test_2) == answer_2\nassert solution(test_3) == answer_3\nassert solution(test_4) == answer_4\nassert solution(test_5) == answer_5\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\n-----Solution-----\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 90 12 18 30 18\\n\") == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a1) == x1\nassert solution(a2) == x2\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"4\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n100\\n1\\n2\\n3\\n4\\n5\") == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2') == '1'\nassert solution('2\\n1,1') == '2'\nassert solution('2\\n1,2') == '2'\nassert solution('2\\n2,1') == '2'\nassert solution('3\\n1,1,1') == '1'\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n\") == \"2\"\nassert solution(\"1 2 4\\n\") == \"0\"\nassert solution(\"1 2 3 3 3 2\\n\") == \"3\"\nassert solution(\"1 1 1\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncoins = list(map(int, input().split()))\n\ncounts = {}\n\nfor coin in coins:\n    if coin in counts:\n        counts[coin] += 1\n    else:\n        counts[coin] = 1\n\nresult = 0\n\nfor count in counts.values():\n    result += (count + 1) // 2\n\nprint(result)\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 2\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n') == '2'\nassert solution('2 2\\n') == '0'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3') == 2\nassert solution('5 10') == -1\nassert solution('10 3') == 3\nassert solution('0 0 0 0 0') == -1\n\nassert solution('1 0 0 0 1') == 1\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3\n0 0 1 1 0 1 0 0 0 1''') == '3'\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '-1'\nassert solution('''6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''6 3\n0 0 1 1 0 1\n''') == '2'\nassert solution('''6 3\n0 0 1 1 0 0\n''') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\\n\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"10 3\\n0 0 0 0 0 0 0 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n0 1 1 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0 0\") == \"-1\"\nassert solution(\"5 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\nassert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"10 3\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nNotes:\n\n1. solution(n, r)\n    * calculate min_heaters\n    * if min_heaters == n, return 0\n    * otherwise, return min_heaters\n\n\"\"\"\n\n\n\"\"\"\nalgo:\n\nn, r = map(int, stdin.split())\n\nheaters = list(map(int, stdin.split()))\n\nmin_heaters = 0"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n1 0 0 0 1\") == \"2\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 10\\n0 0 0 0 0 0 0 0 0 0 0\") == \"9\"\n\n\"\"\"\n\nfrom typing import Callable\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n1 0 0 0 1\") == 2\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"6 2\\n0 1 1 0 0 1\"\n) == \"3\"\n\nassert solution(\n    \"5 3\\n0 0 0 0 1\"\n) == \"2\"\n\nassert solution(\n    \"5 10\\n0 0 0 0 0\\n\"\n) == \"-1\"\n\nassert solution(\n    \"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\"\n) == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 10\\n0 0 0 0 0') == '-1'\nassert solution('6 2\\n0 1 1 0 0 1') == '3'\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'6 2'\n) == 3\nassert solution(\n'5 3'\n) == 2\nassert solution(\n'10 3'\n) == -1\nassert solution(\n'5 10'\n) == 3\nassert solution(\n'10 10'\n) == -1\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 2\nassert solution(3) == 3\n\"\"\"\nimport math\n\nimport pytest\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '3\\n'\nassert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '2\\n'\nassert solution('4\\n') == '4\\n'\nassert solution('5\\n') == '6\\n'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '3'\nassert solution('1') == '0'\nassert solution('3') == '2'\n\n-------\n\nimport collections\n\nn = int(stdin.readline())\n\ns = set()\nfor i in range(1, n+1):\n    for j in range(i+1, n+1):\n        x = i * j\n        s.add(x)\n\nprint(len(s))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 3\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '3'\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"10\") == \"8\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(()(()))\") == 3\n\n\"\"\"\n\nn = int(stdin.readline())\nstring = stdin.readline()\n\ncount = 0\nfor i in range(n):\n    if string[i] == ')' and string[i - 1] == '(':\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"((())\") == 0\nassert solution(\"()()())\") == 4\nassert solution(\"()()(()())()()(()())()\") == 10\nassert solution(\"())\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\")(()\") == 0\nassert solution(\"()()\") == 1\nassert solution(\")(())\") == 2\nassert solution(\"())(())\") == 1\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()\") == 0\nassert solution(\")(\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"((()))\") == 0\nassert solution(\"()(())\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\")(\") == 0\nassert solution(\"((()\") == 1\nassert solution(\"(((\") == 3\n\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(((())\")) == 3\nassert solution(\"())(\") == 0\nassert solution(\"()))((()))((())(\") == 2\nassert solution(\"(())((()(()(()(()))(()))())())\") == 5\nassert solution(\"(((((((((((((((((((((())))))()))())())())()()(())(())()())))))))((((((((((((((((((((())))))()))())())())())()(())(())(()(())())((()(()(()(()(()(()()(()((()))(()))(()))(())))(((()((()(()(()()()((()(((((())(()())((())))((()(()(()(()(())(()((()(()()(()(())(())(()(())((())(((()()(((()((((()()()()((()(()(()(()(())(())((()(())((()(()(()(()(((())((()(()(((()(()(()(()(()(()(()(()((()(()(()(()(()(()(()(()(()((()(((((())((()(()(()(()(()(()((()(()(()(()(()(()(()(()(()(()(()((()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()())\") == 0\nassert solution(\")))((((((\") == 0\nassert solution(\"(((((((((\") == 0\nassert solution(\"))(((((((((((((((((((((\") == 0\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(((()))\") == 3\nassert solution(\"(()())()\") == 4\nassert solution(\"()())()\") == 3\nassert solution(\"((())())\") == 0\nassert solution(\"(())((())()())\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('()()') == 1\nassert solution(')(') == 0\n\nassert solution('))((') == 0\nassert solution('((()') == 1\nassert solution('()((()') == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"))(((((\") == 0\n\nassert solution(\"()\") == 0\nassert solution(\"(()()())\") == 5\nassert solution(\"(()()()())\") == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 4\nassert solution(\"tset\") == 3\nassert solution(\"test\") == 4\nassert solution(\"test\") == 4\nassert solution(\"tst\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaa') == 1\nassert solution('ababab') == 2\nassert solution('aaaa') == 0\nassert solution('aaaaa') == 1\nassert solution('aaaab') == 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"tst\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"sadfsadf\") == \"fadfsadf\"\nassert solution(\"sadfadsfadsfadsfadsfadsfadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfadsfadsfadsfsdadsfadsfsdadsfadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfsdadsfadsfs"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"ab\"\nassert solution(\"abcde\") == \"cd\"\nassert solution(\"abcdee\") == \"de\"\nassert solution(\"abcdef\") == \"fg\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"z\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaaaaaaaaaaaaa') == 0\nassert solution('a') == 0\nassert solution('aab') == 0\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"s\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"\") == 0\nassert solution(\"a\") == 0\nassert solution(\"ab\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"\") == 0"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('test') == 3\nassert solution('abcd') == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('test') == 2\nassert solution('tst') == 1\nassert solution('tt') == 0\nassert solution('et') == 1\nassert solution('e') == 0"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1 1') == '2'\nprint('Test succeeded')\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\nimport os"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\nfrom typing import List\nfrom utils import *\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1\") == 2\n\"\"\"\n\nfrom math import ceil, gcd\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\nassert solution('1 2 1 3') == '2'\nassert solution('2 3 4 5') == '12'\n\nimport re"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5 2\") == \"2\"\n\"\"\"\n\n\"\"\"\n\n4 3 5 2\n\na b c d\n\n1 2 1 1\n\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 1\") == \"2\"\n\"\"\"\n\na, b, c, d = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == 2\n\"\"\"\n\na, b, c, d = [int(x) for x in stdin.split()]\n\nans = 0\n\nfor x in range(a, b+1):\n    for y in range(c, d+1):\n        if x*y > ans:\n            ans = x*y\n\nprint(ans)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 1 4 4 6') == 2\nassert solution('8 5 3 4 5 2') == 2\nassert solution('1 2 3 4 4 5') == 0\nassert solution('9 7 8 3 4 5') == 1\nassert solution('1 4 3 4 3 5') == 0\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 4 6 7\\n') == '2'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n9 1 4 4 6 7\\n\") == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6\n9 1 4 4 6 7''') == '2'\n\nprint(solution(input()))\n\n-------------"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n2 2 1 1\"\n) == \"2\"\nassert solution(\n    \"10\\n9 6 4 8 3 2 1 5 10\"\n) == \"4\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n9 1 4 4 6 7\\n') == '2'\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 9 1 4 4 6 7\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 0 4\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"8 8 7 7\") == \"0\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\nprint(solution(\"7 24 21 23\\n16 17 14 20 20 11 22\"))\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = Counter()"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nn, h, l, r = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ngood_times = 0\n\nfor i in range(n):\n    if l <= (a[i] - 1) <= r:\n        good_times += 1\n\nprint(good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 16 17 14 20 20 11 22') == 3\n\"\"\"\n\nn, h, l, r = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\ns = 0\ngood_times = 0\nfor i in range(n):\n    if (s + a[i]) > l and s < r:\n        good_times += 1\n    s += a[i]\nprint(good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 24 21 23\n16 17 14 20 20 11 22''') == '3'\nassert solution('''3 2 1\n4 2 1''') == '0'\nassert solution('''7 24 21 23\n16 17 14 20 20 11 22\n1 2 3 4 5 6 7''') == '0'\nassert solution('''7 24 21 23\n16 17 14 20 20 11 22\n15 15 15 15 15 15 15 15''') == '3'\nassert solution('''1\n0''') == '0'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\") == 3\nassert solution(\"16 17 14 20 20 11 22\") == 3\nassert solution(\"7 24 21 23 7 5 16 10 21 20 22 17 18 19 14 20 10 7 4 12 15 8 12 10 11 22 19 16 17 17 23 21 16 16 19 12 21 19 16 19 7 11 10 12 5 6 14 21 22 23 19 19\") == 6\nassert solution(\"7 24 21 23 7 5 16 10 21 20 22 17 18 19 14 20 10 7 4 12 15 8 12 10 11 22 19 16 17 17 23 21 16 16 19 12 21 19 16 19 7 11 10 12 5 6 14 21 22 23 19 19\") == 6\nassert solution(\"5 9 3 4 7 8 10 5 4 3 2 1 1 2 3 3 4\") == 4\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 24 21 23\n16 17 14 20 20 11 22''') == '3'\nassert solution('''1 1 1 1\n0 1 1 1''') == '1'\nassert solution('''1 1 1 1\n1 0 1 1''') == '1'\nassert solution('''1 1 1 1\n1 1 0 1''') == '1'\nassert solution('''1 1 1 1\n1 1 1 0''') == '1'\n\n'''\n7 24 21 23\n16 17 14 20 20 11 22\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n'''\n\n7 24 21 23\n16 17 14 20 20 11 22\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n1 1 1 1\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 24 21 23') == '3'\nprint('Test pass.')\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\n\nassert solution('5\\n2 10 50 110 250\\n') == '1'\n\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\nassert solution('3\\n4 7 12 100 150 199\\n') == '1'\n\nassert solution('5\\n2 10 50 110 250\\n') == '1'"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\"\"\"\nimport unittest\nfrom collections import deque\nfrom typing import List\n\nfrom icontract import require, DBC\n\nfrom python.common.input_output import read_integers\nfrom python.common.problem_23 import Problem_23\n\n\nclass Problem_41(unittest.TestCase):\n    def test_example_1(self) -> None:\n        self.assertEqual(solution('10\\n1 2 5 6 7 10 21 23 24 49'), '4')\n\n    def test_example_2(self) -> None:\n        self.assertEqual(solution('5\\n2 10 50 110 250'), '1')\n\n    def test_example_3(self) -> None:\n        self."
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\nSolution\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == '4'\nassert solution(\"5\\n2 10 50 110 250\") == '1'\nassert solution(\"6\\n4 7 12 100 150 199\") == '3'\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 12 100 150 199\") == \"3\"\nassert solution(\"5 10 50 110 250\") == \"1\"\nassert solution(\"6 4 7 12 100 150 199\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == '4'\nassert solution(\"5\\n2 10 50 110 250\") == '1'\nassert solution(\"6\\n4 7 12 100 150 199\") == '3'"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 11 3 7\") == \"1 2\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5\\n2 4 8 3 6\"\n) == \"1 2\"\nassert solution(\n\"5\\n5 2 11 3 7\"\n) == \"2 4\"\nassert solution(\n\"6\\n2 5 10 1 10 2\"\n) == \"1 4\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '1 2'\nassert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 4 8 3 6\\n') == '1 2'\nassert solution('6\\n2 5 10 1 10 2\\n') == '1 4'\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 5 10 1 10 2\") == \"1 4\"\n\"\"\"\n\nfrom typing import List, Dict\n\nimport functools\nimport math\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3 5 7''') == '1 2'\nassert solution('''6\n2 5 10 1 10 2''') == '1 4'\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"00101\") == \"01120\"\nassert solution(\"120110\") == \"120120\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1123\") == \"12301\"\nassert solution(\"1211\") == \"12110\"\nassert solution(\"12110\") == \"12120\"\nassert solution(\"12101\") == \"12110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('010') == '0'\nassert solution('101') == '1'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211200'\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('121') == '021'\nassert solution('1') == '11'\nassert solution('212') == '2112'\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10011010\") == \"10110110\"\nassert solution(\"211200\") == \"211202\"\nassert solution(\"120110\") == \"120120\"\n\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('121') == '021'\nassert solution('120110') == '120120'\n\nprint(solution('120110'))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211220\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"100100\") == \"100110\"\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('121') == '021'\n\nassert solution('111') == '111'\n\nassert solution('121') == '021'\n\nassert solution('120110') == '120120'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n3') == '1'\nassert solution('4 2\\n3\\n4') == '0'\nassert solution('4 1\\n3\\n4') == '4'\nassert solution('4 2\\n3\\n4\\n2\\n2') == '1'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\n\"\"\"\n\n\"\"\"\nFor the problem description, refer to the \"Sample Input\" section.\n\nConstraints:\n1 <= N <= 10^5\n0 <= M <= N - 1\n1 <= a_i < a_{i+1} <= N - 1\n\nBrute force\n\"\"\"\nimport math\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n        self.arr = [int(x) for x in self.stdin.split('\\n')[:2]]\n        self.step = self.arr[1]\n        self.stairs = self.arr[0]\n        \n    def solve(self) -> str:\n        # total number of stairs is 1 + (arr[1]-1) +... + (arr[n]-1)\n        total = self.stairs * (self.step + 1)\n        # possible ways is 1 + (arr[1]-1) + (arr[2] - (arr[1]-1) +... + (arr[n]-1)\n        # subproblem is 1 + (arr[1]-1) + (arr[2] - (arr[1]-1) +... + (arr[n]-1)\n        possible = self.stairs\n        for i in range(1, self.step):\n            possible *= (self.stairs - i) % (1e9 + 7)\n            possible %= (1e9 + 7)\n        return str(total - possible)\n        \n        \n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n3\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\n\nfrom itertools import permutations, combinations\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\\n\"\nassert solution(\"7 3\\n1\\n3\\n4\\n4\\n6\\n1\\n5\\n1\\n6\\n2\\n5\\n6\\n7\\n1\\n5\\n1\\n5\\n2\\n6\\n7\\n6\\n4\\n5\\n3\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\n6\\n6\\n4\\n6\\n5\\n6\\n7\\n5\\n1\\n4\\n4\\n1\\"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1\\n2\\n3\\n4\\n5\\n') == '5'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n3\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 3\n1\n2\n3\n4\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n6 1\n3\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\\n\") == '2'\n\n\"\"\"\n\nX, K, D = map(int, stdin.read().split())\nprint((X - D) if X - D > 0 else (X + D))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nfrom math import ceil, floor\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n\nimport os"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(2)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"-10 10 -10\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\n\"\"\"\nThe following solution is based on the observation that if we make a move of length d and move K times, then we will end up at a coordinate of (X - Kd + (K - 1)d). The absolute value of the resulting coordinate will be the same as the absolute value of the original coordinate, so the minimum absolute value is the same as the absolute value of the original coordinate.\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == 2\n\"\"\"\nimport math"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"2128506\") == \"3\"\n\nprint(\"\u2705 Valid test\")\n\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == 2\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nassert solution(\"2128506\") == \"3\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 1\nassert solution('11') == 2\nassert solution('61441') == 10\nassert solution('571576') == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 3\n\"\"\"\n\nfrom math import ceil, log10\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '10'\nassert solution('2128506') == '3'\nassert solution('1111111111111111111111111111111111111') == '31'\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u043e n \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(n).\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f f(n) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\nf(n) = 3 \u043f\u0440\u0438 n \u2264 4\nf(n) = f(n \u2212 1) + 2 \u00b7 f(n \u2212 2) + 3 \u00b7 f(n \u2212 3) \u043f\u0440\u0438 n > 4\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u0437\u0430\u0434\u0430\u0447\u0435 \u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0441\u043b\u0443\u0447\u0430\u0438, \u043a\u043e\u0433\u0434\u0430 n \u2264 4 \u0438 n \u2265 5\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0432\u043e\u0434    \u0412\u044b\u0432\u043e\u0434\n7       28\n11      132\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('2128506') == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 2\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\n\nprint(a * (a + 1) // 2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 27\n-----Do not edit the input-----\na = int(input())\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '27'\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '27'\n\"\"\"\n\na = int(input())\n\ns = 0\nfor i in range(1, a + 1):\n    s += i\nprint(s)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '27'\n\"\"\"\nimport math"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"27\"\n\"\"\"\na = int(input())\nprint((a*(a+1))//2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 6\nassert solution(\"5\") == 10\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"17\") == 1\nassert solution(\"48\") == 0\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n\"\"\"\n\na = int(input())\nprint(a % 10)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n\nfrom pathlib import Path\nfrom typing import Optional\n\nimport numpy as np\n\n_ROOT = Path(__file__).parent\n\nINPUT_FILE = _ROOT / 'input.txt'"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 3 1\") == 4\n\nsolution(stdin)"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '2 1 3 4'\nassert solution('3 4 5 2 1') == '4 5 2 1 3'\nassert solution('2 4 1 5 3') == '4 1 5 3 2'\nassert solution('1 2 3 4 5') == '2 1 4 3 5'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split(' ')))\n\nmax_ = l[0]\nfor i in range(1, len(l)):\n    if l[i] > max_:\n        max_ = l[i]\n\nprint(max_)\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 5 3 1\") == 4\n\n-------------------\n\n\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u0442\u0430\u043b\u043e \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0438.\n\n\u0421\u0442\u0440\u043e\u043a\u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 10.\n\n\u0421\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u0434\u0432\u0443\u043c\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u043c\u0438 \u043e\u0442 \u0441\u043b\u043e\u0432\u0430.\n\n\u0415\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0435\u0433\u043e \u0441\u043b\u043e\u0432\u0435, \u0430 \u043d\u0435 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0443, \u0442\u043e \u043c\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438. \u0412\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u043b\u043e\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435. \u0412 \u043a\u043e\u043d\u0446\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0441\u043b\u043e\u0432\u0430. \u0418 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.\n\n\u0415\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0443, \u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0435 \u0447\u0435\u0442\u044b\u0440\u0435 \u0441\u043b\u043e\u0432\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0442\u043e\u043c \u0436\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u0430\u043a\u043e\u043c \u043e\u043d\u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b. \u0421\u043b\u043e\u0432\u0430 \u043d\u0443\u043c\u0435\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442 1 \u0434\u043e 9. \u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0441\u043b\u043e\u0432\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0443, \u0442\u043e \u043e\u043d\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u044b\u043c.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\n-----Example-----\nInput\n2\n1 2 3\n4 2 5 6\n\nOutput\n5\n4\n\n\n-------------------\n\u041d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043d\u0430 \u0435\u0433\u043e \u043d\u0438\u0437\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f? \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u043a\u043e\u0434 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0432\u0435\u0440\u0438\u044f \u043e\u0442 \u0437\u043d\u0430\u043a\u043e\u043c\u044b\u0445? \u0421\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e.\n\n\u0418\u043c\u0435\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0441\u043b\u043e\u0432. \u0421\u043b\u043e\u0432\u0430 \u043d\u0443\u043c\u0435\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442 1 \u0434\u043e 9. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u044f.\n\n\u0421\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u043a\u0430\u043a \u043f\u043e \u0438\u0445 \u0441\u043b\u043e\u0432\u0430\u043c, \u043a\u0430\u043a \u043f\u043e \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u041f\u0435\u0440\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0421\u043b\u043e\u0432\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u044b\u043c, \u0430 \u043f\u0435\u0440\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u043d\u0443\u043c\u0435\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442 1 \u0434\u043e 9.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn (1\u2264n\u226410) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f nn \u0441\u043b\u043e\u0432.\n\n\u0421\u043b\u043e\u0432\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0438\u0437 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432 \u043e\u0442 a \u0434\u043e z.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\n-----Example-----\nInput\n3\nabc\nabcd\nabcb\n\nOutput\n1\n1\n1\n\n\n-----Example-----\nInput\n3\nturtle\niota\nsun\n\nOutput\n1\n1\n1\n\n-------------------\n\n\u0412 \u0434\u043e\u043c\u0435 \u043d\u0435\u0442 \u0432\u043e\u0434\u044b. \u0412 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435 \u043d\u0435\u0442 \u0435\u0434\u044b \u0438 \u0433\u043e"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 2 3 4 5') == ''\nassert solution('1 2 2 3 3 3 3') == ''\nassert solution('1 1 1 1 1 1 1') == ''"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 5 3 1\") == \"4\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    ans ^= a[i]\nprint(ans)\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 3 1') == 4\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\"\"\"\n\n\"\"\"\n\u041e\u0431\u043c\u0435\u043d\u043d\u0438\u043a. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u0443\u043c\u043c\u0443 \u0434\u0435\u043d\u0435\u0433 \u0438 \u043d\u043e\u043c\u0435\u0440\n\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430, \u043a\u0443\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u0438 \u0434\u0435\u043d\u044c\u0433\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e\n\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u0451\u043b \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435\n\u0434\u0430\u043d\u043d\u044b\u0435. \u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u043e\u0431\u043c\u0435\u043d \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0438 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n\n2021-06-02T06:15:52.521553Z    INFO    Client #1 started session\n2021-06-02T06:15:52.521551Z    INFO    Cashier #1 started session\n2021-06-02T06:15:52.521558Z    INFO    Money from client: 20\n2021-06-02T06:15:52.521559Z    INFO    Money from client: 30\n2021-06-02T06:15:52.521560Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521561Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521562Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521562Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521562Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521562Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521562Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521563Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521563Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521563Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521563Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521563Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521563Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521563Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521563Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521563Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521563Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521564Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521564Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521564Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521564Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521564Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521564Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521564Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521564Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521564Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521564Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521564Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521564Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1 finished session\n2021-06-02T06:15:52.521565Z    INFO    Cashier #1 finished work\n2021-06-02T06:15:52.521565Z    INFO    Client #1"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\n\n-----Explanation-----\n    \n    (4, 5, 3, 1) is sorted in descending order.\n    Therefore, the function should return 4.\n    \n    \n'''\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 5 3 1') == 4\nprint(solution('4 2 5 3 1'))\n\n-----Problem-----\n\nFor each test case, return the minimum number of operations needed to obtain the desired result.\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\nprint('The local tests are done. Click on \"Check\" for possible random tests')\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8 7\\n8 1\\n6 10\") == '2 8 1\\n8 1\\n1 1'\nassert solution(\"5 8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == '2 8 1\\n8 1\\n1 1'\nassert solution(\"5 8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n999999733 999999732\\n999999733 999999732\\n999999733 999999732\\n999999733 999999732\\n999999733 999999733\\n999999733 999999733\") == '2 8 1\\n8 1\\n1 1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 1\\n8 7') == '2'\nassert solution('8 7') == '2'\nassert solution('8 10') == '8'\nassert solution('999999733 999999732\\n999999733 999999733') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nprint(solution(\"2 2\\n2 1 2\\n1 2\\n0 1\"))\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\nprint(\"Test 1 PASSED\")\n\nassert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\nprint(\"Test 2 PASSED\")\n\nassert solution(\"2 2\\n1 2\\n0 1\") == 1\nprint(\"Test 3 PASSED\")\n\nassert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 0\nprint(\"Test 4 PASSED\")\n\nassert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 0\nprint(\"Test 5 PASSED\")"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2 3\n1 3\n2 3\n0 0\n0 0\n1 1\n''') == '1'\nassert solution('''\n2 4\n1 2 3\n0 1\n1 1\n''') == '1'\nassert solution('''\n2 1\n1 2\n0 1\n0 0\n''') == '0'\nassert solution('''\n2 3\n1 2 3\n1 3\n2 3\n0 0\n0 0\n0 0\n''') == '0'\nassert solution('''\n4 3\n1 2 3\n1 3\n2 3\n1 1\n1 2\n''') == '4'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n2 1 2\n1 2\n0 1\n''') == '1'\n\n----------------------\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n0 2\\n1 1\\n0 2\\n1 1\\n0 1\\n1 1\\n0 2\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n0 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"1 3\\n1 2\\n0 2\") == \"0\"\nassert solution(\"3 3\\n2 1 3\\n1 2\\n0 3\") == \"1\"\nassert solution(\"3 3\\n2 2 3\\n1 2\\n0 3\") == \"0\"\nassert solution(\"4 3\\n2 1 4\\n1 2\\n0 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\nprint('Test pass.')\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\na, b, h, m = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000\"\n\n\"\"\"\n\nimport math\n\na, b, h, m = [float(x) for x in stdin.split()]\n\nr_hour = a / 2\nr_min = b / 2"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 9 0') == '5.00000000'\n\"\"\"\n\nimport sys\n\nH = int(sys.stdin.readline().strip())\nM = int(sys.stdin.readline().strip())\nA = int(sys.stdin.readline().strip())\nB = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\n\"\"\"\n\u89e3\u984c\u601d\u8def:\n\n\u6574\u6578\u8f49\u79d2\u6578:\n(a,b) -> a*3600 + b*60\n\n\u79d2\u6578\u8f49\u63db\u6210\u516c\u5c3a:\n(a,b) -> a/3600 + b/60\n\n\u9019\u984c\u662f\u53ef\u4ee5\u5047\u8a2d\u5c0f\u6642\u8207\u5206\u9418\u76f8\u540c\u7684\u52a0\u901f\u89d2\u5ea6\u4e00\u6a23\uff0c\u53ef\u4ee5\u7528\u540c\u6a23\u7684\u65b9\u6cd5\u5f9e\u6642\u9593\u958b\u59cb\u8a08\u7b97\uff0c\u76f4\u5230\u6700\u5f8c\u5169\u9ede\u5011\u91cd\u758a\u3002\n\n\u6642\u9593(H) \u8ddf \u5206\u9418(M) \u5247\u70ba a*3600 + b*60\n\n\u8a08\u7b97\u52a0\u901f\u5ea6:\n\u5206\u5b50\u662f\u5c0f\u6642\uff0c\u5206\u6bcd\u662f\u5c0f\u6642*60\u5206\u9418\uff0c\u6700\u5f8c\u8a08\u7b97\u5c0f\u6642\u500b\u500b\u52a0\u901f\u5ea6\n\u5206\u5b50\u662f\u5206\u9418\uff0c\u5206\u6bcd\u662f\u5206\u9418*60\u5c0f\u6642\uff0c\u6700\u5f8c\u8a08\u7b97\u5206\u9418\u500b\u500b\u52a0\u901f\u5ea6\n\n\u8a08\u7b97\u9ede:\n\u6700\u5f8c\u5229\u7528\u5206\u5b50\u548c\u5206\u6bcd\u76f8\u4e58\n\"\"\"\nimport math\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 9 0') == '5.00000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 2 2 3 3 3\") == \"6\"\n\"\"\"\n\nimport sys\n\ninp = sys.stdin.read()\na = [int(s) for s in inp.split() if s.isdigit()]\nl = a[0]\nm = a[1]\n\nli = [int(s) for s in inp.split() if s.isdigit()]\nli.sort()\n\nprint(li)\n\nres = 0\n\nfor i in range(len(li)):\n    for j in range(i + 1, len(li)):\n        if li[i] + li[j] == m:\n            res += 1\n\nprint(res)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 4\") == \"8\"\nassert solution(\"3 5\") == \"97\"\nassert solution(\"3 5 4 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\nassert solution(\"5 4 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 4 5 60 4\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == m\n'''\n\nn, m = [int(i) for i in input().split(' ')]\na = [int(i) for i in input().split(' ')]\n\na.sort()\n\ncount = 0\n\nfor i in range(n):\n    if i == 0:\n        if (m - a[i]) < (m - a[i + 1]):\n            count += 1\n    else:\n        if (a[i - 1] - m) > (a[i] - m):\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '5 4'\n) == '8'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 0') == '0'\nassert solution('2 -2 3 1 2') == '6'\nassert solution('1 0') == '0'\nassert solution('1000000') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4\") == \"6\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"5 4\") == \"7\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 4\\n5 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('6 4\\n1 -2 1 1 1\\n2 -4 1 4 4\\n3 -1 -2 1 2\\n2 1 -3 1\\n1 -3 -4 3\\n') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n1 4'\n\"\"\"\n\n\"\"\"\n\u4eca\u56de\u306e\u554f\u984c\u306b\u306f\u3001\u30bb\u30b0\u6728\u304c\u9593\u306b\u5408\u3046\u3088\u3046\u306a\u3082\u306e\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u9078\u629e\u65b9\u6cd5\u3092\u7528\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u914d\u5217 a \u306b\u304a\u3051\u308b\u9078\u629e\u3059\u308b\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u958b\u59cb\u3068\u7d42\u4e86\u4f4d\u7f6e\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n\n\u30bb\u30b0\u6728\u306e\u4e0b\u306b\u306f\u958b\u59cb\u4f4d\u7f6e\u3001\u7d42\u4e86\u4f4d\u7f6e\u306e\u30bb\u30b0\u6728\u304c\u3042\u308a\u3001\u305d\u306e\u4e2d\u3067\u3082\u958b\u59cb\u4f4d\u7f6e\u3068\u7d42\u4e86\u4f4d\u7f6e\u304c\u3069\u306e\u3088\u3046\u306b\u9023\u7d50\u3055\u308c\u3066\u3044\u308b\u304b\u304c\n\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u3002\n\u305d\u308c\u3089\u306e\u30bb\u30b0\u6728\u306e\u9078\u629e\u3092\u3001\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u7d42\u4e86\u4f4d\u7f6e\u307e\u3067\u4e00\u3064\u305a\u3064\u306e\u9078\u629e\u3092\u884c\u3046\u3088\u3046\u306b\u3059\u308b\u3068\u3001\n\u305d\u306e\u30bb\u30b0\u6728\u306e\u4e2d\u3067\u4e00\u3064\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u305d\u306e\u30bb\u30b0\u6728\u306f\u7121\u52b9\u306b\u306a\u308b\u3002\n\u6b8b\u3063\u305f\u30bb\u30b0\u6728\u306e\u4e2d\u3067\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\u305d\u308c\u3089\u306e\u30bb\u30b0\u6728\u3092\u3059\u3079\u3066\u9078\u629e\u3059\u308b\u3053\u3068\u3092\u884c\u3046\u3002\n\u305f\u3060\u3057\u3001\u305d\u306e\u30bb\u30b0\u6728\u306e\u5185\u3067\u306f\u305d\u308c\u3089\u304c\u9023\u7d50\u3057\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u9078\u629e\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u308b\u3002\n\n\u4eca\u56de\u306e\u554f\u984c\u3067\u306f\u3001\u5168\u3066\u306e\u30bb\u30b0\u6728\u306e\u9078\u629e\u3059\u308b\u3079\u304d\u3002\n\u305d\u306e\u305f\u3081\u3001\u30bb\u30b0\u6728\u3092\u3059\u3079\u3066\u9078\u3076\u3053\u3068\u3067\u3001\u9078\u629e\u3059\u308b\u958b\u59cb\u3068\u7d42\u4e86\u4f4d\u7f6e\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u3059\u308b\u3002\n\u305d\u308c\u3089\u306e\u958b\u59cb\u4f4d\u7f6e\u3068\u7d42\u4e86\u4f4d\u7f6e\u306e\u30bb\u30b0\u6728\u304c\u3069\u306e\u3088\u3046\u306b\u9023\u7d50\u3057\u3066\u3044\u308b\u304b\u3001\n\u30bb\u30b0\u6728\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u7d42\u4e86\u4f4d\u7f6e\u307e\u3067\u306e\u8ddd\u96e2\u306e\u6700\u5927\u5024\u304c\u7b54\u3048\u3068\u306a\u308b\u3002\n\n\u4eca\u56de\u306e\u554f\u984c\u3067\u306f\u3001\u305d\u308c\u3089\u306e\u958b\u59cb\u4f4d\u7f6e\u3068\u7d42\u4e86\u4f4d\u7f6e\u306e\u30bb\u30b0\u6728\u304c\u3069\u306e\u3088\u3046\u306b\u9023\u7d50\u3057\u3066\u3044\u308b\u304b\u3001\n\u30bb\u30b0\u6728\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u7d42\u4e86\u4f4d\u7f6e\u307e\u3067\u306e\u8ddd\u96e2\u306e\u6700\u5927\u5024\u304c\u7b54\u3048\u3068\u306a\u308b\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\u305d\u308c\u3089\u306e\u30bb\u30b0\u6728\u3092\u3059\u3079\u3066\u9078\u3076\u3053\u3068\u3092\u884c\u3046\u3002\n\u305d\u306e\u305f\u3081\u3001\u305d\u308c\u3089\u304c\u9023\u7d50\u3057\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\ndp[i][j] := \u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u7d42\u4e86\u4f4d\u7f6e\u307e\u3067\u306e\u6700\u5927\u8ddd\u96e2\u3002\n\ndp[i][j] = max(dp[x][k] + (j - k) + 1 for k in [l, m, j] if k > j)\n\nfor j in range(n):\n    for i in range(j):\n        for k in [l, m, j]:\n            if k > j:\n                dp[i][j] = max(dp[i][j], dp[i][k] + (j"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\\n\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\\n\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nc = []\nfor i in range(m):\n    c.append(map(int, stdin.readline().split()))\nc.sort()\n\nl = [[a[i - 1], i - 1] for i in range(1, n + 1)]\nl.sort()\n\nans = 0\ni = 0\nl_sum = 0\nfor aa, ii in l:\n    while i < m and c[i][0] <= aa:\n        ans = max(ans, a[c[i][1]] - aa)\n        l_sum += c[i][1]\n        i += 1\n    if ans == 0:\n        break\n    l_sum += ii\n    ans = max(ans, l_sum - ii)\nprint(ans)\ni = 0\nwhile i < m and c[i][0] <= l_sum:\n    ans = max(ans, a[c[i][1]] - l_sum)\n    i += 1\nprint(ans)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n1 4\"\n\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\n\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\nz\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\"\nassert solution(\"az\\naa\\nbad\\nbabc\\n\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\") == \"Yes\\nYes\\nYes\\nYes\"\nassert solution(\"az\\naa\\nbad\\nbabc\") == \"No\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\\n\".join([\n        \"4\",\n        \"abc\",\n        \"abcd\",\n        \"fced\",\n        \"xyz\",\n    ])\n) == \"\"\"Yes\nYes\nNo\nNo\"\"\", \"Simple test\"\n\nassert solution(\n    \"\\n\".join([\n        \"5\",\n        \"abcdef\",\n        \"abcd\",\n        \"fced\",\n        \"xyz\",\n    ])\n) == \"\"\"Yes\nYes\nYes\nNo\nNo\"\"\", \"More than one consec\"\n\nassert solution(\n    \"\\n\".join([\n        \"1\",\n        \"a\",\n    ])\n) == \"\"\"Yes\nNo\"\"\", \"One letter\"\n\nassert solution(\n    \"\\n\".join([\n        \"5\",\n        \"abcd\",\n        \"fced\",\n        \"xyz\",\n        \"r\",\n    ])\n) == \"\"\"Yes\nYes\nYes\nYes\nNo\"\"\", \"Repeated letter\"\n\nassert solution(\n    \"\\n\".join([\n        \"2\",\n        \"a\",\n        \"b\",\n    ])\n) == \"\"\"Yes\nNo\"\"\", \"Two letters\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'a'\nassert solution('ab') == 'No'\nassert solution('aa') == 'No'\nassert solution('az') == 'No'\nassert solution('aaa') == 'Yes'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1,2\\n3,4\\n5,6\\n7,8') == '4,5'\nassert solution('1,2\\n3,4\\n5,6') == '3,4'\nassert solution('1,1000000') == '0'\nassert solution('1,3\\n2,4\\n5,7') == '3,5'\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n4 1\\n'\n\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n'\n\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n'\n\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\") == \"6\"\nassert solution(\"3 5\") == \"7\"\nassert solution(\"1000000\") == \"0\"\nassert solution(\"4 3\") == \"3 2\"\nassert solution(\"5 4\") == \"4 1\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n4 1\"\n\nassert solution(\"3 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2 2') == '0'\nassert solution('2 -2 3 1 2') == '6'\nassert solution('2 -2 3 1 4') == '7'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\nsolution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\")\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n4 1\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\nassert solution(\"6 5\\n4 -2 3 1 2\\n4 1\\n4 5\\n4 3\\n2 1\\n2 2\\n2 4\\n\") == \"7\\n4\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n1 3\\n\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 3 5 6 7 4') == '7'\nassert solution('1 2 3') == '3'\nassert solution('1 2 4 3') == '4'\n\n'''\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3 5 6 7\") == \"LRRLL\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 3 5 6 7 4') == '7'\nassert solution('1 3 5 6 7 4 2') == '7'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4\\nRR'\nassert solution(\"7\\n1 3 5 6 7 4 2\") == '7\\nRLRL'\nassert solution(\"3\\n1 2 3\") == '3\\nLR'\nassert solution(\"4\\n1 2 4 3\") == '4\\nLRLL'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '''2\n    1\n    5\n    4\n    3\n    '''\n) == '4'\n\nassert solution(\n    '''7\n    1\n    3\n    5\n    6\n    7\n    4\n    2\n    '''\n) == '7'\n\nassert solution(\n    '''3\n    1\n    2\n    3\n    '''\n) == '3'\n\nassert solution(\n    '''4\n    1\n    2\n    3\n    4\n    '''\n) == '4'\n\nassert solution(\n    '''5\n    1\n    2\n    3\n    4\n    5\n    '''\n) == '4'"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\n\"\"\"\nimport sys\n\nlines = [line.rstrip() for line in sys.stdin]\n\nn = int(lines[0])\n\nsequence = [int(el) for el in lines[1].split()]"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'4\\n1 2 3 4'\n) == '4'\nassert solution(\n'3\\n1 2 3'\n) == '2'\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 3\\n3 4\") == 2\nassert solution(\"4 1 2 3\\n3 4 5\") == 3\nassert solution(\"4 1 2 3\\n3 4 5 6\") == 3\nassert solution(\"4 1 2 3\\n3 4 5 6 7\") == 3\nassert solution(\"4 1 2 3\\n3 4 5 6 7 8\") == 4\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\\n\") == 4\nassert solution(\"2\\n1 2\\n\") == 2\nassert solution(\"7\\n6 5 4 3 2 4 3\\n\") == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"4\\n2 2 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('6 5 4 3 2 4 3') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"7 6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 3\\n1 2 3 2 3\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 5\\n\") == 1\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nimport math\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 3\") == \"0\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5 3\\n1 2 2 4 5'\n) == '1'\n\nassert solution(\n    '5 3\\n1 2 3 3 3'\n) == '0'\n\nassert solution(\n    '5 3\\n1 2 3 4 5'\n) == '2'\n\n\n\"\"\"\nimport math\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == 1\nassert solution(\"5 3\\n1 2 3 3 3\\n\") == 0\n\nprint(solution(\"5 3\\n1 2 2 4 5\\n\"))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 2 1 3 2 2 1\") == \"3\"\nassert solution(\"1 2 1 2 2 1\") == \"1\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 4\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1\\n') == '4'\n\"\"\"\n\nimport math\n\nnum_blue_balls, num_red_balls, num_put_balls = map(int, input().split())\n\nnum_blue_balls_avail = num_blue_balls - num_put_balls\nnum_red_balls_avail = num_red_balls - num_put_balls\nprint(math.ceil(num_blue_balls_avail / 2) + math.floor(num_red_balls_avail / 2))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 4\") == \"4\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"2\"\nassert solution(\"9 10 9\") == \"0\"\nassert solution(\"6 3 6\") == \"0\"\nassert solution(\"5 3 7\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 4\\n\") == \"4\"\n'''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n8\\n1 2 4 8 16 32\\n2\\n2 4') == '48'\n\"\"\"\n\nt = int(stdin.readline())\n\nwhile t:\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n    print(n - d.count(1) - d.count(n))\n    t -= 1\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3\\n1\\n2') == '48\\n4'\nprint(solution('8\\n8 2 12 6 4 24 16 3\\n1\\n2'))\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n8\") == \"4\"\nassert solution(\"4\\n8\\n24\\n4\") == \"4\"\nassert solution(\"4\\n8\\n24\\n4\\n16\\n3\") == \"48\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n8\") == \"4\\n\"\nassert solution(\"1\\n2\") == \"1\\n\"\nassert solution(\"2\\n3\") == \"2\\n\"\nassert solution(\"3\\n1\") == \"1\\n\"\nassert solution(\"5\\n8\") == \"8\\n\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n8\\n2 12 6 4 24 16 3') == '48'\nassert solution('2\\n1\\n2') == '-1'\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '-1'\nassert solution('1 2 3 4 5') == '-1'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5 6 7 8') == '1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\\n2\\n5\") == \"3\"\nassert solution(\"2\\n4\\n2\\n5\") == \"2\"\nassert solution(\"2\\n4\\n2\\n5\") == \"2\"\nassert solution(\"2\\n4\\n2\\n5\") == \"2\"\nassert solution(\"2\\n4\\n2\\n5\") == \"2\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 2 12 6 4 24 16 3') == '48'\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    m = float(\"inf\")\n    for i in range(n):\n        m = min(m, l[i] ** n - 1)\n    if m == float(\"inf\"):\n        print(-1)\n    else:\n        print(m)"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == \"48\"\nassert solution(\"8\\n8 2 12 6 4 24 16 3\\n5\\n2\") == \"4\"\nassert solution(\"8\\n8 2 12 6 4 24 16 3\\n5\\n3\") == \"4\"\nassert solution(\"8\\n8 2 12 6 4 24 16 3\\n7\\n2\") == \"-1\"\nassert solution(\"8\\n8 2 12 6 4 24 16 3\\n7\\n2\") == \"-1\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('1\\n2') == '-1'\n\nprint(solution(stdin))\n\n-----Problem-----\n\nIn this problem you have to find the minimum possible number $x$, such that every divisor of $x$ is included in the list.\n\nSo you have to find minimum $x$ such that $x$ is at least as large as the largest value in the given list.\n\nWrite 5 lines of code to test the correctness of solution:\nWe guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.\n\nYour task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 25$) \u2014 the number of queries. Then $t$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of divisors in the list.\n\nThe second line of the query contains $n$ integers $d_1, d_2, \\dots, d_n$ ($2 \\le d_i \\le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.\n\n\n-----Output-----\n\nFor each query print the answer to it.\n\nIf the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.\n\n\n-----Example-----\nInput\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\nOutput\n48\n4\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\\n1\"\nassert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 2 3 3') == \"1 2 3\"\nassert solution('1 2 3 4 4 5 5') == \"1 2 3 5\"\nassert solution('2 2 2 2 3 3 3') == \"2 2 3\"\nassert solution('1 2 3 3 5 4 4 3') == \"1 2 3 4 5\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 6 6 6 6') == '1 6'\nassert solution('1 5 5 1 6 1') == '3 5 6 1'\nassert solution('2 4 2 4 4') == '2 4'\nassert solution('5 6 6 6 6') == '1 6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"1 5 5 1 6 1\") == \"3 6 1\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n2 4 2 4 4\n''') == '3\n5 6 1'\nassert solution('''6\n6 6 6 6 6\n''') == '1\n6'\nassert solution('''5\n6 6 6 6 6\n''') == '1\n6'\nassert solution('''5\n4 4 4 4 4\n''') == '2\n4'\nassert solution('''5\n6 6 6 6 6\n''') == '1\n6'"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 6 6 6 6') == '1 6'\nassert solution('5 5 5 5 5') == '1 5'\nassert solution('5 1 2 4 4') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\n') == '1\\n2'\nassert solution('4\\n1 2 3 4\\n') == '1\\n3\\n4'\nassert solution('2\\n1 1\\n') == '1\\n'\nassert solution('2\\n2\\n') == '1\\n'\nassert solution('1\\n1\\n') == '1\\n'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 5 5 5 5\") == \"1 5\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\\n\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n6 5 6 6 6\\n\") == \"1\\n6\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(9) == 11\nassert solution(92) == 94\nassert solution(65) == 69\nassert solution(20) == 21\nassert solution(24) == 42\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(432) == 435\n\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\nimport math"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"432\"\n) == \"435\"\nassert solution(\n\"99\"\n) == \"103\"\nassert solution(\n\"237\"\n) == \"237\"\nassert solution(\n\"42\"\n) == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nassert solution('432') == '435'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abac\") == \"abc\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abba\") == \"abac\"\n\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == 'aac'\nassert solution(\"abc\") == 'b'\nassert solution(\"abba\") == 'aba'\n\"\"\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\n\nfrom itertools import accumulate\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"aa\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"abac\"\n) == \"aac\"\nassert solution(\n    \"abc\"\n) == \"b\"\nassert solution(\n    \"abba\"\n) == \"aba\"\nassert solution(\n    \"ecoosdcefr\"\n) == \"codeforces\"\nassert solution(\n    \"abcd\"\n) == \"abcd\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('eeeedrrrrrrrrrrrrrrtttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abba\") == \"aba\"\n\nprint('The solution is correct!')\n\n\"\"\"\n\n\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nn = int(input())\n\nnumber = \"\"\nfor i in range(1, n+1):\n    if i <= 26:\n        number += chr(97 + i - 1)\n    elif i <= 702:\n        number += chr(97 + (i - 1) // 26 - 1) + chr(((i - 1) % 26) + 97)\n    elif i <= 18278:\n        number += chr(97 + (i - 1) // 702 // 26 - 1) + chr(((i - 1) % 702) // 26 - 1) + chr(((i - 1) % 702) % 26 + 97)\n    elif i <= 475254:\n        number += chr(97 + (i - 1) // 18278 // 702 // 26 - 1) + chr(((i - 1) % 18278) // 702 // 26 - 1) + chr(((i - 1) % 18278) // 702 % 26 - 1) + chr(((i - 1) % 18278) % 702 % 26 + 97)\n    else:\n        number += chr(97 + (i - 1) // 475255 - 1)\n\nprint(number)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n---------------------------------------\n\nimport unittest\n\nclass Testsolution(unittest.TestCase):\n    def test_01(self):\n        self.assertEqual(solution(''), '')\n\n    def test_02(self):\n        self.assertEqual(solution('2'), 'b')\n\n    def test_03(self):\n        self.assertEqual(solution('3'), 'c')\n\n    def test_04(self):\n        self.assertEqual(solution('4'), 'd')\n\n    def test_05(self):\n        self."
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"b\"\nassert solution(\"2\") == \"b\"\nassert solution(\"1\") == \"a\"\nassert solution(\"26\") == \"z\"\nassert solution(\"27\") == \"aa\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 'c'\nassert solution('5') == 'z'\nassert solution('100') == 'b'\nassert solution('10000') == 'c'\nassert solution('100000') == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n----"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 'b'\nprint(solution('2'))\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('26') == 'z'\nassert solution('27') == 'aa'\nassert solution('701') == 'zz'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6\nto be or not to be''') == '12'\nassert solution('''10\na ab a a b ab a a b c''') == '13'\nassert solution('''6\naa bb aa aa bb bb''') == '11'\nprint('Test passed')"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\"\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\"\nassert solution(\"10\\naa bb aa aa bb bb\") == \"13\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\"\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('to be or not to be') == '12'\nassert solution('a ab a a b ab a a b c') == '13'\nassert solution('aa bb aa aa bb bb') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a ab a a b ab a a b c') == 'a AAAB AAAB c'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"AB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AA AB\"\n\nSolution 1:"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"to be or not to be\") == \"TB oR nT TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AAB Aa Bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 ab aa bb') == '11'\nassert solution('6 aa bb aa aa bb bb') == '11'\nassert solution('6 aa bb aa aa bb bb') == '11'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\n\"\"\"\n\nfrom collections import Counter, deque\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2''') == '20'\nassert solution('''5 1\n1 1 1 1 1''') == '1'\nassert solution('''4 2\n1 2000 2000 2''') == '4000'\n\nprint(solution(stdin))\n\n'''\n\n\n\n'''\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n8 3\n5 4 2 6 5 1 9 2\n''') == '20'\nassert solution('''\n5 1\n1 1 1 1 1\n''') == '1'\nassert solution('''\n4 2\n1 2000 2000 2\n''') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\nassert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '0'\nassert solution(\"5 -11 -15 10 5 4 -4\") == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\n\nassert solution(\"5 -2 3 -9 2\") == \"1\"\n\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -11 1 -1 1 -1 1 1\") == \"6\"\nassert solution(\"9 -1 1 -1 1 -1 1 1\") == \"6\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == '1'\nassert solution(\"5\\n4 -2 3 -9 2\") == '0'\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == '3'\n\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin) == test_stdout"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 1 -1 1 -1 1 1 -1 -1') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -1 1 -1 1 -1 1 1 -1 -1') == '3'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\\n2 2\") == \"0\"\nassert solution(\"1 100\\n2 1000000000\") == \"2\"\nassert solution(\"1 100\\n5 5\") == \"10\"\nassert solution(\"1 1000000000\\n2 1000000000\") == \"1000000000\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2 1\n3 1\n3 0''') == '0'\n\nassert solution('''5\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '2'\n\nassert solution('''1\n1 100''') == '0'\n\nassert solution('''1\n1 1''') == '0'\n\nassert solution('''3\n2 1\n3 1\n3 0''') == '0'"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '0'\nassert solution('4 100') == '0'\nassert solution('5 3') == '2'\nassert solution('5 5') == '2'\nassert solution('5 1000000000') == '10000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 100\") == \"6\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '2'\nassert solution('5 5') == '0'\nassert solution('2 1000000000') == '2'\nassert solution('1000000000 1000000000') == '2000000000'"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\\n2 2\") == \"0\"\nassert solution(\"5\\n100\\n2 2\") == \"2\"\nassert solution(\"5\\n1000000000\\n2000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('2 1000000000') == '2'\nassert solution('1 1000000000') == '1000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2\"\nassert solution(\"1 1000000000\") == \"2000000000\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n') == '1\\n'\nassert solution('7\\n77\\n777\\n') == '4\\n'\nassert solution('7\\n77\\n777\\n7777\\n') == '-1\\n'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '4'\nassert solution('10') == '-1'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\nimport sys\n\nK = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"3\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nfrom math import log2, ceil"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\"\n\nK = int(stdin.readline())\n\nseq = \"7777\"\n\nfor i in range(2, K):\n    if int(seq) % i == 0:\n        seq += \"7\"\nprint(seq.index(\"7\") + 1)\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\nK = int(stdin.readline())\n\nseq = \"7777\"\ni = 2\nwhile int(seq) % i!= 0:\n    i += 1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nK = int(stdin.readline().rstrip())\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"4\"\nprint(solution(\"101\"))\n\n\n\n\n'''\nimport math"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"6 7\") == \"3\"\n\n----\n\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 4\n2 4 5 3 1\"\"\") == \"4\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('12') == '1'\nassert solution('1234') == '4'\nassert solution('123') == '2'\nassert solution('1234 5678 9') == '3'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 16\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\nprint('All tests passed.')\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('7 10\\n5 5 5 5 5') == '1'\nassert solution('7 26\\n5 5 5 5 5') == '-1'\nassert solution('7 26\\n5 5 5 5 5') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"1\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nprint(1)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\n\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\n\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\n\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 36\\n5 5 5 5 5\") == \"1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ndp = [0 for _ in range(m + 1)]\nfor i in range(n):\n    for j in range(a[i], m + 1):\n        dp[j] = max(dp[j], dp[j - a[i]] + 1)\n\nprint(dp[m] if dp[m]!= 0 else -1)\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n1 2 3 4 5\\n\") == \"4\"\nassert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\n\nc.sort(reverse=True)\ncnt = 0\nfor i in range(len(c)):\n    if c[i] > i+1:\n        break\n    cnt += i+1\nprint(cnt) if cnt!= m else print('-1')"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\n\n\n-----\n\nclass Solution:\n    def solution(self, m, n, a):\n        \n        def feasible(m, n, a):\n            A = a\n            B = m\n            C = n\n            \n            if A>B:\n                A,B = B,A\n            if A>C:\n                A,C = C,A\n            if B>C:\n                B,C = C,B\n            \n            return A == B == C\n        \n        if m == 0:\n            return 0\n        \n        for i in range(m):\n            if a[i]<=n:\n                n = n - a[i]\n            else:\n                return -1\n        \n        return n if feasible(m, n, a) else -1\n        \n        \ns = Solution()\n\nassert s.solution(5, 8, [2, 3, 1, 1, 2]) == 4\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\nassert solution(\"14 5 1\") == \"0\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 1\") == \"-1\"\nassert solution(\"2 4 4\") == \"0\"\nassert solution(\"1 2 3 4\") == \"0\"\n\nassert solution(\"1 1 1\") == \"-1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"14 5 1\") == \"1\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"14 5 1\") == \"1\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"5 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 6 9 12\") == \"1\"\nassert solution(\"1 3 6 9 12\") == \"0\"\nassert solution(\"0 1 3 6 9 12\") == \"1\"\nassert solution(\"0 0 1 3 6 9 12\") == \"1\"\nassert solution(\"0 1 3 6 9 12\") == \"0\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3 2\") == 3\nassert solution(\"5 5\") == 0\nassert solution(\"5 4 3 2 1\") == -1\nassert solution(\"1 3 6 9 12\") == 1\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\") == \"-1\"\nassert solution(\"3\\n14 5 1\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n\"\"\"\n\n\"\"\"\nPre-calculate all possible first differences\n\nIterate through all possible subsequences of integers, and check if each of them has the same first difference\n\nTime complexity: O(n^3)\nSpace complexity: O(n^2)\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nprev = [a[0]]\ndiff = a[0]\n\nfor x in a[1:]:\n    if x - prev[-1] == diff:\n        prev.append(x)\n    else:\n        diff = x - prev[-1]\n        prev = [x]\n\nfor i, x in enumerate(prev):\n    for y in prev[i+1:]:\n        if y - x!= diff:\n            print(i)\n            return\n\nprint(-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('5\\n1 3 6 9 12') == '1'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('2\\n500 500') == '0'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 2 15 15 15\n''') == '5'\nassert solution('''6 1\n36 4 1 25 9 16\n''') == '2'\nassert solution('''4 4\n1 10 100 1000\n''') == '4'\nassert solution('''5 5\n1 2 3 4 5\n''') == '5'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 10 100\\n\") == \"5\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(None) == \"\"\nassert solution(\"2 1\\n1 1\") == \"1\"\nassert solution(\"2 2\\n1 1\") == \"0\"\nassert solution(\"2 3\\n1 1\") == \"1\"\nassert solution(\"2 3\\n1 1\\n1 1\") == \"2\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 10\\n100 1000\") == \"5\"\nassert solution(\"3 2\\n1 10 20\\n100 1000\") == \"5\"\nassert solution(\"5 2\\n1 10 100 1000 100\\n100 1000\") == \"3\"\nassert solution(\"5 3\\n1 10 100 1000 100\\n100 1000\") == \"5\"\n\nprint(solution(\"3 2\\n1 10 20\\n100 1000\"))\nprint(solution(\"5 2\\n1 10 100 1000 100\\n100 1000\"))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\\n\") == '4'\n\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == '2'\n\nassert solution(\"6 2\\n36 4 1 25 9 16\\n\") == '2'\n\nassert solution(\"7 2\\n1 2 100 100 100 1 1\\n\") == '6'\n\nassert solution(\"7 2\\n1 2 3 4 5 6 7\\n\") == '7'"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"5 2\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"6 1\\n1 10 100 1000\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\nassert solution(\"6 4\\n1 10 100 1000\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\nprint(solution(\"5 2\\n1 2 15 15 15\") == \"5\")\nprint(solution(\"6 1\\n36 4 1 25 9 16\") == \"2\")\nprint(solution(\"4 4\\n1 10 100 1000\") == \"4\")"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 10 100 1000\\n') == '4', 'Case #1: %s' % solution('4 2\\n1 10 100 1000\\n')\nassert solution('3 2\\n1 2 3\\n') == '2', 'Case #2: %s' % solution('3 2\\n1 2 3\\n')\nassert solution('4 3\\n1 10 100 1000\\n') == '4', 'Case #3: %s' % solution('4 3\\n1 10 100 1000\\n')\nassert solution('5 4\\n1 10 100 1000\\n') == '5', 'Case #4: %s' % solution('5 4\\n1 10 100 1000\\n')\nassert solution('7 7\\n1 2 3 4 5 6 7\\n') == '7', 'Case #5: %s' % solution('7 7\\n1 2 3 4 5 6 7\\n')\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == 5\nassert solution('4 4\\n1 10 100 1000\\n') == 4\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nn, k, m = map(int, stdin.readline().strip().split())\nscores = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 8\") == \"3\"\nassert solution(\"4 2 8\") == \"3\"\nassert solution(\"4 10 20\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nn, k, m = list(map(int, input().split()))\n\nscores = list(map(int, input().split()))"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\nassert solution('4 4 6\\n9 9 3 7') == '9'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10 7\\n8 10 3 6\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\nprint(solution(input()))\n\n\"\"\"\n\nn, k, m = map(int, input().split())\nscores = list(map(int, input().split()))\nscores.append(k)\nscores.sort(reverse=True)\naverage = 0\nfor i in range(n):\n    average += scores[i]\n    if average >= m:\n        print(scores[i])\n        exit()\nprint(-1)"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\nassert solution('''4 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo'\n\n'''\n6 3 4\n3\n1\n3\n2\n\n6 3 4\n3\n1\n3\n2\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n'''\n\nassert solution('''10 10 1\n9\n6\n3\n3\n9\n2\n7\n5\n5\n1\n''') == 'Yes\\nYes\\nNo\\nYes\\nYes\\nNo\\nYes\\nYes\\nNo\\nYes'\n\nassert solution('''10 10 1\n9\n6\n3\n3\n9\n2\n7\n5\n5\n1\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo\\nYes\\nYes\\nYes\\nNo'\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n'''\n6 3 4\n3\n1\n3\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 4\\n3\\n1\\n3\\n2\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\\n4\") == \"Yes\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\\n4\\n5\") == \"Yes\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\\n4\\n5\\n6\") == \"No\"\n\nprint(solution(\"3 3 4\\n3\\n1\\n3\\n2\"))\nprint(solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\\n4\"))\nprint(solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\\n4\\n5\"))\nprint(solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\\n4\\n5\\n6\"))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nprint(\"Passed!\")"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == '\\n'.join(['No', 'No', 'Yes', 'No', 'No', 'No'])\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == '\\n'.join(['No', 'No', 'No', 'No', 'No', 'No'])\nassert solution('''\n6 3 4\n3\n3\n3\n2\n''') == '\\n'.join(['No', 'No', 'No', 'No', 'No', 'No'])\nassert solution('''\n6 3 4\n3\n3\n3\n2\n''') == '\\n'.join(['No', 'No', 'No', 'No', 'No', 'No'])\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == '\\n'.join(['No', 'No', 'No', 'No', 'No', 'No'])\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\\n\"\n\n---\nWrite an efficient algorithm for the following assumptions:\n\n1 \\leq N \\leq 2*10^5\n1 \\leq K \\leq 10^9\n1 \\leq Q \\leq 10^5\n1 \\leq A_i \\leq N\\ (1 \\leq i \\leq Q)\n\nYou may not use any built-in function that does sumproduct.\n\nYour algorithm should run in O(Q*N) time and use O(1) extra space.\n\n---\n\nimport sys\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 4\\n3\\n1\\n3\\n2\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES\\n010\\n0000'\nassert solution('2 2\\n1 1\\n0 1') == 'YES\\n10\\n0000'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"2 2\", \"1 1\", \"0 1\"]) == \"YES\\n00\\n10\"\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\n\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n010\\n0\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\\n010\\n01\"\nassert solution(\"1 2\\n1 1\") == \"YES\\n01\\n10\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\nprint(solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\"))\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('2 2\\n1 1\\n0 1\\n') == 'YES\\n0 1\\n10\\n'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n') == 'YES\\n010\\n0000\\n'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n') == 'NO\\n010\\n0 0\\n0 0\\n0 0\\n'\n\n\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example) == \"YES\\n00\\n10\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"No\"\nassert solution(\"13\") == \"Yes\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\"\"\"\n\n\"\"\"\nTODO:\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == 'No'\nassert solution('7') == 'Yes'\nassert solution('8') == 'Yes'\nassert solution('9') == 'No'\nassert solution('10') == 'Yes'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"436\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"123\") == \"No\"\nassert solution(\"103\") == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\nprint(solution(\"373\"))\nprint(solution(\"121\"))\nprint(solution(\"436\"))\n\"\"\"\n\nclass Solution:\n    def isAdditiveNumber(self, num):\n        def check(n):\n            dp = set()\n            for i in range(1, len(n)):\n                for j in range(i):\n                    if (n[j], n[i - j - 1], n[i]) not in dp:\n                        dp.add((n[j], n[i - j - 1], n[i]))\n                        if n[j] == n[i - j - 1] == 0:\n                            return False\n                        elif n[j] + n[i - j - 1] == n[i]:\n                            if check(n[i + 1:]):\n                                return True\n            return False\n\n        return check(num)\n\n\nclass Solution2:\n    def isAdditiveNumber(self, num: str) -> bool:\n        n = len(num)\n        for i in range(1, n // 2 + 1):\n            if num[0] == '0' and i > 1:\n                break\n            l = n - i\n            if i == 1:\n                for j in range(i, l):\n                    if num[:i] == num[j:j + i] and self.isAdditiveNumber(num[j + i:]):\n                        return True\n            else:\n                for j in range(i, l):\n                    if self.isAdditiveNumber(num[:i]) and self.isAdditiveNumber(num[i:j] + num[j + i:]):\n                        return True\n        return False\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"372\") == \"Yes\"\nassert solution(\"122\") == \"No\"\nassert solution(\"435\") == \"Yes\"\nassert solution(\"123\") == \"No\"\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 5\\n1 0 0 1\") == \"5\"\n\"\"\"\n\nimport sys\n\nn, b, a = list(map(int, input().split()))\n\nsegments = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\n\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n\nprint(solution(\"112-37\"))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\nassert solution(\"112-37\") == \"375\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nassert solution
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nassert solution('8 5 - 5 2 4 1 - 4 0') == '4'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 3\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\n\nassert solution('''10 4\n''') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n''')\n\nprint(solution(stdin))"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n2 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n3 2\") == \"YES\\n3 1\\n1 4\"\nassert solution(\"10 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\"\nassert solution(\"13 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES'\nassert solution('13 4\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\n\nassert solution('''10 4\n\n''') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\n\nassert solution('''13 4\n\n''') == 'NO\\n'\n\nassert solution('''2 2\n\n''') == 'NO\\n'\n\nassert solution('''4 1\n\n''') == 'YES\\n1 2\\n'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2'\nassert solution('10 4') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1'\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n--------------------------------------"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\nassert solution('13 4\\n') == 'NO\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 3\\n1 100 1 1') == '100'\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3\\n1 100 1 1\\n\") == \"100\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\\n\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3\\n5 1 3 10 1\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == -1\nassert solution(\"4 1 5\\n1 100 1 1\") == 100"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 1 5\\n1 100 1 1') == '100'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\"\n\nn, k, x = map(int, stdin.readline().split())\nl = list(map(int, stdin.readline().split()))\n\nlow = 0\nhigh = 0\nfor i in range(n):\n    if i < k:\n        low = low + l[i]\n    else:\n        low = max(low, l[i-k])\n    high += l[i]\n    if high >= x:\n        break\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 5\\n10 30 30 70 10 10') == '100'\n\nassert solution('5 1 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('6 2 6\\n10 30 30 70 10 10') == '-1'\nassert solution('7 1 2\\n10 30 30 70 10 10') == '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\\n1 100 1 1\") == \"100\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\n\"\"\"\n\nn, k, x = [int(i) for i in input().split()]\nl = [int(i) for i in input().split()]\nres = 0\ns = 0\nfor i in range(n - 1):\n    if l[i + 1] - l[i] <= k:\n        s += l[i]\n    else:\n        s = l[i]\n        res += s\n        s = l[i + 1]"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0110110001\") == 21\nassert solution(\"0110110001101\") == 31\nassert solution(\"0110110001101101\") == 36\nassert solution(\"0110110001101101101\") == 37\nassert solution(\"0110110001101101101101\") == 38\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('11') == '11'\nassert solution('11100') == '11'\nassert solution('101100') == '3'\nassert solution('101101') == '2'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"00100\") == \"3\"\nassert solution(\"01110\") == \"4\"\nassert solution(\"10000\") == \"10\"\nassert solution(\"111111\") == \"21\"\nassert solution(\"110110\") == \"10\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0111\") == \"3\"\nassert solution(\"1110\") == \"4\"\nassert solution(\"1111\") == \"4\"\nassert solution(\"0011\") == \"4\"\nassert solution(\"1001\") == \"4\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1101111001011\") == 15\nassert solution(\"1101111001010\") == 21\nassert solution(\"1110111101010\") == 3\nassert solution(\"1101111110110\") == 4\nassert solution(\"1110011101110\") == 4\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000100') == 3\nassert solution('1110010') == 4\nassert solution('1110110') == 5\nassert solution('1111010') == 6\nassert solution('1111100') == 7\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"11100\") == 11\nassert solution(\"111110\") == 10\nassert solution(\"111111\") == 8\nassert solution(\"1111111\") == 6\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('1010') == '2'\nassert solution('01101100') == '4'\nassert solution('101110010011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011101110011001100111011100110011001110111001100110011"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01010\") == 1\nassert solution(\"11101\") == 4\nassert solution(\"11010\") == 4\nassert solution(\"111100\") == 5\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('azze', 'apple') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"lollipop\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('abbccc') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\"\"\"\nimport ast\nimport sys\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\"\n\n\"\"\"\n1st solution\n\"\"\"\n\nS, T = stdin.split(\"\\n\")\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''abc\nabc''') == 'Yes'\nassert solution('''abc\nbac''') == 'No'\nassert solution('''abc\nbca''') == 'No'\nassert solution('''aaa\naaa''') == 'Yes'\nassert solution('''abc\nabd''') == 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'azzel'\nassert solution('moo') =='moo'\nassert solution('hello') == 'lloeh'\nassert solution('house') == 'huse'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4\n100 200 300 400\n50 50 100 100\n500 300 200 200\n300 1 200 200\n100 1 100 100\n''') == '1500'\nassert solution('''5 10\n7 5 2 1 3\n5 7 2 1 2\n5 3 2 1 5\n3 7 2 3 2\n7 3 2 3 3\n''') == '6'\nassert solution('''5 10\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '0'\nassert solution('''5 10\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '-1'\nassert solution('''5 10\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n''') == '0'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 4 5\") == \"8\"\nassert solution(\"1 1 1 1\") == \"4\"\nassert solution(\"0 2 4 5 6\") == \"14\"\nassert solution(\"1 1 1 1 1\") == \"4\"\nassert solution(\"1 1 1 2 2\") == \"6\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"1 1 3\") == \"0\"\nassert solution(\"1 1 3\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10,3,4,3,5\") == \"3 100\"\nassert solution(\"10,3,4,3,5,3,2,1,1,4\") == \"3 100\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"Yes\"\nassert solution(\"1 1 1 1 1 1\") == \"Yes\"\nassert solution(\"1 1 1 1 2 2\") == \"No\"\nassert solution(\"1 1 1 1 1 1\") == \"No\"\nassert solution(\"1 1 1 1 2 2\") == \"No\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"2 2 2 2\") == \"0\"\nassert solution(\"2 1 3\") == \"6\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"2 1 1 1\") == \"8\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 1 5 7 4 5\") == \"13\"\nassert solution(\"2 10 2 5 7 4 5\") == \"18\"\nassert solution(\"3 10 2 5 7 4 5\") == \"17\"\nassert solution(\"2 10 2 5 7 4 5\") == \"18\"\nassert solution(\"2 10 2 5 7 4 5\") == \"18\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 2 100 1 1\") == \"50\"\nassert solution(\"2 5 2 100 1 5\") == \"100\"\nassert solution(\"2 5 2 100 5 1\") == \"100\"\nassert solution(\"2 5 2 100 5 5\") == \"100\"\nassert solution(\"3 5 2 100 1 5 3\") == \"150\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 100 2 1 100\") == \"3\"\nassert solution(\"2 2 100 2 1 100\") == \"200\"\nassert solution(\"2 2 100 2 1 100 2 1 100\") == \"200\"\nassert solution(\"2 2 100 2 1 100 2 1 100 2 1 100\") == \"1\"\nassert solution(\"3 2 100 2 1 100 2 1 100 3 1 100\") == \"100\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 5\\n2 3 7\") == \"16\"\nassert solution(\"3\\n1 2 3\\n2 4 6\") == \"12\"\nassert solution(\"2\\n1 1\\n1 2\") == \"0\"\nassert solution(\"2\\n2 1\\n1 1\") == \"0\"\nassert solution(\"2\\n1 1\\n2 2\") == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 400') == '3'\nassert solution('6 1000') == '4'\nassert solution('5 300') == '3'\nassert solution('2 500') == '1'\nassert solution('7 800') == '3'\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\"\nimport sys\n\nlines = sys.stdin.readlines()\nnum_problems = int(lines[0].split(' ')[0])\nperfect_bonuses = [int(x.split(' ')[1]) for x in lines[1:num_problems + 1]]\nperfect_bonuses.sort(reverse=True)\n\nnum_solutions = 1\nperfect_bonus = perfect_bonuses[0]\n\nfor i in range(1, num_problems):\n    perfect_bonus += perfect_bonuses[i]\n    num_solutions += 1\n    if perfect_bonus >= int(lines[num_problems + 1]):\n        break\n\nprint(num_solutions)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('1 100\\n3 200') == '0'\nassert solution('1 1\\n1 1') == '1'\nassert solution('1 1\\n1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations, product"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\"\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 700\\n3 500\\n5 800\\n') == '3'\n\"\"\"\n\nimport sys\n\nD, G = list(map(int, sys.stdin.readline().split()))\n\npoints = []\n\nfor _ in range(D):\n    points.append(int(sys.stdin.readline().split()[1]))\n\ndp = [0] * (G + 1)\ndp[0] = 1\n\nfor i in range(D):\n    for j in range(points[i], G + 1):\n        dp[j] = dp[j] + dp[j - points[i]]\n\nprint(dp[G])\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 100\n500 800\n1 100\n2 200\"\"\") == \"3\"\n\nassert solution(\"\"\"2 700\n3 500\n5 800\n\"\"\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin.readline\n\nn = int(stdin())\n\nweights = list(map(int, stdin().split()))\n\ndp = [0] * n\ndp[0] = 1\neven = 0\nodd = 0\nfor i in range(n):\n    if i % 2 == 0:\n        even += weights[i]\n    else:\n        odd += weights[i]\n    dp[i] = even\n    dp[i] %= 1000000007\n    dp[i] = dp[i] + odd\n    dp[i] %= 1000000007\nprint(dp[-1])"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6\\n') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5\\n') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4\\n') == '3'\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n5 5 4 5 5 5 6''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5''') == '2'\nassert solution('''9\n2 3 4 2 2 3 2 2 4''') == '3'''\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == '2'\n\n\"\"\"\n\na = int(input())\nb = list(map(int, input().split()))\n\ngood = 0\nfor i in range(len(b)):\n    if (b[i] % 2) == 0:\n        good += 1\n\nprint(good)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\nassert solution(\"7\\n4 2 3 4 5 5 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\n\"\"\"\n\nn, k, x = map(int, stdin.readline().strip().split())\nbeauty = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3 1\n1 100 1 1''') == '100'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nassert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 3 10 1') == '18'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\") == \"100\"\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 10 1\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"18\"\nassert solution(\"4 1 1\\n1 100 1 1\") == \"100\"\nassert solution(\"5 2 3\\n1 100 1 1\") == -1\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100 1 1') == 100\nassert solution('10 30 30 70 10 10') == 100\nassert solution('5 1 3 10 1') == 18\nassert solution('4 3 1') == 10\nassert solution('5 2 3') == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\nassert solution('4 3 1\\n10 30 30 70 10 10\\n') == '-1'\n\nprint(solution(stdin))\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nassert sys.version_info >= (3, 7)\n\nINPUT_LINE = iter(sys.stdin.read().splitlines())\nINPUT_CODE = [i.split(' ') for i in INPUT_LINE]\n\nn, k, x = [int(i) for i in INPUT_CODE.pop(0)]\na = [int(i) for i in INPUT_CODE.pop(0)]\n\na_idx = 0\nscore = 0\nqueue = deque([])\nfor i in range(n):\n    queue.append(i)\n\nwhile queue:\n    queue_len = len(queue)\n    for j in range(queue_len):\n        current = queue.popleft()\n        if a_idx < n and j >= k and current + k <= queue[0]:\n            queue.append(current)\n        else:\n            score += a[current]\n            a_idx += 1\n            if a_idx == n:\n                break"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\\n\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == 18\nassert solution('6 1 5\\n10 30 30 70 10 10\\n') == -1\nassert solution('4 3 1\\n1 100 1 1\\n') == 100\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"10\") == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n4\\n\") == \"Yes\"\nassert solution(\"2\\n7\\n\") == \"No\"\nassert solution(\"3\\n8\\n\") == \"No\"\nassert solution(\"4\\n8\\n\") == \"Yes\"\nassert solution(\"5\\n9\\n\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 'Yes'\nassert solution('10') == 'Yes'\nassert solution('8') == 'Yes'\nassert solution('6') == 'Yes'\nassert solution('4') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"13\") == \"Yes\"\nassert solution(\"3\") == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n\") == \"Yes\"\nassert solution(\"10\\n\") == \"No\"\nassert solution(\"6\\n\") == \"No\"\nassert solution(\"1\\n\") == \"Yes\"\nassert solution(\"4\\n\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline())\n\nprint(\"Yes\" if N == 4*7 or N == 4*4 or N == 7*7 else \"No\")\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(11) == \"Yes\"\nassert solution(8) == \"No\"\nassert solution(4) == \"No\"\nassert solution(3) == \"No\"\n\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 'No'\nassert solution('11') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('6') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"Yes\"\n\n-------\n\n------\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('2') == 'No'\nassert solution('1') == 'Yes'\nassert solution('10') == 'No'\nassert solution('11') == 'Yes'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\nprint(\"test passed\")\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\"\"\"\n\nfrom itertools import combinations\nfrom typing import List, Tuple\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n'\n) == '2 2 6'\n\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin) == test_stdout\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 'abc'\nassert solution('aaa') == 'aabaa'\nassert solution('aaaa') == 'aabaa'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"takahashi\") == \"4\"\n\nprint(solution(\"redcoder\"))"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"test\"\n\nassert solution(\"bad\") == \"baa\"\n\nassert solution(\"badaba\") == \"bbbb\"\n\nassert solution(\"racecar\") == \"bbbb\"\n\nassert solution(\"racecarX\") == \"bbbb\"\n\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 1\nassert solution(\"abacabaabacaba\") == 3\nassert solution(\"abacab\") == 1\nassert solution(\"abba\") == 0\nassert solution(\"abcd\") == 0\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('redcoder') == 1\nassert solution('redcoder') == 1\nassert solution('asdfg') == 3\nassert solution('asdfgh') == 4\nassert solution('a') == 0\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('redcoder') == '1'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"15\") == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == 'No'\nassert solution('8') == 'Yes'\nassert solution('25') == 'Yes'\nassert solution('31') == 'No'\n\nprint('Test passed')\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(2) == \"No\"\nassert solution(3) == \"No\"\nassert solution(4) == \"No\"\nassert solution(5) == \"No\"\n\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"3\") == \"No\"\n\nSolution.main(stdin=input, expected_return_type=str)\n\"\"\"\nimport sys"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"Yes\"\nassert solution(\"18\") == \"No\"\nassert solution(\"25\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 4 9 7 5\\n\") == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n-----Problem-----\nYou are given three integers x, y and z representing the dimensions of a cuboid along with an integer n. Print a list of all possible coordinates given by (i, j, k) on a 3D grid where the sum of i+j+k is not equal to n.\n\n-----Constraints-----\n- 1 \\leq x, y, z \\leq 10\n- 1 \\leq n \\leq 20\n\n-----Input-----\nInput is given from Standard Input in the following format:\nx\ny\nz\nn\n\n-----Output-----\nPrint the list of all possible coordinates given by (i, j, k) on a 3D grid where the sum of i+j+k is not equal to n.\n\n-----Sample Input-----\n1\n1\n1\n1\n\n-----Sample Output-----\n[[0, 0, 0]]\n\nThe following list is printed by the program:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\n-----Explanation-----\nFor the given values of x, y and z, the following coordinates are printed by the program:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\nThis is because the sum of the values of x, y and z is not equal to 1.\n\n-----Problem-----\nGiven a string of words delimited by whitespace, reverse the words in string. For example, given \"hello there world\", return \"world hello there\"\n\n-----Constraints-----\nThe length of the string is between [1, 100]\nThe string consists of alphanumeric characters and spaces.\nThe words in the string will always be separated by a single space.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nhello there world\n\n-----Output-----\nOutput the reversed string.\n\n-----Sample Input-----\nhello there world\n\n-----Sample Output-----\nworld hello there\n\n-----Explanation-----\nThe input string is reversed as follows:\n\"world hello there\" -> \"there world hello\" -> \"the world hello\" -> \"hello the world\" -> \"world hello\"\n\nThis is because the string is reversed from left to right, and from right to left.\n\n-----Solution-----\nimport re"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\n\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"2 4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\n\nA = int(sys.stdin.readline())\nB = int(sys.stdin.readline())"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nA, B = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 2\\n') == '-1\\n'\n\nassert solution('1 2\\n1 3\\n') == '6\\n'\n\nassert solution('2 4\\n1 2\\n') == '-1\\n'\n\nassert solution('2 5\\n1 2\\n') == '10\\n'\n\nassert solution('2 5\\n1 3\\n') == '6\\n'"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n\") == \"10\"\nassert solution(\"1 2\\n\") == \"-1\"\nassert solution(\"2 2\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5') == '10'\nassert solution('3 4') == '-1'\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == '10'\nassert solution('4 3') == '-1'\n\"\"\"\n\n\"\"\"\nSolution:"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(answer)\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n2 1 2 1 1\\n') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n10 12\\n1 2\\n') == '5'\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nIn the computer science field, a search tree is an abstract data type that is typically used to solve optimization problems.\nA search tree is a data structure containing a set of nodes, each of which represents a particular state.\nThe root node represents the initial state, and each child node represents a single possible action.\nThe action may result in a new state.\n\nTwo important operations are defined for a search tree:\n1. Expand the tree.\n2. Return to the root node.\n\nThe rest of the tree is defined recursively.\n\nA search tree is defined to be a set of nodes, each of which represents a particular state.\nThe root node of the search tree represents the initial state, and each child node represents a single possible action.\nThe action may result in a new state.\nA path is defined as a sequence of actions (each of which is one child node) that result in the root node.\nThe number of actions in a path is called its length.\n\nThe cost of a path is defined as its length times the path's cost.\nThe cost of a path is typically a number that indicates how good the path is.\nIt does not have to be a number that indicates how bad the path is.\n\nThe solution of an optimization problem is typically the path from the root node to a leaf node with the lowest cost.\nThe search tree can be interpreted as a graph where each node is a state and each edge is a path to another state.\nEach path in the graph is a state.\n\nThe standard terminology used in this field is a search tree, not the graph.\nIn the graph, the state is the node.\nIn the tree, the state is the path.\n\nThe cost of a path is generally the sum of the costs of its edges.\nThe minimum cost of a path is usually the shortest edge.\n\nThe root of a search tree contains the initial state, and each of its child nodes contains the states reachable by taking one edge from the root.\nThis is analogous to the tree from which the root node was chosen: the root node contains the initial state, and each child node is a path that leads to one of the states in the initial state.\n\nThe cost of a search tree is defined as the minimum cost of a path from the root to a leaf node.\nIt is often said that the lowest cost is the cost of the path with the shortest edges.\n\nThe depth of a search tree is the maximum length of any path in the tree.\n\nA search tree is typically represented as a nested list, a dictionary, or a tree data structure.\n\nIn a search tree, each node is a path.\nThe root node is typically called the \"empty path\".\nA search tree is \"empty\" if it does not contain any nodes.\n\nThe leaf nodes of a search tree are the paths whose total cost is the lowest cost.\nA search tree is \"full\" if all its nodes contain paths.\nThe root node has no parent node and is thus not a leaf node.\nThe root node has no children nodes and is thus not a leaf node.\n\nThe number of nodes in a search tree is called its size.\nThe size of an empty tree is zero.\nThe size of a full tree is the number of leaf nodes.\n\nFor example:\n\nempty_tree = []\nfull_tree = [\n    [],\n    [Path(10, 10, 10)],\n    [Path(10, 10, 10), Path(12, 12, 12)],\n    [Path(10, 10, 10), Path(12, 12, 12), Path(14, 14, 14)],\n    [Path(10, 10, 10), Path(12, 12, 12), Path(14, 14, 14), Path(16, 16, 16)],\n    [Path(10, 10, 10), Path(12, 12, 12), Path(14, 14, 14), Path(16, 16, 16), Path(18, 18, 18)],\n    [Path(10, 10, 10), Path(12, 12, 12), Path(14, 14, 14), Path(16, 16, 16), Path(18, 18, 18), Path(20, 20, 20)],\n    [Path(10, 10, 10), Path(12, 12, 12), Path(14, 14, 14), Path(16, 16, 16), Path(18, 18, 18), Path(20, 20, 20), Path(22, 22, 22)],\n    [Path(10, 10, 10), Path(12, 12, 12), Path(14, 14, 14), Path(16, 16, 16), Path(18, 18, 18), Path(20, 20, 20), Path(22, 22, 22), Path(24, 24, 24)],\n]\ntree_of_size_2 = [\n    [],\n    [Path(10, 10, 10)],\n    [Path(10, 10, 10), Path(12, 12, 12)],\n]\ntree_of_size_3 = [\n    [],\n    [Path(10, 10, 10)],\n    [Path(10, 10, 10), Path(12, 12, 12)],\n    [Path(10, 10, 10), Path(12, 12, 12), Path(14, 14, 14)],\n]\n\nIt is possible to define a search tree for any problem: you just need to use the appropriate API."
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 5\n10 12 1 2 14''') == '5'\nassert solution('''2 10\n10 12 1 2 14''') == '5'\nassert solution('''1 1\n10''') == '0'\nassert solution('''4 4\n10 11 1 4 10''') == '1'\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split(' '))\nl = list(map(int, stdin.readline().strip().split(' ')))\nres = 0\nfor i in range(m):\n    x = l[i]\n    if i % 2 == 0:\n        if x > 0:\n            res += x - 1\n        else:\n            res += 1 - x\n    else:\n        if x > 0:\n            res += 1 - x\n        else:\n            res += x + 1\nprint(res)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nimport unittest\n\nclass SolutionTestCase(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '2\\n111100\\n110110'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_expected\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\"\n\n\"\"\"\n\nfrom typing import List, Set, Dict\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n') == '1\\n101001\\n'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\nfrom collections import deque\nfrom itertools import permutations\nimport sys\n\nclass City:\n    def __init__(self, n):\n        self.parent = [None for _ in range(n + 1)]\n        self.rank = [0 for _ in range(n + 1)]\n        self.n = n\n        self.G = [set() for _ in range(n + 1)]\n\n    def make_set(self, x):\n        self.parent[x] = x\n        self.rank[x] = 0\n        self.G[x].add(x)\n\n    def find(self, x):\n        if self.parent[x]!= x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.rank[x] > self.rank[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.G[x] |= self.G[y]\n        self.G[y] = set()\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n\nclass Edge:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.rev = Edge(b, a)\n\n    def __eq__(self, other):\n        return self.a == other.a and self.b == other.b or self.a == other.b and self.b == other.a\n\n    def __hash__(self):\n        return hash(self.a) * hash(self.b)"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\\n\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"1\\n101001\\n\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"2\\n111100\\n110110\\n\"\nprint('Passed')"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, DefaultDict\nfrom unittest import TestCase\n\nfrom utils import read_input_multi_str"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 3\") == \"YES\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n---\n\nI've tried to solve it by myself. I'm too lazy to write solution and output parts.\n\nThe idea is the following.\n\nWe have 3 types of bricks:\n\n1. vertical, height = 1\n2. vertical, height = 2\n3. horizontal, height = 1\n\nWe want to find a way to put vertical bricks on walls with heights that are not all the same. For that we need to have 0 and 1 and 2 in the input.\n\nWe try to put vertical bricks on the right side of the wall.\n\nThen we try to put vertical bricks on the left side of the wall.\n\nThen we try to put vertical bricks on the left and the right sides of the wall.\n\nWe want to put horizontal bricks on the top of the wall.\n\nWe try to put horizontal bricks on the bottom of the wall.\n\nWe try to put horizontal bricks on the bottom and top of the wall.\n\nThen we try to put horizontal bricks on the top and bottom of the wall.\n\nWe want to put vertical bricks on the top of the wall.\n\nWe try to put vertical bricks on the bottom of the wall.\n\nWe try to put vertical bricks on the top and bottom of the wall.\n\nWe want to put horizontal bricks on the top of the wall.\n\nWe try to put horizontal bricks on the bottom of the wall.\n\nWe try to put horizontal bricks on the top and bottom of the wall.\n\nWe want to put vertical bricks on the left and right sides of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the left side of the wall.\n\nWe try to put horizontal bricks on the right side of the wall.\n\nWe try to put horizontal bricks on the left and right sides of the wall.\n\nWe want to put vertical bricks on the left side of the wall.\n\nWe try to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the right side of the wall.\n\nWe try to put horizontal bricks on the left side of the wall.\n\nWe try to put horizontal bricks on the right and left sides of the wall.\n\nWe want to put vertical bricks on the left side of the wall.\n\nWe try to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the left side of the wall.\n\nWe try to put horizontal bricks on the right side of the wall.\n\nWe try to put horizontal bricks on the left and right sides of the wall.\n\nWe want to put vertical bricks on the left side of the wall.\n\nWe try to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the top and bottom of the wall.\n\nWe try to put horizontal bricks on the left side of the wall.\n\nWe try to put horizontal bricks on the right and left sides of the wall.\n\nWe want to put vertical bricks on the top side of the wall.\n\nWe try to put vertical bricks on the bottom of the wall.\n\nWe try to put vertical bricks on the top and bottom of the wall.\n\nWe want to put horizontal bricks on the right side of the wall.\n\nWe try to put horizontal bricks on the left and right sides of the wall.\n\nWe want to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the top side of the wall.\n\nWe try to put horizontal bricks on the bottom of the wall.\n\nWe try to put horizontal bricks on the top and bottom of the wall.\n\nWe want to put vertical bricks on the left side of the wall.\n\nWe try to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the top side of the wall.\n\nWe try to put horizontal bricks on the bottom of the wall.\n\nWe try to put horizontal bricks on the top and bottom of the wall.\n\nWe want to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the top side of the wall.\n\nWe try to put horizontal bricks on the bottom of the wall.\n\nWe try to put horizontal bricks on the top and bottom of the wall.\n\nWe want to put vertical bricks on the left side of the wall.\n\nWe try to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the bottom side of the wall.\n\nWe try to put horizontal bricks on the top and bottom of the wall.\n\nWe want to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on the top side of the wall.\n\nWe try to put horizontal bricks on the bottom of the wall.\n\nWe try to put horizontal bricks on the top and bottom of the wall.\n\nWe want to put vertical bricks on the left side of the wall.\n\nWe try to put vertical bricks on the right side of the wall.\n\nWe try to put vertical bricks on the left and right sides of the wall.\n\nWe want to put horizontal bricks on"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\nassert solution(input()) == output()\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"2 5 4\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n''') == 'YES'\nassert solution('''\n3\n4 5 3\n''') == 'YES'\nassert solution('''\n2\n10 10\n''') == 'YES'\nassert solution('''\n3\n1 2 3\n''') == 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([1000, 6, [-100, -200, -300, 125, 77, -4]])) == '9'\n\"\"\"\nimport sys"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4', '-3 -6 5 4') == '-1'\nassert solution('1000 6', '-100 -200 -300 125 77 -4') == '9'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4\\n-3 -6 5 4') == '-1'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('5 10\\n0 0 0 0 0') == '1'\n\n------END-------\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\nassert solution(\"10 4\\n-3 -6 5 4\") == \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('1000000000000 5\\n0 0 0 0 0') == '4999999999996'\nassert solution('1000000000000 5\\n0 0 0 0 0') == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 2\") == \"2\"\nassert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\"\nassert solution(\"-1 0 0 0 0\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"10 4\\n-3 -6 5 4\") == \"-1\"\nprint(\"It is time for a cup of coffee.\")\n\n-----Explanation-----\nExample solution:"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"AZ\") == \"AZ\"\nassert solution(\"ZA\") == \"ZA\"\nassert solution(\"AA\") == \"AA\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABABAB\") == \"AB\"\nassert solution(\"AAABB\") == \"AB\"\nassert solution(\"ABCDABC\") == \"AB\"\nassert solution(\"ABABCD\") == \"AB\"\nassert solution(\"ABCDABCABCD\") == \"AB\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCD\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"XY\"\nassert solution
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AZA\") == \"AZ\"\nassert solution(\"AA\") == \"AA\"\nassert solution(\"ZA\") == \"ZA\"\nassert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\nassert solution('AAAAAA') == 'AA'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nprint(\"Passed\")\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABACABA\") == \"AB\"\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BBAABBBA') == 'BB'\nassert solution('ZZAABBB') == 'ZZ'\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABCD\") == \"AB\"\nassert solution(\"WXYZWX\") == \"XZ\"\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"a\"\nassert solution(\"aa\") == \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"test\") == \"test\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"codeforces\") == \"es\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('test') == '2'\nassert solution('codeforces') == '9'\nassert solution('yes') == '1'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"a\") == \"\"\n\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == 9\nassert solution('yes') == 1\nassert solution('b') == 1\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"where\", \"here\") == 2\nassert solution(\"a\", \"\") == 1\nassert solution(\"a\", \"b\") == 2\nassert solution(\"codeforces\", \"yes\") == 9\nassert solution(\"test\", \"yes\") == 7\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1 7 11\n''') == '2'\n\nassert solution('''5 5\n1 10 100 1000 1000\n''') == '0'\n\nassert solution('''4 4\n10 20 20 10\n''') == '10'\n\nassert solution('''5 2\n10 20 20 10\n''') == '0'\n\nassert solution('''5 3\n10 20 20 10\n''') == '0'"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 7 11\n''') == '2'\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7 11') == '2'\n\"\"\"\n\nN, X = map(int, stdin.split())\nd_list = list(map(int, stdin.split()))\nd_list.sort()\nd_list.reverse()\n\nfor d in d_list:\n    X += d\n    if X >= N:\n        print(d)\n        break"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 7 11') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == 2\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\"\"\"\nU - X, Y, D\n\n1. How to represent the graph?\n2. find min/max x, y\n3. check if min x <= y <= max x\n4. dp?\n5. int dp[min_x + 1, min_y + 1, min_d + 1, min_e + 1]\n6. index of min_d + 1\n7. index of min_e + 1\n8. min(dp)\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('rotor') == 'No'\nassert solution('abcba') == 'Yes'\nassert solution('aaa') == 'Yes'\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque\n\nfrom _pydecimal import Decimal, ROUND_HALF_EVEN\n\nSTR_CHAR_LEN = 2\nSTR_CHAR_LEN_SQRT = Decimal(STR_CHAR_LEN).sqrt()\nMAX_STR_LEN = int(STR_CHAR_LEN_SQRT)\nMIN_STR_LEN = int(STR_CHAR_LEN_SQRT * Decimal(-1))\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aa') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('mum') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaab') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('aaabaa') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"krrka\") == \"Yes\"\nassert solution(\"abbbaa\") == \"Yes\"\nassert solution(\"kakapc\") == \"Yes\"\nassert solution(\"pqpq\") == \"No\"\nassert solution(\"qqqq\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('akasaka') == 'Yes'\n\n'''\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nfrom decimal import Decimal\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''198 1.10''') == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('5.98') == '59'\nassert solution('8.68') == '88'\nassert solution('10.02') == '110'\nassert solution('0.10') == '0'\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint(\"You pass the test case!\")\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n\nfrom decimal import Decimal\n\nA, B = input().split()\n\nA = int(A)\nB = Decimal(B)\n\nprint(int(round(A * B)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint('Test pass.')"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution_01.test_01) == solution_01.test_01_result\nassert solution(solution_01.test_02) == solution_01.test_02_result\nassert solution(solution_01.test_03) == solution_01.test_03_result\nassert solution(solution_01.test_04) == solution_01.test_04_result\nassert solution(solution_01.test_05) == solution_01.test_05_result\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\") == \"0\"\nassert solution(\"2\\n5\\n3\") == \"0\"\nassert solution(\"2\\n5\\n3\\n4\") == \"1\"\nassert solution(\"5\\n5\\n5\\n5\\n5\") == \"0\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n1\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7\") == \"3\"\nassert solution(\"5\\n6\") == \"0\"\nassert solution(\"1\\n7\") == \"0\"\nassert solution(\"2\\n7\") == \"1\"\nassert solution(\"1\\n2\") == \"1\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"4\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == '3\\n0\\n0\\n1\\n999999999\\n381621773\\n'\n\"\"\"\nimport sys"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n') == '3'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 1\") == \"3\"\nassert solution(\"3 3 1\") == \"0\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"5 5 1\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 3 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"0\"\nassert solution(\"4 5 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nassert solution(\"5 5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"0\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 3 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"0\"\n\nprint(\"Test finished.\")\n'''"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"0\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"5 5 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom collections import deque, defaultdict\n\nn, m, s = map(int, input().split())\nadj = defaultdict(list)\nfor _ in range(m):\n    u, v = map(int, input().split())\n    adj[u].append(v)\n    adj[v].append(u)"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\nassert solution(\"6\\n1 1 1 4 4 4\") == 5\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('5\\n1 1 1 1 1') == '4'\nassert solution('8\\n1 1 1 1 1 1 1 1') == '7'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 4 1') == 4\nassert solution('6 1 1 4 4 4') == 5\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 4 4 4\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == expected_output_1\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '01'\nassert solution('2 1') == '10'\nassert solution('2 3') == '101010'\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12\\n') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001\\n000001000001'\n\nassert solution('2 1\\n1 32') == '000001000002\\n000001000001'\n\nassert solution('3 1\\n1 32\\n2 63\\n1 12') == '000002000001\\n000001000001\\n000001000002'\n\nassert solution('1 1\\n1 32') == '000001000002'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n\nimport sys\n\nn_m_list = sys.stdin.read().split('\\n')[:-1]\nn_m_list = [list(map(int, x.split())) for x in n_m_list]\nprefectures, cities = n_m_list[0]\nprefectures_cities = n_m_list[1]\nprefectures_cities = [list(map(int, x.split())) for x in prefectures_cities]\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"00000111112\\n11101111011\\n11011110110\\n11100111010\\n11101101010\\n11101111010\\n11011110110\\n11100111010\\n11101111010\\n11101111010\"\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nalive = set()\nfor i in range(n):\n    alive.add(i+1)\n\nhealth = dict()\nfor i, ai in enumerate(a):\n    health[i+1] = ai"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 8 40') == '2'"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n10 40 2 8\n''') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\n\"\"\"\n\nimport math\nimport sys\nfrom collections import namedtuple\n\n\nclass Attack(namedtuple(\"Attack\", \"attacker target\")):\n    def __str__(self):\n        return f\"{self.attacker} attacks {self.target}.\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n2\\n2\") == \"2\"\nassert solution(\"2\\n1\\n1\") == \"2\"\nassert solution(\"2\\n1\\n1\\n1\\n1\") == \"2\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nlst = list(map(int, sys.stdin.readline().split()))\nlst.sort()\nprint(lst[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 8 40\\n\") == \"2\"\n\n\"\"\"\nimport sys\nimport math\n\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=086&lang=jp\nhttps://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=186314#1\nhttps://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=186314#2\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"?(_-_-_-)_-_-_-_>-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"?(__+___+__-___):-___>__.\"\n) == \"0101\"\nassert solution(\n\"?(__-_+_/___+__-___):-__>__,_____<__._____<______,______<_______._____<_____,_____<______,______<_______.\"\n) == \"0010\"\nassert solution(\n\"?(____+_*____):-____>__,_____<__._____<______,______<_______._____<_____,_____<______,______<_______.\"\n) == \"false\"\nassert solution(\n\"?(__-_+_/____+__-___):-__>__,_____<__._____<______,______<_______._____<_____,_____<______,______<_______.\"\n) == \"false\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0101'\nassert solution('?(__+___+__-___):-___>__') == '0101'\nassert solution('?(__+___+__-___):-___>__') == '0101'\nassert solution('?(__+___+__-___):-___>__') == '0101'\nassert solution('?(__+___+__-___):-___>__') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<__.\\\\n____<"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('?(_____+_____):-______>______,______<_______') == '0250341'\nassert solution('?(_____+_____):-______>______,______<_______') == '0101'\nassert solution('?(_____+_____):-______>______,______<_______') == '0250341'\nassert solution('?(_____+_____):-______>______,______<_______') == '0250341'\nassert solution('?(_____+_____):-______>______,______<_______') == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(___*___):-__>__,__<__\") == \"0250341\"\nassert solution(\"?(__+___-___):-__>__,__<__\") == \"0101\"\nassert solution(\"?(________*__________+_*__________):-__<___,___<__,___<_____,_____<________,________<________.&\") == \"0250341\"\n\nsolution(\"?(________*__________+_*__________):-__<___,___<__,___<_____,_____<________,________<________.&\")\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0101'\nassert solution('?(_-_-_-_-_/):-__>__') == '0010'\n\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(__+___+__-___):-___>__\") == \"0101\"\nassert solution(\"?(____-_/____+_____*_____):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('?(___+___+___):-___>__') == '0101'\nassert solution('?(_-_-_-_-):-___>__,_____<__._____<__._____<__._____<__._____<__') == '0010'\nassert solution('?(____-_+_-_-):-___>__._____<__._____<__._____<__._____<__._____<__._____<__._____<__._____<__._____<__') == '0250341'\n\nprint(solution(input().strip()))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\") == 3\n\nassert solution(\"3 4 2\") == 5\n\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\n\na = []\nfor i in range(n):\n    a.append([int(x) for x in input().split()])"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3 11''') == 3\nassert solution('''3 4 2''') == 5\nassert solution('''3 4 1000000000000000000''') == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 11') == 3\n\"\"\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"3 4 1\") == 6\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"10\\nrocesfedoc\"\n) == \"codeforces\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n\"\"\"\nimport math\nimport time"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') =='secrofedoc'\n\"\"\"\n\nn = int(input())\ns = input()\nres = s[::-1]\nprint(res)\nfor i in range(2, int(n**0.5)+1):\n    if n % i == 0:\n        print(i)\n        res = res[::-1]\n        res = res[:i-1] + res[i-1:i+n%i-2:-1] + res[i+n%i-2:]\n        print(res)\n        break\nprint(res)\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('rocesfedoc') == 'codeforces'\nassert solution('plmaetwoxesisiht') == 'thisisexampletwo'\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\nassert solution(\"a\") == \"a\"\n\"\"\"\n\nn = int(input())\nt = input()"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\n\"\"\"\n\n-----"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'5 14'\n) == '19'\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('1 1') == '2'\nassert solution('2 2') == '5'\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 14\") == \"19\"\nprint(solution(\"381 492\"))\nassert solution(\"381 492\") == \"873\"\nprint(solution(\"\"))\n\"\"\"\nimport math"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 14\") == \"19\"\n\n-----\n\n\nSolution:\na,b = [int(x) for x in stdin.split()]\n\nprint(a+b)\n\n---\n\n//code\n5 14\n\nOutput\n19\n---\n\n\nSolution:\na,b = [int(x) for x in stdin.split()]\n\nprint(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\nimport re"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\n-------\n5 14\n-----\n\n5 + 14 = 19\n\n5 14\n-----\n\n5 14\n-----\n\n5 14\n-----\n\n5 14\n-----\n\n5 14\n\n\"\"\"\nimport ast"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14') == 19\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430. \u0415\u0441\u043b\u0438 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u0443\u043a\u0432\u0430 f \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0451 \u0438\u043d\u0434\u0435\u043a\u0441. \u0415\u0441\u043b\u0438 \u043e\u043d\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0434\u0435\u043a\u0441 \u0435\u0451 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f. \u0415\u0441\u043b\u0438 \u0431\u0443\u043a\u0432\u0430 f \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f, \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0435.\n\n\u041f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 count \u0438 \u0446\u0438\u043a\u043b\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b if \u0438 else.\n\nSample Input:\n\nffdsskdffdss\nSample Output:\n\n2 4\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2+3\") == \"+>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"11-8+2-2\") == \"+++++++++++>\\n++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"4-5+6-3+1-9\") == \">>>>>>>>>>><<<<<<<<<<[<[->-]<]>>>>>>>>>>><<<<<<<<<<<<<[->+>-]<]>>>>>>>>>>>>>>>>>.\"\nassert solution(\"2-5-1-3+7\") == \">>>>>>>>>>[<<<<<<<<<<<[->+>-]<]>>>>>>>>>>>>[>>>>>[-]<<<<<<<<<<<<<<[-]<]>>>>>.\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2+3\") == '++++>'\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2+3') == '++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n\n\nclass Brainfuck(object):\n    def __init__(self, expression: str):\n        self.expression = expression\n        self.memory = [0] * 30000\n        self.pointer = 0\n        self.steps = 0\n        self.stack = []\n\n    def execute(self, input_: str) -> str:\n        self.input = input_\n        for char in self.expression:\n            if char == '+':\n                self.increase()\n            elif char == '-':\n                self.decrease()\n            elif char == '<':\n                self.move_left()\n            elif char == '>':\n                self.move_right()\n            elif char == '.':\n                self.print_()\n            elif char == ',':\n                self.take_input()\n            elif char == '[':\n                self.check_bracket()\n            elif char == ']':\n                self.left_bracket()\n            else:\n                continue\n        return self.output\n\n    def increase(self):\n        if self.pointer + 1 < len(self.memory):\n            self.memory[self.pointer] += 1\n            if self.memory[self.pointer] > 255:\n                self.memory[self.pointer] = 0\n        else:\n            self.memory.append(0)\n        self.pointer += 1\n\n    def decrease(self):\n        if self.pointer - 1 >= 0:\n            self.memory[self.pointer] -= 1\n            if self.memory[self.pointer] < 0:\n                self.memory[self.pointer] = 255\n        else:\n            self.memory.insert(0, 255)\n        self.pointer -= 1\n\n    def move_right(self):\n        self.pointer += 1\n\n    def move_left(self):\n        self.pointer -= 1\n\n    def print_(self):\n        self.output += chr(self.memory[self.pointer])\n\n    def take_input(self):\n        self.memory[self.pointer] = ord(self.input[0])\n        self.input = self.input[1:]\n\n    def check_bracket(self):\n        if self.memory[self.pointer] == 0:\n            self.pointer += 1\n            while True:\n                if self.pointer == len(self.memory):\n                    raise IndexError\n                if self.memory[self.pointer]!= 0:\n                    break\n                self.pointer += 1\n\n    def left_bracket(self):\n        if self.memory[self.pointer]!= 0:\n            self.pointer -= 1\n            while True:\n                if self.pointer == -1:\n                    raise IndexError\n                if self.memory[self.pointer]!= 0:\n                    break\n                self.pointer -= 1\n        else:\n            self.pointer -= 1\n            while True:\n                if self.pointer == -1:\n                    raise IndexError\n                if self.memory[self.pointer]!= 0:\n                    break\n                self.pointer -= 1\n\n    def print_memory(self):\n        return self.memory\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2+3\") == \"+>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\n\n\n\n\n\n\n\"\"\"\ncode:\n\n\"\"\"\n\ncode = \"2+3\"\n\n\n\n\n\nimport re"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1+1\") == \"+>\\n\"\nassert solution(\"1+2\") == \">+>\\n\"\nassert solution(\"1-1\") == \">->\\n\"\nassert solution(\"1-2\") == \">->\\n\"\nassert solution(\"1-3\") == \">->\\n\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n', 'Wrong result'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n', 'Wrong result'\n'''\nfrom typing import List, Tuple\nimport operator\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('+') == '>'\nassert solution('-') == '<'\nassert solution('*') == '+'\n\nassert solution('2+3') == '>'\nassert solution('9-7') == '<'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"112123123412345$1$112123412341235$2$11123412341235$3$1111123412341235$4$111123412341235$5$1111123412341235$6$11111123412341235$7$11111123412341235$8$11111123412341235$9$11111123412341235$0\") == \"111111111111111111111111111111110\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"0\"\nassert solution(\"1121234123412341234$\\dots$\") == \"0\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"1122$\\dots$\") == \"2\"\nassert solution(\"1223$\\dots$\") == \"2\"\nassert solution(\"1234$\\dots$\") == \"2\"\nassert solution(\"1234$\\dots$\") == \"2\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"112123123412345$\\dots$\") == \"2\"\nassert solution(\"112123123412345$\\dots$\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nres = [\"\"] * n\n\nfor _ in range(n):\n    k = int(sys.stdin.readline())\n    index = k-1\n    res[index] = sys.stdin.readline()\n\nfor i in range(n):\n    print(int(res[i][0]))"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"56 456 123456 1234567 12345678 123456789 12345678910\") == \"0 2 4 0 0 1 1\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\n\"\"\"\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u041a\u043e\u0441\u043b\u0438\u0446\u043a\u043e\u0439\n\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 \u0434\u043b\u0438\u043d\u044b n. \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432, \u043a\u0440\u043e\u043c\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u0447\u0451\u0442\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u044b\u0439 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0430. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 10000. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 100. \u0427\u0438\u0441\u043b\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u0440\u043e\u043c\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u0447\u0451\u0442\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n\n\n-----Sample Input-----\n7\n3\n5\n1\n2\n4\n3\n1\n7\n\n-----Sample Output-----\n44\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 56 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \\\n    \"112123123412345123456123456712345678912345678910\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11223341234123445$0\\dots$\"\n\nYou can learn more about the task on the task description page.\n\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1\\n2\\n5\\n2\\n0\\n'\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\\n\"\n\"\"\"\n\nq = int(input())\n\nfor i in range(q):\n    k = int(input())\n    n = k\n    flag = 0\n    while n!= 0:\n        if n % 10 > 9:\n            flag = 1\n            break\n        n = n // 10\n    if flag == 0:\n        print(k // 10)\n    else:\n        print(9)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == '4'\nassert solution('1') == '0'\nassert solution('777') == '0'\nassert solution('7773') == '1'\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == '4'\nassert solution('10') == '1'\nassert solution('5') == '0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nimport ast\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('9') == '1'\nassert solution('10') == '0'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == '4'\n\"\"\"\n\nn = int(stdin.readline().strip())\nlst = [0, 0, 0, 0, 0, 0, 0]\n\nfor i in range(1, n+1):\n    num = str(i)\n    c = 0\n    for j in range(len(num)):\n        if num[j] == '7':\n            c += 1\n        elif num[j] == '5':\n            c += 1\n        elif num[j] == '3':\n            c += 1\n    if c >= 3:\n        lst[6] += 1\n\nfor i in range(6):\n    lst[i] = str(lst[i])\n\nprint(' '.join(lst))"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"575\") == 4\n\"\"\"\n\n\"\"\"\nThe code below uses Python's integer arithmetic. \nThe minimum and maximum values of the range of values that can be used are limited by the available number of bits in the type used to represent them. \nThe range of values that can be represented by signed integers on a 32- or 64-bit computer is 2^(31) or 2^(63) to 2*(-2) or 2*(-1). \nSince Python has no native support for unsigned integers, the numbers between 2^(31) and 2*(-2) must be represented explicitly. \nThe range of values that can be represented by unsigned integers is then 2^(32) to 2*(-1).\n\"\"\"\n\n\"\"\"\nThe following is a proof by contradiction that there are no Shichi-Go-San numbers not greater than 575:\n\nThe maximum value of the range of Shichi-Go-San numbers is\n2^(31) - 1 = 2,147,483,647 = 2*(-2).\nThe minimum value of the range of Shichi-Go-San numbers is\n2^(32) = 4,294,967,295 = 2*(-1).\nThere are 2*(-1) + 1 = 2*(-2) + 1 = 2*(-1) + 1 = 2 = 2*(-1) + 1.\nThere are 2 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2 and 2*(-1).\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2.\nThere are 4 numbers between 2*(-1) and 2."
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11010') == 1\nassert solution('110110') == 2\nassert solution('110100') == 2\nassert solution('110011') == 3\nassert solution('111000') == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"000\") == 1\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11100\") == 1\nassert solution(\"10011\") == 1\nassert solution(\"00100\") == 1\nassert solution(\"11101\") == 1\nassert solution(\"11111\") == 3\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110\") == 1\nassert solution(\"011\") == 2\nassert solution(\"100\") == 0\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.1.010.01') == 2\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('110') == '1'\nassert solution('001') == '0'\nassert solution('011') == '1'\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00') == 1\n\n\"\"\"\n\nimport re\n\nregex = re.compile(r'[0|1]{1}')"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('11') == 2\nassert solution('110') == 1\nassert solution('11110') == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('011') == 2\nassert solution('010') == 2\nassert solution('110') == 3\nassert solution('100') == 3\nassert solution('000') == 0\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"110\") == \"1\"\nassert solution(\"111\") == \"1\"\nassert solution(\"010\") == \"0\"\nassert solution(\"101\") == \"0\"\n\n---Problem---\nYou're given a string S consisting of N 0's and 1's, and you have to replace every 1 with a 2 and every 0 with a 1.\nIn other words, you have to change 1's to 2's and 0's to 1's.\nWhat is the minimum number of steps needed?\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq S \\leq 10^5\n - S is a string consisting of N 0's and 1's.\n\n-----Input-----\nThe first line of the input contains the number of test cases T.\nThe next T lines each contain a string S.\n\n-----Output-----\nFor each test case, print the minimum number of steps in a new line.\n\n-----Sample Input-----\n3\n001\n010\n010\n\n-----Sample Output-----\n1\n2\n2\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 9 3 7 5\") == \"APPROVED\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"8 17 21 26 27\") == \"DENIED\"\nassert solution(\"4 4 6 8 10 12 14 16 18 20\") == \"DENIED\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 10 12 18 32\") == 'APPROVED'\nassert solution(\"8 12 24 36 48\") == 'APPROVED'\nassert solution(\"10 20 28 38 46\") == 'APPROVED'\nassert solution(\"6 10 32 44 8 16\") == 'DENIED'\nassert solution(\"6 5 8 20 17\") == 'DENIED'\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n6 7 9 10 31''') == 'APPROVED'\n\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n6 7 9 10 31') == \"APPROVED\"\n\"\"\"\n\nn = int(input())\nnumbers = [int(i) for i in input().split()]\n\neven = [i for i in numbers if i % 2 == 0]"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == 'DENIED'\nassert solution('1\\n2') == 'DENIED'\nassert solution('1\\n2\\n3') == 'APPROVED'\nassert solution('1\\n2\\n3\\n4') == 'APPROVED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('UDDR') == 'No'\nassert solution('LLUD') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDLURUDL\") == \"Yes\"\nassert solution(\"RUULDRDRUDL\") == \"No\"\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RUDLUDR') == \"Yes\"\nassert solution('LLRUDR') == \"No\"\nassert solution('UDUDR') == \"Yes\"\nassert solution('RDRUULR') == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"UDDRLULDR\") == \"Yes\"\nassert solution(\"UDRRRLLDL\") == \"No\"\nassert solution(\"LULLLLL\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('DRULR') == 'Yes'\nassert solution('LDRDRULU') == 'No'\n\"\"\"\n\nS = input()\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('URUDLRR') == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(RUDLUDR) == 'Yes'\nassert solution(RUDLDRD) == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nn = int(stdin.readline())\na, b, c, d, e = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"1 2 3 4 5 6\") == \"0\"\nassert solution(\"5 2 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"1 2 2 4 3\") == \"5\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"1 3 2 4 5\") == \"7\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"1 2 3 4 5\") == \"7\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n\n\"\"\"\nAwait Task() from the producer thread if it's done.\n\"\"\"\nimport time\nimport threading"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == '7'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"3 3 3 3 3\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n\"\"\"\n\nN, A, B, C, D, E = [int(s) for s in input().split()]\n\nans = 0\nfor i in range(N):\n    tmp = [A, B, C, D, E]\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += a\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += b\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += c\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += d\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += e\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += a\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += b\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += c\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += d\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += e\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += a\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += b\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n    ans += c\n    tmp = [a, b, c, d, e]\n    tmp[0] -= 1\n    tmp[1] -= 1\n    tmp[2] -= 1\n    tmp[3] -= 1\n    tmp[4] -= 1\n    a, b, c, d, e = sorted(tmp)[0], sorted(tmp)[1], sorted(tmp)[2], sorted(tmp)[3], sorted(tmp)[4]\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 8\n\"\"\"\nimport sys"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '2'\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n\nN = int(input())\n\nnums = set(range(10))"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nresults = 0\nfor num in range(10):\n    if num == 0 or num == 9:\n        results += 1"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nprint(sum([2 if i == 0 or i == 9 else 0 for i in range(N + 1)]))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2') == '4'\nassert solution('1\\n1') == '0'\nassert solution('3\\n9') == '1'\n\n------Example Input-------\n4\n\n-----Example Output-----\n3\n\"\"\"\n\n\"\"\"\nThis is an example of the correct input format.\nThe first line of input will be N, the number of test cases.\nEach of the following N lines contains N integers.\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(20) == 23\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 2\nassert solution('2') == 3\nassert solution('3') == 5\nassert solution('4') == 7\nassert solution('5') == 11\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"7\"\nassert solution(\"20\") == \"23\"\nassert solution(\"10^5\") == \"1009\"\nassert solution(\"2\") == \"3\"\nassert solution(\"10^6\") == \"10111\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5) == \"5\"\nassert solution(6) == \"5\"\nassert solution(20) == \"23\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == '7'\nassert solution('17') == '19'\nassert solution('1') == '2'\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20\") == \"23\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '5'\nassert solution('3') == '5'\nassert solution('2') == '3'\nassert solution('1') == '2'\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 1 3 2') == 1\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 1 3 2') == 1\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 3 2\") == '1'\nassert solution(\"4 1 3 2\") == '0'\nassert solution(\"3 3 3 3\") == '0'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 3 2') == '1'\nassert solution('5 2 6 4') == '1'\nassert solution('4 2 3 1') == '1'\nassert solution('1 1 1 1') == '0'\nassert solution('5 4 5 3 6 5 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint('Hooray!')\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 100 90 80\n98\n40\n30\n21\n80\n\"\"\"\n) == \"23\"\n\nassert solution(\n\"\"\"\n7 98 94 85\n98\n40\n30\n21\n80\n100\n\"\"\"\n) == \"22\"\n\nassert solution(\n\"\"\"\n7 100 94 85\n98\n40\n30\n21\n80\n100\n\"\"\"\n) == \"22\"\n\nassert solution(\n\"\"\"\n1 1 1 1\n1\n1\n1\n1\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n1 1 1 1\n1\n1\n1\n1\n\"\"\"\n) == \"0\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 100 90 80''') == '23'\n'''\n\n5 100 90 80\n98\n40\n30\n21\n80\n\n23\n\n'''\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\n\"\"\"\nNote:\n    The first line of input gives the number of test cases, T. T test cases follow, each described by one line.\n    Each line follows the format described in the problem statement.\n    The first line of each test case contains the number of Bamboo points (N), an integer in the range [3, 8].\n    Each of the following N lines describes a bamboo of length L[i].\n    L[i], the length of the ith bamboo, is an integer in the range [1, 1000].\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 1\\n2') == '1'\nassert solution('2 1 1 1\\n2') == '1'\nassert solution('1 1 1 1\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\\n\") == \"23\"\nassert solution(\"3 100 2 3\\n1\\n2\\n3\\n\") == \"5\"\n\"\"\"\n\nimport re\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass Magic:\n    def __init__(self, magic_type: int, value: int):\n        self.magic_type = magic_type\n        self.value = value\n\n    def __repr__(self):\n        return f\"{self.magic_type} MP\"\n\n\nclass Bamboo:\n    def __init__(self, length: int):\n        self.length = length\n\n    def __repr__(self):\n        return f\"Bamboo of length {self.length}\"\n\n    def extension_magic(self) -> Magic:\n        return Magic(1, self.length + 1)\n\n    def shortening_magic(self) -> Magic:\n        return Magic(1, max(self.length - 1, 0))\n\n    def composition_magic(self, other: 'Bamboo') -> 'Bamboo':\n        return Bamboo(self.length + other.length)\n\n\nclass BambooSystem:\n    def __init__(self, length: int, magic: dict):\n        self.length = length\n        self.magic = magic\n\n    def __repr__(self):\n        return f\"BambooSystem of length {self.length}\"\n\n    def get_bamboo(self, length: int) -> Bamboo:\n        return Bamboo(length)\n\n    def get_magic(self, magic_type: int) -> Magic:\n        return self.magic[magic_type]\n\n    def get_cost(self, bamboo: Bamboo) -> int:\n        result = 0\n        for magic_type in self.magic.values():\n            if magic_type.magic_type == 3 and bamboo.length > magic_type.value:\n                if magic_type.value > self.length:\n                    return 10 ** 5\n                result += 10\n            if magic_type.magic_type == 1 and self.length - 1 > bamboo.length:\n                result += 1\n        return result\n\n    def get_min_cost(self, previous_bamboo: Bamboo, previous_cost: int) -> int:\n        if previous_bamboo.length == self.length:\n            return previous_cost\n        if previous_bamboo.length > self.length:\n            return 10 ** 5\n\n        min_cost = 10 ** 5\n        for magic_type in self.magic.values():\n            if magic_type.magic_type == 1:\n                if previous_bamboo.length - 1 > self.length:\n                    continue\n                new_bamboo = self.get_bamboo(self.length)\n                new_cost = self.get_cost(new_bamboo)\n                min_cost = min(min_cost, new_cost + self.get_min_cost(new_bamboo, previous_cost))\n            if magic_type.magic_type == 2:\n                if previous_bamboo.length + 1 > self.length:\n                    continue\n                new_bamboo = self.get_bamboo(self.length)\n                new_cost = self.get_cost(new_bamboo)\n                min_cost = min(min_cost, new_cost + self.get_min_cost(new_bamboo, previous_cost))\n            if magic_type.magic_type == 3:\n                new_bamboo = self.get_bamboo(self.length)\n                new_cost = self.get_cost(new_bamboo)\n                min_cost = min(min_cost, new_cost + self.get_min_cost(new_bamboo, previous_cost))\n        return min_cost\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == '23'\n\"\"\"\n\n\"\"\"\n---- Solution 1 ----\n\"\"\"\nn, a, b, c = list(map(int, stdin.readline().strip().split()))\n\nres = 0\nfor i in range(n):\n    l = int(stdin.readline().strip())\n    if l > b:\n        res += (l-b) * 10\n        b = l\n    if l > c:\n        res += (l-c) * 9\n        c = l\n\nprint(res + (b+c)*3)\n\n\"\"\"\n---- Solution 2 ----\n\"\"\"\n\nn, a, b, c = map(int, stdin.readline().split())\n\ncost = 0\nwhile a > b:\n    cost += (a - b) * 2\n    b += 1\nwhile b > c:\n    cost += (b - c) * 3\n    c += 1\nwhile c > a:\n    cost += (c - a) * 3\n    a += 1\n\nprint(cost)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('A') == 'B'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABCXYZ', 2) == 'CDEZAB'\nassert solution('ABCXYZ', 4) == 'EFGHIJKL'\nassert solution('ABCXYZ', 27) == 'ABCXYZ'\nassert solution('ABCXYZ', 52) == 'ABCXYZ'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A B C') == 'C D E'\nassert solution('A Z Y') == 'B A A'\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == 'B'\nassert solution('B') == 'C'\nassert solution('C') == 'D'\nassert solution('D') == 'E'\nassert solution('E') == 'F'\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"PQRSTU\") == \"RSTPQ\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 4 3 3 2') == '2 4 3 3 2'\nassert solution('2 3 3 2 2') == '2 2'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('123456 789012') == '6 9 8 5 4 1 2 3 7'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n5 2 3 2 4\n''') == '3 4 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1\") == \"999999\"\nassert solution(\"2750131 199999\") == \"199999\"\n\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import islice, chain"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"7 2\") == \"221122\"\nassert solution(\"7 3\") == \"221121\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2') == '111111'\nassert solution('5 1') == '221111'\nassert solution('7 1') == '1121122'\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 3\") == \"21113\"\n\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('7 2') == '221122'\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"221122\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\n\"\"\"\n\nfrom collections import deque\n\nN, K = map(int, input().split())\n\nstudents = deque(map(int, input().split()))\n\nchosen = []\n\nwhile len(students):\n    chosen.append(max(students))\n    students.popleft()\n    chosen.append(max(students))\n    students.popleft()\n    if len(chosen) == K:\n        break\n\nprint(''.join(['1' if i in chosen else '2' for i in range(N)]))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"22112\"\nassert solution(\"7 1\") == \"112122\"\nassert solution(\"5 1\") == \"21112\"\n\"\"\"\n\nimport bisect"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"5 2\"\n) == \"11111\"\n\nassert solution(\n\"5 1\"\n) == \"21112\"\n\nassert solution(\n\"7 1\"\n) == \"1121122\"\n\nprint(\"OK\")\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"221110\"\nassert solution(\"7 1\") == \"122211\"\nassert solution(\"5 1\") == \"211110\"\nassert solution(\"5 1\") == \"211110\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('2\\n100 1') == 2\nassert solution('4\\n1 3 3 7') == 4\n\n'''"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 2 3 3 7\") == 4"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 1 1 1 1\") == 0\nassert solution(\"1 2 3 4 5\") == 6\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 1 2 3\") == 2"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2 3\\n') == 2\nassert solution('100 1\\n') == 2\nassert solution('100 1\\n1 3 7\\n') == 4\nassert solution('100 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input()), 'Error'\nprint(solution(str(input())))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3\") == \"2\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 1 2 3\") == 2\n\nassert solution(\"5 1 2 1 2 3\") == 2\n\nassert solution(\"1 3 3 7\") == 4\n\nassert solution(\"100 1\") == 2\n\n\n\n\"\"\"\n\na = input().split()\nb = list()\nans = 0\n\nfor i in range(0, len(a)):\n    a[i] = int(a[i])\n    b.append(0)\n\nfor i in range(0, len(a)):\n    if i == 0:\n        b[0] = 0\n    elif i == 1:\n        if a[0] == a[1]:\n            b[0] = b[1]\n        else:\n            b[0] = 1\n    elif i == len(a) - 1:\n        if a[i - 1] == a[i]:\n            b[len(a) - 1] = b[i - 1]\n        else:\n            b[len(a) - 1] = b[len(a) - 2] + 1\n    elif a[i - 1] < a[i] < a[i + 1]:\n        b[i] = b[i - 1]\n    elif a[i - 1] > a[i] > a[i + 1]:\n        b[i] = b[i - 1] + 1\n    else:\n        b[i] = b[i - 1]\n\nfor i in range(0, len(b)):\n    ans += b[i]\nprint(ans % 1000000007)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n100 1\") == 2\nassert solution(\"4\\n1 3 3 7\") == 4\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n100 1\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == 1\nassert solution(\"1 2 3 4 5\") == 2\nassert solution(\"1 1 1 1023\") == 1\nassert solution(\"16\") == 1\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 1 5 4 9\") == 1\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 1 1 1023') == '0'\nassert solution('4 7 1 5 4 9') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\nassert solution('16') == '1'\nassert solution('4 7 1 5 4 9') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 7 1 5 4 9\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\nassert solution(\"1 2 3 4 5\") == '2'\nassert solution(\"16\") == '1'\nassert solution(\"1 1 1 1023\") == '0'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01110\") == \"3\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('110') == '1'\nassert solution('1110') == '3'\nassert solution('11110') == '4'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('10') == '10'\nassert solution('1111') == ''\nassert solution('1110') == '110'\n\n---\nO(N) time\nO(N) extra space\n\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0011\") == 4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == '4'\nassert solution('101') == '1'\nassert solution('1111') == '0'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1100\") == 2\nassert solution(\"11101\") == 3\nassert solution(\"111111\") == 5\nassert solution(\"11111\") == 6\nassert solution(\"1111111\") == 6\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0111\") == \"1\"\nassert solution(\"101101\") == \"2\"\nassert solution(\"10111110\") == \"3\"\nassert solution(\"11101101010\") == \"4\"\nassert solution(\"1110110101101110\") == \"5\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0111\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1100\") == \"4\"\nassert solution(\"101\") == \"2\"\nassert solution(\"110111010\") == \"3\"\nassert solution(\"11111111\") == \"0\"\nassert solution(\"110111101\") == \"2\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10111\") == \"4\"\nassert solution(\"11001\") == \"4\"\nassert solution(\"11110\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\nassert solution('''4 2\n3 1\n2 4''') == '1'\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import deque\nimport math\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\nassert solution('''4 2\n2 4\n1 3''') == '0'\nassert solution('''4 2\n1 3\n2 4\n3 4''') == '2'\nassert solution('''4 2\n1 3\n2 4\n1 4\n2 3''') == '0'\nassert solution('''4 3\n1 2\n2 3\n1 3\n2 4''') == '1'\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n2 4\\n4 3\\n1 3\\n5 2\\n2 2\\n1 3') == '2'\nassert solution('3 3\\n2 4\\n1 3\\n1 3\\n1 3\\n1 3') == '1'"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == '2'"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"3\\n3 2 1\") == \"1\"\nassert solution(\"4\\n3 4 2 1\") == \"2\"\n\n---\n>>> \n= RESTART: C:\\Users\\Admin\\Desktop\\Python\\Coursera\\Algorithms Exercises\\Exercise8_3.py\n4\n1 2 2 1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n0\n\nThe minimum number of watering operations required is 2.\n>>> \n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 2 1''') == '2'\nassert solution('''4\n1 2 2 1''') == '2'\nassert solution('''4\n1 2 2 1''') == '2'\n\"\"\"\n\nfrom typing import List, Any\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 2\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"7\\n1 2 3 3 3 3 3 3\") == \"1\"\nassert solution(\"10\\n1 2 3 4 4 5 5 6 6 7\") == \"3\"\n\"\"\"\n\n\"\"\"\nINPUT:\n4\n1 2 2 1\nOUTPUT:\n2\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\\n\") == '2'\n\"\"\"\nimport sys\nimport os\nimport traceback\n\nfrom io import StringIO\nfrom typing import List, Tuple, Union\nfrom collections import deque\n\nDEBUG = False\nDATA_FILE ='solutions/task_1/task_1_sample'\n\n\nclass Solution:\n    def __init__(self):\n        self.input_file = None\n\n    def solve(self, input_file) -> None:\n        self.input_file = input_file\n        try:\n            self.run_solution()\n        except:\n            if DEBUG:\n                print('DEBUG-MODE: Error occurred:\\n{}'.format(traceback.format_exc()))\n            else:\n                print('Error occurred')\n\n    def run_solution(self) -> None:\n        \"\"\"\n        Solution to task 1.\n        :return: None\n        \"\"\"\n        stdin = StringIO(self.input_file.read().strip())\n        n: int = int(stdin.readline().strip())\n        numbers: List[int] = [int(x) for x in stdin.readline().split()]\n        min_result: int = sys.maxsize\n        max_result: int = -sys.maxsize - 1\n        for idx, number in enumerate(numbers):\n            if idx == 0:\n                result = abs(number - idx)\n                min_result = min(min_result, result)\n            else:\n                left_neighbor_num: int = numbers[idx - 1]\n                right_neighbor_num: int = numbers[idx]\n                result = abs(number - idx) + abs(left_neighbor_num - idx) + abs(right_neighbor_num - idx)\n                min_result = min(min_result, result)\n            max_result = max(max_result, result)\n        print(min_result)\n        print(max_result)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 4 1') == '2'\nassert solution('2 1 3 2 1') == '4'\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n-1 1') == '4'\nassert solution('3 10\\n2 4 1 2') == '0'\nassert solution('2 4\\n-1 1') == '4'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10\\n2 1 -3') == '3'\nassert solution('4 10\\n2 1 -3') == '2'\nassert solution('10 10\\n2 4 1 2') == '2'\nassert solution('100 10\\n2 4 1 2') == '2'\nassert solution('4 100\\n-2 1') == '4'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 1 -3') == 3\nassert solution('2 4\\n-1 1') == 4\nassert solution('4 10\\n2 4 1 2') == 2\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 1 -3\\n\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\\n\") == \"2\"\nassert solution(\"4 10\\n2 1 1 -3\\n\") == \"0\"\n\n\"\"\"\nimport itertools\nimport sys\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == 3\nassert solution(\"2 4\\n-1 1\") == 4\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n\"\"\"\n\nfrom collections import defaultdict\n\nn, w = [int(i) for i in input().split(' ')]\ns = defaultdict(int)\n\nfor i in range(n):\n    s[int(input())] += 1\n\nprint(s)\n\nd = defaultdict(int)\ns = {1: w, w: 0}"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n2 1 4 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 1 -3\") == \"3\"\nassert solution(\"2 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n2 4 1 2\") == \"0\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 1 2\") == \"2\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"4 10\") == \"4\"\nassert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"3 5\\n2 1 -3\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == '9 3 6 12 4 8'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n---\n\n\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438\n\n\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e: \u043e\u043d\u0430 \u043c\u0435\u043d\u044f\u0435\u0442 \u043c\u0435\u0441\u0442\u0430\u043c\u0438 $n$ \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u0437\u0430\u0442\u0435\u043c \u0441 \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043a\u043e\u043d\u0446\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430.\n\n\u041f\u0440\u0438 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435, \u043f\u0435\u0440\u0432\u044b\u0435 $n - 1$ \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u044f \u043f\u0435\u0440\u0432\u044b\u0445 $n - 1$ \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u044b\u0445\u043e\u0434 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0412\u043c\u0435\u0441\u0442\u043e $x$ \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f $n$. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u0435\u0440\u0432\u044b\u0445 $n - 1$ \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 $n$.\n\n\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0447\u0438\u0441\u0435\u043b \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 \u043e\u0442 1 \u0434\u043e $n$. \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u043a\u0430\u043a\u043e\u0439 \u043e\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b.\n\n\u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u043e $n$, \u0430 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 $[1,n]$. \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d \u0442\u0430\u043a\u0436\u0435, \u043a\u0430\u043a \u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0447\u0438\u0441\u0435\u043b \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n1 2\n2 1\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n1 2 3\n2 1 3\n3 1 2\n3 2 1\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n1 2 3 4\n2 1 4 3\n3 1 2 4\n4 1 3 2\n4 2 1 3\n3 2 1 4"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 6 3 12 9\\n') == '9 3 6 12 4 8'\nassert solution('42 28 84 126\\n') == '126 42 84 28'\nassert solution('1000000000000000000 3000000000000000000\\n') == '3000000000000000000 1000000000000000000'\n\n\"\"\"\n\n\nfrom collections import deque, Counter\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 6 3 12 9\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4 28 84 126\\n4 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"2\\n1 3 2\\n2\\n3\\n1 2 3\\n1 2 3\") == \"3 2 1\\n2\\n3 1 3\"\nassert solution(\"5\\n1 1 1 1 1\\n2 2 2 2 2\\n3 3 3 3 3\") == \"3 3 3 3 1\\n2 2 2 2 2\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 5 8 11\") == \"1\\n8\"\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\nassert solution(\"0 0 0 0 0 0\") == \"1\"\nassert solution(\"-0 -0 -0 -0 -0\") == \"1\"\nassert solution(\"0 1 2 3 4\") == \"0\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nimport sys\n\nimport bisect\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\nassert solution(\"4\\n1 4 2 1\") == \"1\\n1\"\nassert solution(\"1\\n2\") == \"1\\n2\"\nassert solution(\"5\\n2 3 4 5 1\") == \"5\\n5 3 4 1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 5\") == \"0 2\"\n\"\"\"\n\nA, B, K = [int(s) for s in stdin.split()]\nassert 0 <= A <= 10 ** 12\nassert 0 <= B <= 10 ** 12\nassert 0 <= K <= 10 ** 12\n\ntakahashi = A\naoki = B\n\nfor i in range(K):\n    if takahashi > 0:\n        takahashi -= 1\n    elif aoki > 0:\n        aoki -= 1\n\nprint(takahashi, aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\n\"\"\"\nThe input of the problem is a string, and the string is split by space.\nAfter splitting the string, we get a list of numbers.\nIn this problem, we need to get the sum of all the numbers in the list.\n\n-----Constraints-----\n - 0 \\leq A \\leq 10^{12}\n - 0 \\leq B \\leq 10^{12}\n - 0 \\leq K \\leq 10^{12}\n - All values in input are integers.\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"0 2 3\") == \"2 0\"\nassert solution(\"7 1 5\") == \"2 0\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\"\"\"\n\nA, B, K = map(int, input().split())\n\nAoki = B\nTakahashi = A\nfor _ in range(K):\n    Takahashi = max(0, Takahashi - 1)\n    Aoki = max(0, Aoki - 1)\n    if not Takahashi:\n        Takahashi += A\n    if not Aoki:\n        Aoki += B\nprint(Takahashi, Aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '0 2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ni = 1\n\nwhile N >= (101 + i):\n    i += 1\n\nprint(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101\\n102\\n103\\n') == '3'\n\"\"\"\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '3'\nassert solution('101') == '1'\nassert solution('103') == '3'\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '1'\nassert solution('10101010') == '6'\nassert solution('1010101010') == '10'\n\"\"\"\n\nimport sys\nimport time\nfrom typing import Any, Dict, List, Optional, Set, Union\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.result = None\n\n    def solution(self, stdin: str) -> str:\n        x = int(stdin)\n        i = 1\n        while True:\n            if i == 1:\n                if x == 1:\n                    break\n                x *= 1.01\n                i += 1\n            else:\n                x *= 1.01\n                i += 1\n            if x >= 10**18:\n                break\n        return str(i)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"103\") == \"3\"\nprint(solution(\"103\"))\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == '3'\nassert solution('101') == '1'\nassert solution('101') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"100000\") == \"1\"\nassert solution(\"101010\") == \"10\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"3\"\nassert solution(\"103\") == \"3\"\nassert solution(\"100\") == \"1\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nx = int(sys.argv[1])\n\na = 1\nb = x\n\nwhile True:\n    if a * 100 + b >= x:\n        break\n    else:\n        a += 1\n        b = a * 100 + b\n\nprint(a)"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"8\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"9\"\n\n\"\"\"\nfrom fractions import gcd"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '9'\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '9'\nassert solution('3\\n') == '13'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '9'\nassert solution('3') == '12'\nassert solution('4') == '50'\nassert solution('10') == '90'\nassert solution('100') == '3628800'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('2 2 3') == '1'\nassert solution('3 2 3') == '1'\nassert solution('1 2 3 4') == '10'\nassert solution('4 2 3 4') == '1'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"5\") == \"25\"\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"27\"\n\"\"\"\n\nfrom math import gcd\nimport re\nimport sys\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 6') == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 6') == '10'\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 4 6') == '10'\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 6') == 10\n\nIf the number of input lines is 0, print 0.\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\") == \"10\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\\n\") == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\"\"\"\n\nn = int(input().strip())\na = list(map(int, input().split()))\n\nmax_sum = 0\nfor m in range(n):\n    max_sum = max(max_sum, sum([m % i for i in a]))\n\nprint(max_sum)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 6\") == 10\nprint(solution(\"3 4 6\"))\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n\nn = int(input())\nnums = [int(elem) for elem in input().split()]"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\nassert solution(\"2\\n2 3 4\") == 7\n\"\"\"\n\n\nfrom __future__ import annotations\n\nimport itertools\nimport sys\n\nfrom typing import Iterator, List, Tuple, Union\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nTak had two dice and he knows that the sum of the result of each roll is D.\n\nCan you help him find out if three consecutive doubles have occurred?\n\nInput\nLine 1 : An integer N (1 <= N <= 100)\nLines 2-N+1 : Two integers each (1 <= D_i,j <= 6) separated by space D_i,j\n\nOutput\nOne line : Yes if three consecutive doubles have occurred, No otherwise\n\nConstraints\n1 <= N <= 100\n2 <= D_i,j <= 6\n\nSample Input 1\n5\n1 2\n6 6\n4 4\n3 3\n3 2\n\nSample Output 1\nYes\n\nSample Input 2\n5\n1 1\n1 2\n1 2\n1 2\n2 2\n\nSample Output 2\nNo\n\nExplanation\nIn Sample Case 1, the dice were rolled twice, and the following sums occurred:\n\n1 + 2 = 3\n3 + 4 = 7\n7 + 5 = 12\n12 + 6 = 18\n18 + 6 = 24\nSince three consecutive doubles have occurred, the output is Yes.\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n\nExplanation\n\nExample 1\nRoll No.    1\nDice    1    2\n1    Yes\n2    No\n3    No\n4    No\n5    No\n\nExample 2\nRoll No.    2\nDice    1    2\n1    No\n2    No\n3    No\n4    No\n5    No\n\nExample 3\nRoll No.    3\nDice    1    2\n1    No\n2    No\n3    No\n4    No\n5    No\n\nExample 4\nRoll No.    4\nDice    1    2\n1    No\n2    No\n3    No\n4    No\n5    Yes\n\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline())\n\ndoublets = []\n\nfor i in range(0, N):\n    doublet = int(stdin.readline()), int(stdin.readline())\n    doublets.append(doublet)\n\ncount = 0\nfor i in range(0, N - 2):\n    if doublets[i][0] == doublets[i + 1][0] == doublets[i + 2][0] or \\\n        doublets[i][1] == doublets[i + 1][1] == doublets[i + 2][1]:\n        count += 1\n\nprint(\"Yes\" if count >= 3 else \"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nn = int(input())\nresult = \"No\"\n\nwhile n > 0:\n    if n >= 3:\n        print(\"No\")\n        exit()\n    \n    roll1, roll2 = map(int, input().split())\n    if roll1 == roll2:\n        n -= 1\n        continue\n    \n    if roll1 == roll2 - 1 or roll1 == roll2 + 1:\n        n -= 1\n        continue\n    \n    result = \"Yes\"\n    break\n\nprint(result)"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\nassert solution('5\\n1 2\\n6 6\\n4 4\\n3 3') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5\n1 2\n6 6\n4 4\n3 3\n3 2\n\"\"\"[1:]) == \"Yes\"\n\nassert solution(\n\"\"\"\n5\n1 2\n1 2\n3 3\n4 4\n5 5\n\"\"\"[1:]) == \"No\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"100\") == \"49\"\n\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nr = int(input())\nprint((r*r*3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127360652445654214367002\n\n\"\"\"\n-----Solution------\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 4\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '4'\nassert solution('5\\n') == '9'\nassert solution('1\\n') == '1'\nassert solution('50\\n') == '100'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 4\nprint(solution('2'))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nr = int(input())\nprint(2**r - 1)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 4\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nr = int(input())\n\nprint(((r * r * 3.1415926535) ** 2) / (3.1415926535 * (r ** 2)) ** 2)\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 5 1\\n\") == \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 8 5 1') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 8 5 1\\n\") == \"Yes\"\n\n-----Explanation-----\nThe input is read line by line:\n- The first line contains a single integer, N, the number of sides in the polygon.\n- The second line contains N space-separated integers, L_1 L_2... L_N, the lengths of the sides of the polygon.\nThe output is generated by the function and printed on a new line.\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n8 5 1''') == 'Yes'\nassert solution('''4\n3 8 5 1''') == 'No'\nassert solution('''5\n3 8 5 1 2''') == 'No'\n\n'''\nAlternate solution:\nimport math\nfrom itertools import islice\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 7\\n3 2') == '702'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7\\n') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == '702'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == '702'\n\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport sys\nimport re\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.n = int(stdin.split(\"\\n\")[0].split()[0])\n        self.m = int(stdin.split(\"\\n\")[0].split()[1])\n\n        self.s = [int(n) for n in stdin.split(\"\\n\")[1:]]\n        self.c = [int(n) for n in stdin.split(\"\\n\")[2:]]\n\n    def solution(self) -> str:\n        for i in range(1, self.m + 1):\n            if self.c[i - 1]!= self.s[i - 1]:\n                return -1\n            if self.n < i:\n                return -1\n\n        curr = self.s[0]\n        for i in range(1, self.m + 1):\n            curr *= 10\n            curr += self.s[i]\n        return curr"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n0 0\\n1 0\\n2 1\\n3 2\\n4 3\\n5 4\\n6 5') == '-1'\n\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '9'\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n') == '9'\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '9'\nprint('All tests passed.')\n\n'''\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u043d\u0430 \u0440\u0435\u0439\u0441 \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0410\u043b\u0451\u043d\u044b. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0439\u0441\u0430 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0439 \u0432\u0435\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043e\u043d\u0430 \u0432\u044b\u0441\u0448\u0430 \u043f\u043e \u043c\u0435\u0441\u0442\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u0420\u0435\u0439\u0441\u044b \u0410\u043b\u0451\u043d\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u0442\u044c \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0447\u0430\u0441\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0435\u0441\u0430.\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0410\u043b\u0451\u043d\u044b N. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 N \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0438\u043c\u044f \u0410\u043b\u0451\u043d\u044b, \u0432\u0435\u0441 \u0440\u0435\u0439\u0441\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0432 \u0447\u0430\u0441\u0430\u0445 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0443\u0442\u043e\u043a. \u0412\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 60 \u0447\u0430\u0441\u043e\u0432. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0438\u043c\u044f \u0410\u043b\u0451\u043d\u044b, \u0432\u0435\u0441 \u0440\u0435\u0439\u0441\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0432 \u0447\u0430\u0441\u0430\u0445 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0443\u0442\u043e\u043a.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: \u0432\u0435\u0441 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0410\u043b\u0451\u043d\u044b \u0432 \u0447\u0430\u0441, \u0432\u0435\u0441 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0410\u043b\u0451\u043d\u044b \u0432 \u0434\u0435\u043d\u044c \u0438 \u0432\u0435\u0441 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0410\u043b\u0451\u043d\u044b \u0432 \u043d\u0435\u0434\u0435\u043b\u044e, \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e \u043e\u0442 \u0432\u0435\u0441\u0430 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0410\u043b\u0451\u043d\u044b.\n\nSample Input 1:\n\n2\nA 860\nA 660\nA 673\nB 1030\nB 945\nB 1067\n\nSample Output 1:\n\n2 60 20\n\nSample Input 2:\n\n3\nA 860\nA 660\nA 673\nB 1030\nB 945\nB 1067\n\nSample Output 2:\n\n3 60 20\n\nSample Input 3:\n\n2\nA 910\nA 977\nB 810\nB 946\nB 893\nB 765\n\nSample Output 3:\n\n1 80 10\n\nSample Input 4:\n\n1\nA 860\nB 810\nB 946\n\nSample Output 4:\n\n0 0 0\n\nSample Input 5:\n\n1\nA 910\nB 810\nB 946\n\nSample Output 5:\n\n0 0 0\n\n'''"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == 9\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n\nimport sys\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3 2) == 9\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 9\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1011\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\n\nprint(solution(input()))\n\n\"\"\"\nimport math\n\n\"\"\"\n:type N: int\n:rtype: str\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\nfrom math import log2\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"9\") == \"1101\"\nassert solution(\"-7\") == \"11010\"\nassert solution(\"7\") == \"11010\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(\"-9\"))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\nassert solution('4') == '101'\nassert solution('7') == '101'\nassert solution('8') == '100'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('-1') == '1111111111111111111111111101'\nassert solution('100') == '11111111111111111111111111110'\nassert solution('-100') == '11111111111111111111111111110'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9\") == '1011'\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('-9') == '1011'\nprint(solution('-9'))\n\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 5\\n4 9\\n2 4\"\n) == \"12\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\"\n\nN, M = list(map(int, stdin.split('\\n')[0].split(' ')))\nA = list(map(int, stdin.split('\\n')[1].split(' ')))\nB = list(map(int, stdin.split('\\n')[2].split(' ')))\n\ndp = [[-1 for _ in range(M + 1)] for _ in range(N + 1)]\ndp[0][0] = 0\n\nfor i in range(1, N + 1):\n    for j in range(M + 1):\n        if j >= B[i - 1]:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - B[i - 1]] + A[i - 1])\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[N][M])\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(inputs) == output\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 4\\n\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 4\\n1 1\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\nassert solution(\"3 5\\n4 7\\n1 8\") == \"17\"\n\"\"\"\n\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().strip().split()))\ncosts = [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\ndp = [0] * (m + 1)\n\nfor i in range(n):\n    for j in range(m, 0, -1):\n        if costs[i][0] <= j:\n            dp[j] = max(dp[j], dp[j - costs[i][0]] + costs[i][1])\n\nprint(dp[-1])\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 4\\n1 2\\n2 4\") == \"12\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 10 4 8 7 3\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 4 8 7 3') == 2\n\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n2\\n1\\n3\\n5\\n4\\n3\\n1\\n1\") == \"4\"\nassert solution(\"2\\n1\\n1\\n1\") == \"1\"\nassert solution(\"5\\n3\\n1\\n1\\n1\\n1\\n1\\n1\") == \"2\"\nassert solution(\"5\\n3\\n1\\n1\\n2\\n1\\n1\\n2\\n2\") == \"2\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\n\"\"\"\nimport heapq\n\n\nclass Heap:\n    def __init__(self, value: int):\n        self.value = value\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == \"2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5 5 4 5') == '1'\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 8 7 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == 0\nassert solution(\"1 2 2 4 5\") == 1\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\"\n\n\"\"\"\na) complexity:\nthe complexity is O(n), where n is the number of elements in a\n\nb) solving:\n\u041c\u0415\u041d\u0415\u0415 \u041c\u0410\u041b\u0415\u0415 \u041e\u0421\u041e\u0411\u0415\u041d\u041d\u041e\u0415 \u0422\u041e\u041b\u042c\u041a\u041e \u041f\u041e\u0414\u0414\u0415\u0420\u0416\u0410\u0422\u042c \u0414\u041b\u042f \u041d\u0410\u0425\u041e\u0414\u0418\u0422\u042c \u041a\u041e\u041b\u0418\u0427\u0415\u0421\u0422\u0412\u041e \u041e\u0411\u041e\u0411\u0420\u0410\u0416\u0415\u041d\u0418\u0419\n\n\u041d\u0423\u0416\u041d\u041e \u0421\u041e\u0417\u0414\u0410\u0422\u042c \u0410\u0420\u0418\u0424\u041c\u0415\u0422\u0418\u0427\u0415\u0421\u041a\u0418\u0419 \u041a\u041e\u0414, \u041f\u0420\u0418\u041c\u0415\u0420\u042b \u041f\u0415\u0420\u0415\u0411\u041e\u0420\u0410\n\na[i] = a[i - 1] + 1, \u0435\u0441\u043b\u0438 a[i - 1] > a[i - 2] + 1\na[i] = a[i - 1] + 1, \u0435\u0441\u043b\u0438 a[i - 2] > a[i - 1] + 1\n\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"1\"\nassert solution(\"4 3\\n1 2 3 4\\n\") == \"1\"\nassert solution(\"4 3\\n1 2 3 4\\n\") == \"2\"\nassert solution(\"4 3\\n1 2 3 4\\n\") == \"1\"\nassert solution(\"4 3\\n1 2 3 4\\n\") == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 4 5\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"1 2 2 4 5\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"1 2 3 3 3\\n\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1', 'Wrong answer'\nassert solution('5 3\\n1 2 3 3 3') == '0', 'Wrong answer'\nprint('The local tests are done. Try Solution Level Final.')"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 2 4 5\\n') == '1'\nassert solution('1 2 3 4 5\\n') == '2'\nassert solution('1 2 3 3 3\\n') == '0'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 2 3 4 2') == 3\nassert solution('3 3 2 1 1 1 3') == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a, k) == e"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('1 2 2 4 2 3') == '3'\nassert solution('1 2 3 4 2 3') == '2'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 2 4 2 3') == 3\nassert solution('1 2 2 4 2 3') == 3\nassert solution('1 2 2 4 2 3') == 3\nassert solution('1 2 2 4 2 3') == 3\nassert solution('1 2 2 4 2 3') == 3\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 4 2 3') == '3'\nassert solution('1 2 2 4 2 3') == '3'\nassert solution('1 2 2 4 2 3') == '3'\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 4 2 3\") == \"3\"\nassert solution(\"3 3 2 1 1 1 3\") == \"4\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\nassert solution('7 5\\n3 3 2 1 1 1 3') == '4'\nassert solution('7 5\\n1 2 2 4 2 3') == '4'\nassert solution('7 5\\n3 1 1 3 1 1 3') == '2'\nassert solution('7 5\\n1 1 1 3 1 1 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\nassert solution(\"1 1 1 1 1 3\") == 4"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 4 2 3\\n3 3 2 1 1 1 3\") == \"3\"\nassert solution(\"1 2 2 4 2 3\\n3 3 2 1 1 1 3\") == \"4\"\nassert solution(\"1 2 2 4 2 3\\n3 3 2 1 1 1 3\") == \"4\"\nassert solution(\"1 2 2 4 2 3\\n3 3 2 1 1 1 3\") == \"4\"\nassert solution(\"1 2 2 4 2 3\\n3 3 2 1 1 1 3\") == \"4\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n 7 3 2\\n 1 1000 1\\n 1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\nassert solution('4 1 3\\n7 3 2\\n1 100 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\nassert solution('4 1 3\\n7 3 2\\n1 10 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\nassert solution('4 1 3\\n7 3 2\\n1 10 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\n\n\"\"\"\n\n\nfrom collections import deque\nfrom math import inf\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(text) == result\nprint(solution(text))\n\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nq = int(stdin.readline().strip())\n\nresults = []\nfor _ in range(q):\n    n, a, b = map(int, stdin.readline().strip().split())\n    water = a * n\n    water += (b * n) // 2\n    water -= (b - a) * n\n    results.append(water)\n\nfor result in results:\n    print(result)\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == [10, 9, 1000, 42000000000000]\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    a, b, n = map(int, sys.stdin.readline().split())\n    print(max(a * n, b * n))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == [10, 9, 1000, 42000000000000]\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\nassert solution('''2 1\n1 1''') == '1'\nassert solution('''1 100\n100''') == '1'\nassert solution('''3 6\n3 4 5\n3 6''') == '2'\nassert solution('''3 6\n3 4 5\n4 5''') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\n\nassert solution(\"1 2\") == \"0\"\n\nassert solution(\"1 1\") == \"0\"\n\nassert solution(\"2 2\") == \"0\"\n\nassert solution(\"5 5\") == \"4\"\n\n\"\"\"\n\"\"\"\nfor (int i = 0; i < N; i++) {\n  if(abs(D_i - D_{i-1}) <= X)\n    {\n    cnt++;\n    }\n}\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"2\"\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n3 4 5') == 2\n\"\"\"\n\nimport unittest\n\nimport heapq\n\nclass Solution:\n    # Solution 1\n    # O(n^2) time, O(n) space\n    def solution1(self, stdin: str) -> str:\n        X, N = stdin.split(' ')\n        X, N = int(X), int(N)\n        L = list(map(int, stdin.split('\\n')[0].split(' ')))\n        return sum(1 for i in range(1, N+1) if X < sum(L[:i]))\n\n    # Solution 2\n    # O(n) time, O(n) space\n    def solution2(self, stdin: str) -> str:\n        X, N = stdin.split(' ')\n        X, N = int(X), int(N)\n        heap = [(0,0)]\n        count = 0\n        while heap:\n            distance, idx = heapq.heappop(heap)\n            if distance > X:\n                break\n            if idx == N:\n                count += 1\n            else:\n                heapq.heappush(heap, (distance + L[idx], idx + 1))\n        return count\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self) -> None:\n        self.sol = Solution()\n\n    def test1(self):\n        self.assertEqual(self.sol.solution2('3 6\\n3 4 5'), 2)\n\n    def test2(self):\n        self.assertEqual(self.sol.solution2('2 4\\n1 2 4'), 2)\n\n    def test3(self):\n        self.assertEqual(self.sol.solution2('4 3\\n2 2 4'), 1)\n\n    def test4(self):\n        self.assertEqual(self.sol.solution2('3 2\\n2 2'), 1)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\nassert solution(\"4 2\\n1 2 1\") == \"1\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\\n\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nprint(solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\"))\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\nassert solution(\"hoge\\nenglish\\nenglish\\nhoge\\nhoge\\nhoge\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\ngray\\ngray\\ngray\\ngray\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Yes'\nassert solution('hoge') == 'Yes'\nassert solution('enigma') == 'No'\nassert solution('hogehoge') == 'No'\nassert solution('hello') == 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == 'No'\nassert solution(\"enigma\\nhoge\\nhoge\\nenigma\") == 'Yes'\n\"\"\"\n\nn = int(input().strip())\nw = [input().strip() for _ in range(n)]"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 6\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nprint((a + b) * (a - 1) // 2)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '6'\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(2) +'' + str(3)) == 6\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2 3\"\n) == \"6\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3''') == '6'\nassert solution('''1 2''') == '2'\n\"\"\"\n\nimport sys\n\ntry:\n    A, B = map(int, sys.stdin.readline().split())\n    print(A + B)\nexcept:\n    print(\"Incorrect input\")\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '6'\nassert solution('2 5') == '2'\nassert solution('3 1') == '1'\nassert solution('5 9') == '3'\nassert solution('9 9') == '4'\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3\n''') == '6'\n\nassert solution('''3 5\n''') == '8'\n\nassert solution('''1 1\n''') == '1'\n\nassert solution('''3 3\n''') == '1'\n\nassert solution('''3 10\n''') == '0'"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == 6\nprint(solution(\"2 3\"))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '6'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nassert solution('toothpaste') == 'xxxxxxx'\nassert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nassert solution('codewars') == 'xxxxxxxxx'\n\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sardine) == xxxxxxx\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint(solution('sardine'))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"3\\n1 1 1\") == \"No\"\nassert solution(\"2\\n1 1\") == \"Yes\"\nassert solution(\"2\\n1 1\") == \"Yes\"\nassert solution(\"2\\n1 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('5\\n1 1 1 2 1') == 'No'\nassert solution('5\\n1 2 3 4 5') == 'Yes'\n\"\"\"\n\nfrom sys import stdin\n\n\"\"\"\nI will simulate the process of height increasing from the left to the right.\n\nWe can start by decreasing the left-most square to 1.\n\nAfter that, we will take the second square from the left and increase it by 1.\n\nIf we can do this, we will move on.\n\nIf we cannot, we will look for a second left-most square that we can decrease.\n\nIf we find such a square, we will move on.\n\nIf we cannot find a square that we can decrease, we will return \"No\"\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"5\\n1 2 1 3 1\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1 1 3') == 'Yes'\nassert solution('1 2 1 3') == 'No'\n\n---Problem---\nA 10 x 10 city plan has 10 squares in a row. The height of the i-th square is Hi.\nYou can perform a sequence of operations:\n - Decrease the height of the i-th square by 1.\n - Do nothing.\nDetermine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq Hi \\leq 10^9\n\n-----Input-----\nThe first line contains an integer N, the number of squares in the city plan.\nThe second line contains 10 integers H_1,..., H_N, the heights of the squares in the city plan.\n\n-----Output-----\nPrint Yes if you can achieve the objective, and No otherwise.\n\n---Example---\nInput:\n5\n1 2 1 1 3\n\nOutput:\nYes\n\nYou can achieve the objective by decreasing the height of only the second square from the left by 1."
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1 3\") == 'Yes'\nassert solution(\"1 2 1 1 2\") == 'No'\n\"\"\"\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n\nN = int(input())\nH = [int(num) for num in input().split()]"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\nassert solution('3 3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '1'\nassert solution('4 3 0\\n1 2 3 4\\n3 2 1\\n1 2 2\\n1 2 2') == '3'\nassert solution('5 4 0\\n1 2 3 4 5\\n2 3 4 5 6\\n3 4 5 6 7\\n4 5 6 7 8\\n5 6 7 8 9') == '7'\nassert solution('6 4 0\\n1 2 3 4 5 6\\n2 3 4 5 6 7\\n3 4 5 6 7 8\\n4 5 6 7 8 9\\n5 6 7 8 9 10\\n6 7 8 9 10 11') == '10'\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2''') == '1'\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nN, M, C = map(int, sys.stdin.readline().split())\na = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\nb = [int(sys.stdin.readline()) for _ in range(M)]\nc = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(len(a)):\n    if sum(a[i]) * b[0] + sum(a[i][1:]) * b[1] + c > 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n') == '1'\n\n\"\"\"\n\nimport sys\n\nN, M, C = [int(x) for x in sys.stdin.readline().split()]\n\nscores = [[int(x) for x in line.split()] for line in sys.stdin]\n\nmax_ = 0\n\nfor score in scores:\n    max_ += score[0] * score[1]\n\nmax_ += C\n\nprint(len([x for x in scores if sum([y * z for y, z in x]) > 0]))\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 0\\n1 1 2 2\\n\") == \"1\"\nassert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\nassert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\n-----Explanation-----\nThe given N codes are:\n - The first code: (1, 2, 3)\n - The second code: (-10, 2, 3)\nThe first code does not solve this problem.\nThe second code solves this problem.\n\nHint:\n - Consider a simple solution (i.e. a brute force algorithm), in which you try all possible combinations of the given A and B values.\n - Think about how the number of possible combinations can be calculated.\n\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('1 1 1\\n0 1 1') == '2'\nassert solution('1 1 1\\n0 1 1\\n1 1 1') == '2'\nassert solution('1 1 1\\n0 1 1\\n1 1 1\\n0 0 0') == '0'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('1100') == '1000'\nassert solution('2200') == '1100'\n\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"500\") == \"500\"\nassert solution(\"1500\") == \"1000\"\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1900\") == \"100\"\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\") == \"1\"\nassert solution(\"1900\") == \"2\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == '1'\nassert solution('1000') == '2'\nassert solution('1500') == '1'\nassert solution('1750') == '1'\nassert solution('1851') == '0'\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1800\") == \"0\"\nassert solution(\"1234\") == \"3\"\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1900\") == \"100\"\nprint(solution(\"1900\"))\n\nimport math\nprint(math.floor(12.75))"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('100') == 0\nassert solution('100\\n200') == 200\nassert solution('100\\n200\\n300') == 400\nassert solution('100\\n200\\n300\\n400') == 500\n'''\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('3 2 1') == '1'\nassert solution('3 5 2') == '9'\n'''\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == 9\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ncounter = 0\ni = 0\n\nwhile i < N:\n    if A[i] > B[i]:\n        counter += B[i]\n        i += 1\n    elif A[i] <= B[i]:\n        if (B[i+1] - A[i]) > 0:\n            counter += A[i] + B[i] - A[i+1]\n            i += 2\n        else:\n            counter += A[i]\n            i += 1\n\nprint(counter)"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 2\\n4 5\\n') == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 2\\n4 5\") == 9\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2\\n4 5\\n\") == \"9\"\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.n, self.m = map(int, sys.stdin.readline().split())\n\n    def solve(self) -> int:\n        dp = [[0] * (self.m + 1) for _ in range(self.n + 1)]\n        for i in range(1, self.n + 1):\n            _A, _B = map(int, sys.stdin.readline().split())\n            for j in range(1, self.m + 1):\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] - _A)\n        return dp[-1][-1]\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\n\"\"\"\nInput\n2\n3 5 2\n4 5\n\nOutput\n9\n\nInput\n1\n3 2 1\n4 5\n\nOutput\n7\n\nInput\n1\n3 1 2\n4 5\n\nOutput\n4\n\nInput\n2\n3 5 2\n4 5\n\nOutput\n9\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5 3\\n4 4 5 2') == '9'\nassert solution('8 5 7\\n3 1 2 8') == '14'\nassert solution('5 5 2\\n4 3 5 2') == '6'\n\"\"\"\n\nfrom bisect import bisect_right"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(N, x, y), \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0443\u044e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0442\u0440\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430: N, x \u0438 y, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u00abWar\u00bb, \u0435\u0441\u043b\u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 100, \u0438 \u00abNo War\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n3 2 10 20\n8 15 13\n16 22\n\nSample Output 1:\nNo War\n\nSample Input 2:\n1 1 1 100\n100\n100\n100\n\nSample Output 2:\nWar\n\nSample Input 3:\n2 1 1 100\n101\n100\n100\n\nSample Output 3:\nNo War\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\nThe choice Z = 12 is not optimal for either empire, thus war will break out."
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5 8\\n9 8 8\\n8 8 8\") == \"War\"\nassert solution(\"3 3 3\\n1 1 1\\n1 1 1\") == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"1 2 3\\n4 5 6\") == \"War\"\nassert solution(\"0 0 0\\n1 2 3\") == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nn, m, x, y = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n6\") == \"6\"\nassert solution(\"2\\n5\\n7\\n8\") == \"10\"\n\n----\n1. Declare variables.\n2. Initialize variables with input.\n3. Initialize the counter for the number of seconds.\n4. Calculate the number of seconds needed for the clocks to point directly upward.\n5. Print the number of seconds.\n----"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\n\"\"\"\n\nn = int(input())\nclock = []\nfor i in range(n):\n    clock.append(int(input()))\n\nstart = sum(clock)\n\nprint(start)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3\\n6\\n') == 6\nassert solution('2\\n1\\n6\\n') == 10\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3') == 6\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\\n1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\":1 2\\n3 4\") == \"2\"\nassert solution(\":1 2\\n3 4\\n5 6\") == \"6\"\nassert solution(\":1 2\\n3 4\\n5 6\\n7 8\") == \"8\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\\n6\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\": 2 3\\n: 4 6\\n\") == \"6\"\nassert solution(\": 2 5\\n: 2 4\\n\") == \"10\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n\nN = int(stdin.readline())\nweights = list(map(int, stdin.readline().split()))\nT = int(stdin.readline())\n\nmin_diff = float('inf')\nfor t in range(1, T+1):\n    w_1 = sum(weights[:t])\n    w_2 = sum(weights[t:])\n    diff = abs(w_1 - w_2)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input_str) == output_str\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'3\\n1 2 3'\n) == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"0\"\n\"\"\"\n\nN = int(input())\nw = list(map(int, input().split()))\n\nw = sorted(w)\ns1 = 0\ns2 = sum(w)\n\nprint(s2 - s1)"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2 3\") == 0\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n') == '0'\nassert solution('2 5 3\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == '1'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nS1 = 0\nS2 = 0\nfor i in range(N):\n    S1 += min(A[:i+1])\n    S2 += max(A[i:])\nprint(abs(S1 - S2))\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '0'"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '0'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2 3\n4 5 6\n7 8 9''') == '6'\nassert solution('''4 3\n1 6 3 4\n5 10 7 8\n9 2 11 12''') == '2'\nassert solution('''3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12''') == '0'\nassert solution('''4 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n3 13 14 15''') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 2\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 0\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nprint('Success')"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 100\\n1 100') == '99'\nprint(solution(stdin))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\n\"\"\"\n\n\"\"\"\n1. \u0421\u0442\u0432\u043e\u0440\u0438\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443, \u044f\u043a\u0430 \u0431\u0443\u0434\u0435 \u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438 \u0440\u044f\u0434 \u043b\u0456\u043d\u0456\u0439 \u0437 \u0437\u0430\u0434\u0430\u043d\u043e\u0457 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0443 \u0437 \u043e\u0434\u043d\u0430\u043a\u043e\u0432\u0438\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438.\n2. \u0412\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043f\u0430\u0440\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 [1, 10]\n3. \u0412\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043f\u0430\u0440\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 [1, 10] \u0437\u0430 \u043a\u043e\u0436\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c\n4. \u0412\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u043f\u0430\u0440\u043d\u0456 \u0447\u0438\u0441\u043b\u0430, \u044f\u043a\u0456 \u043c\u0456\u0441\u0442\u044f\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 [-50, -10] \u0430\u0431\u043e [10, 50]\n5. \u0412\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043f\u0430\u0440\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 [1, 10] \u0437\u0430 \u043a\u043e\u0436\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 100\") == \"99\"\nassert solution(\"4 2 3 5 6\") == \"2\"\nassert solution(\"4 2 1 2 3\") == \"3\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 2 3 14 5\") == \"5\"\nassert solution(\"2 100\") == \"99\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nskills = sorted(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1 0 1\") == \"2\"\nassert solution(\"0 1 0 1 1 0\") == \"2\"\nassert solution(\"1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"0 0 0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\n\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\n\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\n\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == '3'\nassert solution(\"3\\n0 0 0\\n\") == '0'"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0 1 1') == '2'\nassert solution('5\\n1 0 1 1 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('3\\n0 0 0') == '0'"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n1 0 1 0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"6\n0 1 0 1 1 0\n\"\"\") == \"2\"\nassert solution(\"\"\"7\n1 0 1 1 1 0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"3\n0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n0 1 0 1 1') == '2'\nassert solution('3\\n0 0 0') == '0'\nassert solution('4\\n1 0 1 1 1') == '2'\nassert solution('5\\n1 0 1 1 1 1') == '3'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\") == '3'\nassert solution(\"3\\n0 0 0\") == '0'"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 0\nassert solution(\"10\") == 1\nassert solution(\"100\") == 2\nassert solution(\"1000\") == 3\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\nprint('All tests passed.')\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\n\nassert solution('7') == '0'\n\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('5') == '4'\nassert solution('1') == '0'\nassert solution('16') == '12'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"16\") == \"0\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"22\"\nassert solution(\"15\") == \"7777\"\nassert solution(\"11\") == \"0\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n\" + \n\"brie soft\\n\" + \n\"camembert soft\\n\" + \n\"feta soft\\n\" + \n\"goat soft\\n\" + \n\"muenster soft\\n\" + \n\"asiago hard\\n\" + \n\"cheddar hard\\n\" + \n\"gouda hard\\n\" + \n\"swiss hard\\n\") == \"3\"\n\nassert solution(\"6\\n\" + \n\"parmesan hard\\n\" + \n\"emmental hard\\n\" + \n\"edam hard\\n\" + \n\"colby hard\\n\" + \n\"gruyere hard\\n\" + \n\"asiago hard\\n\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == '3'\nassert solution('parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == '4'\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == 3\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n') == 4\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n\"+\n    \"parmesan hard\\n\"+\n    \"emmental hard\\n\"+\n    \"edam hard\\n\"+\n    \"colby hard\\n\"+\n    \"gruyere hard\\n\"+\n    \"asiago hard\") == \"4\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n' + 'parmesan hard\\n' + 'emmental hard\\n' + 'edam hard\\n' + 'colby hard\\n' + 'gruyere hard\\n' + 'asiago hard') == '4'\nassert solution('9\\n' + 'brie soft\\n' + 'camembert soft\\n' + 'feta soft\\n' + 'goat soft\\n' +'muenster soft\\n' + 'asiago hard\\n' + 'cheddar hard\\n' + 'gouda hard\\n' +'swiss hard') == '3'\n\n[end of solutions]\n[back]\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\n\"\n\n\"muenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 4\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n\"\n                \"brie soft\\n\"\n                \"camembert soft\\n\"\n                \"feta soft\\n\"\n                \"goat soft\\n\"\n                \"muenster soft\\n\"\n                \"asiago hard\\n\"\n                \"cheddar hard\\n\"\n                \"gouda hard\\n\"\n                \"swiss hard\\n\") == \"3\"\n\nassert solution(\"6\\n\"\n                \"parmesan hard\\n\"\n                \"emmental hard\\n\"\n                \"edam hard\\n\"\n                \"colby hard\\n\"\n                \"gruyere hard\\n\"\n                \"asiago hard\\n\") == \"4\"\n\nprint(\"Test complete.\")\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == '3'\nassert solution('parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == '4'\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\nassert solution(\"7 2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"0 1 2 3 4 5 6 7\"\n\nprint(\"Success\")\n\nInput\n5\n0 1 2 1\n3 2 1 1\n\nOutput\n1 0 0 2\n\nInput\n8\n0 1 2 1 2 1 3 3 4 2\n2 4 3 5 6 5 1\n\nOutput\n0 0 0 1 0 2 4\n\nInput\n5\n2 3 4 3 5\n0 4 1 4 2\n\nOutput\n1 0 0 2\n\nInput\n5\n4 0 5 3 0\n0 3 4 2 2\n\nOutput\n1 0 0 2\n\n-----Explanation-----\nExample of solution:\n\nGiven\na = [1, 2, 1, 2, 1, 2, 1, 2]\nb = [3, 2, 3, 3, 4, 2, 3, 5]\n\nWe need to sort the array b to obtain a lexicographically minimal array. Let us start with the array b, we need to sort it to obtain the array c:\n\nc = [3, 3, 2, 2, 4, 3, 5, 2]\n\nNow we need to sort the array c to obtain the array d:\n\nd = [2, 2, 2, 3, 3, 3, 4, 5]\n\nNote that array d is lexicographically minimal.\n\nTo test whether the array d is lexicographically minimal, we can test whether d[0] < d[1] and d[1] < d[2] and so on. If we can find that this condition is not true, the array is not lexicographically minimal.\n\nThe array a is lexicographically sorted:\n\na = [1, 2, 2, 2, 1, 2, 1, 2]\n\nSo the array a is lexicographically sorted.\n\nWe can find the array a is lexicographically sorted by comparing the consecutive pairs of elements in the array a.\n\nIf we compare a[i] and a[i+1], we see that a[i] < a[i+1]. Since the array d is lexicographically minimal, we can conclude that array d is lexicographically sorted.\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\nc = [0] * n\n\nfor i in range(n):\n    c[a[i]] = b[i]\n\nfor i in range(n):\n    print(c[i], end=' ')"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\nassert solution(\"7 2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == '1 0 0 2'\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == '0 0 0 1 0 2 4'\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 2 2\\n1 2 3 4') == '0 0 0 1 0 2 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 1 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\n\nn = int(sys.argv[1])\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = []\nfor i in range(n):\n    c.append((a[i] + b[i]) % n)\n\nc = sorted(c)\nprint(' '.join(map(str, c)))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0 1') == '1'\nassert solution('0 1 1') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11001100\") == 0\nassert solution(\"11101110\") == 1\nassert solution(\"10110110\") == 0\nassert solution(\"10110111\") == 1\nassert solution(\"11111111\") == 1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11010111\") == 1\n\"\"\"\n\nstdin = input()\n\nprint(int(stdin[0]) + int(stdin[1]))"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0111010\") == \"0\"\nassert solution(\"10101010\") == \"1\"\nassert solution
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"001101\") == \"1\"\nassert solution(\"111010\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 1 0') == '0'\nassert solution('1 0 0 1') == '1'\nassert solution('1 0 0 1 1 1 1 0 1') == '0'\nassert solution('1 1 1 1') == '0'\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00110110\") == \"0\"\nassert solution(\"111000\") == \"1\"\nassert solution(\"1110110\") == \"1\"\nassert solution(\"10110111010\") == \"0\"\nassert solution(\"1111111111\") == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00111111\") == 0\nassert solution(\"11101111\") == 1\nassert solution(\"11100010\") == 0\nassert solution(\"11100101\") == 1\nassert solution(\"11100110\") == 0\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\nassert solution(\"1 0 1 1\") == \"1\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"0 1 0 0\") == \"0\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\"\nimport math\n\nD, T, S = [int(x) for x in stdin.split()]\n\ndist = math.floor(D / S * T)"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 15 80\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1100 10 0\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '1000 15 80'\n) == 'Yes'\nassert solution(\n    '2000 20 100'\n) == 'No'\nassert solution(\n    '4000 20 300'\n) == 'Yes'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n'''"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\n-------------"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"3 2\\n1 3\\n1 1\\n2 2\\n2 2\") == 'Yes'\nassert solution(\"2 2\\n1 3\\n1 1\\n1 2\\n1 1\") == 'No'\nassert solution(\"2 2\\n1 3\\n1 1\\n2 2\\n2 2\") == 'No'\nassert solution(\"2 2\\n1 3\\n1 1\\n2 1\\n2 1\") == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\n\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\n\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\n\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\"\"\"\nfrom __future__ import annotations\nfrom collections import defaultdict\nfrom collections import deque\nfrom math import inf\nfrom typing import List, Set\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\n'''"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\nN, M = map(int, input[0].split())\nA = list(map(int, input[1].split()))\n\ndays = 0\ni = 0\ncount = 0\nwhile i < N:\n    if days < A[i]:\n        days += 1\n    else:\n        days = A[i]\n        count += 1\n        i += 1\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n5 6') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '4'\nassert solution('4 2\\n3 4') == '-1'\nassert solution('4 3\\n1 2\\n2 3\\n4 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n3 4') == '6'\nassert solution('4 2\\n3 4\\n5 6') == '-1'\nassert solution('4 3\\n1 2\\n2 3\\n3 4') == '10'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == '1'\n\nassert solution('2 2\\n1 2\\n3 3') == '-1'\n\nassert solution('3 1\\n1 2\\n2 3') == '2'\n\nassert solution('3 5\\n4 3\\n1 4\\n1 3\\n2 3') == '3'\n\nassert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1') == '4'"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"41 2\\n5 6\") == 30\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == 30\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n4 3') == '-1'\nassert solution('10 10\\n6 5\\n4 3\\n5 1\\n1 3\\n4 3\\n2 10') == '24'\nassert solution('6 5\\n5 4\\n2 4\\n1 3\\n1 1\\n5 3') == '-1'\n\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\\n\") == '5'\nassert solution(\"1 2\\n\") == '4'\nassert solution(\"2 1\\n\") == '4'\nassert solution(\"2 2\\n\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '1'\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 5') == '5'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2\\n\") == \"2\"\nassert solution(\"1 2\\n\") == \"2\"\nassert solution(\"2 1\\n\") == \"3\"\nassert solution(\"2 2\\n\") == \"1\"\n\"\"\"\n\nD, N = input().split()\nN = int(N)\nprint(N * int(D) + 1)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1') == '2'\nassert solution('1 2') == '3'\nassert solution('2 3') == '7'\nassert solution('0 2') == '1'\nassert solution('2 3') == '7'\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"0 1\"\n) == \"1\"\nassert solution(\n    \"0 0\"\n) == \"5\"\nassert solution(\n    \"1 1\"\n) == \"3\"\nassert solution(\n    \"2 1\"\n) == \"9\"\nassert solution(\n    \"2 2\"\n) == \"3\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\nassert solution(\"1 5\\n\") == \"10\"\nassert solution(\"2 5\\n\") == \"8\"\nassert solution(\"3 5\\n\") == \"15\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '2'\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n7 6 8') == '2'\n\"\"\"\nimport os\nimport sys\nimport math\nfrom typing import List, Union\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                             os.path.pardir))\n\nfrom data_structures.Array import InputArray\n\n\nclass Solution:\n    \"\"\"\n    Finds the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n\n    >>> solution = Solution()\n    >>> solution.solution('3\\n7 6 8')\n    2\n\n    \"\"\"\n    def __init__(self):\n        self.num_of_numbers = int(input())\n        self.numbers: List[int] = [int(el) for el in input().split()]\n        self.max_number = max(self.numbers)\n\n    def solution(self) -> Union[int, str]:\n        \"\"\"\n        Finds the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n\n        :return: maximum possible greatest common divisor of the N integers on the blackboard after your move.\n        \"\"\"\n        self.numbers.sort()\n        for i in range(self.num_of_numbers):\n            for j in range(1, len(self.numbers)):\n                if math.gcd(self.numbers[i], self.numbers[j])!= 1:\n                    self.numbers[i] = self.numbers[j]\n                    self.numbers.sort()\n                    break\n            if self.numbers[i] == self.max_number:\n                break\n\n        return math.gcd(self.numbers[i], self.max_number)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2\\n1 2 3\\n2 3 4') == '2'\nassert solution('7 6 8\\n3 9 7\\n4 8 6') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 6 8\") == 2\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n9 5 3 6 2\n''') == '5'\nassert solution('''4\n9 3 6 2\n''') == '3'\nassert solution('''3\n1 1 1\n''') == '1'\nassert solution('''5\n1 1 1 1\n''') == '1'\nassert solution('''5\n1 9 2 8 3\n''') == '1'\n\n------\nhttps://www.codewars.com/kata/5275c8a5cb454edb3c0000aa/train/python"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 6 8') == '2'\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 6 8\\n') == '2'\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8\") == \"2\"\nassert solution(\"10 9 8 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 6 8\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\na = deque(map(int, input().split()))\na.append(0)\n\nans = deque()\ncurr_count = 0\n\nfor i in range(n + 1):\n    curr_count += a[i]\n    ans.appendleft(i + 1)\n    if curr_count == 0:\n        curr_count = a[i]\n\nprint(*ans)\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = sorted(list(map(int, sys.stdin.readline().strip().split(' '))))\n\nprint(*A)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\nprint('Test success.')\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '3 1 2'\n\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('4 6 10') == '9'\nassert solution('4 1 1') == '0'\nassert solution('4 6 9') == '0'\nassert solution('2 6 9') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == '9'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 7 12345\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nA, B, X = [int(i) for i in stdin.split()]\n\nmax_int = 0\nfor i in range(1, 10 ** 9):\n    if (A * i + B * len(str(i))) <= X:\n        max_int = i\n\nprint(max_int)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 7 10000\") == \"9\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == '9'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1 1 10\") == \"0\"\nassert solution(\"0 1 10\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\n\nA, B, X = map(int, input().split())\n\ni = 0\nj = 0\n\nwhile X - i * A - j * B > 0:\n    i += 1\n    j += 1\n    if i * A + j * B > X:\n        i -= 1\n        j -= 1\n        break\n\nprint(i * A + j * B)"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\n\"\"\"\nfrom collections import deque\n\nstdin = open(0).read().split()\nn, k = int(stdin[0]), int(stdin[1])\nh = list(map(int, stdin[2:]))\n\nfriends = deque()\nfor i, friend in enumerate(h):\n    if friend >= k:\n        friends.append(friend)\n\nprint(len(friends))\n\"\"\"\n\nfrom collections import deque\n\nstdin = open(0).read().split()\nn, k = int(stdin[0]), int(stdin[1])\nh = list(map(int, stdin[2:]))\n\nfriends = deque()\nfor i, friend in enumerate(h):\n    if friend >= k:\n        friends.append(friend)\n\nprint(len(friends))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n\nN, K = [int(s) for s in stdin.split()]\nh = [int(s) for s in stdin.split()]\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\nprint(solution(stdin))\n\n---"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 150\\n150 140 100 200\\n') == '2'\nassert solution('4 150\\n150 140 100\\n') == '0'\nassert solution('4 150\\n140 140 100 200\\n') == '2'\nassert solution('4 150\\n100 150 100 200\\n') == '0'\nassert solution('4 150\\n150 100 140 200\\n') == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n4 6\\n10 8') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"3 2\\n5 5 1\") == \"No\"\nassert solution(\"3 2\\n1 1 1\") == \"Yes\"\nassert solution(\"1 1\\n1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\n\n\nfrom fractions import Fraction"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nprint(solution(\"4 1\\n5 4 2 1\"))\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nN, M = [int(i) for i in stdin.readline().strip().split()]\nvotes = [int(i) for i in stdin.readline().strip().split()]\n\nprint('Yes') if sum([1 for i in votes if i >= votes[0] / (4 * M)]) == M else print('No')\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\n\nfrom itertools import combinations"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nclass TestClass:\n    def test_one(self, solution):\n        assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\n    def test_two(self, solution):\n        assert solution(\"5 4 2 1\\n2 2 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample_input) == sample_output\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n5 4 2 1\") == \"Yes\"\n\nIn the above example, we have 5 items, and 1 is the most popular item, so we can select it.\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nitem_votes = list(map(int, stdin.readline().split()))\nitem_votes.sort(reverse=True)\n\ntotal_votes = sum(item_votes)\n\nanswer = \"No\"\n\nfor i in range(n):\n    if item_votes[i] / total_votes >= 1/4 * m:\n        answer = \"Yes\"\n        break\n\nprint(answer)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#.#\") == 1\nassert solution(\"###.\") == 3\nassert solution(\"#.#.\") == 2\n\nassert solution(\"#.#.#\") == 1\nassert solution(\"#.#.#.\") == 1\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\n---"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n..#\\n###') == 5\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3 2\n..#\n###''') == '5'\n\n\"\"\"\n\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == 5\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport math\n\na, b = map(int, stdin.readline().split())\n\nminimum = math.gcd(a, b)\na //= minimum\nb //= minimum\n\nprint(a * b)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys\n\nL, R = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2020 2040''') == 2\n'''"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(sol(input()))\nprint(\"Success\")\n\n-----Time Complexity-----\nO(1)\n\n-----Space Complexity-----\nO(1)\n\n-----Test Input-----\n4 1000000000\n\n-----Test Output-----\n0\n\n-----Test Input-----\n2 2\n\n-----Test Output-----\n4\n\n-----Test Input-----\n3 3\n\n-----Test Output-----\n9\n\n-----Test Input-----\n20 10\n\n-----Test Output-----\n200\n\n-----Test Input-----\n1 1000000000\n\n-----Test Output-----\n0\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nL, R = map(int, stdin.readline().split())\n\nmax_ans = 10**9\nmin_ans = 10**9\n\nfor i in range(L, R + 1):\n    for j in range(i, R + 1):\n        if L * i % 2019 == R * j % 2019:\n            min_ans = min(min_ans, (i * j) % 2019)\n            max_ans = max(max_ans, (i * j) % 2019)\n\nprint(min_ans)\nprint(max_ans)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2020 2040') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AatCoder') == 'WA'\n\"\"\"\n\n\"\"\"\na=0\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('ABC') == 'WA'\nassert solution('AaC') == 'AC'\n\n\"\"\"\nimport sys\n\nsys.stdin.readline()\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AtCoder', 'C') == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nprint(solution(\"AtCoder\"))\n\n--------------------------------"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1214') == '2'\nassert solution('1') == '1'\n\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12345\") == \"5\"\nassert solution(\"1010\") == \"1\"\nassert solution(\"111122222\") == \"3\"\n\"\"\"\n\n\"\"\"\nThe approach is to break the problem into subproblems:\n\nS[0] = \"1\"\nS[i] = S[i - 1] * 10 + 1 if S[i - 1] < 2 else 2 * S[i - 1]\nThe following code does that:\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"2222\") == \"2\"\nassert solution(\"9999\") == \"9\"\nassert solution(\"8888\") == \"8\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport unittest\n\nclass Solution:\n    def __init__(self, string, K):\n        self.string = string\n        self.count = 0\n        self.K = K\n        self.hashmap = defaultdict(int)\n        self.pairs = [(2, 22), (3, 333), (4, 4444), (5, 55555), (6, 666666), (7, 7777777), (8, 88888888), (9, 999999999)]\n        self.result = \"\"\n        \n    def main(self):\n        self.count += 1\n        self.hashmap[self.string[0]] += 1\n        self.string = self.string[1:]\n        \n        if self.count % 10**15 == 0:\n            for pair in self.pairs:\n                self.hashmap[self.string[0:pair[0]]] -= 1\n                self.hashmap[pair[1]] += 1\n                self.string = self.string[pair[0]:]\n            \n        self.result += self.string[self.K-1]\n        return self.result\n        \n    def test(self):\n        return self.main()\n        \n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.S = \"1214\"\n        self.K = 4\n        self.obj = Solution(self.S, self.K)\n        \n    def test_solution(self):\n        "
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"11\") == \"6\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"111111111\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1214\") == \"2\"\nprint(\"Tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1214') == '2'"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\nprint('Test pass.')\n\n\"\"\"\n\nfrom math import log10, floor"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1214') == '2'\nassert solution('1234') == '4'\nassert solution('1235') == '5'\nassert solution('1236') == '6'\nassert solution('1237') == '7'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1214') == '2'\nassert solution('1324') == '3'\n\n-------"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 3 4 1 5''') == 'YES'\nassert solution('''5\n5 2 3 4 1''') == 'NO'\nassert solution('''5\n3 4 2 5 1''') == 'YES'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"2 3 4 1 5\") == \"NO\"\nassert solution(\"5 3 2 1 4\") == \"YES\"\nassert solution(\"4 1 3 2 5\") == \"NO\"\nassert solution(\"1 4 3 2 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3 4 1') == 'YES'\nassert solution('5\\n5 2 3 4 1') == 'NO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"2 1 2\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(p) == \"YES\"\n\n-------Test Case 2------\n>>> solution(p)\n    # Write your code here\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\n\nassert solution(\"201920181\") == \"4\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('1000000000000000000000000000000000') == 33\nassert solution('201920181') == 4\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == 2\n\nassert solution(\"6\") == 1\n\nassert solution(\"1000000000000000000000000000000000\") == 33\n\nassert solution(\"201920181\") == 4\n\nassert solution(\"7\") == 0\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\n\"\"\"\nimport sys"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('2 4 7 11 3') == '2'\nassert solution('13 37 39') == '2'\nassert solution('1 2 -1') == '2'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == 2\nassert solution('3\\n13 37 39') == 2\nassert solution('4\\n0 0 0 0') == 0\nassert solution('3\\n1 2 -1') == 3\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 -1') == '0'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 -1\") == \"2\"\nassert solution(\"1 2 3 -1\") == \"0\"\nassert solution(\"1 2 3 4\") == \"2\"\n\na = list(map(int, stdin.split()))\nb = list(map(int, stdin.split()))\n\nc = [d * a[i] + b[i] for i in range(len(a))]\nprint(max([0] + [c[i + 1] - c[i] for i in range(len(c) - 1)]))\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nassert solution('''3\n13 37 39\n1 2 3\n''') == '2'\nassert solution('''4\n0 0 0 0\n1 2 3 4\n''') == '0'\nassert solution('''3\n1 2 -1\n-6 -12 6\n''') == '3'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6\\n') == '3'\n\n'''\n\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nprint(max(a.count(0) + b.count(0), a.count(0) + b.count(0) - 1))\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('abaca?b') == 5\nassert solution('zabbbcc') == 0\nassert solution('bambarbia') == 10"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\\ndodivthree\") == \"5\\n7 8\"\nassert solution(\"zabbbcc\") == \"5\\n6 5\"\nassert solution(\"abaca?b\") == \"0\\n6 5\"\nassert solution(\"bambarbia\\nzabbbcc\") == \"10\\n6 2\"\nassert solution(\"hellocode\\n\\n\\nzabbbcc\") == \"10\\n6 2\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '10'\n\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('bambarbia') == 0\nassert solution('hellocode') == 0\n\"\"\"\n\nfrom itertools import combinations\nimport string"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"abaca?b\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"5\\n7 8\\n4 9\"\nassert solution(\"dodivthree\") == \"5\\n7 8\"\nassert solution(\"bambarbia\") == \"0\\n\"\nassert solution(\"hellocode\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abc?d') == 'ad'\nassert solution('abdcd?') == 'acd'\n\nassert solution('?abc') == 'a'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('code??????') == '10'\nassert solution('??????test') == '10'\nprint('The local tests are done. Try solution()')\n\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    'codeforces'\n) == '5'\nassert solution(\n    'dodivthree'\n) == '7 8'\nassert solution(\n    'bambarbia'\n) == '0'\nassert solution(\n    'hellocode'\n) == '10'\n\nassert solution(\n    'code??????'\n) == '10'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n2 2\") == \"1 1\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5'\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('1\\n1') == '1\\n1 1'"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '7\\n4 1 2 2 1 5 3\\n'\n) == '3\\n7 7\\n2 3\\n4 5\\n'\nassert solution(\n    '11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n'\n) == '2\\n3 4\\n1 1\\n2 2\\n4 4\\n'\nassert solution(\n    '4\\n1 1 1 1\\n'\n) == '4\\n4 4\\n1 1\\n2 2\\n3 3\\n'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7\") == \"3\"\n\"\"\"\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7\\n2 3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4\\n1 1'\nassert solution('4\\n1 1 1 1') == '4\\n4 4\\n1 1'\nprint('test passed')\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"10\\n3 5 7 4 2 1 3 4 1\") == \"3\\n8 9\\n8 9\"\nassert solution(\"8\\n3 2 7 6 3 2 3 1\") == \"3\\n3 4\\n3 5\\n3 6\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\n\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\n\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\n\nassert solution(\"4\\n4 4\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"1\\n1\") == \"1\\n1 1\"\nprint('test pass')"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 11\\n45 1 10 12 11 7\") == 7\nassert solution(\"5 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n6 4 10\\n2 78 4 10\") == \"12\"\nassert solution(\"4 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        ans += ((a[i] + a[j]) % k == 0)\n\nprint(ans)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\nassert solution(\"6 11\\n45 1 10 12 11 7\") == 7\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\nassert solution(\"6 11\\n45 1 10 12 11 7\") == 7\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10, 7, 12, 11\") == 7\nassert solution(\"8, 19, 5, 3\") == 12\nassert solution(\"4, 2, 78, 4, 10\") == 12\nassert solution(\"2, 78, 4, 10\") == 0\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"6 11\n45 1 10 12 11 7\"\"\") == \"7\"\nassert solution(\"\"\"4 2\n2 78 4 10\"\"\") == \"12\"\nassert solution(\"\"\"5 2\n3 7 19 3 3\"\"\") == \"0\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"9\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 5\") == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == '9'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '55'\nassert solution('-1 2 3 4 5 6 7 8 9 10') == '55'\n\n'''\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 5\") == '9'\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(solution(\"3\\n2 5\"))\n\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def _max_sum(self, N: int, B: list) -> int:\n        \"\"\"\n        Given is an integer sequence B of length N-1 which is known to satisfy the following:\n        B_i \\geq \\max(A_i, A_{i+1})\n        Find the maximum possible sum of the elements of A.\n        \"\"\"\n        \n        # max_sum = -float('inf')\n        max_sum = 0\n        \n        for i in range(0, N-1):\n            max_sum = max(max_sum, B[i])\n            \n        return max_sum\n        \n    def _find_max_sum(self, N: int, B: list) -> int:\n        \"\"\"\n        Find the maximum possible sum of the elements of A.\n        \"\"\"\n        \n        return sum(B) - self._max_sum(N, B)\n\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        Given is an integer sequence B of length N-1 which is known to satisfy the following:\n        B_i \\geq \\max(A_i, A_{i+1})\n        Find the maximum possible sum of the elements of A.\n        \"\"\"\n        \n        # Get N\n        N = int(stdin.readline())\n        \n        # Get B\n        B = list(map(int, stdin.readline().split()))\n        \n        # Get Max Sum\n        max_sum = self._find_max_sum(N, B)\n        \n        # Print Result\n        print(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == '9'\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 5\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nn, m, q = [int(n) for n in stdin.readline().split()]\n\nd = []\nfor i in range(q):\n    a, b, c, d_ = [int(n) for n in stdin.readline().split()]\n    d.append(d_)\n\na = [0] + [int(stdin.readline()) for _ in range(n)]\nb = [0] + [int(stdin.readline()) for _ in range(n)]\nc = [0] + [int(stdin.readline()) for _ in range(n)]\n\nscore = 0\nfor i in range(1, n + 1):\n    score = max(score, d[i - 1] + c[i - 1])\n\nfor i in range(1, n + 1):\n    score = max(score, d[i - 1] + c[i - 1] - a[i - 1])\n    score = max(score, d[i - 1] + c[i - 1] - b[i - 1])\n\nprint(score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\") == \"110\"\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == 110\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"./sample_input.txt\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 4 6 3''') == '5'\nassert solution('''4\n1 4 6 3''') == '5'\nassert solution('''4\n1 4 6 3''') == '5'\nassert solution('''4\n1 4 6 3''') == '5'\nassert solution('''4\n1 4 6 3''') == '5'\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 4 6 3''') == '5'\nassert solution('''3\n1 4 3''') == '0'\nassert solution('''4\n1 2 3 4''') == '1'\nassert solution('''4\n2 1 1 2''') == '0'\nassert solution('''3\n2 1 -3''') == '3'\n\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 6 3\") == \"5\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\nassert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n-1 -1') == '1.4142135623730951'\nassert solution('3\\n-1 -1\\n0 0') == '2.0'\nassert solution('4\\n-1 -1\\n0 0\\n0 0') == '2.0'\nassert solution('5\\n-1 -1\\n0 0\\n0 0\\n0 0') == '2.8284271247461903'\nassert solution('7\\n-1 -1\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0') == '4.242640687119285'\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.276142...'\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\nX, Y = [], []\nfor i in range(N):\n    x, y = map(int, stdin.readline().split())\n    X.append(x)\n    Y.append(y)"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 0\\n3 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"2.2761423749\"\n\"\"\"\nimport math\nimport sys\nimport unittest\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        n, *coords = input.split()\n        n = int(n)\n        assert 2 <= n <= 8\n        assert all(map(lambda x: x.isdigit(), coords))\n\n        x = tuple(map(int, coords[::2]))\n        y = tuple(map(int, coords[1::2]))\n\n        distances = [math.sqrt(x[i] ** 2 + y[i] ** 2) for i in range(n)]\n        distances = [sum(distances)] + [sum(distances[:i + 1]) for i in range(n)] + [sum(distances[-i:]) for i in range(1, n + 1)]\n\n        return str(sum(distances) / n)\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().solution(\"3 2\\n1 0\\n0 1\") == \"1.41421356237\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\ntowns = [list(map(int, sys.stdin.readline().rstrip().split())) for i in range(n)]\ndistances = []\nfor i in range(n):\n    for j in range(i, n):\n        if i == j:\n            continue\n        x = towns[i][0] - towns[j][0]\n        y = towns[i][1] - towns[j][1]\n        distances.append(x ** 2 + y ** 2)\nprint(sum(distances) / len(distances))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 0\\n0 1\\n0 0\") == \"2.2761423749\"\n\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1''') == '2.2761423749'\nprint('Test pass.')\n\n----"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''12 4''') == '4'\n'''\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == \"4\"\nprint(solution(\"12 4\"))\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == '4'"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open('sample_input.txt').read()) == '4'\nassert solution(open('sample_input2.txt').read()) == '15'\nassert solution(open('sample_input3.txt').read()) == '20'"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == 4\n\nassert solution(\"12 9\") == 8\n\nassert solution(\"12 100\") == 12\n\nassert solution(\"1 1\") == 0\n\nassert solution(\"1 2\") == 1"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 4') == 4\n\"\"\"\n\na, b = [int(x) for x in input().split()]\nc = a * 2 - b\nc = c if c % 2 == 0 else c + 1\nprint(c)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"12 4\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"12 4\"\n    ) == \"4\"\nassert solution(\n    \"7 3\"\n    ) == \"7\"\nassert solution(\n    \"7 4\"\n    ) == \"0\"\nassert solution(\n    \"5 1\"\n    ) == \"0\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '3'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == 1\nassert solution('11') == 2\nassert solution('10000') == 3\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == 1\nassert solution('11') == 2\nassert solution('12') == 2\nassert solution('13') == 3\nassert solution('14') == 3\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n7\") == \"7\\n\"\nassert solution(\"5\\n4\") == \"4\\n\"\nassert solution(\"5\\n8\") == \"8\\n\"\nassert solution(\"5\\n3\") == \"3\\n\"\nassert solution(\"5\\n10\") == \"10\\n\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"3\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == 3\n\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())\n\nans = 10 ** 10\n\nfor a in range(1, n + 1):\n    for b in range(1, n + 1):\n        ans = min(ans, len(str(a)) + len(str(b)))\n\nprint(ans)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000') == 3\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline()\nn = int(n)\n\ncount = 1\n\nwhile n!= 1:\n    count += 1\n    if n % 2 == 0:\n        n /= 2\n    else:\n        n = 3 * n + 1\n\nprint(count)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 3\\n2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\\n2 3 2\\n2\\n2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2 1 3 4\\n3 1 2\\n2 3 2\") == '1'\n\"\"\"\n\nN, M = input().split()\nN, M = int(N), int(M)\nK = {}\n\nfor i in range(M):\n    K[i] = set(map(int, input().split()[1:]))\n\ncnt = 0\nfor i in range(1, N + 1):\n    cnt += len(set(map(int, input().split()[1:])) & K[i])\n\nprint(cnt)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n2 3 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\") == \"1\"\nassert solution(\"4 5 6\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\"\n\nn, m = map(int, input().split())\nk = []\na = []\nfor i in range(n):\n    k.append(int(input()))\n    a.append(list(map(int, input().split())))\n\nprint(n, m)\nprint(k)\nprint(a)\n\ncount = 0\nfor i in range(m):\n    for j in range(n):\n        if a[j][i] == 1:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\n-----Explanation-----\nAll the three people only like the third food.\n\n------Source------\nhttps://codeforces.com/gym/1095/problem/B\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '0.5'\nassert solution('1') == '1.0'\n\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nGiven is an integer N.\nTakahashi chooses an integer a from the positive integers not greater than N with equal probability.\nFind the probability that a is odd.\n\nConstraints\n- 1 \\leq N \\leq 100\n\nInput\nThe input consists of a single line, the number N.\n\nOutput\nPrint the probability that a is odd.\n\nExample\nInput:\n4\n\nOutput:\n0.5\n\nExplanation:\nGiven is 4. There are four positive integers not greater than 4: 1, 2, 3, and 4. Among them, we have two odd numbers: 1 and 3. Thus, the answer is 0.5.\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\n-----\nFor n = 1, P(odd) = 0.5, which is correct.\nFor n = 2, P(odd) = 1/6, which is correct.\nFor n = 3, P(odd) = 2/8, which is correct.\nFor n = 4, P(odd) = 3/12, which is correct.\nFor n = 5, P(odd) = 4/16, which is correct.\nFor n = 6, P(odd) = 5/32, which is correct.\nFor n = 7, P(odd) = 6/48, which is correct.\nFor n = 8, P(odd) = 7/64, which is correct.\nFor n = 9, P(odd) = 8/72, which is correct.\nFor n = 10, P(odd) = 9/80, which is correct.\nFor n = 11, P(odd) = 10/81, which is correct.\nFor n = 12, P(odd) = 11/84, which is correct.\nFor n = 13, P(odd) = 12/85, which is correct.\nFor n = 14, P(odd) = 13/86, which is correct.\nFor n = 15, P(odd) = 14/87, which is correct.\nFor n = 16, P(odd) = 15/88, which is correct.\nFor n = 17, P(odd) = 16/89, which is correct.\nFor n = 18, P(odd) = 17/90, which is correct.\nFor n = 19, P(odd) = 18/91, which is correct.\nFor n = 20, P(odd) = 19/92, which is correct.\nFor n = 21, P(odd) = 20/93, which is correct.\nFor n = 22, P(odd) = 21/94, which is correct.\nFor n = 23, P(odd) = 22/95, which is correct.\nFor n = 24, P(odd) = 23/96, which is correct.\nFor n = 25, P(odd) = 24/97, which is correct.\nFor n = 26, P(odd) = 25/98, which is correct.\nFor n = 27, P(odd) = 26/99, which is correct.\nFor n = 28, P(odd) = 27/100, which is correct.\nFor n = 29, P(odd) = 28/101, which is correct.\nFor n = 30, P(odd) = 29/102, which is correct.\nFor n = 31, P(odd) = 30/103, which is correct.\nFor n = 32, P(odd) = 31/104, which is correct.\nFor n = 33, P(odd) = 32/105, which is correct.\nFor n = 34, P(odd) = 33/106, which is correct.\nFor n = 35, P(odd) = 34/107, which is correct.\nFor n = 36, P(odd) = 35/108, which is correct.\nFor n = 37, P(odd) = 36/109, which is correct.\nFor n = 38, P(odd) = 37/110, which is correct.\nFor n = 39, P(odd) = 38/111, which is correct.\nFor n = 40, P(odd) = 39/112, which is correct.\nFor n = 41, P(odd) = 40/113, which is correct.\nFor n = 42, P(odd) = 41/114, which is correct.\nFor n = 43, P(odd) = 42/115, which is correct.\nFor n = 44, P(odd) = 43/116, which is correct.\nFor n = 45, P(odd) = 44/117, which is correct.\nFor n = 46, P(odd) = 45/118, which is correct.\nFor n = 47, P(odd) = 46/119, which is correct.\nFor n = 48, P(odd) = 47/120, which is correct.\nFor n = 49, P(odd) = 48/121, which is correct.\nFor n = 50, P(odd) = 49/122, which is correct.\nFor n = 51, P(odd) = 50/123, which is correct.\nFor n = 52, P(odd) = 51/124, which is correct.\nFor n = 53, P(odd) = 52/125, which is correct.\nFor n = 54, P(odd) = 53/126, which is correct.\nFor n = 55, P(odd) = 54/127, which is correct.\nFor n = 56, P(odd) = 55/128, which is correct.\nFor n = 57, P(odd) = 56/129, which is correct.\nFor n = 58, P(odd) = 57/130, which is correct.\nFor n = 59, P(odd) = 58/131, which is correct.\nFor n = 60, P(odd) = 59/132, which is correct.\nFor n = 61, P(odd) = 60/133, which is correct.\nFor n = 62, P(odd) = 61/134, which is correct.\nFor n = 63, P(odd) = 62/135, which is correct.\nFor n = 64, P(odd) = 63/136, which is correct.\nFor n = 65, P(odd) = 64/137, which is correct.\nFor n = 66, P(odd) = 65/138, which is correct.\nFor n = 67, P(odd) = 66/139, which is correct.\nFor n = 68, P(odd) = 67/140, which is correct.\nFor n = 69, P(odd) = 68/141, which is correct.\nFor n = 70, P(odd) = 69/142, which is correct.\nFor n = 71, P(odd) = 70/143, which is correct.\nFor n = 72, P(odd) = 71/144, which is correct.\nFor n = 73, P(odd) = 72/145, which is correct.\nFor n = 74, P(odd) = 73/146, which is correct.\nFor n = 75, P(odd) = 74/147, which is correct.\nFor n = 76, P(odd) = 75/148, which is correct.\nFor n = 77, P(odd) = 76/149, which is correct.\nFor n = 78, P(odd) = 77/150, which is correct.\nFor n = 79, P(odd) = 78/151, which is correct.\nFor n = 80, P(odd) = 79/152, which is correct.\nFor n = 81, P(odd) = 80/153, which is correct.\nFor n = 82, P(odd) = 81/154, which is correct.\nFor n = 83, P(odd) = 82/155, which is correct.\nFor n = 84, P(odd) = 83/156, which is correct.\nFor n = 85, P(odd) = 84/157, which is correct.\nFor n = 86, P(odd) = 85/158, which is correct.\nFor n = 87, P(odd) = 86/159, which is correct.\nFor n = 88, P(odd) = 87/160, which is correct.\nFor n = 89, P(odd) = 88/161, which is correct.\nFor n = 90, P(odd) = 89/162, which is correct.\nFor n = 91, P(odd) = 90/163, which is correct.\nFor n = 92, P(odd) = 91/164, which is correct.\nFor n = 93, P(odd) = 92/165, which is correct.\nFor n = 94, P(odd) = 93/166, which is correct.\nFor n = 95, P(odd) = 94/167, which is correct.\nFor n = 96, P(odd) = 95/"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '0.5'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n\") == \"0.5\\n\"\nassert solution(\"12\\n\") == \"0.5\\n\"\nassert solution(\"8\\n\") == \"0.25\\n\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == '0.5'\nassert solution(4) == '0.5'\nassert solution(5) == '0.25'\n\"\"\"\n\nn = int(input().strip())\ncount = 0\nfor i in range(1, n+1):\n    if i % 2!= 0:\n        count += 1\nprint(\"{:.6f}\".format(count/n))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('1\\n') == '0.0'\nassert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.0'\nassert solution('4\\n') == '0.5'\n\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == '0.5'\nassert solution(5) == '0.25'\nassert solution(100) == '0.0625'\nassert solution(103) == '0.069696969697'\nassert solution(4) == '0.5'\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '0.5'\n\nassert solution('2\\n') == '0.5'\n\nassert solution('3\\n') == '0.33333333'\n\nassert solution('10\\n') == '0.16666667'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\n0 1\n1 1\n1\n1 1\n2 0\n\") == '2'\nassert solution(\":\n1 1\n1\n1 1\n0\n\") == '2'\nassert solution(\":\n1 1\n2 0\n\") == '0'\nassert solution(\":\n1 1\n1\n1 1\n2 1\n\") == '1'\nassert solution(\":\n1 1\n2 0\n\") == '1'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == '2'\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n2 1\n1\n1 1\n1\n2 0\n''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"4\\n1\\n2 1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"5\\n1\\n2 1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"6\\n1\\n2 1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('6\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('6\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('8\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '4'\nassert solution('7\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '4'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcdefg') == 'abcdefg'\nassert solution('nikoandsolstice') == 'nikoand...'\nassert solution('abcdefghijk') == 'abcdefg'\nassert solution('nikoandsolsticehasa' + 'lengthof15') == 'nikoand...'\nassert solution('abcdefghijk' + 'nikoandsolsticehasa' + 'lengthof15') == 'abcdefg'\n\nimport os\nimport unittest\nfrom io import StringIO\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        # Setup the test\n        os.environ[\"INPUT_STRING\"] = '7 nikoandsolstice'\n        # Run the test\n        old_stdout = sys.stdout\n        sys.stdout = mystdout = StringIO()\n        solution()\n        sys.stdout = old_stdout\n        # Assert the end result\n        self."
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"pundit\") == \"pundit\"\n\n-----\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"abcdefgabcdefg\") == \"abcdefgabcdefg\"\nassert solution(\"abcdefgabcdefgabcdefg\") == \"abcdefgabcdefgabcdefg\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('nikoandsolstice') == 'nikoand...'\nassert solution('adfggjkl') == 'adfggjk...'\nassert solution('abcdefghijklmnop') == 'abcdefghi...'"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\nassert solution(\"nikoandsolsticehas\") == \"nikoand...\"\n\nassert solution(\"nikoandsolsticehasverylongstring\") == \"nikoand...\"\n\nassert solution(\"nikoandsolsticehasverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstring\") == \"nikoand...\"\n\nassert solution(\"nikoandsolsticehasverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstringveryverylongstring\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(TEST_STDIN_1) == TEST_STDOUT_1\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n\nK = int(input())\nS = str(input())\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder\") == \"atcodes\"\nassert solution(\"atcoder\") == \"atcodes\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"banana\") == \"bananas\"\nassert solution(\"peach\") == \"peaches\"\nassert solution(\"melon\") == \"melons\"\nassert solution(\"cucumber\") == \"cucumbers\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"apple\"\n) == \"apples\"\n\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('apple') == 'apples'\nassert solution('taknee') == 'taknees'\nassert solution('mutton') =='mutton'\nassert solution('muttony') =='muttonies'\nassert solution('cattle') == 'cattle'\n\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('mango') =='mangoes'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"d\") == \"d\"\nassert solution(\"c\") == \"c\"\nassert solution(\"k\") == \"k\"\nassert solution(\"l\") == \"l\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'as'\nassert solution('aa') == 'aas'\nassert solution('aaa') == 'aas'\nassert solution('A') == 'As'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apple') == 'apples'\nassert solution('atcoder') == 'atcoderes'\nassert solution('a') == 'as'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nfrom __future__ import print_function\n\nn, k = [int(x) for x in input().split()]\nsnack_dict = {}\nfor _ in range(k):\n    snack = int(input())\n    snack_dict[snack] = snack_dict.get(snack, 0) + 1\n\nprint(k - len(snack_dict))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nimport sys\n\nN, K = [int(s) for s in sys.stdin.readline().split()]\nsnacks = []\nsnacks_dict = {}\n\nfor i in range(N):\n    d = int(sys.stdin.readline())\n    snacks.append(d)\n    for j in range(1, d + 1):\n        if j not in snacks_dict.keys():\n            snacks_dict[j] = 1\n        else:\n            snacks_dict[j] += 1\n\nsnacks.sort(reverse=True)\n\nfor s in snacks:\n    if s not in snacks_dict.keys():\n        snacks_dict[s] = 0\n\nsnacks_dict = sorted(snacks_dict.items(), key=lambda item: item[1], reverse=True)"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbbbaaca') == 5\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaabbbbaa\") == \"5\"\nassert solution(\"aabbbbaa\") == \"5\"\nassert solution(\"aaaabbbbaa\") == \"4\"\nassert solution(\"aaaabbbbbbbaa\") == \"4\"\nassert solution(\"aaaabbbba\") == \"4\"\n\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\naabbbbaaca\") == \"5\\n\"\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacab') == 'abc'\nassert solution('abc') == 'abc'\nassert solution('a') == 'a'\nassert solution('aaaaa') == 'a'\nassert solution('abba') == 'ab'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaabbbbaa\") == \"abbbbaaa\"\nassert solution(\"aabbbbbaa\") == \"abbbbaaa\"\nassert solution(\"aaaaaabbbbbaa\") == \"aaaaaabbbbbaaa\"\nassert solution(\"aaaaaabbbbaab\") == \"aaaaabbbbbaaa\"\nassert solution(\"aaaaaabbbbaaaa\") == \"aaaaabaaa\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == \"abaca\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaabbbbaa\") == 5\nassert solution(\"aaabbbbbaa\") == 4\nassert solution(\"aabbbbaaca\") == 5\nassert solution(\"abaaabbbbaa\") == 3\nassert solution(\"baaabbaabb\") == 2\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbbbaaac\") == 5\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"7\"\nassert solution(\"3\\n2 4 1\") == \"2\"\n\"\"\"\n\n\"\"\"\nThis problem can be solved using Dynamic Programming.\n\nThe maximum number of operations is determined by the max of two possibilities:\n1) Divide the sequence by 2 and multiply by 3\n2) Divide the sequence by 2 and multiply by 2\n\nWe can write this as:\nmax(\n    divide_by_2_and_multiply_by_3(i, n)\n    divide_by_2_and_multiply_by_2(i, n)\n)\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"6\\n5 2 4\") == \"3\"\nassert solution(\"9\\n3 1 2 3 1 2 3\") == \"3\"\nassert solution(\"9\\n5 2 4 3 1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('5 2 4') == '3'\n'''\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 2') == '4'\nassert solution('4 3 2') == '5'\nassert solution('1 1 1') == '1'\nassert solution('1 1 3') == '1'\nassert solution('2 1 1') == '1'\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 0\nwhile True:\n    temp = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n        else:\n            a[i] *= 3\n        if a[i] == int(a[i]):\n            temp += 1\n    if temp == n:\n        break\n    ans += 1\nprint(ans)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1 1 3''') == '2'\nassert solution('''2 3 3 3''') == '8'\nassert solution('''2 1 1 1 1''') == '0'\nassert solution('''0 0 0 0 0''') == '0'\nassert solution('''0 1 1 1 1''') == '1'\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n\n\"\"\"\nA, B, C, K = [int(n) for n in stdin.split()]\n\nprint(sum([(max(n, 0) + min(n, 0)) // 2 for n in [A, B, C]]))\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3') == 2\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 3') == '2'\n\nimport numpy as np\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '4'\nassert solution('2 1 1 3') == '2'\nassert solution('2 2 1 1') == '1'\nassert solution('2 1 1 3') == '2'\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2 3\") == '8'\nassert solution(\"1 1 1 1\") == '4'\nassert solution(\"1 0 0 1\") == '2'\n\n'''"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"10 20\") == \"No\"\nassert solution(\"2 2\") == \"Yes\"\nassert solution(\"7 7\") == \"No\"\n\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5a1377863e1e6b62e90001e6/train/python\n\nTakahashi says: \"There are X animals in total in the garden, and they have Y legs in total.\" Determine whether there is a combination of numbers of cranes and turtles in which this statement is correct.\n\n-----Constraints-----\n - 1 \\leq X \\leq 100\n - 1 \\leq Y \\leq 100\n - All values in input are integers.\n\n-----Input-----\nX Y\n\n-----Output-----\nIf there is a combination of numbers of cranes and turtles in which the statement is correct, print Yes; otherwise, print No.\n\n-----Sample Input-----\n3 8\n\n-----Sample Output-----\nYes\n\nThe statement \"there are 3 animals in total in the garden, and they have 8 legs in total\" is correct if there are two cranes and one turtle. Thus, there is a combination of numbers of cranes and turtles in which the statement is correct.\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('1 3\\n') == 'No'\nassert solution('2 4\\n') == 'Yes'\n\n--------------------------------------------------\nIn the first line, print the number of animals in the garden.\nIn the second line, print the total number of legs in the garden.\n----Input----\nX Y\n\n----Output----\nX Y\n\n----Input----\n3 8\n\n----Output----\nNo\n\nExplanation\nIf there are two cranes and one turtle in the garden, there is no combination of numbers of cranes and turtles in which the statement is correct. Thus, the answer is No.\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('8 8\\n') == 'No'\n\"\"\"\n\nx, y = map(int, input().split())\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nGiven a number N. Determine if it is a palindrome or not.\n\n-----Constraints-----\n - N is between 1 and 10^16.\n - N is a palindrome if its digits are the same when reversed.\n - N is not a palindrome if its digits are not the same when reversed.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\n\n-----Output-----\nFor each test case, print \"Yes\" if N is a palindrome, otherwise print \"No\".\n\n-----Sample Input-----\n1\n12\n\n-----Sample Output-----\nYes\n\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\nassert solution(\"5 6\") == \"No\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 8\n''') == 'Yes'\nassert solution('''3 2\n''') == 'No'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == 'Yes'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n4 3\") == 2\nassert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == 2\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n4 5\") == 0\nassert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == 1\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 3\\n2 3') == '2'\nassert solution('2 3\\n1 3\\n1 1') == '0'\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nedges = [tuple(map(int, line.split())) for line in sys.stdin]\n\nedges = set(edges)"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n1 3\\n2 3') == '2'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nclass Node:\n    def __init__(self, value, children):\n        self.value = value\n        self.children = children"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n2 4\") == \"1\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n2 4\") == \"1\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == 2\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == '2'\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\nassert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1\\n2\\n') == '5'\nassert solution('3 2\\n-1\\n-2\\n') == '0'\nassert solution('4 2\\n1\\n2\\n3\\n') == '6'\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 2\n\"\"\"\n) == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('5 1\\n') == '4'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"18\"\nprint(\"OK\")\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('0') == '0'\nassert solution('4 6') == '20'\nassert solution('5 2') == '17'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2') == '18'\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nimport sys\n\nn, l = map(int, input().split())"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15\") == \"60\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('15') == '60'\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15') == '60'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\") == \"60\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"60\"\n\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\") == \"60\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == '1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz'\nassert solution(15) == '1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz'\nassert solution(0) == '0'\nassert solution(1) == '1'\nassert solution(2) == '1 2'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '0'\nassert solution('2\\n0') == '1'\nassert solution('3\\n0') == '0'\nassert solution('4\\n0') == '2'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(8)\n\"\"\"\n\nimport sys\n\nfrom typing import List, Tuple, Set, Dict\n\ninputs: List[Tuple[int, int]] = []\nfor line in sys.stdin:\n    inputs.append(tuple(map(int, line.strip().split())))\n\nn, x = inputs.pop(0)\np = inputs.pop(0)"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 10 6 5\") == 8\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\nX, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\nX, N = map(int, sys.argv[1:])\n\np = [int(i) for i in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\nx, n = map(int, sys.stdin.readline().split())\nseq = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\nprint(\"Passed\")"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nh, w = input().split()\nh, w = int(h), int(w)\n\nr, c = input().split()\nr, c = int(r), int(c)\n\ncount = 0\nfor _ in range(h):\n    if r <= _ <= r + h - 1:\n        count += c\n    if r <= _ <= r + w - 1:\n        count += w\n    if _ == r:\n        count += c\n\nprint(count)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\") == \"3\"\nassert solution(\"3 2\\n3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n------\"\"\"\n\nimport sys\n\nH, W = map(int, sys.stdin.readline().strip().split())\nH_, W_ = map(int, sys.stdin.readline().strip().split())\n\nprint(H * W - H_ * W_)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\") == \"1\"\n\"\"\"\n\nrows, columns = [int(n) for n in stdin.readline().split()]"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution(str(input()))\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"7 4\\n3 7 5 1 10 3 20\"\n) == \"6\"\nassert solution(\n\"7 2\\n3 7 5 1 10 3 20\"\n) == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\nprint(\"PASSED\")\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('7 1\\n3 7 5 1 10 3 20') == '1'\nassert solution('2 1\\n2 3') == '3'\nassert solution('3 1\\n4 7 5 1 10 3 20') == '5'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\nassert solution(\"7 6\\n3 7 5 1 10 3 20\") == \"10\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('4 5\\n2 1 4 3') == '-1'\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('1 5\\n1 2 3 4 5') == '-1'\nassert solution('2 10\\n2 9 8 5 6 4') == '9'\n\"\"\"\n\nimport sys\n\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '7 4'\n) == '6'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\\n\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\n\nassert solution('.*.\\n.*.\\n.*.') == '-1'\n\nassert solution('.*...\\n...*.*\\n....*.\\n.*.*.\\n.*.*.') == '3\\n2 2 1\\n3 3 1'\n\nassert solution('.*...\\n.*.*.*\\n...*.*\\n.*.*.*\\n*.*.*.') == '-1'\n\nassert solution('.*..\\n.*.*\\n.*.*\\n*.*.') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n') == '3\\n2 2 1\\n3 3 1'\nassert solution('5 5\\n.****\\n..**.\\n****.\\n....*\\n....*\\n') == '-1'\nassert solution('3 3\\n.**\\n.*.\\n.**\\n') == '-1'\nassert solution('3 3\\n.**\\n.*.\\n..**\\n') == '-1'\nassert solution('3 3\\n.**\\n.*.\\n.*.\\n') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('3 3\\n.*.\\n.*.\\n*.') == '-1'\n\nassert solution('5 5\\n.*...\\n****.\\n.*...\\n.*...\\n.....') == '3'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3'\nassert solution(\n\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == '-1'\nassert solution(\n\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == '-1'\nassert solution(\n\"3 3\\n*.*\\n.*.\\n*.*\") == '-1'\nassert solution(\n\"3 3\\n*.*\\n.*.\\n*.*\") == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n.*.\\n.*.\\n.*.\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\n\"\"\"\n\n\"\"\"\nGiven a string of '*' and '.'\nreturn the number of stars in the string\n\nint countStars(string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == '*') {\n            count++;\n        }\n    }\n    return count;\n}\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\\n\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"1\\n2 2 1\\n3 3 1\\n\"\nassert solution(\"3 3\\n.*\\n.*\\n*.*\") == \"1\\n2 2 1\\n\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('aaa') == 'aaa'\nassert solution('aabc') == 'ab'\nassert solution('aaaaa') == ''\nassert solution('aaaaabbbbbbb') == ''\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aabc') == 'ab'\nassert solution('aa') == ''\nassert solution('baa') == 'b'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabc') == 'ab'\nassert solution('aaa') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 1\nassert solution(\"bad\") == 1\nassert solution(\"aa\") == 2\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabc\") == \"ab\", f\"{solution('aabc')} == 'ab'\"\nassert solution(\"aaa\") == \"\", f\"{solution('aaa')}\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaa\") == \"aaa\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"aaac\") == \"abc\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcde\") == \"abcd\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaa') == '3', 'Wrong solution'\nassert solution('abc') == 'abc', 'Wrong solution'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"ab\"\nassert solution(\"abcde\") == \"cde\"\nassert solution(\"aa\") == \"\"\nassert solution(\"aaab\") == \"ab\"\nassert solution(\"aaabb\") == \"aa\"\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"bad\") == 2\nassert solution(\"aa\") == 1\nassert solution(\"aabc\") == 2\nassert solution(\"aabcb\") == 3\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\n\nassert solution('5 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n') == 'NO\\n'\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\nassert solution('5 5\\n1 4\\n1 2\\n2 3\\n2 4\\n4 5') == 'NO'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\ngraph = {i: set() for i in range(1, n + 1)}\nfor i in range(m):\n    u, v = [int(x) for x in input().split()]\n    graph[u].add(v)\n    graph[v].add(u)\n\nresult = 'YES'\nfor i in range(1, n + 1):\n    if len(graph[i]) == 1:\n        result = 'NO'\n        break\n\nfor u in range(1, n + 1):\n    for v in graph[u]:\n        if len(graph[v]) == 1:\n            graph[u].remove(v)\n            if len(graph[u]) == 1:\n                result = 'NO'\n                break"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str([\n    [1, 5], \n    [2, 1], \n    [1, 4], \n    [3, 1], \n    [6, 1]\n])) == \"YES\\n10100\"\nassert solution(str([\n    [1, 5], \n    [2, 1], \n    [1, 4], \n    [3, 1], \n    [6, 1], \n    [6, 2], \n    [6, 3]\n])) == \"NO\"\nassert solution(str([\n    [1, 5], \n    [2, 1], \n    [1, 4], \n    [3, 1], \n    [6, 2], \n    [6, 3]\n])) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1'\n) == 'YES\\n10100'\nassert solution(\n    '6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1'\n) == 'NO'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1\\n1 4') == 'YES\\n101'\nassert solution('6 1\\n2 1\\n1 4\\n3 1\\n6 1\\n') == 'YES\\n10100'\n\n-----Hint-----\n\nCan you use BFS?\nYou don't need to keep the information about the length of the path.\nKeep only information about whether the path is longer than one or not.\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom queue import deque\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('input.txt').read()) == 'YES\\n10100', 'Check input format'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(['4 4', '1 2', '1 3', '2 3', '2 4']) == 'YES\\n10100'\nassert solution(['5 6', '1 2', '1 3', '2 3', '2 4', '3 4']) == 'NO\\n'\nassert solution(['4 4', '1 2', '1 3', '2 3', '2 4', '4 5', '5 1']) == 'NO\\n'\n\"\"\"\n\nfrom collections import defaultdict\nfrom queue import Queue\nfrom copy import deepcopy"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 10\\n1 10\") == \"0\"\nassert solution(\"2 4\\n2 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n5 4\\n6 3\\n\") == \"0\\n2 3\\n\"\nassert solution(\"4 5\\n4 4\\n1 2\\n5 4\\n6 3\\n\") == \"0\\n\"\nassert solution(\"5 5\\n1 2\\n5 4\\n6 3\\n\") == \"1\\n2 3\\n\"\n\"\"\"\n\nn,m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nans = 0\n\nfor i in range(1, m + 1):\n    for j in range(n):\n        if l[j] <= i <= r[j]:\n            break\n    else:\n        ans += 1\n\nprint(ans)\nfor i in range(ans):\n    print(i + 1, end=\" \")\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('3 5\\n2 2\\n1 2\\n5 5') == '0'\nassert solution('1 7\\n1 7') == '0'\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n3 4\\n4 5\\n1 2\") == \"0\\n1 4\"\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\nassert solution('1 7\\n2 5') == '0'\n\n\"\"\"\n\nfrom typing import List, Set, Dict\nfrom collections import namedtuple\nfrom copy import deepcopy\nimport sys\n\n\nclass Segment:\n    def __init__(self, start: int, end: int):\n        self.start = start\n        self.end = end\n\n    def __hash__(self):\n        return hash((self.start, self.end))\n\n    def __repr__(self):\n        return '{}-{}'.format(self.start, self.end)\n\n\nSegmentRange = namedtuple('SegmentRange', ['start', 'end'])\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == '2\\n3 4'\nassert solution(\"1 7\\n1 7\") == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"3 5\\n1 1\\n5 5\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_expected\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n\na, b, c, d = map(int, input().split())\nl = list(range(a, b+1))\nl_c = Counter(l)\n\nl_c_a = l_c.copy()\nl_c_a[c] = 0\nl_c_a = list(l_c_a.items())\nl_c_a = sorted(l_c_a, key=lambda x: x[0])\n\nl_c_b = l_c.copy()\nl_c_b[d] = 0\nl_c_b = list(l_c_b.items())\nl_c_b = sorted(l_c_b, key=lambda x: x[0])\n\ni = 0\nj = 0\n\nc = l_c_a[i][0]\nd = l_c_b[j][0]\n\nwhile i < len(l_c_a) and j < len(l_c_b):\n    if l_c_a[i][1] > 0 and l_c_b[j][1] > 0:\n        if c!= d:\n            print(c)\n            break\n        else:\n            i += 1\n            j += 1\n            c = l_c_a[i][0]\n            d = l_c_b[j][0]\n    elif l_c_a[i][1] > 0:\n        i += 1\n    elif l_c_b[j][1] > 0:\n        j += 1\n    else:\n        break\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 2 3\") == 2\nprint(solution(\"4 9 2 3\"))\n\n-----\n4 9 2 3\n-----\n3\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9 2 3') == '2'\n\nassert solution('3 5 7 9') == '1'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('6 17 9 4') == '6'\nassert solution('1 2000000000 1 2000000000') == '2000000000'\nassert solution('100 2000000000 1 2000000000') == '2000000000'\nassert solution('2 1000000000 2 1000000000') == '0'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 2 3') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9 2 3') == '2'\nprint('Test pass.')\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"9876\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123456789) == 'Yes'\n\nprint(solution(123456789))\n\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(123456789) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('12345678') == 'No'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == 'Yes'\n\"\"\"\n\nfrom utils import checkValue\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1235\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"1236\") == \"Yes\"\nassert solution(\"1238\") == \"Yes\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\nimport math\n\nN = int(input())\ncount = 0\nx = 1\nwhile N > x:\n    count += 1\n    x += math.floor(math.sqrt(x))\n\nprint(count + 1)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\n\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('127') == '4'\nassert solution('7') == '3'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12345\") == 3\nassert solution(\"123456\") == 4\n\"\"\"\nimport math\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'a'\nassert solution('z') == 'z'\nassert solution('c') == 'c'\nassert solution('aa') == 'aa'\nassert solution('zzz') == 'zzz'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcde\") == \"edcba\"\nassert solution(\"abcdeaa\") == \"edcbaaa\"\nassert solution(\"abcd\") == \"dcba\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"ab\") == \"ba\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ba\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"abcd\") == \"dcba\"\nassert solution(\"abcde\") == \"eabcd\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('kyoto') == 'tokyo'\n\"\"\"\n\ns = input()\nt = input()\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('kyoto') == 'tokyo'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"dcba\"\nassert solution(\"abcdx\") == \"dcba\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"abcdef\") == \"defabc\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"hoge\") == \"No\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cabacc\", \"abc\") == 1\nassert solution(\"abacc\", \"abc\") == 0\nassert solution(\"caba\", \"bcac\") == 2\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abc') == 0\nassert solution('cabacc') == 1\nassert solution('abcdefghijklmnopqrstuvwxyz') == 26\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0\nassert solution(\"cabacc\") == 1\nassert solution(\"abcb\") == 2\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'cabacc'\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba', 'aba') == 1\nassert solution('abc', 'bc') == 1\nassert solution('cabacc', 'abc') == 1\nassert solution('cabacc', 'abcc') == 2\nassert solution('cabacc', 'ac') == 2\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\nassert solution('caadaaacba') == '2'\nassert solution('aabbccab') == '2'\nassert solution('aabbccabbbcc') == '2'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"6 24 2\") == \"6\"\nassert solution(\"9 36 2\") == \"6\"\nassert solution(\"23 3 1\") == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 12 2') == 2\n\"\"\"\nimport math\n\na, b, k = map(int, stdin.readline().split())"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nfrom typing import List, Tuple\nimport math\n\nclass Input:\n    def __init__(self, A: int, B: int, K: int):\n        self.A = A\n        self.B = B\n        self.K = K"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 12 2''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2') == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1024\") == 2020\n'''\n\nX = int(input())\n\nprint(X // 500 + X // 100 + X // 50 + X // 10 + X // 5 + X // 1)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1024') == '2020'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1024') == '2020'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1024') == 2020\n\"\"\"\n\nx = int(input())\n\nprint(x*(1000//500 + x//500)*5 + x//5*5)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('2\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \"1000\"\nassert solution(\"1024\") == \"2020\"\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5a8bfeb8eb6a04c0bc000932/train/python\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1024') == '2020'\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\nassert solution(\"2048\") == \"1024\"\n\"\"\"\n\nx = int(input())\nprint(x//1000*500 + x//5*5)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\") == \"5\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 4\\n\") == \"5\"\n\"\"\"\n\nn = int(input())\nxs = list(map(int, input().split()))\n\nmin_val = float('inf')\n\nfor x in xs:\n    min_val = min(x - x % min_val, min_val)\n\nprint(min_val)"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 9\\n6 8') == '9'\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 4\\n') == 5\nprint(solution(stdin))\n\n\"\"\"\n\n\n\"\"\"\nThe problem can be solved using dynamic programming.\nIn every iteration of the algorithm, we consider all possible minimum stamina the N people have to spend,\nand return the minimum sum.\n\nThe first iteration is to consider the case that the meeting is held at coordinate 0,\nwith N people having stamina points equal to X_1 + X_2 +... + X_N,\ni.e., when the first person spends (0 - 0)^2 = 0 points of stamina.\nWe should add this to the result.\n\nThe second iteration is to consider the case that the meeting is held at coordinate 1,\nwith N people having stamina points equal to X_1 + X_2 +... + X_N,\ni.e., when the first person spends (1 - 1)^2 = 0 points of stamina.\nWe should add this to the result.\n\nThe third iteration is to consider the case that the meeting is held at coordinate 2,\nwith N people having stamina points equal to X_1 + X_2 +... + X_N,\ni.e., when the first person spends (2 - 2)^2 = 0 points of stamina.\nWe should add this to the result.\n\nThe fourth iteration is to consider the case that the meeting is held at coordinate 3,\nwith N people having stamina points equal to X_1 + X_2 +... + X_N,\ni.e., when the first person spends (3 - 3)^2 = 0 points of stamina.\nWe should add this to the result.\n\nThis leads to the following recursion:"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4') == '5'\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\") == \"4\"\n\nprint(solution(\"3\\n1 3 2\"))\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2\n1 4''') == '5'\nassert solution('''2\n2 5''') == '6'\nassert solution('''2\n3 5''') == '7'\nassert solution('''4\n1 4 5 4''') == '8'\nassert solution('''4\n5 4 4 5''') == '11'\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n4\") == \"5\"\nassert solution(\"2 4\\n1\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\") == 3\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\nA, B = (int(x) for x in stdin.split(' '))"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\nassert solution('1 1') == '1'\nassert solution('10 10') == '0'\n\"\"\"\n\nimport sys\n\nnumber_of_sockets = lambda a: a * (a + 1) // 2\nnumber_of_power_strips = lambda b: b * (b + 1) // 2\nnumber_of_empty_sockets = lambda c, a: c - a\n\na, b = list(map(int, sys.stdin.readline().split(' ')))\n\nprint(number_of_power_strips(b) - number_of_power_strips(a - 1))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"3\"\nprint(solution(\"4 10\"))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 1\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 2\n\nassert solution(\"CSC\") == 0\nassert solution(\"CSR\") == 1\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CSR\") == 2\nprint(\"Test 1: Passed!\")\n\nassert solution(\"CSS\") == 1\nprint(\"Test 2: Passed!\")\n\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('CSS') == 2\n\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('CSS'), 2)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == \"2\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CSS') == 2\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\n-----------------------\n----Test2.py----------\n-----------------------\nimport sys"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 4 5') == 2\nassert solution('4\\n1 3 4') == 0\nassert solution('4\\n5 4 1 3') == 1\nassert solution('2\\n1 2') == 0\nassert solution('4\\n1 3 5 4') == 2\n\nprint(\"You've successfully parsed in the input string.\")\n\n\"\"\"\n\nfrom typing import List, Any\nfrom decimal import Decimal\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 3 5 4 2''') == 2"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n\n\"\"\"\nInput\n5\n1 3 5 4 2\n\nOutput\n2\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str([5, 3, 1, 4, 2])) == 2\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n8.32 2.53\\n8.76 0.84\\n9.69 2.23\\n10.82 2.48\\n11.17 1.72\\n12.52 1.75\\n13.88 2.74') == 6.720\nassert solution('5\\n3.24 1.46\\n3.54 0.70\\n4.56 -1.28\\n5.46 -1.62') == 5.620\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == 5.480\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == 6.040\n\nprint(solution(stdin))\n\"\"\"\n\nimport sys\nimport math\nimport decimal"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.720\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.040'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\nprint(solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76'))\n\n------"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"8\"\n) == \"5.410\"\nassert solution(\n    \"5\"\n) == \"5.620\"\nassert solution(\n    \"8\"\n) == \"5.480\"\nassert solution(\n    \"5\"\n) == \"6.040\"\nassert solution(\n    \"8\"\n) == \"6.040\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\n'''\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"5.480\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\\n\") == \"6.720\"\n\n\"\"\"\nimport math\nfrom decimal import Decimal"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.720\"\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('1 1') == 0\nassert solution('1 2') == 1\nassert solution('1 3') == 2\nassert solution('2 3') == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 16\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '2'\n\"\"\"\n\nn, m = input().split()\na = input().split()\na = list(map(int, a))"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == '2'\nassert solution(\"5 16\\n5 5 5 5 5\\n\") == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 36\\n5 5 5 5 5\") == \"-1\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '-1'\nassert solution('5 15') == '2'\nassert solution('5 16') == '2'\nassert solution('7 26') == '-1'\nassert solution('5 26') == '1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input_stdin) == expected_stdout\n\"\"\"\n\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\ntotal = 0\nmax_caffeine = max(l)\nl_sorted = sorted(l, reverse=True)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n-----Test data-----"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"-1\"\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\nl = [int(i) for i in input().split()]\n\nl.sort()\n\ni, m = 0, 0\nwhile i < len(l) - 1 and m < m:\n    m += l[i]\n    i += 1"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\n\n\n\n'''"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 4\n1 3 1 3 10 3 7 7 12 3\n''') == '7 3 1 3'\n\nassert solution('''7 3\n1 2 3 2 4 3 1\n''') == '1 2 3'\n\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\n''') == '1 1'\n\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\ns = sorted(map(int, stdin.readline().split()))\n\nans = []\nleft, right = 0, k - 1\n\nwhile left <= right:\n    if left == right:\n        ans.append(s[left])\n        break\n    if s[left] == s[right]:\n        ans.append(s[left])\n        left += 1\n        right -= 1\n    elif s[left] < s[right]:\n        ans.append(s[left])\n        left += 1\n    else:\n        ans.append(s[right])\n        right -= 1\n\nprint(*ans, sep=\" \")"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == '1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"1 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"0\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nmat = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n\nvisited = [set() for _ in range(m)]\nfor i in range(n):\n    for j in range(m):\n        visited[j].add(mat[i][j])\n\nresult = 1\nfor i in range(m):\n    for j in range(i+1, m):\n        if all(abs(x-y) >= result for x, y in zip(visited[i], visited[j])):\n            result = max(result, abs(visited[i][0]-visited[j][0]))\n\nprint(result)"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom itertools import chain\nfrom itertools import combinations\nfrom functools import reduce\nfrom typing import Iterable\nfrom typing import Tuple\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxxxx\") == \"0\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xiii\") == \"3\"\nassert solution(\"xxii\") == \"2\"\nassert solution(\"xxx\") == \"0\"\nassert solution(\"x\") == \"1\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\n\"\"\"\n\nn = int(input())\nname = input()\ncount = 0\nwhile 'xxx' in name:\n    name = name[:name.find('xxx')] + name[name.find('xxx')+3:]\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nassert solution(\"xxxxxxx\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxxxxxxxxx\") == 8\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\ns = list(input())\nc = Counter(s)\n\ncount = 0\nfor i in range(n):\n    if s[i] == \"x\" and (i == 0 or s[i-1]!= \"x\"):\n        count += 1\n    if s[i]!= \"x\" and (i == n-1 or s[i+1]!= \"x\"):\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xxxxx\") == \"5\"\nassert solution(\"xxxii\") == \"0\"\nassert solution(\"exxxii\") == \"1\"\nassert solution(\"exxxi\") == \"1\"\nassert solution(\"exxx\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"x3x\") == \"3\"\nassert solution(\"x3x4x\") == \"4\"\nassert solution(\"x3x4x5x\") == \"3\"\nassert solution(\"x3x4x5x6x\") == \"6\"\nassert solution(\"xx3x4x5x6x\") == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxxxx\") == 0\nassert solution(\"xx\") == 1\nassert solution(\"x\") == 0\nassert solution(\"xxxxx\") == 1\nassert solution(\"xxxx\") == 2\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"5\") == \"180\"\nassert solution(\"6\") == \"162\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"4\") == \"48\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"48\"\nprint(solution(\"4\"))\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == 48\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"48\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '48'\nassert solution('1') == '1'\nassert solution('100') == '5050'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n') == 'unsafe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"4 3\") == \"safe\"\n\n\"\"\"\n\nimport sys\nimport math\n\nnum_sheep, num_wolves = map(int, sys.stdin.readline().strip().split(' '))"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n') == 'unsafe'\nassert solution('3 2\\n') =='safe'\nassert solution('10 10\\n') == 'unsafe'\nassert solution('1 10\\n') == 'unsafe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\nimport sys\n\ns, w = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"4 6\") == \"safe\"\nassert solution(\"7 7\") == \"unsafe\"\nassert solution(\"10 10\") == \"safe\"\n\n\"\"\"\n\nimport sys\nimport math\n\nS, W = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3 4) == \"unsafe\"\nassert solution(5 4) == \"unsafe\"\nassert solution(3 5) == \"safe\"\nassert solution(4 3) == \"safe\"\nassert solution(5 2) == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\nS, W = [int(i) for i in stdin.split(' ')]"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 5\"\n) == \"unsafe\"\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == 6\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 5') == '6'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4 5''') == '6'\nassert solution('''3 4 4''') == '2'\nassert solution('''1 1 1''') == '0'\nassert solution('''1 2 3''') == '0'\nassert solution('''10 10 10''') == '50'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"3 4 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n\na, b, c = map(int, input().split())\nprint((a * b) * (c ** 2) // (a ** 2 + b ** 2))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 8\") == \"3\"\nassert solution(\"2 11 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nA, B, C = map(int, input().split())\n\nn = C // A"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\nassert solution(\"1 10 100\\n\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('2 13 4') == '2'\nassert solution('8 3 3') == '1'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n2 3 5') == '4'\n\"\"\"\n\nA, B, C = input().split(' ')\nA = int(A)\nB = int(B)\nC = int(C)\ncount = 0\nwhile (A >= 0) and (B >= 0):\n    if B > C:\n        A = A - B\n        count = count + 1\n    else:\n        B = B - C\n        count = count + 1\nprint(count)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5') == '10'\n\n---------------------------------------------\nOR\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 2) == 2\nassert solution(5, 10) == 50\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == 10\n\n'''\n\n'''\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nA, B = map(int, input().split())\nprint(A*B)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2, 5) == 10\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test1(self):\n        self.assertEqual(solution(\"2 5\"), 10)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\nprint('OK!')\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == '10'\nprint(solution('2 5'))\n\n-----\n4 5\n\n-----\n5 7\n\n-----\n3 9\n\n-----\n1 1\n\n-----\n8 8\n\n-----\n1 1\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7') == \"10\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 5 7\"\n) == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 7\\n') == '10'\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 7') == '10'\n\n\"\"\"\nimport time\nimport math"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 7\\n') == 10\nassert solution('5 5 7\\n') == 10"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == 'NG'\nassert solution('2 1\\n') == 'NG'\nassert solution('1 2\\n') == 'OK'\nassert solution('1 10\\n') == 'OK'\nassert solution('2 10\\n') == 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 500 600\\n') == 'OK'\n\n---Sample Input 0---\n7\n3 2\n\n---Sample Output 0---\nNG\n\n'''\n\nK, A, B = (int(i) for i in stdin.split())"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('567 8910\\n') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 567\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"7\\n245 342\") == \"NG\"\n\"\"\"\n\nimport math\n\nK, A, B = input().split()\nK, A, B = int(K), int(A), int(B)\n\nprint(\"OK\" if any([a % b == 0 and b % K == 0 for a in range(A, B+1) for b in range(A, B+1) if a % K == 0 and b % K == 0]) else \"NG\")"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"500 600\") == \"OK\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 567\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"6 500 600\") == \"NG\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n\nT, X = list(map(int, input().split(' ')))\nprint(T / X)"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\nassert solution(\"5 2\") == \"4.0\"\nassert solution(\"8 1\") == \"10.0\"\nassert solution(\"10 10\") == \"10.0\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 3') == '0.6666666667'\nassert solution('5 20') == '7.2913206835'\n\nprint('Success')\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\nassert solution('1 1\\n') == '1.0'\nassert solution('3 0\\n') == '1.0'\n\"\"\"\n\nimport math\n\nt, x = [float(i) for i in input().split()]\nprint(math.floor(t / x))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\nprint(solution(stdin))\n\"\"\"\nimport math\nT, X = map(int, input().split())\nprint(math.ceil(T/X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n\") == \"1.0\"\nassert solution(\"1 2\\n\") == \"0.5\"\nassert solution(\"10 10\\n\") == \"1.0\"\nassert solution(\"100 100\\n\") == \"1.0\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\nprint(T / X)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('6 4 3') == '1'\nassert solution('1 1 1') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 3') == '1'\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5') == '1'\nassert solution('1 2 3') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\") == \"2\"\nassert solution(\"6 5 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 8\") == \"1\"\nassert solution(\"10 12 5\") == \"3\"\nassert solution(\"10 12 34\") == \"2\"\n\n-----Problem-----\nThe program must read the input in the following format:\nNumber of bottles A\nThe number of milliliters of water in each bottle B\nThe number of milliliters of water in each bottle C\nThe program must then compute the number of milliliters of water remaining in bottle B, and then print this value in the format:\nnumber of milliliters remaining in bottle B\n\n-----Solution-----\n\n-----TESTING-----\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\n\nclass Test_Solution(unittest.TestCase):\n    def test_0(self):\n        with patch('sys.stdin', StringIO('3 5 8\\n')):\n            assert solution(stdin) == \"1\"\n\n    def test_1(self):\n        with patch('sys.stdin', StringIO('10 12 5\\n')):\n            assert solution(stdin) == \"3\"\n\n    def test_2(self):\n        with patch('sys.stdin', StringIO('10 12 34\\n')):\n            "
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nprint(\"Tests passed.\")\n\n-----\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"3\\n2 1 3\") == \"1\"\nassert solution(\"3\\n3 1 2\") == \"0\"\n\n---\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 2 4\\n2 4 1 3') == '3\\n'\n\n------Solution------\n\nimport numpy as np\n\nsizes = int(input())\np = np.array(input().split(), dtype=int)\nq = np.array(input().split(), dtype=int)\n\np, q = np.lexsort((p, q))\nprint(int(np.absolute(p[0] - q[0])))"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2 5 4\") == \"0\"\nassert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"3\\n2 1 3\") == \"1\"\nassert solution(\"5\\n5 4 3 2 1\") == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('4\\n1 4 2 3\\n3 1 2 4') == '4'\nassert solution('4\\n1 4 3 2\\n3 1 2 4') == '2'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '0'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"3\\n1 2 3\\n2 1 3\") == \"3\"\nassert solution(\"4\\n1 4 2\\n4 1 2\") == \"1\"\nassert solution(\"4\\n1 2 3\\n3 1 4\") == \"1\"\nassert solution(\"4\\n1 3 2\\n2 3 1\") == \"0\"\n\n\"\"\"\n\"\"\"\nSolution Approach\n\nThe number of permutations of size N is (N!) = 1 * 2 * 3 *... * N = N!\nTherefore, we can simply write a program to calculate the difference of the permutations' a-th lexicographically smallest and b-th lexicographically smallest permutations.\n\nThe process is as follows:\n1. Sort P and Q using a custom function, which is defined below.\n2. Find the first index i such that P[i]!= Q[i].\n3. Use i to calculate |a - b|.\n\nThe process can be illustrated as below:\n\n0\n2 1\n2 3\n\n0\n2 3\n2 1\n\n0\n2 1\n3 2\n\n0\n2 3\n3 2\n\n0\n3 2\n2 1\n\n0\n2 1\n3 2\n\n0\n3 2\n2 1\n\n2\n3 1\n2 3\n\n2\n1 3\n2 1\n\n2\n1 3\n3 2\n\n2\n3 1\n3 2\n\n2\n1 3\n2 3\n\n3\n1 2\n3 2\n\n3\n1 2\n2 3\n\n3\n1 2\n2 3\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"5\\n1 3 2 5 4\") == \"0\"\nassert solution(\"3\\n3 1 2\") == \"0\"\n\n-------SOLUTION-------\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ATCODER') == 3\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 'ATC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(T) == len(T)\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ATCODER') == 'ATC'\nassert solution('ATC') == 'ATC'\nassert solution('AT') == 'AT'\nassert solution('T') == 'T'\nassert solution('A') == 'A'\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == 9\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '9'\nprint(solution('11'))"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '9'\nprint(solution('11'))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == '9'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(123) == '1'\nassert solution(12345) == '0'\nassert solution(1234567) == '3'\nassert solution(123456789) == '9'\nassert solution(12345678910) == '18'\n\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '9'\nassert solution('10') == '0'\nassert solution('9') == '0'\nassert solution('8') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('c') == 'h'\nassert solution('cc') == 'cc'\nassert solution('ccc') == 'ccc'\n\nassert solution('cupofcoffee') == 'cupofhottea'\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cupofcoffee\") == \"hotteacupofcoffee\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\nassert solution(\"cupofhottea\") == \"copeofhottea\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == \"hottteea\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == 'coffee'\nassert solution('cupofhottea') == 'hottea'\n\"\"\"\n\nS = stdin.split('\\n')[0]\nT = stdin.split('\\n')[1]\n\ncount = 0\nfor i in range(len(S)):\n    if S[i] == T[i]:\n        count += 1\n\nprint(len(S) - count)"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('c') == 'h'\nassert solution('aaaa') == 'aaaa'\nassert solution('ab') == 'bb'\n\"\"\"\n\n\"\"\"\nYou have been given a string S. Find and print the number of times the following operations are required to convert the string into palindrome:\n\nDelete a character.\nReplace a character by deleting it and inserting a different character.\nReplace a character by inserting the same character.\nIf S is already a palindrome, then the operations should be 0.\n\n-----Constraints-----\n - The length of S is between 1 and 2\\times 10^5 (inclusive).\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\naxa\n\n-----Sample Output-----\n4\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n\nS = input()\nT = input()"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()\n\ninput = input.split('\\n')\n\nn = int(input[0].split(' ')[0])\nk = int(input[0].split(' ')[1])\n\nx = int(input[1])\n\nblack = []\nwhite = []\n\nfor i in range(n):\n    coordinate = int(input[i + 2])\n\n    if i == x - k:\n        white.append(coordinate)\n    elif i == x + k:\n        black.append(coordinate)\n    else:\n        if coordinate % 2 == 0:\n            black.append(coordinate)\n        else:\n            white.append(coordinate)\n\nblack.sort()\nwhite.sort()\n\nprint(*(black + white))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\nassert solution('3 2\\n') == '2 3 4 5'\n\n---Problem---\nWe want to print the coordinates of points on the number line that are either black or white. Given a number line of the form -1000000, -999999, -999998, \\ldots, 999999, 1000000, and a number K, print the coordinates of all points on the number line that are black or white, in ascending order.\n\n-----Constraints-----\n - 1 \\leq K \\leq 100\n - 0 \\leq X \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK X\n\n-----Output-----\nPrint all coordinates that are black or white, in ascending order, with spaces in between.\n\n-----Sample Input-----\n4 5\n\n-----Sample Output-----\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n2 2\n3 0\n3 1\n3 3\n4 0\n4 1\n4 4\n\nWe have four stones: the one at position 0 0 is black, and the one at position 3 3 is white. There are five possible cases:\n - The two stones at position 0 0 and 0 1 are both black.\n - The two stones at position 0 0 and 1 1 are both black.\n - The two stones at position 1 0 and 1 1 are both black.\n - The two stones at position 2 0 and 2 1 are both black.\n - The two stones at position 2 2 and 3 3 are both black.\n - The two stones at position 3 0 and 3 1 are both black.\n - The two stones at position 4 0 and 4 1 are both black.\n - The two stones at position 4 4 and 5 5 are both black.\n - The two stones at position 5 0 and 5 1 are both black.\n - The two stones at position 5 5 and 6 6 are both black.\n - The two stones at position 6 0 and 6 1 are both black.\n - The two stones at position 6 6 and 7 7 are both black.\n - The two stones at position 7 0 and 7 1 are both black.\n - The two stones at position 7 7 and 8 8 are both black.\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\n---\n### Source\n*\n\n## Solutions:\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\nimport sys\n\nK, X = map(int, sys.stdin.readline().split())\n\nprint(' '.join([str(x) for x in range(X-K+1, X+K)]))\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\nK, X = map(int, input().split())\nfor i in range(X-K+1, X+K):\n    print(i, end=\" \")\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'No'\nassert solution('10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'No'\nassert solution('-15') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25\\n') == 'No'\nassert solution('30\\n') == 'Yes'\n\"\"\"\n\nX = int(input())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'No'\nassert solution('-1') == 'No'\nassert solution('15') == 'No'\nassert solution('30') == 'Yes'\nassert solution('35') == 'Yes'\n\nSolution."
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == 'No'\nassert solution('-10') == 'No'\nassert solution('30') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'No'\n\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\nassert solution(\"35\") == \"Yes\"\nassert solution(\"-15\") == \"No\"\nassert solution(\"0\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'No'\n\nassert solution('30') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"31\") == \"Yes\"\nassert solution(\"-3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\\n3 4\") == \"2\\n\"\nassert solution(\"3 2\\n1 2\\n5 5\") == \"1\\n\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n'''\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\\n\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"3916\") == \"Bad\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"3973\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\nassert solution(\"2222\") == \"Bad\"\nassert solution(\"1221\") == \"Good\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nIf you have completed the lab, run this cell to see if the hodor output is correct.\n\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"Bad\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1344') == 'Bad'\nassert solution('3919') == 'Good'\nassert solution('7777') == 'Bad'\nassert solution('1456') == 'Good'\nassert solution('3776') == 'Bad'\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution_with_correct_input(self):\n        "
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3776\"\n) == \"Bad\"\n\nassert solution(\n    \"1234\"\n) == \"Good\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == 'Bad'\nassert solution('1289') == 'Bad'\nassert solution('1223') == 'Good'\nassert solution('1221') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"1243\") == \"Bad\"\nassert solution(\"1253\") == \"Good\"\nassert solution(\"1356\") == \"Bad\"\nassert solution(\"2453\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3277\") == \"Bad\"\nassert solution(\"3776\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\n\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1111') == 'Bad'\nassert solution('2345') == 'Bad'\nassert solution('2356') == 'Bad'\nassert solution('1234') == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3776) == \"Bad\"\nassert solution(1234) == \"Good\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == 3.5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n3 4''') == '3.5'\nassert solution('''3\n3 5 8''') == '6.5'\nassert solution('''2\n4 2''') == '3.5'\nassert solution('''3\n2 3 3''') == '2.0'\nassert solution('''4\n2 1 2 3''') == '2.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3 4') == '3.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"3\\n1 2 3\") == \"2.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4') == '3.5'\nassert solution('2\\n3 4') == '3.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 4\n''') == '3.5'\nassert solution('''\n2\n10 9\n''') == '9'\nassert solution('''\n3\n1 2 3\n''') == '2'\nassert solution('''\n3\n4 6 8\n''') == '5'\nassert solution('''\n4\n1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"14\"\nassert solution(\"3 6\") == \"22\"\n\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\n\"\"\"\n- Using the sum() function is not allowed in this problem.\n\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6') == '14'\n\"\"\"\n\nfrom typing import Dict, List, Set"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n2 5 4\n3 6''') == '14'\nassert solution('''3\n3 1 2\n2 5 4\n3 6''') == '14'\nassert solution('''2\n3 2\n3 2\n3 2''') == '9'\nassert solution('''3\n3 2\n3 2\n3 2''') == '9'\nassert solution('''4\n4 1 3\n2 2 1\n2 2 1\n2 2 1''') == '6'\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6') == '14'\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4\\n5 6 7 8\\n3\\n') == '17'\nassert solution('4\\n5 6 7 8\\n5 6 7 8\\n3\\n') == '19'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nimport collections\nimport sys\n\nN = int(sys.stdin.readline())\n\ndishes = collections.Counter(map(int, sys.stdin.readline().split()))\n\nans = 0\nfor i in range(1, N):\n    ans += dishes[i] * (dishes[i] + 1) // 2 * dishes[i - 1]\n\nprint(ans)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('a\\n b\\n') == 0\nassert solution('3\\n 1 2\\n 2 5 4\\n 3 6\\n') == 14\n'''"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\\n\") == \"14\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBABCBBBBABB\") == 4\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"10\\n\"\n    \"ABCDEBABCQ\"\n) == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ZABCDBABCQ') == 2\nassert solution('GBCCXBADCEBQ') == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(string) == result\nprint(solution(stdin))"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1A 2B 3C\") == \"AB\"\nassert solution(\"1A 2B 3C 4D 5E 6F G\") == \"ABCG\"\nassert solution(\"1A 2B 3C 4D 5E 6F G H I J\") == \"ABCGJ\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcdefg') == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nZABCDBABCQ\") == \"2\"\n\"\"\"\n\nn = int(input())\nstring = input()\n\ncount = 0\nfor i in range(0, n - 2):\n    if string[i:i+3] == \"ABC\":\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\nprint(solution(input()))\n\n-----Paste the entire code in the box below-----\n\nsolution('eDqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqAeSqA"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 ZABCDBABCQ\") == 2\n\"\"\"\n\n\"\"\"\nInput\n4\nABCD\n\nOutput\n4\n\"\"\"\n\n\"\"\"\nInput\n5\nABC\n\nOutput\n1\n\"\"\"\n\n\"\"\"\nInput\n10\nABCD\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\nprint(solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\"))\n\n\"\"\"\n\nN = int(stdin.readline())\nn = []\n\nfor i in range(N):\n    n.append(stdin.readline().strip())\n\ni = 0\ncount = 0\n\nwhile i < N:\n    if n[i][0] in ('M', 'A', 'R', 'C', 'H'):\n        if i + 1 < N:\n            if n[i + 1][0] not in n[i]:\n                if n[i + 2][0] not in n[i]:\n                    count += 1\n                    i += 3\n                else:\n                    if n[i + 1][0] not in n[i + 2]:\n                        count += 1\n                        i += 3\n                    else:\n                        i += 1\n            else:\n                i += 1\n        else:\n            if n[i + 1][0] not in n[i]:\n                if n[i + 2][0] not in n[i]:\n                    count += 1\n                    i += 3\n                else:\n                    if n[i + 1][0] not in n[i + 2]:\n                        count += 1\n                        i += 3\n                    else:\n                        i += 1\n            else:\n                i += 1\n    else:\n        i += 1\n\nprint(count)"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"MASHIKE: RUMOI, OBIRA: HABORO\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n'''\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\"\"\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2\\n1 3') == 'Yes'\nassert solution('3 3\\n1 2\\n1 3\\n1 3') == 'No'\nassert solution('3 3\\n1 2\\n1 2\\n1 2') == 'No'\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 1\\n0 2\\n0 0\\n1 1\\n2 2\\n2 2\\n2 2\\n2 2\\n3 0\\n3 1\\n3 2\\n3 2\\n3 3\\n3 3\\n4 0\\n4 0\\n4 0\\n4 0\\n4 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\n5 0\\"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 1\\n1 1\\n1 1\\n') == 'Yes'\nassert solution('3 1\\n1 1\\n1 1\\n') == 'No'\nassert solution('4 4\\n1 1\\n1 1\\n1 1\\n1 1\\n') == 'No'\nassert solution('1 1\\n1 1\\n1 1\\n1 1\\n') == 'Yes'\nassert solution('100 100\\n50 50\\n1 1\\n1 1\\n') == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n-----Explanation-----\nGiven the following input:\n3 3\n\nThe function must return the output:\nYes\n\nAs the first two test cases have all passed, so the third test case is an AC.\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n\n------Test Input-----\n5 1\n5 5\n10 10\n15 15\n20 20\n25 25\n\n------Expected Output-----\nYes\nNo\nYes\nYes\nYes\n\nInput\n4\n1 1\n2 3\n4 2\n4 4\n\nOutput\nNo\nYes\nNo\nYes\n\"\"\"\n\n\"\"\"\nThis is a dynamic programming problem.\n\nFor each test case, we are trying to decide whether there is a non-empty subsequence of a1, a2,..., an, such that when you choose some subsequence of an, you cannot choose another element of the subsequence such that the sum of the elements is larger.\n\nWe can use a dynamic programming approach to solve this problem.\n\nWe have dp[i][j] to denote whether there is a non-empty subsequence of a1, a2,..., an, such that when you choose some subsequence of an, you cannot choose another element of the subsequence such that the sum of the elements is larger. We can use a 2-dimensional table dp to record this information.\n\nIn the initialization, we set the dp[i][j] = True if j = 0, otherwise set dp[i][j] = False.\n\nThen, we iterate i from 1 to n. For each i, if j is 0, then dp[i][j] = True, otherwise we have two options:\n\nIf j is not 0, then dp[i][j] = dp[i - 1][j - 1] and if the sum of a[i - 1] + a[i] is less than or equal to j, then we set dp[i][j] = True.\n\nWe iterate j from 1 to max(a).\n\nFinally, if dp[n][j] is True, then the original subsequence is non-empty, otherwise the original subsequence is empty.\n\nTo visualize the process, we can use a 2-dimensional table dp to record whether there is a non-empty subsequence of a1, a2,..., an, such that when you choose some subsequence of an, you cannot choose another element of the subsequence such that the sum of the elements is larger.\n\nThis table can be seen as the shape of the dp[n][max(a)].\n\ndp[n][j] means whether there is a non-empty subsequence of a1, a2,..., an, such that when you choose some subsequence of an, you cannot choose another element of the subsequence such that the sum of the elements is larger.\n\ndp[n][j] = dp[n - 1][j] or (j > 0 and dp[n - 1][j - a[n - 1]])\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"5 4\") == \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 10\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"5 5\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('4 3') == 'No'\n\n---Problem 2 ---\nYou are given a string S of length N consisting of only digits 0 and 1.\n\nYou can flip any number of bits in S.\n\nFor example, flipping the first bit changes S from \"11010\" to \"10110\".\n\nYour goal is to find the minimum number of bits you need to flip to convert S to \"10101\".\n\nWrite a function:"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n3 3 3') == 'Yes'\nassert solution('4 2\\n4 2 4') == 'Yes'\nassert solution('4 2\\n1 2 4') == 'No'\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(sippuu) == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aabbcc') == 'No'\nassert solution('aabbb') == 'No'\nassert solution('abbb') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippy') == 'No'\n\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbbc\") == \"Yes\"\nassert solution(\"aabbdbc\") == \"No\"\nassert solution(\"abbccc\") == \"Yes\"\nassert solution(\"aabbdb\") == \"No\"\n\n-----------------------------------------\n\n### 3.5.1\nGiven a string, find the longest palindromic substring.\n\nYou may assume that the maximum length of the given string is 1000.\n\n### Input\n\nInput string consists of lowercase English letters only.\n\n### Output\n\nPrint the longest palindromic substring.\n\n### Sample Input\n\naabcb\n\n### Sample Output\n\naba"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"aabbcc\") == \"Yes\"\n\nprint(solution(\"sippuu\"))\nprint(solution(\"aabbcc\"))\nprint(solution(\"abca\"))\n\n\"\"\"\n\n\"\"\"\n[+]Temporal marker           : Sun, 12:13 | Feb 17, 20\n[+]Temporal marker untethered: Sun, 12:40 | Feb 17, 20\n[+]Comments                  : Knew the approach pretty easily, but I'm having trouble justifying it\n                                   in English, so I did my own analysis for the last 3 questions\n                                   and it turned out to be easier to do it this way\n                                   The 3rd and 4th characters must be equal, and the 5th and 6th characters\n                                   must also be equal.  I just have to check if both are equal, and\n                                   return \"Yes\" if it is.  Otherwise, return \"No\"\n[+]Space Complexity          : O(1)\n[+]Time Complexity           : O(1)\n[+]Level                     :\n[+]Tread Speed               :\n[+]LINK                      : https://www.interviewbit.com/problems/coffee-like\n[+] Supplement Sources       : N/A\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 70\\n7 60\\n1 80\\n4 50') == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\nassert solution('3 70\\n7 60\\n1 80\\n4 50\\n4 80\\n1 70\\n1 60\\n1 50\\n4 100') == '4'\nassert solution('2 10\\n10 10\\n1 10\\n1 10\\n1 10') == 'TLE'\nassert solution('2 10\\n10 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\nprint(\"PASS\")\n\nInput\n3 80\n1 10\n7 20\n4 40\nOutput\nTLE\nExpected Output\n'TLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == 4\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\n-----\n\n1. \u0420\u0435\u0448\u0430\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\n2. \u041f\u043e\u043d\u044f\u0442\u044c \u0432 \u0441\u0432\u043e\u0435\u0439 \u0448\u043a\u043e\u043b\u0435 \u0431\u044b\u043b \u043a\u043b\u0430\u0441\u0441 \u0432\u0435\u0447\u0435\u0440\u043e\u043c \u043d\u0430 \u0440\u0430\u0441\u0441\u043a\u0430\u0437 \u043f\u0440\u043e \u043a\u043e\u0442\u0438\u043a\u0430. \u041f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0439 \u0434\u0435\u043d\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u043b \u043d\u0430 \u0432\u0441\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043a\u043b\u0430\u0441\u0441\u0430.\n \u0418 \u043e\u043d \u0440\u0435\u0448\u0438\u043b \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043d\u0430 Python. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043b\u0435\u0436\u0430\u0449\u0435\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 5 \u0434\u043e 10 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.\nimport random"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(':\n7 60\n1 80\n4 50\n') == '4'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\nassert solution('2 10\\n1 10\\n1 1') == 'TLE'\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\nimport sys\n\nN, A, B = [int(i) for i in sys.stdin.readline().strip().split()]\n\nprint(max(N * A, N * B))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 9\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\") == 8\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9\\n') == '8'\nassert solution('4 2 5\\n') == '9'\nassert solution('3 2 4\\n') == '8'\nassert solution('3 1 2\\n') == '5'"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\n\"\"\"\n\nfrom sys import stdin\nimport math\n\na, b = map(int, stdin.readline().strip().split())\nprint(math.floor(a*b/2))\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"acornistnt\") == \"1\"\nassert solution(\"peanutbomb\") == \"1\"\nassert solution(\"constraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint\\n') == '1\\n'\nassert solution('1\\nacornistnt\\n') == '0\\n'\nassert solution('2\\npeanutbomb\\n') == '1\\n'\nassert solution('1\\npeanutbomb\\n') == '0\\n'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == 1\nprint(\"Passed\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    3\n    acornistnt\n    peanutbomb\n    constraint\n    \"\"\"\n) == '1'\n\n\"\"\"\nIn this question, you have to write functions to deal with strings.\n\nfunctions:\n\n1. anagram_of: \nGiven 2 strings, determine if the 2 strings are anagrams. Two strings are anagrams of each other if they contain the same characters in the same quantity.\n\n2. shortest_word:\nGiven a list of words, return the shortest word in the list\n\n3. longest_word:\nGiven a list of words, return the longest word in the list\n\n4. shortest_sentence:\nGiven a sentence, return the shortest sentence containing all the words.\n\n5. longest_sentence:\nGiven a sentence, return the longest sentence containing all the words.\n\n6. first_unique_char:\nGiven a string, find the first character that does not appear consecutively.\n\n7. print_words:\nGiven a list of words, print them in a reasonable layout.\n\n8. capitalize:\nGiven a string, capitalize the letters of the first word and print.\n\"\"\"\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/2d-array/problem\n\"\"\"\n\n\"\"\"\n1.2.2:\nWrite a function that computes the volume of a box. We'll say that a box is a cube if it has exactly 6 sides, and a rectangular prism if it has 4 sides. A pyramid is a special case of a rectangular prism.\n\nWrite a function that takes height and base and returns the volume.\n\nExamples\nvolume(10, 10) \u279e a cube of side 10\nvolume(15, 6) \u279e a rectangular prism of area 15 and a volume of 150\nvolume(8, 3) \u279e a pyramid of height 8 and a volume of 24\n\"\"\"\n\n\"\"\"\n1.2.3:\nWrite a function that takes a list and returns the sum of the elements of the list.\n\nExamples\nsum_elements([5, 2, 3, 4, 1]) \u279e 18\nsum_elements([7, 3, 0, 2]) \u279e 12\n\"\"\"\n\n\"\"\"\n1.2.4:\nWrite a function that takes a list of two numbers and determines if the sum of its elements is equal to another number given.\n\nExamples\nlist_sum(5, 2) \u279e True\nlist_sum(6, 2) \u279e False\nlist_sum(1, 1) \u279e True\nlist_sum(0, 2) \u279e False\n\"\"\"\n\n\"\"\"\n1.2.5:\nWrite a function that takes a list of numbers and returns the average of them.\n\nExamples\naverage([2, 3]) \u279e 2.5\naverage([5, 5, 3, 3, 2]) \u279e 3.0\n\"\"\"\n\n\"\"\"\n1.2.6:\nWrite a function that takes a list and returns a new list with unique elements of the first list.\n\nExamples\nunique([1, 2, 3, 1, 3]) \u279e [1, 2, 3]\nunique([1, 2, 3, 4, 5]) \u279e [1, 2, 3, 4, 5]\nunique([5, 5, 5, 5, 5]) \u279e [5]\n\"\"\"\n\n\"\"\"\n1.2.7:\nWrite a function that takes a list of numbers and returns the sum of the elements. If the list is empty, return 0.\n\nExamples\nsum_elements([1, 2, 3]) \u279e 6\nsum_elements([]) \u279e 0\n\"\"\"\n\n\"\"\"\n1.2.8:\nWrite a function that takes a list of numbers and returns the product of the elements. If the list is empty, return 1.\n\nExamples\nproduct([2, 3, 4]) \u279e 24\nproduct([]) \u279e 1\n\"\"\"\n\n\"\"\"\n1.2.9:\nWrite a function that takes a list of strings and returns a list of the length of those strings.\n\nExamples\nlengths([\"cat\", \"dog\"]) \u279e [3, 3]\nlengths([\"red\", \"blue\"]) \u279e [4, 2]\nlengths([\"a\", \"\"]) \u279e [1, 0]\n\"\"\"\n\n\"\"\"\n1.2.10:\nWrite a function that takes a list and returns a list with the elements reversed.\n\nExamples\nreverse_list([1, 2, 3]) \u279e [3, 2, 1]\nreverse_list([]) \u279e []\n\"\"\"\n\n\"\"\"\n1.2.11:\nWrite a function that takes a list of numbers and returns the maximum element in the list. If the list is empty, the function should return False.\n\nExamples\nfind_max([2, 3, 1, 5, 4]) \u279e 5\nfind_max([]) \u279e False\n\"\"\"\n\n\"\"\"\n1.2.12:\nWrite a function that takes a list of numbers and returns the minimum element in the list. If the list is empty, the function should return False.\n\nExamples\nfind_min([2, 3, 1, 5, 4]) \u279e 1\nfind_min([]) \u279e False\n\"\"\"\n\n\"\"\"\n1.2.13:\nWrite a function that takes a list of numbers and returns the product of the maximum and minimum elements in the list. If the list is empty, the function should return False.\n\nExamples\nmax_min([2, 3, 1, 5, 4]) \u279e 4\nmax_min([]) \u279e False\n\"\"\"\n\n\"\"\"\n1.2.14:\nWrite a function that takes a list of numbers and returns the sum of the elements that are multiples of 3. If there are no numbers that are multiples of 3, the function should return 0.\n\nExamples\nsum_multiples_of_three([4, 8, 75, 123, 220]) \u279e 88\nsum_multiples_of_three([2, 3, 12, 14, 18, 19]) \u279e 0\n\"\"\"\n\n\"\"\"\n1.2.15:\nWrite a function that takes a list of numbers and returns the sum of the elements that are multilples of 3, excluding the numbers that are multiples of 3. If there are no numbers that are multiples of 3, the function should return 0.\n\nExamples\nsum_multiples_of_three([4, 8, 75, 123, 220]) \u279e 176\nsum_multiples_of_three([2, 3, 12, 14, 18, 19]) \u279e 50\n\"\"\"\n\n\"\"\"\n1.2.16:\nWrite a function that takes a list of numbers and returns the count of the elements that appear more than once.\n\nExamples\nmore_than_once([2, 1, 3, 3, 3, 4]) \u279e 3\nmore_than_once([4, 4, 4, 4, 4]) \u279e 0\n\"\"\"\n\n\"\"\"\n1.2.17:\nWrite a function that takes a list of numbers and returns a list of the elements that are common to the list.\n\nExamples\ncommon_elements([1, 2, 3], [2, 3, 4]) \u279e [2, 3]\ncommon_elements(["
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nabcd\\nefgh\\nijkl\\nmnop\\nqrst\") == \"12\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\ncornistnt\\npeanutbomb\\nconstraint\\n') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"acornistnt\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\": acornistnt\") == 1\nassert solution(\": peanutbomb\") == 0\nassert solution(\": constraint\") == 1\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\nacornistnt\npeanutbomb\nconstraint''') == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\nassert solution(\"112123123412345$\\dots$12345671234567812345678912345678910\") == \"11212312341234512345612345671234567812345678912345678910\"\n\"\"\"\n\nq = int(input())\n\nfor _ in range(q):\n    k = int(input())\n    k_string = str(k)\n    last_string = '0' * len(k_string)\n    if k == 1:\n        print(0)\n    elif k == 2:\n        print(1)\n    else:\n        print(int(k_string[0]) + int(k_string[-1]) * len(k_string))"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n1\") == '1\\n2\\n2\\n1\\n2\\n3\\n1\\n3\\n2\\n1\\n1\\n3\\n2\\n1\\n2\\n3\\n1\\n3\\n2\\n1\\n2\\n3\\n1\\n2\\n1\\n3\\n3\\n1\\n2\\n3\\n1\\n1\\n2\\n1\\n3\\n2\\n1\\n1\\n1\\n2\\n3\\n3\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n2\\n3\\n1\\n2\\n2\\n1\\n2\\n1\\n3\\n1\\n3\\n3\\n1\\n2\\n2\\n1\\n3\\n2\\n1\\n1\\n3\\n2\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1\\n1\\n3\\n1\\n3\\n1\\n1\\n1\\n3\\n3\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n3\\n2\\n1\\n1\\n1\\n2\\n3\\n3\\n1\\n3\\n1\\n2\\n3\\n1\\n2\\n1\\n2\\n1\\n3\\n2\\n1\\n2\\n3\\n1\\n3\\n2\\n1\\n2\\n1\\n3\\n3\\n1\\n2\\n1\\n2\\n2\\n1\\n3\\n1\\n2\\n2\\n1\\n2\\n1\\n3\\n2\\n1\\n2\\n3\\n1\\n3\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n3\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n3\\n1\\n1\\n3\\n3\\n1\\n2\\n2\\n1\\n2\\n1\\n3\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n3\\n3\\n1\\n1\\n2\\n1\\n2\\n1\\n3\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n3\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n1\\n2\\n1\\n1\\n3\\n1\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n2\\n1\\n3\\n1\\n2\\n2\\n1\\n3\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n3\\n3\\n1\\n3\\n1\\n3\\n1\\n1\\n3\\n1\\n3\\n1\\n1\\n3\\n1\\n3\\n1\\n2\\n2\\n1\\n2\\n3\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '1\\n2\\n5\\n2\\n0'\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '8\\n2\\n9\\n8'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"56\") == \"0\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\nassert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\nassert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11122233344455555666666777788889999999') == '0'\nassert solution('1112223334445555566666677778888999999999') == '8'\nassert solution('11122233344455555666666777788889999999999999999') == '9'\nassert solution('111222333444555556666667777888899999999999999999') == '0'\n\nassert solution('11212312341234512345612345671234567812345678912345678910') == '8'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\n\"\"\"\n\nimport itertools\nfrom typing import List, Dict\n\nfrom icontract import require, ensure\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('112123123412345$\\dots$') == '11212312341234512345612345671234567812345678912345678910'\nassert solution('11122223333445$\\dots$') == '1112222333344512345612345671234567812345678912345678910'\nassert solution('11112222333344555$\\dots$') == '11112222333344512345612345671234567812345678912345678910'\nassert solution('11111112222333344555$\\dots$') == '11111112222333344512345612345671234567812345678912345678910'\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"112123123412345$\\dots$\"\n) == \"112123123412345\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\\n\", \"wrong result\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\\n\", \"wrong result\"\nprint(\"Test passed\\n\")\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 1\\n1 4\\n1 2') == '1\\n1 1 1'\nassert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2\\n1 2 1 1 2'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\"\nassert solution(\"8 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n5 8\\n6 7\\n7 8\") == \"1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution('4 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '1\\n1 1 2 3 2 3 1 3 1'\nassert solution('4 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '1\\n1 1 2 3 2 3 1 3 1'\n\n\"\"\"\n\nn, k = map(int, input().split())\nroads = [list(map(int, input().split())) for i in range(n - 1)]\nroads = [[roads[i][0] - 1, roads[i][1] - 1] for i in range(n - 1)]\ncosts = [set() for i in range(n)]\nfor i in range(n - 1):\n    costs[roads[i][0]].add(roads[i][1])\n    costs[roads[i][1]].add(roads[i][0])\ncounter = 0\nfor i in range(n):\n    if len(costs[i]) > k:\n        counter += 1\nprint(counter)\nfor i in range(n):\n    if len(costs[i]) > k:\n        print(i, *(costs[i]))\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1 2 1 1 2\"\nassert solution(\"5 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"1 1 2 3 2 3 1 3 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"1 1 2 3 2 3 1 3 1\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1 2 1 1 2\"\nassert solution(\"5 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 1\\n1 4\\n1 2\\n1 3') == '1\\n1 1 1'\nassert solution('5 2\\n2 4\\n3 5\\n4 5\\n4 6') == '2\\n1 1 1'\nassert solution('6 2\\n3 5\\n3 6\\n4 5\\n4 6\\n5 2\\n5 3') == '2\\n1 1 2'\nassert solution('6 2\\n3 5\\n3 6\\n4 5\\n4 6\\n5 2\\n5 3\\n6 4\\n6 7') == '2\\n1 1 1\\n1 1 2'\nassert solution('10 2\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 9\\n8 10\\n9 10\\n10 2') == '3\\n1 1 1\\n1 1 1\\n1 1 2'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n3 1\\n1 4\\n1 2\\n') == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n') == '3\\n1 1 2 3 2 3 1 3 1'\n\"\"\"\n\n\"\"\"\n// C++"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 4\\n4 3\\n3 5\\n3 6\") == \"1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3 1 1 1 2 2 2 3 3 3\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n0 2 4 4') == '2 4'\nassert solution('5\\n0 2 4 4') == '2 4'\nassert solution('5\\n0 2 4 4') == '2 4'\nassert solution('5\\n0 2 4 4') == '2 4'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n\nimport sys\nimport queue\nfrom collections import deque\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution(\n'''\n3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n\nassert solution(\n'''\n3\n1 1\n2 2\n3 3\n''') == '3 1 2'\n\nassert solution(\n'''\n3\n2 3\n3 1\n1 2\n''') == '1 2 3'\n\nassert solution(\n'''\n6\n5 5\n3 4\n1 5\n2 4\n1 6\n2 5\n''') == '3 4 1 5 2 6'"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == '1\\n2\\n3\\n4'\nassert solution('2\\n3\\n1\\n4\\n5') == '1\\n2\\n3\\n4\\n5'\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 3\") == \"1 2 3 4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\norder = []\nfor i in range(n):\n    order.append(sys.stdin.readline().split())\n\np = [None for _ in range(n)]\np[0] = int(order[0][0])\np.append(order[0][1])\n\nfor i in range(1, n):\n    next = order[i][0] if p[i - 1] == int(order[i][1]) else order[i][1]\n    p.append(next)\n\nprint(*p, sep = \"\\n\")\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 1\\n1 3') == '1 3 2 4'\nassert solution('4\\n3 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 3') == '1 2 3 4'\nassert solution('4\\n3 2\\n1 2\\n2 3\\n3 4\\n4 1\\n1 3') == '1 3 2 4'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\nassert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\n\n'''"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3\\n1 2\\n1 2\") == \"3 1 2\"\nassert solution(\"5\\n2 4\\n3 4\\n1 5\\n2 3\") == \"3 1 2 4 5\"\nassert solution(\"3\\n2 3\\n1 2\") == \"3 1 2\"\nassert solution(\"1\\n2\") == \"1 2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 1 1') == '1'\nassert solution
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 3 1 4') == '4'\nassert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('7\\n1 10 17 12 15 2') == '1'"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == '1'\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"5\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"6\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\") == '-1\\n'\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\") == '5\\n'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nimport sys\nimport os\nimport math\nfrom bisect import bisect_left"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '4 -1'\nassert solution('''15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '5'\nassert solution('''15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '2'\nassert solution('''15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '0'\n\n\"\"\"\n\nq = int(stdin.readline().strip())\n\nfor _ in range(q):\n    k, n, a, b = list(map(int, stdin.readline().strip().split()))\n    if (k + a - b) > n:\n        print(-1)\n    elif (k + a - b) <= n:\n        print(n - (k + a - b))\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\") == \"4\\n-1\\n5\\n2\\n0\\n1\\n-1\\n5\\n1\\n1\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\") == \"4\\n-1\\n5\\n2\\n0\\n1\\n-1\\n5\\n1\\n1\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\\n15 5 4 4\\n15 5 6 7\\n15 5 8 9\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\\n-1\\n5\\n1\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"8 5 3 2\\n8 5 4 3\\n8 5 2 1\\n8 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"4\\n5 4 3 2\\n5 4 3 2\\n5 4 3 2\\n5 4 3 2\") == \"0\\n-1\\n2\\n0\\n1\"\nassert solution(\"8\\n6 2 3 4 1\\n6 2 3 4 1\\n6 2 3 4 1\\n6 2 3 4 1\\n6 2 3 4 1\\n6 2 3 4 1\\n6 2 3 4 1\\n6 2 3 4 1\\n6 2 3 4 1\") == \"6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\"\nassert solution(\"1\\n1 1 1 1\") == \"1\\n1\"\nassert solution(\"5\\n2 2 4 1\\n2 2 3 1\") == \"-1\\n1\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('10 6 5 3\\n15 6 5 3\\n15 6 5 4\\n15 6 5 2\\n15 6 5 5\\n') == '-1\\n3'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a???c\") == 46\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"a???c\") == 46"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"a???c\") == 46\n\n'''"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\n\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cccbbbaaa\") == 0\nassert solution(\"ac?b?c\") == 46\nassert solution(\"a??c\") == 2835\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"a??c\") == 46\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ac?b?c\") == '24'\nassert solution(\"???????\") == '2835'\nassert solution(\"cccbbbaaa\") == '0'\nassert solution(\"a???c\") == '46'\nassert solution(\"aabbcc\") == '2'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\\n\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '17'\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 3\\n2 3 5\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2 3\\n2 3 5\") == \"5\"\nassert solution(\"4 0\\n1 2 3 4\\n1 2 8\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 3 5\\n2 3 5\") == \"5\"\nassert solution(\"2 4\\n1 3 3 7\\n2 3 5\") == \"16\"\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n\") == \"16\"\n\n\"\"\"\n\nfrom typing import List, Set\nfrom collections import defaultdict, Counter\nfrom functools import lru_cache\n\nfrom collections import deque"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\nassert solution('4 0\\n1 3 3 7') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\nassert solution(\"4 0\\n1 3 3 7\\n2 3 5\\n2 1 1\\n2 2 1\\n2 3 10\\n1 4 7\\n1 5 15\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\nassert solution('''10 1 1\n0 9\n0 5''') == '45'\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n') == '14'\nassert solution('10 1 1\\n0 9\\n0 5\\n') == '45'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\nassert solution(\"10 2 3\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\") == \"14\"\nassert solution(\"10 2 2\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\") == \"14\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\n\nassert solution('''10 1 1\n0 9\n0 5''') == '45'\n\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'\n\n\n\"\"\"\n\na, n, m = map(int, input().split())\nd = [tuple(map(int, input().split())) for _ in range(n)]\nw = [tuple(map(int, input().split())) for _ in range(m)]\nl = r = 0\nf = 0\nfor x, p in w:\n    if x >= r:\n        if r < a:\n            r += 1\n            l = r\n            f += p\n        elif x == a:\n            f += p\n        else:\n            f += p\n            r += 1\n            l = r\n    elif x < r:\n        if x == l:\n            f += p\n            r += 1\n            l = r\n        elif x < a:\n            f += p\n            r += 1\n            l = r\n        else:\n            f += p\n            l += 1\n            r = l\nprint(f)\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 7 9\") == \"No\"\nassert solution(\"4 5 5\") == \"No\"\nassert solution(\"2 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'5 7 5'\n) == 'Yes'\nassert solution(\n'5 7 6'\n) == 'No'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == 'No'\nassert solution(\"1 2 1\") == 'Yes'\nassert solution(\"1 2 1\") == 'Yes'\nassert solution(\"1 2 3\") == 'No'\nassert solution(\"1 2 2\") == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('5 5 7') == 'No'\nassert solution('5 5 5') == 'No'\n\n\"\"\"\n\nA, B, C = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"2 5 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 5\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2\\n12 5\\n1000 2000') == '1'\nprint(\"Test finished.\")\n\"\"\"\n\nn = int(input())\nT = int(input())\nA = int(input())\nH = map(int, input().split())\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n\nN = int(input())\nt = int(input())\na = int(input())\nh = list(map(int, input().split()))\n\nt_c = t * 0.006\nmin_diff = a + 1\n\nfor i in range(N):\n    t_h = h[i] * 0.006\n    if abs(t_h - t_c) < min_diff:\n        min_diff = abs(t_h - t_c)\n        index = i\n    elif abs(t_h - t_c) == min_diff:\n        index = \"?\"\n\nprint(index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n12 5\\n1000 2000\") == \"1\"\nprint(\"Test 1 OK\")\n\nassert solution(\"3\\n20 40\\n-1 5 1\") == \"0\"\nprint(\"Test 2 OK\")\n\nassert solution(\"8\\n5 10\\n1 20 50 100 500 1000\") == \"2\"\nprint(\"Test 3 OK\")\n\nassert solution(\"2\\n0 1\\n1 0\") == \"0\"\nprint(\"Test 4 OK\")\n\nassert solution(\"3\\n0 1 1\\n-1 1 0\") == \"1\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n1\n5 21\n10 20 30 40 50\n''') == '1'\nassert solution('''\n1\n20 21\n10 20 30 40 50\n''') == '0'\n'''\nYou are given an array of length N, where each element is a string.\nEvery string is the name of a girl.\nYou are also given an array of length N, where each element is the height of the girl.\nFor example, if the i-th element of the array is \"Alice\", and the i-th element of the heights array is \"122\", then the i-th girl's height is 122 cm.\nThe relationship between a girl's name and her height is as follows:\nThere is a unique girl (that is, there is only one girl with a given name) for each name in the input array.\nIt is guaranteed that there is at least one girl that is in love.\nThe girl that is in love will be the one with the shortest height (in absolute value).\nThe girl that is not in love will be the one with the longest height (in absolute value).\nIf two or more girls have the same height, they do not necessarily have the same name.\nYou must write a function that returns the name of the girl that is in love, or the empty string if there is no girl that is in love.\nThe name and height of a girl are as follows:\nName (string)\nHeight (integer)\n\nExample:\ngirls [['Alice', 120],\n['Bob', 110],\n['Carol', 130]]\nn = 2\n\nThe first girl is in love, and her name is \"Bob\" and her height is 110 cm.\nThe second girl is not in love and her name is \"Carol\" and her height is 130 cm.\nReturn [\"Alice\", \"Bob\"]\nThe girl that is not in love is Carol, and her height is 130 cm.\n\nNote:\nN is an integer within the range [1, 1000]\ninclusive.\nAll heights are positive integers, within the range [1, 10^5] inclusive.\nThere is at least one girl that is in love.\n'''"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 12 5 1000 2000\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 12 1000 2000\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 12 5 1000 2000\") == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n12 5\\n1000 2000\\n') == '1'\n\n-------TESTING-------\n\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') == '2'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''1\n12 5\n1000 2000\n''') == '1'\nsolution(stdin='''2\n12 5\n1000 2000\n''') =="
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n1 2 3\") == '1'\nassert solution(\"4 5\\n1 1 1 1\") == '0'\n\"\"\"\n\nn = int(input())\nt, a = list(map(float, input().split()))\nh = list(map(float, input().split()))\n\ntemp = []\nfor i in range(n):\n    temp.append(t - h[i] * 0.006)\n\ntemp.sort()\n\nfor i in range(n):\n    if temp[i] == a:\n        print(i + 1)\n        break\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == '1'\nassert solution('2 3\\n') == '0'\nassert solution('1 2\\n') == '1'\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import product\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom math import factorial\nfrom itertools import combinations"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\n\"\"\"\nProblem Description\n\nGiven two integers N and M.\n\nLet X be an array of N integers, where the ith element represents number of balls having ith digit set.\n\nNow, we may choose any two balls, and remove them from the array, such that the number of digits set in the two balls chosen equals to some value Y (Y < N).\n\nFind the number of ways such that Y = 2.\n\nSince the answer may be very large, take modulo 109 + 7.\n\n\n\nProblem Constraints\n1 <= N <= 10^5\n\n1 <= M <= N\n\n\n\nInput Format\nFirst argument is an integer N.\n\nSecond argument is an integer M.\n\n\n\nOutput Format\nReturn a single integer denoting the number of ways to choose two balls from the given array such that number of digits set is 2.\n\n\n\nExample Input\nInput 1:\n\n N = 2\n M = 1\nInput 2:\n\n N = 3\n M = 2\n\n\nExample Output\nOutput 1:\n\n 1\nOutput 2:\n\n 3\n\n\nExample Explanation\nExplanation 1:\n\n The two possible choices are:\n - (1,2), where the number of set digits is 1.\n - (2,1), where the number of set digits is 1.\nExplanation 2:\n\n The three possible choices are:\n - (1,2,1), where the number of set digits is 2.\n - (2,1,1), where the number of set digits is 2.\n - (1,3,1), where the number of set digits is 2.\n\"\"\"\n\n\nclass Solution:\n    # @param A : integer\n    # @param B : integer\n    # @return an integer\n    def solve(self, N, M):\n        ans = 0\n        mod = 10 ** 9 + 7\n        for i in range(N):\n            for j in range(i + 1, N):\n                if sum(int(c) for c in str(i)) + sum(int(c) for c in str(j)) == M:\n                    ans += 1\n        return ans % mod\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '1'\nassert solution('3 2') == '0'\nassert solution('2 2') == '0'\nassert solution('4 1') == '2'\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 3, 5) == 0\nassert solution(\"ACACTACG\", 3, 6) == 3\n\nprint('Successfully solved!')"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CCCCC\") == \"0\"\nassert solution(\"CACCCCC\") == \"8\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\n\nassert solution(\"ATCODER\") == \"5\"\n\nassert solution(\"AT\") == \"1\"\n\nassert solution(\"A\") == \"0\"\n\nassert solution(\"AA\") == \"2\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ACTACG\") == \"0\"\nassert solution(\"GATTACA\") == \"3\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 2, 3) == 0\nassert solution(\"ACACTACG\", 1, 8) == 3\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ACACTACG\") == 2\nassert solution(\"TTTTTTTTTT\") == 0\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(ACACTACG) == 2\nassert solution(ATCODER) == 3\nassert solution(CODERATC) == 0"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACACTACG') == 2\nassert solution('CATC') == 0\nassert solution('CCTACTA') == 3\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ATCODER\") == \"5\"\nassert solution(\"ATCODER\") == \"5\"\nassert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ATCODER\") == \"5\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('AC') == '1'\nassert solution('A') == '0'\nassert solution('AACT') == '2'\nassert solution('ACACTACG') == '3'\n\"\"\"\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\nprint(solution(stdin))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n50 100 80 120 80\n''') == '210'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\"\"\"\n\nn, k = input().split()"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\n------\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sample_input) == 210\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nprint(\"Test pass.\")"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"15\"\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nprice = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\n\nassert solution('10 10 10') == '18'\n\nassert solution('100 100 100') == '300'\n\nassert solution('1 1 1') == '0'\n\nassert solution('2 2 2') == '4'"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"7 6 9\") == \"9\"\nassert solution(\"1 2 1\") == \"3\"\nassert solution(\"3 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 5 3\") == \"8\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"2 5 6\") == \"10\"\nassert solution(\"3 2 5\") == \"8\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom collections import defaultdict\n\nINPUT_LINES = 3\nEXPECTED_LINES = 1\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == '4'\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\nassert solution(\"1 3 4\") == \"4\"\n\nassert solution(\"9 8 7\") == \"14\"\n\nassert solution(\"9 9 9\") == \"18\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == '4'\n\n'''"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nprint(\"PASSED\")\n\n\"\"\"\n\n\"\"\"\nA B C P Q R\n1 3 4\n4 3 2\n1 2 1\n3 4 4\n2 3 5\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\nfrom __future__ import print_function\n\nimport sys"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n') == '0'\n\nassert solution('4 4\\n') == '10'\n\nassert solution('4 10\\n') == '10'\n\nassert solution('5 10\\n') == '0'\n\"\"\"\n\n\"\"\"\nSolution:\n\n(line 1):\n\n(line 2):\n    num_one, num_two = stdin.split()\n    num_one, num_two = int(num_one), int(num_two)\n    if num_one < num_two:\n        print(0)\n    else:\n        print(10)\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 1') == '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123) == \"0\"\nassert solution(12345) == \"10\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == \"0\"\nprint(solution(3))"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5''') == '''0'''\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"7 4\"\n) == \"1\"\n\"\"\"\n\nN, K = [int(s) for s in stdin.split(\" \")]\nprint(abs(N - K))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4') == '1'\nassert solution('1 1') == '0'\n\"\"\"\n\nimport sys\n\nN, K = input().split()\n\nN = int(N)\nK = int(K)\n\ndiff = N - K"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"1\"\n\n---------------------------------\n\nimport math\n\nN, K = map(int, input().split())"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\") == \"1\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\") == \"1\"\n\nprint(solution(\"7 4\"))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7 4''') == '1'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 7 9''') == 'win'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n\nimport sys\n\na = sys.stdin.read().split()"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">=22\") == \"bust\"\nassert solution(\"<=21\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 3 5') == 'bust'\nassert solution('1 2 1') == 'bust'\nassert solution('5 7 7') == 'bust'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('3 5 7') == 'bust'\n\n\"\"\"\n\nA_1, A_2, A_3 = list(map(int, stdin.split(' ')))"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 9\\n') == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"2 4 6\") == \"bust\"\nassert solution(\"3 3 3\") == \"bust\"\nassert solution(\"20 21 22\") == \"bust\"\nassert solution(\"13 14 15\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'5 7 9'\n) == 'win'\nassert solution(\n'5 7 5'\n) == 'bust'\n\"\"\"\n\nimport stdio"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 9') == 'win'\n\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\nInput:\n5 7 9\n\nOutput:\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\nConstraints:\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\nInput:\n5 7 9\n\nOutput:\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\nA1, A2, A3 = map(int, input().split())\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 6\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '6'\nassert solution('7') == '14'\n\nimport unittest\nclass TestDivisibility(unittest.TestCase):\n    def test_case_0(self):\n        assert solution('6') == '6'\n    def test_case_1(self):\n        assert solution('7') == '14'"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 6\nassert solution(5) == 10\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\n\"\"\"\n3\n\"\"\"\n\n\"\"\"\n6\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '2'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '10'\nassert solution('2') == '4'\nassert solution('6') == '6'\nassert solution('4') == '8'\nassert solution('1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\n\"\"\"\n\nTest.assert_equals(solution(\"3\"), \"6\")\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 2\n''') == '2'\nprint(solution(stdin), end='')\n\n---------------------"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2') == 2\n\"\"\"\n\nimport sys\n\nT = sys.stdin.readlines()\nN, D = [int(line.strip()) for line in T]\nprint(N - D + 1)\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n\") == \"2\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n\") == \"1\"\n\n-----Explanation-----\nN = 2 and D = 3\nTree 1 is inspected by an inspector on Tree 3 and Tree 4.\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n') == 2\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('16') == 'pon'\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == 'pon'\nassert solution('9') == 'bon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"18\") == \"bon\"\n\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == 'pon'\nassert solution('54') == 'bon'\nassert solution('123') == 'hon'\nassert solution('101') == 'hon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == 'pon'\n\n-------"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"21\") == \"hon\"\nassert solution(\"42\") == \"bon\"\n\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"0\") == \"hon\"\nassert solution(\"13\") == \"hon\"\nassert solution(\"123\") == \"bon\"\n\n-----\n\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n\") == 11\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n3 1 2') == '11'"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == 11\nassert solution('2 2 1') == 6\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\\n\") == 11\n\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\ntakoyaki = [int(x) for x in sys.stdin.readline().split()]\n\nans = 0\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        ans += takoyaki[i] * takoyaki[j]\n\nprint(ans)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == 11\n\"\"\"\n\nimport sys\nfrom math import factorial\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\ntotal = 0\n\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        total += factorial(N) // (factorial(i) * factorial(N - i - 1)) * (d[i] * d[j])\n\nprint(total)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3''') == '11'\n\n\"\"\"\nimport os\nfrom io import StringIO\nfrom unittest.mock import patch\nfrom typing import Any\n\nFILE_DIR = os.path.dirname(os.path.abspath(__file__))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\nassert solution(\"3 1 2\\n3 1 2\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1\") == \"4\\n3\\n4\"\nassert solution(\"6\\n5\\n1\\n2\\n2\\n3\\n2\") == \"6\\n5\\n3\\n2\\n2\\n3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('5\\n1\\n4\\n3\\n3\\n4') == '4\\n3\\n4\\n3\\n4'\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n4\\n3\\n5\\n2\\n1\\n2\\n3\\n4\\n2\\n4\\n5\\n1\\n2\\n3\\n4\\n5') == '3\\n4\\n4\\n4\\n4\\n3\\n3\\n4\\n5\\n4\\n5\\n5\\n4\\n5\\n5\\n3\\n3\\n3\\n4\\n5'"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n4\\n3\") == '4\\n3\\n4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\n\"\"\"\n\n\n\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1\n4\n3\n\"\"\") == \"\"\"\n4\n3\n4\n\"\"\"\n\nprint(solution(\"\"\"\n3\n1\n4\n3\n\"\"\"))\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1\n4\n3''') == '4\\n3\\n4'\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N\\nA_1\\n:') == ''\nassert solution('N\\nA_1\\n4\\n3') == '4'\nassert solution('N\\nA_1\\n3\\n4') == '3'\nassert solution('N\\nA_1\\n4\\n3\\n5') == '4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n1\\n4\\n3\\n'\n) == '4\\n3\\n4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3''') == '9'\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', ['a', 'b'])\n\nlines = []\nfor line in sys.stdin.readlines():\n    lines.append(line.strip())\n\na, b = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\nprint(a * b)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 7\") == \"7\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"7 20\") == \"19\"\nassert solution(\"2 1\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\nimport sys\n\nwhile True:\n    input_list = list(map(int, sys.stdin.readline().split()))\n    if input_list == [0, 0]:\n        break\n    elif input_list == [0, 1]:\n        print(0)\n    else:\n        print(input_list[0] * 2 + input_list[1])\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3') == '9'\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 3\n\"\"\") == \"9\"\n\n\"\"\"\nExplanation:\nYou can get 5 + 4 = 9 coins by pressing the button of size 5 twice.\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3') == '9'\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\npositions = list(map(int, stdin.readline().split()))\n\ncurrent = 0\ncount = 0\nwhile K > 0:\n    while True:\n        current += 1\n        if current == N:\n            break\n        if current in positions:\n            break\n    K -= 1\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\n\n-------\nSample Input 1:\n\n3 1\n1 2 3\nSample Output 1:\n\n6\n\n-------\nSample Input 2:\n\n3 1\n3 4 5\nSample Output 2:\n\n4\n\n-------\nSample Input 3:\n\n4 1\n-1 -2 -3 -4\nSample Output 3:\n\n-1\n\n-------\nSample Input 4:\n\n3 1\n-1 0 1\nSample Output 4:\n\n2\n\n-------\nSample Input 5:\n\n5 1\n0 0 0 0 1\nSample Output 5:\n\n1\n\n-------\n\"\"\"\n\nN, K = [int(s) for s in input().split()]\ndata = [int(s) for s in input().split()]"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4') == '10'\nassert solution('4 4\\n1 1 2 3') == '0'\nassert solution('6 3\\n1 1 1 2 2 2') == '8'\nassert solution('7 4\\n1 1 1 1 2 2 2') == '8'\nassert solution('7 4\\n1 1 1 1 1 2 2 2') == '8'\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n-30 -10 10 20 50\n''') == '40'\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nimport unittest\nfrom math import inf\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n-30 -10 10 20 50\") == \"40\"\nprint(\"Test Completed\")\n\n\"\"\"\n\nfrom collections import deque\n\n\"\"\"\n\u0415\u0441\u043b\u0438 \u0434\u0432\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0440\u0430\u0432\u043d\u044b \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f\n\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\n\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442 \u0438\u043d\u0430\u0447\u0435\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n-3 -1 0 1\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\n-----\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"8 13\"\n) == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 13') == 2\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n3 4\") == \"2\"\nassert solution(\"1 2\\n3 5\") == \"3\"\nassert solution(\"1 5\\n3 4\") == \"1\"\nassert solution(\"1 3\\n3 4\") == \"0\"\nassert solution(\"1 2\\n3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 13\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(b-a)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n8 13\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n10 10\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n100 1\n\"\"\") == \"100\"\n\nassert solution(\n\"\"\"\n1 2\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n100 100\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '1'\nassert solution('8 13') == '2'\nassert solution('8 5') == '3'\n\"\"\"\n\nfrom math import ceil\n\na, b = map(int, input().split())\n\nc = ceil((b - a) / 2)"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 13\") == 2\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == 3\nassert solution(\"6 6\") == 1\nassert solution(\"1 10\") == 0\nassert solution(\"6 9\") == 1\nassert solution(\"2 3\") == 1\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"100 10\") == \"7\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 4') == 3\nassert solution('10 4') == 3\nassert solution('10 4') == 3\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n\") == \"3\"\nassert solution(\"100 4\\n\") == \"3\"\nassert solution(\"100 4\\n\") == \"3\"\nassert solution(\"1000 4\\n\") == \"3\"\nassert solution(\"1000 4\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10 4) == 3\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4\\n') == '3'\nassert solution('1 1\\n') == '1'\nassert solution('7 1\\n') == '2'\nassert solution('10 8\\n') == '3'\nassert solution('3 2\\n') == '1'\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(\"Test passed.\")\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"100 5\") == \"0\"\n\"\"\"\n\nH, A = map(int, input().split())\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\nprint(solution(\"0 75 25 100\"))\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 101''') == '51'\n\"\"\"\n\n\"\"\"\nI had a really difficult problem in my solution in the past, so I wanted to be able to test my solution more easily.\n\nYour solution should pass the following tests:\n\nassert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 101''') == '51'\n\"\"\"\n\nimport os, sys, inspect\nfrom io import StringIO\nfrom contextlib import redirect_stdout"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 100\") == \"50\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0 75 25 100''') == '50'\n\nprint(solution(stdin))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\n\"\"\"\nA B C D\n0 75 25 100\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 75 25 100\") == \"50\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 75 25 100') == '50'\n\nprint(solution('0 75 25 100'))\n\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 75 25 100''') == '50'\nprint('Test finished.')"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\u201c0 75 25 100\u201d) == \u201c50\u201d\n\"\"\"\n\n\"\"\"\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('105') == '1'\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"105\") == 1\n\n\"\"\"\nimport math"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(105) == 1\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\ncount = 0\nfor i in range(1, n + 1):\n    if (i % 2 == 1) and (sum(map(lambda x: x % 2, range(1, i + 1))) == 8):\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('105') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('105') == 1\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"105\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('105') == '1'\nassert solution('50') == '0'\nassert solution('1') == '1'\nassert solution('101') == '2'\nassert solution('102') == '0'\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(105) == 1\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n2 1\\n2 2\\n2 3\") == \"1\"\n\"\"\"\n\nimport sys\n\n_, n, k = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\n\n-------------\nn, k = map(int, stdin.readline().split())"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\nassert solution('7 3\\n4 5 6') == '2'\n\"\"\"\n\n\"\"\"\n7 3\n2 2 3\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"5 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\nmin_diff = n\nmax_cnt = 0\nmin_cnt = 0\n\nfor i in range(n):\n    cnt = int(input())\n    if cnt < min_cnt:\n        min_cnt = cnt\n    if cnt > max_cnt:\n        max_cnt = cnt\n\nfor i in range(k):\n    cnt = int(input())\n    if cnt < min_cnt:\n        min_cnt = cnt\n    if cnt > max_cnt:\n        max_cnt = cnt\n\ndiff = max_cnt - min_cnt\nmin_diff = min(diff, min_diff)\n\nprint(min_diff)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n') == '1'\nassert solution('12 5\\n') == '5'\nassert solution('19 1\\n') == '18'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\n\"\"\"\nProblem:\nYou want to distribute n AtCoder Crackers to k AtCoder Takahashi users.\nWhen all the crackers are distributed, what is the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user?\n\nInput:\nFirst line contains two integers n and k, number of AtCoder Crackers and number of users.\n\nOutput:\nPrint a single integer denoting the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n\nExample:\nInput:\n3 3\n\nOutput:\n1\n\nHere the minimum possible difference is 1.\n\"\"\"\n\n\"\"\"\nSolution:\nIn the problem, the number of AtCoder Crackers is integer.\nWe can take a range of integers from 1 to n.\nEach AtCoder Takahashi user can get at most n/k of the crackers.\nThe number of crackers is n = k * n / k.\nThe difference between the largest number of crackers and the smallest number of crackers is n - n/k.\nIn this way, we can use binary search to find the minimum possible (absolute) difference between the largest number of crackers and the smallest number of crackers.\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == '1'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\nprint(solution(\"111\"))\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == '111'\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\"\n\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('111') == '111'\n\n--------------------------------\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"118\") == \"120\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('1 6 3') == '5'\nassert solution('1 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('0 6 3') == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nnums = [int(x) for x in stdin.split()]\n\nans = 0\n\nfor i in range(1, len(nums)):\n    ans += abs(nums[i - 1] - nums[i])\n\nprint(ans)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nfrom __future__ import print_function\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == 5\n\"\"\"\n\n\"\"\"\n-------SOLUTION-------\n\nfrom collections import Counter"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == '5'\nassert solution(\"1 6 3\") == '5'\nassert solution(\"2 6 3\") == '5'\nassert solution(\"7 6 3\") == '15'\nassert solution(\"100 6 3\") == '15'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6 3') == '5'\nprint(solution(input()))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 6 3') == '5'\nprint(solution(stdin), end=\"\")\n\n----"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\") == \"5\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(8) == 5\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\n\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(8) == 5\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 10 11\") == \"Yes\"\n\n\"\"\"\nfrom operator import add"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 10 10 10\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\nassert solution(\"100 100 100 100\") == \"No\"\nassert solution(\"1 2 2 2\") == \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"100 100 100 100\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nprint('Hooray!')\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('1 1 1 1') == 'No'\nassert solution('10 1 10 1') == 'Yes'\nassert solution('1 1 1 10') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"100 100 100 100\") == \"Yes\"\nassert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"100 100 100 1000\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 0 0 0\") == \"Yes\"\n\n'''"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('10 9 10 10') == 'No'\nassert solution('10 10 9 10') == 'No'\nassert solution('10 9 10 10') == 'Yes'\nassert solution('10 9 10 10') == 'Yes'\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test1) == \"No\"\nassert solution(test2) == \"Yes\"\nassert solution(test3) == \"No\"\nassert solution(test4) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '3'\nassert solution('5\\n5 1 3 2 4') == '6'\nassert solution('5\\n5 10 4 2 3') == '6'\n\"\"\"\n\nimport sys\n\n_, *data = sys.stdin.read().splitlines()\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\n\"\"\"\nWrite a Python program to get the number of occurrences of a specified element in an array.\n\nNote: The array will contain numbers with a range from 1 to 20.\n\n-----Constraints-----\n1 \\leq N \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n1 2 3 4 5... 20\n\n-----Output-----\nPrint the number of occurrences of the element in the array.\n\n-----Sample Input-----\n5\n1 3 1 4 1\n\n-----Sample Output-----\n3\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n10 2 5\n6 3 4''') == '5'\nassert solution('''3\n20 5 20\n5 2 10''') == '15'\n\n-----\n5\n10 2 5\n6 3 4\n'''\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6 5 4\\n1 1 1') == '9'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\n\"\"\"\nOptimized solution:\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == 5\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4 4\n##.#\n....\n##.#\n.#.#\"\"\") == \"\"\"###\n###\n.##\n\"\"\"\n\nassert solution(\"\"\"6 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n#.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n#.#\\n#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n.##\\n....\\n.##\\n#.#\") == \"###\\n###\\n.##\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '''###\n###\n.##'''\n\nassert solution('''4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#.\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n##.#\\n#.#.\") == \"###\\n###\\n.##\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n#.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\n\"\"\"\n\nimport unittest\nimport os\nimport random"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n\nassert solution('4 4\\n..#\\n#..\\n##\\n.#\\n') == '..#\\n.#..\\n##\\n.##\\n'\n\nassert solution('4 4\\n..#\\n#..\\n##\\n.#\\n') == '..#\\n.##\\n.##\\n.##\\n'\n\nassert solution('2 2\\n##\\n#.') == '##\\n#.'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\n\"\"\"\n\nimport sys\nimport functools\n\nH, W = map(int, sys.stdin.readline().strip().split())\ngrid = []\nfor _ in range(H):\n    grid.append(list(sys.stdin.readline().strip()))"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\n'''\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"2\") == \"12.566370614359172953850\"\nassert solution(\"3\") == \"19.64404325993451463645\"\nassert solution(\"4\") == \"31.4159265358979323846264\"\n\"\"\"\nimport math\n\nR = int(input())\n\nprint(\"%.2f\" % (2 * math.pi * R))"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '6.2831853071795862'\n\"\"\"\n\nimport sys\n\nR = int(sys.stdin.readline().rstrip('\\n'))\nprint(round(2*3.14159265358979323846*R, 2))\n\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_expected\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('2') == '4.71238898038469'\nassert solution('3') == '5.084378176281505'\nassert solution('4') == '7.853981633974483'\nassert solution('5') == '9.42477796076938'\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '6.28318530717958623200'\nassert solution('2') == '12.566370614359172'\nassert solution('10') == '62.831853071795862'\nassert solution('100') == '6279.27'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\n\nR = input()\n\nprint(3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771341758208896371867321616933298311544630257272349698768477640694706637231165145635187292364413222822083564727476501143738978811092346424965942292044010232341185235923629236198253424642623949696899232445123258446253324028890492564110824339729171410460718576694853\nprint(int(R) * 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771341758208896371867321616933298311544630257272349698768477640694706637231165145635187292364413222822083564727476501143738978811092346424965942292044010232341185235923629236198253424642623949696899232445123258446253324028890492564110824339729171410460718576694853)"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ASSA') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"SSAA\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ASSS\") == 'Yes'\nassert solution(\"ASSA\") == 'Yes'\nassert solution(\"ASCC\") == 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ASSA') == \"Yes\"\nassert solution('AASS') == \"Yes\"\nassert solution('AAAS') == \"Yes\"\nassert solution('AAAA') == \"Yes\"\nassert solution('AAAAA') == \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('ASS') == 'No'\nassert solution('AAAA') == 'Yes'\nassert solution('AAAB') == 'No'\nassert solution('AAAA') == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('SSA') == 'Yes'\nassert solution('SSSS') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('ASDF') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ASKS\") == \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 3\") == \"6\"\nassert solution(\"-4 -1\") == \"-9\"\nassert solution(\"0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 3') == '-10'\nassert solution('-13 3') == '-10'\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"2 3\") == \"5\"\n\"\"\"\n\nA, B = map(int, input().split())\nprint(max(A + B, A - B, A * B))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-13 3\\n') == '-10'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-13 3') == '-10'\nprint('Passed')\n\n\"\"\"\n\"\"\"\nYou have just entered the world's easiest maze. You start in the northwest cell of an N by N grid of unit cells,\nand you must reach the southeast cell. You have only two types of moves available: a unit move to the east,\nand a unit move to the south. You can move into any cell, but you may not make a move that would cause you to leave the grid.\n\nYou are in the top-left cell (0,0), which is always open, so move north takes you one cell north,\nor south takes you one cell south.\n\nIn order for you to leave the grid, you must travel in one of the four cardinal directions.\nIn how many ways can you travel to the southeast cell (N,N) from the top-left corner (0,0) of a grid with dimensions N*N?\n\nInput Format\n\nThe first line of input contains an integer, T, the number of test cases.\nEach of the T subsequent lines contains an integer, N, the number of rows and columns in the grid.\n\nConstraints\n\n- 20 \\leq N \\leq 20\n\nOutput Format\n\nFor each test case, print the number of ways to reach the southeast cell (N,N) from the top-left corner (0,0) of a grid with dimensions N*N.\n\nSample Input 0\n\n2\n2\n3\nSample Output 0\n\n2\n6\nExplanation 0\n\nThe size of the grid, N, is as follows:\n\nGrid Size    Number of Ways\n2 x 2        2\n2 x 3        3\n3 x 2        6\n3 x 3        9\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\nprint(solution(\"-13 3\"))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\n-----Overview-----\nSort the heights and iterate through them from the left and right.\nIf we see the ocean, increase the count of the oceans by 1.\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6 5 6 8\\n') == '3'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\nimport sys"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6 5 6 8') == 3\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 6 8\\n\") == \"3\"\n\"\"\"\n\nn = int(input())\nmountains = list(map(int, input().split()))\n\ncount = 0\n\nfor m in mountains:\n    if m > max(mountains[:n]):\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '3'\nassert solution('1\\n2\\n3\\n4') == '4'\nassert solution('1\\n2\\n3\\n4\\n5') == '5'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7\\n1 2 3 1 2 3 4'\n) == '2\\n3 4'\n\nassert solution(\n    '4\\n1 1 1 1'\n) == '4\\n1 1 1 1'\n\nassert solution(\n    '5\\n1 2 1 2 1'\n) == '1\\n5'\n\nprint('Success')"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n1 1 1 1'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n2 2 1'\n\na = input()\nb = input()\nassert solution(a) == b"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(    \"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(    \"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\nassert solution(    \"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\n\nprint(\"Passed.\")\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n2 2 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n2 2 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n2 2 1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == '1 2 3 1 2 3 4'"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 1\nassert solution(6) == 2\nassert solution(7) == 1\nassert solution(21) == 7\nassert solution(28) == 4\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n21\\n28\\n999999999\\n999999984') == '3\\n2\\n1\\n7\\n4\\n333333333\\n333333328'\nassert solution('7\\n6\\n7\\n21\\n28\\n999999999\\n999999984') == '1\\n2\\n1\\n7\\n4\\n333333333\\n333333328'\nassert solution('3\\n5\\n7\\n13\\n17') == '1\\n2\\n1\\n7\\n4'\nassert solution('1\\n3\\n5\\n7\\n11\\n13\\n17') == '2\\n2\\n1\\n7\\n4\\n333333333\\n333333333'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3\") == \"1\"\nassert solution(\"5\\n11\") == \"3\"\nassert solution(\"7\\n999999999\") == \"999999999\"\nassert solution(\"7\\n999999984\") == \"999999999\"\nassert solution(\"7\\n999999998\") == \"999999998\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '4'\nassert solution('7\\n28') == '3'\nassert solution('999999999\\n999999984') == '33333333'\nassert solution('999999999\\n999999984') == '333333328'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('2\\n6') == '2'\nassert solution('3\\n7') == '1'\nassert solution('4\\n21') == '7'\nassert solution('5\\n28') == '4'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '4'\nassert solution('999999999\\n999999984') == '33333333'\nassert solution('999999999\\n999999984') == '333333328'\n\n---"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '2'\nassert solution('9\\n999999999') == '7'\nassert solution('1\\n999999984') == '1'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '7'\nassert solution('999999999\\n999999984') == '333333333'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3\") == \"1\"\nassert solution(\"7\\n3\") == \"2\"\nassert solution(\"21\\n3\") == \"1\"\nassert solution(\"28\\n3\") == \"7\"\nassert solution(\"999999999\\n3\") == \"333333333\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == '1'\nassert solution(6) == '2'\nassert solution(7) == '1'\nassert solution(21) == '7'\nassert solution(28) == '4'\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Iterable\nfrom collections import defaultdict\nfrom copy import deepcopy\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == '1\\n2\\n3\\n4'\nassert solution('1\\n5\\n7\\n9\\n10') == '1\\n6\\n5\\n4\\n3'\nassert solution('1\\n5\\n7\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\n'''\nfrom numpy import arange"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n---Problem---\n\nLittle girl Tanya is learning how to decrease a number by one, but she does it wrong with a number consisting of two or more digits. Tanya subtracts one from a number by the following algorithm:  if the last digit of the number is non-zero, she decreases the number by one;  if the last digit of the number is zero, she divides the number by 10 (i.e. removes the last digit). \n\nYou are given an integer number $n$. Tanya will subtract one from it $k$ times. Your task is to print the result after all $k$ subtractions.\n\nIt is guaranteed that the result will be positive integer number.\n\n\n-----Input-----\n\nThe first line of the input contains two integer numbers $n$ and $k$ ($2 \\le n \\le 10^9$, $1 \\le k \\le 50$) \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.\n\n\n-----Output-----\n\nPrint one integer number \u2014 the result of the decreasing $n$ by one $k$ times.\n\nIt is guaranteed that the result will be positive integer number. \n\n\n-----Examples-----\nInput\n512 4\n\nOutput\n50\n\nInput\n1000000000 9\n\nOutput\n1\n\n\n\n-----Note-----\n\nThe first example corresponds to the following sequence: $512 \\rightarrow 511 \\rightarrow 510 \\rightarrow 51 \\rightarrow 50$."
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(512)) == '511'\nassert solution(str(1000000000)) == '1'\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\nwhile k:\n    if n % 10:\n        n -= 1\n    else:\n        n //= 10\n    k -= 1\n\nprint(n)\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n5 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n4 5\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('7') == '1 2 2 2 2 3 2'\nassert solution('8') == '1 2 2 2 2 3 2 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == '5\\n2 1 1 2 3'\nassert solution(\"5\\n3 7 5 1 5\\n\") == '2\\n5 5'\nassert solution(\"3\\n5 1 4\\n\") == '2\\n4 5'\nassert solution(\"7\\n2 2 3 2 1 2 2\\n\") == '7\\n1 2 2 2 2 3 2'\n\n\"\"\"\n\n\"\"\"\n\nn = int(stdin.readline().strip())\narr = list(map(int, stdin.readline().strip().split()))\n\narr.sort()\nresult = [arr[-1]]\nfor i in range(n-1, 0, -1):\n    if abs(result[-1] - arr[i]) > 1:\n        result.append(arr[i])\nresult = result + [arr[0]]\nprint(len(result))\nprint(*result)\n\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\n\ncount = 1\ni = n - 1\nwhile i > 0:\n    if abs(arr[i] - arr[i-1]) > 1:\n        break\n    else:\n        count += 1\n        i -= 1\n\nprint(count)\nprint(*arr[:count])\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\"\nassert solution(\"7 3 5 1 5\") == \"2 1 1 2 3\"\nassert solution(\"7 3 5 1 5\") == \"2 1 1 2 3\"\nassert solution(\"7 3 5 1 5\") == \"2 1 1 2 3\"\nassert solution(\"7 3 5 1 5\") == \"2 1 1 2 3\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\\n\") == \"7\\n1 2 2 2 2 3 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\nassert solution(\"7\\n5 1 4\") == \"2\\n4 5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\nprint(solution(\"7\\n4 3 5 1 2 2 2 1\"))\nprint(solution(\"5\\n3 7 5 1 5\"))\nprint(solution(\"3\\n5 1 4\"))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n\"\"\"\nimport sys\n\ntests = {\n    1: (\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\", \"2\"),\n    2: (\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\", \"-1\")\n}\n\nfor test_nr, (input_data, solution) in tests.items():\n    raw_input = sys.stdin.readlines()\n    assert raw_input[0] == input_data\n\n    print(test_nr)\n    sys.stdin = open('test_cases/Y11R5P1/A.in')\n    res = solution()\n    sys.stdin = open('test_cases/Y11R5P1/A.in')\n    assert res == solution\n\n    sys.stdin.close()\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\"\nassert solution(\"4 16\\n10 7\\n7 4\\n3 1\\n5 4\") == \"-\"\n\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\n\n\"\"\"\n\nn, m = [int(i) for i in input().split(' ')]\n\nsongs_size = [0] * n\nsongs_compressed = [0] * n\nfor i in range(n):\n    s, c = [int(i) for i in input().split(' ')]\n    songs_size[i] = s\n    songs_compressed[i] = c\nsongs_compressed.sort()\n\ni = 0\nwhile True:\n    total = 0\n    for song in songs_compressed:\n        if total + song > m:\n            break\n        total += song\n    if total < m:\n        break\n    i += 1\n    songs_compressed[i] -= songs_compressed[i - 1]"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"4 18\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 18\\n10 9\\n7 4\\n3 1\\n5 4\") == \"0\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 17\\n10 8\\n7 4\\n3 1\\n5 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1\") == \"tleel\"\nassert solution(\"7 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\"\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 3') == 'tleel'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('qwerty') == 'qwerty'\nassert solution('tytyty') == 'tyt'\nassert solution('leelte') == 'leelte'\nassert solution('leeltee') == 'leeltee'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaaa') == 'aaaaa'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 3 5\") == \"3\"\nassert solution(\"20 12 6\") == \"12\"\nassert solution(\"100 100 100\") == \"1\"\nassert solution(\"100 100 1\") == \"100\"\nassert solution(\"100 0 100\") == \"0\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('10 1 10') == '0'\nassert solution('1 1 1') == '0'\nassert solution('0 1 10') == '10'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 12 6\\n') == '12\\n'\nassert solution('50 2000 0\\n') == '-1\\n'\nassert solution('100 50 100\\n') == '100\\n'\nassert solution('0 50 0\\n') == '-1\\n'\nassert solution('100 50 0\\n') == '100\\n'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 12 6\") == '12'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 12 6') == 12\n\"\"\"\n\nN, X, T = [int(c) for c in stdin.split()]"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_solution\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 12 6') == 12\n\"\"\"\nimport math\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6\\n') == '12'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n') == '2'\nassert solution('3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '2'\nassert solution('10') == '3'\nassert solution('100') == '8'\nassert solution('11') == '5'\nassert solution('44') == '5'\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n2\\n2\\n3\\n1\\n1\\n2\\n5') == '2'\nassert solution('8\\n2\\n2\\n3\\n1\\n1\\n2\\n5') == '2'\n\n'''\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n') == '2'\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"2\"\nassert solution(\"5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n3 4\\n5 6\\n7 8\\n4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == 3\nprint(solution('6'))\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == 2\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == 3\nassert solution('2 3') == 4\nassert solution('6 10') == 1\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == '3'\nassert solution('2 4') == '3'\nassert solution('2 5') == '2'\nassert solution('4 2') == '1'\nassert solution('4 3') == '2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == 3\n\"\"\"\n\nA, P = list(map(int, stdin.split()))"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == 3\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == 3\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12') == '16'\nassert solution('5 15') == '5'\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"1 1\") == \"0\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 12') == '16'\nassert solution('2 7') == '2'\n\"\"\"\n\nA, B = map(int, stdin.split())\n\nprint(A * (B - A) + B if B > A else B - A)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12') == '16'\nassert solution('2 7') == '5'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 12''') == '''16'''\nassert solution('''10 23''') == '''-4'''\nassert solution('''2 2''') == '''0'''\nassert solution('''7 7''') == '''0'''\nassert solution('''5 12''') == '''16'''\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\na, b = map(int, input().split(' '))\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12') == '16'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\nprint(\"All tests passed.\")\n\n----\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"1 12\") == \"11\"\nassert solution(\"2 19\") == \"17\"\nassert solution(\"3 17\") == \"18\"\nassert solution(\"4 17\") == \"16\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"b\") == \"No\"\nassert solution(\"z\") == \"Yes\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('asdfz') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\nprint(solution(\"chokudai\"))\nprint(solution(\"chokudaiz\"))\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('hello') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n\nS = input()\nT = input()\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 16') == '9'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n------Test Case 1-------\n    2\n    16\n    5\n    7\n    6\n\n------Test Case 2-------\n    8\n    3\n    2\n    0\n    5\n    1\n    6\n    \n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\n\n-----------------------\n\nApproach 1: Brute Force\n\nFor each possible value of K between -10^9 and 10^9, check if the value of A - K and B - K are equal or not.\n\nBig-O Analysis\n\nTime complexity : O(10^9).\n\nSpace complexity : O(1)."
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nA, B = map(int, stdin.readlines())"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 16\") == \"9\"\nprint(solution(\"2 16\"))\n\n'''"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 16') == '9'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 16\") == \"9\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == expected_result\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, A, B):\n        \"\"\"Solve the problem and return the output.\n\n        Arguments:\n        A -- input\n        B -- input\n\n        Return:\n        str -- output\n        \"\"\"\n        A = int(A)\n        B = int(B)\n\n        k = (B - A) // abs(B - A)\n\n        if k > 0 and (B - A) % abs(B - A) == 0:\n            return str(k)\n        else:\n            return \"IMPOSSIBLE\"\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        expected_result = \"9\"\n        test_input = 2, 16\n        solution = Solution()\n        output = solution.solution(test_input[0], test_input[1])\n        self.assertEqual(expected_result, output)"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(117) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('117') == 'Yes'\nassert solution('102') == 'No'\n\"\"\"\nimport unittest"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('117') == 'Yes'\nassert solution('100') == 'No'\nassert solution('1456') == 'No'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"101\") == \"No\"\nassert solution(\"777\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"777\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"117\") == \"Yes\"\n\nassert solution(\"113\") == \"No\"\n\nassert solution(\"123\") == \"No\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(117) == \"Yes\"\n\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(117) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('118') == \"No\"\nassert solution('789') == \"Yes\"\n\"\"\"\nimport re"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('117') == 'Yes'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\n\nprint(solution('117'))\n\nassert solution('117') == 'Yes'\n\nassert solution('345') == 'No'\n\nassert solution('734') == 'Yes'\n\nassert solution('367') == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'Yes'\nassert solution('112') == 'No'\n\nimport re\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(101) == \"Yes\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"12\") == \"Yes\"\nassert solution(\"8\") == \"No\"\n\"\"\"\n\n\n\"\"\"\n0 <= N <= 10^9\n\nS(n) = S(101) = 1 + 0 + 1 = 2\nS(n) = S(12) = 1 + 2 = 3\nS(n) = S(8) = 0"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\nfrom typing import List\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 1\") == \"0 0 -1 1 0\"\nassert solution(\"1 1 0 1\") == \"-1 1 1 1 0\"\nassert solution(\"0 0 0 0\") == \"-1 1 1 1 1\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 3 1') == '3 3 -1 0'\n\n'''"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '2 3 1 4'\nassert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 -1') == '1 1 0 -1'\nassert solution('1 1 0 1') == '0 0 0 1'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\nassert solution(\"-1 1 -1 0\") == \"0 1 1 1\"\nassert solution(\"3 4 1 3\") == \"1 1 -1 4\"\nassert solution(\"5 5 5 5\") == \"5 5 5 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"1 -1 -1 0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''2 1 2 1''') == '-1 1 -1 0'\nassert solution('''1 0 2 1''') == '-1 1 -1 0'\nassert solution('''0 0 0 0''') == '0 0 0 0'\n\nassert solution('''1 2 1 1\n0 0 0 1\n2 0 1 1''') == '1 1 0 1'\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\nimport re\n\nfor line in stdin.split(\"\\n\"):\n    if line!= \"\":\n        s, t, u = line.split()\n        print(re.findall(s, \"\".join(stdin.split())).count(u), end=\" \")\n        print(re.findall(t, \"\".join(stdin.split())).count(u))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('red blue') == '2 4'\nassert solution('blue blue') == '1 4'\nassert solution('blue red') == '1 3'\nassert solution('red red') == '2 2'\n\"\"\"\n\ns, t = input().split()\na, b = input().split()\n\nprint(int(a)-1, int(b)-1)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nprint(\"Passed!\")\n\n-----\n\uc815\ub2f5\uc740 \uc544\ub798\uc758 \uc870\uac74\uc5d0 \ub9de\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud574 \uc8fc\uc138\uc694.\n\n1. \ubc18\ubcf5\ubb38\uc744 \uc774\uc6a9\ud574\uc11c \uc785\ub825\ubc1b\uc740 S,T\ub97c \uc801\uc808\ud788 \ubc1b\uc544\ub4e4\uc774\uace0, \uac01\uac01\uc758 \ubb38\uc790\uc5f4\uc758 \uac1c\uc218\ub97c \uc54c\uc544\ub0b4\uc5b4 \uacb0\uacfc\ub97c \ub3c4\ucd9c\ud574\ubcf4\uc138\uc694.\n2. \ubc18\ubcf5\ubb38\uc744 \uc774\uc6a9\ud574\uc11c \uc785\ub825\ubc1b\uc740 S,T\ub97c \uc801\uc808\ud788 \ubc1b\uc544\ub4e4\uc774\uace0, \uac01\uac01\uc758 \ubb38\uc790\uc5f4\uc758 \uac1c\uc218\ub97c \uc54c\uc544\ub0b4\uc5b4 \uacb0\uacfc\ub97c \ub3c4\ucd9c\ud574\ubcf4\uc138\uc694.\n\n-----Constraints-----\n - S, T, and U are strings consisting of lowercase English letters.\n - The lengths of S and T are each between 1 and 10 (inclusive).\n - S \\not= T\n - S=U or T=U.\n - 1 \\leq A,B \\leq 10\n - A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS T\nA B\nU\n\n-----Output-----\nPrint the answer, with space in between.\n\n-----Sample Input-----\nred blue\n3 4\nred\n\n-----Sample Output-----\n2 4\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\n\n\"\"\"\n\ns,t = map(str, input().split())\na, b = map(int, input().split())\nu = str(input())\n\nprint(f\"{a-1} {b-1}\")\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n'''"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcabc') == 'Yes', 'Wrong solution'\nassert solution('a') == 'No', 'Wrong solution'\nassert solution('abc') == 'Yes', 'Wrong solution'\n\"\"\"\n\nimport sys\nimport os\nfrom typing import Dict"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcdef') == 'No'\nassert solution('abacaba') == 'Yes'\nassert solution('aaaaaaa') == 'Yes'\nassert solution('aaa') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\"\n\nn = int(input())\ns = input()\n\nt = s * 2\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abccbc') == 'No'\nassert solution('abcdef') == 'No'\nassert solution('abcdec') == 'Yes'\nassert solution('abcdecb') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('aabab') == 'Yes'\nassert solution('aaabb') == 'No'\nassert solution('aaaa') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('ababab') == 'No'\nassert solution('aaaaaa') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abcabcabc') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('ababab') == 'No'\nassert solution('abcab') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('ababab') == 'No'\n\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3,4,0,1\") == \"3.0,0\"\nassert solution(\"1,1,1,1\") == \"0.0,1\"\nassert solution(\"1,1,0,1\") == \"0.0,0\"\nassert solution(\"1,1,0,0\") == \"0.0,0\"\nassert solution(\"1,1,1,1\") == \"0.0,1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1 2') == '3.0 1'\nassert solution('2 3 3 4') == '0 1'\nassert solution('4 4 4 4') == '0 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('2 2 2 1 1') == '0.666667 1'\nassert solution('1 1 2 1') == '2.00000 1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\n---Problem---\n\nThere is a rectangle in a coordinate plane. The coordinates of the four vertices are (0,0), (W,0), (W,H), and (0,H).\nYou are given a point (x,y) which is within the rectangle or on its border. We will draw a straight line passing through (x,y) to cut the rectangle into two parts. Find the maximum possible area of the part whose area is not larger than that of the other. Additionally, determine if there are multiple ways to cut the rectangle and achieve that maximum.\n\n-----Constraints-----\n - 1 \\leq W,H \\leq 10^9\n - 0\\leq x\\leq W\n - 0\\leq y\\leq H\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nW H x y\n\n-----Output-----\nPrint the maximum possible area of the part whose area is not larger than that of the other, followed by 1 if there are multiple ways to cut the rectangle and achieve that maximum, and 0 otherwise.\nThe area printed will be judged correct when its absolute or relative error is at most 10^{-9}.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"3 5 1 1\") == \"0.000000 1\"\nassert solution(\"3 3 1 1\") == \"0.333333 1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 1 2') == '3.0 0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\n---"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nprint(solution(\"2 3 1 2\"))\n\n---\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nP P P\") == \"Three\"\nassert solution(\"3\\nP W P\") == \"Four\"\n\n\"\"\"\n\n\"\"\"\nSolution\n\nComplexity: time O(1), space O(1)\n\nYou are given a non-empty array that represents the number of arare in the bag.\nEach number in the array represents the number of arare with the same color as the i-th number in the array.\nYou are also given an array that contains M color-values of the arare.\nWrite 5 lines of code to test the correctness of solution:\nIn Japan, people make offerings called hina arare, colorful crackers, on March 3.\nWe have a bag that contains N hina arare. (From here, we call them arare.)\nIt is known that the bag either contains arare in three colors: pink, white and green, or contains arare in four colors: pink, white, green and yellow.\nWe have taken out the arare in the bag one by one, and the color of the i-th arare was S_i, where colors are represented as follows - pink: P, white: W, green: G, yellow: Y.\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - S_i is P, W, G or Y.\n - There always exist i, j and k such that S_i=P, S_j=W and S_k=G.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1 S_2... S_N\n\n-----Output-----\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n\n-----Sample Input-----\n6\nG W Y P Y W\n\n-----Sample Output-----\nFour\n\nThe bag contained arare in four colors, so you should print Four.\n\"\"\"\n\n\"\"\"\nSolution\n\nComplexity: time O(N), space O(N)\n\nYou are given a non-empty array that represents the number of arare in the bag.\nEach number in the array represents the number of arare with the same color as the i-th number in the array.\nYou are also given an array that contains M color-values of the arare.\nWrite 5 lines of code to test the correctness of solution:\nIn Japan, people make offerings called hina arare, colorful crackers, on March 3.\nWe have a bag that contains N hina arare. (From here, we call them arare.)\nIt is known that the bag either contains arare in three colors: pink, white and green, or contains arare in four colors: pink, white, green and yellow.\nWe have taken out the arare in the bag one by one, and the color of the i-th arare was S_i, where colors are represented as follows - pink: P, white: W, green: G, yellow: Y.\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - S_i is P, W, G or Y.\n - There always exist i, j and k such that S_i=P, S_j=W and S_k=G.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1 S_2... S_N\n\n-----Output-----\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n\n-----Sample Input-----\n6\nG W Y P Y W\n\n-----Sample Output-----\nFour\n\nThe bag contained arare in four colors, so you should print Four.\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\n-----\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\nG W G\n\n4\nW W P P\n\n2\nP P\n\n2\nP P\n\n2\nP P\n\n2\nP P\n\n5\nG W P G W\n\n7\nG P G W P G W P\n''') == 'Four'\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\nassert solution(\"G W Y P Y W P\") == \"Four\"\nassert solution(\"G W Y P Y W Y\") == \"Four\"\nassert solution(\"G W Y P Y W Y Y\") == \"Four\"\nassert solution(\"G W Y P Y W Y Y Y\") == \"Three\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Three\"\nassert solution(\"1 2\") == \"Four\"\nassert solution(\"3 1 2\") == \"Four\"\nassert solution(\"1 3 1\") == \"Four\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\n\"\"\"\nimport collections\nfrom typing import List\n\nCOLORS = {\"P\": \"pink\", \"W\": \"white\", \"G\": \"green\", \"Y\": \"yellow\"}"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nW W W\\n') == 'Three'\nassert solution('4\\nP P P\\n') == 'Four'\nassert solution('4\\nP P P\\n') == 'Four'\nassert solution('4\\nP P P\\n') == 'Four'\nassert solution('4\\nP P P\\n') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 G\") == 'Four'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == 6\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == 6"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\\n\") == \"2\"\n\"\"\"\n\nn, x, y = [int(x) for x in input().split()]\ndurabilities = [int(x) for x in input().split()]\n\ndurabilities_sum = sum(durabilities)\nmax_durability = max(durabilities)\nmax_durability_count = durabilities.count(max_durability)"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\nassert solution(\"5 5 6\\n1 2 6 10 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 1, 0) == 1\nassert solution(5, 5, 6) == 2\nassert solution(6, 3, 2) == 6\n\"\"\"\n\nn, x, y = map(int, input().split())\ndur = list(map(int, input().split()))\n\nans = 0\n\nfor d in dur:\n    ans += max(0, d - x)\n    ans += max(0, d + y)\n\nprint(ans)\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == 2\nassert solution(\"5 5 6\\n1 2 6 10 3\") == 2\nassert solution(\"5 5 6\\n1 2 3 10 3\") == 1\nassert solution(\"5 5 6\\n1 2 3 1 3\") == 0\nassert solution(\"5 5 6\\n1 2 3 1 1\") == 0\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == 2\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 0\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin_lines) == expected_value\n\n---\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('4\\n1 3 2 4\\n1 3 2 4') == '0'\nassert solution('5\\n1 1 2 5 1\\n1 1 2 5 1') == '6'\n\n'''\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\nprint(solution(\"4\\n1 3 2 4\\n1 3 2 4\"))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == 7\nassert solution(test_input_2) == 0\n\"\"\"\n\nimport sys\n\nN = int(input())\na = [0] + list(map(int, input().split()))\nb = [0] + list(map(int, input().split()))\nans = 0\nfor i in range(1, N + 1):\n    for j in range(i + 1, N + 1):\n        if a[i] + a[j] > b[i] + b[j]:\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\\n\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(example) == answer\n'''\n\nimport sys\nfrom typing import List\n\nclass Solution:\n\n    def __init__(self) -> None:\n        self.a: List[int] = [int(x) for x in sys.stdin.readline().split()]\n        self.b: List[int] = [int(x) for x in sys.stdin.readline().split()]\n\n    def solution(self) -> str:\n        result: int = 0\n        for i in range(len(self.a)):\n            for j in range(i + 1, len(self.a)):\n                if self.a[i] + self.a[j] > self.b[i] + self.b[j]:\n                    result += 1\n        return str(result)\n\n\n    def solution2(self) -> str:\n        self.a.sort()\n        self.b.sort()\n        result: int = 0\n        i: int = 0\n        j: int = len(self.b) - 1\n        while i < len(self.a) and j >= 0:\n            if self.a[i] + self.a[j] > self.b[i] + self.b[j]:\n                result += 1\n                i += 1\n            elif self.a[i] + self.a[j] < self.b[i] + self.b[j]:\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n        return str(result)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\nimport collections\n\nN = int(input())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nq = collections.deque()\n\nfor a, b in zip(A, B):\n    q.append(a - b)\n\nans = 0\nfor i in range(len(q)):\n    if q[i] > 0:\n        ans += (q[i] + 1) // 2\n        q[i] %= 2\n\nfor qi in q:\n    if qi > 0:\n        ans += qi // 2\n        if qi % 2 == 1:\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n4 8 2 6 2\n4 5 4 1 3''') == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\\n\") == \"7\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = dict()\n\nfor i in a:\n    if i in d.keys():\n        d[i] += 1\n    else:\n        d[i] = 1\n\nres = []\n\nfor i in a:\n    if i % 2 == 0:\n        res.append(i // 2)\n    else:\n        res.append(i * 2)\n\nfor key in d.keys():\n    for i in range(d[key]):\n        res.append(key)\n\nprint(*res)\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = []\nfor i, val in enumerate(a):\n    while val > 0:\n        if val % 10 == 1:\n            b.append(2)\n            val = val // 10\n        elif val % 10 == 2:\n            b.append(1)\n            val = val // 10\n        elif val % 10 == 3:\n            b.append(4)\n            val = val // 10\n        elif val % 10 == 4:\n            b.append(3)\n            val = val // 10\n        elif val % 10 == 5:\n            b.append(6)\n            val = val // 10\n        elif val % 10 == 6:\n            b.append(5)\n            val = val // 10\n        elif val % 10 == 9:\n            b.append(9)\n            val = val // 10\n        elif val % 10 == 0:\n            b.append(9)\n            val = val // 10\n\nprint(' '.join(map(str, b)))"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\nassert solution('10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\n\noutput = []\n\nfor i in range(n):\n    if a[i] == 1:\n        output.append(2)\n    elif a[i] == 2:\n        output.append(1)\n    elif a[i] == 3:\n        output.append(4)\n    elif a[i] == 4:\n        output.append(3)\n    elif a[i] == 5:\n        output.append(6)\n    elif a[i] == 6:\n        output.append(5)\n    elif a[i] == 10**9:\n        output.append(10**9 - 1)\n    elif a[i] == 10**9 - 1:\n        output.append(10**9)\n    else:\n        output.append(a[i])\n\nprint(*output, sep=' ')\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '1 9'\nassert solution('5') == '1 1 3 5'\nassert solution('1') == '1'\nassert solution('10000') == '9999 9'\nassert solution('10 5 20 10 20 20 10 20 30 50 60 70 80 100 100 100 100 100') == '9999 9 10 10 10 10 10 10 20 20 30 50 60 70 80 100 100 100 100 100'\n\n'''"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 4 5 10\\n') == '1 1 3 5 9'"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(['1', '2', '3', '4', '5', '10']) == ['1', '2', '3', '4', '5', '10']\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = [1] * n\nfor i in range(1, n):\n    if a[i] == a[i-1]:\n        b[i] = b[i-1]\n    elif a[i] == a[i-1] + 1:\n        b[i] = b[i-1] + 1\n    else:\n        b[i] = b[i-1] + 2\n\nprint(' '.join(map(str, b)))\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000 10 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"5 7\") == \"4\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == \"1\"\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == \"2\"\n\n\"\"\"\n\nimport sys\nimport collections\nfrom typing import List"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 2\\n3 4\\n5 4\") == \"2\"\n\nassert solution(\"5 3\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"9 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 1\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 2\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\n\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == '2'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\n\n-----\n\nI made a mistake. I just made a mistake..."
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 0 0 2\\n2 3\\n2 4\\n2 5\\n') == '1'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n2 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"0\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n2 3\\n3 4\\n4 5\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 1 1 0 2\\n2 3\\n2 4\\n2 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abdaf\") == \"c\"\nassert solution(\"abdaf\") == \"c\"\nassert solution(\"abdaf\") == \"c\"\n\nassert solution(\"abdaf\") == \"c\"\nassert solution(\"abdaf\") == \"c\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\"\"\"\n\nimport math\nimport sys\nimport functools\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"vght\") == \"fz\"\n\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"jf\") == \"v\"\nassert solution(\"kj\") == \"kj\"\nassert solution(\"hvw\") == \"hvw\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"tvqhwp\") == \"qoztvz\"\nassert solution(\"qhwmuyt\") == \"lzpkql\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\nprint('Success')\n\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nLet us consider the special case when there are odd number of letters.\n\nLet's consider two strings $s$ and $t$, where $k=\\lfloor \\frac{len(s)+len(t)+1}{2} \\rfloor$.\n\nSuppose $s$ is lexicographically less than $t$.\n\nFor each of the following strings:\n\n$s + u + t$ \u2014 such that $u$ is the lexicographically smallest string such that $u$ is lexicographically less than $t$ and $u$ has length less or equal to $k-2$.\n$s + u + v + t$ \u2014 such that $v$ is the lexicographically smallest string such that $v$ is lexicographically less than $t$ and $v$ has length less or equal to $k-3$.\n$s + u + v + w$ \u2014 such that $w$ is the lexicographically smallest string such that $w$ is lexicographically less than $t$ and $w$ has length less or equal to $k-4$.\n$s + u + v + w + t$ \u2014 such that $w$ is the lexicographically smallest string such that $w$ is lexicographically less than $t$ and $w$ has length less or equal to $k-5$.\n\nLet $c=\\lfloor \\frac{len(s)+len(t)+1}{2} \\rfloor-1$\n\nSuppose $s$ is lexicographically less than $t$.\n\nLet $z$ be the lexicographically smallest string such that $z$ is lexicographically less than $t$ and $z$ has length less or equal to $c-1$.\n\nLet $q=\\lfloor \\frac{len(t)+1}{2} \\rfloor-1$\n\nLet $r=\\lfloor \\frac{len(s)+len(t)+1}{2} \\rfloor-1$\n\nIf $r>q>c>=1$ then $q$ is the median string.\n\nIf $c>=2$ then $r$ is the median string.\n\nIf $c=1$ then $r$ is the median string if $q=0$ else $z$.\n\nIf $c=0$ then $z$ is the median string.\n\nFor $c=0$ one of the strings $s$ and $t$ is the median string.\n\nFor $c=1$ one of the strings $s$ or $t$ is the median string.\n\nIf $c=2$ then one of the strings $s$ or $t$ is the median string.\n\nSince we are considering strings of $k$ length, then there are a total of $2^k$ strings in the list.\n\nSo the median is the lexicographically smallest one.\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nLet us consider the special case when there are odd number of letters.\n\nWe can calculate the number of strings of length $k$ lexicographically less than $s$ and not greater than $t$:\n\n$\\lfloor \\frac{len(s)+len(t)+1}{2} \\rfloor-1$\n\nWe can also calculate the number of strings of length $k-1$ lexicographically less than $s$ and not greater than $t$:\n\n$\\lfloor \\frac{len(s)+len(t)+1}{2} \\rfloor-2$\n\nAnd so on.\n\nFor each of the strings of length $k-1$ lexicographically less than $s$ and not greater than $t$ let's compute its index in the list of strings of length $k$ lexicographically not less than $s$ and not greater than $t$.\n\nThere are three cases:\n\nWe can find the index of the string in the list in O(1) time.\n\nWe can make an optimization of O(n) time, where $n$ is the number of strings of length $k$ lexicographically not less than $s$ and not greater than $t$ in the list.\n\nWe can make an optimization of O(n) time, where $n$ is the number of strings of length $k$ lexicographically not less than $s$ and not greater than $t$ in the list.\n\nFor each string in the list, we can make a constant number of operations to find its index in the list.\n\nWe can calculate the number of strings of length $k-1$ lexicographically less than $s$ and not greater than $t$:\n\n$\\lfloor \\frac{len(s)+len(t)+1}{2} \\rfloor-2$\n\nFor each of the strings of length $k-1$ lexicographically less than $s$ and not greater than $t$ let's compute its index in the list of strings of length $k$ lexicographically not less than $s$ and not greater than $t$.\n\nThere are three cases:\n\nWe can find the index of the string in the list in O(1) time.\n\nWe can make an optimization of O(n) time, where $n$ is the number of strings of length $k$ lexicographically not less than $s$ and not greater than $t$ in the list.\n\nWe can make an optimization of O(n) time, where $n$ is the number of strings of length $k$ lexicographically not less than $s$ and not greater than $t$ in the list.\n\nFor each string in the list, we can make a constant number of operations to find its index in the list.\n\nSo the number of strings of length $k$ lexicographically less than $s$ and not greater than $t$ is:\n\n$\\lfloor \\frac{len(s)+len(t)+1}{2} \\rfloor-1$\n\nThis will give us the number of strings of length $k$ lexicographically not less than $s$ and not greater than $t$.\n\nSince there are a total of $2^k$ strings of length $k$ lexicographically not less than $s$ and not greater than $t$, the median string of length $k$ is the lexicographically smallest one.\n\nTherefore, if $k$ is odd, the median string is the lexicographically smallest string of length $k$.\n\nIf $k$ is even, the median string is one of the strings of length $k$ lexicographically not less than $s$ and not greater than $t$.\n\"\"\"\n\n\"\"\"\nSolution\n\nFor each of the strings of length $k$ lexicographically not less than $s$ and not greater than $t$ let's compute its index in the list of strings of length"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('az') == 'bc'\nassert solution('bf') == 'bc'\nassert solution('nijfvj') == 'qoztvz'\nassert solution('afogk') == 'alvuw'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"qwert\") == \"qwer\"\nassert solution(\"muiop\") == \"opm\"\nassert solution(\"onij\") == \"opm\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('az') == 'bc'\nassert solution('bf') == 'bc'\nassert solution('nijfvj') == 'qoztvz'"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\", \"Incorrect output\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\\n\", \"Incorrect output\"\n\n\n\"\"\"\n\nimport unittest\nfrom typing import List"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\n\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\nassert solution(\"5 5\\n20 10 40 30 5 20\\n\") == \"NO\"\nassert solution(\"4 5\\n20 10 40 30 5 20\\n\") == \"NO\"\n\nimport sys\nimport re\nassert len(sys.argv) == 2\nn, k = map(int, re.findall(r\"\\d+\", open(sys.argv[1]).read()))\ns = open(sys.argv[1]).readlines()[1:]\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == 'YES\\n1 2 5'\nassert solution(\"5 4\\n20 10 40 30\") == 'YES\\n1 2 3 4'\nassert solution(\"4 4\\n20 10 40 30\") == 'NO'\n\"\"\"\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15 13 15 15 12') == 'YES\\n1 2 5\\n'\n\"\"\"\n\n\n\nfrom typing import List\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 2 3 4 5\") == \"YES\\n1 1 1 1 0 1 1 1 0\"\nassert solution(\"6 5 4 3 2 1\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"YES\\n1 1 1 1 0 1 1 1 0\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1 0\") == \"NO\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution(\"5\\n1 2 4 0 2\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 5 1 3 6 8 2 9 0\\n') == 'YES\\n0 0 0 1 0 1 1 0 0 1 0'\nassert solution('6 5 4 3 2 1\\n') == 'NO'"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5\\n1 2 4 0 2\") == \"NO\"\nassert solution(\"7\\n5 7 8 1 0 2 1 9 4 0 9 5\") == \"YES\\n0 1 0 1 1 1 1 1 1\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8 9 10\") == \"YES\\n0 1 0 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES\\n1 0 0 0 0 1'\nassert solution('4\\n3 1 2 4') == 'NO'\nassert solution('4\\n4 3 2 1') == 'NO'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == 'YES\\n0 0 0 0 0 1 1 1 1 1'\nassert solution('10\\n11 2 3 4 5 6 7 8 9 10') == 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10 8 9') == 'NO'\nassert solution('4 10 8 2') == 'YES'\nassert solution('4 10 8 1') == 'YES'\nassert solution('4 10 8 0') == 'YES'\nassert solution('4 10 8 7') == 'YES'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 0\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution([\"5 1 3 6 8 2 9 0 10\"]) == 'YES\\n1 0 0 0 0 1 0 1 0'\n\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5\\n1 2 4 0 2\") == \"NO\\n0 1 1 0\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"NO\"\nassert solution(\"9 10 8 7 6 5 4 3 2 1 0\") == \"YES\\n1 0 1 1 0 0 1 1 1\"\nassert solution(\"4 5 3 2 1 0\") == \"NO\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\"\"\"\n\n\"\"\"\nfor each query, \n    get the lanterns\n    is there any lantern which is not covered by the standing train\n        if there is, count the lanterns and print\n    else\n        print 0\n\"\"\"\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    l, v, l_, r_ = list(map(int, stdin.readline().split()))\n    l_ %= v\n    r_ %= v\n    count = 0\n    for i in range(l, r_ + 1):\n        if i % v!= l_:\n            count += 1\n    if count == 0:\n        print(0)\n    else:\n        print(count)\n\n\"\"\"\n2\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\"\n\n\"\"\"\n5\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n1000000000 100 1 1000000000\n\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n0\n0\n1134\n0\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\nassert solution('''5\n100 200 10 30\n100 10 50 150\n100 50 100\n100 150 100\n1000 200 30''') == '''0\n0\n1134\n0'''\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_solution\n\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\nimport sys\n\ntest_inputs = []\ntest_inputs.append(\"\")\n\n\"\"\"\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 3\nassert solution(\"8\") == 1260\n\nprint(solution(\"20\"))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\nassert solution(\"8\\n\") == \"1260\"\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\n\"\"\"\n\nfrom math import factorial as fac"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\n\nassert solution(\"4\") == \"3\"\n\nassert solution(\"8\") == \"1260\"\n\nassert solution(\"20\") == \"12164510040883200\"\n\nprint('The local tests are done. Click on \"Check\" for more details on TestDrive')"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\nassert solution(\"8\\n\") == \"1260\"\nassert solution(\"20\\n\") == \"12164510040883200\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc', 15, 3) == 'cccbbabaccbc'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('u') == 'def'\nassert solution('abc') == 'abc'\nassert solution('aaaa') == ''\nassert solution('bcbc') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('abb') == 'bb'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('c') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('c') == 'c'\nassert solution('ccccccccccccccccc') == 'ccccccc'\nassert solution('abbabbabb') == 'bbb'\nassert solution('aaaabbbb') == 'bbb'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"aaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('cccbbabaccbc') == 'cccbbbac'\nassert solution('cccaabababaccbc') == 'cccbbaaccbc'\nassert solution('cccbbbaccbc') == 'cccbbbac'\nassert solution('cccbbbabaccbc') == 'cccbbbaccbc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\"\"\") == \"8\"\n\n\"\"\"\n[Wrong answer]\nExplanation\nFor example, if the first day Ivan can buy the first and the second microtransactions, then the third day he will buy the second and the third microtransactions. And the fourth day he will buy the first and the third microtransactions.\n\nThe first and the second microtransactions will be on sale for the next four days and the first microtransaction will be on sale for the next four days. The first microtransaction will be on sale for the next four days and the second microtransaction will be on sale for the next four days.\n\nSo, the first and the second microtransactions will be on sale for the next 8 days. And the second microtransaction will be on sale for the next 8 days.\n\nThe first and the third microtransactions will be on sale for the next 8 days. And the first microtransaction will be on sale for the next 8 days.\n\nSo, the first and the third microtransactions will be on sale for the next 8 days. And the second microtransaction will be on sale for the next 8 days.\n\nSo, the first microtransactions will be on sale for the next 8 days.\n\nIn general, if Ivan can buy the microtransactions he wants on the $i$-th day, then he can buy the microtransactions he wants on the $i+1$-th day.\n\nIf Ivan can buy the microtransactions he wants on the $i$-th day, then he can buy the microtransactions he wants on the $i+1$-th day, and he can buy the microtransactions he wants on the $i+2$-th day.\n\nBut if Ivan can't buy the microtransactions he wants on the $i$-th day, then he can't buy the microtransactions he wants on the $i+1$-th day.\n\nAnd if Ivan can't buy the microtransactions he wants on the $i$-th day, then he can't buy the microtransactions he wants on the $i+1$-th day, and he can't buy the microtransactions he wants on the $i+2$-th day.\n\nSo, if Ivan can buy the microtransactions he wants on the $i$-th day, then he can buy the microtransactions he wants on the $i+1$-th day, and he can buy the microtransactions he wants on the $i+2$-th day, and he can buy the microtransactions he wants on the $i+3$-th day.\n\nIf Ivan can buy the microtransactions he wants on the $i$-th day, then he can buy the microtransactions he wants on the $i+1$-th day, and he can buy the microtransactions he wants on the $i+2$-th day, and he can buy the microtransactions he wants on the $i+3$-th day, and he can buy the microtransactions he wants on the $i+4$-th day.\n\nAnd if Ivan can't buy the microtransactions he wants on the $i$-th day, then he can't buy the microtransactions he wants on the $i+1$-th day, and he can't buy the microtransactions he wants on the $i+2$-th day, and he can't buy the microtransactions he wants on the $i+3$-th day, and he can't buy the microtransactions he wants on the $i+4$-th day.\n\nSo, if Ivan can buy the microtransactions he wants on the $i$-th day, then he can buy the microtransactions he wants on the $i+1$-th day, and he can buy the microtransactions he wants on the $i+2$-th day, and he can buy the microtransactions he wants on the $i+3$-th day, and he can buy the microtransactions he wants on the $i+4$-th day, and he can buy the microtransactions he wants on the $i+5$-th day.\n\nIf Ivan can't buy the microtransactions he wants on the $i$-th day, then he can't buy the microtransactions he wants on the $i+1$-th day, and he can't buy the microtransactions he wants on the $i+2$-th day, and he can't buy the microtransactions he wants on the $i+3$-th day, and he can't buy the microtransactions he wants on the $i+4$-th day, and he can't buy the microtransactions he wants on the $i+5$-th day.\n\nSo, if Ivan can buy the microtransactions he wants on the $i$-th day, then he can buy the microtransactions he wants on the $i+1$-th day, and he can buy the microtransactions he wants on the $i+2$-th day, and he can buy the microtransactions he wants on the $i+3$-th day, and he can buy the microtransactions he wants on the $i+4$-th day, and he can buy the microtransactions he wants on the $i+5$-th day, and he can buy the microtransactions he wants on the $i+6$-th day.\n\nAnd if Ivan can't buy the microtransactions he wants on the $i$-th day, then he can't buy the microtransactions he wants on the $i+1$-th day, and he can't buy the microtransactions he wants on the $i+2$-th day, and he can't buy the microtransactions he wants on the $i+3$-th day, and he can't buy the"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\nassert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\nprint(solution(input()))\n\n'''\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test1) == expected1\nassert solution(test2) == expected2"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n\"\"\"\n\nn, m = map(int, input().split())\n\nk = list(map(int, input().split()))\n\nb = [2] * n\nfor i in range(m):\n    d, t = map(int, input().split())\n    b[t - 1] = d\n\nd = [1] * n\n\nfor i in range(n):\n    k[i] = k[i] if k[i] <= b[i] else 2\n\nfor i in range(n):\n    if k[i] < b[i]:\n        d[i] = max(d[i], b[i] - k[i])\n\nprint(max(d))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\"\"\") == \"8\"\n\n\"\"\"\n\n2\n3 1\n1 1\n1 2\n\n1\n1\n1\n\n5 2\n1 3\n\n2\n2\n3\n\n5 1\n2 1\n1 3\n1 3\n2 1\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\ns = []\nfor _ in range(m):\n    d, t = map(int, input().split())\n    s.append((d, t))"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n\n---\n\nThe most important logic is to store the microtransactions in the form of the dictionary {(burles): (day)}\n\nThere are three main steps:\n\n1. sort the data by burles\n2. iterate over the data in pairs of microtransactions\n3. find the maximum number of burles for the current microtransactions\n4. iterate over the data again to calculate the number of days\n5. iterate over the data again to find the minimum number of days\n6. return the minimum number of days\n\nThe implementation is very simple:\n\nFirst of all we sort the data by burles.\n\nThen we iterate over the data in pairs of microtransactions.\n\nThis is the order in which we iterate:\n\n1. for each microtransaction, we compare the number of burles and the number of microtransactions. If the number of burles is less then we add it to the queue and continue, otherwise we add the number of burles to the result.\n\n2. after the microtransaction we check the queue. If the queue is not empty, we compare the number of burles of the current microtransaction with the number of burles of the microtransaction in the queue. If the number of burles is less than the number of burles in the queue, we return the maximum number of burles.\n\n3. after the microtransaction we check the queue. If the queue is not empty, we compare the number of burles of the current microtransaction with the number of burles of the microtransaction in the queue. If the number of burles is greater than the number of burles in the queue, we return the minimum number of burles.\n\nWe iterate over the microtransactions until the queue is empty.\n\nThe complexity is O(n logn + n^2) because the complexity of the sorting is O(n logn) and the complexity of the microtransaction iteration is O(n^2)\n\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 1\\n3 5 2\\n3 5 1\\n\") == \"3\"\nassert solution(\"3 4 1\\n3 5 2\\n3 5 1\\n\") == \"3\"\nassert solution(\"3 4 1\\n3 5 2\\n3 5 1\\n\") == \"3\"\nassert solution(\"3 4 1\\n3 5 2\\n3 5 1\\n\") == \"3\"\nassert solution(\"3 4 1\\n3 5 2\\n3 5 1\\n\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\") == \"1\\n3 1 2\\n3 3 1\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\") == \"1\\n2 2 1\\n3 3 1\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\") == \"1\\n2 2 1\\n3 3 1\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\") == \"1\\n2 2 1\\n3 3 1\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".*...\\n.*...\\n.****\\n...*.*\\n....*.*\\n........\\n\") == \"3\"\nassert solution(\".*...\\n*.*.*\\n.****\\n...*.*\\n....*.*\\n........\\n\") == \"2\"\nassert solution(\".*.*\\n.***\\n.*.*\\n.***\\n.*.*\\n.*.*\\n\") == \"-1\"\nassert solution(\".*...\\n.*...\\n.****\\n...*.*\\n....*.*\\n........\\n\") == \"3\"\nassert solution(\".*...\\n.*...\\n.****\\n.***.\\n.***.\\n.*.*\\n.***.\\n\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"2 2 1\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.*...\\n.*...\\n.*.*\") == \"3\\n2 2 1\"\nassert solution(\"3 3\\n.*.*\\n.*.*\\n.*.*\") == \"3\\n-1\"\nassert solution(\"3 3\\n.*.*\\n.*.*\\n.*.*\") == \"3\\n-1\"\nassert solution(\"3 3\\n.***\\n.*.*\\n.*.*\") == \"3\\n-1\"\nassert solution(\"3 3\\n.*.*\\n.*.*\\n.*.*\") == \"3\\n-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........''') == '3'\nassert solution('''5 5\n.*...\n****.\n.****\n..**.\n.....''') == '-1'\nassert solution('''5 5\n.*...\n***..\n.*...\n.*...\n.....''') == '-1'\nassert solution('''3 3\n*.*\n.*.\n*.*''') == '-1'\n\n\n\n-----Test Dataset-----\n\nInput #1\n\n4 5\n*.....\n.*...*\n*.*...\n*.*.*.\n\nOutput #1\n\n2\n3 4 1\n3 5 2\n\n\nInput #2\n\n5 5\n...*...\n...*...\n****...\n***...*\n.*...*.*\n\nOutput #2\n\n3\n2 2 1\n3 3 1\n3 4 1\n\n\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\"\n      \"\\n........\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"3 3\\n.*..\\n.*..\\n.*..\") == \"2\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 'Yes'\nassert solution('10') == 'No'\nassert solution('111') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"456\") == \"No\"\nassert solution(\"111\") == \"Yes\"\nassert solution(\"564\") == \"No\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == 'Yes'\nassert solution(\"567\") == 'No'\nassert solution(\"764\") == 'No'\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"576\") == \"Yes\"\nassert solution(\"444\") == \"No\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('555') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"123\") == \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 'Yes'\n\"\"\"\n\nn = stdin.readline()\n\nprint(\"Yes\" if str(n) == str(n)[::-1] else \"No\")\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == 'Yes'\nassert solution('100') == 'No'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123') == 'Yes'\nassert solution('976') == 'No'\nassert solution('567') == 'Yes'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\") == \"Alice\"\nassert solution(\"8 6\") == \"Bob\"\nassert solution(\"8 8\") == \"Draw\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"1 2\") == \"Draw\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('6 5') == 'Draw'\nassert solution('7 7') == 'Bob'\nassert solution('13 13') == 'Draw'\nassert solution('9 13') == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('6 6') == 'Draw'\nassert solution('2 6') == 'Bob'\nassert solution('4 1') == 'Alice'\nassert solution('5 8') == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '8 6'\n) == 'Alice'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('6 8') == 'Bob'\nassert solution('3 3') == 'Draw'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"Bob\"\nassert solution(\"3 6\") == \"Alice\"\nassert solution(\"8 6\") == \"Draw\"\n\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"5 7\") == \"Bob\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"1 2\") == \"Alice\"\n\nassert solution(\"3 2\") == \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"4 5\") == \"Draw\"\nassert solution(\"5 4\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 6') == 'Alice'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 6\") == \"Alice\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(',,s,,') == ', s'\nassert solution(',,s,;') == ', s'\nassert solution(',,,,;') =='s'\nassert solution(',,,,;,') =='s'\nassert solution(',,s,;,') == ', s'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n-----------"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"happy,newyear,enjoy\"\n) == \"happy newyear enjoy\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == expected\n\n\"\"\"\n\ns = 'happy,newyear,enjoy'"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n1 1\\n2 1\\n3 1\\n4 1\\n3 3\\n4 3\\n5 3\\n6 3\\n7 3\\n8 3\\n9 3\\n1') == '3\\n1\\n3\\n4\\n'\nassert solution('5 2\\n0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n3 3\\n4 3\\n5 3\\n6 3\\n7 3\\n8 3\\n9 3\\n1') == '3\\n1\\n3\\n4\\n'\nassert solution('5 2\\n0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n3 3\\n4 3\\n5 3\\n6 3\\n7 3\\n8 3\\n9 3\\n1') == '3\\n1\\n3\\n4\\n'\nassert solution('5 2\\n0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n3 3\\n4 3\\n5 3\\n6 3\\n7 3\\n8 3\\n9 3\\n1') == '3\\n1\\n3\\n4\\n'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2: 4 5\\n1 4: 1 5\\n3 2: 6 8\\n3 1: 2 6\\n3 5: 2 5\\n4 2: 3 6\\n4 1: 2 4\\n4 5: 3 4\\n\") == \"1 1 2 2 3\"\nassert solution(\"4 5\\n1 2: 1 1\\n1 4: 1 1\\n3 2: 1 2\\n3 1: 1 1\\n3 5: 1 2\\n4 2: 1 3\\n4 1: 1 2\\n4 5: 1 2\\n\") == \"1 1 1 1 1 2 2 2 2\"\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport sys\n\ndata = [line.strip() for line in sys.stdin.readlines()]\nN, M = [int(n) for n in data.pop(0).split()]\n\nstu = []\nfor i in range(N):\n    stu.append([int(n) for n in data.pop(0).split()])\n\nchk = []\nfor i in range(M):\n    chk.append([int(n) for n in data.pop(0).split()])\n\nret = []\n\nfor i in range(N):\n    chk.sort(key=lambda x: abs(stu[i][0] - x[0]) + abs(stu[i][1] - x[1]))\n    print(chk)\n    ret.append(chk[0][2])\n\nprint('\\n'.join(map(str, ret)))"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == '2\\n1\\n'\nassert solution(\"2 2\\n-2 0\\n0 0\\n-1 0\\n1 0\\n\") == '1\\n2\\n'\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2\n2 0\n0 0\n-1 0\n1 0''') == '2\\n1'\nassert solution('''3 3\n2 0\n0 0\n-1 0\n1 0\n1 0\n2 0\n0 0\n-2 0\n-1 0\n-1 0\n-2 0''') == '2\\n2\\n1'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __sub__(self, other):\n        return abs(self.x - other.x) + abs(self.y - other.y)\n\n    def __repr__(self):\n        return f\"({self.x},{self.y})\"\n\n    def __hash__(self):\n        return hash((self.x, self.y))"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('1 1\\n1 1\\n1 1') == '1\\n1'\nassert solution('1 2\\n2 2') == '1\\n1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 3\\n0 0\\n0 0\\n0 0\") == \"0\\n0\\n0\"\nassert solution(\"3 3\\n0 0\\n1 1\\n2 2\") == \"1\\n2\\n1\"\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"1\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"1\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"1\\n1\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '14'\n\"\"\"\n\na = int(stdin.readline())"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '14'\n\"\"\"\n\na = int(input())\nprint(a + a**2 + a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '14'\n\"\"\"\n\na = int(input())\n\nprint(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '14'\n\"\"\"\n\n\"\"\"\nGiven an integer a as input, print the value a + a^2 + a^3.\n\n-----Constraints-----\n - 1 \\leq a \\leq 10\n - a is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\n\n-----Output-----\nPrint the value a + a^2 + a^3 as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n14\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('10') == '42'\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 7\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"\n\nimport math\n\na = int(input())\nprint(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '14'\nprint(solution('1\\n'))\nassert solution('3\\n') == '17'\nprint(solution('10\\n'))\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n.#\\n#.\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n#..\\n..#\\n...\\n#.#\\n#..\") == \"Yes\"\nassert solution(\"3 3\\n#.#\\n#.#\\n#.#\") == \"No\"\nassert solution(\"5 1\\n##\\n##\\n#\\n#\\n#\") == \"Yes\"\nassert solution(\"6 5\\n#.#.#\\n#.#.#\\n#.##.\\n#..#\\n#..#\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n.#.#\\n.#.#\\n#.#\\n#.') == 'No'\n\n\"\"\"\nfrom typing import Callable, List, Dict\n\nfrom icontract import require, ensure\n\nfrom aoc.advent2020.day3.core import Direction\nfrom aoc.advent2020.day3.core import Point\nfrom aoc.advent2020.day3.core import Grid\n\n\n@require(lambda rows: len(rows) > 0)\n@ensure(lambda result: len(result) > 0)\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"1 1\\n#.\") == \"Yes\"\nassert solution(\"2 4\\n##\\n##\\n##\\n##\\n##\") == \"No\"\nassert solution(\"4 1\\n....\\n....\\n....\\n....\\n....\") == \"No\"\nassert solution(\"4 4\\n#####\\n#...#\\n#...#\\n#...#\\n#...#\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n.\\n#\\n.\") == \"Yes\"\nassert solution(\"4 4\\n..\\n##\\n.#\\n..\") == \"Yes\"\nassert solution(\"2 2\\n.\\n##\\n..\\n..\") == \"No\"\nassert solution(\"2 2\\n.\\n#\\n..\\n#.\") == \"No\"\n\n\"\"\"\n\nimport sys\nimport os\nimport queue\n\nclass Node:\n    def __init__(self, x, y, parent, num_of_paths, grid, current_cost = 0):\n        self.x = x\n        self.y = y\n        self.parent = parent\n        self.num_of_paths = num_of_paths\n        self.current_cost = current_cost\n        self.grid = grid\n        self.heuristic = 0\n\n    def __lt__(self, other):\n        return self.current_cost + self.num_of_paths < other.current_cost + other.num_of_paths"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"4\"\nassert solution(\"3 9 3\") == \"14\"\nassert solution(\"9 9 9\") == \"36\"\nassert solution(\"9 0 9\") == \"18\"\nassert solution(\"9 9 0\") == \"36\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n\nfrom typing import List, Any\nimport numpy as np"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"3 4 3\") == \"12\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\nimport numpy as np\n\nnums = [int(num) for num in stdin.split(' ')]\n\nnums = np.array(nums)\n\nnums = np.sort(nums)\n\nnums = np.flip(nums)\n\na = nums[0]\nb = nums[1]\nc = nums[2]\n\nprint(a + b)\nprint(a + b + c)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nprint(solution(\"1 5 2\"))"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == '15950'\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint(\"Test 1 PASSED\")\n\nassert solution(\"4\\n5760\\n7720\\n5760\\n4980\") == \"13500\"\nprint(\"Test 2 PASSED\")\n\nassert solution(\"5\\n56890\\n73840\\n61900\\n4980\\n73840\") == \"18880\"\nprint(\"Test 3 PASSED\")\n\nassert solution(\"5\\n56890\\n73840\\n61900\\n4980\\n73840\") == \"18880\"\nprint(\"Test 4 PASSED\")\n\nassert solution(\"6\\n56890\\n73840\\n61900\\n4980\\n73840\\n78900\") == \"18900\"\nprint(\"Test 5 PASSED\")"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n2\\n') == '2'\nassert solution('3\\n1\\n2\\n') == '3'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '8'\nassert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\"\n\nN = int(input())\nL = [int(i) for i in input().split()]\n\nL_new = []\n\nfor i in L:\n    if i % 2 == 0:\n        L_new.append(int(i / 2))\n    else:\n        L_new.append(i)\n\nprint(sum(L_new))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n4980\\n7980\\n6980') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    3\n    4980\n    7980\n    6980\n    \"\"\"\n) == \"15950\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\\n\") == \"215\"\n\nimport os\nimport io\nimport unittest\nfrom unittest.mock import patch\n\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        with patch('sys.stdin', io.StringIO(\"\\n\".join([\n            '29',\n            '20',\n            '7',\n            '35',\n            '120'\n        ]))):\n            with patch('sys.stdout', new_callable=io.StringIO) as stdout:\n                main()\n                self.assertEqual(stdout.getvalue(), \"\\n\".join([\n                    '215'\n                ]) + '\\n')\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"3 7 2 9 10\") == \"13\"\nassert solution(\"5 1 2 3 4\") == \"15\"\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nprint(\"Ok!\")\n\n------------------\n--- Part Two ---\nE869120 is a little bit confused. He doesn't know what time it is. He has written down the following list of information about the dishes and the time it took to serve them:\n - ABC Don (rice bowl): takes A minutes to serve.\n - ARC Curry (pork patty): takes B minutes to serve.\n - AGC Pasta (pig): takes C minutes to serve.\n - APC Ramen (hot dog): takes D minutes to serve.\n - ATC Hanbagu (hamburger patty): takes E minutes to serve.\nHere, the time to serve a dish is the time between when an order is placed and when the dish is delivered.\nE869120 is wondering what is the time it would take to place an order, and where to place it, given the rules.\n\nThe list of dishes and the time it took to serve them is given as a list of strings in a single line, and is separated by a space.\nEach of the strings in the list is composed of two or three words, and the first word is the name of the dish, and the second word (or third word) is the time it takes to serve the dish.\nThe time is an integer, and the unit of time is minute.\n\nThe time to place an order is also given as a single string, which is a space-separated list of integers.\nThe first integer is the time to place the order, and the remaining integers (if any) are the times to place the order for each of the dishes.\nIf there are only two dishes, the remaining times are both 0.\n\nGiven all of this information, find the earliest time to place an order such that all of the dishes are delivered at that time.\n\n-----Constraints-----\n - A, B, C, D and E are integers between 1 and 123 (inclusive).\n\n-----Input-----\nGiven as a single line, the list of dishes and time it took to serve them.\n\n-----Output-----\nPrint the earliest possible time to place an order, as an integer.\n\n-----Sample Input-----\nABC Don 1\nARC Curry 2\nAGC Pasta 3\nAPC Ramen 4\nATC Hanbagu 5\n\n-----Sample Output-----\n4\n\nThere is a way to place the order at time 4, where the dishes are delivered in the following order:\n - Order ABC Don at time 4.\n - Order ARC Curry at time 4.\n - Order AGC Pasta at time 4.\n - Order APC Ramen at time 4.\n - Order ATC Hanbagu at time 4.\nIn this scenario, all of the dishes will be delivered at time 4.\n\n------------------\n--- Part Two ---\nE869120 is trying to order again. Given the following information about the dishes and the time it took to serve them:\n - ABC Don (rice bowl): takes A minutes to serve.\n - ARC Curry (pork patty): takes B minutes to serve.\n - AGC Pasta (pork patty): takes C minutes to serve.\n - APC Ramen (hot dog): takes D minutes to serve.\n - ATC Hanbagu (hamburger patty): takes E minutes to serve.\nThe following list of information about the order is also given:\n - The number of each dish that was ordered.\n - The number of minutes that the dish is left to be served.\nThe time it takes to serve the dishes will be given as a single string, with each integer separated by a space.\n\nFind the earliest time to place the order such that all dishes are delivered at that time.\n\n-----Constraints-----\n - A, B, C, D and E are integers between 1 and 123 (inclusive).\n - The list of dishes and time it took to serve them is a list of strings.\n - The number of dishes and time it took to serve them are positive integers no more than 10000 (inclusive).\n - The number of minutes that the dish is left to be served is a positive integer no more than 1000 (inclusive).\n\n-----Input-----\nGiven as a single line, the list of dishes and time it took to serve them.\n\nThe list of dishes and time it took to serve them is given as a list of strings in a single line, and is separated by a space.\nEach of the strings in the list is composed of two or three words, and the first word is the name of the dish, and the second word (or third word) is the time it takes to serve the dish.\nThe time is an integer, and the unit of time is minute.\n\nThe number of dishes and time it took to serve them is given as a single string, with each integer separated by a space.\nThe number of minutes that the dish is left to be served is also given as a single string, with each integer separated by a space.\nThe number of minutes that the dish is left to be served is a positive integer no more than 1000 (inclusive).\n\n-----Output-----\nPrint the earliest possible time to place the order, as an integer.\n\n-----Sample Input-----\n3 2 1\n5 2 3\n4 1 2\n6\n4 2 2\n3\n\n-----Sample Output-----\n3\n\nGiven the list of dishes and time it took to serve them, it is possible to order the dishes in the following way:\n - Order the dishes in the order ABDC.\nThere are 2 + 3 + 1 = 6 minutes to serve them.\n\nIt is also possible to order the dishes in the following way:\n - Order the dishes in the order AARC.\nThere are 4 + 3 + 2 = 9 minutes to serve them.\n\nThe order in which the dishes are served is the shortest one, so the answer is 3.\n\n------------------\n--- Part Three ---\nE869120 gets a little confused again. He has written down the following information about the dishes and the time it took to serve them:\n - ABC Don (rice bowl): takes A minutes to serve.\n - ARC Curry (pork patty): takes B minutes to serve.\n - AGC Pasta (pork patty): takes C minutes to serve.\n - APC Ramen (hot dog): takes D minutes to serve.\n - ATC Hanbagu (hamburger patty): takes E minutes to serve.\nE869120 is trying to order again. Given the following information about the dishes and the time it took to serve them:\n - ABC Don (rice bowl): takes A minutes to serve.\n - ARC Curry (pork patty): takes B minutes to serve.\n - AGC Pasta (pork patty): takes C minutes to serve.\n - APC Ramen (hot dog): takes D minutes to serve.\n - ATC Hanbagu (hamburger patty):"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"123 5 2 4 7\") == \"123\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 10 20 30 40\") == \"40\"\n\nprint(\"Success!\")\n'''\n\na,b,c,d,e = [int(i) for i in stdin.split()]\nl = [a,b,c,d,e]\nl.sort()\ns = 0\ne = 0\nfor i in range(5):\n    e = e + l[i]\n    if (e % 10) == 0:\n        s = e\nprint(s)"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())\n\ncount = 0\nwhile A!= 0:\n    if A % 10 == 0 and A!= 0:\n        count += 1\n        A = A - 10\n    A = A - 1\n    \nwhile B!= 0:\n    if B % 10 == 0 and B!= 0:\n        count += 1\n        B = B - 10\n    B = B - 1\n    \nwhile C!= 0:\n    if C % 10 == 0 and C!= 0:\n        count += 1\n        C = C - 10\n    C = C - 1\n    \nwhile D!= 0:\n    if D % 10 == 0 and D!= 0:\n        count += 1\n        D = D - 10\n    D = D - 1\n    \nwhile E!= 0:\n    if E % 10 == 0 and E!= 0:\n        count += 1\n        E = E - 10\n    E = E - 1\n    \nprint(count)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"29\\n20\\n7\\n35\\n120\"\n) == \"215\"\n\"\"\"\n\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\nimport numpy as np\n\nn = int(input())\na = list(map(int, input().split()))\ninv = 1\nfor ele in a:\n    inv = inv * (1/ele)\ninv = inv**-1\nprint(np.average(a))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\"\n\nimport math\nimport numpy as np\n\nn = int(stdin)\na = np.array(list(map(int, stdin.split())))"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 30') == '7.5'\n\n\"\"\"\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\n\ns = sum(1 / a for a in A)\nprint(s / sum(a for a in A))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n\") == \"0.5\"\nassert solution(\"2 10\\n\") == \"0.5\"\nassert solution(\"3 10\\n
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 30\") == '7.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n10 20') == '4.83333333'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n10 30') == '7.5'\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 30\") == \"7.5\"\nassert solution(\"10 30\") == \"7.5\"\nassert solution(\"50 25\") == \"0.08333333333333333\"\nassert solution(\"50 1\") == \"1.0\"\nassert solution(\"10 10\") == \"1.0\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1\\n2\\n3\\n4\") == \"1\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n\nimport math\nimport sys\nimport typing"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\nprint(solution(stdin))\n\"\"\"\n\n\"\"\"\nWhen I used this code I got a runtime error:\nYour code is too slow. Try to optimize your solution!\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n\n\nimport heapq\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == expected_result\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('B') == 'A'\nassert solution('A') == 'a'\nassert solution('b') == 'A'\nassert solution('C') == 'c'\nassert solution('c') == 'c'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('B') == 'A'\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\nSample Input:\nA\n\nSample Output:\nA\n\nExplanation:\nA is uppercase, so we should print A.\n\nSample Input:\nb\n\nSample Output:\nb\n\nExplanation:\nb is lowercase, so we should print b.\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\nassert solution('b') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"C\") == \"C\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('B') == 'A'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('B') == 'A'\nassert solution('A') == 'a'\nassert solution('a') == 'a'\nassert solution('b') == 'A'\nassert solution('B') == 'A'\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"B\"\n) == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('B') == 'A'\nassert solution('A') == 'a'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n''') == '6'\n\nimport sys\nassert solution(sys.stdin.read()) == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('4 4\\n') == '24'\nassert solution('2 5\\n') == '0'\nassert solution('1 1\\n') == '0'\nassert solution('3 9\\n') == '7'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"10 3\") == \"9\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 0') == '4'\nassert solution('4 1') == '0'\nassert solution('4 2') == '2'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"\nimport itertools\nimport numpy as np\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1911\") == \"MMYY\"\nassert solution(\"190519\") == \"AMBIGUOUS\"\nassert solution(\"19053\") == \"NA\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"190519\") == \"AMBIGUOUS\"\nassert solution(\"19051919\") == \"NA\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"01\") == \"MMYY\"\nassert solution(\"19\") == \"AMBIGUOUS\"\nassert solution(\"1904\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1804\") == \"MMYY\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YYMM'\n\nYou have a digit sequence S of length 4. You are wondering which of the following formats S is in:\n - YYMM format: the last two digits of the year and the two-digit representation of the month (example: 01 for January), concatenated in this order\n - MMYY format: the two-digit representation of the month and the last two digits of the year, concatenated in this order\nIf S is valid in only YYMM format, print YYMM; if S is valid in only MMYY format, print MMYY; if S is valid in both formats, print AMBIGUOUS; if S is valid in neither format, print NA.\n\n-----Constraints-----\n - S is a digit sequence of length 4.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1905\n\n-----Output-----\nYYMM\n\nMay XX19 is a valid date, but 19 is not valid as a month. Thus, this string is only valid in YYMM format."
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1904') == 'YYMM'\nassert solution('190531') == 'YYMM'\nassert solution('19053130') == 'YYMM'\nassert solution('19053') == 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1915\") == \"YYMM\"\nassert solution(\"1924\") == \"MMYY\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1924\") == \"MMYY\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 2\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"2\\n\"\nassert solution(\"1\\n\") == \"0\\n\"\nassert solution(\"2\\n\") == \"2\\n\"\nassert solution(\"3\\n\") == \"2\\n\"\nassert solution(\"4\\n\") == \"4\\n\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\n'''\n\nimport sys"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n\n\"\"\"\nFind the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.\n\n-----Constraints-----\n - 2\\leq K\\leq 100\n - K is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK\n\n-----Output-----\nPrint the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n2\n\nTwo pairs can be chosen: (2,1) and (2,3).\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\n\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\nprint(solution(\"9 12\"))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n\n\"\"\"\n\nimport os\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\nprint(solution(\"9 12\"))\n'''\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 12\") == \"21\"\nprint(solution(\"9 12\"))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('A B\\n') == ''\nassert solution('A\\nB') == ''\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 12') == '21'\nassert solution('9 0') == '9'\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 12') == '21'\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 12') == '21'\n\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 12') == '21'\nassert solution('12 12') == '0'\n\"\"\"\n\nfrom utils.time import time_me\n\n\n@time_me\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, r = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2919\\n') == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919') == '3719'\n\"\"\"\n\nn, r = input().split()\nk = int(n) - int(r.count('0'))\nprint(k)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"2 2919\n\"\"\") == \"3719\"\n\"\"\"\n\n\"\"\"\n\n\n\n################################################################################\n\"\"\"\n\n\u6e1b\u7b97\u3068\u5272\u308a\u7b97\u3092\u4f7f\u3046\n\n\u8a08\u7b97\u3059\u308b\u6570\u5b57\u3092\u3001\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u7dcf\u5408\u516c\u5f0f\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2919\\n') == '3719'\nprint('Passed')\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2919\\n') == '3719'\n\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_00) == \"4\"\nassert solution(test_01) == \"1\"\nassert solution(test_02) == \"3\"\nassert solution(test_03) == \"2\"\n\"\"\"\nimport math\n\nfrom sys import stdin\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == '4'\n\n\"\"\"\nfrom dataclasses import dataclass, field\nfrom typing import List, Dict\n\n@dataclass\nclass Case:\n    data: List[int]\n    expected: str\n\n@dataclass\nclass Config:\n    case: Case = field(default_factory=Case)\n    expected: str = ''\n\n@dataclass\nclass Testcase:\n    config: Config = field(default_factory=Config)\n    passed: bool = False\n\n    def print(self, message: str = '') -> None:\n        if message:\n            print(f'{message} {self.config.case.data}')\n            print(f'{message} {self.config.expected}')\n        else:\n            print(f'{self.config.case.data}')\n            print(f'{self.config.expected}')\n\n        if self.passed:\n            print('PASSED')\n        else:\n            print('FAILED')\n\n    def test(self) -> None:\n        result = solution(self.config.case.data)\n        if result == self.config.expected:\n            self.passed = True\n        else:\n            self.print(f\"Expected: {self.config.expected}\")\n            self.print(f\"Actual: {result}\")"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 2\") == 4\nassert solution(\"11 10\") == 2\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == \"4\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\nN, K = [int(num) for num in sys.stdin.readline().strip().split()]\n\ncounts = Counter()\nwhile N > 0:\n    counts[N % K] += 1\n    N //= K\n\nprint(counts[1] + counts[K - 1])"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n\nn, k = map(int, input().split())\ncnt = 0\nwhile n:\n    n //= k\n    cnt += n\nprint(cnt)\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == '4'\n\n-------"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(3))\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '3'\nassert solution('10') == '4'\nassert solution('15') == '5'\nassert solution('20') == '5'\nassert solution('25') == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('3') == '1'\nassert solution('5') == '3'\nassert solution('10') == '4'\nassert solution('20') == '6'\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5''') == '''3'''\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n------Problem-----\nA and B are integers between 1 and 16.\nA+B is at most 16.\nCan A and B obey the instruction in the note and take desired numbers of pieces of cake?\n\n------Solution------\n\nPaste your code into this box\n'''\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A, B) == \"Yay!\"\n\"\"\"\n\n\"\"\"\nInput\n5 4\n\nOutput\nYay!\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n') == 'Yay!'"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4\\n2 3\") == \"Yay!\"\nassert solution(\"2 2\\n2 3\") == \"Yay!\"\nassert solution(\"3 4\\n1 1\") == \"Yay!\"\nassert solution(\"5 2\\n3 3\") == \"Yay!\"\nassert solution(\"4 5\\n1 1\") == \"Yay!\"\n\nprint(solution(\"5 4\\n2 2\"))\nprint(solution(\"2 2\\n2 3\"))\nprint(solution(\"3 4\\n1 1\"))\nprint(solution(\"5 2\\n3 3\"))\nprint(solution(\"4 5\\n1 1\"))\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4\\n') == 'Yay!'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    5 4\n    \"\"\"\n    ) == \"Yay!\"\n\n\"\"\"\nFor `a+b=16`\n\nIf both `a=5` and `b=4`, then both `a` and `b` must be even.\nIf `a=5` and `b=3`, then `a` must be even.\nIf `a=4` and `b=3`, then `b` must be even.\nIf `a=3` and `b=4`, then `b` must be even.\nIf `a=2` and `b=4`, then `a` must be even.\nIf `a=1` and `b=4`, then `b` must be even.\n\nTherefore, `a+b=16` can be satisfied by `a+b=4+4` or `a+b=6+2` or `a+b=10+0`.\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1 2\\n3 2') == 'Yay!'\nassert solution('4 6\\n2 4\\n1 3\\n3 2\\n6 4') == 'Yay!'\nassert solution('1 2\\n3 4\\n4 5\\n5 6\\n6 7') == 'Yay!'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234567876') == '34'\n\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline()"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234') == '9'\nassert solution('12345') == '9'\nassert solution('123456') == '9'\nassert solution('1234567') == '9'\nassert solution('12345678') == '9'\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234567876') == '34'\nassert solution('1111222233334444') == '0'\nassert solution('1223456789') == '0'\nassert solution('12234567') == '0'\nassert solution('111222333') == '0'\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\n\nprint(max(0, 753 - int(S)))\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 13 52 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 9\\n\") == \"1 7\"\nassert solution(\"3 12 6\\n\") == \"5 3\"\nassert solution(\"7\\n13 52 0 13 26 52\\n\") == \"12 13\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 2 1000000000 4 6 8 4 2') == '2999999987 2'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 13 52 0 13 26 52') == '12 13'\n\n-----Test Input-----\n2\n2 9\n3 12 6\n6 13 52 0 13 26 52\n7 13 52 0 13 26 52\n\n-----Test Output-----\n5 3\n1 7\n2999999987 2\n2999999987 2\n\n-----test Input-----\n3\n1 1 2\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20\n21 21\n22 22\n23 23\n24 24\n25 25\n26 26\n27 27\n28 28\n29 29\n30 30\n31 31\n32 32\n33 33\n34 34\n35 35\n36 36\n37 37\n38 38\n39 39\n40 40\n41 41\n42 42\n43 43\n44 44\n45 45\n46 46\n47 47\n48 48\n49 49\n50 50\n51 51\n52 52\n53 53\n54 54\n55 55\n56 56\n57 57\n58 58\n59 59\n60 60\n61 61\n62 62\n63 63\n64 64\n65 65\n66 66\n67 67\n68 68\n69 69\n70 70\n71 71\n72 72\n73 73\n74 74\n75 75\n76 76\n77 77\n78 78\n79 79\n80 80\n81 81\n82 82\n83 83\n84 84\n85 85\n86 86\n87 87\n88 88\n89 89\n90 90\n91 91\n92 92\n93 93\n94 94\n95 95\n96 96\n97 97\n98 98\n99 99\n100 100\n101 101\n102 102\n103 103\n104 104\n105 105\n106 106\n107 107\n108 108\n109 109\n110 110\n111 111\n112 112\n113 113\n114 114\n115 115\n116 116\n117 117\n118 118\n119 119\n120 120\n121 121\n122 122\n123 123\n124 124\n125 125\n126 126\n127 127\n128 128\n129 129\n130 130\n131 131\n132 132\n133 133\n134 134\n135 135\n136 136\n137 137\n138 138\n139 139\n140 140\n141 141\n142 142\n143 143\n144 144\n145 145\n146 146\n147 147\n148 148\n149 149\n150 150\n151 151\n152 152\n153 153\n154 154\n155 155\n156 156\n157 157\n158 158\n159 159\n160 160\n161 161\n162 162\n163 163\n164 164\n165 165\n166 166\n167 167\n168 168\n169 169\n170 170\n171 171\n172 172\n173 173\n174 174\n175 175\n176 176\n177 177\n178 178\n179 179\n180 180\n181 181\n182 182\n183 183\n184 184\n185 185\n186 186\n187 187\n188 188\n189 189\n190 190\n191 191\n192 192\n193 193\n194 194\n195 195\n196 196\n197 197\n198 198\n199 199\n200 200\n201 201\n202 202\n203 203\n204 204\n205 205\n206 206\n207 207\n208 208\n209 209\n210 210\n211 211\n212 212\n213 213\n214 214\n215 215\n216 216\n217 217\n218 218\n219 219\n220 220\n221 221\n222 222\n223 223\n224 224\n225 225\n226 226\n227 227\n228 228\n229 229\n230 230\n231 231\n232 232\n233 233\n234 234\n235 235\n236 236\n237 237\n238 238\n239 239\n240 240\n241 241\n242 242\n243 243\n244 244\n245 245\n246 246\n247 247\n248 248\n249 249\n250 250\n251 251\n252 252\n253 253\n254 254\n255 255\n256 256\n257 257\n258 258\n259 259\n260 260\n261 261\n262 262\n263 263\n264 264\n265 265\n266 266\n267 267\n268 268\n269 269\n270 270\n271 271\n272 272\n273 273\n274 274\n275 275\n276 276\n277 277\n278 278\n279 279\n280 280\n281 281\n282 282\n283 283\n284 284\n285 285\n286 286\n287 287\n288 288\n289 289\n290 290\n291 291\n292 292\n293 293\n294 294\n295 295\n296 296\n297 297\n298 298\n299 299\n300 300\n301 301\n302 302\n303 303\n304 304\n305 305\n306 306\n307 307\n308 308\n309 309\n310 310\n311 311\n312 312\n313 313\n314 314\n315 315\n316 316\n317 317\n318 318\n319 319\n320 320\n321 321\n322 322\n323 323\n324 324\n325 325\n326 326\n327 327\n328 328\n329 329\n330 330\n331 331\n332 332\n333 333\n334 334\n335 335\n336 336\n337 337\n338 338\n339 339\n340 340\n341 341\n342 342\n343 343\n344 344\n345 345\n346 346\n347 347\n348 348\n349 349\n350 350\n351 351\n352 352\n353 353\n354 354\n355 355\n356 356\n357 357\n358 358\n359 359\n360 360\n361 361\n362 362\n363 363\n364 364\n365 365\n366 366\n367 367\n368 368\n369 369\n370 370\n371 371\n372 372\n373 373\n374 374\n375 375\n376 376\n377 377\n378 378\n379 379\n380 380\n381 381\n382 382\n383 383\n384 384\n385 385\n386 386\n387 387\n388 388\n389 389\n390 390\n391 391\n392 392\n393 393\n394 394\n395 395\n396 396\n397"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 4 1') == '3'\nassert solution('1 1 1') == '1'\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 4 1\\n1 1 1 2 2') == '3'\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\nassert solution('5\\n1 1 1 2 2') == '2'"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n3 1 4 1''') == 3\nassert solution('''3\n1 1 1''') == 1\nassert solution('''5\n1 1 1 2 2''') == 2\nassert solution('''1\n1 1''') == 1\nassert solution('''5\n1 2 1 3 2''') == 3\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 4 1') == '3'\nassert solution('3 1 4 1') == '1'\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 4 1\\n') == '3'\nassert solution('3 1 4 1\\n') == '1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\nres = 0\n\nfor i in range(len(a)):\n    if i + 1 < len(a) and a[i] < a[i + 1] and a[i] < a[i + 2]:\n        res += 1\n    else:\n        break\n\nprint(res)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"tests/3.txt\", \"r\").read()) == 3\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nimport math\nimport collections\nimport itertools\nfrom typing import Counter\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 1\") == 3\n\nassert solution(\"4 1 4 1\") == 2\nassert solution(\"3 1 1 1\") == 1\nassert solution(\"1 1 1 2 2\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 4 1\") == \"3\"\nassert solution(\"3\\n1 1 4 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport os\nimport math"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\\n\"\nassert solution(\"2 0\\n\") == \"1\\n1 2\\n\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\\n\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 0\\n1 3') == '1\\n1 2\\n2 3'\nassert solution('3 2\\n1 3\\n2 3') == '2'\nassert solution('4 3\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('4 4\\n1 2\\n2 3\\n3 4') == '0'\n\nassert solution('4 2\\n1 2\\n2 3\\n3 4') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"4 0\\n1 2\\n2 3\") == \"1\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\"\nassert solution(\"2 0\\n\") == \"1\\n1 2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\\n\"\n\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"2\\n4 2\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\\n2 3\\n2 4\") == \"2\\n4 2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n1 2\\n') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2'\nassert solution('2 0') == '1\\n1 2'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == 11\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == 4\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example1) == 11\nassert solution(example2) == 4\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nprint('Passed!')\n\n\"\"\"\nimport sys\n\ninputs = sys.stdin.readlines()\nn, k = list(map(int, inputs[0].split()))\na = list(map(int, inputs[1].split()))"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nprint('Test passed')\n\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'\nprint('Test passed')\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n---"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\n\nassert solution(\"1\\n3 2\\n5 6\\n7 8\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\nassert solution(\"6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\nassert solution(\"8 2\\n1 3\\n3 2\\n4 3\\n6 5\\n7 5\\n4 6\\n\") == \"7\"\nassert solution(\"9 1\\n4 8\\n1 4\\n2 3\\n2 5\\n4 9\\n5 6\\n6 7\\n7 8\\n9 8\\n\") == \"12\"\nassert solution(\"7 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n''') == '11'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 10\") == \"2 3\"\n\"\"\"\n\nfrom typing import List, Tuple\nfrom collections import defaultdict\nimport functools"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 2\\n') == '1 1\\n1 2'\nassert solution('2 3\\n1 2 3 4\\n1 9 12 23\\n') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n1 2 3 4\\n1 9 12 23\\n') == '1 1\\n1 9'\nassert solution('2 3\\n1 2 3 4\\n1 9 12 23\\n') == '1 1\\n1 9'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\n\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\n\n\n-----\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nfrom collections import defaultdict"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\\n\") == \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n\"\n\n\"\"\"\n\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nd = dict(zip(b, range(1, len(b) + 1)))\n\nfor i in range(m):\n    print(d.get(a[i], i + 1), end=' ')\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 3\n5 10000000000\n5 6 9999999999\"\"\") == \"\"\"1 1\n1 9\n2 2\n2 13\"\"\"\n\nassert solution(\"\"\"3 6\n10 15 12\n1 9 12 23 26 37\"\"\") == \"\"\"1 1\n1 9\n2 2\n2 13\"\"\"\nassert solution(\"\"\"2 3\n5 10000000000\n5 6 9999999999\n\"\"\") == \"\"\"1 5\n2 1\n2 9999999994\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6 5 4''') == '2 1 3'\nassert solution('''40 40 40 60''') == '20 20 20'\nassert solution('''201 101 101 200''') == '1 100 100'\nassert solution('''123 123 123 1234 123''') == '1 2 3 4'\nassert solution('''123 123 123 1234 1234''') == '1 2 3 4'\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\n\nfrom itertools import permutations\nfrom itertools import combinations\nimport numpy as np\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\"\"\"\n\nimport ast\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\nimport sys\na,b,c,d=map(int,sys.stdin.readline().split())\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\nassert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\nassert solution('314 159 265 319') == '1 2 2'\nassert solution('1 1 1 1') == '1 1 1'\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 'B'\nassert solution(8) == 'BGRGBRGR'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRBGBGBGRG'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRBGBGBGRG'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"BGBGBGGBBBB\") == \"BGRRRRRRR\"\nassert solution(\"BBBGBRRR\") == \"BGBGRRRR\"\nassert solution(\"RRRGGGGBBB\") == \"RRRGGGGBBB\"\nassert solution(\"GGGGGGGGBB\") == \"RRRRRRRRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRRBGRRRGGBG\"\n\nprint(\"Test passed\")\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRBBGBGBGRG\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == 2\nassert solution(\"8\\nBBBGBRRR\\n\") == 2\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == 6\n\nprint(solution(\"9\\nRBGRRBRGG\\n\"))\nprint(solution(\"8\\nBBBGBRRR\\n\"))\nprint(solution(\"13\\nBBRRRRGGGGGRR\\n\"))\n\n\n---"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRBGBGBGRG\"\n\"\"\"\nimport math"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRRRBGBGGRGGR'\n\n################################################################################"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 4 7 5 6\") == \"4\"\nassert solution(\"1 3 5 2 4\") == \"2\"\nassert solution(\"1 3 5 2 4\") == \"2\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 4 7 5 6 8') == '4'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('10 9 8 7') == '1'\nassert solution('6 7 8 3 4 5 9 10 11') == '1'\nassert solution('9 10 11 3 4 5 6 7 8') == '1'\n\"\"\"\nimport math\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == '4\\n2 3 5 6'\nassert solution(\"6\\n1 3 5 2 4 6\") == '2\\n1 4'\nassert solution(\"4\\n10 9 8 7\") == '1\\n1'\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == '6\\n1 2 3 7 8 9'"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 4 7 5 6\") == '4'\nassert solution(\"1 3 5 2 4 6\") == '2'\nassert solution(\"6 7 8 3 4 5 9 10 11\") == '6'\nassert solution(\"10 9 8 7\") == '1'\nassert solution(\"6 7 8 3 4 5 9 10 11\") == '6'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 4 7 5 6') == '4'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('10 9 8 7') == '1'\nassert solution('1 3 5 2 4 6') == '2'"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 4 7 5 6') == '4\\n2 3 5 6'\nassert solution('4\\n10 9 8 7') == '1\\n1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6\\n1 2 3 7 8 9'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"4 10 9 8 7\") == \"1\\n1\"\nassert solution(\"9 10 8 7 6 5 4 3 2 1\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"1 3 5 2 4\") == \"2\\n1 4\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"4 10 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'Yes'\n\n3\n5 4\n3 6\n3 5\n9 0\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n\"\"\"\n\nA, B = input().split()\nC = int(A) * int(B)\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n'''"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('1 2') == 'No'\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('2 3') == 'No'\nassert solution('4 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"3 3\") == \"Yes\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('81 58\\n') == '110'\nprint(\"Passed!\")\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"1 10000\") == \"10000\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(\"Test resulted in positive result\")\n\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('81 58') == '110'\nassert solution('81 49') == '91'\nassert solution('99 1') == '100'\nassert solution('9 99') == '90'\nassert solution('81 49') == '91'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\nimport math"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\n\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"8\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n\nN = int(input())\n\ncount = 0\nfor i in range(N + 1):\n    for j in range(N + 1):\n        for k in range(N + 1):\n            if len(\"\".join([str(i), str(j), str(k)])) == N:\n                count += 1\nprint(count)\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nn = int(stdin.readline())\nprint(int(pow(9,n))-1)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '8'\n\n\"\"\"\n\n\"\"\"\nGiven two integers a and b, which can be positive or negative, find the sum of all the numbers between including them too and return it. If the two numbers are equal return a or b.\nNote: a and b are not ordered!\nExamples\nget_sum(1, 0) == 1   // 1 + 0 = 1\nget_sum(1, 2) == 3   // 1 + 2 = 3\nget_sum(0, 1) == 1   // 0 + 1 = 1\nget_sum(1, 1) == 1   // 1 Since both are same\nget_sum(-1, 0) == -1 // -1 + 0 = -1\nget_sum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('2') == 2\nassert solution('11') == 2\nassert solution('222') == 4\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nN = int(input())\ntotal = N*(N+1)*(N+2)/6\nprint(int(total))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 8\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n\"\"\"\n\nimport math\n\nn = int(input())\n\nprint(math.factorial(n))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('7') == 'YES'\nassert solution('9') == 'YES'\nassert solution('11') == 'NO'\nassert solution('13') == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nprint('Passed')\n\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"9\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"8\") == \"NO\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"NO\"\nassert solution(\"10\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\nassert solution('8') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ABC'\nassert solution('CDE') == 'ABC'\nassert solution('DEF') == 'ABC'\nassert solution('GHI') == 'ABC'\nassert solution('JKL') == 'ABC'"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('999') == 'ABC'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n\nimport math\nimport sys\n\n\"\"\"\nf = 10^k - 1\nf = a * 10^k\nf = a * 10^(k - 1)\nf = a * (10^(k - 1) - 1)\nf = a * k - 1\n\nn = a * 10^k + b\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n\nn = input()\nprint(n[0] + n[1] + n[2])\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\nABC = \"ABC\"\nABC_ = \"ABC\" + \"0\" * (3 - len(str(N)))\n\nABC = ABC + ABC_ * N\n\nprint(ABC[:3])\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'ABC'\nassert solution('3') == 'ABC'\nassert solution('999') == 'ABC'\nassert solution('100') == 'ABC'\nassert solution('1000') == 'ABD'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABC\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"\nimport math"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n10\\n15\\n') == ':(\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == ':(\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n16') ==':( '\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7') ==':( '\nassert solution('1\\n2\\n3\\n4\\n5\\n8') ==':( '\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n8\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n1\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n3\") == \":(\\n\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 3 5 9\") == \"Yay!\"\nassert solution(\"1 2 3 4 5\") == \"Yay!\"\nassert solution(\"1 2 3 4 6\") == \"Yay!\"\nassert solution(\"1 2 3 5 7\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\n\nprint(solution(\"1 2 4 8 9 15\"))\n\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"Yay!\"\nassert solution(\"0 2 4 8 9 14\") == \":(\nassert solution(\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"Yay!\"\nassert solution
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 4 8 10 15\") == \":("
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"3500\") == \"red\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a='3200', s='pink') == 'pink'\nassert solution(a='2800', s='qwer') =='red'\n\"\"\"\n\na = int(input())\ns = str(input())\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pink\") == \"pink\"\n\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\nassert solution(\"blue\") == \"blue\"\nassert solution(\"green\") == \"green\"\nassert solution(\"yellow\") == \"yellow\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pink') == 'pink'\n\nsolution(\"pink\") # => 'pink'\n\nsolution(3200) # =>'red'\n\nsolution(2800) # =>'red'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\nassert solution('blue') =='red'\n\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1200\") == 'ABC'\nassert solution('1199') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'\n\n'''\n\nimport math\n\nr = int(stdin.readline().strip())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1199') == 'ABC'\n\nsolution('1199')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('1201') == 'ARC'\nassert solution('2800') == 'AGC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1200\") == \"ABC\"\n\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1280') == 'ABC'\nassert solution('1500') == 'ARC'\nassert solution('1800') == 'AGC'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1244') == 'ARC'\nassert solution('2853') == 'AGC'\nassert solution('4974') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1199\") == \"ABC\"\nassert solution(\"1114\") == \"ARC\"\nassert solution(\"1121\") == \"AGC\"\nassert solution(\"1153\") == \"AGC\"\nassert solution(\"1185\") == \"ARC\"\n\nprint(solution(\"1199\"))\nprint(solution(\"1114\"))\nprint(solution(\"1121\"))\nprint(solution(\"1153\"))\nprint(solution(\"1185\"))\n\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1200\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'\nassert solution('4208') == 'AGC'\nassert solution('0') == 'ABC'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '111'\nassert solution('111') == '999'\nassert solution('111') == '111'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == '999'\nassert solution('9') == '1'\nassert solution('99') == '1'\nassert solution('9') == '9'\nassert solution('99') == '1'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"321\"\nassert solution(\"999\") == \"999\"\nassert solution(\"9\") == \"1\"\nassert solution(\"11\") == \"11\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '109'\nassert solution('981') == '988'\nassert solution('961') == '966'\nassert solution('999') == '100'\nassert solution('891') == '890'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"13579\") == \"34579\"\nassert solution(\"10000\") == \"10001\"\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"999\"\nassert solution(\"912\") == \"111\"\nassert solution(\"919\") == \"999\"\nassert solution(\"91919\") == \"191919\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"321\"\nassert solution(\"999\") == \"1111\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"999\") == \"1111\"\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nfor line in lines:\n    print(line.replace(\"1\", \"9\").replace(\"9\", \"1\"))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"111\"\n\"\"\"\n\nn = input()\n\nprint(int(n.replace(\"1\",\"9\").replace(\"9\",\"1\")))"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"179\") == \"991\"\nassert solution(\"123\") == \"111\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"aaaaaaaa\") == \"aaaaaaaa\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\"\"\"\nimport sys\nimport collections\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == b\nassert solution(a)!= c\nassert solution(a) == d\nassert solution(a)!= e\n\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"abac\"\nassert solution(\"abbc\") == \"abcc\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 7\\n1 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n2') == '0'\nassert solution('3\\n4') == '2'\n\"\"\"\nimport math"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\\n13 9\") == '2'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == 2\n\"\"\"\n\nimport sys\nt = int(sys.stdin.readline().strip())\nwhile t > 0:\n    a,b = map(int, sys.stdin.readline().split())\n    print(a//b)\n    t -= 1\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"10 3\") == \"0\"\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 4') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\\n13 9\") == \"2\"\nassert solution(\"100 13\\n123 456\") == \"4\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nimport sys\nimport re\nimport math\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nfrom math import ceil, sqrt, floor, log\nimport numpy as np\nimport sys\n\ninput_list = list(map(int, sys.stdin.readline().split()))\nn, k = input_list[0], input_list[1]\na = list(map(int, sys.stdin.readline().split()))\na = [x for x in a if x!= 0]\nn = len(a)\nx_0 = ceil(n / k)\nsum_1 = sum(a[0:x_0])\nsum_2 = sum(a[0:2 * x_0])\nsum_3 = sum(a[0:3 * x_0])\nsum_4 = sum(a[0:4 * x_0])\nsum_5 = sum(a[0:5 * x_0])\nsum_6 = sum(a[0:6 * x_0])\nsum_7 = sum(a[0:7 * x_0])\nsum_8 = sum(a[0:8 * x_0])\n\nx_1 = 2 * x_0 - 1\nx_2 = 3 * x_0 - 2\nx_3 = 4 * x_0 - 3\nx_4 = 5 * x_0 - 4\nx_5 = 6 * x_0 - 5\nx_6 = 7 * x_0 - 6\nx_7 = 8 * x_0 - 7\nx_8 = 9 * x_0 - 8"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n\"\"\"\nimport sys\nfrom math import inf, log, ceil"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n\nimport numpy as np\nimport re\nfrom math import ceil"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n-----Constraints-----\n\nThe number of days in the period will be a positive integer between 1 and 5000.\n\nThe number of temperature measurements on each day will be a positive integer between 1 and 5000.\n\nThe number of segments to analyze will be a positive integer between 1 and 5000.\n\nThe minimum number of days in a segment will be between 1 and 5000.\n\nThere will not be any measurement error in the input.\n\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\nt = list(map(int, input().split()))\n\nt_max = 0\nfor i in range(n-k+1):\n    t_max = max(t_max, sum(t[i:i+k])/k)\nprint(t_max)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution([\"3 4 1 2\"]) == \"2.666666666666667\"\nassert solution([\"4 3 1 2\"]) == \"2.0\"\n\n-----Note-----\nInput of a single test case will be handled in one iteration. For example, the first test case would be represented as a single line (i.e. no empty lines or spaces).\n\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n\"\"\"\n\nn, k = [int(i) for i in input().split(' ')]\na = [int(i) for i in input().split(' ')]\n\nsum = 0\nmax_sum = 0\n\nfor i in range(n):\n    if i + k >= n:\n        break\n    else:\n        sum = 0\n        for j in range(i, i + k):\n            sum += a[j]\n        if sum > max_sum:\n            max_sum = sum\nprint(max_sum / k)\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"1 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\nassert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"4 1\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"4 3\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"4 4\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'YES'\nassert solution('4 2\\n4 1 2 3\\n1 2\\n1 3\\n3 2') == 'NO'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('a') == 'YES'\nassert solution('b') == 'YES'\nassert solution('ab') == 'NO'\nassert solution('ba') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 2 1') == 'NO'\nassert solution('3 2 1 2') == 'NO'\nassert solution('3 2 1 2 3') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\n'''"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\"\n\n\nfrom typing import List, Tuple, Set"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n') == 'NO'\nassert solution('2\\n') == 'YES'\nassert solution('3\\n') == 'NO'\nassert solution('4\\n') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\nassert solution('aba') == 'aba'\nassert solution('aaaa') == 'aaaa'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"oopppssss\") == \"oops\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nassert solution(\"zabbb\") == \"zbabbb\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bab') == 'baabbb'\nassert solution('baabbb') == 'bab'\n\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\n\nprint('All test cases passed!')\n\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\nassert solution(\"baabbb\") == \"bab\"\n\nassert solution(\"oospp\") == \"oops\"\n\nassert solution(\"oooops\") == \"oops\"\n\nassert solution(\"z\") == \"z\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\nprint(solution('ooopppssss'))\nprint(solution('z'))"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\nassert solution(\"ooopppssss\") == \"oops\"\n\"\"\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\n\nassert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"2\"\n\nassert solution(\"1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"1\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\") == \"0\"\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '2'\nassert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '2'\nassert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\nassert solution('1 0\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 3 1') == '1'\nassert solution('2 4 5') == '1'\nassert solution('1 4 2') == '1'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\n\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"1\"\n\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == '1'\nassert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '0'\nassert solution(\"1 0\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"0\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"1\"\nassert solution(\"1 0\") == \"0\"\n\nprint(solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\"))"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RR\") == \"RR\"\n\"\"\"\n\nn = int(input())\nstring = input()\nres = n\nfor i in range(1, n):\n    if abs(ord(string[i]) - ord(string[i - 1])) % 3!= 0:\n        res += 1\n\nprint(res)\nprint(string[0] * res)\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\n\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBG\") == \"GRBGRBG\"\nassert solution(\"RR\") == \"\"\nassert solution(\"RGBG\") == \"RR\"\nassert solution(\"R\") == \"R\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RRRRRRRRR\") == \"RRRRRRRRR\"\nassert solution(\"RRRGGBBB\") == \"RGBGRBB\"\n\nprint(solution(\"RGBGRBB\"))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RGBGRBB') == 'RGBRGBR'\n\nassert solution('RBRGBRGRGGB') == 'RRGBB'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('GRB') == 'R'\nassert solution('RGBG') == 'G'\nassert solution('RGBGRB') == 'R'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == 'RGBRGBR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RGBGRBB') == 'RGBGRB'\nassert solution('RBBB') == 'RRB'\nassert solution('RRGB') == 'RRGB'\nassert solution('GBB') == 'GBB'\nassert solution('BBB') == 'BBB'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('RR') == 'RR'\nassert solution('RGBG') == 'RR'\nassert solution('RGBGRR') == 'RR'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == 48000\n\"\"\"\n\nimport sys\nimport decimal"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n\nN = int(input())\nd = {}\nfor i in range(N):\n    val, u = map(str, input().split())\n    if u == \"JPY\":\n        val = int(val)\n    d[u] = val\n\nprint(sum(d[u] * d[v] for u, v in zip(d, d.keys())))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == '48000.0'\nassert solution('1\\n0.0048473668024421386 BTC\\n2.240439071148555e-05 BTC') == '5428.7572299285'\nassert solution('2\\n0.0048473668024421386 BTC\\n2.240439071148555e-05 BTC\\n0.0048473668024421386 BTC\\n2.240439071148555e-05 BTC') == '5428.7572299285'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\nassert solution('10000 JPY\\n1.10000000 BTC') == '0.0'\nassert solution('10000 JPY\\n1.0 BTC') == '48000.0'\n\n-----\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n10000 JPY\n0.10000000 BTC\n\"\"\") == \"48000.0\"\n\nassert solution(\"\"\"\n2\n10000 JPY\n0.10000000 BTC\n\"\"\") == \"48000.0\"\n\n\"\"\"\nThis is the first solution I came up with for this problem. I decided to try to solve this by creating a dictionary and then checking the values of each gift to see if it is in either JPY or BTC.\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == '48000.0'\n\n-----Explanation-----\nThe solution is:\n\nTwo people shared the otoshidama.\nThe first person gave 10000 yen otoshidama, which is the same as 10,000 yen yen.\nThe second person gave 0.1 bitcoins, which is 0.1 bitcoins.\n10,000 yen yen is worth 48,000 yen.\n0.1 bitcoins is worth 38,000 yen if converted at the rate of 380000.0 JPY per 1.0 BTC.\n48000.0 yen is the sum of these two.\n\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\nassert solution('3\\n10000 JPY\\n0.10000000 BTC\\n100000 USD\\n') == '49000.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4') == '3'\nprint(solution('4 2'))\n\n\"\"\"\nimport sys\nfrom typing import Optional\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n\nN, i = [int(i) for i in stdin.readline().split()]\n\nprint(int(N / 2 + i - 1))\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 3\nassert solution(\"6 3\") == 5\nassert solution(\"7 1\") == 6\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(test_input))\n\"\"\"\n\nn, i = map(int, input().split())\nprint(n-i)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\nip\\ncc\") == \"icpc\"\nassert solution(\"1\\nip\\ncc\") == \"icpc\"\nassert solution(\"1\\nip\\ncc\") == \"icpc\"\n\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\nip cc''') == 'icpc'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nassert solution(\"abc\") == \"aabbcc\"\nassert solution(\"abcdef\") == \"abbccddeeff\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 ab') == 'baa'\nassert solution('5 abc') == 'bacbac'\nassert solution('3 abc') == 'abcabc'\n\n---\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ip cc') == 'icpc'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a' * 2\nassert solution('ba') == 'a' * 2 + 'b'\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\nimport re"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABA') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\nassert solution(\"BBA\") == \"No\"\nassert solution(\"BBAB\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\n\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\n\n\"\"\"\n\n\nimport re\nimport sys\nfrom typing import AnyStr\nfrom typing import List\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABB') == 'No'\nassert solution('ABA') == 'Yes'\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AAA') == 'Yes'\nassert solution('BBB') == 'No'\nassert solution('BAB') == 'No'\nassert solution('AAB') == 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n\nS = input()\n\nprint('Yes' if S.count('B') == 2 and S.count('A') == 1 else 'No')\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"AAB\") == \"No\"\nassert solution(\"BAA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABA') == 'Yes'\n\nassert solution('BBA') == 'No'\n\nassert solution('BBB') == 'No'\n\nassert solution('AAA') == 'No'\n\nassert solution('ABB') == 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == 'Yes'\nassert solution(\"AAB\") == 'No'\nassert solution(\"BBA\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"SRSRSS\") == 4\nassert solution(\"S\") == 1\nassert solution(\"SS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"RR\") == 1\nassert solution(\"RS\") == 0\nassert solution(\"SS\") == 1\nassert solution(\"S\") == 0\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected_result\n\nhttps://atcoder.jp/contests/abc180/tasks/abc180_e\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RRR') == '3'\nassert solution('SRS') == '2'"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRR') == '3'\nassert solution('RRS') == '2'\nassert solution('RSS') == '1'\nassert solution('SRS') == '2'\nassert solution('SRR') == '0'\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRS') == 2\n\"\"\"\n\ns = stdin.readline()\ns = list(s)\ncount = 0\nfor i in range(len(s)):\n    if s[i] == \"R\":\n        count += 1\n    else:\n        count = 0\n    if count == 3:\n        print(i+1-count)\n        break\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRR') == 3\n\"\"\"\n\nfrom typing import Dict, List"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRS') == 2\nassert solution('SSS') == 3\nassert solution('RRRR') == 4\nassert solution('SSSS') == 4\nassert solution('SSSR') == 3\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n3 2 1\") == \"3 1 2\"\nassert solution(\"3 1 2\\n2 1 3\") == \"2 1 3\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"3 1 2\\n7 5 4\\n10 8 11\\n12 9 6\"\n\n-----"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3 1 2'\nassert solution('1 2 3 4 5') == '3 4 5 1 2'\nassert solution('1 2 3 4 5 6 7') == '3 4 5 6 7 1 2'\nassert solution('1 2 3 4 5 6 7 8 9') == '3 4 5 6 7 8 9 1 2'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''1 2 3\n4 5 6\n7 8 9'''\n) == '''4 5 6\n7 8 9\n1 2 3'''\n\nassert solution(\n'''1 2 3\n4 5 6\n7 8 9'''\n) == '''4 5 6\n7 8 9\n1 2 3'''\n\nassert solution(\n'''6 5 7\n9 8 3\n3 2 1'''\n) == '''9 8 3\n6 5 7\n3 2 1'''\n\nassert solution(\n'''6 5 7\n9 8 3\n3 2 1'''\n) == '''9 8 3\n6 5 7\n3 2 1'''\n\nassert solution(\n'''4 5 6\n7 8 9\n1 2 3'''\n) == '''4 5 6\n7 8 9\n1 2 3'''"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\n---\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 3 1\") == \"1 2 3\"\nassert solution(\"3 1 2\") == \"2 3 1\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2 3''') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 2 3''') == '''3 1 2'''\nassert solution('''1 2 3''') == '''3 1 2'''\nassert solution('''1 2 3''') == '''3 1 2'''\nassert solution('''1 2 3''') == '''3 1 2'''\nassert solution('''1 2 3''') == '''3 1 2'''\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('30 100') == '100'\nprint(solution('30 100'))\n\n'''"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30 100\") == \"100\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '5'\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == B\n\nprint(solution(A))"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10') == '10'\nassert solution('40 1000') == '1000'\nassert solution('5 2') == '10'\nassert solution('2 10') == '10'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 30\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 100\") == \"10\"\nassert solution(\"10 150\") == \"20\"\nassert solution(\"10 300\") == \"50\"\nassert solution(\"10 600\") == \"200\"\nassert solution(\"10 900\") == \"300\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A B\\n') == 'A B\\n100'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+\") == \"1\"\nassert solution(\"-\") == \"0\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+-') == 2\n\"\"\"\n\n\"\"\"\nimport sys\n\ns = sys.stdin.readline()\nprint(int(s.strip()) - 1)\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"-++\") == \"0\"\nassert solution(\"+-++\") == \"1\"\nassert solution(\"++-\") == \"0\"\nassert solution(\"-+++\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"++\") == \"2\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"+-\") == \"0\"\nassert solution(\"-\") == \"0\"\nassert solution(\"--\") == \"0\"\nassert solution(\"-/\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == '2'"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+++\") == \"2\"\nassert solution(\"+\") == \"1\"\nassert solution(\"\") == \"0\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == 2\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('+-') == '0'\nassert solution('+-++') == '1'\nassert solution('++-') == '0'\nassert solution('+') == '1'\nassert solution('-') == '0'\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == result"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2018/01/22') == 'TBD'\n\nprint('All test cases passed.')\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\"\nimport datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '2019/04/30'\n) == 'Heisei'\nassert solution(\n    '2019/08/31'\n) == 'TBD'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2019/04/30') == 'Heisei'"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2020/04/30') == 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\"\nimport re\nimport datetime"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\nassert solution('3\\n2 1 2') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 3 4\") == \"1\"\nassert solution(\"10 9 8 7 6 5\") == \"6\"\nassert solution(\"4 1 2 3\") == \"2\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"18\") == 14\nassert solution(\"10\") == 9\nassert solution(\"3\") == 3"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\n\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\n\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\n\"\"\"\nn = 10\na = [2, 1, 2, 10, 2, 10, 2, 2, 1, 10, 10, 10, 1, 1, 10, 10]\n\"\"\"\n\na.sort()\na = a[::-1]"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"18 2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3 1337 1337 1337\") == \"3\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('5 2') == ''\nassert solution('10 4') == ''\nassert solution('7 2') == ''\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"100 20\\n10 18 17 16 15 14 13 12 11 10 10\") == \"20\\n18 17 16 15 14 13 12 11 10\"\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\n1 3 2'\n'''\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"10 7\\n1 3 2 2 3 2 3 3 2\\n\") == \"6\\n6 3 2 1\"\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == 2\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == 3\nassert solution(\"5 4\\n2 2 1 2 2\") == 2\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 2 3 3 1 1 2 1 2 3 3\") == \"3 1 2\"\nassert solution(\"7 2 1 2 1 3 2 1 3 2\") == \"2 1\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\nassert solution(\"10 100\") == \"1 3 2\"\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\nimport sys\nfrom math import log\n\nn, q = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nfor _ in range(q):\n    b = int(sys.stdin.readline())\n    x = log(b, 2)\n    if x in a:\n        print(a.index(x) + 1)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 4\n2 4 8 2 4\n8\n5\n14\n10\"\"\") == \"\"\"1\n-1\n3\n2\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1\\n1'\nassert solution('1\\n1\\n1\\n1') == '1\\n1\\n1\\n1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '1\\n2\\n3\\n4\\n5\\n6\\n7'\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 4\n2 4 8 2 4\n8\n5\n14\n10\"\"\") == \"\"\"5 4\n-1\n2\n2\n2\n\"\"\"\nprint(\"The set of solutions is:\", solution(\"\"\"5 4\n2 4 8 2 4\n8\n5\n14\n10\"\"\"))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 1\\n3\\n4\\n5\\n\") == \"5 2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 4\n2 4 8 2 4\n8\n5\n14\n10''') == '''1\n-1\n3\n2'''\nassert solution('''5 5\n2 4 8 2 4\n8\n5\n14\n10\n11''') == '''1\n-1\n2\n1'''\n\nprint('Success')\n\n-----\n\n'''\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1 -1 3 2\"\n\"\"\"\n\nfrom math import log2\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\") == '21'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1, 2, [2, 6, 7], [1, 2, 3]) == 0\nassert solution(3, 3, [9, 9, 9, 9, 9, 9, 9], [1, 2, 3]) == 0\nassert solution(4, 3, [1, 2, 5, 2, 8, 5, 2, 8, 5, 2], [1, 2, 3]) == 2\nassert solution(4, 3, [9, 9, 9, 9, 9, 9, 9], [1, 2, 3]) == 0\nassert solution(4, 3, [9, 9, 9, 9, 9, 9, 9], [1, 2, 3]) == 0\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == \"21\"\n\"\"\"\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\nc = [int(i) for i in sys.stdin.readline().split()]\n\ns = [int(i) for i in sys.stdin.readline().split()]\n\nans = 0\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\nassert solution('''3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7''') == '21'\nassert solution('''3 3\n9 9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3''') == '0'"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 2 3\n1 2 3\n''') == '0'\nassert solution('''\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\nassert solution('''\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\n\nsolution('''\n4 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\n\nassert solution('''\n4 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\n\nassert solution('''\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\n\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == '2\\n1 2 3\\n1 1 2'\nassert solution(\"3\\n2 8 10\") == '2\\n2 2 1'\nassert solution(\"4\\n1 1 1 1\") == '0'\nassert solution(\"5\\n1 2 3 4 5\") == '0'\n\nprint('The solution is correct!')"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 1 1') == '0\\n2 2 1'\nassert solution('4\\n1 2 2 2') == '0\\n1 1 2'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2'\nassert solution('3\\n2 8 10') == '2\\n2 2 1\\n2 3 2'\nassert solution('4\\n1 1 1 1') == '0\\n'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 6 6 6\") == \"2\"\nassert solution(\"3 2 8 10\") == \"2\"\nassert solution(\"2 8 10\") == \"2\"\nassert solution(\"4 1 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 4 6 6 6\") == \"2\"\nassert solution(\"3 8 10\") == \"2\"\nassert solution(\"4 1 1 1\") == \"0\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2 3\") == \"2 2 1\"\nassert solution(\"2 1 2 3\") == \"2 2 1\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\n2 4 6 6 6\"\"\") == \"\"\"2\n1 2 3\n1 1 2\"\"\"[1:]\nassert solution(\"\"\"3\n2 8 10\"\"\") == \"\"\"2\n2 2 1\"\"\"[1:]\nassert solution(\"\"\"4\n1 1 1 1\"\"\") == \"\"\"0\"\"\"[1:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 6 5') == '2 1 3'\nassert solution('2 8 10') == '2 2 1'\nassert solution('1 1 1 1') == '0'\nassert solution('7 5 2 1') == '3 2 1'\nassert solution('0 0 0 0') == '0'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 4 6 6 6''') == '2\nassert solution('''3\n2 8 10''') == '2\nassert solution('''4\n1 1 1 1''') == '0''') == '''0\n1 2 1\n2 3 2\n'''\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"10010001\") == \"1\"\nassert solution(\"10100100\") == \"0\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100010') == 1\nassert solution('10101010') == 2\nassert solution('10101010') == 2\nassert solution('1010101010') == 2\nassert solution('1010101010') == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"101010\") == \"0\"\nassert solution(\"10100111010\") == \"3\"\nassert solution(\"10010001\") == \"1\"\nassert solution(\"11111111\") == \"0\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.readlines()"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10010001\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10100100\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\n\"\"\"\n\n\"\"\"\nfor j in range(1, len(s)+1):\n    count = 0\n    for i in range(j):\n        if i + k > len(s):\n            break\n        elif s[i] == \"0\":\n            count += 1\n    if count > max_count:\n        max_count = count\n\nfor j in range(1, len(s)+1):\n    count = 0\n    for i in range(j):\n        if i + k > len(s):\n            break\n        elif s[i] == \"0\":\n            count += 1\n    if count > max_count:\n        max_count = count\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"10101\") == \"2\"\nassert solution(\"11011111111\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(b\"101010\") == 5\nassert solution(b\"100010\") == 4\nassert solution(b\"101100010\") == 2\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('100010') == 1\nassert solution('10101') == 2\n'''\nimport sys\nimport math"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"11100010\") == 2\nassert solution(\"11100010\") == 2\nassert solution(\"11100010\") == 2\nassert solution(\"11100010\") == 2\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\\n\"\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\\n\"\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7 \"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5 \"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6 \"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\n\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"3\\n4 6 7\"\nassert solution(\"7 1\") == \"4\\n1 3 5 6\"\nassert solution(\"6 1\") == \"4\\n1 3 5 6\"\n\"\"\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"1 3 5 6\"\n\"\"\"\n\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1 3\"\n\"\"\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\\n\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(solution(input()))\nprint(solution(str(input())))"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 5\n3\n1 2 3\n2\n1 4 5\n1 2 3\n\n5\n1 1 1 1\n''') == '4'\nassert solution('''6\n1 1\n3\n1 2 3\n\n3\n1 1 1\n''') == '3'\nassert solution('''6\n2\n1 1\n3\n1 2 3\n''') == '1'\nassert solution('''5\n1 5\n3\n1 2 3\n2\n1 4 5\n1 2 3\n\n5\n1 1 1 1\n''') == '1'\n\nassert solution('''6\n1 1\n3\n1 2 3\n\n3\n1 1 1\n''') == '1'"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 1') == '2'\nassert solution('1 2 3 4') == '2'\nassert solution('1 1 2 2 3') == '3'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\"\nassert solution(\"3\\n3 4 6\\n3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\"\"\") == \"\"\"\n30\n31\n10\n\"\"\"\n\nassert solution(\n\"\"\"\n2\n10\n10\n4\n\"\"\") == \"\"\"\n10\n10\n10\n\"\"\"\n\nassert solution(\n\"\"\"\n5\n3\n3 2 1\n4\n3 2 1\n2\n1 2\n1\n\"\"\") == \"\"\"\n6\n6\n6\n6\n6\n\"\"\"\n\nassert solution(\n\"\"\"\n2\n3\n2 3\n3\n2 3\n\"\"\") == \"\"\"\n6\n3\n\"\"\"\n\nassert solution(\n\"\"\"\n2\n3\n2 3\n3\n2 3\n\"\"\") == \"\"\"\n6\n6\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4\\n2 10 1 20\\n2\\n3 6') == '2'\n\"\"\"\n\nfrom collections import Counter, OrderedDict"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\nassert solution('4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '1\\n2\\n2\\n1'\n\"\"\"\n\n\nimport unittest\nfrom math import ceil\nfrom sys import stdin\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n3\\n2 3 4 99 100\\n1\\n2\") == \"1\\n1\\n1\"\nassert solution(\"4\\n4\\n2 3 4 99 100\\n1\\n2\") == \"1\\n1\\n1\"\nassert solution(\"4\\n3\\n2 3 4 99 100\\n1\\n2\") == \"2\\n2\\n2\"\n\n'''\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\"\nimport numpy as np\n\nn = int(input())\nskills = list(map(int, input().split()))\nq = int(input())\narr = np.array(skills)\n\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(np.argmax(np.abs(arr[l:r] - arr[l])))"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 1') == '1'\nassert solution('3 3') == '0'\nassert solution('2 2') == '1'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\\n1\\n2\\n1\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == \"2\\n1\\n2\\n1\"\n\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == \"2\\n1\\n2\\n1\"\n\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == \"2\\n1\\n2\\n1\"\n\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == \"2\\n1\\n2\\n1\"\n\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == \"2\\n1\\n2\\n1\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 1 4\\n2 1 3\") == \"NO\"\nassert solution(\"2\\n1 1 4\\n2 1 3\") == \"NO\"\nassert solution(\"2\\n1 1 4\\n2 1 3\") == \"NO\"\n\"\"\"\n\nq = int(input().strip())\nfor _ in range(q):\n    a, b, n, S = list(map(int, input().strip().split(' ')))\n    if a * n == S:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\n\"\"\"\n\nimport sys\nsys.stdin = open(\"input.txt\")\n\nt = int(input())\n\nfor case in range(t):\n    a, b, n, S = list(map(int, input().split()))\n    if S % n == 0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES'\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n1 2 3 6\") == \"YES\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom itertools import combinations"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES\\nNO\\nNO\\nYES'\nassert solution('1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES\\nNO\\nNO\\nYES'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\nassert solution(\"3 3 5 18\\n3 3 5 18\") == \"YES\"\nassert solution(\"1 2 3 4\\n1 2 3 6\\n1 2 3 6\") == \"NO\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3 6') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('5 2 6 27') == 'NO'\nassert solution('3 3 5 18') == 'YES'\n\na, b, n, S = map(int, stdin.split())\n\nassert solution('5 2 6 27') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\nassert solution(\"5 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 5 3 1\\n'\nassert solution(\"5 0 1 2 3 4\") == 'YES\\n0\\n'\nassert solution(\"0 1 2 3 4\") == 'YES\\n'"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"5 3 1 1 2 2\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 1 4 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution('5 3 1 2 3') == 'NO'\nassert solution('4 3 1 5 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution('0 1 2 3 4') == 'YES\\n0\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 2 3 4 1 5 3') == 'YES'\nassert solution('5 1 4 3 2 1') == 'YES'\nassert solution('5 1 4 3 2') == 'NO'\nassert solution('5 1 4 3') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\\n\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 1 2 1 2\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 2 1 2\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 2 1 2\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 2 1 2\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\nassert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"5 2 4 3 1\") == \"YES\"\nassert solution(\"5 3 4 2 1\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution(\"5 4 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution(\"5 4 3 1 5 0\") == 'YES\\n1\\n3\\n4\\n5 4 0 1'\nassert solution(\"5 1 2 3 4\") == 'NO'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0') == '18'\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1') == '8'\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1') == '-1'\n\nprint(\"All tests passed.\")\n\n-----Test 2-----\nInput\n4 2\n4 1 1\n8 1 1\n8 1 1\n1 1 1\n\nOutput\n-1\n\nInput\n4 3\n4 1 1\n8 1 1\n8 1 1\n1 1 1\n\nOutput\n8\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0') == '18'\n\nassert solution('5 3\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1') == '-1'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"7\"\n\"\"\"\n\nimport heapq\n\nn, k = [int(x) for x in stdin.readline().split()]\nbooks = []\nfor _ in range(n):\n    t, a, b = [int(x) for x in stdin.readline().split()]\n    books.append((t, a, b))\n\nbooks = sorted(books)\nheap = []\nans = float('inf')\nalice = 0\nbob = 0\nfor t, a, b in books:\n    if a == 1:\n        alice += 1\n        bob += 1\n    else:\n        bob += 1\n    heapq.heappush(heap, -t)\n    ans = min(ans, -heap[0])\n    if alice >= k and bob >= k:\n        break\nprint(ans)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0') == '18'\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 0 1\\n3 1 1\\n6 0 1\\n9 0 1\") == \"3\\n\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\") == \"8\\n\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\n\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"4 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data) == test_result\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2\\n6\\n-1\\n7'\n\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import defaultdict\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '2\\n6\\n-1\\n7\\n'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\n\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\n\nassert n > 0 and k > 0\n\nold_price = [int(x) for x in sys.stdin.readline().split()]\nassert len(old_price) == n\n\nassert all(0 < i < sys.maxsize for i in old_price)\n\ndifference = [abs(i - old_price[i]) for i in range(n)]\nassert all(0 <= i <= sys.maxsize for i in difference)"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\"\nassert solution(\"7 8\\n1 2 1\\n1 1 2\\n1 3 1\\n1 1 2\\n3 4 1\\n3 1 2\\n5 8 5\\n7 2 5\\n4 2\\n2 1 2\\n1 2 1\\n1 2 1\") == \"7\"\nassert solution(\"10 5\\n1 2 1\\n1 1 2\\n1 3 1\\n1 1 2\\n3 4 1\\n3 1 2\\n5 8 5\\n7 2 5\\n4 2\\n2 1 2\\n1 2 1\\n1 2 1\") == \"8\"\nassert solution(\"13 3\\n1 2 1\\n1 1 2\\n1 3 1\\n1 1 2\\n3 4 1\\n3 1 2\\n5 8 5\\n7 2 5\\n4 2\\n2 1 2\\n1 2 1\\n1 2 1\") == \"-1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"5\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"6\\n7\\n-1\\n7\"\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 15 16 23\\n') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == '5'\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == '0'\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == '3'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nstart = 0\nend = 0\nresult = n\n\nfor i in range(n):\n    if a[i] == 4:\n        end += 1\n    if a[i] == 42:\n        end += 1\n    if a[i] == 23:\n        start += 1\n    if a[i] == 16 and end >= 3:\n        end -= 2\n        result -= 1\n    if a[i] == 15 and start >= 3:\n        start -= 2\n        result -= 1\n\nprint(result)\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == '5'\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == '0'\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"15 4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 15 16 23\") == 5\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == 0\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == 3\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"15 4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"4\"\nassert solution(\"4 8 15 16 23\") == \"5\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 15 16 23\") == 5\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == 0\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == 3\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n4 8 15 16 23''') == '5'\nassert solution('''12\n4 8 4 8 15 16 8 16 23 15 16 42 23 42''') == '3'"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"1337 420\\n18 4\") == \"2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n100500 9000\") == \"3\"\nassert solution(\"18 4\\n1337 420\") == \"2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\nassert solution(\"100500 9000\") == \"9152\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\"\nassert solution(\"100500 9000\") == \"9150\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"6\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\"\n) == \"0\\n3\\n2\\n92\\n87654322\\n9150\"\n\"\"\"\n\nimport sys\nfrom typing import List, Optional\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n5 37') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('123456789 1000000000\\n100500 9001') == '87654322'\n\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"3\"\nassert solution(\"123456789 1000\\n100500 9000\") == \"92\"\nassert solution(\"123456789 10000\\n100500 9000\") == \"87654322\"\n\nprint(\"Success!\")\n\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\\n') == '0\\n3\\n2\\n92\\n87654322\\n9150'\n\"\"\"\nimport sys"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\\n2\\n92\"\nassert solution(\"13 37\\n18 4\") == \"3\\n2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\\n9150\"\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000''') == '0\\n3\\n2\\n92\\n87654322\\n9150'\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n1 2 3') == ''\nassert solution('1 2 3\\n1 2 3\\n1 2 3') == ''\nassert solution('1 2 3\\n1 2 3\\n1 2 3\\n1 2 3') == ''\nassert solution('1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3') == ''\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n7 5 12345') == '12339'\nassert solution('5\\n0 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 999999999\") == \"999999998\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"499999993 9 1000000000\") == \"999999995\"\nassert solution(\"10 5 15\") == \"54306\"\nassert solution(\"17 8 54321\") == \"999999998\"\nassert solution(\"7 5 12345\") == \"12339\"\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339 0\\n15\\n54306\\n999999995 185\\n999999998\"\n\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\nassert solution('''1\n2 3 4\n5 0 1\n\n3\n1 2 3''') == '-1\\n0\\n0'\n\nassert solution('''2\n3 4 5\n0 0 0\n\n1\n2 3''') == '2\\n1\\n2'\n\nassert solution('''3\n1 1 1\n0 0 0\n\n0\n0 0''') == '1\\n1\\n1'\n\nassert solution('''4\n7 7 7\n0 0 0\n\n0\n0 0''') == '7\\n7\\n7'"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\n\nt = int(stdin.readline().strip())\nfor i in range(t):\n    x, y, n = list(map(int, stdin.readline().strip().split()))\n    print(max(i % x for i in range(n+1)) * y % x)\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"7 2\") == \"8\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"1\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nsys.stdin = open(\"input.txt\")\n\nn, k = map(int, input().split())\n\nd = list(map(int, input().split()))\n\nd.sort(reverse=True)\n\ncurr = 0\ni = 0\n\nres = 0\n\nwhile i < len(d):\n    if curr % k == 0:\n        res += 1\n    curr += d[i]\n    i += 1\n\nprint(res)\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\nassert solution(\"5 1\\n1 2 2 3 2 4 5\") == \"1\"\n\"\"\"\n\n\n\n\"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    def intersection(self, nums1, nums2):\n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return len(nums1 & nums2)\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"\nprint('Success')\n\n\"\"\"\n\nfrom typing import List\n\n\nclass MySolution:\n    def count(self, boxes: List[int], k: int) -> int:\n        max_boxes = 0\n        n = len(boxes)\n        for i in range(n):\n            for j in range(i+1, n):\n                if (boxes[i] + boxes[j]) % k == 0:\n                    max_boxes += 1\n        return max_boxes\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"7 3\") == \"3\"\nassert solution(\"4 2\") == \"2\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\n\"\"\"\n\nimport sys\nimport os\n\npath = \"/home/kazem/development/top-interview-questions-easy/top-interview-questions-easy/2.Arrays/python\"\nsys.path.append(path)"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABABABAABAB') == 'ABAABABABA'\nassert solution('ABABABAAB') == 'ABAABABAB'\nassert solution('ABABABAB') == 'ABAABAB'\nassert solution('ABABAABAB') == 'ABAABABAB'\nassert solution('ABABAAB') == 'ABAABAB'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == 'aBC'\nassert solution(\"AaBbCc\") == 'aAaBbCc'\n\"\"\"\n\n\n\"\"\"\nOptimal Solution:\n    def solution(s, k):\n        return s.translate(s.maketrans('ABC', 'abc', '{}'.format(k)))\n\"\"\"\n\n\"\"\"\nMore Optimal Solution:\n    def solution(s, k):\n        k = k - 1\n        return s.translate(str.maketrans('ABC', 'abc'), '{}'.format(k))\n\"\"\"\n\n\"\"\"\nThis solution is the correct one to read.\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('A') == 'a'\nassert solution('AB') == 'ab'\nassert solution('abc') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"AaaBbCc\") == \"AaAaBbCc\"\nassert solution(\"ABCabcABCabc\") == \"AbcAbcAbcAbc\"\nassert solution(\"ABBC\") == \"ABC\"\nassert solution(\"ABABABABAB\") == \"AbAbAbAbAb\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\n\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\n\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\nassert solution(\"AbC\", 1) == \"aBC\"\nassert solution(\"ABC\", 2) == \"abC\"\nassert solution(\"AbC\", 2) == \"abC\"\nassert solution(\"AbC\", 3) == \"abC\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('AbC') == 'abc'\nassert solution('ABCDaBcd') == 'abcdabcd'\nassert solution('aBcD') == 'abcd'\nassert solution('AbCdE') == 'abcd'\n\"\"\"\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('ABaB') == 'ABab'\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abC'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"3\\n4\\n6\\n1\\n5\\n2\\n7\"\n\n\"\"\"\n\nn = int(stdin.readline())\nscores = dict()\ncities = []\n\nfor i in range(n):\n    line = stdin.readline().split()\n    cities.append(line[1])\n    scores[line[0]] = line[2]\n\ncities = sorted(set(cities))\n\nresult = []\nfor c in cities:\n    result += [scores[c]]\n    \nresult.sort(reverse=True)\n\nfor r in result:\n    print(scores[r])\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n\"\"\"\n\nN = int(input())\nl = []\nfor i in range(N):\n    city, score = input().split()\n    l.append([city, int(score)])\nl = sorted(l, key = lambda x: (x[0], -x[1]))\nfor i in range(N):\n    print(l[i][0])"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1:2') == '1'\nassert solution('1:2\\n2:3') == '1'\nassert solution('1:2\\n2:3\\n3:4') == '1'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n-----\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n''') == '3\\n4\\n6\\n1\\n5\\n2'"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1000\") == \"Yes\"\nassert solution(\"3 100\") == \"No\"\nassert solution(\"5 100\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('4 3\\n500 300\\n300 200\\n200 100') == 'Yes'\n\nassert solution('4 1\\n500 300\\n300 200\\n200 100') == 'No'\n\nassert solution('4 4\\n500 300\\n300 200\\n200 100') == 'No'\n\nassert solution('5 8\\n500 300\\n300 200\\n200 100\\n100 50') == 'No'"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"3 500\") == \"No\"\nassert solution(\"5 100\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 900\n''') == 'Yes'\n\n-----Test Input-----\n3 50\n3 100\n4 500\n'''\n-----Test Output-----\nYes\nNo\nNo\n'''\nimport sys"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1000\") == \"No\"\nassert solution(\"4 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 500\\n') == 'No'\nassert solution('2 900\\n') == 'Yes'\n\n'''"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split(' '))\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\"\"\"\nK=int(stdin.readline())\nX=int(stdin.readline())\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nfrom collections import Counter, namedtuple\nimport math\nimport io\nimport os\nimport random\nimport re\nfrom subprocess import Popen, PIPE\nimport sys\nfrom typing import List, Union, Tuple"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nfrom fractions import Fraction\nimport math\nfrom typing import Dict, List, Tuple, Union\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10') == '0.145833333333'\n\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\nassert solution(\"4 10\") == '0.304545454545'\nassert solution(\"5 10\") == '0.378636363636'\nassert solution(\"6 10\") == '0.43376623377'\nassert solution(\"7 10\") == '0.49253731343'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10') == '0.145833333333'"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\n\"\"\"\nSolution Approach\n\n- For this problem, it makes sense to make use of the fact that if we want Snuke to win the game, the die always shows the same value on all the dice (snake) roll.\n- Therefore, we can apply the binomial theorem to find the probability of obtaining K+1, K+2, K+3,..., K+n (consecutive heads) with n = N.\n- In order to compute the binomial coefficient (nk), we can use the fact that nCk = n!/(k!(n\u2212k)!) for k>=0.\n- We can then simply apply the binomial theorem to find the probability of obtaining the desired number of heads in the first N dice rolls.\n\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('10 10') == '0.16666666666666666'\nassert solution('5 10') == '0.1111111111111111'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('SUN') == '0'\nassert solution('MON') == '1'\nassert solution('TUE') == '2'\nassert solution('WED') == '3'\nassert solution('THU') == '4'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('SAT') == 1\nassert solution('MON') == 0\nassert solution('TUE') == 1\nassert solution('WED') == 2\nassert solution('THU') == 3\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SAT\") == 1\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('SAT') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('SAT') == 1\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 0\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 2\nassert solution('MON') == 3\nassert solution('TUE') == 4\nassert solution('WED') == 5\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"SUN\") == 0\nassert solution(\"MON\") == 1\nassert solution(\"TUE\") == 2\nassert solution(\"WED\") == 3\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint('Success')"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 20') == '30'\nassert solution('3 10 20') == '50'\nassert solution('4 10 20') == '90'\nassert solution('5 10 20') == '170'\nassert solution('6 10 20') == '330'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    r, D, x_2000 = map(int, line.split())\n    for i in range(10):\n        x_i = r * x_2000 - D\n        print(x_i)\n        x_2000 = x_i"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\\n\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 3 1 1 4\") == \"5\"\nassert solution(\"5 1 3 2 1 4\") == \"4\"\nassert solution(\"3 4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\\n\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\\n\") == \"4\"\nassert solution(\"3\\n4 1 2\\n\") == \"0\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\n\"\"\"\n\nimport os\nimport sys\n\n\"\"\"\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\na.reverse()\na = [str(i) for i in a]\nprint(\" \".join(a))\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort(reverse=True)\ns1 = 0\ns2 = 0\ns3 = 0\nfor i in range(0,n,3):\n    s1 += a[i]\nfor i in range(1,n,3):\n    s2 += a[i]\nfor i in range(2,n,3):\n    s3 += a[i]\n\nprint(max(s1, s2, s3))\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n1 3 1 1 4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n1 3 2 1 4\"\nassert solution(\"3\\n4 1 2\") == \"0\\n4 1 2\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n1 3 2 1 4\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 1 1 4\\n\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\\n\") == \"4\"\nassert solution(\"3\\n4 1 2\\n\") == \"0\"\nassert solution(\"3\\n4 1 2\\n\") == \"0\"\nassert solution(\"3\\n4 1 2\\n\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\n\"\"\"\n\n\nt = int(stdin.readline().strip())\n\nfor _ in range(t):\n    x, y, z = map(int, stdin.readline().strip().split())\n    max1 = max(x, y)\n    max2 = max(x, z)\n    max3 = max(y, z)\n    if max1 == max2:\n        if max1 == max3:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n    elif max1 == max3:\n        if max2 == max3:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n    elif max2 == max3:\n        if max1 == max3:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 3\\n') == 'YES'\nassert solution('1 1 3\\n') == 'NO'\nassert solution('2 2 3\\n') == 'NO'\nassert solution('100 100 100\\n') == 'YES'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\n\n\"\"\"\n\nimport sys\n\ninput_lines = []\nfor line in sys.stdin:\n    input_lines.append(line.rstrip('\\n'))\n\nt = int(input_lines[0])\n\nfor i in range(1, t + 1):\n    x, y, z = list(map(int, input_lines[i].split(' ')))\n    if x >= y and x >= z:\n        if y > z:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"YES\")\n            print(x, z, y)\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"YES\"\nassert solution(\"50 49 49\") == \"NO\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\\n8 7 6\\n3 4 5\") == \"YES\\n2 1 1\"\nassert solution(\"3 2 3\\n1 1 1\") == \"YES\\n1 1 1\"\nassert solution(\"3 2 3\\n100 100 100\") == \"NO\"\nassert solution(\"3 2 3\\n1 100 100\") == \"NO\"\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    x, y, z = [int(i) for i in input().split()]\n\n    if x > y and x > z:\n        if x ** 2 == y ** 2 + z ** 2:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n    elif y > x and y > z:\n        if y ** 2 == x ** 2 + z ** 2:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n    else:\n        if z ** 2 == x ** 2 + y ** 2:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\") == \"4\"\nassert solution(\"5 1 4\") == \"1\"\nassert solution(\"5 3 3\") == \"5\"\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\\n\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\\n\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\\n\") == '5'\nassert solution(\"3 4 3\\n1 2 3 4 1\\n\") == '0'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\n\"\"\"\n\nn, m, k = [int(c) for c in stdin.readline().split()]\na = [int(c) for c in stdin.readline().split()]\n\nlast = 0\ncount = 0\n\nfor i in range(n):\n    if a[i] > k:\n        break\n    if last + a[i] <= k:\n        last += a[i]\n        count += 1\n    else:\n        count += k // k\n        last = a[i] - (k - last)\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\nbox_size = [int(i) for i in input().split()]\nbox_size.sort()\nbox = [[0, 0]] * m\nfor i in range(n):\n    curr_box = 0\n    for j in range(m):\n        if box_size[j] <= k - box[j][1]:\n            box[j][0] += 1\n            box[j][1] += box_size[j]\n            break\n        curr_box += 1\n    if curr_box == m:\n        break\nprint(box_size[:curr_box].count(0))\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\nassert solution('1 1 1\\n1') == '1'\nassert solution('1 2 2\\n2') == '1'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 3\nassert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('aaaaa') == 0\n\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sadasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 12\n\nassert solution('aaaaaaa') == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 21\nassert solution('sadfaasdda') == 21\nassert solution('f a d') == 21\nassert solution('abcdefg') == 7\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"sadfaasdda\") == 21"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 21\nassert solution('sadfaasdda') == 21\nassert solution('abcdef') == 6\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\nassert solution(\"sadfaasdda\") == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '2\\n-1\\n6\\n-2999999997'\nassert solution('3\\n4\\n5\\n-1 -2 3 -3') == '-1\\n-2'\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('0 0') == '0'\nassert solution('1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nT = int(input())\nfor i in range(1, T + 1):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = [abs(a) for a in A]\n    dp = defaultdict(int)\n    dp[0] = 0\n    for a in A:\n        dp[abs(a)] = max(dp[abs(a)], dp[abs(a) - 1] + abs(a))\n    print(dp[A[-1]])\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"1\\n7\\n1 2 3 4 5 -1 -2\\n7\\n-1 -2 -1 -3 -1 -4\\n7\\n-1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"1\\n3\\n-1\\n-3\"\nassert solution(\"3\\n7\\n1 2 3 4 5 -1 -2\\n7\\n-1 -2 -1 -3 -1 -4\\n7\\n-1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n3\\n-1\\n-3\"\nassert solution(\"1\\n7\\n1 2 3 4 5 -1 -2\\n7\\n-1 -2 -1 -3 -1 -4\\n7\\n-1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"1\\n3\\n-1\\n-3\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\"\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '2\\n-1\\n6\\n-2999999997', 'The first test case'\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '2\\n-1\\n6\\n-2999999997', 'The second test case'\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '-1\\n1\\n1\\n-2999999997', 'The third test case'\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '-1\\n1\\n1\\n-2999999997', 'The fourth test case'\n\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n4\\n1 -2 -1 -3') == '-1'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == '2'\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == '-1'\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '6'\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '-2999999997'\n\"\"\"\nfrom typing import List, Set, Dict\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == '3 5\\n2 1\\n3 2\\n3 4\\n'\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n'\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == '1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n'\nassert solution(\"7 8\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == '1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\") == \"3 2\"\nassert solution(\"8 6\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n6 5\\n4 5\") == \"6 1\\n2 1\\n2 3\\n4 3\\n6 5\\n5 8\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n2 5\\n2 7\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"3 2\\n2 5\\n8 5\"\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 2\\n2 1\\n3 4\"\n\nassert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"3 2\\n2 1\\n3 4\"\n\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n4 2\\n\") == \"3 2\\n2 1\\n3 4\"\n\n\"\"\"\n\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5') == '9'\nassert solution('2\\n8') == '8'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n5\n499993\"\"\") == \"0\"\nassert solution(\"\"\"2\n5\n499993\"\"\") == \"40\"\nassert solution(\"\"\"1\n5\n499993\"\"\") == \"41664916690999888\"\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n499993\") == \"0\\n40\\n41664916690999888\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u0435\u0442\u043e\u0434 split() \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c. \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u0434\u043b\u0438\u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 10000.\n\nSample Input 1:\n\n4 -2 1 3 4\nSample Output 1:\n\n4\nSample Input 2:\n\n-1 2 3 -3 -2\nSample Output 2:\n\n-1\nSample Input 3:\n\n0 0 0\nSample Output 3:\n\n0"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n1') == ''\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import chain"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('499993') == '40'\n\"\"\"\n\nimport sys\nimport time\nfrom math import gcd\nfrom typing import List, Tuple, Optional, Callable\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_0) == test_0_answer\nassert solution(test_1) == test_1_answer\nassert solution(test_2) == test_2_answer\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n4 4 4') == '1 1 1 2 1 1'\n\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('5\\n1 1 1 2 1') == '1 1 2 1 2'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4'.split(' ')) == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n4 5 7 6 7 5 4 4 6 4\\n\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\n\n\"\"\"\n\n\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\nprint(solution(\"64\\n32\\n97\\n2\\n12345\"))"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == 'YES\\n2 4 8'\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == 'NO'\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == 'NO'\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == 'YES'\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('NO') == 'NO'\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import combinations\nfrom itertools import product"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('64 32 97 2 12345') == 'YES 2 4 8\\nNO\\nNO\\nNO\\nYES 3 5 823'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint(solution(input()))\n\n\n'''"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaaaaaaaaaaaaa\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 2\nassert solution('aa') == 1"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abba') == '2 abba'\nassert solution('aa') == '1 aa'\nassert solution('bbbb') == '0 bbbb'\nassert solution('aba') == '1 aba'\nassert solution('abab') == '0 abab'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abba') == 2\nassert solution('abbab') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"a\") == 1\n\"\"\"\n\nn = int(stdin.readline())\ns = stdin.readline().strip()\n\nmin_operations = 0\ncurrent_a_count = s.count('a')\ncurrent_b_count = s.count('b')\n\nfor i in range(1, len(s) + 1):\n    if s[:i].count('a')!= current_a_count or s[:i].count('b')!= current_b_count:\n        min_operations += 1\n\nprint(min_operations)\nprint(s)"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"bbbb\") == 2\nassert solution(\"aa\") == 1\nassert solution(\"bb\") == 1\n\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '','solution('') == '' failed'\nassert solution('ab') == '1','solution(\\\"ab\\\") == 1 failed'\nassert solution('aabb') == '1','solution(\\\"aabb\\\") == 1 failed'\nassert solution('bbaa') == '3','solution(\\\"bbaa\\\") == 3 failed'\nassert solution('baab') == '1','solution(\\\"baab\\\") == 1 failed'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"bb\") == 0\nassert solution(\"bbbb\") == 2\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\nassert solution('ba') == 1\nassert solution('aaaaaaaaa') == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"aaaa\") == 0\nassert solution(\"ababab\") == 0\nassert solution(\"ab\") == 1\nassert solution(\"ba\") == 1\n\nprint(\"Success\")"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 0\\n2 0\\n3 2\\n0 3\\n1 1\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\") == \"15\"\n\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"1\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"3\"\nassert solution(\"7\\n0 0\\n0 1\\n2 0\\n0 2\\n1 1\\n3 1\\n2 1\\n\") == \"8\"\n\n'''\nimport heapq\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5 2\\n1 0\\n2 0\\n3 2\\n0 3\\n0 1\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\n\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"2\\n1 1\\n1 2\") == \"3\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 1') == '2'\n\"\"\"\n\n\"\"\"\nGiven a positive integer n, find the n-th prime number.\n\nThe 0th and 1st prime numbers are [2, 3] (2, 3, 5, 7).\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\"\n\nimport sys\n\nA, B = [int(x) for x in input().split()]"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n'''\n\nimport sys"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4) == 3\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == '1.000000000000'\n\"\"\"\n\nL = int(input())"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1.000000000000'\n\ntry:\n    assert solution('1') == '1.000000000000'\nexcept AssertionError as e:\n    print('Error: AssertionError')\n    print(f'Details: {e}')\n\ntry:\n    assert solution('1.2') == '1.000000000000'\nexcept AssertionError as e:\n    print('Error: AssertionError')\n    print(f'Details: {e}')\n\ntry:\n    assert solution('5') == '3.000000000000'\nexcept AssertionError as e:\n    print('Error: AssertionError')\n    print(f'Details: {e}')\n\ntry:\n    assert solution('5.8') == '4.000000000000'\nexcept AssertionError as e:\n    print('Error: AssertionError')\n    print(f'Details: {e}')\n\nprint('Finished tests')"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"4\") == \"2.000000000000\"\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '1.000000000000'"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\n------\n1\n\n2\nA\nB\n\n-----Sample Output-----\n3\n\n-----Explanation-----\nIn case N=1, Takahashi is one year old.  \nThus, we should print Hello World.\nIn case N=2, Takahashi is two years old.\nThus, we should print A+B.\nprint(A+B)  # 3\n\nIn 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\n\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\n\nTakahashi, who is taking this exam, suddenly forgets his age.\n\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\n\nWrite this program for him.  \n\n-----Constraints-----\n - N is 1 or 2.\n - A is an integer between 1 and 9 (inclusive).\n - B is an integer between 1 and 9 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf N=1, print Hello World; if N=2, print A+B.  \n\n-----Sample Input-----\n1\n\n-----Sample Output-----\nHello World\n\nAs N=1, Takahashi is one year old.  \nThus, we should print Hello World.\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n\nassert solution('1\\n2') == 'Hello World\\n3'\nassert solution('1\\n3\\n5\\n4') == 'Hello World\\n5\\n9'\n\nassert solution('1\\n3\\n5\\n4\\n3') == 'Hello World\\n5\\n9\\n7'\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n'''\n\nn = int(input())\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\nassert solution(\"2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Hello World'\n\"\"\"\nimport sys"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\n'''"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3333'\nassert solution('4 3') == '3333'\nassert solution('4 4') == '4444'\nassert solution('4 4') == '4444'\nassert solution('1 1') == '11'\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '3333'\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '11'\nassert solution('7 7') == '777'\nassert solution('3 4') == '34'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 3\n''') == '3333'\n\nassert solution('''\n4 3\n''') == '4444'\n\nassert solution('''\n4 3\n''') == '3333'\n\nassert solution('''\n4 3\n''') == '4444'\n\nassert solution('''\n4 3\n''') == '3333'"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == '3333'\nassert solution('2 1') == '21'\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    stdin='4 3'\n) == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\nprint(solution(input()))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"5 7\") == \"5555\"\n\n'''"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"b\"\n\n-----Explanation-----\nSince a is the only lowercase English letter that is not z, after a is the only letter that follows a in alphabetical order.\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == '{'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"z\") == \"A\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\nassert solution('b') == 'c'\nassert solution('c') == 'd'\nassert solution('d') == 'e'\nassert solution('e') == 'f'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"z\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"z\") == \"a\"\nassert solution(\"q\") == \"w\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"z\") == \" \""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"b\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\nimport sys"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('order', 'atc') == 'atcoder'\n\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"odert\") == \"atcoder\"\nassert solution(\"atc\") == \"atcoder\"\nassert solution(\"atcoder\") == \"atcoder\"\n\nprint(\"all test cases passed.\")\n\n####################################################################################\n\nWhen S =  ode and T =  atc, concatenating T and S in this order results in atcoder.\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('o') == 'o'\nassert solution('c') == 'c'\nassert solution('coder') == 'coder'\nassert solution('atcoder') == 'atcoder'\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"order atc\") == \"atcoder\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nprint(\"Passed\")\n\n------Solution in Python------\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\") == \"0\"\nassert solution(\"2\\n1000000 1000000\") == \"1000000\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5\\n1 5 7 8 2'\n) == '0'\nassert solution(\n    '6\\n5 1 2 4 6 3'\n) == '0'\nassert solution(\n    '2\\n1000000 1000000'\n) == '1000000'\n\"\"\"\nimport sys"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\") == \"0\"\nassert solution(\"2\\n1000000 1000000\") == \"1000000\"\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 4 3 2 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 4 6 3\") == 0\nassert solution(\"1 5 7 8 2\") == 0\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 4 6 3') == 0\nassert solution('6 5 4 2 1 3') == 0\nassert solution('1000000 1000000') == 1000000\nassert solution('2 1') == 1\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nm = len(a)"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 3\\n1 3 5 4 2 7 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '2'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\nassert solution(\"1 1 100 99\\n100\\n\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\\n\") == \"6\"\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"6 2 3 3\n7 10 50 12 1 8\n\"\"\"\n        output = \"\"\"5\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 1 100 99\n100\n\"\"\"\n        output = \"\"\"1\"\"\"\n        self."
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 2 3 3\n7 10 50 12 1 8''') == '5'\nassert solution('''1 1 100 99\n100''') == '1'\nassert solution('''7 4 2 1\n1 3 5 4 2 7 6''') == '6'"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == t\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"input_3_2.txt\", \"r\").read()) == \"5\"\n\"\"\"\n\nimport collections\n\nn, a, b, k = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\n\nq = collections.deque([(0, 0, 0)])\nans = 0\nwhile q:\n    h_left, point_left, k_left = q.popleft()\n    if k_left <= 0:\n        continue\n    k_left -= 1\n    if k_left > 0:\n        q.append((h_left, point_left, k_left))\n    h_right = h_left\n    point_right = point_left\n    h_left -= a\n    if h_left > 0:\n        point_left += 1\n        q.append((h_left, point_left, k_left))\n    h_left = h_right\n    point_left = point_right\n    h_right += b\n    if h_right <= 0:\n        continue\n    point_right += 1\n    q.append((h_right, point_right, k_left))\n    ans = max(ans, point_left)\n\nprint(ans)"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 3 3\") == \"5\"\nassert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"7 4 2 1\") == \"6\"\nassert solution(\"7 2 2 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 3 3\\n7 10 50 12 1 8\\n') == '5'\nassert solution('1 1 100 99\\n100\\n') == '1'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 3 3') == '5'\nassert solution('7 10 50 12 1 8') == '1'\nassert solution('1 1 100 99') == '1'\n\n-----Notes-----\nThis is the third mission, and it is the one with the best example of performance. I have decided to repeat the first mission from a previous level.\n\"\"\"\n\nimport itertools\nimport math\n\nn, a, b, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nprint(math.ceil(sum(arr) / (k + 1)))"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('5 2\\n0 1 2 3 4') == '0\\n0 1 2 4'\nassert solution('4 2\\n1 2 3 4') == '0\\n1 2 3 4'\nassert solution('6 3\\n1 2 3 4 5 6 7') == '0\\n1 2 3 5 7'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0'\nassert solution('6 3\\n3 2 0 6 10 12') == '3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\n\nassert solution(\"5 4\\n0 2 1 4 5\") == \"1\"\nassert solution(\"7 5\\n0 1 2 3 4 5 6\") == \"0\"\nassert solution(\"8 6\\n0 1 2 3 4 5 6 7 8\") == \"1\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3') == '3'\nassert solution('4 3\\n0 1 2 3') == '0'\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == '4\\n1 2 3 4'\nassert solution(\"4 2\\n1 2 3 4\") == '0\\n1 2 3 4'\nassert solution(\"5 1\\n1 2 3 4 5\") == '0\\n1 2 3 4 5'\nassert solution(\"1 1\\n0\") == '0\\n0'\nassert solution(\"5 2\\n1 2 3 4 5\") == '4\\n1 2 3 4 5'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n3 2 0 6 10 12') == '3\\n3 2 0 7 10 14'\nassert solution('6 3\\n3 2 0 6 10 12') == '3\\n3 2 0 7 10 14'\n\"\"\"\n\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\na.sort()\n\nans = 0\nfor i in range(len(a)):\n    ans += (a[i] // m) * m\n    if a[i] % m == 0:\n        ans += 1\n    else:\n        ans += a[i] % m\n\nprint(ans)\n\nans = 0\nfor i in range(len(a)):\n    ans += (a[i] // m) * m\n    if a[i] % m == 0:\n        ans += a[i] % m\n    else:\n        ans += m - (a[i] % m)\nprint(ans)\n\na.sort(reverse=True)\n\nans = 0\nfor i in range(len(a)):\n    ans += (a[i] // m) * m\n    if a[i] % m == 0:\n        ans += 1\n    else:\n        ans += a[i] % m\n\nprint(ans)\n\nans = 0\nfor i in range(len(a)):\n    ans += (a[i] // m) * m\n    if a[i] % m == 0:\n        ans += a[i] % m\n    else:\n        ans += m - (a[i] % m)\nprint(ans)\n\nans = 0\nfor i in range(len(a)):\n    ans += (a[i] // m) * m\n    ans += a[i] % m\n\nprint(ans)\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3\\n0 0\\n0 1\\n0 2\") == \"0\\n0\\n0\\n1\"\n\nassert solution(\"2 3 3\\n0 1 1\\n1 1\\n0 2 2\") == \"0\\n0\\n0\\n0\\n1\\n1\\n1\\n2\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n3 2 0 6 10 12\") == 3\nassert solution(\"4 2\\n0 1 2 3\") == 0\nassert solution(\"6 3\\n3 2 0 6 10 12\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split()]\nk = [int(x) for x in stdin.readline().split()]\n\nstdin.readline()\noffer = [int(x) for x in stdin.readlines()]\n\nn, m = [int(x) for x in stdin.readline().split()]\nk = [int(x) for x in stdin.readline().split()]\n\noffer = [int(x) for x in stdin.readlines()]"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\"\"\"\n\nfrom collections import deque, Counter\n\nn, m = [int(e) for e in input().split()]\nt = [int(e) for e in input().split()]\nk = [int(e) for e in input().split()]\n\noffer = []\n\nfor _ in range(m):\n    offer.append([int(e) for e in input().split()])"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2') == 1\nassert solution('2\\n3 2') == 2\nassert solution('3\\n1 2') == 1\nassert solution('3\\n3 2') == 2\nassert solution('3\\n4 2') == 4\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 1 3 2') == '20'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == e\nprint(solution(s))\n\nInput\n1 1\n1\n\nOutput\n0\n\nInput\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\nOutput\n8\n\nInput\n5 2\n1 2 0 2 0\n3 5\n3 3\n1 5\n1 2\n1 5\n2 3\n\nOutput\n8\n\nInput\n4 3\n1 2 0 2\n3 5\n2 4\n1 5\n1 2\n1 5\n2 3\n\nOutput\n8\n\nInput\n2 2\n1 1\n1 1\n\nOutput\n0\n\nInput\n3 3\n1 2 0 2\n2 4\n1 5\n1 2\n1 5\n2 3\n\nOutput\n5\n\nInput\n1 1\n1\n\nOutput\n0\n\nInput\n4 3\n1 2 0 2\n2 4\n2 3\n2 5\n\nOutput\n5\n\nInput\n3 2\n1 2 0 2\n2 4\n2 3\n\nOutput\n3\n\nInput\n4 3\n1 2 0 2\n2 4\n1 5\n1 2\n1 5\n2 3\n\nOutput\n4\n\nInput\n4 3\n1 2 0 2\n2 4\n2 3\n2 5\n\nOutput\n4\n\nInput\n5 5\n1 2 0 2 0\n2 4\n2 3\n2 5\n3 4\n3 5\n\nOutput\n5\n\nInput\n5 4\n1 2 0 2 0\n2 4\n2 3\n2 5\n3 4\n\nOutput\n5\n\nInput\n4 3\n1 2 0 2\n2 4\n1 5\n1 2\n\nOutput\n4\n\nInput\n4 3\n1 2 0 2\n2 4\n1 5\n1 2\n2 5\n\nOutput\n4\n\nInput\n1 1\n1\n\nOutput\n0\n\nInput\n1 1\n2\n\nOutput\n0\n\nInput\n4 5\n1 2 0 2 0\n2 4\n3 4\n4 5\n\nOutput\n5\n\nInput\n5 3\n1 2 0 2\n2 4\n2 3\n\nOutput\n5\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, M = [int(x) for x in stdin.split(' ')]\n        arr = [int(x) for x in stdin.split(' ')]\n        arr = [0] + arr\n        dp = [0] * (N + 1)\n        dp[1] = 2 * arr[1]\n        for i in range(2, N + 1):\n            dp[i] = min(dp[i], dp[i - 1] + 2 * arr[i])\n            if i >= 3:\n                dp[i] = min(dp[i], dp[i - 2] + 2 * arr[i - 1] + arr[i])\n            if i >= 4:\n                dp[i] = min(dp[i], dp[i - 3] + 2 * arr[i - 2] + arr[i - 1])\n            if i >= 5:\n                dp[i] = min(dp[i], dp[i - 4] + 2 * arr[i - 3] + arr[i - 2])\n        return dp[-1]\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1 1 1 1 1\\n2\\n1 2 2\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"4\\n2 1 1 1\\n2\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"2\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"2\\n1 2\\n1 1 1\\n\") == \"YES\"\nassert solution(\"1\\n1 1\\n\") == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"2\\n10 5 1 10 5 1 1 1\") == \"NO\"\nassert solution(\"2\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"2\\n1 1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1') == 'YES'\nassert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1') == 'NO'\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"2\\n10 5 2 10 1 1 2 5\\n2\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"2\\n10 5 2 10 1 1 2 5\\n2\\n10000 10000 10000 10000\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"1 1 10 10\\n2\\n1 1 10 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"1 1 10 10\\n2\\n1 1 10 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n1 2 2 2\\n3\\n1 1 2 2 2 3 3 3\") == 'YES'\nassert solution(\"4\\n1\\n2\\n1 2 2 2\\n3\\n1 1 2 2 2 3 3 3\") == 'YES'\nassert solution(\"4\\n1\\n1\\n1 2 2 2\\n3\\n1 1 2 2 2 3 3 3\") == 'NO'\nassert solution(\"4\\n1\\n1\\n1 1 2 2 2\\n3\\n1 1 2 2 2 3 3 3\") == 'NO'\nassert solution(\"4\\n1\\n1\\n1 1 2 2 2\\n3\\n1 1 2 2 2 3 3 3\") == 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\\nYES\"\nassert solution(\"5\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\\nYES\"\nassert solution(\"1\\n10000 10000 10000 10000\\n1\\n10000\") == \"YES\"\n\n\"\"\"\n\nimport math\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    \n    sticks = [int(x) for x in input().split()]\n    rectangles = 0\n    while len(sticks) > 0:\n        # remove sticks from the set\n        st = max(sticks)\n        if st > 1:\n            rectangles += st // 4\n            sticks = [x for x in sticks if x!= st]\n        else:\n            rectangles += 1\n            sticks = []\n    if n == rectangles:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example) == example_result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example) == result\nprint(solution(input))\n\n\"\"\"\n\n\nimport heapq\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\nprint(solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\"))\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\\n2 1 2\\n3 1 3\") == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 6\\n1 2 10\\n1 3 20\\n2 4 1\") == 20\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == 9\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n\") == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\"\"\"\nfrom algorithms.graphs import shortest_paths\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom heapq import heappop, heappush\n\nn, m, k = [int(x) for x in stdin.readline().strip().split()]\n\nedges = defaultdict(dict)\nfor _ in range(m):\n    x, y, w = [int(x) for x in stdin.readline().strip().split()]\n    edges[x][y] = w\n    edges[y][x] = w\n\ndist = defaultdict(dict)\nfor x in range(1, n+1):\n    dist[x][x] = 0\n\nqueue = deque([(0, x) for x in range(1, n+1)])\nheap = []\nwhile queue:\n    w, x = queue.popleft()\n    for y in edges[x]:\n        if dist[x][y] == None:\n            queue.append((dist[x][y], y))\n            heappush(heap, (dist[x][y], y))\n        elif w+edges[x][y] < dist[x][y]:\n            dist[x][y] = w+edges[x][y]\n            heappush(heap, (dist[x][y], y))\n\nresult = []\nwhile k:\n    w, x = heappop(heap)\n    result.append(w)\n    k -= 1\n\nprint(sum(result))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 6\\n2 3 1\\n3 4 7\\n6 1 5\\n4 5 10\\n7 1 8\\n4 1 1\\n4 3 1\\n5 3 9\\n2 1 1\\n5 2 8\\n7 3 2\\n2 3 10\\n5 4 8\\n3 2 3\\n7 3 5\\n4 2 1\\n2 1 2\\n7 4 1\\n4 2 2\\n1 3 3\\n2 2 2\\n3 3 1\\n5 2 5\\n3 4 5\\n2 3 7\\n1 1 8\\n5 4 8\\n7 2 9\\n5 6 7\\n2 5 7\\n4 7 7\\n7 2 8\\n7 3 1\\n1 2 1\\n1 3 10\\n4 1 1\\n1 5 10\\n5 4 2\\n5 6 3\\n7 4 3\\n2 4 1\\n2 6 10\\n3 4 2\\n1 3 5\\n7 3 2\\n3 1 7\\n5 1 8\\n3 2 3\\n1 1 10\\n2 5 1\\n7 1 5\\n4 1 1\\n5 1 10\\n7 2 1\\n2 1 1\\n2 1 2\\n1 2 2\\n7 2 2\\n3 1 3\\n7 3 5\\n2 4 8\\n5 2 5\\n2 3 7\\n1 1 8\\n5 4 8\\n7 3 2\\n2 2 3\\n7 3 1\\n2 3 10\\n1 2 1\\n1 2 1\\n5 3 6\\n7 2 1\\n3 1 3\\n3 2 10\\n5 1 8\\n5 6 8\\n1 1 10\\n7 3 1\\n5 3 9\\n7 1 5\\n7 2 1\\n1 4 10\\n5 1 5\\n1 5 10\\n7 1 1\\n4 3 1\\n1 1 1\\n4 3 1\\n7 1 1\\n1 1 1\\n7 4 1\\n7 1 1\\n7 3 1\\n2 1 1\\n7 1 1\\n7 3 10\\n1 3 1\\n4 2 1\\n1 1 1\\n7 1 1\\n4 2 1\\n7 1 1\\n5 1 1\\n3 1 1\\n5 3 9\\n5 2 8\\n2 1 2\\n7 5 1\\n1 1 1\\n1 2 2\\n1 2 1\\n1 2 1\\n7 5 1\\n7 3 9\\n5 1 8\\n7 4 10\\n3 2 3\\n7 5 1\\n2 5 1\\n7 5 1\\n7 3 8\\n4 3 1\\n7 7 1\\n5 6 7\\n7 5 10\\n7 5 7\\n1 1 1\\n4 3 1\\n7 2 1\\n2 4 1\\n7 7 1\\n4 3 1\\n7 4 1\\n5 1 1\\n7 7 10\\n7 1 3\\n7 3 10\\n7 2 9\\n7 6 9\\n7 7 10\\n3 2 3\\n7 7 10\\n7 2 9\\n5 6 7\\n3 2 7\\n1 3 3\\n3 2 7\\n7 1 5\\n5 6 7\\n7 2 9\\n7 1 5\\n7 4 10\\n7 3 10\\n7 6 7\\n4 2 1\\n7 7 1\\n1 3 1\\n4 2 1\\n7 1 1\\n7 2 1\\n4 3 1\\n7 3 1\\n7 4 10\\n1 1 10\\n7 4 1\\n5 1 1\\n7 4 1\\n1 1 1\\n7 4 1\\n7 3 10\\n5 1 8\\n5 6 8\\n5 5 7\\n7 7 1\\n4 1 1\\n7 7 1\\n1 1 1\\n1 1 1\\n1 1 1\\n7 1 1\\n4 1 1\\n5 3 9\\n7 1 1\\n5 6 8\\n7 1 1\\n7 2 1\\n5 3 9\\n7 5 7\\n7 6 7\\n7 5 7\\n1 1 1\\n7 4 1\\n7 1 1\\n1 1 1\\n7 4 1\\n7 3 10\\n1 1 1\\n7 4 10\\n1 2 1\\n7 4 10\\n7 1 1\\n5 1 1\\n5 6 8\\n7 1 1\\n7 2 1\\n5 2 5\\n7 7 1\\n1 1 1\\n7 4 1\\n7 1 1\\n7 4 1\\n7 3 10\\n7 1 1\\n7 6 7\\n7 5 10\\n7 7 7\\n4 3 1\\n7 7 7\\n7 3 10\\n7 1 1\\n5 1 1\\n7 7 1\\n7 6 7\\n5 1 8\\n7 1 1\\n7 2 1\\n5 1 5\\n7 7 1\\n7 3 10\\n4 3 1\\n7 7 1\\n7 4 10\\n1 2 1\\n7 7 1\\n7 6 7\\n5 1 8\\n7 7 1\\n7 7 10\\n7 7 7\\n7 1 3\\n7 7 10\\n7 7 7\\n7 6 7\\n7 6 7\\n7 7 7\\n5 6 7\\n3 2 7\\n7 3 10\\n7 4 10\\n7 5 7\\n7 7 7\\n7 4 10\\n7 3 9\\n7 7 7\\n7 7 7\\n7 4 10\\n7 7 7\\n1 2 1\\n7 1 5\\n7 4 10\\n5 1 5\\n7 7 1\\n7 7 1\\n7 6 7\\n7 6 7\\n7 7 7\\n7 4 10\\n7 6 7\\n7 7 7\\n7 7 7\\n5 6 7\\n5 6 7\\n7 7 7\\n7 4 10\\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(    '5\\n1 1 3 4 2'\n    ) == (3, 1, [1, 1, 1, 1, 1], ['1', '1', '1', '1', '1'])\nassert solution(    '6\\n1 5 12 13 2 15'\n    ) == (7, 2, ['2', '2', '1', '1', '2', '1'], ['1', '1', '2', '2', '1', '1'])\nassert solution(    '10\\n1 2 5 129 185 581 1041 1909 1580 8150'\n    ) == (7486, 3, ['3', '3', '3', '2', '2', '2', '1', '1', '1'], ['1', '2', '2', '1', '3', '3', '3', '2', '1'])\nprint('OK')\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\n\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\n\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Optional, Set\n\nimport collections\nimport math"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\n\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\n\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 3 4 2\\n') == '3 1\\n1 1 1 1 1'\nassert solution('6\\n1 5 12 13 2 15\\n') == '7 2\\n2 2 1 1 2 1'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n') == '7486 3\\n3 3 3 2 2 2 2 1 1 1'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 3 4 2\\n') == '3 1\\n1 1 1 1 1\\n'\nassert solution('6\\n1 5 12 13 2 15\\n') == '7 2\\n2 2 1 1 2 1\\n'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n') == '7486 3\\n3 3 3 2 2 2 2 1 1 1\\n'"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n5\") == \"1\\n1\\n1\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5009\\n7\\n9876\\n10000\\n10') == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10'\nprint('Hooray!')\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"9\") == \"1\"\nassert solution(\"9876\") == \"1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"1001\") == \"3\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\n\n\"\"\"\n\nfrom collections import deque\nimport re\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open('test_017.txt').read()) == open('solution_017.txt').read()\nprint(solution(open('input_017.txt').read()))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"2\\n10\\n9\\n10\\n9\\n4\\n5\") == \"1\\n10\\n1\\n10\\n1\\n1\\n4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\") == \"\"\"\n2\n5000 9\n1\n7 \n4\n800 70 6 9000 \n1\n10000 \n1\n10\n\"\"\"\n\n\"\"\"\nSuccess\nDetails \nRuntime: 892 ms, faster than 18.34% of Python3 online submissions for Round and Round.\nMemory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for Round and Round.\n\"\"\"\n\n\"\"\"\nSuccess\nDetails \nRuntime: 624 ms, faster than 80.12% of Python3 online submissions for Round and Round.\nMemory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for Round and Round.\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n5009\n7\n9876\n10000\n10\"\"\") == \"\"\"2\n5000 9\n1\n7 \n4\n800 70 6 9000\n1\n10000\n1\n10\"\"\"\nprint(*solution(\"\"\"5\n5009\n7\n9876\n10000\n10\"\"\"), sep='\\n')\nassert solution(\"\"\"4\n1\n5\n7\n10\n\"\"\") == \"\"\"2\n1\n2\n3\n4\n5\n\"\"\"\nprint(*solution(\"\"\"4\n1\n5\n7\n10\n\"\"\"), sep='\\n')"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n7') == '1\\n2\\n1\\n2\\n1'\nassert solution('4\\n1') == '1\\n1\\n1\\n1'\nassert solution('3\\n1\\n9') == '1\\n1\\n1'\nassert solution('1\\n9') == '1\\n1\\n1'\nassert solution('1\\n1') == '1\\n1'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n2 3 1') == '1 1 1 1 1'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n1\\n4\\n3 4 1 2\") == \"1 1 1 1 1\"\nassert solution(\"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n1\\n4\\n3 4 1 2\") == \"3 3 3 2 1 3\"\nassert solution(\"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\nassert solution(\"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 2 2 2\"\nassert solution(\"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 2 2 2\"\n\n\"\"\"\n\n\n\nfrom collections import defaultdict, deque\nimport sys"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_2) == expected_output_2\nprint(solution(input()))\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3 1') == '1 1 1 1 1'\n\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\n\nassert solution('''\n2\n3\n1 2 3\n4\n2 3 1\n4\n1 2 3 4\n5\n2 3 4 1 5\n3\n1 3 2\n5\n3 4 5 2 1\n''') == '''\n4 4 4 1 4\n5\n1 3 2 5 3\n'''\n\nassert solution('''\n3\n3\n1 2 3\n2\n1 3 2\n3\n1 2 3\n1\n1\n1\n''') == '''\n1 1 1\n'''\n\n'''\n\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n3\n1 3 2\n5\n3 4 5 2 1\n\n'''"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n7\\n1 3 2 4 5 6 7\\n2\\n3\\n1 5 6 7 2 4 3\\n8\\n1 2 3 4 5 6 7 8\\n\") == \"1 1 1 1 1 1 1\\n7 7 7\\n6 7 6 7 7\\n1\\n1\\n5 6 7 2 4 3\\n8\\n1 2 3 4 5 6 7 8\\n\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n2\\n10\\n1 4 7 8 9 10 2 3 5 6\\n10\\n1 2 3 4 5 6 7 8 9 10\\n2\\n2\\n1 5 6 7 8 9 10 2 3 4 5\\n10\\n1 2 3 4 5 6 7 8 9 10\\n2\\n2\\n1 6 7 8 9 10 2 3 4 5\\n10\\n1 2 3 4 5 6 7 8 9 10\\n2\\n2\\n1 7 8 9 10 2 3 4 5 6\\n10\\n1 2 3 4 5 6 7 8 9 10\\n2\\n2\\n1 8 9 10 2 3 4 5 6 7\\n10\\n1 2 3 4 5 6 7 8 9 10\\n2\\n2\\n1 9 10 2 3 4 5 6 7 8\\n10\\n1 2 3 4 5 6 7 8 9 10\\n2\\n2\\n1 10 2 3 4 5 6 7 8 9\\n\") == \"1 1 1 1 1 1 1 1\\n7 7 7\\n6 7 6 7 7\\n1\\n1\\n5 6 7 2 4 3\\n8\\n1 2 3 4 5 6 7 8\\n\"\n\n\"\"\"\n\n\n\"\"\"\n\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5') == '1 1 1 1 1 '\nassert solution('3') == '3 3 3 '\nassert solution('1') == '1 '\nassert solution('2') == '2 2 2 2 '\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\nprint(\"Let's check the example with the solution: \", end='')\nassert solution('''\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\nprint(\"Success!\")\n\n-----Solution-----\n\nn = int(stdin.readline())\nbooks = [int(x) for x in stdin.readline().strip().split()]"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n2 3 1\") == '1 1 1 1'\nassert solution(\"2\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == '3 3 3'\nassert solution(\"2\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == '2 3 3 2 1 3'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0437\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u043d\u0430\u043b\u0438\u0437, \u0447\u0442\u043e\u0431\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0441\u044f \u0441 \u0437\u0430\u043a\u0430\u0437\u043e\u043c \u0438 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442.\n\u041f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u0445\u043e\u0442\u0435\u043b \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u043a\u0443\u043f\u0438\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u043d\u043e \u0435\u0433\u043e \u0434\u0435\u043d\u044c\u0433\u0438 \u043f\u043e\u0442\u043e\u043c \u043e\u043d \u043f\u043e\u043d\u0438\u0437\u0438\u0442.\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0435\u0441\u043b\u0438 \u043a\u0443\u043f\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u043e\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e-\u0442\u043e \u0434\u0435\u043d\u0435\u0433, \u0430 \u043f\u043e\u0442\u043e\u043c \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u0435\u0442\u0441\u044f.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043a\u0430\u043a\u043e\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u043a\u0443\u043f\u0438\u0442\u044c, \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u0432 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0435\u043c\u0443 \u043d\u0443\u0436\u043d\u043e,\n\u0438 \u043e\u043f\u043b\u0430\u0442\u0438\u0432 \u043f\u043e\u0434 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0447\u0435\u043c \u0435\u043c\u0443 \u043d\u0443\u0436\u043d\u043e.\n\n\u041f\u043e\u0434 \u0441\u043b\u043e\u0432\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e - \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0445\u043e\u0447\u0435\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0438 \u043e\u043d \u0445\u043e\u0447\u0435\u0442 \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0447\u0442\u043e-\u0442\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 T, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u0430\u0431\u043e\u0440 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a.\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438\u0434\u0451\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u0438\u0434\u0430 \u00ab\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u00bb, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0437\u0430 \u043a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0445\u043e\u0447\u0435\u0442 \u043a\u0443\u043f\u0438\u0442\u044c\n\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435. \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 n, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c.\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c m, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043f\u043b\u0430\u0442\u0438\u0442 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3\n\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 3\n\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 6\n\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 9\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n3\n2\n\n\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e 3 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044e \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c 2, \u0430 \u043e\u043f\u043b\u0430\u0442\u0438\u0442"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"2\"\nassert solution(\"7\\n2 5 1 6 3 7 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_1) == expected_1\nassert solution(input_2) == expected_2\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\\n1 1 1\\n2 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(['5\\n', '1 2 3 4 5\\n', '3\\n', '1 2 2\\n', '4\\n', '1 1 1 1\\n']) == '2\\n1\\n1\\n'\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\\n\") == \"3\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\n\nimport sys\nfrom typing import Tuple\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4 2\n10 4 10 15\n1 2\n4 3\n\"\"\"\n) == \"\"\"0 0 1 2\"\"\"\n\nassert solution(\n\"\"\"\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n\"\"\"\n) == \"\"\"5 4 0 5 3 3 9 0 2 5\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n\nassert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 5\\n8 1\\n5 3\\n3 5\\n') == '5 5 0 2 2 0 1'\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\n\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n10 4 10 15\n1 2\n4 3\n''') == '0 0 1 2'\nassert solution('''\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n''') == '5 4 0 5 3 3 9 0 2 5'\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == 'abb'\n\"\"\"\n\n\"\"\"\n\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u044f\u0432\u043d\u0456\u0441\u0442\u044c \u0440\u043e\u0437\u0432'\u044f\u0437\u043a\u0443 \u0437\u0430\u0434\u0430\u0447\u0456 \u043f\u0440\u043e \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044f \u0441\u0442\u0440\u0456\u0447\u043a\u0438 $s$ \u0437\u0456 \u0441\u043f\u0438\u0441\u043a\u0443 \n\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"NO\"\nassert solution(\"1 3 2\") == \"abc\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"4 2 4 1 2\") == \"aab\"\nassert solution(\"4 2 3 3\") == \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"abb\"\nassert solution(\"3 3\\n1 3 2\\n2 3 1\") == \"abc\"\nassert solution(\"4 4\\n1 2 3 4\\n1 2 4 3\") == \"abcd\"\nassert solution(\"5 2\\n1 2 3 5\\n1 5 2\") == \"NO\"\nassert solution(\"1 1\\n1\") == \"NO\"\n\n\"\"\"\n\nimport unittest\nfrom typing import List, Set\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"abb\"\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'abb'\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\n\nstr = [chr(i) for i in range(ord('a'), ord('a')+n)]\n\np = [int(x) for x in input().split()]\nq = [int(x) for x in input().split()]\n\nchar = set()\n\nfor i in p:\n    char.add(str[i-1])\n\nfor i in q:\n    char.remove(str[i-1])"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'abc'\nassert solution('1 3 2') == 'cba'\nassert solution('3 2 1') == 'cba'\n\nassert solution('3 2 1') == 'cba'\nassert solution('2 3 1') == 'cba'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'b'\nassert solution('3 2') == 'a'\nassert solution('3 1') == 'ab'\nassert solution('3 3') == 'ab'\nassert solution('4 1') == 'abc'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\n\n\n-----Explanation-----\n\nThe first example:\n\n- The cans are numbered from left to right from $1$ to $3$.\n- The first can is $20$, the second is $10$, and the third one is $20$.\n- For the first can it's $20 \\cdot 1 + 1 = 21$ shots are needed.\n- After that only second can remains and he needs $10 \\cdot 2 + 1 = 21$ shots.\n- After that only third can remains and he needs $20 \\cdot 3 + 1 = 43$ shots.\n- In total the number of shots is $1 + 21 + 21 = 43$.\n\nThe second example:\n\n- The cans are numbered from left to right from $1$ to $4$.\n- The first can is $10$, the second is $10$, the third one is $10$, and the fourth one is $10$.\n- All cans have the same durability so any order of shooting is enough.\n- In total the number of shots is $64$.\n\n\n-----JavaScript(JS)-----\n\nvar solution = function(stdin) {\n    const cans = stdin.split('\\n')[0].split(' ');\n    const canDur = [...Array(cans.length).fill(1)];\n    \n    let index = 0;\n    while(index < canDur.length) {\n        let count = 0;\n        while(count < canDur[index]) {\n            count += cans[index];\n            index++;\n            if(index >= canDur.length) break;\n        }\n    }\n    \n    const ans = [];\n    let max = 0;\n    for(let i = 0; i < canDur.length; i++) {\n        if(canDur[i] > max) {\n            max = canDur[i];\n            ans = [i];\n        }\n        else if(canDur[i] == max) {\n            ans.push(i);\n        }\n    }\n    return ans.join(' ');\n}\n\nsolution(\"3\\n20 10 20\") == \"43\"\nsolution(\"4\\n10 10 10 10\") == \"64\"\nsolution(\"6\\n5 4 5 4 4 5\") == \"69\"\nsolution(\"2\\n1 4\") == \"3\"\n\n\n\n-----Instructor's solution 1-----"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == '43'\nassert solution(\"4\\n10 10 10 10\") == '64'\nassert solution(\"6\\n5 4 5 4 4 5\") == '69'\nassert solution(\"2\\n1 4\") == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n20 10 20\"\n) == \"43\"\n\nassert solution(\n    \"4\\n10 10 10 10\"\n) == \"64\"\n\nassert solution(\n    \"6\\n5 4 5 4 4 5\"\n) == \"69\"\n\nassert solution(\n    \"2\\n1 4\"\n) == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nassert solution(\"1\\n4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\"\n\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\"\n\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\"\n\nassert solution(\"2\\n1 4\\n\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3\\n20 10 20'\n) == '43'\n\nassert solution(\n    '4\\n10 10 10 10'\n) == '64'\n\nassert solution(\n    '6\\n5 4 5 4 4 5'\n) == '69'\n\nassert solution(\n    '2\\n1 4'\n) == '3'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nl = list(map(int, sys.stdin.readline().split()))\n\ns = 0\nc = 1\n\nfor i in range(1, n):\n    s += c*l[i-1] + 1\n    c += 1\n\nprint(s)\n\ni = 0\nfor _ in range(n):\n    print(i, end=\" \")\n    i += l[i] + 1\n\nprint()\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\\n4 2 5 1 3\"\n) == \"3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 1 3\\n\") == \"3\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nperm = list(map(int, stdin.readline().strip().split()))\n\nperm = sorted(perm)\n\ncnt = 0\nfor i in range(1, n + 1):\n    if perm[i] < perm[i - 1]:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 5 1 3') == 3\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 2 5 1 3') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 5 1 3\") == \"3\"\n\"\"\"\n\nn = int(input())\np = [int(x) for x in input().split()]\ni = 0\ncount = 0\nwhile i < n:\n    j = 0\n    while j < i:\n        if p[i] < p[j]:\n            count += 1\n            break\n        j += 1\n    i += 1\nprint(count)"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\ntest_input = '''\n5\n4 2 5 1 3\n'''\n\ntest_output = '''\n3\n'''"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\nassert solution('7\\n1 1 1 1 1 1 1 1') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 3 3') == '1'\n\"\"\"\nimport numpy as np\n\ninput_numbers = input().split()\ninput_numbers = list(map(int, input_numbers))\n\nprint(np.unique(input_numbers, return_counts=True))\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == 1\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 3 3 3') == 1\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\ntest_input = \"0 2 3 4 5\"\ntest_output = \"1\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\nimport numpy as np\n\nnumbers = [int(s) for s in stdin.split(\" \")]\n\nprint(int(np.where(numbers == 0)[0]))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 2 3 4 5''') == '1'\nassert solution('''0 2 3 4 0''') == '1'\nassert solution('''3 4 5 0 2''') == '2'\nassert solution('''0 0 0 0 5''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 2 3 4 5''') == '1'\n\"\"\"\nimport sys\nfrom collections import Counter\n\na = Counter(map(int, sys.stdin.read().split()))\nfor i, v in enumerate(a.items()):\n    if v[1] == 0:\n        print(i + 1)\n        break\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == '1'\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readline()\nx_0, x_1, x_2, x_3, x_4 = stdin.split(\" \")\nx_0 = int(x_0)\nx_1 = int(x_1)\nx_2 = int(x_2)\nx_3 = int(x_3)\nx_4 = int(x_4)"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 2 3 4 5''') == '1'\nassert solution('''0 2 3 4 4 5''') == '1'\nassert solution('''0 2 3 4 3 5''') == '2'\nassert solution('''0 2 3 4 0 5''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 2 1 3 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == 0\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\n\nimport sys\n\nh, w = map(int, sys.stdin.readline().strip().split(' '))\n\nsmallest = 0\nbiggest = 0\n\nfor i in range(h):\n    row = list(map(int, sys.stdin.readline().strip().split(' ')))\n    for j in range(w):\n        if row[j] > biggest:\n            biggest = row[j]\n        if row[j] < smallest:\n            smallest = row[j]\n\nprint(biggest - smallest)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 3') == '1'\nassert solution('7 7\\n4 4') == '3'\nassert solution('1 1\\n1 1') == '0'\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 5) == 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"0\"\n\nsolution(\"3 5\") == \"0\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n') == '0'\nassert solution('1 1\\n') == '0'\nassert solution('3 2\\n') == '-1'\nassert solution('3 0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 5\"\n) == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == 0\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10 100') == 'Yes'\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 100\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10 10 100\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom math import prod\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 10 100''') == 'Yes'\n\nassert solution('''4\n2 7 3 2\n''') == 'No'\n\nassert solution('''6\n6 5 5 4 4 3\n''') == 'No'\n\nassert solution('''4\n2 7 3 2\n''') == 'No'\n\nassert solution('''5\n2 1 7 3 4\n''') == 'No'"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\nassert solution('2\\n1 100') == 'No'\nassert solution('2\\n3 2') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n1 10 100'\n) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 10 100\\n') == 'Yes'\n\n------\n1 10 100\nOutput\nYes"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"3 10 5 5 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 10 100''') == 'Yes'\nassert solution('''2\n1 10''') == 'No'\nassert solution('''2\n10 10''') == 'Yes'\nassert solution('''1\n1''') == 'Yes'\nassert solution('''2\n1 100''') == 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 10 100\\n') == 'Yes'\nassert solution('3\\n1 10 100\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd') == 'dcba'\nassert solution('aab') == 'baa'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abcd') == 'No'\nassert solution('abcd') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"xya\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import product\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xy') == 'Yes'\nassert solution('yxa') == 'Yes'\nassert solution('atcoder') == 'No'\n\n\"\"\"\n\ns, t = input().split('\\n')\n\nnum_s = 0\nnum_t = 0\nfor i in range(len(s)):\n    if s[i] < t[i]:\n        num_s += 1\n    elif s[i] > t[i]:\n        num_t += 1\n\nprint('Yes' if num_s < num_t else 'No')\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('atcoder') == 'No'\nassert solution('atlas') == 'Yes'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 'cba'\nassert solution('abcdef') == 'cbadf'\n\nprint(solution('xy'), solution('xy'))\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('xy') == 'No'\nassert solution('atcoder') == 'No'\nassert solution('atlas') == 'Yes'\n\n---\n\nSolved without using additional data structures.\n\nThe logic is as follows:\n\n1. We start from the first element of s.\n2. If this element is smaller than the first element of t, then s < t.\n3. If this element is larger than the first element of t, then s > t.\n4. Now, we can start from the second element of s and t.\n5. At each step, we check whether the current element of s is larger than the current element of t.\n6. If it is, then we know that s < t.\n7. If it isn't, then we know that s > t.\n8. Therefore, at step 4, the first element of s will always be larger than the first element of t.\n9. Therefore, we will never be able to check whether s < t.\n10. Finally, the only possible case is that s > t.\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 5 -1\") == \"NO\"\nassert solution(\"9 0 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('2 2 4') == 'NO'\n\n\"\"\"\n\nfrom typing import List\nfrom unittest.mock import patch\nfrom sys import argv\nimport unittest\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5 1') == 'YES'\n\n---Problem---\nT\u00ednh t\u1ed5ng c\u00e1c s\u1ed1 nguy\u00ean d\u01b0\u01a1ng l\u1edbn h\u01a1n n l\u00e0m tr\u00f2n th\u1ea5p nh\u1ea5t cho m\u1ed9t s\u1ed1 nguy\u00ean d\u01b0\u01a1ng.\n\nNh\u1eadp v\u00e0o 4 s\u1ed1 a, b, c, d, t\u00ednh to\u00e1n n\u00e0y sau:\n    Gi\u1ea3 s\u1eed a < b < c < d, t\u1ea1i m\u1ed7i l\u1ea7n th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng, n\u1ebfu b\u1ea1n \u0111\u01b0\u1ee3c ch\u1ecdn m\u1ed9t s\u1ed1 \u0111\u01b0\u1ee3c th\u00ec s\u1ebd ph\u00e1t hi\u1ec7n sau:\n        s\u1ed1 n\u00e0o ch\u1ecdn nhi\u1ec1u l\u1eafm nha\n        b\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn t\u1edbi s\u1ed1 a c\u1ee7a m\u00ecnh\n        n\u1ebfu b\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn l\u1ea1i, m\u1edbi nh\u1ea5t l\u00e0 s\u1ed1 d, m\u00e0 sau \u0111\u00f3 b\u1ea1n ph\u00e1t hi\u1ec7n c\u00e1c s\u1ef1 th\u1eadt sau:\n            b\u1ea1n ch\u1ecdn s\u1ed1 d xa\n            b\u1ea1n ch\u1ecdn s\u1ed1 c xa\n            c\u00e1c s\u1ed1 n\u00e0o c\u00f2n l\u1ea1i ch\u01b0a th\u1ec3 ch\u1ecdn\n        n\u1ebfu b\u1ea1n \u0111\u01b0\u1ee3c ch\u1ecdn l\u1ea1i, m\u1edbi nh\u1ea5t l\u00e0 s\u1ed1 d, m\u00e0 sau \u0111\u00f3 b\u1ea1n kh\u00f4ng ch\u1ecdn s\u1ed1 c, m\u00e0 sau \u0111\u00f3 b\u1ea1n ph\u00e1t hi\u1ec7n c\u00e1c s\u1ef1 th\u1eadt sau:\n            b\u1ea1n ch\u1ecdn s\u1ed1 d xa\n            n\u1ebfu b\u1ea1n ch\u1ecdn s\u1ed1 c, m\u00e0 sau \u0111\u00f3 b\u1ea1n ph\u00e1t hi\u1ec7n c\u00e1c s\u1ef1 th\u1eadt sau:\n                b\u1ea1n ch\u1ecdn s\u1ed1 d xa\n                b\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn nhi\u1ec1u l\u1eafm nha\n                b\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn l\u1ea1i, m\u1edbi nh\u1ea5t l\u00e0 s\u1ed1 c, m\u00e0 sau \u0111\u00f3 b\u1ea1n ph\u00e1t hi\u1ec7n c\u00e1c s\u1ef1 th\u1eadt sau:\n                    b\u1ea1n kh\u00f4ng ch\u1ecdn s\u1ed1 c, m\u00e0 sau \u0111\u00f3 b\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn l\u1ea1i, m\u1edbi nh\u1ea5t l\u00e0 s\u1ed1 d, m\u00e0 sau \u0111\u00f3 b\u1ea1n ph\u00e1t hi\u1ec7n c\u00e1c s\u1ef1 th\u1eadt sau:\n                        b\u1ea1n ch\u1ecdn s\u1ed1 d xa\n                        n\u1ebfu b\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn l\u1ea1i, m\u1edbi nh\u1ea5t l\u00e0 s\u1ed1 c, m\u00e0 sau \u0111\u00f3 b\u1ea1n kh\u00f4ng ph\u00e1t hi\u1ec7n nh\u1eefng c\u00e1i tr\u00ean nha\n\n-----Notes-----\nThe solution must not require a loop.\n\n-----Hints-----\nUsing math module\n\n-----Source-----\ngeeksforgeeks\n\n\"\"\"\n\n\"\"\"\nCode 1\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('3 3 1') == 'NO'\n\n'''"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"1 1 0\") == \"YES\"\nassert solution(\"1 10 0\") == \"NO\"\nassert solution(\"1 1 0\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n') == '1'\nassert solution('3 2\\n') == '5'\nassert solution('2 4\\n') == '6'\nassert solution('3 3\\n') == '10'\nassert solution('10 10\\n') == '100'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == 1\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 2''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\n'''"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '1'\nprint('PASSED')\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '1'\nassert solution('5 5\\n') == '9'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 1\n\n\"\"\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13 3 1\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 3 1') == '3'\n\nYou can test your implementation by running python3 z:Problem01.py < input.txt\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('4 5 1') == '1'\nassert solution('1 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 3 1\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13 3 1') == '3'\nassert solution('6 5 8') == '3'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 5 8''') == '3'\nassert solution('''6 4 3''') == '2'\nassert solution('''13 5 1''') == '3'\nassert solution('''19 5 6''') == '2'\nassert solution('''100000000000 100 1000000000''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(int(input()))\nSample Input 1\n4 2 3\nSample Output 1\n2\nSample Input 2\n5 1 2\nSample Output 2\n4\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == 2\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == 2\n\"\"\"\n\nimport sys\nimport math\n\nN = int(input())\nA = dict()\n\nfor _ in range(N):\n    a, b = tuple(map(int, sys.stdin.readline().split()))\n    A[a] = b\n\nans = 0\nfor i in range(1, N+1):\n    for j in range(i+1, N+1):\n        x1, y1 = i, A[i]\n        x2, y2 = j, A[j]\n        if x1 > y2 and x2 > y1:\n            ans += 1\nprint(ans)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\") == \"2\"\n\"\"\"\n\nN = int(input())\nc = []\nd = []\n\nfor i in range(N):\n    a, b = map(int, input().split())\n    c.append(a)\n    d.append(b)\n\ncount = 0\n\nfor i in range(N):\n    for j in range(i+1, N):\n        if c[i] < c[j]:\n            if d[i] < d[j]:\n                count += 1\n\nprint(count)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1\\n1 3\\n3 4') == '2'\n\"\"\"\n\nN = int(input())\n\nred_pairs = []\nblue_pairs = []\n\nfor _ in range(N):\n    red_pairs.append(tuple(map(int, input().split())))\nfor _ in range(N):\n    blue_pairs.append(tuple(map(int, input().split())))\n\nred_pairs.sort(key=lambda x: x[0])\nblue_pairs.sort(key=lambda x: x[1])\n\nred_start = 0\nblue_start = 0\nmax_pairs = 0\n\nwhile red_start < N and blue_start < N:\n    if red_pairs[red_start][0] < blue_pairs[blue_start][1]:\n        max_pairs += 1\n        red_start += 1\n    blue_start += 1\n\nprint(max_pairs)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\") == \"2\"\n\n---\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\"\"\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n'''"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\") == \"7\"\nassert solution(\"2 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\nimport math"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n0 3\") == 7\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nn, t = [int(n) for n in input[0].split()]\n\narr = [int(n) for n in input[1].split()]\n\narr.sort()\n\nsum = 0\ncount = 0\nfor i in range(n):\n    if count == 0:\n        sum += arr[i]\n    else:\n        sum += arr[i] * (t - count)\n    count += 1\n    if count == t:\n        sum += arr[i]\n        count = 0\n    \nprint(sum)\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n0 2\\n3\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 4\n0 3''') == '7'\nassert solution('''1 1\n0''') == '0'\n\"\"\"\n\n\nfrom operator import itemgetter"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4') == '7'\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"9\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 3\") == \"6\"\n\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == '1\\n1\\n2'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == '0\\n2\\n1'\n\n-----My solution-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == '1\\n1\\n2'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == '0\\n2\\n1'"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\nR 3\\n? 2\\n') == '1'\nassert solution('2\\n1\\nR 3\\n? 1\\n') == '1'\nassert solution('1\\n1\\nL 2\\nR 3\\n') == '2'\nassert solution('2\\n1\\nL 2\\nR 3\\n') == '2'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nL 3\\nL 1\\nR 1\\nL 4\\nL 4\\nR 2\\nR 4\\nR 3\\nR 5\\n') == '1'\nassert solution('5\\nL 4\\nL 4\\nR 4\\nL 4\\nL 4\\nR 2\\nR 4\\nR 3\\nR 5\\n') == '1'\nassert solution('5\\nL 1\\nL 1\\nR 2\\nL 4\\nR 4\\nR 4\\nL 4\\nL 4\\nR 4\\nR 4\\n') == '1'\nassert solution('5\\nL 1\\nL 2\\nR 2\\nL 4\\nR 4\\nR 4\\nL 4\\nL 4\\nR 4\\nR 4\\n') == '2'\nassert solution('5\\nL 1\\nL 2\\nR 1\\nL 3\\nR 3\\nR 4\\nL 1\\nR 2\\nL 2\\nR 3\\nR 3\\nR 4\\nL 3\\nR 3\\nR 4\\n') == '2'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\"\"\") == \"1\"\nassert solution(\"\"\"10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\"\"\") == \"0\"\nassert solution(\"\"\"8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\"\"\") == \"1\"\nassert solution(\"\"\"10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\nR 3\\n? 2\\nL 4\\n? 1') == '1\\n1\\n2'\nassert solution('1\\n2\\nR 3\\n? 2\\nL 4\\n? 1') == '1\\n1\\n2'\nassert solution('1\\n2\\nR 3\\n? 2\\nL 4\\n? 1') == '1\\n1\\n2'\n\n\n\n--- Part Two ---\nThe students have realized that the actual books on the shelf have a much higher quality. So, now they would like to change the books on the shelf. They have decided to do this by placing the books on the shelf from a higher to a lower ranking. To do that, they need a new operation called!. The! operation takes a book from the shelf and places it on the shelf from a higher ranking to a lower ranking.\n\nThey have decided that the! operation should only be performed if the following conditions are met:\n\nthe book that is being removed is the only one of its kind on the shelf;\nthe book that is being removed is not the only one of its kind on the shelf, but it has the same ranking as one of the books remaining on the shelf;\nthe book that is being removed is not the only one of its kind on the shelf, but it has a lower ranking than one of the books remaining on the shelf.\nGiven a sequence of! operations, sort the books on the shelf from higher ranking to lower ranking. If there are several books of the same ranking, list them in the order from left to right.\n\nFor example, consider the following sequence of! operations:\n\n! 1\n! 2\nR 1\nR 2\n! 3\nThe shelf should change to: $[3, 2, 1]$.\n\nThe students are too busy with their homework to consider how to implement it. Maybe later.\n\n\"\"\"\n\n\nfrom collections import deque\n\nINPUT_FILE_NAME = \"input.txt\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\\n1\\n2\\n\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\\n\"\n\n\"\"\"\n\nfrom sys import stdin\nimport functools\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\n-------\n\nWe can modify the problem slightly, to take care of the first query of type 3: we will assume that the first book can be any position in the shelf. Then our solution should be:\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\") == \"1\\n1\\n2\"\nassert solution(\"10\\n100\\n100000\\n123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\nL10\\nR10\") == \"0\\n2\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0\\n0') == '0'\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('1\\n3') == '1'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\nimport math"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\nassert solution('7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\nassert solution('7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n6960\\n'\nprint('Test passed\\n')\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n1\\n2\\n2\\n2\\n2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n20\\n40\") == \"2\"\nassert solution(\"3\\n1\\n5\\n10\") == \"0\"\nassert solution(\"4\\n30\\n1\\n100\") == \"5\"\nassert solution(\"4\\n10\\n30\\n10\") == \"3\"\nassert solution(\"4\\n10\\n30\\n10\\n100\") == \"6\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_string) == expected_result\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0') == '0'\nassert solution('0 1') == '-1'\nassert solution('1 0') == '1'\nassert solution('1 1') == '1'\nassert solution('0 0 1 0') == '0'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 3\n4\n1 1 2 1''') == 'YES'\nassert solution('''3\n1 1 3\n4\n1 1 2 1''') == 'NO'\nassert solution('''5\n1 1 2 1\n3\n11 11\n1\n100''') == 'YES'\nassert solution('''5\n1 1 2 1\n3\n11 11\n1\n100''') == 'NO'\nassert solution('''3\n1 1 3\n4\n1 1 2 1''') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'YES'\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'NO'\nassert solution(\"1\\n100\\n1\") == 'YES'\nassert solution(\"1\\n100\\n1\") == 'NO'\n\n\nimport sys; input = sys.stdin.readline;"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\n\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 2 1\\n2\\n1 1\\n3') == 'YES'\nassert solution('4\\n1 1 2 1\\n3\\n1 1\\n3') == 'NO'\nassert solution('4\\n1 1 2 1\\n4\\n1 1 2 1\\n3') == 'YES'\nassert solution('4\\n1 1 2 1\\n4\\n1 1 2 1\\n3') == 'NO'\nassert solution('4\\n1 1 2 1\\n5\\n1 1 2 1\\n3') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n3\n1 2 3\n4\n1 2 3 4\n5\n1 2 3 4 5\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"\n2\n3\n1 2 3\n4\n1 2 3 4\n\"\"\"\n) == \"YES\"\n\"\"\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\"\"\") == \"YES\"\nassert solution(\"\"\"3\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\"\"\") == \"NO\"\nassert solution(\"\"\"4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\"\"\") == \"YES\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"4\\n1 1 3\\n4\\n11 11\\n1\\n100\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 4\nassert solution('bacabaa') == 0\n\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"bacabaa\") == \"0\"\nassert solution(\"zcabd\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('aba') == 0\nassert solution('bab') == 1\nassert solution('aab') == 1\nassert solution('abbcabba') == 2\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\nassert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == \"4\"\nassert solution(\"zcabd\", \"dbacz\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\n\n---\n\n\n***\nNot actually the solution I was looking for, just the first way to test it with python lol\n\n```python\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\n\"\"\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5\\n2 5 1\\n4 9 1\") == \"15\\n-20\\n-1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\n\n----\n\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"1\\n1\\n10000000\\n10000000\\n999999999\") == \"0\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10 100 2 1\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\nassert solution('2\\n100 1 4\\n1 10 5\\n1000000000 1 6') == '8\\n198\\n-17\\n2999999997'\nassert solution('3\\n100 1 4\\n1 10 5\\n1000000000 1 6') == '8\\n198\\n-17\\n2999999997'\nassert solution('3\\n100 1 4\\n1 10 5\\n1000000000 1 6') == '8\\n198\\n-17\\n2999999997'\nassert solution('5\\n10 100 2 1\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 3') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4 2 1\\n1 2 3\") == \"0\\n2\"\nassert solution(\"2\\n1 2 3\\n100 100 1\") == \"198\"\nassert solution(\"2\\n1 2 3\\n1 2 1\") == \"5\"\nassert solution(\"1\\n1 1 1\") == \"0\"\nassert solution(\"2\\n1 2 3\\n1 2 1\\n1 2 3\") == \"198\\n0\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('\\n\\n') == '\\n\\n'\nassert solution('\\n\\n\\n\\n') == '\\n\\n\\n\\n'\nassert solution('\\n\\n\\n\\n\\n') == '\\n\\n\\n\\n\\n'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n0 1 1') == '1'\nassert solution('2\\n5 2 3') == '8'\nassert solution('3\\n100 1 4') == '198'\nassert solution('4\\n1 10 5') == '-17'\nassert solution('5\\n1 1 1000000000') == '2999999997'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 -17 2999999997 0 1\"\n\n\n-----Hint-----\n\nEach query describes the position after a single jump.\n\nYou can build an array of the positions and then update the positions after each jump.\n\nThe number of jumps for each query will be a small integer.\n\nThe frogs can jump in any of the three directions but the frog will always jump in the same direction.\n\nMake sure to store the values in the correct direction.\n\nAs you can see, the problem can be solved with O(1) extra space complexity and O(t * 2) time complexity.\n\nA more mathematical solution uses the fact that frog jumps follow the geometric distribution.\n\nThe probability of having jumped right in the $i$-th query is $a_i/(a_1 + a_2 +... + a_n)$.\n\nTo get the result of the computation of this sum for each query, you can use the formula:\n\nsum(1, a_i) - sum(1, a_1 + a_2 +... + a_{i-1}) = 1 - sum(1, a_1 + a_2 +... + a_{i-1})\n\nA more general solution for any geometric distribution can be found here.\n\n\"\"\"\n\nfrom math import factorial\n\nt = int(input())\nans = []\n\nfor i in range(t):\n    a, b, k = map(int, input().split())\n    s = sum([factorial(i + 1) for i in range(b - 1)])\n    k -= b - 1\n    r = (a * k) % (s + 1)\n    ans.append(s - r)\n\nprint(*ans, sep='\\n')"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"5\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n6\\n1\\n3\\n10\\n8\\n\") == \"5\\n5\\n10\\n5\\n9\\n9\\n13\\n13\\n\"\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\") == \"2\"\nassert solution(\"5\\n3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n6\") == \"9\"\nassert solution(\"6\\n13\") == \"27\"\nassert solution(\"6\\n3620\") == \"6561\"\nassert solution(\"1000000000000000000\\n1\") == \"1\"\nassert solution(\"8\\n10000\") == \"19683\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n6\\n7\\n8\\n9\\n10\\n') == '3\\n5\\n9\\n12\\n17\\n34\\n70\\n144'\n\"\"\"\n\nfrom collections import Counter\nimport itertools\nimport math\nimport random\nimport re\n\nn = int(input())\n\nfor _ in range(n):\n    number = int(input())\n    if number < 10:\n        print(number)\n    elif number % 3 == 0:\n        print(number)\n    else:\n        start = 10 ** (int(math.log(number, 3)) + 1)\n        min_num = int(start ** 0.5)\n        if min_num ** 2 == start:\n            print(start)\n            continue\n\n        for i in range(min_num, 1, -1):\n            if number % i == 0:\n                if i ** 2 == number:\n                    print(number)\n                else:\n                    print(number - i + 1)\n                break\n        else:\n            print(number)\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2\\n6\\n3\\n9') == '13'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\") == \"3\"\nassert solution(\"4\\n2\") == \"5\"\nassert solution(\"5\\n2\") == \"5\"\nassert solution(\"5\\n3\") == \"8\"\nassert solution(\"5\\n4\") == \"9\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nassert solution(\"5\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nassert solution(\"5\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nassert solution(\"5\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nassert solution(\"5\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n6\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70771771779999999999999\"\nassert solution(\"5\\n3 3 3 3 3 3\\n3 3 1 1 1\\n1 1 1 1 1\") == \"99999999999999999\"\n\n\"\"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '707717717799999999901111111111010'\nassert solution('1\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n') == '9'\nassert solution('2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '8'\nassert solution('3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '7'\nassert solution('3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '6'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10 8 5 3') == '70'\nassert solution('12 8 8 7 2') == '77'\nassert solution('12343 43 4543 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\nassert solution('1000000000 1000000000 1 1 1000000000') == '999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '7077177177999999999'\nassert solution('''7\n11 10 3 4 1\n3 4 4 5 2\n1343 4 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n11 11 2 1 5\n11 11 9 1 10''') == '771099999999999999'\nassert solution('''2\n5 1 10 20\n10 10 10 10\n1 1 1 1''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '7077177279989991492935'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('4\\n') == '2'\nassert solution('1\\n2\\n') == '2'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 8 5 3\\n'\n    '12 8 8 7 2\\n'\n    '12343 43 4543 39 123212\\n'\n    '1000000000 1000000000 1 1 1\\n'\n    '1000000000 1000000000 1 1 1000000000\\n'\n    '10 11 2 1 5\\n'\n    '10 11 9 1 10') == '7077177177999999999999910'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n10 10 8 5 3\") == \"70\"\nassert solution(\"12 343 43 45 43 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\nassert solution(\"10 11 2 1 5\") == \"10\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\n\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '''\n1\n0\n2\n2\n1\n'''\nassert solution('''\n5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '''\n1\n0\n2\n2\n1\n'''\nassert solution('''\n5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '''\n1\n0\n2\n2\n1\n'''\n\n'''\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"9 3\\n10 10\") == \"2\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 1\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5, 2, 3) == 1\nassert solution(10, 10, 2, 4) == 0\nassert solution(2, 4, 7, 4) == 2\nassert solution(9, 3) == 2\nassert solution(9, 3, 9, 3) == 1\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\nassert solution(\"1 1\\n1 2\") == \"0\"\nassert solution(\"1 1\\n1 2\\n1 2\") == \"0\"\nassert solution(\"1 1\\n1 2\\n2 1\") == \"1\"\nassert solution(\"1 1\\n1 2\\n2 1\\n2 1\") == \"0\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('2 4') == '2'\nassert solution('7 4') == '2'\nassert solution('9 3') == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == '1\\n0\\n2\\n2\\n1'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2 3\\n') == '0'\nassert solution('10 10\\n') == '0'\nassert solution('2 4\\n') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('9 3\\n2 4') == '2'\n\n[+]Temporal marker           : Sun, 11:31 | Feb 17, 20\n[+]Temporal marker untethered: Sun, 11:31 | Feb 17, 20\n[+]Comments                  :\n[+]Space Complexity          : O(1)\n[+]Time Complexity           : O(T)\n[+]Level                     :\n[+]Tread Speed               :\n[+]LINK                      : https://www.interviewbit.com/problems/two-sum/\n[+] Supplement Sources       : N/A\n\n\"\"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"9 3\\n6 2\") == \"2\"\n\"\"\"\n\nt = int(stdin.readline())\n\nfor i in range(t):\n    a, b = map(int, stdin.readline().split())\n    x = a + 1\n    y = a - 1\n    if a < b:\n        y = a\n    else:\n        x = a\n    if y - x == b - a:\n        print(y - x)\n    else:\n        print(b - a)\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(\"Test pass.\")\n\n----"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint(solution(\"22\\n9999\\n1\\n777\"))\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint('Cool')\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\"))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('22\\n9999\\n1\\n777') == 13\nassert solution('22\\n9999\\n1\\n777') == 13\nassert solution('22\\n9999\\n1\\n777') == 13\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\n\n-----Test_set-----\n\ntest_set1 (the test set of the first task) contains 25 test cases:\n\n1. 22\n2. 999\n3. 1\n4. 777\n5. 1111\n6. 111\n7. 10\n8. 2\n9. 22\n10. 12\n11. 3\n12. 666\n13. 2345\n14. 23\n15. 1\n16. 1111\n17. 100\n18. 222\n19. 1010\n20. 101\n21. 22\n22. 1234\n23. 123\n24. 100\n25. 11\n\ntest_set2 (the test set of the second task) contains 20 test cases:\n\n1. 22\n2. 999\n3. 1\n4. 777\n5. 1111\n6. 111\n7. 10\n8. 2\n9. 22\n10. 12\n11. 3\n12. 666\n13. 2345\n14. 23\n15. 1\n16. 1111\n17. 100\n18. 222\n19. 1010\n20. 101\n\n\n-----Note-----\n\nThis is the first task on [this page](https://stepik.org/lesson/24462/step/13?auth=login&unit=6769).\n\nPlease, do not forget to check the **Resources** tab after finishing each task.\n\nThere is a *Back tracking* section in the **Resources** tab.\n\n'''\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nfrom sys import stdin\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    x = stdin.readline().strip()\n    ans = 0\n    for i in range(1, len(x)):\n        if int(x[i-1]) == int(x[i]):\n            ans += i\n    print(ans)\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777\\n') == '13\\n90\\n1\\n66\\n'\nprint('Hooray!')\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"22\") == 13\nassert solution(\"9999\") == 90\nassert solution(\"1\") == 1\nassert solution(\"777\") == 66\n\nprint(solution(\"22\"))\nprint(solution(\"9999\"))\nprint(solution(\"1\"))\nprint(solution(\"777\"))\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\")\nassert solution(\"5\\n2\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n1 2\\n4 1\")"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint('Test passed')"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('6\\n1 1 2 2 2 1\\n2\\n2 3') == 'NO'\n\nassert solution('5\\n4\\n2 3 1 3 2\\n5\\n2 3 1 3 2\\n4\\n2 2 2 2 2') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('4\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n\") == \"NO\"\nassert solution(\"5\\n3\\n2 1 2 1 2\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == \"YES\\n2 6\\n1 2\"\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"5\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"1\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n6\\n2 2 2 2 2\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\\n\"\n\nassert solution(\"\"\"\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == \"NO\\n\"\n\nassert solution(\"\"\"\n4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\n\"\"\"\n\nfrom sys import stdin\nfrom typing import Tuple, Dict\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[4,2,3], 1\") == 5\nassert solution(\"[3,-1,0,2], 3\") == 6\nassert solution(\"[2,-3,-1,5,-4], 2\") == 13\n\nprint('Success')\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A = [4,2,3], K = 1) == 5\nassert solution(A = [3,-1,0,2], K = 3) == 6\nassert solution(A = [2,-3,-1,5,-4], K = 2) == 13\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        for i in range(K):\n            if A[i] <= 0:\n                A[i] *= -1\n            else:\n                break\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A=[4,2,3], K=1) == 5\nassert solution(A=[3,-1,0,2], K=3) == 6\nassert solution(A=[2,-3,-1,5,-4], K=2) == 13\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n\n        for i in range(len(A)):\n            if K < 0:\n                break\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n            else:\n                break\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\") == 5\nassert solution(\"3 -1 0 2\") == 6\nassert solution(\"2 -3 -1 5 -4\") == 13\n\n\"\"\"\n\n\nimport heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        heapq.heapify(A)\n        for i in range(K):\n            heapq.heappush(A, -heapq.heappop(A))\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3\\n1\\n') == 5\nassert solution('3 -1 0 2\\n3\\n') == 6\nassert solution('2 -3 -1 5 -4\\n2\\n') == 13\n\n'''\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A = sorted(A)\n        if K % 2 == 0:\n            A = [-i for i in A]\n        else:\n            A[0] = -A[0]\n        \n        for i in range(K-1):\n            A[0] = -A[0]\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n\"\"\"\n\n\nfrom typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        for i in range(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n        return sum(A)"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"5\"\nassert solution(\"3 -1 0 2\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\") == \"13\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('[4,2,3] 1') == '5'\nassert solution('[3,-1,0,2] 3') == '6'\nassert solution('[2,-3,-1,5,-4] 2') == '13'\n\n\"\"\"\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        for i in range(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[4,2,3]\\n1\") == \"5\"\nassert solution(\"[3,-1,0,2]\\n3\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == \"13\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == expected\n\na = stdin.readlines()[0].split(' ')\na = list(map(lambda x: int(x), a))\na.sort()\nprint(a)\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"010203\") == True\nassert solution(\"12345\") == False\nassert solution(\"111111\") == True\nassert solution(\"890\") == True\nassert solution(\"-101010\") == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 5\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"9\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == False\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == \"true\"\nassert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == \"true\"\nassert solution(\"0,2,1,-6,6,7,9,-1,2,0,1\") == \"false\"\nassert solution(\"0,1,1,1,0\") == \"false\"\nassert solution(\"1,2,0,0,2,1,1\") == \"false\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"5 5 6 6 -5 5 5\") == True\nassert solution(\"0 0 0 0 0\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('1 2 -2 -1 0 1') == True\nassert solution('0 -1 2 3') == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 -7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3!= 0:\n            return False\n        s = total // 3\n        tmp = 0\n        i = 0\n        while i < len(A):\n            tmp += A[i]\n            if tmp == s:\n                break\n            i += 1\n        if tmp!= s:\n            return False\n        j = i\n        while j < len(A):\n            tmp += A[j]\n            if tmp == s:\n                break\n            j += 1\n        if tmp!= s:\n            return False\n        return True"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == True\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == False\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == True\n\n'''"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == 'beet'\nassert solution('3') == 'beet and vet'\nassert solution('5') == 'beet and vet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nab\\nbc\\ncd\") == \"ab\\nbc\\ncd\"\nassert solution(\"5\\nab\\nbc\\ncd\\nef\\ngh\") == \"ab\\nbc\\ncd\\nef\\ngh\"\nassert solution(\"7\\nab\\nbc\\ncd\\nef\\ngh\\nij\\n\") == \"ab\\nbc\\ncd\\nef\\ngh\\nij\\n\"\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('aab') == 'aa'\nassert solution('aaba') == 'aa'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet') == 'beet\\nvet'\nassert solution('2\\ncat\\ndog') == 'dog\\ncat'\n\"\"\"\n\n\"\"\"\nimport sys\nimport pprint\n\npp = pprint.PrettyPrinter()"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nbeat\\n: \\n\\nvet\\n: \\n\\nbeet\\n: \\n\\nbed\\n: \\n\\nvet\\n: \\n\\nbet\\n:\") == 'beet vet'\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == 'beet\\nvet'\nassert solution(\"1\\nbat\\n\") == 'bat'\nassert solution(\"2\\nba\\n\") == 'ba'\nassert solution(\"3\\nbra\\n\") == 'bra'\nassert solution(\"4\\nb\\n\") == 'b'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\nbeet\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet'\n\nassert solution('''7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet'\n\nassert solution('''8\nzombie\npenguin\nzombie\nzombie\nzombie\nzombie\nzombie''') == 'zombie\\npenguin\\nzombie'\n\nassert solution('''7\nzombie\npenguin\nzombie\nzombie\nzombie\nzombie''') == 'zombie\\npenguin\\nzombie'\n\nassert solution('''7\nzombie\nzombie\nzombie\nzombie\nzombie\nzombie''') == 'zombie\\nzombie\\nzombie'"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nbet\\nbet\\nbet\") == \"bet\"\nassert solution(\"2\\nbed\\nbed\\nbed\") == \"bed\"\nassert solution(\"1\\nbeat\\nbeat\\nbeat\") == \"beat\"\nassert solution(\"4\\nvet\\nvet\\nvet\\nvet\") == \"vet\"\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nabc\\ndef\\nghi\\n') == 'def'\nassert solution('5\\nabc\\ndef\\nghi\\njkl') == 'abcdefghijkl'\nassert solution('6\\nabc\\ndef\\nghi\\njkl\\nmno\\n') == 'abcdefghijklmnop'\nassert solution('8\\nabc\\ndef\\nghi\\njkl\\nmno\\npqr\\nsuv\\ntwx\\nyz\\n') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('10\\nabc\\ndef\\nghi\\njkl\\nmno\\npqr\\nsuv\\ntwx\\nyz\\nabc\\ndef\\nghi\\njkl\\nmno\\n') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\nprint(solution(\"2\\n4 8\"))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nnum = list(map(int, sys.stdin.readline().split()))\nresult = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        result += (num[i] - num[j]) ** 2\nprint(result)"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n4 8') == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n') == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4\\n7\\n10\\n12') == '30'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"5\"\nassert solution(\"4\\n2 3 4 5\") == \"6\"\nassert solution(\"3\\n10 20 30\") == \"6\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1\\n2\") == \"0\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n') == '8'\n\n-----"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2\n4 8\n\"\"\") == \"8\"\n\n---\n2\n\n4 8\n\n-----\n2\n\n4 8\n\n2\n\n8\n\n0\n\n3\n\n7\n\n10\n\n17\n\n9\n\n7\n\n24\n\n19\n\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3\n\n7\n\n10\n\n17\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n\n4 8\n\n\"\"\") == \"8\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nprint(\"Tests passed.\")\n\n-------------------------\n\"Dirty\" solution\n-------------------------"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n1') == '2'\nassert solution('3\\n7\\n1') == '-3'\nassert solution('14\\n6\\n9') == '6'\n\"\"\"\n\nfrom typing import Any\nimport sys\n\nX = int(sys.stdin.readline())\nA = int(sys.stdin.readline())\nB = int(sys.stdin.readline())\n\nprint(X - A - B)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n\nX = int(input())\nA = int(input())\nB = int(input())\n\nprint(X - A - B)"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n1\\n4') == '1\\n'\nassert solution('5\\n1\\n4\\n') == '4\\n'\nassert solution('5\\n2\\n3') == '0\\n'\nassert solution('1\\n1\\n1') == '0\\n'\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\nimport sys"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n2\\n') == '4\\n84'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '8'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == '8'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"2 1\") == \"2\"\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4''') == '8'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nfrom math import factorial as fac"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '8'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '8'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2''') == '8'\nassert solution('''2 2\n5 7''') == '8'\nassert solution('''2 2\n5 5''') == '1'\nassert solution('''1 1\n1 1''') == '1'\nassert solution('''4 4\n1 1\n2 2\n3 3\n4 4''') == '24'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == \"POSSIBLE\"\nassert solution('''3 2\n1 2\n3 2''') == \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == 'POSSIBLE'\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 2\\n2 2\") == \"IMPOSSIBLE\"\n\n\"\"\"\nimport sys\nimport numpy as np\nfrom itertools import permutations\nfrom typing import Dict, List, Tuple, Set, Optional, Union"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'Impossible'\nassert solution('a\\nb\\nc') == 'Impossible'\nassert solution('a\\n1\\nb\\n2\\n') == 'Possible'\nassert solution('a\\n1\\nb\\n2\\n\\nc\\n3\\n') == 'Possible'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2') == 'POSSIBLE'\nassert solution('2\\n1 3') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 3') == 'POSSIBLE'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3\\n2 4\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder\") == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder') == 'acdr'\nprint('PASSED')\nassert solution('aaa') == 'a'\nprint('PASSED')\nassert solution('aaaa') == 'aaaa'\nprint('PASSED')\nassert solution('aab') == 'ab'\nprint('PASSED')\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'bcdefghijklmnopqrstuvwxyzab'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n\ns = stdin.split(\"\\n\")[0]\n\nfor i in range(1, len(s) + 1, 2):\n    print(s[i-1], end=\"\")\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoder') == 'acdr'\nprint(solution('atcoder'))\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder') == 'acdr'\nprint('Test 1 passed: ', solution('atcoder') == 'acdr')"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\nimport re\n\nA, B, C = input().split()\n\nA_re = re.search(A[-1], B)\nB_re = re.search(B[0], C)\nC_re = re.search(C[0], A)"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('36 24') == 'GREATER'\nassert solution('10 10') == 'EQUAL'\nassert solution('10 40') == 'LESS'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('36 24') == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\na = int(input())\nb = int(input())\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"36\\n24\"\n) == \"GREATER\"\n\n-----Explanation-----\nSince 36>24, print GREATER.\n\"\"\"\n\nimport math\n\nA, B = input().split()"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\n-----\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '36\\n24'\n) == 'GREATER'\n\"\"\"\n\na, b = map(int, input().split())\nprint('GREATER' if a > b else 'LESS' if a < b else 'EQUAL')\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\nimport re\nfrom typing import List\n\nregex_pattern = r\"^(\\d+)(\\s*)(\\d+)(\\s*)(\\d+)\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape\\n') == '2'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\na\\nb\\nc\\n1\\ng\\n\") == \"2\"\n\nassert solution(\"3\\na\\nb\\nc\\n1\\ng\\n\") == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\napple\\norange\\napple\\n1\\ngrape\\n\"\n) == \"2\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\napple\norange\napple\n1\ngrape''') == '2'\n\n-----\n\nfrom collections import Counter"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\"\n\n\nfrom functools import reduce\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == 2\n\"\"\"\n\nN, *s, M, *t = [int(x) for x in stdin.split()]\ns = [x[:N] for x in s]\nt = [x[:M] for x in t]\n\nans = 0\nfor b in s:\n    for r in t:\n        if b == r:\n            ans += 1\nprint(ans)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\napple\norange\napple\n1\ngrape\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n1\napple\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n2\na\nb\na\n1\nb\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n4\na\nb\nc\nd\n1\na\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n1\na\n\"\"\"\n) == \"1\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A) == \"T\"\nassert solution(G) == \"C\"\nassert solution(C) == \"G\"\nassert solution(T) == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n\nimport sys\n\nb = sys.stdin.readline().rstrip()"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n\nA = \"A\"\nC = \"C\"\nG = \"G\"\nT = \"T\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n\nb = input()\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 2 2 4 1') == '14'\nassert solution('5\\n3 2 2 4 1') == '14'\nassert solution('7\\n1 1 1 1 1 1 1') == '56'\nassert solution('11\\n1 1 1 1 1 1 1 1 1') == '98'\nassert solution('15\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '114'\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 2 4 1\") == \"14\"\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n3 2 2 4 1\\n1 2 2 2 1\"\n) == '14'\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n\nfrom math import ceil\n\nn = int(input())\na = [list(map(int, input().split())) for _ in range(2)]\na.append(list(map(int, input().split())))"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1''') == '14'\n\n---\n'''\n    Time complexity: O(1)\n    Space complexity: O(1)\n'''\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 2 2 4 1') == 14\n\n\"\"\"\n\nclass Solution:\n    def solution(self, input_str):\n        input_lines = input_str.split('\\n')\n        n = int(input_lines[0])\n        a = [int(x) for x in input_lines[1].split(' ')]\n        a.append(0)\n        max_sum = 0\n        for i in range(n):\n            row_sums = [a[i] + a[i+1], a[i+1] + a[i+2], a[i] + a[i+2]]\n            max_sum = max(max_sum, max(row_sums))\n        return max_sum"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 1 1 1\\n1 1 1 1 1') == '15'\n\nassert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 2 4 1\\n1 2 2 2 1') == 14\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nc = [[0] * N for _ in range(2)]\ndp = [[0] * N for _ in range(2)]\ndp[0][0] = A[0]\ndp[1][0] = A[0]\nfor i in range(1, N):\n    dp[0][i] = dp[0][i - 1] + A[i]\n    dp[1][i] = dp[1][i - 1] + A[i]\nfor i in range(2):\n    for j in range(1, N):\n        dp[i][j] = max(dp[i][j - 1], dp[i ^ 1][j] + A[j])\nprint(dp[0][N - 1] + dp[1][N - 1])\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n0 1 3 5 7 9') == '4'\nassert solution('1 0\\n0') == '0'\nassert solution('1 1\\n0') == '0'\nassert solution('1 1\\n1') == '0'\nassert solution('1 2\\n1') == '0'\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2 2\") == '1'\nassert solution(\"4 4\\n2 2 2 3 3\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\\n\") == '1'\nassert solution(\"4 7 9\\n\") == '1'\nassert solution(\"1 1 1 1\\n\") == '0'\nassert solution(\"3 4 5\\n\") == '4'\n\n\"\"\"\nfrom typing import List\n\n\"\"\"\nInput\n2 2 2\nOutput\n1\nInput\n4 7 9\nOutput\n4\nInput\n1 1 1 1\nOutput\n0\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n2 2 2\\n') == '1'\n\"\"\"\n\n\"\"\"\n*Solution:\n\nThe problem is to minimize the number of operations in such a way that:\nany two neighboring boxes contain at most k candies in total.\nSo, we minimize the number of boxes k, while keeping the above requirement satisfied.\n\nGiven:\n - number of boxes, n\n - list of candies in each box\n\nTask:\n - find k\n - check if it is possible to achieve k\n - otherwise, raise an error\n - use binary search on the lower bound\n - if the solution is found, print the number of operations\n\nAt each step, we can keep the candidate solution, or discard it.\nAnd the number of operations depends on the largest possible value of k.\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys\n\nN, x = [int(i) for i in sys.stdin.readline().split()]\ncandies = [int(i) for i in sys.stdin.readline().split()]\n\ncandy_count = [0] * N\ncandy_count[0] = candies[0]\nfor i in range(1, N):\n    candy_count[i] = candy_count[i-1] + candies[i]\n\nresult = 0\nfor i in range(1, N-1):\n    if candy_count[i] < x:\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n2 2 2\\n') == 1\nassert solution('5 10\\n3 5 1 2 10 10\\n') == 8\nassert solution('1 5\\n1\\n') == 0\nassert solution('3 9\\n1 2 3\\n') == 4\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 1\") == \"3\"\nassert solution(\"3 2 1 1\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n\nn = int(stdin.readline())\nx = int(stdin.readline())\ns = Counter(list(map(int, stdin.readline().split())))\n\nprint(sum(s.values()) + max(s.values()))\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"1 0 1\"\n) == 'Yes'\nassert solution(\n\"2 1 2\"\n) == 'Yes'\nassert solution(\n\"1 0 1\"\n) == 'Yes'\n\"\"\"\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        Your runtime beats 77.3 % of python3 submissions.\n\n        AC in 1st try. \n        TLE in 2nd try. \n        TLE in 3rd try.\n        TLE in 4th try.\n\n        \"\"\"\n        nums = stdin.split()\n        d = defaultdict(list)\n        for i in range(len(nums)):\n            for j in range(len(nums[i])):\n                d[i].append(int(nums[i][j]))\n        for i in range(1,4):\n            for j in range(1,4):\n                if d[i][j]!= d[0][j] + d[i][0]:\n                    return 'No'\n        return 'Yes'"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\n-----How to run this code-----\n1. Open up a terminal/command prompt and cd to the folder where this problem is located.\n2. Run the following command:\npython3 problem1.py < input.txt > output.txt\n3. Copy the printed output in output.txt and submit it to codewars.\n'''"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\n\"\"\"\n\nimport numpy as np\n\nlines = stdin.split(\"\\n\")\nnums = np.array([[int(num) for num in line.split()] for line in lines])\n\nnum_rows = nums.shape[0]\nnum_cols = nums.shape[1]"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport itertools\nimport math\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 0 2\\n1 0 1') == 'No'\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"2 1 2\\n1 0 1\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n3 0 1\") == \"No\"\nassert solution(\"1 0 1\\n1 0 1\\n1 0 1\") == \"No\"\nassert solution(\"1 0 1\\n1 0 1\\n1 0 1\") == \"No\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\n\nassert solution('ARC') == 'ABC'\n\"\"\"\n\nimport sys\n\nassert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ARC\") == \"ABC\"\nassert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nprint(solution(\"4 8 2\"))"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n5\\n7\\n') == '2'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '5'\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 3\n\na, b, x = map(int, sys.argv[1:])\n\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(4, 8, 2) == 3\n\"\"\"\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 3, 2) == 1\nassert solution(1, 3, 2) == 2\n\"\"\"\n\n\"\"\"\nFirst, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each one as divisible or not divisible by x.\n\nFor each element, if it is divisible, increment the count by the number of elements to the right.\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\nprint(cnt)\n\n\"\"\"\nSecond, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each one as divisible or not divisible by x.\n\nFor each element, if it is divisible, set the element to divisible and all its elements to not divisible.\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\n        for j in range(a, b+1):\n            if j % x == 0:\n                continue\n            else:\n                break\nprint(cnt)\n\n\"\"\"\nThird, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each one as divisible or not divisible by x.\n\nFor each element, if it is divisible, increment the count by the number of elements to the right.\n\nIf the element is divisible by x, we set its count to the number of divisible elements to the right.\n\nIf the element is not divisible by x, set its count to zero.\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\n    else:\n        for j in range(a, b+1):\n            if j % x == 0:\n                cnt = cnt\n            else:\n                cnt = 0\nprint(cnt)\n\n\"\"\"\nFourth, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each one as divisible or not divisible by x.\n\nIf a number is divisible by x, we count it as divisible.\n\nIf a number is not divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to zero.\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\n    else:\n        for j in range(a, b+1):\n            if j % x == 0:\n                cnt = cnt\n            else:\n                cnt = 0\nprint(cnt)\n\n\"\"\"\nFifth, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each one as divisible or not divisible by x.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to zero.\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\n    else:\n        for j in range(a, b+1):\n            if j % x == 0:\n                cnt = cnt + 1\n            else:\n                cnt = cnt\nprint(cnt)\n\n\"\"\"\nSixth, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each one as divisible or not divisible by x.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to zero.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to zero.\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\n    else:\n        for j in range(a, b+1):\n            if j % x == 0:\n                cnt = cnt + 1\n            else:\n                cnt = cnt\nprint(cnt)\n\n\"\"\"\n7th, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each one as divisible or not divisible by x.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to zero.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to zero.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is divisible by x, we set its count to the number of divisible numbers to the right.\n\nIf a number is not divisible by x, we set its count to zero.\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\ncnt = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        cnt += 1\n    else:\n        for j in range(a, b+1):\n            if j % x == 0:\n                cnt = cnt + 1\n            else:\n                cnt = cnt\nprint(cnt)\n\n\"\"\"\n8th, we can think of ways of counting divisibility.\n\nWe can make a list of integers from a to b, and mark each"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\"\"\"\n2\n1 2 3 4 5 6 7 8 9\n7\n1 2 3 4 5 6 7\n\"\"\"\n\na, b, x = map(int, input().split())\n\ntotal = 0\n\nfor i in range(a, b+1):\n    if i % x == 0:\n        total += 1\n\nprint(total)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    2 10 20\n    '''\n) == '3'\nprint(solution(\n    '''\n    2 10 20\n    '''\n))\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n\nD = int(input())\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(25) == \"Christmas\"\nassert solution(24) == \"Christmas Eve\"\nassert solution(23) == \"Christmas Eve Eve\"\nassert solution(22) == \"Christmas Eve Eve Eve\"\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\nassert solution(\"24\") == \"Christmas Eve\"\n\nassert solution(\"23\") == \"Christmas Eve Eve\"\n\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\nassert solution(\"1\") == \"Bad input\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == \"Christmas\"\nassert solution('24') == \"Christmas Eve\"\nassert solution('23') == \"Christmas Eve Eve\"\nassert solution('22') == \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve Eve\"\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\nassert solution('23')!= 'Christmas Eve Eve Eve Eve'\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n7') == '4'\nassert solution('5\\n8') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == '4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '4'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '8'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '8'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '9'\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '4'\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n') == '4'\n\nprint(solution(stdin.read()))"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '4'\nassert solution('6') == '3'\nassert solution('4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4 can be divided by 2 twice\"\nassert solution(\"7\") == \"7 can be divided by 2 four times\"\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n5\\n8') == '4'\n\"\"\"\n\n\"\"\"\nl = [i for i in range(1, int(stdin) + 1) if i % 2 == 0]\nprint(max(l, key=lambda x: l.count(x)))\n\"\"\"\n\n\"\"\"\nfrom functools import reduce\n\nN = int(input())\n\nd = {}\nfor i in range(1, N + 1):\n    d[i] = sum(x for x in range(i, N + 1, i) if x in d)\n\nprint(reduce(lambda x, y: x if x > y else y, d.values()))\n\"\"\"\n\nn = int(input())\ns = 0\ni = 0\nwhile n > s + i:\n    i += 1\n    s += i\n\nprint(i)\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 7 9 3''') == 'Yes'\nassert solution('''4 7 9 5''') == 'No'\nassert solution('''4 7 9 10''') == 'No'\nassert solution('''4 5 7 9''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\"\n\na, b, c, d = map(int, stdin.split())\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\nThe solution is not efficient, but it does not matter in this situation.\n\"\"\"\nfrom typing import List\n\n\"\"\"\nUnderstand:\n\n1. A and B can directly communicate when the distance between them is at most d meters.\n2. A and C can indirectly communicate when A and B can directly communicate and also B and C can directly communicate.\n3. A and C can communicate if A and B can directly communicate and A and C can directly communicate.\n\nUnderstand:\n\n1. A and B can directly communicate when the distance between them is at most d meters.\n2. A and C can directly communicate when the distance between them is at most d meters.\n3. A and C can indirectly communicate when A and B can directly communicate and also B and C can directly communicate.\n\nPlan:\n1. create a dict of distances between A and B, and distances between B and C\n2. for every possible distance between A and C, check if the distance between A and B is at most that distance.\n\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n-----\nclass Solution:\n    def can_communicate(self, a, b, c, d):\n        if d - max(a,b,c) <= 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n\nassert Solution().can_communicate(4, 7, 9, 3) == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin, stdout\n\na, b, c, d = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\n'''\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"atcoder beginner contest\"\n) == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\nprint('test passed')\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\"\n\nwords = [x.strip() for x in stdin.split()]\nacronym = ''.join([x[0] for x in words])\nprint(acronym)\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\nassert solution('aTcOdeB bEnder cOnteSt') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\nprint('Test success')\n\n=======\nfrom string import ascii_uppercase\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"100 200 500\") == \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 100 50') == 'No'\nassert solution('50 100 100') == 'Yes'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"200 300 350\") == \"No\"\nassert solution(\"100 200 300\") == \"Yes\"\nassert solution(\"200 300 100\") == \"No\"\n\"\"\"\n\na, b, c = input().split()\na = int(a)\nb = int(b)\nc = int(c)"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50 100 120\") == 'Yes'\nassert solution(\"50 100 50\") == 'No'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 130\") == \"No\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"100 100 120\") == \"No\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 10 100\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nassert solution(\"8 10\\n10 10 10 10\") == \"1\"\nassert solution(\"8 20\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('test_00.txt').read()) == '3\\n'\nassert solution(open('test_01.txt').read()) == '7\\n'\nassert solution(open('test_02.txt').read()) == '1\\n'\n\nimport re"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nassert solution(\"4 8\\n1 1 1 1\") == \"0\"\nassert solution(\"4 8\\n5 4 3 2\") == \"0\"\nassert solution(\"4 8\\n8 8 8 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 8\n7 9 8 9''') == '5'\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == solution(test_input_2) == solution(test_input_3) == expected_output_1\n\n-----\n'''\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 9 8 9\\n\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == '5'\n\"\"\"\n\nn, a = map(int, input().split(' '))\ncards = list(map(int, input().split(' ')))\nsorted_cards = sorted(cards)\n\ntotal = 0\ncount = 0\ni = 0\nwhile i < n:\n    total += sorted_cards[i]\n    i += 1\n    if total / i >= a:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"2\\n1 2\") == \"1 2\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n2\") == \"2 1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5 4 3 2 1\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n\n\"\"\"\nIn order to check the correctness of the solution, we can determine that the sequence obtained at the end of each step is what we expect.\nStep 1: b = [1], b_1 = 1.\nStep 2: b = [1, 2], b_1 = 1, b_2 = 2.\nStep 3: b = [2, 1], b_1 = 2, b_2 = 1, b_3 = 3.\nStep 4: b = [3, 1, 2], b_1 = 3, b_2 = 1, b_3 = 2, b_4 = 4.\n\nAs we can see, the solution is the reversed sequence from Step 4.\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 3\") == \"4 2 1 3\"\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"3\\n1 2 3\") == \"1 2 3\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n1 1\") == \"1\"\nassert solution(\"1\\n1 1 1\") == \"1\"\n\n\"\"\"\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n\n\"\"\"\nAUTHOR: EPI: Immanuel, Gilmer\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"2\\n1 2\") == \"2 1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1 1\") == \"1 1\"\nassert solution(\"2\\n1 2\\n1 3\") == \"2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('3\\n1 2 3') == '3 2 1'\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '4 2 1 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n4 5 6\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 3\\n4 5 6\\n') == 'Yes'\nassert solution('10 3\\n3 4 6\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10''') == 'No'\n\n'''\nFirst we need to know if the Raccoon can win or not.\nAfter, we need to find a way to win:\n1) start from the first line and try to create the largest sequence of 3 moves\n   such that the monster's health becomes 0 or below\n2) if that's not possible, try to create the largest sequence of 3 moves\n   such that the monster's health becomes less than 0\n   \n'''\n\n'''\ndp[i][j] = True iff i^th move can make Raccoon win from j^th move\n\nWe use two variables:\nmaxm = maximum health of the monster with one move\nmaxm_idx = maximum health of the monster with one move and this move\n\nWe check if Raccoon can win from the i^th move with one move and one move,\nor with two moves, and we make dp[i][j] = maxm_idx - i + 1\n'''\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\nassert solution(\"1 5\\n5 2\") == \"No\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nH, N = map(int, input().split())\nlst = list(map(int, input().split()))\n\nlst.sort()\n\ncount = 0\nfor i in range(len(lst)):\n    if i % 2 == 0:\n        count += lst[i]\n        if count > H:\n            break\n    else:\n        H -= lst[i]\n        count += lst[i]\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n\nH, N = [int(n) for n in input().split(' ')]\nA = [int(a) for a in input().split(' ')]\n\ntemp = H\nwhile temp > 0 and N > 1:\n    for i in range(N):\n        temp -= A[i]\n    N -= 1\n    if temp <= 0:\n        break\nprint('Yes' if temp <= 0 else 'No')"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 6\") == \"Yes\"\nassert solution(\"10 3\\n4 5 6\") == \"Yes\"\nassert solution(\"10 5\\n4 5 6\") == \"No\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 3\\n4 5 6\\n') == 'Yes'\n\"\"\"\n\nH, N = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\nm = min(A)\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaa') == 1\nassert solution('ababa') == 2\nassert solution('ababab') == 2\nassert solution('abab') == 1\nassert solution('xyzxyz') == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abaababaa') == 6\nassert solution('abaababa') == 4\nassert solution('abaabab') == 2\nassert solution('aaaaaa') == 8\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abaababaab\") == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n\nimport re"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"xabab\") == 4\nassert solution(\"aba\") == 2\n\n----"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaababaab') == 6\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\n\"\"\"\n\n\"\"\"\nGiven a string, find its first non-repeating character in O(n) time. \nIf it doesn't exist, return '_'.\n\"\"\"\n\nfrom typing import List\n\nimport unittest\nimport itertools\n\n\nclass Solution:\n    def solution(self, string: str) -> str:\n        return next(char for char, count in itertools.Counter(string).items() if count == 1) or '_'\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_first_non_repeating_character(self):\n        assert Solution().solution('bac') == 'c'\n        assert Solution().solution('bca') == '_'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'Yes'\nassert solution('abcde') == 'No'\nassert solution('abcdea') == 'Yes'"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('acb') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint('Hooray!')\n\n-------------Solution------------\n\nimport itertools"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"abd\") == \"No\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"baa\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\"\n\ns = input().strip()\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\nassert solution(\"abca\") == \"No\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n\") == \"1\\n2\\n\"\nassert solution(\"4\\n5\\n\") == \"4\\n5\\n\"\nassert solution(\"3\\n1\\n\") == \"3\\n1\\n\"\nassert solution(\"5\\n2 1 6 5\\n1 1 2 2 5\\n\") == \"92\\n2\\n\"\nassert solution(\"6\\n1 1 2 2 5 3\\n1 1 2 2 5 3\\n\") == \"3\\n1\\n\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3 4 1 2\") == 6\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3\\n') == '646'\nassert solution('1\\n1000000\\n1000000\\n') == '757402647'\nassert solution('2\\n1 3\\n4 2\\n') == '20'\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\nassert solution(\"2\\n1 3\\n4 2\") == \"20\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\n\n---\n2. Check the input arguments\n\nThe function accepts an arbitrary number of arguments.\n\nFor example, given two arrays $a$ and $b$, you need to test the function call\n\nsolution(a, b, 10, 20)\n\nthat means that the function will be called with the following arguments:\n\nsolution(a, b, 10)\nsolution(a, b, 20)\n\n---\n3. Assign default values to parameters\n\nThe number of elements in $a$ and $b$ is given in the first line of the input.\nYou need to set default values for other arguments in the function.\n\nFor example, we need to set default value for the third argument,\n\nsolution(a, b, 10)\n\nbecause we don\u2019t know what value of the third argument will be passed to the function.\n\nYou can set it to any default value that makes sense. For example,\n\nsolution(a, b, 10)\n\nThe function will be called with the following arguments:\n\nsolution(a, b, 10)\nsolution(a, b, 10)\n\nsolution(a, b, 10, 20)\nsolution(a, b, 10, 20)\n\nsolution(a, b, 10, 20)\nsolution(a, b, 10, 20)\n\n---\n4. Calculate the answer\n\nYour function must calculate the minimum possible value of the sum of\n$f(l, r)$ with $l = 0$, $r = n$.\n\nYou have to find the values of $l$ and $r$ and print them in the second line of the output.\n\n---\n5. Print the answer\n\nPrint the minimum possible value of the sum of $f(l, r)$ with $l = 0$, $r = n$.\n\nYou have to print the answer modulo $998244353$.\n\n-----\n6. Test your solution locally\n\nWrite a test function and run it locally to check the correctness of your solution.\n\nYou can write code that executes a test function, checks its output and prints it to the terminal.\n\nYou can call this function with the command\n\npython3 test.py\n\n-----\n7. Provide the answer\n\nYou can also provide the answer for the challenge.\n\nPlease, clean your code for formatting, typos, unnecessary variables, unreachable code, etc.\n\nYou can try to format the output the way it is shown in the examples.\n\nBut if your solution is not correct, do not hesitate to try to get help by searching on Google.\n\n-----\n8. Share the solution on GitHub\n\nYou can share your solution on GitHub.\n\nTo share the solution, you can either:\n\n    Push a new file to your GitHub account\n    or\n    Edit an existing file in your GitHub account\n\nOnce you push a new file or edit an existing file, the original file will be automatically deleted.\n\n-----\n9. Suggest improvements\n\nI would like to add the following features to the challenge:\n\n* Try to use a generator for generating permutations and combinations of input arguments\n* Instead of modulo $10^9 + 7$, use modulo $10^6 + 1$\n* Try to solve the problem in a single loop (in C or C++), not in two or more loops\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\nassert solution(\"2\\n1 3\\n4 2\") == \"20\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\na.sort()\nb.sort()\n\nsum = 0\ni = 0\nj = 0\nwhile i < n and j < n:\n    sum += a[i] * b[j]\n    i += 1\n    j += 1\n\nprint(sum % 1000000007)\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"5\\n1 8 7 2 4\\n9 7 2 9 3\"\n) == \"646\"\nassert solution(\n\"1\\n1000000\\n1000000\"\n) == \"757402647\"\nassert solution(\n\"2\\n1 3\\n4 2\"\n) == \"20\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = [int(x) for x in sys.stdin.readline().split()]\nb = [int(x) for x in sys.stdin.readline().split()]\n\nmin_sum = sum(x * y for x, y in zip(a, b)) % 998244353\n\nprint(min_sum)\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n\") == '5'\nassert solution(\"1\\n1\\n\") == '5'\nassert solution(\"1\\n1\\n\") == '5'\nassert solution(\"1\\n1\\n\") == '5'\nassert solution(\"1\\n1\\n\") == '5'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n8\\n7\\n2\\n4\\n') == '646'\nassert solution('1\\n7\\n5\\n3\\n9\\n') == '20'\nassert solution('1\\n8\\n7\\n2\\n4\\n') == '646'\n\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 4\\n2 5 7 4 6\\n5 4\\n2 1\\n3 1') == '17'\nassert solution('7 2 3\\n2 5 4 2 6 3 1\\n5 4\\n2 1\\n3 1') == '7'\nassert solution('9 7 3\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n'''\n) == '7'\n\nassert solution(\n'''9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n'''\n) == '17'\n\nassert solution(\n'''5 1 4\n2 5 7 4 6\n5 4\n'''\n) == '17'\n\nassert solution(\n'''9 3 3\n2 5 7 4 6\n5 4\n'''\n) == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4\\n2 5 7 4 6\\n5 4\\n2 1\\n3 1\") == '17'\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n2 5\\n3 6\\n1 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '1'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7') == '2'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n1 7') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n1 7') == '1'"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n\n\n\n-----\n\n1.\n2.\n3.\n\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2'\nassert solution('1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n') == '0'\nassert solution('1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '1'\n\"\"\"\nfrom sys import stdin\n\nn = int(stdin.readline())\nm = int(stdin.readline())\nadj = {i: [] for i in range(n)}\nfor _ in range(m):\n    x, y = map(int, stdin.readline().strip().split())\n    adj[x].append(y)\n    adj[y].append(x)\n\nvisited = {i: False for i in range(n)}\ns = [1]\nans = 0\n\nwhile s:\n    curr = s.pop()\n    visited[curr] = True\n    for nei in adj[curr]:\n        if not visited[nei]:\n            ans += 1\n            s.append(nei)\n\nprint(ans - 1 if ans > 1 else 0)\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == '1'\n\n\"\"\"\n\nfrom queue import Queue\nfrom collections import defaultdict\n\n\nclass UnionFind:\n    def __init__(self, n: int):\n        self.roots = [i for i in range(n + 1)]\n\n    def find(self, p: int) -> int:\n        if p == self.roots[p]:\n            return p\n        self.roots[p] = self.find(self.roots[p])\n        return self.roots[p]\n\n    def union(self, p: int, q: int):\n        root_p = self.find(p)\n        root_q = self.find(q)\n\n        if root_p!= root_q:\n            self.roots[root_p] = root_q\n\n    def connected(self, p: int, q: int) -> bool:\n        return self.find(p) == self.find(q)\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\\\n1 2\\\\n2 3\\\\n2 4\\\\n4 5\\\\n4 6\\\\n5 7\") == '2'\nassert solution(\"7\\\\n1 2\\\\n2 3\\\\n3 4\\\\n3 5\\\\n3 6\\\\n3 7\") == '0'\nassert solution(\"7\\\\n1 2\\\\n2 3\\\\n3 4\\\\n3 5\\\\n3 6\\\\n3 7\") == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\n\"\"\"\n\"\"\"\n\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n'''), '10\\n15\\n1999999999\\n113\\n1000000001\\n1')\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n2 1000000000\") == \"1999999999\"\nassert solution(\"3 7\\n4 12\\n2 1000000000\") == \"113\"\nassert solution(\"1000000000 1000000000\\n2 1\\n\") == \"1000000001\"\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n\nfrom math import gcd\nfrom typing import Tuple\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1') == '3'\nassert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"10 3\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"10 3\\n3 3 1 1 2 1 2 3 3\\n\") == \"1\\n3 2\"\nassert solution(\"10 3\\n3 3 2 1 2 2 3 3\\n\") == \"3\\n1 2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == '2\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '1 3 2'\n'''"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == '2\\n2 1'\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == '3\\n1 3 2'\nassert solution(\"6 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n\") == '3\\n3 1 2'\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n\") == '1\\n3 2'\nassert solution(\"10 10\\n2 3 9 7 9 9 9 9 9 9\\n\") == '9\\n9 9 9 9 9 9 9 9 9 9 9'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\\n2 1'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\\n1 3 2'\n\n\"\"\"\n\nn, k = [int(c) for c in input().split(' ')]\n\nfriends_ids = [int(c) for c in input().split(' ')]\n\nassert n >= 0 and k >= 0\nassert 1 <= n <= 10 ** 9\nassert 1 <= k <= 2 * 10 ** 5\n\ncurrent_ids = [0 for _ in range(k)]\ntop_ids = []\n\nfor i in range(n):\n    friend_id = friends_ids[i]\n    current_ids[friend_id - 1] += 1\n\n    if current_ids[friend_id - 1] == 1:\n        top_ids.append(friend_id)\n        if len(top_ids) > k:\n            top_ids.pop(0)\n\n    current_ids = [0 if c == 1 else c for c in current_ids]\n\nprint(len(top_ids))\nprint(' '.join([str(id) for id in top_ids]))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().strip().split()]\n\nconv = []\nfor i in range(n):\n    conv.append(int(stdin.readline().strip()))\n\nlast_convs = []\n\nfor i in range(k):\n    if len(conv) < k:\n        break\n    conv.sort()\n    last_convs.append(conv.pop())\n\nlast_convs.sort()\n\nfor i in last_convs:\n    print(i)"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1\\n'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2\\n'\nassert solution('1 1\\n1\\n') == '0\\n'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2\\n'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n7 2\n1 2 3 2 1 3 2\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n10 4\n2 3 3 1 1 2 1 2 3 3\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n7 3\n1 2 3 2 1 3 2\n\"\"\"\n) == \"1 3 2\"\nassert solution(\n\"\"\"\n1 1\n1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n4 0\n1 1 1 1\n\"\"\"\n) == \"1 1 1 1\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2 3 1 1 2 1 2 3 3') == '3'\nassert solution('7 2 1 2 3 2 1 3 2') == '2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2\\n2 1'\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == '3\\n1 3 2'\nassert solution(\"100 10\\n3 3 5 7 1 1 5 2 2 7 5 3\") == '3\\n1 3 2'\nassert solution(\"100 10\\n3 3 5 7 1 1 5 2 2 7 5 3\") == '3\\n1 3 2'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n''') == '263'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n\"\"\") == \"263\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('1 1') == '0'\nassert solution('1 1 1 2 2') == '8'\nassert solution('1 2 1 3') == '10'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\") == \"263\"\nassert solution(\"1\\n1 100\") == \"100\"\nassert solution(\"4\\n1 1\\n2 2\\n3 3\") == \"1\"\nassert solution(\"1\\n1 10\") == \"10\"\nassert solution(\"2\\n1 10\\n1 10\") == \"20\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'\nprint('OK')\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\\n1 2\\n1 1\\n2\\n1 3\\n1 3\\n1 1\\n1 3\\n1 1\\n2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 3\\n2\\n1 2\\n1 1\\n1 1\\n1 3\\n2\\n1 3\\n1 3\\n1 2\\n2\\n1 1\\n1 2\\n1 3\\n2\\n1 2\\n1 3\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 1\\n1 3\\n2\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 3\\n1 1\\n1 1\\n2\\n2\\n1 1\\n1 2\\n1 1\\n1 2\\n2\\n1 3\\n1 3\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 2\\n1 3\\n2\\n2\\n2\\n1 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 3\\n1 3\\n1 1\\n1 1\\n1 3\\n1 2\\n1 1\\n1 1\\n1 1\\n1 3\\n2\\n1 1\\n1 2\\n1 1\\n1 3\\n2\\n2\\n1 3\\n1 2\\n1 2\\n1 3\\n1 2\\n1 3\\n2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 3\\n2\\n1 3\\n1 2\\n1 3\\n1 2\\n1 2\\n1 2\\n1 2\\n1 1\\n1 2\\n1 1\\n1 1\\n1 3\\n2\\n1 1\\n1 1\\n1 1\\n1 3\\n2\\n1 1\\n1 3\\n1 1\\n1 1\\n1 3\\n2\\n1 2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 3\\n2\\n1 2\\n1 1\\n1 1\\n1 3\\n1 3\\n2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n1 3\\n1 1\\n1 3\\n1 3\\n1 1\\n1 3\\n2\\n1 2\\n1 1\\n1 3\\n1 1\\n1 1\\n1 1\\n1 3\\n1 1\\n1 1\\n1 3\\n1 1\\n1 1\\n1 3\\n1 3\\n2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n1 3\\n1 3\\n1 3\\n1 3\\n1 3\\n1 1\\n1 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 2\\n1 2\\n1 3\\n2\\n1 2\\n1 3\\n1 3\\n2\\n1 1\\n1 3\\n1 1\\n1 1\\n1 1\\n1 2\\n1 3\\n2\\n1 1\\n1 1\\n1 3\\n1 1\\n1 3\\n1 3\\n1 2\\n1 3\\n1 1\\n1 3\\n1 3\\n1 3\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 3\\n1 1\\n1 3\\n1 1\\n1 3\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n1 2\\n1 1\\n1 3\\n1 2\\n1 1\\n1 3\\n1 1\\n1 2\\n1 2\\n1 1\\n1 3\\n2\\n1 2\\n1 3\\n1 1\\n1 1\\n1 3\\n1 1\\n1 2\\n1 3\\n1 3\\n1 1\\n1 2\\n1 3\\n1 1\\n1 1\\n1 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 3\\n1 1\\n1 3\\n1 1\\n1 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 3\\n1 1\\n1 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 3\\n1 3\\n1 1\\n1 2\\n1 3\\n1 3\\n1 2\\n1 1\\n1 3\\n1 1\\n1 3\\n1 3\\n1 2\\n1 3\\n1 2\\n1 2\\n1 1\\n1 1\\n1 3\\n1 3\\n1 3\\n1 1\\n1 3\\n1 1\\n1 3\\n1 3\\n1 1\\n1 1\\n1 2\\n1 2\\n1 2\\n1 3\\n1 3\\n1 1\\"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\nassert solution(\"leetcode\") == \"2\"\n\"\"\"\n\n\"\"\"\n[Program Description]\n\n[Detailed explanation]\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nassert solution(\"codeforces\") == \"1\"\nassert solution(\"gfdsfcbbcfeeedbaea\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"cde\"\nassert solution(\"codeforces\") == \"cde\"\nassert solution(\"codeforces\") == \"cde\"\nassert solution(\"codeforces\") == \"cde\"\nassert solution(\"codeforces\") == \"cde\"\n\n\"\"\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacaba') == '3'\nassert solution('codeforces') == '5'\nassert solution('cccbba') == '5'\nassert solution('d') == '1'\n\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"code\"\nassert solution(\"codeforces\", 5) == \"code\"\nassert solution(\"codeforces\", 5) == \"code\"\nassert solution(\"codeforces\", 1) == \"c\"\nassert solution(\"codeforces\", 1) == \"c\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == \"acbcb\"\n\n\"\"\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == 'code'\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"coder\"\nassert solution(\"abacaba\") == \"abc\"\nassert solution(\"dfcbbcfeeedbaea\") == \"d\"\nassert solution(\"eababacb\") == \"b\"\nassert solution(\"abcdedbeef\") == \"a\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\nassert solution(\"abc\") == \"3\"\n\n-----\n3\n4\n1 3 2\n1 1 4\n2 2 2\n1 1 4\n1 2 5\n1 1 5\n2 2 3\n\n-----\n\n---\n\n6\n5\n1 3 2\n1 3 3\n1 1 3\n2 2 2\n1 1 3\n2 1 3\n\n3\n1 1 5\n1 2 3\n2 1 4\n\n5\n2 1 4\n1 2 3\n2 1 5\n1 1 6\n\n2\n1 4 b\n1 4 c\n\n1\n4 b\n1 1 d\n1 1 3\n1 1 6\n\n4\n1 4 d\n1 1 4\n2 2 3\n1 1 5\n\n2\n1 7 b\n1 7 c\n\n1\n5 b\n\n1\n4 b\n1 1 5\n1 1 c\n\n1\n4 b\n\n1\n4 c\n1 1 5\n\n1\n2 f\n1 1 5\n\n1\n2 f\n1 1 4\n\n1\n2 f\n1 1 4\n\n1\n1 f\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n\n1\n1 d\n1 1 6\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '6'\nassert solution('codeforces') == '6'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\nassert solution('''856381549\n    423651489\n  012345678\n  876192736\n 491567889\n  123654789\n 685143968\n  387251354\n  476195617''') == '''856381549\n 423651489\n  012345678\n  876192736\n 491567889\n  123654789\n 685143968\n  387251354\n  476195617'''\n\nassert solution('''2218382639\n    859061923\n  329856289\n  4325131737\n  279864669\n  413636363\n 904691676\n  718445874\n  334616076\n  371428289''') == '''2218382639\n 859061923\n  329856289\n  4325131737\n  279864669\n  413636363\n 904691676\n  718445874\n  334616076\n  371428289'''\n\nassert solution('''975873146\n    125719529\n   494926592\n  692718368\n   182213430\n   639256786\n  149772726\n  473084203\n   229989653\n   541348203''') == '''975873146\n 125719529\n  494926592\n 692718368\n 182213430\n 639256786\n  149772726\n 473084203\n  229989653\n   541348203'''\n\nassert solution('''2087190769\n     754156896\n   334678575\n  859194417\n  112147955\n  338863255\n 695106397\n  241559003\n   97166869\n  416111394''') == '''2087190769\n 754156896\n  334678575\n 859194417\n 112147955\n  338863255\n 695106397\n  241559003\n   97166869\n  416111394'''"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('154873296') == '154873396'\nassert solution('386592714') == '336592714'\nassert solution('729641835') == '729645835'\nassert solution('863725149') == '863725145'\nassert solution('975314628') == '979314628'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n-----Test 4-----\nInput\n2\n1165632372\n5234515678\n7261549452\n9790918347\n53173491407\n\nOutput\n1165632373\n5235156789\n72615494520\n97909183470\n531734914079\n\n-----Test 5-----\nInput\n1\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n\nOutput\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n\n-----Test 6-----\nInput\n1\n1145147591\n545141559\n777142559\n456142559\n314152559\n37142559\n511452559\n\nOutput\n1145147591\n545141559\n777142559\n456142559\n314152559\n37142559\n511452559\n\n-----Test 7-----\nInput\n1\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n\nOutput\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n99999999\n\n-----Test 8-----\nInput\n1\n11111111\n22222222\n33333333\n44444444\n55555555\n66666666\n77777777\n88888888\n99999999\n\nOutput\n11111111\n22222222\n33333333\n44444444\n55555555\n66666666\n77777777\n88888888\n99999999\n\n-----Test 9-----\nInput\n1\n
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n'\nprint(solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n'))\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_0) == \"154873396\"\nassert solution(test_1) == \"336592714\"\nassert solution(test_2) == \"729645835\"\nassert solution(test_3) == \"863725145\"\nassert solution(test_4) == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('386592714') == '154873396'\nassert solution('729641835') == '336592714'\nassert solution('863725149') == '729645835'\nassert solution('975314628') == '863725145'\nassert solution('412968357') == '979314628'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"154873296\\n\"\n    \"386592714\\n\"\n    \"729641835\\n\"\n    \"863725149\\n\"\n    \"975314628\\n\"\n    \"412968357\\n\"\n    \"631457982\\n\"\n    \"598236471\\n\"\n    \"247189563\") == (\"154873296\\n\"\n    \"386592714\\n\"\n    \"729641835\\n\"\n    \"863725145\\n\"\n    \"975314628\\n\"\n    \"412958357\\n\"\n    \"631457992\\n\"\n    \"998236471\\n\"\n    \"247189563\")\n\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\nassert solution('''929390412\n67092387\n183631707\n393485506\n138503419\n168626243\n983736344\n635196342\n745138098\n117936139''') == '''929390412\n67092387\n183631707\n393485506\n138503419\n168626243\n983736344\n635196342\n745138098\n117936139'''\n\nassert solution('''412768357\n268745825\n949381376\n736415296\n715322686\n835287369\n883504897\n309618628\n624172668\n681314110''') == '''412768357\n268745825\n949381376\n736415296\n715322686\n835287369\n883504897\n309618628\n624172668\n681314110'''\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n3 4\\n5 5') == '4\\n-1\\n5'\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n3 4\\n5 5') == '5\\n-1\\n5'\nassert solution('10 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n3 4\\n5 5\\n2 4\\n5 1\\n7 4\\n8 7\\n1 9\\n9 5\\n6 8\\n8 1\\n2 2\\n5 5\\n4 8\\n9 1\\n6 5\\n5 1\\n3 1\\n4 3\\n5 6\\n5 7\\n6 1\\n6 8\\n7 2\\n3 1\\n5 3\\n9 1\\n6 1\\n5 1\\n4 3\\n3 1\\n5 2\\n9 1\\n2 3\\n3 2\\n7 8\\n2 7\\n6 9\\n6 7\\n3 8\\n6 8\\n8 3\\n6 5\\n7 6\\n1 7\\n6 6\\n2 6\\n6 7\\n4 6\\n7 2\\n4 7\\n7 4\\n7 3\\n3 1\\n3 2\\n4 5\\n3 3\\n1 2\\n4 4\\n3 4\\n4 6\\n1 2\\n1 3\\n1 5\\n2 2\\n3 1\\n2 4\\n3 1\\n2 6\\n2 5\\n3 4\\n2 6\\n1 2\\n2 3\\n3 3\\n3 4\\n2 6\\n1 2\\n2 5\\n1 5\\n5 5\\n5 3\\n2 3\\n5 4\\n3 3\\n3 3\\n1 5\\n5 5\\n3 4\\n3 5\\n5 4\\n5 1\\n4 5\\n5 6\\n5 2\\n5 4\\n4 5\\n2 1\\n5 4\\n3 6\\n2 4\\n2 5\\n2 3\\n5 2\\n5 1\\n3 6\\n5 4\\n4 2\\n5 3\\n2 6\\n2 4\\n5 2\\n5 6\\n6 1\\n3 5\\n4 1\\n1 5\\n3 2\\n2 4\\n2 5\\n1 6\\n1 4\\n2 3\\n4 6\\n5 5\\n4 6\\n6 6\\n1 2\\n1 4\\n1 6\\n3 6\\n2 4\\n3 6\\n5 1\\n2 2\\n2 4\\n2 5\\n2 3\\n1 4\\n2 6\\n2 5\\n1 4\\n3 2\\n2 3\\n1 4\\n5 6\\n3 2\\n1 4\\n3 5\\n5 4\\n5 5\\n5 2\\n4 6\\n1 2\\n2 4\\n3 2\\n3 5\\n2 5\\n5 2\\n4 4\\n5 4\\n4 4\\n2 4\\n2 6\\n3 2\\n2 4\\n5 2\\n3 2\\n4 2\\n2 2\\n5 4\\n2 3\\n4 6\\n2 5\\n1 2\\n5 2\\n3 5\\n1 4\\n3 5\\n2 2\\n3 5\\n1 4\\n5 6\\n3 5\\n5 3\\n5 2\\n1 3"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n1 3\") == \"2\"\nassert solution(\"4 3\\n2 3\\n1 3\\n2 4\") == \"2\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"1\"\nassert solution(\"4 3\\n2 3\\n3 4\\n2 4\") == \"1\"\nassert solution(\"5 4\\n2 4\\n3 5\\n2 5\\n4 5\\n1 3\\n4 3\") == \"2\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == '3\\n6\\n8\\n-1\\n9\\n4'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7\\n1 2\\n3 4\\n5 6\\n3 6\\n7 8\\n3 8\\n9 10\\n1 10\\n3 9\\n') == '3\\n5\\n6\\n-1\\n9\\n4'\nassert solution('3 4\\n1 2\\n3 4\\n5 6\\n3 6\\n7 8\\n3 8\\n9 10\\n1 10\\n3 9\\n') == '3\\n5\\n6\\n-1\\n9\\n4'\nassert solution('4 7\\n1 2\\n3 4\\n5 6\\n3 6\\n7 8\\n3 8\\n9 10\\n1 10\\n3 9\\n') == '3\\n5\\n6\\n-1\\n9\\n4'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2 6\") == \"3 4 5 6\"\nassert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"3 3 1 1\") == \"3\"\nassert solution(\"3 2 1 1\") == \"3\"\nassert solution(\"7 2 1 1\") == \"7\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n5 6\\n3 2\\n4 2\\n5 1\") == \"2\\n2\\n4\\n-1\"\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 6\\\\n1 1 1 3 5 3 5 7\\\\n3 1\\\\n1 5\\\\n3 4\\\\n7 3\\\\n1 8\\\\n1 9\\\\n\") == \"3\\\\n6\\\\n8\\\\n-1\\\\n9\\\\n4\\\\n\"\n\"\"\""
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import defaultdict\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26\\n25 27\\n26 28\\n27 29\\n28 30\\n29 31\\n30 32\\n31 33\\n32 34\\n33 35\\n34 36\\n35 37\\n36 38\\n37 39\\n38 40\\n39 41\\n40 42\\n41 43\\n42 44\\n43 45\\n44 46\\n45 47\\n46 48\\n47 49\\n48 50\\n49 51\\n50 52\\n51 53\\n52 54\\n53 55\\n54 56\\n55 57\\n56 58\\n57 59\\n58 60\\n59 61\\n60 62\\n61 63\\n62 64\\n63 65\\n64 66\\n65 67\\n66 68\\n67 69\\n68 70\\n69 71\\n70 72\\n71 73\\n72 74\\n73 75\\n74 76\\n75 77\\n76 78\\n77 79\\n78 80\\n79 81\\n80 82\\n81 83\\n82 84\\n83 85\\n84 86\\n85 87\\n86 88\\n87 89\\n88 90\\n89 91\\n90 92\\n91 93\\n92 94\\n93 95\\n94 96\\n95 97\\n96 98\\n97 99\\n98 100\\n99 101\\n100 102\\n101 103\\n102 104\\n103 105\\n104 106\\n105 107\\n106 108\\n107 109\\n108 110\\n109 111\\n110 112\\n111 113\\n112 114\\n113 115\\n114 116\\n115 117\\n116 118\\n117 119\\n118 120\\n119 121\\n120 122\\n121 123\\n122 124\\n123 125\\n124 126\\n125 127\\n126 128\\n127 129\\n128 130\\n129 131\\n130 132\\n131 133\\n132 134\\n133 135\\n134 136\\n135 137\\n136 138\\n137 139\\n138 140\\n139 141\\n138 142\\n139 143\\n139 144\\n139 145\\n139 146\\n139 147\\n139 148\\n139 149\\n139 150\\n139 151\\n139 152\\n139 153\\n139 154\\n139 155\\n139 156\\n139 157\\n139 158\\n139 159\\n139 160\\n139 161\\n139 162\\n139 163\\n139 164\\n139 165\\n139 166\\n139 167\\n139 168\\n139 169\\n139 170\\n139 171\\n139 172\\n139 173\\n139 174\\n139 175\\n139 176\\n139 177\\n139 178\\n139 179\\n139 180\\n139 181\\n139 182\\n139 183\\n139 184\\n139 185\\n139 186\\n139 187\\n139 188\\n139 189\\n139 190\\n139 191\\n139 192\\n139 193\\n139 194\\n139 195\\n139 196\\n139 197\\n139 198\\n139 199\\n139 200\\n139 201\\n139 202\\n139 203\\n139 204\\n139 205\\n139 206\\n139 207\\n139 208\\n139 209\\n139 210\\n139 211\\n139 212\\n139 213\\n139 214\\n139 215\\n139 216"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 100\") == \"YES\"\nassert solution(\"4 3 2 1000\") == \"NO\"\nassert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n3 2 1 8''') == 'YES'\nassert solution('''100 101 102 105''') == 'YES'\nassert solution('''3 2 1 100000000''') == 'NO'\nassert solution('''10 20 15 14''') == 'YES'\nassert solution('''101 101 101 3''') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\nassert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'NO'\nassert solution('7 6 5 8\\n10000000 10000000 10000000\\n10000000 10000000 10000000\\n10000000 10000000 10000000\\n10000000 10000000 10000000\\n10000000 10000000 10000000') == 'YES'\nassert solution('4 6 5 8\\n10000000 10000000 10000000\\n10000000 10000000 10000000\\n10000000 10000000 10000000\\n10000000 10000000 10000000') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 2 7\") == \"YES\"\nassert solution(\"15 3 2 37\") == \"NO\"\nassert solution(\"0 0 1 100\") == \"YES\"\nassert solution(\"0 1 0 1\") == \"YES\"\nassert solution(\"1 2 1 2\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n\n\"\"\"\nInput:\n3\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n\nOutput:\nYES\nNO\nYES\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\") == 'YES'\nassert solution(\"100 101 102 105\") == 'YES'\nassert solution(\"3 2 1 100000000\") == 'NO'\nassert solution(\"10 20 15 14\") == 'NO'\nassert solution(\"101 101 101 3\") == 'YES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n\n\nimport sys\n\nassert sys.version_info >= (3, 7)\n\nassert len(sys.argv) == 2\nINPUT_FILE_NAME = sys.argv[1]\nassert INPUT_FILE_NAME.endswith(\".in\")\n\nOUTPUT_FILE_NAME = INPUT_FILE_NAME[:-3] + \".out\"\n\nINPUT_FILE = open(INPUT_FILE_NAME, \"r\")\nOUTPUT_FILE = open(OUTPUT_FILE_NAME, \"w\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\nprint(solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\"))\n\n-----Constraints-----\n\n1 <= t <= 10^4\n0 <= a, b, c, n <= 10^8\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == '3 4 6 5'\nassert solution(\"5 5\\n2 1 5 3 5\") == '9 8 12 6 8'\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == '3 3'\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == [3, 4, 6, 5]\nassert solution(\"5 5\") == [9, 8, 12, 6, 8]\nassert solution(\"2 10\") == [3, 3]\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n\nprint(\"The script works\")\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == [3, 4, 6, 5]\nassert solution(\"5 5\\n2 1 5 3 5\") == [9, 8, 12, 6, 8]\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == [3, 3]\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"5 5\\n1 2 5 3 5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n2 1 5 3 5\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == '3 4 6 5'\nassert solution(\"5 5\\n2 1 5 3 5\") == '9 8 12 6 8'\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == '3 3'\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == '3 3'\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == '3 3'"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"5 1\\n1 2\\n3 4\\n5 1\\n5 2\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n3 4\\n5 1\\n5 2\\n5 4\\n5 3\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"YES\"\n\"\"\"\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\" * 6\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\" * 6\n\nfrom collections import defaultdict\nfrom typing import DefaultDict\n\n\"\"\"\n--- Day 9: All in a Single Night ---\nEvery year, Santa manages to deliver all of his presents in a single night.\n\nThis year, however, he has some new locations to visit; his elves have provided him the distances between every pair of locations. He can start and end at any two (different) locations he wants, but he must visit each location exactly once. What is the shortest distance he can travel to achieve this?\n\nFor example, given the following distances:\n\nLondon to Dublin = 464\nLondon to Belfast = 518\nDublin to Belfast = 141\n\nThe possible routes are therefore:\n\nDublin -> London -> Belfast = 982\nLondon -> Dublin -> Belfast = 605\nLondon -> Belfast -> Dublin = 659\nDublin -> Belfast -> London = 659\nBelfast -> Dublin -> London = 605\nBelfast -> London -> Dublin = 982\n\nThe shortest of these is London -> Dublin -> Belfast = 605, and so the answer is 605 in this example.\n\nWhat is the distance of the shortest route?\n\n--- Part Two ---\nThe next year, just to show off, Santa decides to take the route with the longest distance instead.\n\nHe can still start and end at any two (different) locations he wants, and he still must visit each location exactly once.\n\nFor example, given the distances above, the longest route would be 982 via (for example) Dublin -> London -> Belfast.\n\nWhat is the distance of the longest route?\n\n\"\"\"\n\nINPUT_FILE_NAME = \"inputs/day_09.txt\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('9 8\\n4 3 7\\n3 2 4 6\\n2 1 5\\n3 4 8 2\\n1 6 7') == 'NO\\nNO'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ninputs = sys.stdin.readlines()\n\nn, m = list(map(int, inputs.pop(0).split()))\n\ntree = [[] for _ in range(n)]\nfor line in inputs:\n    u, v = list(map(int, line.split()))\n    tree[u - 1].append(v - 1)\n    tree[v - 1].append(u - 1)"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('\\n') == 'YES'\nassert solution('2\\n1 3\\n1 4\\n') == 'YES'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES'\nassert solution('4\\n1 2\\n1 3\\n1 4\\n4 1\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"5 2\\n3 1\\n1 4\\n2 5\\n4 5\\n1 2\\n5 3\\n3 4\") == \"YES\\nNO\"\nassert solution(\"2 3\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"6 3\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n5 6\\n4 6\\n3 6\") == \"YES\"\n\n\"\"\"\n\nclass Tree:\n    def __init__(self, n, edges):\n        self.edges = edges\n        self.n = n\n        self.graph = [[] for _ in range(self.n)]\n        self.build_graph()\n\n    def build_graph(self):\n        for u, v in self.edges:\n            self.graph[u - 1].append(v - 1)\n            self.graph[v - 1].append(u - 1)\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"10 2\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\\nNO\"\nassert solution(\"10 2\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\\nNO\"\nassert solution(\"10 1\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nNO\"\nassert solution(\"10 1\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\"\n\nprint(\"Tests passed\")\n\n\"\"\"\n\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\") == \"YES\"\nassert solution(\"10 6\") == \"YES\"\nassert solution(\"10 5\") == \"NO\"\nassert solution(\"9 10\") == \"YES\"\nassert solution(\"10 10\") == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n1 2\\n1 3\\n2 4\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\\nNO\"\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\\nNO\"\nassert solution(\"7 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 8\\n8 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"7 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 8\\n8 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nNO\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n3\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\n\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4'\nassert solution('3\\n4\\n1 2 3 4\\n1 1 1') == 'YES\\n1 2\\n1 3\\n1 4'\nassert solution('4\\n4\\n1 2 3 4\\n1 1000 101 1000') == 'NO'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1') == 'NO'"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4'\nassert solution('4\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000') == 'NO'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'NO'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'NO'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'NO'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'NO'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\"\n\"\"\"\n\nt = int(input())\n\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    # print(a)\n    if n == 1:\n        print(\"YES\")\n    else:\n        # print(n-1)\n        dis = set()\n        for i in range(n):\n            dis.add(i)\n        res = []\n        for i in range(n-1):\n            dis = list(dis)\n            # print(dis)\n            for x in dis:\n                for y in dis:\n                    if x == y or (x, y) in res:\n                        continue\n                    else:\n                        if a[x]!= a[y]:\n                            res.append((x, y))\n            if len(res) == n-1:\n                print(\"YES\")\n                for x, y in res:\n                    print(x, y)\n                break\n            else:\n                print(\"NO\")\n                break\n    t -= 1\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 3'\n'''\nimport io\nimport itertools\nimport typing\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n1 1 1 2 3\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"3\\n2\\n1 1\\n3\\n1 1\") == \"YES\\n1 2\\n1 3\"\nassert solution(\"3\\n5\\n1 1 1 2 3\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"NO\"\n\nprint(\"Well done!\")\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111010\") == \"010\"\nassert solution(\"11110\") == \"00\"\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11101010\") == \"01111010\"\nassert solution(\"11111010\") == \"0111111\"\nassert solution(\"11101110\") == \"0111110\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11101110') == '11101110'\nassert solution('11101101') == '01111011'\nassert solution('11101010') == '01111010'\nassert solution('11101011') == '01111111'\nassert solution('11101100') == '11101100'\n\n\"\"\"\n\nfrom typing import List\nimport math\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11011010\") == \"01111010\"\nassert solution(\"1111100\") == \"0111111\"\nassert solution(\"11101110\") == \"1111110\"\nassert solution(\"111011010\") == \"11111110\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11101110\") == \"01101110\"\nassert solution(\"11101110\") == \"01101110\"\nassert solution(\"11101110\") == \"01101110\"\n\"\"\"\n\nfrom typing import List, Dict, Optional\n\nfrom collections import Counter\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101110\") == \"01011110\"\nassert solution(\"10111010\") == \"01011110\"\nassert solution(\"11111100\") == \"0011111\"\nassert solution(\"10111010\") == \"01011110\"\nassert solution(\"11101110\") == \"01011110\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11011010\") == \"0111110\"\nassert solution(\"1111100\") == \"0011111\"\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11101110') == '010'\n\nassert solution('11011110') == '01'\n\nassert solution('11011110') == '010'\n\nassert solution('11101110') == '010'\n\nassert solution('11101110') == '010'"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11011010\") == \"01111010\"\nassert solution(\"11101110\") == \"1111110\"\nassert solution(\"11101111\") == \"1111111\"\n\nassert solution(\"1101110\") == \"01110011\"\nassert solution(\"1111101\") == \"1110111\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n') == \"3\\n1 4 7\\n\", 'wrong result'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n') == \"3\\n1 2 4\\n\", 'wrong result'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n') == \"4\\n1 3 5 6\\n\", 'wrong result'\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n') == '3\\n1 4 7\\n'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n') == '3\\n1 2 4\\n'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n') == '4\\n1 3 5 6\\n'\n\n'''"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '3\n1 4 7'\nassert solution('''\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '3\n1 2 4'\nassert solution('''\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4\n1 3 5 6'\nassert solution('''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '0'"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint('Test finished'\n'''"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 2 4'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 2 4'\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n7 8\\n9 11\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\nassert solution(\"2\\n2 1\\n-3 0\") == \"0\"\nassert solution(\"1\\n1 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == 3\nassert solution('3\\n1 3 2\\n2 2 2 3') == 19\nassert solution('5\\n2 1 4 3 5') == 19\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == 3\nassert solution('3\\n1 3 2\\n2 1 3\\n') == 3\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4\\n') == 19\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4\\n') == 19\n\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n1 3 2 4 5\\n2 2 2 3 4\") == \"19\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1], 'r').readlines()\nn = int(lines[0])"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == 3\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == 19\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 2') == '2'\nassert solution('1 2 1') == '0'\nassert solution('1 2 1\\n2 3 2\\n1 3 2') == '0'\nassert solution('1 2 1\\n2 3 2\\n1 3 2\\n3 4 2\\n1 5 1\\n4 6 1') == '0'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\nprint(\"Test 1 is OK\")\n\nassert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\nprint(\"Test 2 is OK\")\n\nassert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\nprint(\"Test 3 is OK\")\n\nassert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\nprint(\"Test 4 is OK\")\n\nassert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\nprint(\"Test 5 is OK\")"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\n\"\"\"\n\nn, m = map(int, input().split())\ntree = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    u, v, w = map(int, input().split())\n    tree[u - 1].append((v - 1, w))\n    tree[v - 1].append((u - 1, w))\n\nimport heapq\n\nINF = 10 ** 9"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\n\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass Tree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data, current = None):\n        if not self.root:\n            self.root = TreeNode(data)\n            return\n        if data < current.data:\n            if current.left:\n                self.insert(data, current.left)\n            else:\n                current.left = TreeNode(data)\n        else:\n            if current.right:\n                self.insert(data, current.right)\n            else:\n                current.right = TreeNode(data)\n\n    def get_height(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.get_height(root.left), self.get_height(root.right))\n\n    def print_tree(self, root):\n        if not root:\n            return\n        self.print_tree(root.left)\n        print(root.data)\n        self.print_tree(root.right)\n\n    def get_max_weight(self, root):\n        if not root:\n            return 0\n        max_weight = 0\n        if root.left and root.right:\n            max_weight = max(self.get_max_weight(root.left) + root.data, self.get_max_weight(root.right) + root.data)\n        elif root.left:\n            max_weight = max(self.get_max_weight(root.left) + root.data, root.data)\n        elif root.right:\n            max_weight = max(self.get_max_weight(root.right) + root.data, root.data)\n        return max_weight\n\n    def get_num_pairs(self, root, query):\n        if not root:\n            return 0\n        if query <= root.data:\n            return self.get_num_pairs(root.left, query) + self.get_num_pairs(root.right, query) + self.get_max_weight(root)\n        elif query > root.data and root.left and root.right:\n            return self.get_num_pairs(root.left, query) + self.get_num_pairs(root.right, query)\n        elif root.left and root.right:\n            return self.get_num_pairs(root.left, query)\n        elif root.left:\n            return self.get_num_pairs(root.left, query)\n        elif root.right:\n            return self.get_num_pairs(root.right, query)\n        else:\n            return 0"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n\n\"\"\"\n\n\nimport sys\nimport collections\nfrom typing import List\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 1') == '21'\nassert solution('1 2 1\\n2 3 2\\n1 3 2\\n') == '21 3'\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '''21 7 15 21 3'''\n\nassert solution('''7 3\n1 2 1\n2 3 2\n1 3 2\n''') == '''1 3 3'''\n\nassert solution('''1 2\n1 2''') == '0 0'\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2 1\\n2 3 2\\n3 4 2\\n4 5 4\\n5 6 4\\n6 7 4\") == \"21 7 15 21 3\"\nprint(\"OK\")\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"4 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4\\n4\\n1 3 4 4') == 'NO'\nassert solution('1\\n100') == 'YES'\n\n\"\"\"\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4\\n1 3 4 4') == 'YES'\nassert solution('1\\n100') == 'NO'\n\n\"\"\"\n\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100') == 'YES'\n\nassert solution('5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2\\n3\\n4 5 5\\n1 2 4\\n1 3 4 4\") == \"YES\"\nassert solution(\"100\\n100 100 100 100 100\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 4\\n2 3 5\\n5 5 5\\n') == 'YES'\nassert solution('3\\n1 2 4\\n2 3 5\\n5 5 5\\n') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2\n1 2 2\n4\n5 5 5 5\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3\n1\n2 4 4\n1\n100\n\"\"\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('3\\n1 2 2\\n4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4\\n4\\n1 3 4 4') == 'NO'\nassert solution('3\\n1 2 4\\n4\\n1 3 4') == 'NO'\nassert solution('3\\n1 2 2\\n4\\n1 3 4') == 'NO'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 4\\n1 3 4 4\") == \"NO\"\nassert solution(\"5\\n1 2 2\\n4\") == \"YES\"\nassert solution(\"7\\n1 2 2\\n4 5 5 5\") == \"YES\"\nassert solution(\"7\\n1 2 2\\n5 5 5 5\") == \"NO\"\nassert solution(\"7\\n1 2 2\\n5 5 5 6\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100') == 'YES'\nassert solution('3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100') == 'NO'\n\n\n    return solution\n\nprint(solution('3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100'))\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('5 2 1 2 3 4') == 'YES'\nassert solution('5 5 5 5') == 'NO'\nassert solution('4 4 4') == 'NO'\nassert solution('100 100') == 'NO'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100_010\") == \"110\"\nassert solution(\"100_101\") == \"111\"\nassert solution(\"100_110\") == \"101\"\nassert solution(\"100_111\") == \"110\"\nassert solution(\"100_100\") == \"100\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\nassert solution('4 4\\n1001\\n10101') == '11'\n\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101010 1101\") == \"12\"\nassert solution(\"10001 10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 4\"\n) == \"12\"\n\nassert solution(\n    \"4 5\"\n) == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'1010\\n1101'\n) == '12'\n\nassert solution(\n'1010\\n1100'\n) == '11'\n\nassert solution(\n'1001\\n10101'\n) == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1010\\n1101\\n\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\\n\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\nassert solution('4 5\\n10001\\n101010') == '101'\nassert solution('4 5\\n101010\\n10101010') == '101010'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010\\n1101\\n') == '12'\nassert solution('1001\\n10101\\n') == '11'\n\n'''\n\n\nfrom typing import List\nimport unittest\n\nclass Solution:\n    def mySqrt(self, a: int) -> int:\n        # e.g.\n        # a = 2, then return 1.\n        # a = 3, then return 1.\n        # a = 4, then return 2.\n        # a = 5, then return 2.\n        # a = 6, then return 2.\n        # a = 7, then return 2.\n        # a = 8, then return 2.\n        # a = 9, then return 3.\n        # a = 10, then return 3.\n        # a = 11, then return 3.\n        # a = 12, then return 3.\n        # a = 13, then return 3.\n        # a = 14, then return 3.\n        # a = 15, then return 3.\n        # a = 16, then return 4.\n        # a = 17, then return 4.\n        # a = 18, then return 4.\n        # a = 19, then return 4.\n        # a = 20, then return 4.\n        # a = 21, then return 4.\n        # a = 22, then return 4.\n        # a = 23, then return 4.\n        # a = 24, then return 4.\n        # a = 25, then return 4.\n        # a = 26, then return 4.\n        # a = 27, then return 4.\n        # a = 28, then return 4.\n        # a = 29, then return 4.\n        # a = 30, then return 4.\n        # a = 31, then return 4.\n        # a = 32, then return 5.\n        # a = 33, then return 5.\n        # a = 34, then return 5.\n        # a = 35, then return 5.\n        # a = 36, then return 5.\n        # a = 37, then return 5.\n        # a = 38, then return 5.\n        # a = 39, then return 5.\n        # a = 40, then return 5.\n        # a = 41, then return 5.\n        # a = 42, then return 5.\n        # a = 43, then return 5.\n        # a = 44, then return 5.\n        # a = 45, then return 5.\n        # a = 46, then return 5.\n        # a = 47, then return 5.\n        # a = 48, then return 5.\n        # a = 49, then return 5.\n        # a = 50, then return 5.\n        # a = 51, then return 5.\n        # a = 52, then return 5.\n        # a = 53, then return 5.\n        # a = 54, then return 5.\n        # a = 55, then return 5.\n        # a = 56, then return 5.\n        # a = 57, then return 5.\n        # a = 58, then return 5.\n        # a = 59, then return 5.\n        # a = 60, then return 5.\n        # a = 61, then return 5.\n        # a = 62, then return 5.\n        # a = 63, then return 5.\n        # a = 64, then return 5.\n        # a = 65, then return 5.\n        # a = 66, then return 5.\n        # a = 67, then return 5.\n        # a = 68, then return 5.\n        # a = 69, then return 5.\n        # a = 70, then return 5.\n        # a = 71, then return 5.\n        # a = 72, then return 5.\n        # a = 73, then return 5.\n        # a = 74, then return 5.\n        # a = 75, then return 5.\n        # a = 76, then return 5.\n        # a = 77, then return 5.\n        # a = 78, then return 5.\n        # a = 79, then return 5.\n        # a = 80, then return 5.\n        # a = 81, then return 5.\n        # a = 82, then return 5.\n        # a = 83, then return 5.\n        # a = 84, then return 5.\n        # a = 85, then return 5.\n        # a = 86, then return 5.\n        # a = 87, then return 5.\n        # a = 88, then return 5.\n        # a = 89, then return 5.\n        # a = 90, then return 5.\n        # a = 91, then return 5.\n        # a = 92, then return 5.\n        # a = 93, then return 5.\n        # a = 94, then return 5.\n        # a = 95, then return 5.\n        # a = 96, then return 5.\n        # a = 97, then return 5.\n        # a = 98, then return 5.\n        # a = 99, then return 5.\n        # a = 100, then return 5.\n        # a = 101, then return 5.\n        # a = 102, then return 5.\n        # a = 103, then return 5.\n        # a = 104, then return 5.\n        # a = 105, then return 5.\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\nimport sys\nfrom typing import Tuple, List, Dict, Iterable\n\nimport numpy as np\nimport pandas as pd\n\nsys.setrecursionlimit(100000)\n\nM = np.array([[0, 0, 0, 0],\n              [1, 0, 0, 0],\n              [1, 1, 0, 0],\n              [1, 1, 1, 1],\n              [1, 1, 1, 1]])\n\nD = {0: 2,\n     1: 1,\n     2: 0,\n     3: 1}\n\nS = {0: 1,\n     1: 0,\n     2: 1,\n     3: 1}\n\nn = 4\nm = 5\n\na = np.array([1, 0, 0, 1, 0])\nb = np.array([1, 1, 1, 1, 1])"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('5\\n3') == 'NO'\nassert solution('2\\n1') == 'YES'\nassert solution('6\\n6') == 'NO'\nassert solution('8\\n8') == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n4') == 'NO'\nassert solution('4\\n6') == 'NO'\nassert solution('4\\n8') == 'NO'\nassert solution('4\\n10') == 'YES\\n2 4 6 8 1 3 5 11'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('2\\n4') == 'YES'\nassert solution('6\\n8') == '2 4 1 5'\nassert solution('10\\n12') == 'NO'\nassert solution('12\\n14') == 'YES'"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6\\n') == 'NO\\nYES\\n2 4 1 5'\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6\\n8\\n10\") == 'YES\\n2 4 1 5'\nassert solution(\"2\\n4\\n6\\n8\\n10\") == 'NO'\nassert solution(\"1\\n3\\n5\\n7\\n9\") == 'NO'\nassert solution(\"1\\n3\\n4\\n5\\n7\\n9\") == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n8\\n6\\n10\") == \"2 4 1 5\"\nassert solution(\"6\\n8\\n10\") == \"YES\"\nassert solution(\"8\\n6\\n10\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\") == \"NO\"\nassert solution(\"4\\n2\") == \"YES\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"6\\n8\") == \"NO\"\nassert solution(\"8\\n10\") == \"2 4 6 8 1 3 5 11\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"2\\n3\\n4\\n5\") == \"NO\"\nassert solution(\"2\\n2\\n4\\n6\") == \"YES\\n2 4 1 5\"\nassert solution(\"2\\n3\\n4\\n5\") == \"NO\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('8\\n10') == 'YES\\n2 4 1 5'\nassert solution('2\\n4') == 'NO'\nassert solution('6\\n8') == 'YES\\n2 4 6 8 1 3 5 11'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('h') == 'h'\n\n'''"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('6\\n1 2 3 4 5 6\\n5\\n1 1 1 1 1') == '6'\nassert solution('4\\n1 1 2 2\\n3\\n1 2 3') == '0'\nassert solution('5\\n1 1 2 2 3\\n5\\n1 1 1 1 1') == '5'\nassert solution('4\\n1 1 2 2\\n3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 2\\n3') == '2'\nassert solution('5\\n1 1 1 1 1') == '4'\nassert solution('8\\n8 7 6 5 4 3 2 1') == '0'\n\"\"\"\n\n\"\"\"\nintuition:\n    for each subarray, sum all numbers\n    then we check if sum-numbers in nums[i:] is 0\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n1 2 3 4 5\\n7\\n1 2 3 4 5 6 7') == '8'\n\"\"\"\n\nimport sys\nfrom typing import Tuple"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"4\\n1 1 2\") == \"1\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n1 1 1 1 1\") == \"0\"\nassert solution(\"9\\n8 7 6 5 4 3 2 1\") == \"0\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2\\n5\") == \"2\"\nassert solution(\"5\\n1 1 1 1 1\") == \"3\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\nassert solution('4\\n3 1 4 1') == '0'\nassert solution('4\\n2 1 4 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\\n1 1 1 2\\n3\\n1 1 1 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '3\\n4\\n2\\n7'\nassert solution(\"6\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == '5\\n4\\n2\\n7'\n\n\"\"\"\n\n\nfrom sys import stdin\nfrom itertools import combinations\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '2'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '7'\n\n\"\"\"\n\n\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7''') == '''3\n4\n2\n7'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2\n3\n2\n3\n''') == '2'\nassert solution('''\n5\n3\n1 7\n2 5\n3 6\n1 2\n2 3\n2 4\n4 5\n''') == '3'\nassert solution('''\n3\n3\n1 6\n2 5\n3 4\n''') == '1'\nassert solution('''\n5\n3\n2 3\n1 8\n3 7\n1 9\n3 2\n''') == '4'\nassert solution('''\n3\n3\n1 2\n2 4\n3 5\n''') == '2'\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '2'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '7'\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\") == \"3\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == \"3\"\nassert solution(\"4\\n5\\n2 3\\n2 5\\n3 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\n\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == '3'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == '4'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == '2'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == '7'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nprint('Test finished.')"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\ntest_cases = int(input())\nfor test_case in range(test_cases):\n    h, m = [int(i) for i in input().split()]\n    if h > 0:\n        print(60 * (h - 1) + m)\n    elif h < 0:\n        print(60 * (h + 24) - m)\n    else:\n        if m > 0:\n            print(60 * 24 - m)\n        else:\n            print(0)"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\nprint(solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\"))\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nprint('Test passed')\n\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nprint(solution(stdin))\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\n\"\"\"\n\nfrom typing import Any, List, Optional\n\nDEBUG = False\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"LRUD\"\nassert solution(\"LURDLRUDR\") == \"LRUD\"\nassert solution
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LRUD') == 'LRU'\nassert solution('LURD') == 'LRD'\nassert solution('RRUDU') == 'RRUDU'\nassert solution('LLDDR') == 'LLDDR'\n\nprint(solution('LRUD'))\nprint(solution('LURD'))\nprint(solution('RRUDU'))\nprint(solution('LLDDR'))\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURD\") == \"UR\"\nassert solution(\"RRUDU\") == \"RRUD\"\nassert solution(\"LLDDR\") == \"LLDDR\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\n''') == '1 2', 'Wrong answer'\nassert solution(\n'''\n4\nLDR\n4\nLDR\n5\nRRDDU\n5\nLLDDR\n''') == '1 4', 'Wrong answer'\n'''\nassert solution(\n'''\n2\n4\nLDR\n4\nLDR\n5\nRRDDU\n5\nLLDDR\n''') == '-1', 'Wrong answer'\n\nprint('Hooray!')\n'''"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LRUD') == 'LDR'\nassert solution('LURD') == 'LRD'\nassert solution('RRUDU') == 'RRRU'\nassert solution('LLDDR') == 'LLDDR'\n\n\n-----Problem-----\n\nA robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\n\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThe numbers after the direction are steps. Please write a program to compute the distance from current position after a sequence of movement and original point. If the distance is a float, then just print the nearest integer. Example: If the following tuples are given as input to the program:\n\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThen, the output of the program should be:\n\n2\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"LRUD\") == \"L1R2U1D2\"\nassert solution(\"LURD\") == \"L1R2U1D2\"\nassert solution(\"RRUDU\") == \"RRU1D2\"\nassert solution(\"LLDDR\") == \"LLDDR\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURDLDRUD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LURDRUD\") == \"1 2\"\nassert solution(\"LRUD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LRUD\") == \"UD\"\nassert solution(\"LURLLR\") == \"LURL\"\nassert solution(\"RRUDU\") == \"LURD\"\nassert solution(\"LLDDR\") == \"DDRL\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '3\\n1\\n0\\n2'"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\\n1\\n0\\n2\"\n\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\nassert solution(\"3\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"1\\n0\\n2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\"\"\"\nfrom typing import List\n\n\"\"\"\nMemoized solution.\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4\\n5\\n2') == '3'\nassert solution('3\\n1\\n5\\n2') == '1'\nassert solution('3\\n4\\n5\\n2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('3') == '3'\nassert solution('7') == '7'\nassert solution('7\\n3') == '7'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 1 4 2 5 1\\n4 7 6\\n6 8\") == \"19\\n0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n9 4 1 7 10 1 6 5') == '121'\n\nsolution('1\\n1337') == '0'\n\nprint(solution('1\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8'))\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\") == \"5\"\nassert solution(\"3\\n1 2\\n2 3\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n5 6\") == \"4\"\n\n\"\"\"\n\n\nclass DisjointSet:\n    def __init__(self, n):\n        self.parent = [i for i in range(n)]\n        self.rank = [1 for _ in range(n)]\n        self.n = n\n\n    def get_parent(self, i):\n        if self.parent[i]!= i:\n            self.parent[i] = self.get_parent(self.parent[i])\n        return self.parent[i]\n\n    def union(self, i, j):\n        pi, pj = self.get_parent(i), self.get_parent(j)\n        if pi!= pj:\n            if self.rank[pi] > self.rank[pj]:\n                pi, pj = pj, pi\n            self.rank[pi] += self.rank[pj]\n            self.parent[pj] = pi\n\n    def count(self):\n        return self.count"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n1 4\\n1 5\") == \"18\"\nassert solution(\"5\\n1 2\\n2 3\\n1 4\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n1 2\n2 4\n3 1\n\"\"\") == \"\"\"\n4\n3\n0\n2\n\"\"\"\n\n\"\"\"\n:type nums: List[int]\n:type k: int\n:rtype: int\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('8 8\\n1 2 3 4 5 6 7 8') == '0'\nassert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('1 1\\n1 2') == '1'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"10 6\") == \"18\"\nassert solution(\"8 7 1 8 3 7 5 10 8 9\") == \"2\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"20 100 50 20 100500\") == \"0\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\\n\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\\n\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\\n\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\\n\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\\n\") == \"6\\n18\\n0\\n227\\n8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == '6'\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == '8'\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\") == \"8\"\n\n\n---"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"3\\n1 1 1\") == \"3\"\nassert solution(\"10\\n1 10 10\") == \"1\"\nassert solution(\"10\\n1 10 1\") == \"10\"\n\n\"\"\"\n\nimport sys\nimport heapq\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3\\n1 2\") == \"3\"\nassert solution(\"4 3\\n1 2 2\\n1 2\") == \"2\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\nimport bisect"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 2') == '2'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aaaa') == 'a'\nassert solution('aab') == 'b'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5,1,4,3,2') == '3'\nassert solution('3,2,1') == '3'\nassert solution('1,2,3,4') == '4'\nassert solution('1,2,3,4,5') == '4'\nassert solution('1,2,3,4,5,6,7,8') == '5'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 1') == '1'\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n2 2') == '1'\nassert solution('1 2\\n2 2') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 2\n1 1\"\"\") == \"1\"\n\nassert solution(\"\"\"1 2\n1 1\"\"\") == \"1\"\n\nassert solution(\"\"\"1 1\n1 2\"\"\") == \"2\"\n\nassert solution(\"\"\"1 2\n1 2\"\"\") == \"2\"\n\nassert solution(\"\"\"1 2\n1 3\"\"\") == \"2\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == '1'\nassert solution(\"2 2 3\") == '2'\nassert solution(\"1 1 2\") == '1'\n\nassert solution(\"3 1 3\") == '3'\nassert solution(\"1 1 3\") == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n1\") == \"2\"\nassert solution(\"2\\n1\\n1\\n1\\n2\\n1\\n1\") == \"2\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\nassert solution(\"5\") == [1,5,10,10,5,1]\n\"\"\"\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> [int]:\n        # 1,1,2,3,5,\n        # 0,1,1,2,3,5,\n        # 0,1,2,3,4,5,\n        # 0,1,3,6,10,10,5,\n        # 0,1,4,10,20,35,35,20,10,5,1\n        if rowIndex == 0:\n            return [1]\n\n        res = [0] * (rowIndex+1)\n        for i in range(rowIndex+1):\n            if i == 0:\n                res[i] = 1\n            elif i == rowIndex:\n                res[i] = 1\n            else:\n                res[i] = res[i-1] + res[i]\n        return res\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('4') == [1,4,6,4,1]\nassert solution('5') == [1,5,10,10,5,1]\nassert solution('10') == [1,10,45,120,210,252,210,120,45,10,1]\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, n: int) -> List[int]:\n        res = [1] * (n + 1)\n\n        if n == 0:\n            return res\n\n        for i in range(1, n + 1):\n            for j in range(i, 0, -1):\n                res[j] += res[j - 1]\n\n        return res\n\n    def getRow_2(self, n: int) -> List[int]:\n        res = [1] * (n + 1)\n\n        for i in range(1, n + 1):\n            res[i] = res[i - 1] * (n - i + 1) // i\n\n        return res\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('1') == [1]\nassert solution('2') == [1,1]\n\"\"\"\nimport math\n\nclass Solution:\n    # @param A : integer\n    # @return a list of integers\n    def getRow(self, A):\n        result = []\n        for row in range(A+1):\n            result.append([])\n            for col in range(row+1):\n                # this is a dynamic programming solution\n                # in first row, we add 1 in every column\n                if row == 0:\n                    result[row].append(1)\n                else:\n                    # in other rows, we add the two numbers above it\n                    if col == 0 or col == row:\n                        result[row].append(1)\n                    else:\n                        result[row].append(result[row-1][col-1] + result[row-1][col])\n        return result[A]"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\nThe first line contains an integer\u00a0T\u00a0denoting the number of test cases.\nT\u00a0lines follow.\nEach line contains a single\u00a0integer\u00a0N.\nOutput Format\n\nFor each test case, print a single line containing the row with the kth index.\n\nConstraints\n\n1 \u2264 T \u2264\u00a0101\n1 \u2264 N \u2264\u00a033\n\nSample Input\n\n3\n1\n3\n5\nSample Output\n\n[1]\n[1,1]\n[1,2,1]\n\"\"\"\n\nclass Solution:\n    def getRow(self, n: int) -> List[int]:\n        row = [1]\n        for _ in range(n):\n            row = [x + y for x, y in zip([0] + row, row + [0])]\n        return row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == [1, 4, 6, 4, 1]\n\n\"\"\"\nimport numpy as np\n\nclass Solution:\n    def getRow(self, rowIndex):\n        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n\n        last_row = [1, 1]\n        for i in range(2, rowIndex + 1):\n            row = [1]\n            for j in range(1, i):\n                row.append(last_row[j] + last_row[j - 1])\n            row.append(1)\n            last_row = row\n\n        return last_row"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == [1,5,10,10,5,1]\nassert solution(3) == [1,3,3,1]\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        res = [[1], [1, 1]]\n        for r in range(2, rowIndex + 1):\n            tmp = [1]\n            for i in range(r - 1):\n                tmp.append(res[r - 1][i] + res[r - 1][i + 1])\n            tmp.append(1)\n            res.append(tmp)\n        return res[rowIndex]\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11111111111111111111111111111101\") == \"31\"\nassert solution(\"10000000000000000000000000000000\") == \"32\"\nassert solution(\"11111111111111111111111111111101\") == \"31\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(11011110001101100011) == 3\nassert solution(11101111111111111111111111110110111010) == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n = n & (n - 1)\n        return count\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n:\n            res += n & 1\n            n = n >> 1\n        return res\n    \n    def hammingWeight2(self, n: int) -> int:\n        res = 0\n        while n:\n            res += 1\n            n = n & (n-1)\n        return res\n    \n    def hammingWeight3(self, n: int) -> int:\n        return bin(n).count('1')\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\nassert solution('000000000000000000000000011111101') == 5\nassert solution('111111111111111111111111111111101') == 31\n\n'''\n\nclass Solution:\n    def hammingWeight(self, n):\n        return bin(n).count('1')\n\nclass Solution:\n    def hammingWeight(self, n):\n        return bin(n).count('1')\n\n\n\n\nclass Solution:\n    def hammingWeight(self, n):\n        return bin(n).count('1')\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4387\") == \"4885\"\nassert solution(\"9474\") == \"9977\"\nassert solution(\"1912\") == \"2001\"\nassert solution(\"1111\") == \"1112\"\nassert solution(\"9\") == \"10\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"12\") == \"13\"\nassert solution(\"1234\") == \"1235\"\nassert solution(\"12345\") == \"12346\"\nassert solution(\"123456\") == \"123567\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"456\") == \"457\"\nassert solution(\"230\") == \"231\"\n\nassert solution(\"1234\") == \"1235\"\nassert solution(\"4321\") == \"4322\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1231\") == \"1232\"\nassert solution(\"9123\") == \"9213\"\nassert solution(\"9\") == \"10\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1,2,3') == '1,2,4'\nassert solution('4,3,2,1') == '4,3,2,2'\nassert solution('3,2,1') == '4,0,0'\nassert solution('9,9,9') == '1,0,0,0'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123') == '124'\nassert solution('1234') == '1235'\nassert solution('9') == '10'\nassert solution('0') == '1'\n\nprint('tests passed')\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1,2,3\") == \"1,2,4\"\nassert solution(\"4,3,2,1\") == \"4,3,2,2\"\nassert solution(\"123,0,456\") == \"123,1,457\"\nassert solution(\"9,9,9,9\") == \"1,0,0,0\"\n\n\"\"\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1,2,3\") == \"1,2,4\"\nassert solution(\"4,3,2,1\") == \"4,3,2,2\"\nassert solution(\"100\") == \"101\"\nassert solution(\"9,9,9,9\") == \"1,0,0,0,0\"\nassert solution(\"9,9,9,9\") == \"1,0,0,0,0\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('42') == '43'\nassert solution('123') == '124'\n\nassert solution('4') == '5'\nassert solution('13') == '14'\n\nassert solution('1') == '2'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"99\") == \"100\"\nassert solution(\"1000\") == \"1001\"\nassert solution(\"1111\") == \"1112\"\nassert solution(\"111111111\") == \"111121112\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 1\n''') == '4'\n\nassert solution('''3 -2\n''') == '2'\n\nassert solution('''0 -0\n''') == '0'\n\nassert solution('''-1 -1\n''') == '-1'\n\nassert solution('''-1 1\n''') == '1'"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n') == 4\n\"\"\"\n\nA, B = input().split()\nA, B = int(A), int(B)\nprint(max(A+B, A-B, A*B))"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '4'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\nfrom solution_2 import solution\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n') == '4'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\n\n\"\"\"\nimport sys\nimport math\n\nfor line in sys.stdin:\n    a, b = [int(i) for i in line.split()]\n    print(max(a+b, a-b, a*b))"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\") == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4\n''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\nimport math\n\ninput = stdin.readlines()\n\nn, d = [int(i) for i in input[0].split()]\n\ndistances = []\n\nfor i in range(1, n+1):\n    x, y = [int(i) for i in input[i].split()]\n    distances.append(math.sqrt(x ** 2 + y ** 2))\n\ndistances.sort()\n\ncount = 0\nfor i in range(len(distances)):\n    if distances[i] <= d:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\nimport math\n\nN, D = [int(x) for x in stdin.split()]\nX, Y = [], []\n\nfor _ in range(N):\n    x, y = [int(x) for x in stdin.split()]\n    X.append(x)\n    Y.append(y)"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == 3\n\"\"\"\n\nimport math\n\nn_d = list(map(int, stdin.split()))\nn, d = n_d[0], n_d[1]\n\nx = [i[0] for i in map(int, stdin.split())]\ny = [i[1] for i in map(int, stdin.split())]\n\npoints = set()\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        distance = math.sqrt(x[i] ** 2 + y[i] ** 2)\n        if distance <= d:\n            points.add(i)\n            points.add(j)\n\nprint(len(points))\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(12) == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 'Yes'\nassert solution('3') == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"3\") == \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == 'Yes'\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == 'Yes'"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5 -1\") == \"12\\n8\\n10\"\n\n-----Problem-----\nA Hiker is planning a trip on the continent with a budget of Yen.\nHe\u2019s not sure about the weather and has spent some of his money on buying a jacket, a heavy coat, and a jacket pack.\n\nHe wants to calculate the total cost of the jacket and the jacket pack that he bought.\n\nHowever, the weather forecast is uncertain, so it is not certain whether it will rain or not.\nHe doesn\u2019t want to buy the jacket if it will rain, because it is too expensive.\nIf it will rain, he wants to buy the jacket pack instead.\n\nThe price of the jacket is 10 Yen and the price of the jacket pack is 50 Yen.\nHelp him calculate the total cost of the jacket and the jacket pack that he bought.\n\n-----Solution-----\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 -1\") == '12\\n8\\n10'\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n3 5 -1\n''') == '''12\n8\n10'''\nassert solution('''3\n5 -1 3\n''') == '''12\n8\n10'''\nassert solution('''6\n-1 -1 -1 -1 -1 -1\n''') == '''0\n0\n0\n0\n0\n0\n0'''\n\nassert solution('''3\n-1 3 5\n''') == '''0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0'''\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 5 -1\") == '12\\n8\\n10'\nprint('Success')\n\n-------\n3\n3 5 -1\n12\n8\n10\n'''"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n5 -1''') == '12\\n8\\n10'\n\nassert solution('''2\n2 2\n''') == '0\\n0'\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [0] * n\ndp[0] = 0\ndp[1] = abs(a[0] - a[1])\nfor i in range(2, n):\n    dp[i] = min(dp[i - 1] + abs(a[i - 1] - a[i]), dp[i - 2] + abs(a[i - 2] - a[i]))\n\nprint(dp[-1])\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\nassert solution('c') == 'vowel'\nassert solution('d') == 'consonant'\nassert solution('e') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"c\") == \"consonant\"\nassert solution(\"d\") == \"consonant\"\nassert solution(\"e\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\nassert solution('c') == 'vowel'\nassert solution('d') == 'consonant'\nassert solution('e') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'vowel'\n\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'consonant'\nassert solution('a') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('o') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"c\") == \"consonant\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWBWWWWBBBWWWWBWBWWWWWWWWWW\") == 2\n\n\"\"\"\n\nimport sys\n\n\"\"\"\nThere are two types of stones: black and white.\n\nThe string S contains only \"B\" and \"W\".\nS contains at least two characters.\n\nAt each step, we can choose one of the following two actions:\n\nIf the next stone is black, we can flip all the stones between the new stone and the next white stone on the right.\nIf the next stone is white, we can flip all the stones between the new stone and the next black stone on the left.\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BBBWW') == 1\nassert solution('WWWBB') == 0\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBW\") == \"1\"\nassert solution(\"WWBWW\") == \"0\"\nassert solution(\"WWBWWWBBW\") == \"2\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWBW') == '0'\nassert solution('BBW') == '1'\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BBBWW') == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'BBBWW') == '1'\nassert solution(\n    'WWBWB') == '2'\nassert solution(\n    'BWBWB') == '0'\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BBWWB\") == \"1\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Yes'\nassert solution('1 1') == 'No'\n\n'''\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 21''') == 'Yes'\nassert solution('''2 22''') == 'No'\nassert solution('''3 23''') == 'No'\nassert solution('''4 24''') == 'No'\nassert solution('''5 25''') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 21') == 'Yes'\n\"\"\"\n\n\"\"\"\nGiven two strings S and T of lengths m and n respectively, the edit distance between S and T is the minimum number of operations required to transform S into T, where a single operation is defined as insertion, deletion, or substitution of a single character, and the cost of an operation is equal to the cost of the operation plus 1.\n\nFor example, the edit distance between \u201ckitten\u201d and \u201csitting\u201d is three: substitute the \u201ck\u201d for \u201cs\u201d, substitute the \u201ce\u201d for \u201ci\u201d, and append a \u201cg\u201d.\n\nGiven: Two DNA strings s1 and s2 of equal length (not exceeding 1 kbp).\n\nReturn: The edit distance dE(s1, s2)\n\nSample Dataset\nGAGCCTACTAACGGGAT\nCATCGTAATGACGGCCT\n\nSample Output\n7\n\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 21') == 'Yes'\n\"\"\"\n\na,b = map(int,input().split())"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 21') == 'Yes'"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\nimport sys\n\nnumbers = sys.stdin.readlines()\nfor number in numbers:\n    number = list(map(int, number.split()))\n    a = number[0]\n    b = number[1]\n    c = str(a) + str(b)\n    if int(c) > 0:\n        c = int(c)\n        if c ** (1/2) % 1 == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('1 21') == 'Yes'\nassert solution('1 11') == 'No'\nassert solution('1 1') == 'No'\n\n-----"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n\nn = int(input())\nseq = list(map(int, input().split()))\n\nmaximum = 0\ntemp = 0\nfor i in range(n):\n    for j in range(i, n):\n        temp = 0\n        for k in range(i, j+1):\n            if seq[k] > seq[k-1]:\n                temp += 1\n        if maximum < temp:\n            maximum = temp\n\nprint(maximum)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\n------\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import lru_cache\n\nimport sys"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == '4'\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 4 1 5 9 2') == '4'\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == '5'\nassert solution('5\\n5') == '10'\nassert solution('10\\n20') == '110'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n3 3') == '5'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n') == '3\\n'\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"3\\n7\") == \"13\"\nassert solution(\"5\\n5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('5 5 1') == 'NO'\nassert solution('5 5 10') == 'NO'\nassert solution('2 2 3') == 'YES'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 4\") == \"NO\"\n\"\"\"\n\na, b, c = map(int, input().strip().split())"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 2 2\") == \"NO\"\nassert solution(\"2 1 1\") == \"YES\"\nassert solution(\"3 1 1\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"4 4 6\") == \"YES\"\nassert solution(\"4 2 6\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 4 1\") == \"YES\"\nassert solution(\"2 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().strip().split(' '))"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('2 4 8') == 'NO'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('4 4 4') == 'NO'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\nassert solution('89') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29') == 'Yes'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29') == 'Yes'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == 'Yes'\nassert solution(\"42\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('29') == 'Yes'\nassert solution('31') == 'No'\nassert solution('41') == 'No'\nassert solution('99') == 'Yes'\nassert solution('1') == 'No'\n\nimport sys;\nprint('Yes' if solution(sys.stdin.read()) == 'Yes' else 'No')\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('29') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\u201c29\u201d) == \u201cYes\u201d\nassert solution(\u201c13\u201d) == \u201cNo\u201d\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\nSolution\n\nclass Solution:\n    def solution(self, stdin):\n        n, m, x = [int(i) for i in stdin.split('\\n')[0].split()]\n        a = [int(i) for i in stdin.split('\\n')[1].split()]\n        res = 0\n        visited = [False] * n\n        for i in a:\n            if i == x:\n                break\n            res += 1\n            if i + 1 in a:\n                res += 1\n            elif i + 1 < n:\n                if i + 1 not in a and not visited[i + 1]:\n                    res += 1\n                    visited[i + 1] = True\n            if i - 1 in a:\n                res += 1\n            elif i - 1 >= 0:\n                if i - 1 not in a and not visited[i - 1]:\n                    res += 1\n                    visited[i - 1] = True\n        return res\n\nSample Input\n5 3 3\n1 2 4\n\nSample Output\n1\n\nExplanation\nThe optimal solution is as follows:\n - First, travel from Square 3 to Square 4. Here, there is a toll gate in Square 4, so the cost of 1 is incurred.\n - Then, travel from Square 4 to Square 5. This time, no cost is incurred.\n - Now, we are in Square 5 and we have reached the goal.\nIn this case, the total cost incurred is 1."
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2\\n1 2 4\") == 1\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n1 2\\n3 4') == '2'\nassert solution('5 1 3\\n1 2\\n4 5') == '6'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3 3\n1 2 4''') == \"1\"\nassert solution('''6 5 1\n3 2 4 1 5''') == \"12\"\nassert solution('''9 9 7\n9 7 6 2 8 5 3 1 4''') == \"10\"\nassert solution('''9 10 9\n8 6 4 7 3 1 2 5''') == \"12\"\nassert solution('''10 10 10\n10 10 10 10 10 10 10 10 10''') == \"0\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n0 1 2\\n\") == 1\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 4\\n\") == \"1\"\n\nassert solution(\"5 3 2\\n1 2 4\\n\") == \"2\"\n\nassert solution(\"5 3 3\\n1 2\\n4\\n\") == \"1\"\n\nassert solution(\"5 3 3\\n2 1 4\\n\") == \"2\"\n\nassert solution(\"5 3 3\\n1 2 3\\n\") == \"2\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 4\\n1 2 3 4\\n') == '4'\nassert solution('4 3 3\\n2 3 4\\n') == '2'\n\"\"\"\n\nimport sys\n\nN, M, X = map(int, sys.stdin.readline().strip().split())\ntoll_gate_lst = list(map(int, sys.stdin.readline().strip().split()))\n\nsteps = N - 2\nmin_cost = steps * M"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n1 2 4') == '1'\n\"\"\"\n\nfrom sys import stdin\n\nn, m, x = [int(v) for v in stdin.readline().split()]\na = [int(v) for v in stdin.readline().split()]"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3 3\n1 2 4''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"###\\n.#.\") == \"Yes\"\nassert solution(\"#.\\n.#.\") == \"No\"\nassert solution(\"#.#\\n#.#.\") == \"No\"\n\n\"\"\"\n\nH, W = map(int, input().split())"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#.\") == \"Yes\"\nassert solution(\"###.\") == \"Yes\"\nassert solution(\"#.#.\") == \"No\"\nassert solution(\"..#.\") == \"No\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\\n\".join([\n    \"3 3\",\n    \"#.#\",\n    \".#.#\",\n    \".#.#\"\n])) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"#.#\") == \"Yes\"\nassert solution(\"...#\") == \"No\"\n\"\"\"\n\n\"\"\"\nInput\n3 3\n..#\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s1) == \"Yes\"\nassert solution(s2) == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n.#\\n###\\n.#') == 'Yes'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, H: int, W: int, string: str) -> str:\n        matrix = [[0 for j in range(W)] for i in range(H)]\n        for i in range(H):\n            matrix[i] = [0] + list(string[i*W:(i+1)*W])\n        \n        def convert_color(matrix: List[List[int]], row: int, col: int, color: int) -> bool:\n            if row < 0 or col < 0 or row > H - 1 or col > W - 1:\n                return False\n            if matrix[row][col] == color:\n                return True\n            matrix[row][col] = color\n            if row > 0:\n                convert_color(matrix, row - 1, col, color)\n            if col > 0:\n                convert_color(matrix, row, col - 1, color)\n            if row < H - 1:\n                convert_color(matrix, row + 1, col, color)\n            if col < W - 1:\n                convert_color(matrix, row, col + 1, color)\n            return True\n        \n        for i in range(H):\n            for j in range(W):\n                if convert_color(matrix, i, j, 1):\n                    return 'Yes'\n        return 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\n\nimport re\nimport sys\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 20 30\") == \"No\"\nassert solution(\"30 20 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 30 20') == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 20 30\") == \"Yes\"\nassert solution(\"30 30 20\") == \"No\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 20 20\") == \"No\"\nassert solution(\"30 10 20\") == \"No\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('1 10 10') == 'No'\nassert solution('1 1 1') == 'Yes'\nassert solution('1 1 1 1') == 'No'\nassert solution('1 1 10') == 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"10 2 1\") == \"No\"\nassert solution(\"10 1 1\") == \"No\"\nassert solution(\"10 3 1\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"./sample_input.txt\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 7 1') == 'Left'\n'''\nimport math\n\na,b,c,d = [int(i) for i in stdin.split()]\n\nleft = sum([a,b])\nright = sum([c,d])"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n'''"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 7 1') == 'Left'\nassert solution('10 2 8 1') == 'Right'\nassert solution('2 8 10 2') == 'Balanced'\n\"\"\"\nimport unittest"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\n-----Problem-----\nYou are given a string S. We need to find a palindromic substring which is the longest possible.\n\nA palindromic substring is defined as a string which is the same backwords and forward.\n\n-----Solution-----\n\n### Runtime: 28 ms, faster than 92.23% of Python3 online submissions for Longest Palindromic Substring.\n### Memory Usage: 14.1 MB, less than 100.00% of Python3 online submissions for Longest Palindromic Substring.\n\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def longestPalindromicSubstr(s: str) -> str:\n            if len(s) == 1:\n                return s\n\n            n = len(s)\n            for k in range(n - 1, 1, -1):\n                for i in range(n - k):\n                    substr = s[i:i + k + 1]\n\n                    if substr == substr[::-1]:\n                        return substr\n            return s[0]\n        res = s[0]\n        for i in range(1, len(s)):\n            substr = longestPalindromicSubstr(s[:i + 1])\n            if len(substr) > len(res):\n                res = substr\n        return res\n\n\n### Run time: 28 ms, faster than 92.23% of Python3 online submissions for Longest Palindromic Substring.\n### Memory Usage: 14.1 MB, less than 100.00% of Python3 online submissions for Longest Palindromic Substring.\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 7 1') == 'Left'\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == '8'\n\"\"\"\n\n\n\"\"\"\n-----Max Profit Calculation-----\nP_i = max_c P_{1,c_i}+max_c P_{2,c_i}+...+max_c P_{N,c_i}\nP_1 = P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+max_c P_{1,2}+...+max_c P_{1,c_1}\nP_2 = max_c P_{2,1}+max_c P_{2,2}+...+max_c P_{2,c_2}\nP_N = max_c P_{N,1}+max_c P_{N,2}+...+max_c P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\nP_2 = max_c P_{2,1}+P_{2,2}+...+P_{2,c_2}\nP_N = max_c P_{N,1}+P_{N,2}+...+P_{N,c_N}\n\nP_1 = max_c P_{1,1}+P_{1,2}+...+P_{1,c_1}\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('Hello, world!\\n') == 'Hello, world!'\nassert solution('123\\n') == '123'\nassert solution('111\\n') == '111'\n\n-----\n'''\nimport sys\n\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5 6 7 8 9 2 1 0 1 0 0 1\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1') == '8'\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"\nfrom typing import List, Dict, NamedTuple\n\nfrom itertools import product, combinations\n\n\nclass F(NamedTuple):\n    day: int\n    period: int\n\n\nclass P(NamedTuple):\n    day: int\n    period: int\n\n\nclass Fs(NamedTuple):\n    id: int\n    day: int\n    period: int\n\n\nclass Pars(NamedTuple):\n    id: int\n    day: int\n    period: int\n\n\nclass Shop:\n    def __init__(self, *args: Pars):\n        self.periods: List[int] = [None] * 6\n        for _ in args:\n            self.periods[_.day - 1] = _.period\n\n    def get_periods(self) -> Dict[int, int]:\n        return self.periods\n\n\nclass ShopJoisino(Shop):\n    def __init__(self, *args: Pars):\n        super().__init__(*args)\n        self.opening_periods: List[int] = [None] * 6\n        self.closing_periods: List[int] = [None] * 6\n        for _ in args:\n            self.opening_periods[_.day - 1] = _.period\n            self.closing_periods[_.day - 1] = _.period\n\n    def get_opening_periods(self) -> Dict[int, int]:\n        return self.opening_periods\n\n    def get_closing_periods(self) -> Dict[int, int]:\n        return self.closing_periods\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 5') == 'Yes'\nassert solution('3 2 5') == 'No'\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\nS = sys.stdin.readline()"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('269-56650') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4269-6650\") == 'Yes'\nassert solution(\"5 6269-6650\") == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('2 1') == 'Yes'\nassert solution('2 2') == 'No'\nassert solution('3 1') == 'Yes'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('269-6650') == 'Yes'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'Yes'\nassert solution('3 1') == 'No'\nassert solution('1 1') == 'No'\nassert solution('0 0') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('269-65-9') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n4-8307\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"./sample/input_1.txt\") == \"1\"\nassert solution(\"./sample/input_2.txt\") == \"1\"\nassert solution(\"./sample/input_3.txt\") == \"1\"\nassert solution(\"./sample/input_4.txt\") == \"1\"\nassert solution(\"./sample/input_5.txt\") == \"3\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == '1'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 6\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2 6''') == '''1'''\nassert solution('''4 1 5''') == '''3'''\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 6\") == 1\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 6') == '1'\nassert solution('4 7 8') == '3'\nassert solution('1 1 1') == '0'\n\"\"\"\n\nw, a, b = [int(s) for s in stdin.split(\" \")]\n\nprint(w + b - 2 * a)\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 6') == '1'\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n'''"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\"\"\"\n\nfrom typing import List, Union"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\nimport sys\n\nA, B, K = [int(c) for c in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/55c45be3b2079eccff00010f/train/python\n\nTest.assert_equals(solution(\"AtCoder Beginner Contest\"), \"ABC\")\nTest.assert_equals(solution(\"AtCoder Insane Contest\"), \"AI\")\nTest.assert_equals(solution(\"AtCoder Regular Contest\"), \"ARC\")\nTest.assert_equals(solution(\"AtCoder Pro Contest\"), \"APC\")\nTest."
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\nassert solution('AtCoder Intermediate Contest') == 'IIC'\nassert solution('AtCoder Senior Contest') == 'ASC'\nassert solution('AtCoder All Contest') == 'AAC'\nassert solution('AtCoder All') == 'AAC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n\ns = input()\nprint(s[0] + s[1:].lower())"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Open Contest\") == \"OCO\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\n\n\n\"\"\"\nA = ord('A')\nZ = ord('Z')"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Regular Contest\") == \"ARC\"\nassert solution(\"AtCoder Open Contest\") == \"AOC\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('AtCoder s Contest') == 'ABC'\nassert solution('AtCoder Beginner Contest') == 'ABC'\nassert solution('AtCoder Beginner Contest IV') == 'ABC'\nassert solution('AtCoder Beginner Contest VI') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1 1') == 'YES'\nassert solution('2 1 0') == 'NO'\nassert solution('4 0 4') == 'YES'\nassert solution('3 5 4') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"5 5 6\") == \"NO\"\nassert solution(\"10 20 30\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"2 2 1\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('3 5 5') == 'NO'\nassert solution('3 5 6') == 'NO'\nassert solution('1 5 4') == 'NO'\nassert solution('1 1 1') == 'YES'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"1 100 101\") == \"NO\"\nassert solution(\"2 5 5\") == \"NO\"\nassert solution(\"100 100 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 4') == 'YES'\n\n--------------------------\n\n\nimport sys\n\nA, B, X = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100 17') == '83'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'100 17'\n) == '83'\n\nassert solution(\n'100 -17'\n) == '83'\n\nassert solution(\n'-100 17'\n) == '83'\n\nassert solution(\n'100 -17'\n) == '83'\n\nassert solution(\n'100 17'\n) == '83'"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 17\\n\") == \"83\"\n\"\"\"\n\nimport math\n\nX, t = [int(i) for i in input().split()]\n\nprint(math.floor(X - X * (t / 3600) * 1 + X * (t / 3600) * math.floor(t / 3600)))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 17\\n') == '83'\nassert solution('100 2\\n') == '101'\nassert solution('100 0\\n') == '100'\nassert solution('100 100\\n') == '100'\nassert solution('1000000001 10010001\\n') == '100101010'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100 17') == '83'\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n\nfrom collections import namedtuple\n\nTestCase = namedtuple('TestCase', ['X', 't'])\n\ntest_cases = [\n    TestCase(X=100, t=17),\n    TestCase(X=100, t=55),\n    TestCase(X=100, t=13),\n    TestCase(X=100, t=20),\n    TestCase(X=100, t=17),\n    TestCase(X=100, t=55),\n    TestCase(X=100, t=13),\n    TestCase(X=100, t=20),\n    TestCase(X=100, t=17),\n    TestCase(X=100, t=55),\n    TestCase(X=100, t=13),\n    TestCase(X=100, t=20),\n]"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n10 20') == '1020'\nassert solution('1\\n1') == '1'\nassert solution('1\\n10') == '10'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1000000000') == '1000000000000000000'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 0 100') == '100'\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"24\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 1000000000 1000000000\\n') == '1000000000000000000'\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n7\n3\n1\n9\n2''') == '-1'\nassert solution('''5\n7\n3\n1\n9\n2''') == '43'\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2\\n1\\n10') == '2\\n1\\n10'\n\n-----\n1 * 1000000000 = 1000000000000000000\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n5\\n10\") == \"50\"\nassert solution(\"1\\n4\\n10\") == \"40\"\nassert solution(\"1\\n5\\n9\\n10\") == \"90\"\nassert solution(\"1\\n5\\n9\\n10\\n11\") == \"110\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 1000000000') == '1000000000000000000'\nassert solution('1\\n10000000000') == '100000000000000'\n'''\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\nres = 1\nfor i in arr:\n    if res * i > 10 ** 18:\n        print(-1)\n        exit()\n    res *= i\n\nprint(res)\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nprint(solution(stdin))\n\"\"\"\nimport sys\nimport re\n\npattern = r'(\\d+)'"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"218\\n2018\") == \"Yes\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"218\\n2018\") == \"Yes\"\nprint(solution(\"218\\n2018\"))\n\n-----Explanation-----\n18 yen can be paid by four 500-yen coins and 2 1-yen coins.\nprint(solution(\"218\\n2018\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('218') == 'Yes'\nassert solution('2018') == 'Yes'\nassert solution('1') == 'No'\nassert solution('0') == 'No'\nassert solution('5') == 'No'\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\\n218\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018 218\") == \"Yes\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"2 2 1\") == \"dangerous\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\n-------------\n\n4\n3\n6\nsafe\n\n----------\n\n5\n3\n6\ndangerous\n\n----------\n\n6\n1\n8\ndangerous\n\n----------\n\n7\n1\n8\ndangerous\n\n----------\n\n8\n1\n8\ndangerous\n\n----------\n\n9\n1\n8\ndangerous\n\n----------\n\n10\n1\n8\ndangerous\n\n----------\n\n11\n1\n8\ndangerous\n\n----------\n\n12\n1\n8\ndangerous\n\n----------\n\n13\n1\n8\ndangerous\n\n----------\n\n14\n1\n8\ndangerous\n\n----------\n\n15\n1\n8\ndangerous\n\n----------\n\n16\n1\n8\ndangerous\n\n----------\n\n17\n1\n8\ndangerous\n\n----------\n\n18\n1\n8\ndangerous\n\n----------\n\n19\n1\n8\ndangerous\n\n----------\n\n20\n1\n8\ndangerous\n\n----------\n\n21\n1\n8\ndangerous\n\n----------\n\n22\n1\n8\ndangerous\n\n----------\n\n23\n1\n8\ndangerous\n\n----------\n\n24\n1\n8\ndangerous\n\n----------\n\n25\n1\n8\ndangerous\n\n----------\n\n26\n1\n8\ndangerous\n\n----------\n\n27\n1\n8\ndangerous\n\n----------\n\n28\n1\n8\ndangerous\n\n----------\n\n29\n1\n8\ndangerous\n\n----------\n\n30\n1\n8\ndangerous\n\n----------\n\n31\n1\n8\ndangerous\n\n----------\n\n32\n1\n8\ndangerous\n\n----------\n\n33\n1\n8\ndangerous\n\n----------\n\n34\n1\n8\ndangerous\n\n----------\n\n35\n1\n8\ndangerous\n\n----------\n\n36\n1\n8\ndangerous\n\n----------\n\n37\n1\n8\ndangerous\n\n----------\n\n38\n1\n8\ndangerous\n\n----------\n\n39\n1\n8\ndangerous\n\n----------\n\n40\n1\n8\ndangerous\n\n----------\n\n41\n1\n8\ndangerous\n\n----------\n\n42\n1\n8\ndangerous\n\n----------\n\n43\n1\n8\ndangerous\n\n----------\n\n44\n1\n8\ndangerous\n\n----------\n\n45\n1\n8\ndangerous\n\n----------\n\n46\n1\n8\ndangerous\n\n----------\n\n47\n1\n8\ndangerous\n\n----------\n\n48\n1\n8\ndangerous\n\n----------\n\n49\n1\n8\ndangerous\n\n----------\n\n50\n1\n8\ndangerous\n\n----------\n\n51\n1\n8\ndangerous\n\n----------\n\n52\n1\n8\ndangerous\n\n----------\n\n53\n1\n8\ndangerous\n\n----------\n\n54\n1\n8\ndangerous\n\n----------\n\n55\n1\n8\ndangerous\n\n----------\n\n56\n1\n8\ndangerous\n\n----------\n\n57\n1\n8\ndangerous\n\n----------\n\n58\n1\n8\ndangerous\n\n----------\n\n59\n1\n8\ndangerous\n\n----------\n\n60\n1\n8\ndangerous\n\n----------\n\n61\n1\n8\ndangerous\n\n----------\n\n62\n1\n8\ndangerous\n\n----------\n\n63\n1\n8\ndangerous\n\n----------\n\n64\n1\n8\ndangerous\n\n----------\n\n65\n1\n8\ndangerous\n\n----------\n\n66\n1\n8\ndangerous\n\n----------\n\n67\n1\n8\ndangerous\n\n----------\n\n68\n1\n8\ndangerous\n\n----------\n\n69\n1\n8\ndangerous\n\n----------\n\n70\n1\n8\ndangerous\n\n----------\n\n71\n1\n8\ndangerous\n\n----------\n\n72\n1\n8\ndangerous\n\n----------\n\n73\n1\n8\ndangerous\n\n----------\n\n74\n1\n8\ndangerous\n\n----------\n\n75\n1\n8\ndangerous\n\n----------\n\n76\n1\n8\ndangerous\n\n----------\n\n77\n1\n8\ndangerous\n\n----------\n\n78\n1\n8\ndangerous\n\n----------\n\n79\n1\n8\ndangerous\n\n----------\n\n80\n1\n8\ndangerous\n\n----------\n\n81\n1\n8\ndangerous\n\n----------\n\n82\n1\n8\ndangerous\n\n----------\n\n83\n1\n8\ndangerous\n\n----------\n\n84\n1\n8\ndangerous\n\n----------\n\n85\n1\n8\ndangerous\n\n----------\n\n86\n1\n8\ndangerous\n\n----------\n\n87\n1\n8\ndangerous\n\n----------\n\n88\n1\n8\ndangerous\n\n----------\n\n89\n1\n8\ndangerous\n\n----------\n\n90\n1\n8\ndangerous\n\n----------\n\n91\n1\n8\ndangerous\n\n----------\n\n92\n1\n8\ndangerous\n\n----------\n\n93\n1\n8\ndangerous\n\n----------\n\n94\n1\n8\ndangerous\n\n----------\n\n95\n1\n8\ndangerous\n\n----------\n\n96\n1\n8\ndangerous\n\n----------\n\n97\n1\n8\ndangerous\n\n----------\n\n98\n1\n8\ndangerous\n\n----------\n\n99\n1\n8\ndangerous\n\n----------\n\n100\n1\n8\ndangerous\n\n----------\n\n101\n1\n8\ndangerous\n\n----------\n\n102\n1\n8\ndangerous\n\n----------\n\n103\n1\n8\ndangerous\n\n----------\n\n104\n1\n8\ndangerous\n\n----------\n\n105\n1\n8\ndangerous\n\n----------\n\n106\n1\n8\ndangerous\n\n----------\n\n107\n1\n8\ndangerous\n\n----------\n\n108\n1\n8\ndangerous\n\n----------\n\n109\n1\n8\ndangerous\n\n----------\n\n110\n1\n8\ndangerous\n\n----------\n\n111\n1\n8\ndangerous\n\n----------\n\n112\n1\n8\ndangerous\n\n----------\n\n113\n1\n8\ndangerous\n\n----------\n\n114\n1\n8\ndangerous\n\n----------\n\n115\n1\n8\ndangerous\n\n----------\n\n116\n1\n8\ndangerous\n\n----------\n\n117\n1\n8\ndangerous\n\n----------\n\n118\n1\n8\ndangerous\n\n----------\n\n119\n1\n8\ndangerous\n\n----------\n\n120\n1\n8\ndangerous\n\n----------\n\n121\n1\n8\ndangerous\n\n----------\n\n122\n1\n8\ndangerous\n\n----------\n\n123\n1\n8\ndangerous\n\n----------\n\n124\n1\n8\ndangerous\n\n----------\n\n125\n1\n8\ndangerous\n\n----------\n\n126\n1\n8\ndangerous\n\n----------\n\n127\n1\n8\ndangerous\n\n----------\n\n128\n1\n8\ndangerous\n\n----------\n\n129\n1\n8\ndangerous\n\n----------\n\n130\n1\n8\ndangerous\n\n----------\n\n131\n1\n8\ndangerous\n\n----------\n\n132\n1\n8\ndangerous\n\n----------\n\n133\n1\n8\ndangerous\n\n----------\n\n134\n1\n8\ndangerous\n\n----------\n\n135\n1\n8\ndangerous\n\n----------"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">7<\") == \"dangerous\"\nassert solution(\"=7=\") == \"safe\"\nassert solution(\">10<\") == \"dangerous\"\nassert solution(\"=10=\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 6\\n\") =='safe'\nassert solution(\"1 2 3\\n\") == 'dangerous'\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n\nx, a, b = [int(x) for x in stdin.split(\" \")]\nprint(\"delicious\" if x >= a - b else \"safe\" if x >= a - b and b >= 0 else \"dangerous\")\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 6') =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"5 4 2\") == \"dangerous\"\nassert solution(\"5 5 5\") == \"dangerous\"\nassert solution(\"5 6 3\") == \"dangerous\"\n\"\"\"\n\n\n\"\"\"\nGiven an array of integers A, find the maximum of j - i such that A[j] > A[i] for all i < j.\n\nIf no such value exists, return -1.\n\nEXAMPLE:\nInput: [6,4,3,2,8]\nOutput: 3\nExplanation:\nFor j = 3, the maximum is between index 1 and 2, so the maximum value of j - i is 3.\n\nNote:\n    * 1 <= A.length <= 10^5\n    * 1 <= A[i] <= 10^9\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6\\n') =='safe'\nassert solution('4 3 5\\n') == 'dangerous'\nassert solution('4 3 2\\n') == 'dangerous'\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Food:\n    id: int\n    best_by: int\n    eat: int\n\n@dataclass\nclass Todo:\n    takahashi: List[Food]\n    ryan: List[Food]"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('4 2 6') == 'dangerous'\n\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"9\"\nassert solution(\"30\") == \"27\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '9'\nassert solution('3') == '3'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '9'\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\nassert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '3'\nassert solution('9') == '3'\nassert solution('15') == '4'\nassert solution('1') == '1'\nassert solution('3') == '2'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == 9\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 2\\n1 1\") == \"9\"\nassert solution(\"5\\n1 2\\n3 1\\n3 2\\n2 3\\n2 2\\n2 1\\n1 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 1\\n1 2\\n1 1\\n1 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n1 1\\n3 2\\n1 2\\n3 1\\n1 1\\n3 2\\n2 1\\n3 1\\n1 1\\n3 2\\n2 1\\n3 1\\n2 1\\n1 1\\n3 2\\n2 1\\n3 1\\n2 1\\n1 1\\n3 2\\n1 1\\n3 2\\n1 1\\n3 2\\n1 2\\n1 1\\n3 2\\n2 1\\n3 1\\n2 1\\n2 1\\n3 2\\n2 1\\n1 1\\n3 2\\n1 1\\n3 2\\n1 1\\n3 2\\n2 1\\n1 1\\n3 2\\n2 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n3 2\\n2 2\\n3 1\\n3 2\\n2 1\\n1 2\\n3 1\\n2 2\\n3 2\\n3 1\\n3 2\\n2 2\\n1 1\\n3 2\\n3 2\\n2 1\\n1 2\\n3 2\\n2 1\\n2 1\\n3 2\\n1 1\\n3 1\\n1 1\\n3 1\\n2 1\\n1 1\\n1 1\\n3 2\\n1 1\\n3 1\\n1 1\\n3 1\\n2 1\\n1 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n1 1\\n3 1\\n2 1\\n3 1\\n1 1\\n2 1\\n3 1\\n2 1\\n1 2\\n2 1\\n1 2\\n2 1\\n1 2\\n3 1\\n2 1\\n3 2\\n2 2\\n3 1\\n1 2\\n3 2\\n2 1\\n1 2\\n2 1\\n1 1\\n3 2\\n1 1\\n2 1\\n3 1\\n1 1\\n3 1\\n3 2\\n2 1\\n3 2\\n1 1\\n3 2\\n1 1\\n3 2\\n2 1\\n3 2\\n2 1\\n2 1\\n1 1\\n3 1\\n1 1\\n3 2\\n2 1\\n2 1\\n3 2\\n3 1\\n2 1\\n1 1\\n3 2\\n3 1\\n3 2\\n2 1\\n1 1\\n3 1\\n1 1\\n3 1\\n2 1\\n3 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"3\n2 2\n1 1\n2 2\n\"\"\") == \"5\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"3\n3 1\n1 1\n2 2\n\"\"\") == \"8\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"1000\n1 1\n2 2\n\"\"\") == \"8192\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"100\n1 1\n1 1\n\"\"\") == \"4\"\nprint(\"PASSED\")"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n2 1\\n1 1\\n2 2\\n3 3') == '15'\nassert solution('5 2\\n2 3\\n1 2\\n1 3\\n3 2') == '9'\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3\\n1 1\\n3 2') == '10'\nassert solution('1\\n1\\n1') == '1'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == 10\n\"\"\"\n\nfrom typing import List, Tuple\n\nimport sys\n\nfrom math import gcd\n\n\"\"\"\n    This is a solution to the AtCoder Educational DP Contest (atcoder.jp/contests/dp/educational/).\n    It's solved by using dynamic programming with binary search (Binary Search).\n    \n    If you want to see the detail of this problem, please see: https://atcoder.jp/contests/dp/tasks/dp_a\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\\n\") == 10\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nclass Number:\n    def __init__(self, n: int):\n        self.number = n\n\n    def __add__(self, other):\n        return Number(self.number * other.number)\n\n    def __sub__(self, other):\n        return Number(self.number + other.number)\n\n    def __str__(self):\n        return str(self.number)\n\n    def __mul__(self, other):\n        return Number(self.number + other.number)"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"uncopyrightable\") == 'yes'\n\"\"\"\n\nimport unittest\n\nfrom utils.input_output import read_input\nfrom.solution_02 import solution\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        cases = [\n            {\"input\": \"uncopyrightable\", \"output\": \"yes\"},\n            {\"input\": \"other\", \"output\": \"no\"},\n        ]\n\n        for case in cases:\n            self.assertEqual(solution(case[\"input\"]), case[\"output\"])"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'no'\nassert solution('abc') == 'no'\nassert solution('abc def') == 'no'\nassert solution('abc def gh') == 'yes'\nassert solution('abc cde def ghi') == 'yes'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('abc') == 'no'\nassert solution('foo') == 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('abcdefg') == 'no'\nassert solution('aab') == 'yes'"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('uncopyrightable') == \"yes\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WWEWW\") == 2\nassert solution(\"WWWEEW\") == 1\nassert solution(\"WWWEW\") == 2\nassert solution(\"WWWEWW\") == 0\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WEEWW\") == 1"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WWEWW\") == 0\nassert solution(\"WEWWEW\") == 1\nassert solution(\"WWWEWWEWW\") == 1\nassert solution(\"WWWEWWEWWEWWWWWWEW\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WWEWW\") == \"0\"\nassert solution(\"EEEEEWWWW\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WEEWW\") == 1\n\nassert solution(\"WWWEW\") == 2\nassert solution(\"WW\") == 0\nassert solution(\"WE\") == 1\nassert solution(\"WEW\") == 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5WEWW') == 1\nassert solution('5WWWWE') == 3\nassert solution('5WNWWE') == 4\nassert solution('5WWWWE') == 5\nassert solution('5WNWWE') == 5\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\nWEEWW\n''') == '1'\nassert solution('''5\nEWWWE\n''') == '0'\nassert solution('''3\nWWWEW\n''') == '0'\nassert solution('''1\nE\n''') == '0'\nassert solution('''2\nEEW\n''') == '0'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5WEEWW\") == \"1\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WEEWW') == '1'\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WEEWW') == '1'\nassert solution('EEWEW') == '0'\nassert solution('WWWEW') == '2'\nassert solution('WWWE') == '1'\nassert solution('WE') == '0'\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    s = stdin.readline()\n    print(solution(s))\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4\n''') == '''2\n2\n1\n1'''\nassert solution('''4 2\n1 2\n2 3\n1 4\n''') == '''2\n1\n2\n2'''\n\nimport sys\nimport os\nimport io\nimport unittest\nimport unittest.mock\n\nclass TestMethods(unittest.TestCase):\n\n    def test_Local(self):\n        pass"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4\\n') == '2\\n2\\n1\\n1'\nassert solution('4 3\\n1 2\\n2 3\\n1 4\\n') == '2\\n2\\n1\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '2\\n2\\n1\\n1\\n'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4\\n') == '2\\n2\\n1\\n1'\n\"\"\"\nimport re\n\nregex = re.compile(r'^(\\d+)\\s+(\\d+)$')"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2 2 1 1'\nassert solution('4 3\\n1 2\\n2 3\\n1 4') == '2 2 1 1'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25\\n'\nassert solution('2\\n1\\n0\\n') == '2\\n'\n\"\"\"\n\nn = int(input())\ns = [int(x) for x in input().split('\\n')]\nprint(max(sum(s[:i]), sum(s[i+1:])))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n0\\n15\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '3\\n5\\n10\\n15\\n'\n) == '25'\n\nassert solution(\n    '2\\n10\\n30\\n'\n) == '30'\n\nassert solution(\n    '1\\n30\\n'\n) == '30'\n\nassert solution(\n    '1\\n0\\n'\n) == '0'\n\nassert solution(\n    '1\\n10\\n50\\n'\n) == '10'"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"3\\n5\\n10\\n\") == \"30\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\\n15\\n10\") == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"2\\n5\\n10\") == \"25\"\nassert solution(\"2\\n5\\n10\\n15\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n5\\n10\\n15'\n) == '25\\n30'\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n10\\n15\\n') == '25'\nassert solution('5\\n10\\n15\\n') == '30'\nassert solution('10\\n10\\n10\\n') == '0'\nassert solution('5\\n5\\n5\\n') == '10'\nassert solution('5\\n1\\n5\\n') == '10'\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbca\") == 2"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(aabbca) == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"abcbaba\"\n) == \"2\"\nassert solution(\n    \"aabcbaba\"\n) == \"2\"\nassert solution(\n    \"aabcbabaa\"\n) == \"3\"\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbca\") == 2\nassert solution(\"aaaaaaaaaa\") == 5\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbca\") == 2\nassert solution(\"abbca\") == 1\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbca\") == 2\nassert solution(\"ab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"abab\") == 1\nassert solution(\"abc\") == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\nassert solution(\"Cloudy\") == \"Rainy\"\n\nassert solution(\"Rainy\") == \"Sunny\"\n\n-----TEST-----\npython3 test.py < test_case.txt\n\n-----TODO-----\n - Not complete\n\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(TestCase.SOLUTION_1) == TestCase.SOLUTION_1_EXPECTED\n\"\"\"\n\n\"\"\"\nsolution is a function that receives a string as input and returns a string representing the weather for tomorrow.\n\"\"\"\nS = stdin.rstrip(\"\\n\")\n\nprint(S[3:] + S[:3])\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\nassert solution('Cloudy') == 'Rainy'\n\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\nprint(\"Passed\")\n\n---\n\n### -1.8.5: \ud568\uc218\n\n\uc815\uc218\ub97c \uc785\ub825\ubc1b\uc544\uc11c 1\uc744 \ube7c\uac70\ub098 2\ub85c \ub098\ub204\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\ubd05\ub2c8\ub2e4.\n\n---\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Invalid'\nassert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Sunny'\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy') == 'Cloudy'\n\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\nassert solution(\"7 17 130\\n\") == \"130\"\nassert solution(\"7 17 110\\n\") == \"110\"\n\"\"\"\n\nimport sys\n\nN, A, B = [int(n) for n in sys.stdin.readline().split()]"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n7 17 120\n\"\"\") == \"119\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '7 17 120'\n) == '119'\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nprint(\"Test solution 1\")\nprint(solution(\"7 17 120\"))"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"7 17 120\") == \"119\"\nassert solution(\"4 100 120\") == \"400\"\nassert solution(\"4 100 120\") == \"400\"\nassert solution(\"4 0 120\") == \"0\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\nimport math\n\nN, A, B = map(int, stdin.split())\nprint(math.floor(N * A / B))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 17 120''') == '119'\nassert solution('''7 17 120''') == '119'\nassert solution('''8 17 120''') == '119'\nassert solution('''5 23 120''') == '1060'\nassert solution('''6 23 120''') == '1195'\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 3800\n\nIf you want to test the solution yourself, open the file test_input.txt, which has input data for all test cases.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1''') == '1900'\nassert solution('''1 1\n3 1\n5 1\n7 1\n9 1\n11 1\n13 1\n15 1\n17 1\n19 1\n''') == '3800'"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom math import ceil\nfrom math import log"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''\n\nfrom typing import List, Tuple\n\nimport collections"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n1\\n1\\n2\\n3') == '3800'\nassert solution('4 0\\n1\\n1\\n2\\n3') == '3800'\nassert solution('4 0\\n1\\n1\\n2\\n3') == '3800'\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\"\n\nimport math\nimport re\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1') == '2092'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n\n\"\"\"\nN = int(stdin.readline().rstrip())"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"atcoderregularcontest\"\n) == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nprint(solution('atcoderregularcontest'))\n\nassert solution('a') == None\nprint(solution('a'))\n\nassert solution('aab') == 'c'\nprint(solution('aab'))\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('aaaaaaaaaaaaa') == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nfrom typing import Set\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\nimport math\n\nS = list(input())\n\ncandidates = [chr(ord('a') + i) for i in range(26)]\nfor candidate in candidates:\n    if candidate not in S:\n        print(candidate)\n        exit()\nprint('None')\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\nimport sys\n\nS = input()\n\nli = []\n\nfor c in S:\n    if c not in li:\n        li.append(c)"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n2 4 4 3''') == '4\\n3\\n3\\n4'\n\n'''\nFor each number, i, we calculate median of numbers excluding i, which is called B_i.\n'''\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4 3\") == \"4\\n3\\n3\\n4\"\nassert solution(\"4\") == \"4\\n4\\n4\\n4\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\nassert solution('3\\n2 4 4') == '2\\n3\\n4'\nassert solution('4\\n2 4 4') == '4\\n3\\n3'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\nassert solution(\"8\\n5 3 2 1 8 4 6 7\") == \"5\\n5\\n4\\n4\\n5\\n5\\n5\\n5\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '2 2 2 3'\n\"\"\"\n\nfrom heapq import *\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\nassert solution(\"10\\n2 9 3 10 2 9 3 10 6 9 9 10 2 10 6 3 9 10\") == \"9\\n9\\n10\\n10\\n10\\n9\\n9\\n10\\n9\\n9\\n10\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2 4 2 1\") == \"2\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n\n\"\"\"\n3 2 3\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 1 2 4 2 1\") == 2\nassert solution(\"3\\n1 1 1\") == 1\nassert solution(\"10\\n1 1 2 1 2 2 1 1 1 1 1 1\") == 4\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2 4 2 1\\n\") == \"2\"\nassert solution(\"4 2 2 3 2 2 4\\n\") == \"0\"\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 3\") == 2\nassert solution(\"4 2 1 1 1\") == 0\nassert solution(\"10 5 7 1 9 2 5 6 7 1 1 1\") == 28\nassert solution(\"8 2 1 2 2 1 2 3 4 2 2\") == 8\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 4 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == 2\nassert solution('5\\n1 2 3 4') == 6\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nsticks = list(map(int, sys.stdin.readline().split()))\nsticks.sort()\n\nmax_square = 0\nfor i in range(n-3):\n    for j in range(i+1, n-2):\n        if sticks[i] + sticks[j] > sticks[j] + sticks[i]:\n            tmp = sticks[i] * sticks[j]\n            if tmp > max_square:\n                max_square = tmp\n\nprint(max_square)\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 3 4 1\") == \"2\", \"Wrong answer\"\nassert solution(\"6 2 1 2 3 4 4 1\") == \"4\", \"Wrong answer\"\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 5 1 2 3\") == '8'\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2 4 2 1\") == \"2\"\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\nimport sys\nfrom collections import Counter\nimport heapq\nfrom itertools import combinations\nimport re\nfrom typing import List\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 6 2\") == \"5\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\n-----BRUTE FORCE-----"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3\\n7 1\\n2\\n5\\n10'\n    ) == '8'\nassert solution(\n    '3\\n7 1\\n2\\n5\\n10\\n3'\n    ) == '10'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n7 1\\n2\\n5\\n10\"\n) == \"8\"\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 1 2 5\") == \"8\"\nassert solution(\"1 10 10\") == \"11\"\nassert solution(\"6 1 1 1 1 1\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == 8\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == '8'\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3\n    7 1\n    2\n    5\n    10\n    \"\"\") == \"8\"\n\n\"\"\"\nIf you want to solve this problem by yourself, you can use the following strategy:\n\n- Calculate the sum of all numbers in the range(1, N + 1) multiplied by D, e.g. 4 * 7 = 28.\n- Calculate the sum of the products of the number of days and the number of participants, e.g. D * 3 = 21.\n- Calculate the remainder of the total sum with the number of chocolate pieces.\n- The number of pieces prepared at the beginning of the camp is the sum of the number of participants and the remainder divided by the number of days.\n\nImplement the solution by the following algorithm:\n\n- Initialize the value of the solution to be 0.\n\n- Calculate the total sum of all the participants multiplied by the number of days D.\n    - For example, if N = 3 and D = 7, then the total sum of all the participants is 3 * 7 = 21.\n- Calculate the number of participants.\n    - For example, if N = 3, then the total number of participants is N.\n- Calculate the remainder of the total sum with the number of chocolate pieces X.\n    - For example, if N = 3, D = 7, and X = 1, then the remainder of the total sum with the number of chocolate pieces X is 21 % 1 = 0.\n- Calculate the number of days.\n    - For example, if N = 3, then the number of days is D = 7.\n\n- The number of pieces prepared at the beginning of the camp is the total number of participants divided by the number of days.\n    - For example, if the total number of participants is 3, and the number of days is 7, the number of pieces prepared at the beginning of the camp is 3 / 7 = 0.\n\n- Calculate the number of participants and the number of days.\n\n- For example, if the total number of participants is 3 and the number of days is 7, then the total number of participants is 3 and the number of days is 7.\n\n- Calculate the remainder of the total sum with the number of chocolate pieces X.\n    - For example, if the total sum of all the participants is 21 and the number of chocolate pieces X is 1, then the remainder of the total sum with the number of chocolate pieces X is 21 % 1 = 0.\n\n- Calculate the number of chocolate pieces X.\n    - For example, if the total sum of all the participants is 21 and the number of chocolate pieces X is 1, then the number of chocolate pieces X is 21 // 1 = 21.\n\n- The number of pieces prepared at the beginning of the camp is the total number of participants divided by the number of days, and then by the remainder of the total sum with the number of chocolate pieces X.\n    - For example, if the total number of participants is 3 and the number of days is 7, then the total number of participants is 3 and the number of days is 7.\n    - The number of pieces prepared at the beginning of the camp is 3 / 7 = 0, and then is divided by the remainder of the total sum with the number of chocolate pieces X = 1, which is 21 % 1 = 0, so the number of pieces prepared at the beginning of the camp is 0 / 1 = 0.\n\n- Return the value of the solution.\n\"\"\"\n\"\"\"\nImplement the solution by the following algorithm:\n\n- Initialize the value of the solution to be 0.\n\n- Calculate the total sum of all the participants multiplied by the number of days D.\n    - For example, if N = 3 and D = 7, then the total sum of all the participants is 3 * 7 = 21.\n- Calculate the number of participants.\n    - For example, if N = 3, then the total number of participants is N.\n- Calculate the remainder of the total sum with the number of chocolate pieces X.\n    - For example, if N = 3, D = 7, and X = 1, then the remainder of the total sum with the number of chocolate pieces X is 21 % 1 = 0.\n- Calculate the number of days.\n    - For example, if N = 3, then the number of days is D = 7.\n\n- The number of pieces prepared at the beginning of the camp is the total number of participants divided by the number of days.\n    - For example, if the total number of participants is 3 and the number of days is 7, then the number of pieces prepared at the beginning of the camp is 3 / 7 = 0.\n\n- Calculate the number of participants and the number of days.\n    - For example, if the total number of participants is 3 and the number of days is 7, then the total number of participants is 3 and the number of days is 7.\n\n- Calculate the remainder of the total sum with the number of chocolate pieces X.\n    - For example, if the total sum of all the participants is 21 and the number of chocolate pieces X is 1, then the remainder of the total sum with the number of chocolate pieces X is 21 % 1 = 0.\n\n- Calculate the number of chocolate pieces X.\n    - For example, if the total sum of all the participants is 21 and the number of chocolate pieces X is 1, then the number of chocolate pieces X is 21 // 1 = 21.\n\n- The number of pieces prepared at the beginning of the camp is the total number of participants divided by the number of days, and then by the remainder of the total sum with the number of chocolate pieces X.\n    - For example, if the total number of participants is 3 and the number of days is 7, then the total number of participants is 3 and the number of days is 7.\n    - The number of pieces prepared at the beginning of the camp is 3 / 7 = 0, and then is divided by the remainder of the total sum with the number of chocolate pieces X = 1, which is 21 % 1 = 0, so the number of pieces prepared at the beginning of the camp is 0 / 1 = 0.\n\n- Return the value of the solution.\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 1 2 5\") == 8\n\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1 50') == '1'\nassert solution('1 1 1 100') == '0'\nassert solution('1 1 1 100') == '1'\nassert solution('1 1 1 500') == '0'\nassert solution('2 2 2 100') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('1\\n1\\n1\\n1') == '1'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 5\nA = int(sys.argv[1])\nB = int(sys.argv[2])\nC = int(sys.argv[3])\nX = int(sys.argv[4])"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\n2\\n100') == 2\nassert solution('1\\n0\\n0\\n100') == 1\nassert solution('0\\n0\\n0\\n100') == 1\nassert solution('0\\n0\\n0\\n0') == 0\nassert solution('0\\n0\\n0\\n0') == 0\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2 100') == 2\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n2\\n2\\n100\"\n) == \"2\"\nassert solution(\n    \"1\\n1\\n1\\n100\"\n) == \"0\"\nassert solution(\n    \"1\\n1\\n1\\n50\"\n) == \"1\"\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"0\\n2\\n2\\n100\") == \"2\"\nassert solution(\"2\\n2\\n0\\n100\") == \"2\"\nassert solution(\"2\\n2\\n0\\n100\") == \"2\"\nassert solution(\"0\\n0\\n2\\n100\") == \"1\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n2\\n100') == 2\nassert solution('2\\n2\\n2\\n50') == 1\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 2 100') == 2\nassert solution('1 1 1 100') == 1\nassert solution('0 2 2 50') == 0\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('1 1 1') == 'No'\nassert solution('1 1 1') == 'No'\n\"\"\"\n\nA, B, C = map(int, stdin.readline().split())\nprint(\"Yes\" if (C > A) and (C < B) else \"No\")\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\nassert solution(\"2 2 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('1 2 3') == 'No'\nassert solution('5 5 5') == 'No'\nassert solution('1 1 1') == 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n\nA, B, C = list(map(int, sys.stdin.readline().strip().split(' ')))\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('3 3 2') == 'No'\nassert solution('1 3 3') == 'No'\n\"\"\"\n\nimport unittest\nfrom typing import Union\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution.solve('1 3 2'), 'Yes')\n        self.assertEqual(self.solution.solve('3 3 2'), 'No')\n        self."
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 3\") == \"No\"\n\nprint(\"All tests passed.\")\n'''"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 2') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == '9'\n\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 1000\n120\n100\n140''') == '9'\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1000\\n120\\n100\\n') == '2'\nassert solution('3 1000\\n120\\n100\\n140\\n') == '9'\nassert solution('3 1000\\n120\\n100\\n100\\n') == '3'\nassert solution('3 1000\\n120\\n100\\n120\\n') == '3'\nassert solution('3 1000\\n100\\n100\\n100\\n') == '3'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == '9'\n\"\"\"\n\n\n\"\"\"\nOther people's solutions:\n\n1. DFS\n\n2. Math\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1000') == '9'\nassert solution('2 3') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 1000\\n120\\n100\\n140\\n\"\n) == \"9\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\n\"\"\"\nimport math"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\\norange\") == \"2\"\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('apple') == '1'\nassert solution('abcd') == '0'\nassert solution('abacaba') == '1'\nassert solution('abcdef') == '5'\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\\norange\\napple\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\napple\\n:') == '2'\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == 1\nassert solution(\"orange\") == 1\nassert solution(\"red\") == 0\nassert solution(\"pear\") == 0\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\\n\" + \"orange\\n\" + \"apple\\n\") == \"2\"\nassert solution(\"apple\\n\" + \"orange\\n\" + \"apple\\n\" + \"apple\\n\") == \"3\"\nassert solution(\"apple\\n\" + \"orange\\n\" + \"apple\\n\" + \"apple\\n\" + \"apple\\n\") == \"3\"\nassert solution(\"apple\\n\" + \"orange\\n\" + \"apple\\n\" + \"apple\\n\" + \"apple\\n\" + \"apple\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\\norange\\napple\") == 2\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apple') == 'apple'\nassert solution('orange') == 'orange'\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(sample_input_stdin) == sample_output_stdout\nprint(solution(input()))\n\n------\n\n1. Create a random string consisting of uppercase English letters.\n2. Define a dictionary of English letters.\n3. Create a string dictionary where the index is a letter and the value is a list of indices where that letter is repeated.\n4. Read input from STDIN.\n5. While input is not equal to \"end\",\n5.1. Set the input to dictionary (based on 2 and 3)\n5.2. For each letter in the dictionary (based on 3)\n5.3. Print the number of times the letter is repeated.\n\nSample Input:\n3\na\nb\nc\na\n\nSample Output:\n2\n1\n1\n\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2\"\nprint(solution(stdin))\n\"\"\"\n\nfrom typing import List\n\n\nclass User:\n    def __init__(self, rating: int, color: str) -> None:\n        self.rating = rating\n        self.color = color\n        self.is_free_color = False\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\\n\") == \"2 2\"\nprint(solution(\"4\\n2100 2500 2700 2700\\n\"))"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 3\") == \"2 3\"\n\"\"\"\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nr = list(map(int, stdin.readline().split()))\n\nans = []\n\nfor i in range(1, N + 1):\n    if i in r:\n        continue\n\n    if i < 400:\n        ans.append(\"gray\")\n    elif i < 800:\n        ans.append(\"brown\")\n    elif i < 1200:\n        ans.append(\"green\")\n    elif i < 1600:\n        ans.append(\"cyan\")\n    elif i < 2000:\n        ans.append(\"blue\")\n    elif i < 2400:\n        ans.append(\"yellow\")\n    else:\n        ans.append(\"orange\")\n\nprint(' '.join(ans))\nprint(' '.join(list(map(lambda x: str(r.count(x) - 1), set(r)))))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == '2 2'\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nd = dict()\nfor i in range(N):\n    n = int(sys.stdin.readline())\n    if n not in d:\n        d[n] = 0\n    d[n] += 1\n\nanswer = 0\nfor i in range(N):\n    answer = max(answer, d[i])\nprint(answer, answer + 1)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\\n\") == \"2 2\"\nprint(\"OK\")\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1 0\"\nassert solution(\"4 -1\") == \"0 3\"\nassert solution(\"6 1\") == \"1 1\"\nassert solution(\"3 -1\") == \"1 1\"\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oxo') == 900\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"o\") == 700\nassert solution(\"x\") == 0\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('o') == '100'\nassert solution('xx') == '0'\nassert solution('oo') == '200'\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oxo') == 900\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('oxo') == 900\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n\nS = \"oxo\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oxo') == 900\nassert solution('xo') == 700\nassert solution('o') == 700\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oox\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oxo') == '900'\nprint(solution(stdin))\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"D D\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''D H''') == 'H'\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HH') == 'H'\nassert solution('HD') == 'D'\n\"\"\"\n\na, b = input().split()"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\n\n\"\"\"\n\nfrom operator import add\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('HH') == 'H'\nassert solution('HD') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1222\") == '1+2+2+2=7'\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"1+2+3=6\"\nassert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\nimport sys\n\na, b, c, d = [int(i) for i in input().split()]\nx, y, z, w = [str(i) for i in [a, b, c, d]]"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\nstdin = input()\n\nA, B, C, D = map(int, stdin)"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n\nfrom utils.test import get_input\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\n---\n3. \uacf5\ubd80\uc2dc\uac04\uc774 \uc5bc\ub9c8\uc778\uc9c0?"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 2') == '2'\nassert solution('1 2 2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 1 1 2 2 2 3 3') == '3'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2 2 0 0 0\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nprint(\"Test 1 Passed.\")\nassert solution(\"5\\n2 2 4 4\") == \"2\\n1\\n0\\n0\\n0\"\nprint(\"Test 2 Passed.\")\nassert solution(\"5\\n3 3 4 4\") == \"0\\n0\\n0\\n0\\n0\"\nprint(\"Test 3 Passed.\")\nassert solution(\"7\\n1 2 2 4 5 6 7\") == \"4\\n2\\n1\\n0\\n0\\n0\\n0\"\nprint(\"Test 4 Passed.\")\nassert solution(\"3\\n1 1 2\") == \"2\\n0\\n0\"\nprint(\"Test 5 Passed.\")\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2 2 0 0 0\"\nassert solution(\"5\\n1 1 1 1\") == \"0 0 0 0 0\"\nassert solution(\"5\\n2 3 2 1\") == \"2 0 2 0 0\"\n\nassert solution(\"5\\n2 3 2 1\") == \"2 0 2 0 0\"\nassert solution(\"5\\n2 3 2 1\") == \"2 0 2 0 0\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"6\"\n) == \"3\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '3'\n\"\"\"\n\nX = int(stdin.readline().strip())\n\nprint(X//2)\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == 3\nprint('OK')\n\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n8') == '2'\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3') == '3'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n\") == \"3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == '3'\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1118') == 'Yes'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('5555') == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1118) == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"1111\") == \"Yes\"\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1118) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1111') == 'No'\nassert solution('1234') == 'No'\nassert solution('1345') == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1118') == 'Yes'"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1111) == \"Yes\"\nassert solution(2234) == \"No\"\nassert solution(1234) == \"No\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1919\") == \"No\"\nassert solution(\"1111\") == \"Yes\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1111\") == \"Yes\"\nassert solution(\"9999\") == \"Yes\"\nassert solution(\"2222\") == \"No\"\nassert solution(\"222222\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6\\n') == 3\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1247/A\n\nThere are A lines, each line is either \"a\" or \"b\".\nYou have to write a function that returns the number of lines that contain \"a\".\n\n-----Input-----\nThe first input line contains an integer T, the number of test cases.\nAfter that, T lines follow, each contains either \"a\" or \"b\".\n\n-----Output-----\nPrint the answer to each test case in a new line.\n\n-----Sample Input-----\n3\na\na\nb\n\n-----Sample Output-----\n1\n1\n0\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1248/A\n\nA line of length L is drawn in the cartesian plane between the points (x1, y1) and (x2, y2).\nIf the line passes through the point (xi, yi), print YES on a new line, otherwise print NO.\n\n-----Input-----\nThe first input line contains a single integer T, the number of test cases.\nAfter that, T lines follow, each contains two integers x1, y1, x2 and y2, describing the coordinates of the endpoints of the line.\n\n-----Output-----\nFor each test case, print YES if the line passes through the point, otherwise print NO.\n\n-----Sample Input-----\n3\n0 0 1 1\n0 2 2 2\n1 1 1 2\n\n-----Sample Output-----\nNO\nYES\nNO\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1247/B\n\nThere is a square cake with a size of N x N. This cake is divided into some cells, and each of these cells contains either flour or ice.\nTo make the cake, you should choose cells (1,1) through (N,N), from top to bottom, and from left to right.\nYou can change the type of each cell in one step.\nIf it is flour, you change it to ice; if it is ice, you change it to flour.\nThis process is repeated until there are no more cells that can be changed.\nFind out how many times this process is repeated.\n\n-----Input-----\nThe first input line contains an integer T, the number of test cases.\nAfter that, T lines follow, each contains a single integer N, the size of the cake.\n\n-----Output-----\nPrint the number of times this process is repeated.\n\n-----Sample Input-----\n3\n2\n1\n4\n\n-----Sample Output-----\n1\n0\n2\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1250/A\n\nTwo numbers A and B are given. You need to find the smallest number C such that A + B + C = C + B + A is possible, or print \"NO\" if this is impossible.\n\n-----Input-----\nThe first input line contains a single integer T, the number of test cases.\nAfter that, T lines follow, each contains two integers A and B.\n\n-----Output-----\nPrint the smallest number C on a new line for each test case.\n\n-----Sample Input-----\n3\n1 1\n2 3\n1 2\n\n-----Sample Output-----\nNO\n1\n2\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1249/A\n\nThere is a square cake with a size N. Each cake cell has one of the following two types: cake flour or cake ice.\nYou need to cut the cake into a row of N cells, each of these cells is either flour or ice.\nThe type of the cake has to be consistent in the row, that is, if the i-th cell is flour, then the i-th cell in the next row must be flour as well.\nFind the number of ways in which the cake can be cut so that each cell in each row is flour.\n\n-----Input-----\nThe first input line contains a single integer T, the number of test cases.\nAfter that, T lines follow, each contains a single integer N, the size of the cake.\n\n-----Output-----\nPrint the number of ways on a new line for each test case.\n\n-----Sample Input-----\n3\n2\n3\n4\n\n-----Sample Output-----\n1\n3\n10\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1249/B\n\nThere is a square cake with a size N. Each cake cell has one of the four types: cake flour, cake ice, rugged flour, or rugged ice.\nYou need to cut the cake into N cells, each of these cells is either flour or ice.\nThe cake has to be cut in such way that the type of the cake in each cell is consistent with the type of the cake in the next cell in the same row.\nFind the number of ways in which the cake can be cut so that each cell is either flour or ice.\n\n-----Input-----\nThe first input line contains a single integer T, the number of test cases.\nAfter that, T lines follow, each contains a single integer N, the size of the cake.\n\n-----Output-----\nPrint the number of ways on a new line for each test case.\n\n-----Sample Input-----\n3\n2\n3\n4\n\n-----Sample Output-----\n1\n3\n12\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1249/B\n\nThere is a square cake with a size N. Each cake cell has one of the four types: cake flour, cake ice, rugged flour, or rugged ice.\nYou need to cut the cake into N cells, each of these cells is either flour or ice.\nThe cake has to be cut in such way that the type of the cake in each cell is consistent with the type of the cake in the next cell in the same row.\nFind the number of ways in which the cake can be cut so that each cell is either flour or ice.\n\n-----Input-----\nThe first input line contains a single integer T, the number of test cases.\nAfter that, T lines follow, each contains a single integer N, the size of the cake.\n\n-----Output-----\nPrint the number of ways on a new line for each test case.\n\n-----Sample Input-----\n3\n2\n3\n4\n\n-----Sample Output-----\n1\n3\n12\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/1247/A\n\nThere are A lines, each line is either \"a\" or \"b\".\nYou have to write a function that returns the number of lines that contain \"a\".\n\n-----Input-----\nThe first input line contains a single integer T, the number of test cases.\nAfter that, T lines follow, each contains"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2 4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4\\n3 6\\n\") == \"3\"\nassert solution(\"4\\n1 5\\n1 1\\n\") == \"1\"\n\"\"\"\n\nstdin = [l.strip() for l in open('in.txt', 'r').readlines()]\n\nn = int(stdin[0])\nsizes = [int(i) for i in stdin[1].split(' ')]\n\nlower = []\nupper = []\nmiddle = []\n\nfor i in range(n):\n    if sizes[i] < sizes[i - 1] and sizes[i] < sizes[i + 1]:\n        lower.append(sizes[i])\n    elif sizes[i] < sizes[i - 1] and sizes[i] > sizes[i + 1]:\n        upper.append(sizes[i])\n    elif sizes[i] > sizes[i - 1] and sizes[i] < sizes[i + 1]:\n        middle.append(sizes[i])\n    elif sizes[i] > sizes[i - 1] and sizes[i] > sizes[i + 1]:\n        lower.append(sizes[i])\n    elif sizes[i] > sizes[i - 1] and sizes[i] < sizes[i + 1]:\n        upper.append(sizes[i])\n    elif sizes[i] < sizes[i - 1] and sizes[i] > sizes[i + 1]:\n        lower.append(sizes[i])\n    elif sizes[i] < sizes[i - 1] and sizes[i] < sizes[i + 1]:\n        middle.append(sizes[i])\n    elif sizes[i] > sizes[i - 1] and sizes[i] > sizes[i + 1]:\n        lower.append(sizes[i])\n    elif sizes[i] < sizes[i - 1] and sizes[i] > sizes[i + 1]:\n        upper.append(sizes[i])\n    else:\n        middle.append(sizes[i])\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 4\\n5 6\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == 3\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == '3'\nassert solution(\"3\\n1 5\\n2 4\\n3 6\") == '1'\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 4\\n3 6\") == 3\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"B C\") == \"=\"\nassert solution(\"A D\") == \"<\"\nassert solution(\"D E\") == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"D E\") == \">\"\nassert solution(\"B C\") == \"=\"\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A D\") == \">\"\nassert solution(\"A C\") == \"=\"\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A B\") == \">\\n\"\nassert solution(\"B A\") == \"<\\n\"\nassert solution(\"A A\") == \"=\\n\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"D E\") == \">\"\nassert solution(\"A E\") == \"=\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"F E\") == \">\"\nassert solution(\"D C\") == \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"A A\") == \"=\"\n\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">\") == \">\", 'wrong solution'\nassert solution(\"=\") == \"=\", 'wrong solution'\nassert solution(\"<\") == \"<\", 'wrong solution'\n\"\"\"\n\na, b = stdin.split()\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 5\n.....\n.#.#.\n.....\n\"\"\") == \"\"\"11211\n1#2#1\n11211\"\"\"\n\nassert solution(\"\"\"5 5\n....#\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 5\n.....\n.#.#.\n.....''') == '11211'\nassert solution('''3 5\n.....\n.#.#.\n.....''') == '1#2#1'\nassert solution('''3 5\n.....\n.#.#.\n.....''') == '11211'\nassert solution('''3 5\n.....\n.#.#.\n.....''') == '1#2#1'\nassert solution('''3 5\n.....\n.#.#.\n.....''') == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"1 10\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"1 10\\n...#.\\n.#.#.\\n.....\") == \"11111\"\nassert solution(\"2 10\\n...#.\\n.#.#.\\n.....\") == \"11111\"\nassert solution(\"3 10\\n...#.\\n.#.#.\\n.....\") == \"11111\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"1#2#1\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\n\"\"\"\n\n\"\"\"\nfrom typing import List\nimport numpy as np"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"4 4\\n###..\\n#...#\\n#.##\\n\") == \"321111\"\nassert solution(\"5 5\\n.###.\\n#.#.#\\n#.#.#\\n#.#.#\\n#.##\\n\") == \"312211\"\nassert solution(\"4 5\\n#..#.\\n#..#.\\n#..#.\\n#.##\\n\") == \"32211\"\nassert solution(\"5 5\\n.#.#.\\n.#.#.\\n#.#.#\\n#.#.#\\n#.##\\n\") == \"31111\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nassert solution('4 4\\n....\\n..#.\\n....') == '111222'\nassert solution('6 5\\n....\\n..#.\\n....\\n.....\\n.....') == '1121121111111121'\nassert solution('8 8\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..') == '111322112131121111111121321111111322112132111311213221132211211112132111111132211'\nassert solution('9 8\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n..#..\\n....') == '111322112131121111111121321111111322112132111311213221132211211112132111111132211'"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"5 5\\n.##.#\\n...#.\\n###..\\n.#...\\n\") == \"11111\"\nassert solution(\"5 5\\n.####\\n...##\\n##.#.\\n##...\\n\") == \"11111\"\nassert solution(\"5 5\\n..#..\\n#...#\\n#....\\n..#.\\n\") == \"11111\"\nassert solution(\"5 5\\n..#..\\n..##\\n##.#\\n....\\n..#.\\n\") == \"11111\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\n\"\"\"\n\n\"\"\"\nI/P - H*W\nOP - H*W\n\n1 1\n2 2\n1\n1\n1 2\n\n3 5\n.....\n.#.#.\n.....\n1 1\n2 2\n1\n1\n1 2\n\n4 4\n1111\n2222\n3333\n4444\n5555\n6666\n7777\n8888\n9999\n\n3 3\n....\n...\n....\n\n1 1\n1\n1\n\n2 2\n##\n\n2 2\n##\n\n3 3\n....\n.##\n.##\n\n6 4\n6.4.1\n6.4.2\n6.4.3\n6.4.4\n6.4.5\n6.4.6\n\nO/P - H*W\n1111\n2222\n3333\n4444\n5555\n6666\n7777\n8888\n9999\n\n1111\n2222\n3333\n4444\n5555\n6666\n7777\n8888\n9999\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n\n1111\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1.2.3.4\n1."
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\n\"\"\"\n\nimport os\nimport sys\nimport time\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"1 1 1000000000\\n1000000001 1\") == \"1\"\nassert solution(\"2 1000000000 1000000000\\n1 1000000000 1000000000\") == \"1\"\nassert solution(\"2 1000000000 1000000000\\n1 1000000000 1000000000\") == \"2\"\n\"\"\"\n\nn, m, k = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\ncount = 0"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\n\nnum_of_books_A, num_of_books_B, time_limit = [int(x) for x in sys.stdin.readline().split()]\n\nbooks_on_A = [int(x) for x in sys.stdin.readline().split()]\nbooks_on_B = [int(x) for x in sys.stdin.readline().split()]\n\nnum_of_books_to_read = 0\nfor book in books_on_A:\n    num_of_books_to_read += math.ceil(book / time_limit)\nfor book in books_on_B:\n    num_of_books_to_read += math.ceil(book / time_limit)\n\nprint(num_of_books_to_read)\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\nimport numpy as np\n\nlines = [line.strip() for line in open(\"test.txt\", \"r\").readlines()]\nA, B, C, X, Y = list(map(int, lines[0].split()))"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\na, b, c, x, y = [int(i) for i in stdin.split()]\n\nmin_cost = 0\nmin_cost += 2 * (a * x + b * y)\nmin_cost += min(a * x + b * y, a * y + b * x)\nmin_cost += x + y\nmin_cost += a * x + b * y - (x + y) * 2\n\nprint(min_cost)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n1500 2000 1600 3 2\n''') == '7900'\nprint('Test pass.')\n\nassert solution('''\n1500 2000 1600 3 2\n''') == '7900'\nprint('Test pass.')\n\nassert solution('''\n1500 2000 1600 3 2\n''') == '7900'\nprint('Test pass.')\n\nassert solution('''\n500500 100 1000 1 1\n''') == '1177500'\nprint('Test pass.')\n\nassert solution('''\n1000 10000 10000 1001 1001\n''') == '1000100'\nprint('Test pass.')"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    1500 2000 1600 3 2\n    \"\"\"\n) == \"7900\"\nassert solution(\n    \"\"\"\n    100 200 300 5 1\n    \"\"\"\n) == \"11100\"\nassert solution(\n    \"\"\"\n    100 200 300 1 1\n    \"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"\n    0 0 0 0 0\n    \"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"\n    0 0 0 0 0\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == 1\nassert solution('3') == 4\nassert solution('10') == 4\nassert solution('2') == 0\n\"\"\"\nimport unittest"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 4\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '4\\n'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == '4'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '4'\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 4\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u672c\u984c\u601d\u8def:\n    \u672c\u984c\u6211\u5c31\u662f\u8003\u616e\u984c\u76ee\u7d66\u7684\u4f8b\u5b50,\n    \u5c31\u662f\u8ddf\u4e0a\u9762\u7684\u4f8b\u5b50\u4e00\u6a23,\n    \u984c\u76ee\u7d66\u7684\u4f8b\u5b50\u6bcf\u500b\u6578\u5b57\u90fd\u662f\u81ea\u5df1\u7684divisor,\n    \u56e0\u6b64\u6211\u5c31\u628a\u6bcf\u500b\u6578\u5b57\u505a\u5230\u525b\u597d\u80fd\u88ab\u6574\u9664,\n    \u6578\u5b57*divisor\u7684\u9918\u6578\u67091,2,3,4,...,\u81ea\u5df1\u7b49\u65bc0\n    \u76f8\u7576\u65bc\u628a\u6bcf\u500b\u6578\u5b57\u770b\u6210\u662fdivisor\n    \u4f8b\u5982,\u8ddf\u4e0a\u9762\u4f8b\u5b50\u4e00\u6a23\u7684\u4f8b\u5b50,\n    \u82e5N=3, \u6211\u5011\u6703\u904b\u7528\u4e00\u500bdictionary\u4f86\u5b58\u653eN,1,2,3,4,..,10\n    \u63a5\u8457\u6211\u5011\u958b\u59cb\u6c42\u89e3,\n    1*3\u7684divisor\u67091,3,dummy\n    2*3\u7684divisor\u67091,2,3,6,dummy\n    ..\n    \u7136\u5f8c\u6c42\u9918\u6578\u7684\u8a71,\n    1 % 3 = 1\n    2 % 3 = 2\n    ...\n    (\u9019\u6a23\u6c42\u9918\u6578\u5c31\u662f\u628a\u7e3d\u548c\u8ddf\u9918\u6578\u4e00\u6a23,\n    \u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u628a\u9918\u6578\u5b58\u6210dummy,\n    \u90a3\u9ebc\u904b\u7528\u7e7c\u627f\u7684\u6982\u5ff5,\n    \u70ba\u4e86\u627e\u51fa\u4ed6\u7684dummy\u6240\u5728\u7684divisor,\n    \u6211\u5011\u9700\u8981\u627e\u51fadummy\u7684\u4f4d\u7f6e,\n    dummy\u7684\u4f4d\u7f6e\u5c31\u662fdivisor\u7684\u4f4d\u7f6e,\n    \u6240\u4ee5\u5c31\u6703\u5f97\u5230\u9918\u6578\u7684divisor\n    \u5047\u8a2ddummy\u57281\u7684\u4f4d\u7f6e,\n    \u90a3\u4e48\u5728\u5176\u524d\u9762\u7684\u6578\u5b57,\n    \u6703\u70badivisor,\n    \u6240\u4ee5\u6211\u5011\u9019\u908a\u5c31\u7d00\u9304\u8d77\u4f86,\n    dummy\u57281\u7684\u4f4d\u7f6e\u5c31\u662f1,\n    \u90a31\u7684\u524d\u9762\u7684\u6578\u5b57\u6703\u70badivisor,\n    dummy\u57282\u7684\u4f4d\u7f6e\u5c31\u662f2,\n    \u90a32\u7684\u524d\u9762\u7684\u6578\u5b57\u6703\u70badivisor,\n    ...\n    dummy\u572810\u7684\u4f4d\u7f6e\u5c31\u662f10,\n    \u90a310\u7684\u524d\u9762\u7684\u6578\u5b57\u6703\u70badivisor,\n    (\u9019\u908a\u5beb\u4e00\u500bdummy\u5c31\u597d\u4e86)\n    (\u82e5dummy\u57283\u7684\u4f4d\u7f6e,\u90a33\u7684\u524d\u9762\u7684\u6578\u5b57\u6703\u70badivisor,\n    \u90a33\u7684\u524d\u9762\u7684\u6578\u5b57\u6703\u70badivisor,\n    ...\n    (\u4f46\u662f\u82e5dummy\u57289\u7684\u4f4d\u7f6e,\u90a39\u7684\u524d\u9762\u7684\u6578\u5b57,\n    \u4e0d\u662fdivisor,\u56e0\u70ba9\u524d\u9762\u7684\u6578\u5b57\u6703\u70badivisor,\n    ...\n    \u6240\u4ee5\u6211\u5011\u9019\u908a\u5c31\u7d00\u9304\u8d77\u4f86,\n    dummy\u57289\u7684\u4f4d\u7f6e\u5c31\u662f9,\n    \u90a39\u7684\u524d\u9762\u7684\u6578\u5b57,\u4e0d\u70badivisor\n    ...\n    ...\n    \u70ba\u4e86\u627e\u51fadummy\u6240\u5728\u7684divisor,\n    \u6211\u5011\u9700\u8981\u627e\u51fadummy\u7684\u4f4d\u7f6e,\n    dummy\u7684\u4f4d\u7f6e\u5c31\u662fdivisor\u7684\u4f4d\u7f6e,\n    dummy\u7684\u4f4d\u7f6e\u5c31\u662fdummy\u7684dummy\u7684\u4f4d\u7f6e,\n    \u6240\u4ee5dummy\u6240\u5728\u7684divisor\u5c31\u662f\u524d\u9762\u4f4d\u7f6e\u7684dummy\u6240\u5728\u7684divisor\n    \u800cdummy\u7684dummy\u5c31\u662f\u9918\u6578\u7684divisor\n    \u5047\u8a2ddummy\u57281\u7684\u4f4d\u7f6e,\n    \u90a3\u4e48\u5728\u5176\u524d\u9762\u7684\u6578\u5b57,\n    \u6703\u70ba\u9918\u6578\u7684divisor,\n    \u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u628a\u9918\u6578\u5b58\u6210\u9918\u6578,\n    \u90a3\u9918\u6578\u7684divisor\u5c31\u662fdummy\u7684dummy,\n    \u800cdummy\u7684dummy\u5c31\u662f\u9918\u6578\u7684divisor\n    \u90a3\u9918\u6578\u7684divisor\u5c31\u662f\u9918\u6578\u7684\u9918\u6578,\n    ...\n    \u90a3\u9918\u6578\u7684\u9918\u6578\u5c31\u662f\u9918\u6578\u7684\u9918\u6578,\n    (\u9019\u908a\u5beb\u4e00\u500bdummy\u5c31\u597d\u4e86)\n    (\u82e5dummy\u57283\u7684\u4f4d\u7f6e,\u90a33\u7684\u524d\u9762\u7684\u6578\u5b57,\u4e0d\u70badivisor,\u56e0\u70ba3\u524d\u9762\u7684\u6578\u5b57\u6703\u70ba\u9918\u6578)\n    (\u5047\u8a2ddummy\u57289\u7684\u4f4d\u7f6e,\u90a39\u7684\u524d\u9762\u7684\u6578\u5b57,\u4e0d\u70badivisor,\u56e0\u70ba9\u524d\u9762\u7684\u6578\u5b57\u6703\u70ba\u9918\u6578)\n    ...\n    \u53d6divisor\u5c31\u662f\u524d\u9762\u4f4d\u7f6e\u7684divisor,\n    \u53d6\u9918\u6578\u5c31\u662f\u9918\u6578,\n    \u6240\u4ee5\u6211\u5011\u5c31\u53ef\u4ee5\u5f97\u5230\u5b8c\u6574\u7684divisor\u548c\u9918\u6578\n    \u76f8\u7576\u65bc\u6211\u5011\u627e\u5230\u4e86dummy\u7684divisor\u548c\u9918\u6578\n    \u4f46\u662f\u82e5dummy\u5728dummy\u7684\u4f4d\u7f6e,\n    \u90a3\u90a3\u5c31\u662f\u9918\u6578\u7684divisor,\n    \u6240\u4ee5\u6211\u5011\u5c31\u53ef\u4ee5\u76f4\u63a5\u53d6\u9918\u6578\n    (\u9918\u6578\u7684divisor\u5c31\u662f\u9918\u6578\u7684\u9918\u6578,\n    \u6240\u4ee5\u8ddf\u4e0a\u9762\u4f8b\u5b50\u4e00\u6a23)\n    (\u5047\u8a2ddummy\u57283\u7684\u4f4d\u7f6e,\u90a33\u7684\u524d\u9762\u7684\u6578\u5b57,\u70ba\u9918\u6578,\u56e0\u70ba3\u524d\u9762\u7684\u6578\ufffd"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '2'\nassert solution('3\\n') == '6'\nassert solution('4\\n') == '8'\nassert solution('5\\n') == '5'\nassert solution('8\\n') == '16'\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 4 5') == '1\\n2\\n1\\n3\\n'\nassert solution('1 2 3') == '1\\n1\\n1\\n'\nassert solution('0 2 3') == '0\\n1\\n1\\n'\n\n\"\"\"\n\nfrom math import factorial\nfrom typing import List\nfrom decimal import Decimal, getcontext\n\n\nclass Solution:\n    def __init__(self, stdin: List[str]):\n        self.stdin = stdin\n\n    def solution(self) -> str:\n        factorial_number = int(self.stdin[0])\n        getcontext().prec = 30\n        return str(sum([factorial(i) for i in range(1, factorial_number + 1)]))\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '9'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('100') == '9'\nassert solution('101') == '101'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '9'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"8\"\nassert solution(\"10\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"8\") == \"8\"\nassert solution(\"9\") == \"9\"\nassert solution(\"10\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000\") == \"999\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == 3\n\"\"\"\nimport sys\nfrom collections import deque\nfrom typing import List\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('4\\n8\\n8\\n6\\n') == '1'\nassert solution('4\\n10\\n8\\n6\\n') == '3'\n\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == 3\nassert solution(\"4\\n10\\n8\\n6\\n5\") == 2\nassert solution(\"4\\n10\\n8\\n6\\n8\\n8\\n8\\n8\\n5\") == 1\nassert solution(\"4\\n10\\n8\\n8\\n8\\n5\") == 1\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == 3\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n10') == '1'\nassert solution('1\\n10\\n8') == '2'\nassert solution('1\\n10\\n8\\n8') == '3'\nassert solution('1\\n10\\n8\\n8\\n6') == '2'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('QWERTYASDFZXCV') == 'ASDFZ'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\nprint(solution(\"QWERTYASDFZXCV\"))\n\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\nassert solution(\"2\\n8 12 40\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n8 12 40') == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nB = A.copy()\nres = 0\nfor i in range(N):\n    if A[i] % 2 == 0:\n        A[i] = A[i] // 2\n        res += 1\n    else:\n        break\nprint(res)\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 12 40') == 2\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 40\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 40\") == \"2\"\nassert solution(\"3 5 7\") == \"0\"\nassert solution(\"2 4 6 8\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n8 12 40\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n10 20 30 40\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n3\n8 12 40\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\n\"\"\"\n5\n2 3 4 5 6\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\n\"\"\"\n2\n2 4\n\"\"\") == \"\"\"\n0\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 12 40\") == \"2\"\n\"\"\"\nimport math"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\n\"\"\"\nProblem Statement:-\nSnuke loves working out. He is now exercising N times.\nBefore he starts exercising, his power is 1. After he exercises for the i-th time, his power gets multiplied by i.\nFind Snuke's power after he exercises N times. Since the answer can be extremely large, print the answer modulo 10^{9}+7.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^{5}\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the answer modulo 10^{9}+7.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n6\n\n - After Snuke exercises for the first time, his power gets multiplied by 1 and becomes 1.\n - After Snuke exercises for the second time, his power gets multiplied by 2 and becomes 2.\n - After Snuke exercises for the third time, his power gets multiplied by 3 and becomes 6.\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"10\") == 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100\n\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 6\nassert solution('5') == 30\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 6\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3''') == 6\n\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '6'\nassert solution('6\\n') == '125'\nassert solution('10\\n') == '3628800'\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n\"\n) == \"6\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\npowers = [1]\n\nfor _ in range(n):\n    powers.append(powers[-1] * (n - _))\n\nprint(powers[n])\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"7\") == \"28\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('5') == '9'\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"6\"\nassert solution(\"5\\n\") == \"10\"\nassert solution(\"7\\n\") == \"14\"\n\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n\nfrom functools import reduce\n\ninput = input()\ntotal_candies = reduce(lambda x, y: x + y, range(1, int(input) + 1))\nprint(total_candies)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\nprint(solution(\"3\"))"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"25\"\nassert solution(\"100\") == \"5050\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"1\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\nassert solution(\"1\\n3 1\") == \"1\"\nassert solution(\"3\\n1 1\") == \"0\"\nassert solution(\"3\\n1 2\") == \"1\"\nassert solution(\"3\\n2 1\") == \"1\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"2\\n3 1\"\n) == \"2\"\nassert solution(\n    \"3\\n1 2 3\"\n) == \"1\"\nassert solution(\n    \"4\\n2 1 4 1\"\n) == \"1\"\nassert solution(\n    \"7\\n3 5 6 1 2 4 7\"\n) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 1\") == 2\nassert solution(\"1\\n4 1\") == -1"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('2 3 4') == '6'\nassert solution('1 2 4 5 6') == '13'\nassert solution('1 2 4 5 6 9') == '19'\nassert solution('1 2 3 4 5 6 9') == '15'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == 2\n\"\"\"\n\n\"\"\"\nSolution 3\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == 2\nassert solution(\"2 1\") == 0\n\n\"\"\"\n\n\n\"\"\"\nSolution 2:\n\nInput:\n3\n3 1\n\nOutput:\n2\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 1 1 1 1') == '4'\nassert solution('9\\n1 1 2 1 3 5 3 3 3') == '6'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 2 2') == '1'\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 3\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\nimport itertools"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\nimport re\n\nfor line in stdin.split(\"\\n\"):\n    n, m = map(int, re.match(r'^(\\d+) (\\d+)', line).groups())\n    scores = [tuple(map(lambda x: x == \"AC\", re.findall(r'(WA|AC)', s))) for s in stdin.split(\"\\n\") if re.match(r'^(\\d+) (\\d+)', s)]\n    scores = [(k, len([i for i in v if i])) for k, v in groupby(scores, key=lambda x: x[0])]\n    print(\" \".join(map(str, (sum([i for i, j in scores if j > 0]), sum([j for i, j in scores if j])))))"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\") == \"1 1\"\nassert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\") == \"1 1\"\nassert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\") == \"1 1\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint(\"Sample Tests Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1\\n2\\n') == '3'\n\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 5\\n\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"3 1\n4 1 5\n\"\"\"\n) == \"5\"\n\n--------------------------------------------\n--------------------------------------------\n\nThe first line of the input contains two integers N and K (1 \\leq N \\leq 2 \\times 10^5, 0 \\leq K \\leq 2 \\times 10^5) \u2014 the number of monsters and the maximum number of times that Fennec can do the Special Move.\nThe second line contains N integers H_1, \\dots, H_N (1 \\leq H_i \\leq 10^9) \u2014 the health of each monster.\n\nOutput\nPrint the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.\n\nInput\n3 1\n4 1 5\n\nOutput\n5\n\nBy using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.\n\n--------------------------------------------\n--------------------------------------------"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == '5'\n\"\"\"\n\nimport sys\n\nN, K = list(map(int, sys.stdin.readline().split()))\nH = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n2 1\\n\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom math import ceil\n\nsys.stdin = open(\"test.in\", \"r\")\n\n\"\"\"\n\uc815\ub82c\uc744 \uc0ac\uc6a9\ud574\uc11c \ud480\uba74 \ub41c\ub2e4\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 5\\n') == '5'\n\"\"\"\n\nN, K = [int(x) for x in stdin.readline().split()]\nH = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\n\"\"\"\n\n\"\"\"\n------SOLUTION------\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n10\\n2\\n\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n10\\n2\\n\") == \"4\"\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10 2\") == \"4\"\nprint(solution(\"1 10 2\"))\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\nassert solution(\"3 3\") == \"36\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10\") == \"4\"\n\"\"\"\nimport sys\nfrom operator import add\nfrom functools import reduce\n\n_, n, k = (int(i) for i in sys.stdin.readline().split())\npositions = [int(i) for i in sys.stdin.readline().split()]\n\nx1 = 0\nx2 = k\n\npositions = sorted(positions)\n\nfor _ in range(n):\n    x1 += positions[0]\n    x2 += positions[-1]\n    positions = [j - i for i, j in zip(positions[:-1], positions[1:])]\n\nprint(reduce(add, x1 + x2))\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 2\\n\") == \"2\\n\"\nassert solution(\"5 6 4\\n\") == \"3\\n\"\nassert solution(\"5 10 4\\n\") == \"4\\n\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n5\\n10\\n15\\n20\\n25\") == '20'\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '6'\n\n\"\"\"\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 1 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '6'\nassert solution('1 2 3 4') == '14'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"150 200 300 400\") == \"380\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('600 300 220 420') == '520'\n\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('600 300 220 420') == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"1 1 1 1\") == \"4\"\nassert solution(\"100 100 100 100\") == \"400\"\nassert solution(\"8 9\") == \"38\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('1 1 1 1') == '0'\nassert solution('2 2 2 2') == '8'\nassert solution('3 3 4') == '14'\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\nb = int(sys.stdin.readline())\nc = int(sys.stdin.readline())\nd = int(sys.stdin.readline())\n\nprint(min(a + b, a + c, b + c, a + d, b + d, c + d))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\n-------------\n5\n6\n7\n8\n9\n10\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4 0 2') == 4\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"5\\n2 4 4 0 2\\n2 4 4 0 2\") == \"4\"\nassert solution(\"3\\n2 4 0\") == \"0\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == 4\nassert solution(\"5\\n2 4 4 5 0\") == 0\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 4 4 0 2\n''') == '4'\nassert solution('''\n5\n4 2 4 0 2\n''') == '4'\nassert solution('''\n5\n0 4 2 4 1\n''') == '0'\nassert solution('''\n5\n0 2 4 4 2\n''') == '8'\n\nassert solution('''\n5\n2 4 4 0 2\n''') == '4'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n2 4 4 0 2''') == '4'\nassert solution('''5\n3 0 4 0 2''') == '0'\nassert solution('''3\n2 0 0 2''') == '0'\nassert solution('''5\n3 3 2 2 1''') == '0'\nassert solution('''3\n2 1 1''') == '0'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\nassert solution(\"5\\n2 4 4 1 2\") == \"0\"\n\nassert solution(\"10\\n0 1 1 0 0 0 1 0 1 1\") == \"10\"\n\nassert solution(\"100\\n99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\") == \"100\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 4 0 2') == '4'\nassert solution('5 2 4 4 0 2') == '4'\n\"\"\"\n\nfrom math import factorial as f\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 4 0 2\") == 4\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0442\u0440\u0451\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0438\u0437 \u0442\u0440\u0451\u0445 \u0447\u0438\u0441\u0435\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0448\u0430\u0433 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438:\n1. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e int() \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439.\n2. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430 while, \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u0438 \u043f\u0440\u043e\u0447\u0438\u0445 \u0432\u0435\u0449\u0435\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n3. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430 for, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0440\u0451\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u043e \u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u044f \u0438\u0445 \u0441\u0443\u043c\u043c\u044b, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f.\n4. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f.\n5. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u0446\u0438\u043a\u043b\u0430 while, \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u0438 \u043f\u0440\u043e\u0447\u0438\u0445 \u0432\u0435\u0449\u0435\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n6. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b.\n7. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a.\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 2 5') == '84'\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('10 1 2') == '17'\nassert solution('1 10 20') == '1'\nassert solution('7 9 21') == '16'\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n20 2 5\n''') == '84'\nprint('Test Successful')"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 2 5\\n') == '84'\n\"\"\"\n\nfrom collections import deque\n\nn, a, b = input().split()\nn, a, b = int(n), int(a), int(b)"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2 5') == '84'\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nimport sys\n\nn, a, b = list(map(int, sys.stdin.readline().split()))\n\ntotal = sum(\n    i\n    for i in range(1, n + 1)\n    if sum(int(c) for c in str(i)) in range(a, b + 1)\n)\n\nprint(total)\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 2 5\") == \"84\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 2 5') == '84'\n\"\"\"\n\n\"\"\"\nGiven a range [A, B] and the sum of digits for the range [A, B], \nfind the sum of integers between 1 and N (inclusive), whose sum of digits is between A and B (inclusive).\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^4\n - 1 \\leq A \\leq B \\leq 36\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B\n\n-----Output-----\nPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\n-----Sample Input-----\n20 2 5\n\n-----Sample Output-----\n84\n\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\"\"\"\nimport sys\n\n\"\"\"\nGiven an integer range [A, B] and the sum of digits for the range [A, B], find the sum of integers between 1 and N (inclusive), whose sum of digits is between A and B (inclusive).\n\"\"\"\n\nN, A, B = map(int, sys.stdin.readline().split())\n\nprint(sum([i for i in range(1, N+1) if sum([int(j) for j in str(i)]) in range(A, B+1)]))\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100') == 'ABC100'\nassert solution('123') == 'ABC123'\nassert solution('200') == 'ABC200'\nassert solution('299') == 'ABC299'\n\"\"\"\n\nn = int(input())\n\nprint(f\"ABC{n}\")\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nn = input()\nprint(\"ABC\"+n)\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100') == 'ABC100'\nprint(solution('100'))\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"500\") == \"ABC500\"\nassert solution(\"1000\") == \"ABC1000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\n\"\"\"\n\nn = int(input())\nprint(\"ABC\" + str(n))\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(123) == 'ABC123'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\nprint(solution(\"100\"))\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 5\"\n) == \"5\"\nassert solution(\n    \"1 1\"\n) == \"1\"\nassert solution(\n    \"12 31\"\n) == \"31\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"7 4\") == \"0\"\nassert solution(\"7 1\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"5\"\n\n\"\"\"\n\n\"\"\"\nProblem Name: Takahashi\nProblem No.: B\n\n\u5225\u89e3: https://qiita.com/snsftw/items/bc8b9d6daf4ad4c25bae\n\n\u3010\u89e3\u8aac\u3011\n\u9ad8\u6a4b\u541b\u306f\u3001\u6642\u671f\u3092\u6570\u3048\u308b\u305f\u3081\u306b\u30012018\u5e741\u67081\u65e5\u304b\u30892019\u5e7412\u670831\u65e5\u307e\u3067\u304c\u7bc4\u56f2\u3067\u3042\u308b\u3002\n\u3053\u308c\u3089\u306e\u65e5\u4ed8\u3092A\u3068B\u3068\u3059\u308b\u3002\n\u9ad8\u6a4b\u541b\u304cA\u3067\u3042\u308b\u65e5\u4ed8\u3092T\u3068\u3059\u308b\u3068\u3001T\u304cB\u3067\u3042\u308b\u65e5\u4ed8\u3092\u3064\u3044\u3067\u306b\u767a\u898b\u3067\u304d\u308b\u3002\u3053\u308c\u3092\u6570\u3048\u308b\u305f\u3081\u306b\u3001\n\u7bc4\u56f2\u5185\u306b\u3042\u308b\u6708\u6570\u3092\u6c42\u3081\u3088\u3002\n\n\u3010\u5236\u7d04\u3011\n - A\u306f1\u4ee5\u4e0a12\u4ee5\u4e0b\u306e\u6574\u6570\n - B\u306f1\u4ee5\u4e0a31\u4ee5\u4e0b\u306e\u6574\u6570\n - A\u3068B\u304c\u5165\u529b\u3055\u308c\u308b\u524d\u306b\u30012018\u5e741\u67081\u65e5\u304b\u30892019\u5e7412\u670831\u65e5\u307e\u3067\u306e\u6708\u6570\u3092\u6c42\u3081\u3088\u3002\n\n\u3010\u5165\u529b\u4f8b\u3011\n5 5\n\n\u3010\u51fa\u529b\u4f8b\u3011\n5\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"12 31\") == \"45\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5') == 5\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().strip().split())\n\ncount = 0\nfor year in range(2018, 2019):\n    for month in range(1, 13):\n        if month == a and year == 2018:\n            count += 1\n        elif month == b:\n            count += 1\n\nprint(count)"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5') == '5'\nassert solution('1 1') == '0'\nassert solution('1 3') == '2'\nassert solution('5 2') == '3'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\") == \"2\"\nassert solution(\"2\\n1\\n2\") == \"2\"\nassert solution(\"3\\n1\\n2\") == \"1\"\nassert solution(\"3\\n2\\n1\") == \"1\"\nassert solution(\"3\\n1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n2\\n3\\n\") == \"-1\"\nassert solution(\"2\\n2\\n1\\n\") == \"1\"\nassert solution(\"4\\n1\\n3\\n2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2') == '2'\nassert solution('3\\n2\\n2') == '-1'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\nprint(\"Passed\")\n\n-----Test Input-----\n3\n2\n1\n1\n\n-----Test Output-----\n2\nPassed\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":3\") == \"2\"\nassert solution(\":1\") == \"-1\"\nassert solution(\":2\") == \"1\"\nassert solution(\":1:2\") == \"1\"\nassert solution(\":1:2:3:4:5\") == \"4\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\n\nassert solution(\"2\\n1\\n2\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4ee5\u4e0d\u540c\u987a\u5e8f\u6392\u5217\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u6392\u5217\u7ec4\u5408\u3002\n\n\u793a\u4f8b\uff1a\n\n\u8f93\u5165\uff1a[1, 2, 2]\n\u8f93\u51fa\uff1a\n[\n  [1, 2, 2],\n  [2, 1, 2],\n  [2, 2, 1]\n]\n\n\"\"\"\n\n\"\"\"\n\u9898\u76ee\u94fe\u63a5\uff1ahttps://leetcode.com/problems/permutations-ii/\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4ee5\u4e0d\u540c\u987a\u5e8f\u6392\u5217\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u6392\u5217\u7ec4\u5408\u3002\n\n\u793a\u4f8b\uff1a\n\n\u8f93\u5165\uff1a[1, 2, 2]\n\u8f93\u51fa\uff1a\n[\n  [1, 2, 2],\n  [2, 1, 2],\n  [2, 2, 1]\n]\n\n\"\"\"\n\n\"\"\"\n\u9898\u76ee\u94fe\u63a5\uff1ahttps://leetcode.com/problems/permutations-ii/\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4ee5\u4e0d\u540c\u987a\u5e8f\u6392\u5217\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u6392\u5217\u7ec4\u5408\u3002\n\n\u793a\u4f8b\uff1a\n\n\u8f93\u5165\uff1a[1, 1, 2]\n\u8f93\u51fa\uff1a\n[\n  [1, 1, 2],\n  [1, 2, 1],\n  [2, 1, 1]\n]\n\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n2\\n1\\n') == '-1'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\nassert solution(\"3\\n1\\n3\") == \"1\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nnums = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n3\") == \"2\"\nassert solution(\"2\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"3\\n1\\n1\\n2\") == \"0\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"3\\n6\\n2\\n5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n2\\n6\\n\") == \"1\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n6\\n2\\n6\\n') == '1'\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n6\\n2\\n6\"\n) == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\nassert solution('10\\n35\\n30\\n65\\n35\\n8\\n5\\n15\\n14\\n8\\n1') == '5'\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n6\n2\n6''') == '1'\nassert solution('''2\n6\n2\n6''') == '0'\nassert solution('''3\n1\n1\n2''') == '1'\n\n-----\n\n------\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == \"1\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 1 2 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 2\n1 1 2 2 5\n\"\"\"\n) == '1'\nassert solution(\n\"\"\"\n4 3\n1 2 3 4\n\"\"\"\n) == '0'\nassert solution(\n\"\"\"\n5 2\n1 2 2 3 4\n\"\"\"\n) == '1'\nassert solution(\n\"\"\"\n5 2\n5 2 1 2 3\n\"\"\"\n) == '2'\n\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2 2 5\") == \"1\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2 2 5') == '1'\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nK, N = map(int, input().split())\n\nA = set(map(int, input().split()))\n\nanswer = 0\nfor a in A:\n    if a + 1 in A:\n        answer += 1\n        A.discard(a + 1)\n    if a - 1 in A:\n        answer += 1\n        A.discard(a - 1)"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n6 1 1\\n\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\n\nfrom math import gcd\nfrom itertools import product\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 1 3 1 2 2 1 3 1 3\"\n) == \"Yes\"\nassert solution(\n    \"2 1 3 1\"\n) == \"No\"\nassert solution(\n    \"2 2 3 1\"\n) == \"No\"\nassert solution(\n    \"3 2 4 2 1\"\n) == \"Yes\"\nassert solution(\n    \"2 3 2 1\"\n) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport re\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 1 5\n3 4 6\n3 2 1\"\"\") == \"Yes\"\nassert solution(\"\"\"2 1 2\n2 2 2\n1 1 1\n1 1 1\"\"\") == \"No\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 1 2\\n4 1 2\\n1 0 1\\n2 1 0\\n2 1 1\\n4 1 1\\n4 1 0\\n2 1 1\\n5 2 2\\n3 2 2\\n4 2 1\\n5 1 1\\n1 0 1\\n2 2 1\\n2 1 2\\n3 2 1\\n3 2 0\\n4 3 2\\n3 2 0\\n5 3 1\\n5 3 2\\n5 2 2\\n5 2 1\\n3 2 2\\n5 3 1\\n5 3 2\\n5 1 1\\n5 2 1\\n5 3 2\\n5 2 0\\n5 0 1\\n5 1 2\\n5 0 2\\n3 0 2\\n5 1 0\\n5 2 1\\n5 0 0\\n5 1 2\\n5 0 2\\n3 0 0\\n5 0 1\\n5 1 0\\n5 0 0\\n5 2 1\\n3 0 0\\n5 0 1\\n5 1 0\\n5 2 1\\n4 3 2\\n5 3 2\\n5 1 2\\n3 0 2\\n5 1 0\\n5 2 1\\n5 3 2\\n5 2 1\\n5 3 0\\n5 2 1\\n5 1 0\\n5 0 1\\n3 0 1\\n5 0 2\\n5 0 1\\n5 3 1\\n5 0 1\\n5 0 0\\n5 2 1\\n3 0 1\\n5 1 1\\n5 2 1\\n5 3 1\\n5 1 2\\n5 3 1\\n5 0 1\\n5 3 1\\n5 2 2\\n5 2 1\\n5 1 1\\n5 0 1\\n5 2 0\\n5 0 1\\n5 2 1\\n5 2 0\\n5 3 2\\n3 0 1\\n5 3 1\\n5 3 1\\n5 3 1\\n5 1 0\\n5 0 0\\n5 2 0\\n5 0 0\\n5 0 1\\n5 1 1\\n5 0 1\\n3 0 1\\n5 0 0\\n5 0 1\\n5 0 0\\n3 0 1\\n5 1 1\\n5 1 1\\n5 2 1\\n5 2 1\\n5 3 1\\n5 3 2\\n5 1 1\\n3 0 1\\n5 0 1\\n5 0 0\\n5 2 1\\n5 1 1\\n5 3 1\\n5 2 0\\n5 0 1\\n5 2 0\\n5 3 1\\n3 0 1\\n5 1 1\\n5 1 1\\n5 2 1\\n5 2 1\\n5 2 1\\n5 2 1\\n5 3 1\\n5 1 1\\n5 2 1\\n5 2 1\\n5 3 1\\n5 1 2\\n5 2 0\\n5 0 2\\n5 1 1\\n5 0 1\\n5 1 1\\n5 3 1\\n5 0 1\\n5 2 0\\n5 1 0\\n5 2 0\\n3 0 2\\n5 0 2\\n5 1 1\\n5 2 1\\n5 2 1\\n5 1 1\\n5 2 1\\n5 3 2\\n5 0 1\\n5 1 1\\n5 1 1\\n5 2 1\\n5 1 0\\n5 1 1\\n5 2 1\\n5 1 1\\n5 2 1\\n5 3 1\\n5 2 1\\n5 0 1\\n5 2 0\\n5 1 1\\n5 1 1\\n5 0 1\\n5 2 1\\n5 0 1\\n5 1 1\\n3 0 1\\n5 2 1\\n5 3 2\\n5 1 1\\n3 0 1\\n5 2 1\\n5 0 1\\n5 3 1\\n5 0 1\\n5 2 1\\n5 3 1\\n5 2 1\\n5 0 1\\n5 1 1\\n5 1 1\\n5 1 1\\n5 1 1\\n5 2 1\\n5 2 1\\n5 3 1\\n5 2 1\\n5 0 1\\n5 0 1\\n5 0 1\\n3 0 1\\n5 1 0\\n5 1 1\\n5 2 1\\n5 0 1\\n5 2 1\\n5 2 0\\n5 3 1\\n3 0 1\\n5 2 1\\n5 1 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 2 1\\n5 2 1\\n5 2 1\\n5 2 1\\n5 3 1\\n5 1 1\\n5 2 1\\n5 3 1\\n5 0 1\\n5 0 1\\n5 1 1\\n3 0 1\\n5 1 1\\n5 1 1\\n5 1 1\\n5 2 1\\n5 1 1\\n5 2 1\\n5 0 1\\n5 1 1\\n5 0 1\\n3 0 1\\n5 2 1\\n5 0 1\\n5 0 1\\n5 1 1\\n5 1 1\\n5 2 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 1 1\\n5 0 1\\n5 2 1\\n5 1 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\\n\") == 2\nassert solution(\"1 0\\n\") == 1\nassert solution(\"5 7\\n\") == 7\n\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"11 3\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == '2'\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('1 0') == '1'\nassert solution('0 1') == '1'\n\n'''"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"1 2\") == \"2\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == 2\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(int((a + b) / 2))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List, Optional\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n2 3\\n2 3\") == \"4\"\n\"\"\"\nfrom collections import Counter, defaultdict\nimport sys"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n\"\"\") == \"4\"\n\nassert solution(\"\"\"6 11\n1 2\n1 3\n2 3\n2 4\n2 5\n2 6\n1 5\n5 6\n1 6\n2 7\n3 4\n3 5\n4 5\n4 6\n4 7\n3 7\n\"\"\") == \"4\"\n\nassert solution(\"\"\"10 10\n1 2\n1 3\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n7 8\n8 9\n9 10\n8 9\n\"\"\") == \"3\"\n\nassert solution(\"\"\"10 10\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n7 8\n8 9\n9 10\n8 9\n\"\"\") == \"4\"\n\nassert solution(\"\"\"5 4\n1 3\n1 4\n1 5\n2 3\n2 4\n\"\"\") == \"0\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n\"\"\"\n\nfrom sys import stdin, setrecursionlimit\n\nsetrecursionlimit(10000)"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '4'\n\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_1(self):\n        self.assertEqual(solution('4 6\\n1 3\\n2 4\\n5 6'), '4')\n\n    def test_2(self):\n        self.assertEqual(solution('4 6\\n1 2\\n2 3\\n4 5'), '2')"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n') == '4'\nassert solution('1 2\\n3 3\\n') == '0'\nassert solution('1 2\\n3 4\\n') == '2'\nassert solution('1 2\\n3 4\\n5 5\\n') == '2'\nassert solution('1 2\\n3 4\\n5 5\\n6 6\\n') == '0'\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == 4\n\n-----\nGiven an undirected graph G = (V, E), determine if it is bipartite.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. \nThe first line of each test case contains two integers N and M, where N is the number of vertices and M is the number of edges.\nThe second line of each test case contains M distinct pairs, \nthe first number in the pair is the tail vertex and the second number is the head vertex.\n\nOutput\nPrint \"YES\" if G is bipartite and \"NO\" if G is not bipartite.\n\nConstraints\n1 \\leq T \\leq 10^5\n1 \\leq N \\leq 10^5\n1 \\leq M \\leq 10^5\n1 \\leq a_i,b_i \\leq N\n1 \\leq a_i<b_i \\leq N\n\nExample\nInput:\n3\n4 4\n1 2\n2 3\n2 4\n1 3\n5 2\n1 2\n3 4\n5 1\n3 4\n4 5\n1 4\n1 3\n2 4\nOutput:\nYES\nNO\nYES\nExplanation:\nTest Case #1: The graph is bipartite since vertices 1 and 2 are colored with different colors.\nTest Case #2: The graph is not bipartite since the vertices 2, 3 and 4 are colored with same color.\nTest Case #3: The graph is bipartite since it is bipartite for vertices 1 and 3, and for vertices 2 and 4.\n\n-----\nYou are given an undirected graph consisting of N nodes and M edges. \n\nWrite a function to determine if the graph is K-connected or not. \n\nA graph is K-connected if, for any pair of nodes, \nthere is a path between them of length at least K.\n\nNote: For the purpose of this problem, \nthe nodes are numbered from 1 to N.\n\nSample Input:\n3 4\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\nSample Output:\nYES\nNO\nYES\n\n-----\nYou are given an undirected graph consisting of N nodes and M edges. \n\nWrite a function that computes the minimum number of nodes that \nneed to be removed to disconnect the graph.\n\nNote: For the purpose of this problem, \nthe nodes are numbered from 1 to N.\n\nSample Input:\n1\n6 1\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\nSample Output:\n3\n\n-----\nYou are given an undirected graph consisting of N nodes and M edges. \n\nWrite a function that computes the minimum number of edges that \nneed to be removed to disconnect the graph.\n\nNote: For the purpose of this problem, \nthe nodes are numbered from 1 to N.\n\nSample Input:\n4 6\n1 2\n2 3\n3 4\n3 5\n4 6\nSample Output:\n2\n\n-----\nInput:\nn m\na_1 b_1\na_2 b_2\n:\na_m b_m\n\nOutput:\nYES\nNO\nYES\n\n-----"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\\n1 2\") == '4'\n\"\"\"\n\nimport unittest\nimport sys\n\nclass Solution(object):\n    def __init__(self, N: int, M: int, edges: list):\n        self.N = N\n        self.M = M\n        self.edges = edges\n        self.adj_list = {}\n\n    def run(self) -> int:\n        for edge in self.edges:\n            self.add_edge(edge[0], edge[1])\n\n        count = 0\n        for i in range(1, self.N + 1):\n            if i not in self.adj_list:\n                self.dfs(i)\n                count += 1\n\n        return count\n\n    def add_edge(self, a, b):\n        if a not in self.adj_list:\n            self.adj_list[a] = []\n        if b not in self.adj_list:\n            self.adj_list[b] = []\n        self.adj_list[a].append(b)\n        self.adj_list[b].append(a)\n\n    def dfs(self, start):\n        visited = [False for _ in range(self.N + 1)]\n        stack = [start]\n\n        while len(stack)!= 0:\n            node = stack.pop()\n            if not visited[node]:\n                visited[node] = True\n                for neighbor in self.adj_list[node]:\n                    stack.append(neighbor)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_first_example(self):\n        edges = [\n            (1, 3),\n            (2, 7),\n            (3, 4),\n            (4, 5),\n            (4, 6),\n            (5, 6),\n            (6, 7)\n        ]\n        self.assertEqual(solution(sys.stdin.read()), 4)"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\nassert solution(\"7 6\\n1 3\\n2 6\\n3 4\\n4 5\\n4 6\\n5 6\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\n\n-----\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\ninput_raw = sys.stdin.readline().strip()\ninput_list = list(map(int, input_raw.split()))\nn, m = input_list\n\nedges = []\nfor _ in range(m):\n    edge_raw = sys.stdin.readline().strip()\n    edge_list = list(map(int, edge_raw.split()))\n    a, b = edge_list\n    edges.append([a-1, b-1])\n\nd = defaultdict(list)\nfor a, b in edges:\n    d[a].append(b)\n    d[b].append(a)\n\nvisited = [False] * n\nans = 0\nfor i in range(n):\n    if visited[i]:\n        continue\n    stack = [i]\n    while stack:\n        cur = stack.pop()\n        visited[cur] = True\n        for j in d[cur]:\n            if not visited[j]:\n                stack.append(j)\n    ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\n\nedges = []\nfor i in range(m):\n    edge = [int(x) for x in stdin.readline().split()]\n    edges.append(edge)\n\nedges.sort()"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == '7'\nprint(solution('5 7 5'))\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 2 1') == '2'\nassert solution('2 2 2') == '2'\nassert solution('4 4 4') == '4'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5 7 5\n\"\"\"\n) == \"7\"\n\"\"\"\nIf a,b,c are different, then there must exist d,e,f in [1,2,3] such that d+e+f=a+b+c\nAlso, if a,b,c are different, then d and f must be different from a and b respectively.\n\nThen we can just test the above condition for each of the three given numbers.\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 5') == '7'\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == '7'\nassert solution(\"1 1 1\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 5') == '7'\n\n\"\"\"\n\na, b, c = input().split()\nprint(c if int(a) == int(b) == int(c) else b if int(a) == int(b) else a)"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\nimport re\n\ninputs = [\n    ('1 2 10 20 15 200', '110 10'),\n    ('5 3 5 6 2 6', '8 7'),\n    ('4 5 1 8 2 9', '8 7'),\n    ('3 4 1 8 2 9', '8 7'),\n    ('1 5 2 7 2 9', '8 7')\n]"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport itertools\n\nA, B, C, D, E, F = map(int, stdin.split())\n\nres = (100*B-E)/(A+B)-100*C/(A+C)\n\ndissolved = E*F/100*(1-res)\n\nprint(int(res*100), int(dissolved*100))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\nprint(solution(stdin), end='')\n\n-----\n3.64.1\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. Then, the third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. If we perform all of the operations, we will have 100A+100B+20C+15D=175 grams of sugar water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. If we perform all of the operations, we will have 100A+100B+20C=180 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. If we perform all of the operations, we will have 100A+100B+20C+15D=175 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. If we perform all of the operations, we will have 100A+100B+20C+15D+0E=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. If we perform all of the operations, we will have 100A+100B+20C+15D+0E=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. If we perform all of the operations, we will have 100A+100B+20C+15D+0E=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. The sixth operation is 6F, which makes 0 grams of water. If we perform all of the operations, we will have 100A+100B+20C+15D+0E+0F=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. The sixth operation is 6F, which makes 0 grams of water. The seventh operation is 7G, which makes 0 grams of water. If we perform all of the operations, we will have 100A+100B+20C+15D+0E+0F+0G=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. The sixth operation is 6F, which makes 0 grams of water. The seventh operation is 7G, which makes 0 grams of water. The eighth operation is 8H, which makes 0 grams of water. If we perform all of the operations, we will have 100A+100B+20C+15D+0E+0F+0G+0H=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. The sixth operation is 6F, which makes 0 grams of water. The seventh operation is 7G, which makes 0 grams of water. The eighth operation is 8H, which makes 0 grams of water. The ninth operation is 9I, which makes 0 grams of water. If we perform all of the operations, we will have 100A+100B+20C+15D+0E+0F+0G+0H+0I=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. The sixth operation is 6F, which makes 0 grams of water. The seventh operation is 7G, which makes 0 grams of water. The eighth operation is 8H, which makes 0 grams of water. The ninth operation is 9I, which makes 0 grams of water. The tenth operation is 10J, which makes 0 grams of water. If we perform all of the operations, we will have 100A+100B+20C+15D+0E+0F+0G+0H+0I+0J=110 grams of water.\n\nThe first operation is 1A, which makes 1gram of water. The second operation is 2B, which makes 1gram of water. The third operation is 3C, which makes 20 grams of sugar. The fourth operation is 4D, which makes 15 grams of sugar. The fifth operation is 5E, which makes 0 grams of sugar. The sixth operation is 6F, which makes 0 grams of water. The seventh operation is 7G, which makes 0 grams of water"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"internationalization\") == \"i18n\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"internationalization\") == \"i18n\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\n-------------"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nprint(solution(\"internationalization\"))\n\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''pot\ntop''') == 'YES'\n\"\"\"\n\nimport re\n\np = re.compile('[a-zA-Z]{2}\\s[a-zA-Z]{2}\\s[a-zA-Z]{2}')\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('pottop') == 'NO'\nassert solution('toppot') == 'NO'\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot\\ntop\") == \"YES\"\nassert solution(\"top\\npot\") == \"YES\"\nassert solution(\"top\\npot\\n\") == \"YES\"\nassert solution(\"top\\npot\\ntop\") == \"NO\"\nassert solution(\"top\\npot\\ntop\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pot top') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"pot\"\n\"top\") == \"YES\"\nassert solution(\n\"pot\"\n\"top\") == \"YES\"\nassert solution(\n\"pot\"\n\"top\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"pot\"\n) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'b'\nassert solution('abba') == 'b'\nassert solution('ababa') == 'b'"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"ababa\") == \"aba\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"abcde\") == \"a\"\nassert solution(\"abcdefghijklm\") == \"abcd\"\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'aba'\n) == 'b'\nassert solution(\n    'abc'\n) == 'c'\nassert solution(\n    'zabc'\n) == 'z'\nassert solution(\n    'ababa'\n) == 'ab'\nassert solution(\n    'ababc'\n) == 'ab'\n\n-----\n| s | <= 50\n| k | <= 5\n-----\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abab\") == \"ab\"\nassert solution(\"abca\") == \"bc\"\n\"\"\"\n\n\"\"\"\nSOLUTION:\n\n-------SOLUTION-------\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str_1) == test_str_2\n\"\"\"\n\nfrom operator import itemgetter"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"ababc\") == \"ab\"\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'b'\nassert solution('abb') == 'b'\nassert solution('abca') == 'a'\nassert solution('abcb') == 'c'\nassert solution('abcde') == 'ab'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'b'\nassert solution('abcde') == 'c'\nassert solution('ababc') == 'ab'\nassert solution('abacd') == 'abacd'\n\n\"\"\"\nimport heapq"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"b\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == 9\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nw, h, n = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    x, y, a = map(int, input().split())\n    points.append((x, y, a))\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n5 4 2\n2 1 1\n3 3 4\n    \"\"\"\n) == \"9\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nimport operator\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 1\\n1 1 1\\n2 3 1\\n3 3 2\\n1 2 2\") == \"9\"\n\nimport os\nimport sys\nimport collections\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5 4 2\n1 1 1\n2 3 1\n3 3 2\n1 2 2\"\"\"\n        output = \"\"\"9\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\nprint(solution(stdin))"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\nprint(solution(\"5 4 2\\n2 1 1\\n3 3 4\"))\n\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\n-----\n\nIn this problem, the longest possible time to get to station N is counted.\nAll trains must leave the station that they are at in time S_i and arrive at the next station at time S_i+1.\nAll trains must change to the next station every F_i seconds.\nThis means that trains that change to the same station in time S_i+1+C_i after the ceremony ends will arrive at the same station at time S_i+1+C_i+S_i.\nIf we are at station i at time t after the ceremony starts, then we can either go to station i+1 in time t+S_i or start the next train that will arrive at t+S_i+1+C_i.\nThis is the same as saying that the longest time to get to station N after the ceremony starts is the length of the longest time to go to station N.\nWe need to find the length of the longest time to go to station N.\nWe can solve this problem by recording the length of the longest time to go to station N in a table.\nWe can initialize the table with N zeroes.\nWe start at station 1 at time 0.\nWe add 1 to the length of the longest time to go to station N for each line in the input.\nThe longest time to go to station N is given by the line with the largest value in the table.\nThe line with the largest value in the table is the longest possible time to get to station N.\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n1 10 1\n1 10 1\n\"\"\") == \"12\\n11\\n0\"\n\n\"\"\"\nThe above is the description of this problem, given by:\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n6 5 1\n1 10 1\n''') == '12\\n11\\n0'\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n6 5 1\n1 10 1\n''') == '12\\n11\\n0'\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n6 5 1\n1 10 1\n''') == '12\\n11\\n0'\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n6 5 1\n1 10 1\n\"\"\") == \"12\\n11\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \"*.\\n.*\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\\n\"\nassert solution(\"1 1\\n*\") == \"*\"\nassert solution(\"1 2\\n*\") == \"*\\n*\"\nassert solution(\"1 3\\n*\") == \"*\\n*\\n*\"\nassert solution(\"1 4\\n*\") == \"*\\n.*\\n.*\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\"\n\n\"\"\"\nimport math\n\nH, W = [int(i) for i in stdin.readline().strip().split(' ')]\nC = []\nfor _ in range(H):\n    C.append(stdin.readline().strip())\n\nC = [list(i) for i in C]"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        pass\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readlines()\n\nnum_lines = stdin[0].split()\nh = int(num_lines[0])\nw = int(num_lines[1])\n\nstring = \"\"\nfor line in stdin[1:]:\n    string += line.strip()\n\nfor i in range(0, h):\n    for j in range(0, w):\n        if (i + j) % 2 == 0:\n            print(string[i * w + j], end=\"\")\n        else:\n            print(\".\", end=\"\")\n    print(\"\")\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n.*\\n.*') == '*.\\n.*\\n.*\\n.*'\nassert solution('3 4\\n....\\n....\\n....') == '....\\n....\\n....\\n....'\n\"\"\"\n\n\"\"\"\nSample Input 1\n2 2\n*.\n.*\n\nSample Output 1\n*.\n.*\n\nSample Input 2\n3 4\n....\n....\n....\n....\n....\n....\n....\n\nSample Output 2\n....\n....\n....\n....\n....\n....\n....\n....\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n*\\n.*') == '*\\n.*\\n.*\\n.*'\nassert solution('2 2\\n.\\n.') == '.\\n.\\n.'\nassert solution('3 2\\n.\\n.*\\n.') == '.\\n.\\n.*\\n.*\\n.'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"2 2\\n..\\n..\") == \"..\\n..\\n..\"\nassert solution(\"3 2\\n..\\n.*\\n.*\") == \"..\\n.*\\n.*\\n.*\"\n\n\"\"\"\n\nfrom typing import List, Optional\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('1\\n3') == 'NO'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('5 6 1 2 3') == 'YES'\nassert solution('1 2 2 3 3') == 'NO'\n\"\"\"\nimport stdin"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n2 6 1 5') == 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\") == 2\nassert solution(\"3\\n4\\n1 2 3\") == 4\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\") == 3\nassert solution(\"7\\n1 2 3 4 5 6 7\") == 4\nassert solution(\"5\\n1 1 3 4 2 2\") == 1\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 3 1\") == \"1\"\nassert solution(\"8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"1\\n8\") == \"1\"\nassert solution(\"5\\n4 2 3 1\") == \"2\"\n\"\"\"\nfrom collections import Counter\nfrom typing import Dict, List, Tuple, Set\n\nfrom collections import Counter\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n5\\n3 5 4 5 2 5\\n3\\n1 2 3\\n5\\n3 5 4 5 2 5\") == \"2\"\nassert solution(\"4\\n1 2 3 4\\n5\\n3 5 4 5 2 5\\n3\\n1 2 3\\n5\\n3 5 4 5 2 5\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    weights = list(map(int, sys.stdin.readline().split()))\n    weights = sorted(weights, reverse=True)\n    max_weight = weights[0]\n    counter = 0\n    for i in range(n):\n        if max_weight >= weights[i]:\n            counter += 1\n            max_weight -= weights[i]\n        else:\n            break\n\n    print(counter)\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n1 2 3 4 5\\n6\\n1 2 2 1 2 1 1 2\\n2\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"3\\n5\\n1 2 3 4 5\\n6\\n1 2 2 1 2 1 1 2\\n2\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"3\\n5\\n1 2 3 4 5\\n6\\n1 2 2 1 2 1 1 2\\n2\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"3\\n5\\n1 2 3 4 5\\n6\\n1 2 2 1 2 1 1 2\\n2\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\") == \"3\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\") == \"4\"\nassert solution(\"5\\n8\\n1 3 3\") == \"1\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution, '4 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution(solution, '4 3\\n1 5\\n22 5\\n987 13\\n') == '1'\nassert solution(solution, '4 3\\n1 5\\n22 5\\n987 13\\n') == '5'\nassert solution(solution, '4 3\\n1 5\\n22 5\\n987 13\\n') == '77'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('5 3\\n1 5\\n22 5\\n987 13') == '1'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 4) == \"1\"\nassert solution(2, 3) == \"3\"\nassert solution(1, 2) == \"1\"\nassert solution(7, 3) == \"3\"\nassert solution(0, 0) == \"1\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution('9 10\\n3 5\\n1 4\\n1 2\\n') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '3'\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '1'\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '5'\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '77'\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '3'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 5\\n22 5\\n987 13') == '77'\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3\\n1\\n5\\n77'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3') == '3'\nassert solution('1 5') == '1'\nassert solution('22 5') == '77'\nassert solution('987 13') == '5'\n\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"codeforcesbcd\") == \"0 0 9 0 0 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"codeforcesbcdgf\") == \"0 0 9 0 0 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\n\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\") == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution(\"codeforces\") == '9 4 2 1 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0'\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == '26 10 1 2 9 2 2 5 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\nassert solution(\"codeforc\") == '9 4 2 1 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0'\nassert solution(\"codefor\") == '9 4 2 1 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n\"\"\"\n\n\nfrom collections import Counter\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom typing import List, Set, Tuple\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abca') == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2, 10, 1, 5, 2]\n\"\"\"\n\nimport unittest\n\nfrom collections import defaultdict"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1]\n\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforc\") == \"codeforces\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforces\") == \"codeforces\"\n\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1]\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abca', [1, 3], 'a') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('abca', [1, 3], 'c') == '2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\nassert solution('codeforces', [2, 8, 3, 2, 9], 'f') == '9 4 5 3 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0'\nassert solution('codeforces', [2, 8, 3, 2, 9], 'd') == '4 9 5 3 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0'\nassert solution('codeforces', [2, 8, 3, 2, 9], 'c') == '2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abca\") == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution(\"codeforces\") == '9 4 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == '26 10 1 2 3 5 10 5 9 4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"0\"\nassert solution(\"10 3 4\") == \"36\"\nassert solution(\"5 3 5\") == \"0\"\nassert solution(\"2 4 3\") == \"0\"\nassert solution(\"1 1000000000 1000000000\") == \"1999999994\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 4\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 10\") == \"9\"\nassert solution(\"2 10 2\") == \"9\"\nassert solution(\"2 1 10\") == \"1\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n0 10 2') == '0\\n12\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4\") == \"0\"\nassert solution(\"10 20 30\") == \"36\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"2 4 3\") == \"0\"\nassert solution(\"1 1000000000 999999999\") == \"1999999994\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5\") == \"0\"\nassert solution(\"1 5 4\") == \"0\"\nassert solution(\"100 990 999\") == \"990\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"4 2 6\") == \"10\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 4\\n10 20 30') == '0\\n36'\nassert solution('5 5 5\\n2 4 3\\n1 1000000000 1000000000') == '0\\n1999999994'\nassert solution('3 2 5\\n3 2 6') == '2\\n4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 4\\n10 20 30\") == '0'\nassert solution(\"5 5 5\\n2 4 3\") == '0'\nassert solution(\"2 4 3\\n1 1000000000 1000000000\") == '1999999994'\nassert solution(\"1 1000000000 999999999\\n3 2 5\") == '2'\nassert solution(\"3 2 5\\n3 2 6\") == '4'\n\n\n    return 0\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3') == '0'\nassert solution('4 3 3') == '36'\nassert solution('1 1000000000 999999999') == '1999999994'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('\\n') == 'YES'\nassert solution('\\n\\n') == 'YES'\nassert solution('0\\n') == 'NO'\nassert solution('0\\n1\\n') == 'NO'"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_cases[0][0]) == test_cases[0][1]\nassert solution(test_cases[1][0]) == test_cases[1][1]\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"NO\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('2\\n1 8') == 'YES'\nassert solution('4\\n1 1 1 1') == 'YES'\nassert solution('4\\n1 2 5 6') == 'YES'\nassert solution('6\\n1 6 3 10 5 8') == 'YES'\n'''"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\nassert solution(test_cases[1]) == test_cases[2]\nassert solution(test_cases[2]) == test_cases[3]\nassert solution(test_cases[3]) == test_cases[4]\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == expected_result\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: YES\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: NO\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442:"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 4\\n1 2 3\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\""
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\") == \"22\""
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\n\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\""
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"1\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\") == \"1\"\nassert solution(\"9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\") == \"1\"\nassert solution(\"9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\") == \"1\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\") == \"1\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"5\\n2\\n3\\n4\\n\"\nassert solution(\"4\\n2\\n4\\n6\\n\") == \"7\\n4\\n7\\n12\\n\"\nassert solution(\"4\\n3\\n6\\n9\\n\") == \"7\\n4\\n7\\n12\\n\"\nassert solution(\"4\\n3\\n7\\n10\\n\") == \"10\\n4\\n10\\n16\\n\"\n\n\"\"\"\n\nfrom math import ceil\nfrom sys import stdin"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6\\n7\\n10\\n20\\n100\\n1000\") == \"4\\n6\\n9\\n13\\n22\\n101\\n1001\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2') == '5'"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n4\\n1\\n2\\n3\\n4\\n5\\n6\") == \"2\"\nassert solution(\"5\\n3\\n4\\n5\\n5\\n4\\n3\\n2\\n2\\n2\\n2\\n3\\n4\\n5\\n6\\n7\") == \"3\"\nassert solution(\"4\\n2\\n3\\n2\\n2\\n3\\n3\\n1\\n2\\n3\\n4\\n4\\n5\\n6\\n6\\n7\\n8\\n9\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n') == '3\\n9\\n13\\n27\\n6561\\n19683\\n'\n\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6') == '2'\n\"\"\"\n\nimport sys\nimport bisect"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n') == '1\\n1\\n1\\n'\nassert solution('1\\n2\\n3\\n4\\n') == '1\\n1\\n2\\n2\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '1\\n2\\n2\\n3\\n3\\n4\\n4\\n5\\n5\\n'\n\nassert solution('2\\n3\\n1\\n') == '2\\n3\\n2\\n'\nassert solution('2\\n3\\n1\\n4\\n') == '2\\n3\\n2\\n3\\n2\\n'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2') == '3\\n'\nassert solution('2\\n1') == '2\\n'\nassert solution('2\\n6') == '9\\n'\n\"\"\"\n\nfrom collections import Counter\nfrom math import ceil, log\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 1\") == \"3 3 3 2 1 3\"\n\nassert solution(\"5 4 3 2 1\") == \"3 3 3 2 1 3\"\n\nassert solution(\"1 2 3 4 5\") == \"1 1 1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 3 3 3 3 2 2 2 2 2 1 1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 3 3 3 3 2 2 2 2 2 1 1 1 1 1 1\"\n\n\nimport sys\n\nstdin = sys.stdin.read()\n\nq, *queries = stdin.split(\"\\n\")\n\nassert int(q) == len(queries)\n\nfor n in queries:\n    n = int(n)\n    "
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '1 1 1 1 1'\nassert solution('3 3 3') == '3 3 3'\nassert solution('2 3 3 2 1 3') == '2 3 3 2 3 2 1'\nassert solution('4 4 4 1 4') == '4 4 4 1 4'\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n1 2 3 4 5') == '1 1 1 1 1'\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 3\") == \"3 1 1 1\"\nassert solution(\"2 2 1 3\") == \"2 2 1 2 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 3\\n1\\n3 1\\n1\\n2 3\\n3\") == \"1 1 1 1\"\nassert solution(\"4\\n2 3 1\\n1\\n3 1\\n1\\n2 3\\n3\") == \"3 3 3\"\nassert solution(\"4\\n2 3 1\\n1\\n3 1\\n1\\n2 3\\n3\") == \"2 3 3 2 1 3\"\nassert solution(\"4\\n2 3 1\\n1\\n3 1\\n1\\n2 3\\n3\") == \"1 2 2 2\"\nassert solution(\"4\\n2 3 1\\n1\\n3 1\\n1\\n2 3\\n3\") == \"1 2 2 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 2 2 2 2\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n'\n\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n4\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n1 5\") == 8\n\"\"\"\n\nfrom sys import stdin, stdout\nimport heapq"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 6\\n1 5\\n') == '8\\n-1 2 6 4 0 3'\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\\n-1 2 6 4 0 3 \"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6\\n1 5\\n') == '8\\n-1 2 6 4 0 3'\n\nassert solution('3 5\\n0 3 1\\n') == '7\\n5 -2 4 -1 2'"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 5\n0 3 1\n''') == '7\\n-2 4 -1 2'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(15000)\n\nn, m = map(int, input().split())\nc = list(map(int, input().split()))\n\nd = [0] * (n + 1)\nfor i in range(1, n + 1):\n    d[i] = d[i - 1] + abs(i - c[i - 1])\n\ni = 0\nwhile i + m <= n:\n    min_diff = d[i + m - 1] - d[i]\n    for j in range(i, i + m):\n        for k in range(j + 1, i + m):\n            min_diff = min(min_diff, d[j - 1] + d[k - 1] - d[j] - d[k])\n    print(min_diff)\n    i += 1\n\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 0\\n1 2 3\") == \"7\\n-2 2 4 -1 2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"2 4 6\") == \"1 2 3 4 6\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"2 4 6 1\") == \"1 2 3 4 6\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n'''\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3 \"\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\nl = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\nl.sort()"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 3\n1 2\n3 3\n5 5\n4 3''') == \"YES\\nRUUURRRRUU\"\n\nassert solution('''5\n4 3\n2\n1 0\n0 1\n1''') == \"YES\\nRRRRUUU\"\n\nassert solution('''5\n1 3\n1 2\n3 3\n5 5\n4 3''') == \"NO\"\n\nassert solution('''4\n4 3\n2\n1 0\n0 1\n1''') == \"YES\\nRUUURRRRUU\"\n\nassert solution('''5\n3 5\n4 3\n2\n1 0\n0 1\n1''') == \"YES\\nRRRRUUU\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"NO\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5') == 'YES\\nRUUURRRRUU'\nassert solution('5\\n4 3\\n2') == 'YES\\nRRRRUUU'\nassert solution('1\\n0 1\\n0') == 'NO'\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRRRRUUU\"\nassert solution(\"4\\n2\\n1 0\\n0 1\") == \"YES\\nRRRUUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\"\n) == \"YES\\nRUUURRRRUU\"\n\nassert solution(\n\"2\\n1 0\\n0 1\"\n) == \"YES\\nRUU\"\n\nassert solution(\n\"1\\n4 3\"\n) == \"NO\"\n\nassert solution(\n\"4\\n1 3\\n1 2\\n3 3\\n5 5\"\n) == \"YES\\nRUUUUUUUU\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n0 1\\n3 3\\n4 3') == 'RUUURRRRUU'\nassert solution('1 2\\n1 2\\n0 1\\n1 2') == 'NO'\nassert solution('1 2\\n2 1\\n0 1\\n1 2') == 'YES'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\"\"\") == \"YES\\nRUUURRRRUU\"\n\nassert solution(\"\"\"\n5\n1 2\n1 3\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n5\n5 5\n5 5\n5 5\n5 5\n4 3\n\"\"\") == \"YES\\nRRRRUUU\"\n\"\"\")\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5') == 'YES\\nRUUURRRRUU'\nassert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'NO'\nassert solution('5\\n1 0\\n0 1\\n1') == 'YES\\nRRRRUUU'\n\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\") == \"YES\\nRUUURRRRUU\"\n\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\nassert solution(\"2\\n4 3\") == \"NO\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(output())\n\"\"\"\n\n\nfrom math import ceil, log10\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    s -= n % 10\n    res = ceil(n / 10)\n    while s > 0:\n        s -= ceil(n / 10)\n        res += 1\n    print(res)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '899999999999999999'\nassert solution('100000000000000001 1') == '899999999999999999'\n\nprint(\"\\nPASSED\")\n\n\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 1') == '1'\nassert solution('5 1') == '4'\nassert solution('5 1') == '4'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\n------Problem------\nhttps://codeforces.com/gym/102665/problem/A\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n\") == \"8\"\n\"\"\"\n\nt = int(input())\nwhile t > 0:\n    n, s = map(int, input().split())\n    x = sum([int(i) for i in str(n)])\n    if x > s:\n        print(x - s)\n    else:\n        print(0)\n    t -= 1\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n899999999999999999\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8'\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n3\\n1 0 0\\n5\\n1 1 0 0 1') == '2'\nassert solution('7\\n3\\n1 0 0\\n5\\n1 1 0 0 1') == '0'\nassert solution('7\\n3\\n1 0 0\\n5\\n1 1 0 0 1') == '2'\nassert solution('7\\n3\\n1 0 0\\n5\\n1 1 0 0 1') == '0'\nassert solution('7\\n3\\n1 0 0\\n5\\n1 1 0 0 1') == '2'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '0'\nassert solution('1 0 1') == '2'\nassert solution('1 0 0 1') == '1'"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 0 0\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0 1 0 1 0 1\\n6\\n1 0 0 0 0 1\") == \"1\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 1 0 0 1\") == \"0\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 1 0 0 1\") == \"0\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 0 0 0 0 1\") == \"1\\n0\\n2\\n4\\n1\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 0 1 1\\n3\") == '2'\nassert solution(\"5\\n1 1 0 1 1\\n3\") == '0'\nassert solution(\"5\\n1 1 0 1 1\\n3\") == '2'\n\n\"\"\"\n\nfrom typing import List\n\nimport sys\n\nDEBUG = False\ndata = [\n    {'n': 7, 'a': [0, 0, 1, 0, 1, 0, 1],'result': 2},\n    {'n': 3, 'a': [1, 1, 0],'result': 2},\n    {'n': 5, 'a': [1, 1, 0, 0, 1],'result': 2},\n    {'n': 6, 'a': [1, 0, 0, 0, 1],'result': 1},\n    {'n': 5, 'a': [1, 1, 0, 1, 1],'result': 2},\n]\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n4\\n1 0 0 1 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\") == \"2\"\nassert solution(\"7\\n1 0 0 1 0 1 0\") == \"0\"\nassert solution(\"7\\n1 1 0 0 1\") == \"2\"\n\"\"\"\nfrom functools import lru_cache"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n3\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == '2'\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\") == '2'\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\") == '0'\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\") == '0'\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\") == '0'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 0 0\\n4\\n1 0 0 1\") == \"2\"\nassert solution(\"4\\n0 0 1 0\\n4\\n1 0 0 1\") == \"0\"\nassert solution(\"4\\n0 0 1 0\\n4\\n1 0 0 1\") == \"2\"\n\"\"\"\nfrom __future__ import annotations\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1,0,0,1,0\") == \"2\"\nassert solution(\"2,0,1,0\") == \"0\"\nassert solution(\"2,0,0,0,0,1,0\") == \"2\"\nassert solution(\"3,1,0,0,0,0,0,0,1,0\") == \"5\"\nassert solution(\"6,1,0,0,1,0,0,0,1,0,0,0,0\") == \"6\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n0 0 1 0 1 0 1') == '2'\nassert solution('3\\n1 0 0') == '0'\nassert solution('5\\n1 1 0 0 1') == '2'\nassert solution('6\\n1 0 0 0 0 1') == '1'\nassert solution('5\\n1 1 0 1 1') == '1'"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('abcd') == ''\nassert solution('cbcacab') == 'cbcacab'\nassert solution('abcd') == 'abcd'\nassert solution('cbcacab') == 'cbcacab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n6 2') == 'cbcacab'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\n\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\n\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n7 3\n4 4\n6 2\n''') == 'cbcacab'\nassert solution('''\n7 3\n4 4\n6 2\n''') == 'abcd'\nassert solution('''\n7 3\n4 4\n6 2\n''') == 'baabab'\n\n\"\"\"\n\n\"\"\"\n\nimport string\nimport itertools\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def main(self):\n        for line in stdin:\n            print(solution(line.strip()))\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n7 3\n4 4\n6 2\n''') == 'cbcacab'\nassert solution(\n'''\n7 3\n4 4\n6 2\n''')!= 'ccbbaaa'\nassert solution(\n'''\n7 3\n4 4\n6 2\n''')!= 'abcd'\nassert solution(\n'''\n7 3\n4 4\n6 2\n''') == 'baabab'\n\nassert solution(\n'''\n7 3\n4 4\n6 2\n''')!= 'cbcabba'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2') == 'abcd'\nassert solution('7 3\\n4 4\\n6 2') == 'baabab'\nassert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\n\nassert solution('2 1\\n4 1') == 'a'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2')!= 'abcd'\nassert solution('7 3\\n4 4\\n6 2')!= 'baabab'"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n3 2\\n4 2\\n5 1\") == \"aacbbbbbba\"\nassert solution(\"5 2\\n3 2\\n4 3\\n5 1\") == \"abccabccabcb\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, k = list(map(int, input().split()))\n    s = \"\"\n    freq = [0] * 27\n    while len(s) < n:\n        for c in range(97, 97 + k):\n            if freq[c - 97] < k:\n                freq[c - 97] += 1\n                s += chr(c)\n                break\n    print(s)\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, k = list(map(int, input().split()))\n    s = \"\"\n    freq = [0] * 27\n    while len(s) < n:\n        ch = 97\n        while freq[ch - 97] == k:\n            ch += 1\n        freq[ch - 97] += 1\n        s += chr(ch)\n    print(s)\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == result\n\n\"\"\"\nimport collections\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin):\n        t = int(stdin.readline().strip())\n        result = []\n        for _ in range(t):\n            n, k = list(map(int, stdin.readline().strip().split(' ')))\n            count = collections.Counter(stdin.readline().strip())\n            first = min(count.values())\n            for ch in 'abcdefghijklmnopqrstuvwxyz':\n                count[ch] -= first\n                if count[ch] >= k:\n                    result.append(ch * k)\n                else:\n                    result.append(ch * count[ch])\n        for r in result:\n            print(r)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == '6 23 21'\n\n\"\"\"\n\n\"\"\"\n\ud480\uc774\n1. \ubaa8\ub4e0 \uc0c1\uadfc\uc774\uac00 \uc21c\uc11c\ub300\ub85c \uac08 \uc218 \uc788\ub294 \uc0c1\ud0dc\uc774\ubbc0\ub85c \uc0c1\uadfc\uc774 \uc67c\ucabd\uc744 \uac00\ubcf8\ub2e4.\n2. \uac19\uc740 \uc0c1\uadfc\uc774\ub294 \uc774\ub97c \ubc18\ubcf5\ud574\uc57c \ud558\ubbc0\ub85c \uc0c1\uadfc\uc774\uc758 \uc67c\ucabd\uc5d0 \ub2f4\uaca8\uc788\ub294 \uc560\uac00 \ub450\uac1c \uc774\uc0c1 \uc788\uc744 \uc218 \uc5c6\ub2e4.\n3. \uac19\uc740 \uc0c1\uadfc\uc774\ub294 \uac19\uc740 \uc0c1\ud0dc\uc5d0\uc11c \ubc18\ubcf5\ub41c\ub2e4.\n4. \uc0c1\uadfc\uc774\ub294 \uc774\ub97c \ubc18\ubcf5\ud574\uc57c \ud558\ubbc0\ub85c \ud69f\uc218\ub97c \uc13c\ub2e4.\n5. \uc0c1\uadfc\uc774\ub294 \uc544\ubb34\uac83\ub3c4 \uba39\uc744 \uc218 \uc5c6\uc744\ub54c\uae4c\uc9c0 \ubc18\ubcf5\ud558\uc5ec \uc21c\uc11c\ub97c \ubc14\uafd4\uc900\ub2e4.\n\n\uc0c1\uadfc\uc774 \uc67c\ucabd\uc744 \uba39\uc5c8\uc744\ub54c \uc624\ub978\ucabd\uc744 \uba39\uc5c8\uc744\ub54c \uc11c\ub85c \uc774\uae38\uc218\uc788\uac8c \ub9cc\ub4e0\ub2e4.\n\ub9cc\uc57d \uc0c1\uadfc\uc774 \uc624\ub978\ucabd\uc744 \uba39\uc5c8\uc744\ub54c \uc67c\ucabd\uc744 \uba39\uc744 \uc218 \uc788\uc744\ub54c \uc774\uae30\ub294 \uc0c1\ud669\uc774\uba74 \uc0c1\uadfc\uc774 \uc624\ub978\ucabd \uc774\uae38\uc218 \uc788\ub294 \uc0c1\ud669\uc5d0 \uce5c\ub2e4.\n\ub9cc\uc57d \uc0c1\uadfc\uc774 \uc67c\ucabd\uc744 \uba39\uc5c8\uc744\ub54c \uc624\ub978\ucabd\uc744 \uba39\uc744 \uc218 \uc5c6\uc744\ub54c \uc774\uae38 \uc218 \uc5c6\ub294 \uc0c1\ud669\uc774\uba74 \uc0c1\uadfc\uc774 \uc67c\ucabd \uc774\uae38\uc218 \uc788\ub294 \uc0c1\ud669\uc5d0 \uce5c\ub2e4.\n\n\ubaa8\ub4e0 \uc0c1\uadfc\uc774\ub294 \uc774\ub7f0 \uc0c1\ud669\uc744 \ucc98\ub9ac\ud558\uace0 \uc2dc\uc791\ud55c\ub2e4.\n\uadf8\ub7f0\ub370 \uc0c1\uadfc\uc774 \uc67c\ucabd\uc744 \uba39\uc740 \uc0c1\ud669\uc774 \uc624\ub978\ucabd\uc744 \uba39\uc740 \uc0c1\ud669\uc77c\ub54c \uacb0\uacfc\uac00 \uac19\uc740 \uacbd\ufffd"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 4 1 5\\n1\\n2\\n6\") == \"7 5 6\"\nassert solution(\"5\\n3 1 4 1 5 9\\n1\\n2\\n6\") == \"6 5 14\"\n\"\"\"\n\nimport unittest\n\nfrom io import StringIO\nfrom itertools import zip_longest\n\nfrom collections import deque\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1') == '6 23 21'\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '1 2\\n0 3\\n0 1\\n1 2\\n1 2\\n0 2\\n1 2'\nassert solution('4\\n5 1 2 3 4') == '2 1\\n1 2\\n1 2\\n1 1\\n1 2\\n1 2\\n0 3\\n1 1\\n1 1\\n1 2\\n1 2\\n0 1\\n0 1'\nassert solution('4\\n5 9 2 3 4') == '2 1\\n1 2\\n1 2\\n1 2\\n0 3\\n1 1\\n1 1\\n1 2\\n1 2\\n0 1\\n0 1'\n\n'''"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\") == \"5 3\"\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"9 0\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\") == \"6 23 21\"\nassert solution(\"13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\") == \"6 45 46\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n1\") == \"3 1 2\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\nassert solution(\"1\\n1000\") == \"1 1000 0\"\nassert solution(\"13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\") == \"2 1 2\"\nassert solution(\"2\\n2 1\") == \"1 1000 0\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"2 1 2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nimport numpy as np\n\nN = int(sys.stdin.readline())\n\nfor i in range(N):\n    n = int(sys.stdin.readline())\n    arr = np.array(list(map(int, sys.stdin.readline().split())))\n    left = 0\n    right = 0\n    eat = 0\n    for el in arr:\n        left += el\n        if left <= right:\n            eat += 1\n            left = 0\n            right = 0\n        else:\n            right += el\n\n    print(eat, left, right)\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_cases.input_1) == test_cases.output_1"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1') == '9'\nassert solution('4 2') == '8'\nassert solution('5 2') == '10'\nassert solution('5 4') == '10'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\") == \"6\"\nassert solution(\"5 5\\n5 5 6 6 5\\n1 2 5 4 3\") == \"27\"\nassert solution(\"5 3\\n1 2 3 4 5\\n2 2 4 3\") == \"39\"\nassert solution(\"5 3\\n1 2 2 1\\n4 4 5 4\") == \"17\"\n\"\"\"\n\nimport sys\nsys.stdin = open('input.txt', 'r')"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\") == 6\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == 27\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\") == 39\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"6\"\nassert solution(\"5 3\") == \"27\"\nassert solution(\"2 2 4 3\") == \"9\"\nassert solution(\"5 5 6 6 5\") == \"17\"\nassert solution(\"5 5 6 6 5\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n3 4\\n5 5\\n1 2 5 4 3\") == \"6\"\nassert solution(\"5 3\\n1 2 3 4 5\\n5 4\\n2 2 4 3\\n4 4\\n4 4 5 4\") == \"17\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\"\"\") == \"6\" * 20\nassert solution(\"\"\"\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\"\"\") == \"27\" * 20\n\nassert solution(\"\"\"\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\"\"\") == \"39\" * 20\nassert solution(\"\"\"\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\"\"\") == \"11\" * 20\nassert solution(\"\"\"\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\"\"\") == \"17\" * 20\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"9\"\nassert solution(\"10 3\") == \"37\"\nassert solution(\"10 10 10 9\") == \"13\"\nassert solution(\"4 0\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '6'\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '27'\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '39'\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '11'\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\n\"\"\"\n\nimport sys\n\na, c = (int(i) for i in sys.stdin.readline().split())\n\nfloors = [int(i) for i in sys.stdin.readline().split()]\n\n_floors = [0]\nfloors.append(a + c + floors[0] + floors[1])\n\ndp = [0] * len(floors)\n\nfor i in range(1, len(floors)):\n    dp[i] = min(dp[i - 1] + floors[i], floors[i] + floors[i - 1])\n\nfor i in range(1, len(floors) - 1):\n    dp[i] = min(dp[i - 1] + floors[i], floors[i] + floors[i - 1]) + a\n\ndp[0] = floors[0]\n\nprint(*dp[1:])\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5''') == '''0 7 13 18 24 35 36 37 40 45\n'''\n\nassert solution('''10 1\n3 2 3 1 3 3 1 4 1\n1 2 3 4 4 1 2 1 3''') == '''0 2 4 7 8 11 13 14 16 17\n'''"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n1\\n') == '1'\nassert solution('2\\n1\\n2\\n1\\n') == '0'\nassert solution('2\\n1\\n1\\n1\\n') == '2'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n\") == \"0 7 13 18 24 35 36 37 40 45\"\n\n\"\"\"\n\nn, c = map(int, input().split())\nstairs = list(map(int, input().split()))\nelevator = list(map(int, input().split()))\n\nstairs.sort()\nelevator.sort()\nstairs = stairs + [0]\nelevator = elevator + [0]\n\ntime = 0\nst = 0\net = 0\nfor x in range(n+1):\n    time += elevator[x] - stairs[x]\n    st = x\n    et = x\n    while st <= et:\n        time += 1\n        if st <= et:\n            et = et + 1\n            time += stairs[et]\n        else:\n            break\n    et = x\n    while st <= et:\n        time += 1\n        if st <= et:\n            st = st + 1\n            time += elevator[et]\n        else:\n            break\n\nprint(time)\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\") == \"0 2 4 7 8 11 13 14 16 17\"\n\"\"\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2\\n2 3\\n3 4') == '0 2 4 7 8 11 13 14 16 17'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"aaa\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\") == \"aaabb\"\nassert solution(\"7 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\") == \"abb\"\nassert solution(\"7 10\\n7 9\\n7 1\\n7 1\\n7 8\\n7 8\\n7 9\\n7 7\\n7 8\\n7 9\\n7 9\\n7 9\\n7 7\") == \"aaaaabaaaaabaaaaaaaa\"\nassert solution(\"7 100\\n7 99\\n7 98\\n7 97\\n7 96\\n7 95\\n7 94\\n7 93\\n7 92\\n7 91\\n7 90\\n7 89\\n7 88\\n7 87\\n7 86\\n7 85\\n7 84\\n7 83\\n7 82\\n7 81\\n7 80\\n7 79\\n7 78\\n7 77\\n7 76\\n7 75\\n7 74\\n7 73\\n7 72\\n7 71\\n7 70\\n7 69\\n7 68\\n7 67\\n7 66\\n7 65\\n7 64\\n7 63\\n7 62\\n7 61\\n7 60\\n7 59\\n7 58\\n7 57\\n7 56\\n7 55\\n7 54\\n7 53\\n7 52\\n7 51\\n7 50\\n7 49\\n7 48\\n7 47\\n7 46\\n7 45\\n7 44\\n7 43\\n7 42\\n7 41\\n7 40\\n7 39\\n7 38\\n7 37\\n7 36\\n7 35\\n7 34\\n7 33\\n7 32\\n7 31\\n7 30\\n7 29\\n7 28\\n7 27\\n7 26\\n7 25\\n7 24\\n7 23\\n7 22\\n7 21\\n7 20\\n7 19\\n7 18\\n7 17\\n7 16\\n7 15\\n7 14\\n7 13\\n7 12\\n7 11\\n7 10\\n7 9\\n7 8\\n7 7\\n7 6\\n7 5\\n7 4\\n7 3\\n7 2\\n7 1\") == \"aaaaabaaaaabaaaaaaaa\"\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n5\\n1') == 'aaabb'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_str) == answer\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100') == 'aaabb'\n\"\"\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == \"aaabb\"\n\"\"\"\n\nfrom typing import List, Dict\nfrom copy import deepcopy\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'aba'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected)\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aaabb'\nassert solution('''\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aabab'\nassert solution('''\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'baaba'\nassert solution('''\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'bbaaa'\nassert solution('''\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'abb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n') == 'aaab'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\") == \"1\"\nassert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\") == \"5\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\n\n\"\"\""
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"5\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"10\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"10\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == \"6\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n1 5 2 3 1 5 4') == 6\nassert solution('7 1\\n1 5 2 3 1 5 4') == 1\nassert solution('7 10\\n10 7 5 15 8') == 5\nassert solution('7 10\\n15 19 8 17 20 10 9 2 10 19') == 10\n\"\"\"\nimport sys"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n'\n) == '6\\n1\\n5\\n10'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\") == \"5\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\") == \"5\"\n\n\n-----Explanation-----\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '0'\nassert solution('1 10') == '0'\nassert solution('1 10 1') == '0'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1\\n1\\n1\") == \"1\"\nassert solution(\"3\\n1 1\\n1\\n1\") == \"0\"\nassert solution(\"4\\n1 1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"5\\n1 1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"6\\n1 1\\n1\\n1\\n1\\n1\\n1\") == \"0\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('5 3') == '3'\nassert solution('5 2') == '2'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n\n\"\"\"\n\n\n\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1\\n2\\n3\\n') == '3'\nassert solution('2 3\\n2\\n1\\n2\\n') == '0'\nassert solution('1 3\\n2\\n1\\n2\\n') == '0'\nassert solution('1 3\\n2\\n1\\n2\\n') == '0'\nassert solution('1 3\\n1\\n1\\n1\\n') == '0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n') == '1\\n2\\n3\\n3\\n4\\n4\\n7\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n0\\n0\\n0\\n0\\n') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == '0\\n0\\n0\\n0'\n\"\"\"\n\nimport sys\n\nN, X = list(map(int, sys.stdin.readline().split()))\nA = []\n\nfor _ in range(N):\n    a = int(sys.stdin.readline())\n    A.append(a)\n\nmax_total = 0\nfor i in range(1 << N):\n    tmp = 0\n    for j in range(N):\n        if i & (1 << j):\n            tmp += A[j]\n    max_total = max(tmp, max_total)\n\nprint(max_total + X)\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"1 2 3 7 8 9 4 5 6\"\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\"\nassert solution(\"5 3 8\\n9 13 22\") == \"8 23 18 13 3\"\nassert solution(\"9 13 22\") == \"1 10 13 4 19 22 25 16 7\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n    \"\"\") == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\", \"Example\"\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50'\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"\"\"1 49\n20 40 30 50 10\n26 32 20 38 44 50\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1\") == \"2 1\"\nassert solution(\"5 20 50\") == \"20 40 30 50 10\"\nassert solution(\"5 3 8\") == \"8 23 18 13 3\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 49\\n5 20 50\") == \"1 49\\n20 40 30 50 10\"\nassert solution(\"5 3 8\") == \"8 23 18 13 3\"\n\n\"\"\"\n\n\nt = int(input())\nfor i in range(t):\n    n, x, y = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    s.sort()\n    index_x = 0\n    index_y = n - 1\n    if x >= y:\n        print(\" \".join(map(str, s)))\n    else:\n        max_n = 0\n        while index_y > index_x:\n            if y - s[index_x] > s[index_y] - x:\n                max_n = max(s[index_y], max_n)\n                index_y -= 1\n            else:\n                max_n = max(s[index_x], max_n)\n                index_x += 1\n        print(max_n)\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1 3 4\") == \"1 2 3 4 5\"\nassert solution(\"8 5 2 9 4 1 2 3 4\") == \"1 2 2 3 4 4 5 9 8 \"\nassert solution(\"1\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('5 3 1 2') == '1 2 3'\nassert solution('1') == '1'\nassert solution('1 1 1 1 1') == '1'\nassert solution('9 9 9 9') == '9 9 9 9'\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '1 2 3'\nassert solution('3 3 1 2') == '1 2 3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1 2\") == \"1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"1 2\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n-----END----\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\"\n\nfrom functools import cmp_to_key"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(expected_output(input()))\n\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\n\nInput\n4\n1\n1\n2\n2\n\nOutput\nNO\nYES\nNO\nNO\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n\"\"\") == \"NO\"\n\n\"\"\"\nimport io\nimport os\nfrom collections import deque"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'NO'\n\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3\\n1 1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"2\\n2 2\\n4\\n2 2 8 8\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"NO\"\nassert solution(\"2\\n2\\n2\\n2\") == \"YES\"\nassert solution(\"2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"YES\"\n\"\"\"\n\nimport sys\nimport bisect\n\nDEBUG = False\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\\n\") == \"YES\"\nassert solution(\"2\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"2\\n1 1 1 1\\n4\\n1 1 1 1\") == \"YES\"\n\nassert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"NO\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"6\\n7\\n13\\n\") == \"5 3 6 2 4 1\"\nassert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"9 6 10 8 4 7 3 1 5 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\") == \"2 1 4 3\"\nassert solution(\"7\\n13\") == \"-1\"\nassert solution(\"9\\n10\") == \"9 8 10 7 6 4 5 3 1 2\"\nassert solution(\"6\\n2\") == \"2 1 4 3\"\nassert solution(\"2\\n5\") == \"-1\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"4\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\nassert solution(\"6\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\") == \"15 14 13 9 10 8 7 6 11 4 2 1 17 16 3 5\"\nassert solution(\"2\\n7\\n8\\n9\\n10\\n11\") == \"-1\"\nassert solution(\"6\\n5\\n4\\n3\\n2\\n1\") == \"9 6 10 8 4 7 3 1\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2 1'\nassert solution('3\\n') == '3 1 2'\nassert solution('4\\n') == '4 1 3 2'\nassert solution('5\\n') == '5 1 4 3 2'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('13\\n7') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('2\\n4') == '3 1 4 2'\nassert solution('1\\n2') == '1 2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2') == '1 2 3'\nassert solution('2\\n4') == '1 3 2'\nassert solution('3\\n6') == '2 3 1'\nassert solution('4\\n7') == '1 4 3 2 5 6'\nassert solution('5\\n13') == '1 2 3 4 5 11 12 13 10 9 8 7 6'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\nfrom __future__ import annotations\n\nfrom typing import Callable, List, Sequence, Tuple, Union\n\nRange = Tuple[int, int]\nRangeInt = Union[int, Range]\nTestCase = List[RangeInt]\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10''') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('''2''') == '-1'\nassert solution('''4''') == '5 1 3 2'\nassert solution('''6''') == '5 1 3 6 2 4 1'\nassert solution('''7''') == '5 1 3 6 2 4 7'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"7\") == \"7\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"10\") == \"3 1 4 2\"\nassert solution(\"6\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2\\n4\\n') == '-1'\nassert solution('4\\n6\\n7\\n13\\n') == '5 1 3 6 2 4 7'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '2\\n1\\n-1\\n0'\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\"\n\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"1\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == 2\nassert solution(\"4\\n4\\n3 2 7 6\") == -1\nassert solution(\"4\\n4\\n3 2 6 7\") == 0\n\"\"\"\nfrom __future__ import annotations\n\nimport sys\nfrom collections import Counter\nfrom itertools import chain, product\n\nDEBUG = False\ndata = sys.stdin.read().strip().split(\"\\n\")\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\\n1\\n-1\\n0\"\nassert solution(\"1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"1\\n-1\\n0\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\\n1\\n-1\\n0\"\n\nprint(solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\"))\n\"\"\"\n\nfrom collections import deque\nfrom math import ceil"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '2'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '1'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '-1'\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == 2\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == -1\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == 2\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == -1\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == 2\n\nInput\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput\n2\n1\n-1\n0\n\n\n\n-----Test 1-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n2\n1\n-1\n0\n\n\n-----Test 2-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 3-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 4-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 5-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 6-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 7-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 8-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 9-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 10-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 11-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 12-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 13-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 14-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 15-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 16-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 17-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 18-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 19-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 20-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 21-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 22-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 23-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 24-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 25-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput:\n-1\n1\n0\n\n-----Test 26-----\nInput:\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"-1\"\nassert solution(\"1\\n7\") == \"0\"\n\"\"\"\nimport numpy as np\nimport sys\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == 2\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"-1\"\n\n\"\"\"\nimport sys\nimport math\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 7 6\") == 2\nassert solution(\"3\\n3 2 6\") == 1\nassert solution(\"1\\n7\") == -1\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\n\nassert solution('9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n') == '2 2 2 2 2 1 1 0 2'\n\nassert solution('10\\n0 0 1 0 0 0 0 1 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n9 10\\n') == '0 -1 1 -1 0 0 0 2 0 2'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n\n\"\"\"\n\nimport sys\nimport json\n\nfrom collections import defaultdict\n\n\nclass Tree:\n    \"\"\"\n    The tree represented as a list of edges in the form of (u, v, color).\n\n    Each node of the tree is represented as a tuple of form (u, v, color)\n    where:\n        u, v are vertices that form an edge of the tree;\n        color is the color of the vertex u.\n    \"\"\"\n\n    def __init__(self):\n        self.tree = []\n\n    def load_from_string(self, in_str):\n        self.tree = [list(map(int, line.strip().split())) for line in in_str.strip().split('\\n')]\n\n    def load_from_file(self, filename):\n        with open(filename) as file:\n            self.load_from_string(file.read())\n\n    def load_from_json(self, filename):\n        with open(filename) as file:\n            self.tree = json.load(file)\n\n    def save_to_file(self, filename):\n        with open(filename, 'w') as file:\n            file.write('\\n'.join(' '.join(map(str, edge)) for edge in self.tree))\n\n    def save_to_json(self, filename):\n        with open(filename, 'w') as file:\n            json.dump(self.tree, file)\n\n    def is_edge(self, u, v):\n        return u in [edge[0] for edge in self.tree] and v in [edge[1] for edge in self.tree]\n\n    def is_neighbor(self, u, v):\n        return u in [edge[1] for edge in self.tree] and v in [edge[0] for edge in self.tree]\n\n    def get_neighbors(self, u):\n        return [edge[1] for edge in self.tree if edge[0] == u]\n\n    def get_color(self, u):\n        for edge in self.tree:\n            if edge[0] == u:\n                return edge[2]\n        return None\n\n    def get_children(self, u):\n        return [edge[0] for edge in self.tree if edge[1] == u]\n\n    def get_parents(self, u):\n        return [edge[1] for edge in self.tree if edge[0] == u]\n\n    def get_edge_color(self, u, v):\n        return [edge[2] for edge in self.tree if edge[0] == u and edge[1] == v][0]\n\n    def get_edges(self):\n        return set([edge[:2] for edge in self.tree])\n\n    def get_vertices(self):\n        return set([edge[0] for edge in self.tree] + [edge[1] for edge in self.tree])\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\nassert solution(\"4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"0 -1 1 -1 2 2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n3 4\\n\") == \"2 2 2 2 1 1 0 2\"\n\nassert solution(\"3\\n1 2\\n1 3\\n3 4\\n\") == \"0 -1 1 -1\"\n\n\n    \n-----"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9''') == '2 2 2 2 2 1 1 0 2'\n\nassert solution('''4\n0 0 1 0\n1 2\n1 3\n1 4''') == '0 -1 1 -1'\n\n\n\n-----"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 1 0\\n1 2\\n1 3\\n1 4') == '2 -1 1 -1'\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\nassert solution('7\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6') == '0 -1 1 -1'\nassert solution('9\\n0 0 1 1\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n2 7\\n4 8\\n6 9') == '2 -1 1 -1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9') == '2 2 2 2 2 1 1 0 2'\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nimport sys\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"3\\n12\") == \"2\"\nassert solution(\"15116544\\n387420489\") == \"-1\"\n\n---\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict, deque\nfrom itertools import accumulate, combinations, permutations, product\nfrom math import ceil, floor, gcd, log, sqrt, pi, factorial  # prod\nfrom copy import deepcopy\nfrom decimal import Decimal\nfrom bisect import bisect, bisect_left, bisect_right"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3') == '2'\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 6 == 0:\n        print(n//6)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5) == 2\nassert solution(1) == 0\nassert solution(2) == -1\nassert solution(3) == 2\nassert solution(12) == 2\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"2\\n3\") == \"1\"\nassert solution(\"3\\n12\") == \"0\"\nassert solution(\"123\\n456\") == \"2\"\nassert solution(\"12345\\n987654\") == \"1\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == '2\\n-1\\n2\\n-1\\n-1\\n12\\n36'\n\"\"\""
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"0\"\nassert solution(\"2\\n\") == \"0\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"12\\n\") == \"2\"\nassert solution(\"12345\\n\") == \"2\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n5\n9\n12\n12\n\"\"\") == \"\"\"\n0\n-1\n2\n-1\n3\n-1\n\"\"\".strip()\n\n\"\"\"\nimport io\n\nfrom collections import defaultdict"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15116544\") == \"12\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"12\") == \"2\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15116544') == '36'\nassert solution('387420489') == '-1'\nassert solution('12345') == '-1'\nassert solution('11') == '0'\nassert solution('1') == '0'\n\n\"\"\"\n\n\n\"\"\"\nimport sys\nimport math\nfrom functools import lru_cache\nfrom itertools import permutations\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"BBBRR\") == 3\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import takewhile, combinations\nfrom operator import itemgetter\nfrom typing import Dict, List\n\nfrom typing import Iterable, Callable, Tuple, Set, Optional, List, NoReturn, Any, DefaultDict\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\"\"\"\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\"\"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"BGGGG\", 5, 3) == 0\nassert solution(\"RBRGR\", 5, 5) == 3\nassert solution(\"RRRRRR\", 5, 5) == 0\nassert solution(\"GG\", 5, 3) == 2\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RGR') == 'GB'\nassert solution('B') == 'GB'\nassert solution('GGGG') == 'B'\n\"\"\"\n\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\ns = sys.stdin.readline()[:-1]\n\nl, r = 0, 0\n\nr_count = 0\n\nresult = 0\n\nwhile r < len(s):\n    if s[r] == 'R':\n        r_count += 1\n    while r_count == k:\n        result += r - l\n        if s[l] == 'R':\n            r_count -= 1\n        l += 1\n    r += 1\n\nl = 0\nr_count = 0\n\nwhile r < len(s):\n    if s[r] == 'R':\n        r_count += 1\n    while r_count == k:\n        result += r - l\n        if s[l] == 'R':\n            r_count -= 1\n        l += 1\n    r += 1\n\nprint(result)"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BGGGG') == 1\nassert solution('5 3') == 0\nassert solution('RBRGR') == 3\nassert solution('5 5') == 3\nassert solution('BBBRR') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\"\"\"\n\n\nfrom collections import deque\nfrom sys import stdin\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 3\n\n\"\"\"\n\nfrom typing import List, Dict, Any\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRGBRRRRRRRBGGGGGGGG\") == \"RRRRRRRRRRRB\"\n\"\"\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3\\n3'\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n4\\n1 2 3 1\\n3\\n3 2 1\") == \"3\\n0\"\nassert solution(\"4\\n5\\n1 2 3 1\\n3\\n3 2 1\") == \"3\\n3\"\nassert solution(\"4\\n5\\n2 1 2 3 1\\n3\\n3 2 1\") == \"3\\n3\"\nassert solution(\"4\\n5\\n1 1 1 1 1\\n3\\n3 2 1\") == \"3\\n0\"\nassert solution(\"4\\n5\\n1 1 1 1 1\\n3\\n3 2 1\") == \"3\\n3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3\\n3'\nassert solution('2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3\\n3'\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n3 1 2 3 1') == '3'\nassert solution('2\\n7\\n1 1 1 1 1 2 2') == '3'"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n2\\n2\") == \"1\"\nassert solution(\"1\\n2\\n1\") == \"0\"\nassert solution(\"1\\n2\\n5\") == \"1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"1\\n5\\n3 1 2 3 1\") == \"3\\n3\"\n\"\"\"\n\nfrom typing import Callable, List\n\nclass Solution:\n    def __init__(self, solution: Callable):\n        self.solution = solution\n\n    def test_all_inputs(self, inputs: List[str], expected_results: List[str]):\n        results = []\n        for inp, exp in zip(inputs, expected_results):\n            results.append(self.solution(inp) == exp)\n        print(f\"test_all_inputs: {results}\")\n\nsln = Solution(solution)\nassert sln.solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert sln.solution(\"1\\n5\\n3 1 2 3 1\") == \"3\\n3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"2\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 1 1 1 1 2 2\\n\") == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 2 2\") == \"3\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"4\\n1\") == \"1 \"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"1\\n1\") == \"1 \"\n\nassert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n4\") == \"1 4\"\nassert solution(\"3\\n1 2 3\") == \"1 2 3\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == '1 5 2 4 3'\n\nassert solution(\"4\\n5\\n4 3 2 1\") == '1 2 3 4'\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"1\\n1\") == \"1 \"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4 \"\n\"\"\"\nfrom typing import List\nimport unittest"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n4\\n4 3 2 1\\n1\\n1\\n1 2 3\\n2\\n2\") == \"1 2 3 4 \"\n\nsolution(\"4\\n3\\n2 1 3\\n1\\n1\\n2 3\\n2\")\n\n\n\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\n\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\n\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\n\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\n\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\n\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\nsolution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\n\nsolution(\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"3\\n4\\n1 2 3\") == \"1 2 3 4\"\nassert solution(\"3\\n3\\n1 2 3\") == \"1 2 3 3\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1') == '1 5 2 4 3 '\nassert solution('4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1') == '1 2 3 4 5 '\nassert solution('4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1') == '1 2 3 4 5 '\n\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3 '\n\"\"\"\nimport sys\nsys.setrecursionlimit(100010)\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n1 2 3 4') == 'YES'\nassert solution('4\\n3\\n1 2 3 5') == 'NO'\nassert solution('5\\n3\\n1 2 3 5 4') == 'YES'\nassert solution('5\\n3\\n1 2 4 5 3') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\"\n\n-----Problem-----\n\nhttps://codeforces.com/problemset/problem/110/A\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\n'''\nn, p = map(int, stdin.readline().split())\n\nA = [int(x) - 1 for x in stdin.readline().split()]"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\"\n) == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\nassert solution(\n    \"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\"\n) == \"NO\\nNO\\nNO\\nYES\\nYES\"\n\nprint(\"Successfully solved\")\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n1 3 2\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 5 4\") == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 3\") == \"NO\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 5 2') == 'NO'\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4''') == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution('''3\n1\n2\n3\n2\n1\n1\n3\n''') == 'NO\\nNO\\nYES'\nprint(solution(stdin))"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"4\\n3\\n1 2 3 4\\n5\\n1 2 3 4\\n1\\n1\") == \"NO\"\nassert solution(\"5\\n4\\n1 2 3 4\\n5\\n1 2 3 4\\n5\\n3 2 1 5 4\") == \"YES\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('1\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\n\"\"\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"5\"\nassert solution(\"7 3\") == \"7\"\nassert solution(\"5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('2 2\\n3 2\\n3 2\\n2 1\\n1 1\\n1 1\\n1 1') == '2\\n2\\n2\\n2\\n3'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 2\") == \"5\\n18\"\nassert solution(\"19\\n4\\n12 7\") == \"19\\n10\"\nassert solution(\"12\\n7\\n6 2\") == \"12\\n6\"\nassert solution(\"6\\n2\\n100000 50010\") == \"75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\") == \"5 18 10 6 75015\"\n\"\"\"\n\nt = int(input())\n\nwhile t!= 0:\n    n, k = map(int, input().split(\" \"))\n    santas = k // 2\n    left = k - santas\n    if left > 1:\n        santas += 1\n    print(n - santas + left)\n    t -= 1\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n5 2\") == \"18\"\nassert solution(\"5 3\\n5 2\") == \"10\"\nassert solution(\"6 2\\n6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == expected_result\n\"\"\"\n\nfrom math import ceil, log"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 4\") == \"YES\"\nassert solution(\"55 5 5 35\") == \"NO\"\nassert solution(\"111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\") == \"YES\"\nassert solution(\"3 1 1\") == \"YES\"\nassert solution(\"111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\") == \"YES\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 4') == 'YES'\nassert solution('55 5 5 35') == 'NO'\nassert solution('1 1 1 1 1 1 1 1 1') == 'YES'\nassert solution('3 1 1') == 'YES'\nassert solution
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n3\\n1') == 'YES\\n4 2 4'\nassert solution('8\\n3\\n10') == 'YES\\n4 2 4'\nassert solution('8\\n3\\n100') == 'NO'\nassert solution('8\\n3\\n8') == 'YES\\n3 1 1'\nassert solution('8\\n3\\n97') == 'YES\\n55 5 5 35'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n3\\n100 4\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n3\\n8 7\") == \"YES\\n55 5 5 35\"\nassert solution(\"8\\n3\\n97 2\") == \"YES\\n1 1 1 1 1 1 1 1\"\nassert solution(\"8\\n3\\n1000000000 9\") == \"NO\"\nassert solution(\"8\\n3\\n1 2\") == \"YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"\n\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n1\\n2\\n2\\n1\\n2\\n1\\n1\") == 'YES\\n4 2 4'\nassert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == 'NO'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == 'YES\\n1 1 1 1 1 1 1 1 1'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == 'NO'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == 'YES\\n1 1 1 1 1 1 1 1 1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == 'YES\\n4 2 4'\nassert solution('3 3\\n4 2\\n8 8\\n1 1\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120') == 'YES\\n55 5 5 35'\nassert solution('3 10\\n4 2\\n8 8\\n1 1\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120') == 'YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120'\nassert solution('3 9\\n4 2\\n8 8\\n1 1\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 4') == 'YES'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'YES'\nassert solution('97 2') == 'NO'\nassert solution('8 8') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 4') == 'YES'\nassert solution('55 5 5 35') == 'NO'\nassert solution
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51\\n'\nassert solution('3\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '3\\n55\\n15000000000000000\\n51\\n'\nassert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51\\n'\nassert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51\\n'\n\nprint(solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n'))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution_example_0) == solution_expected_0\n\nsolution(solution_example_1)\nsolution(solution_example_2)\nsolution(solution_example_3)\n\n\"\"\"\n\n\nfrom typing import List, Dict, Tuple\nimport numpy as np\nimport functools\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 10 100') == '4'\nassert solution('10000000000000000 10000000000000000 10000000000000000') == '15000000000000000'\nassert solution('23 34 45') == '51'\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 3 4''') == '4'\nassert solution('''1 10 100''') == '5'\nassert solution('''10000000000000000 10000000000000000 10000000000000000''') == '15000000000000000'\nassert solution('''23 34 45''') == '51'\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == '4\\n55\\n15000000000000000\\n51'\n\n\"\"\"\n\nimport io, sys\nsys.stdin = io.StringIO(\"\"\"\n4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n\"\"\".strip())\n\nq = int(input())\nfor _ in range(q):\n    a, b, c = map(int, input().split())\n    print(max(a - c, b - c))"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n\"\"\") == \"\"\"4\n55\n15000000000000000\n51\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == '4\\n55\\n15000000000000000\\n51'"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == '4\\n55\\n15000000000000000\\n51'\nprint(solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\"))\n\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n\"\"\""
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\nabcbac\") == 6\nassert solution(\"3 6\\naaa\") == 3\nassert solution(\"7 1000\\nabczgyo\") == 10\nassert solution(\"5 4\\nababa\") == 4\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec') == '6\\n3\\n5\\n4\\n15\\n10'\n\n-------------"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n3 6\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec''') == '6\\n3\\n5\\n4\\n15\\n10'\n\"\"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcbac\") == 6\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 5\nassert solution(\"ababa\") == 4\nassert solution(\"ecbedececacbcbccbdec\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n''') == '6\\n3\\n5\\n4\\n15\\n10'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcbac\") == 3\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 4\nassert solution(\"ecbedececacbcbccbdec\") == 5\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_cases) == result\n\"\"\"\n\nimport math\n\ntest_cases = int(input().strip())\n\nfor t in range(1, test_cases + 1):\n    n, k = map(int, input().strip().split())\n    str_input = input().strip()\n    # print('n: {}, k: {}, str_input: {}'.format(n, k, str_input))\n\n    ans = 1\n    str_len = len(str_input)\n    for idx, ch in enumerate(str_input):\n        # print(f'idx: {idx}, ch: {ch}')\n        str_subset = str_input[idx:] + str_input[:idx]\n        str_len_subset = len(str_subset)\n        # print(f'str_len_subset: {str_len_subset}')\n        i = 0\n        while i < str_len_subset:\n            if str_subset[i: i + k] == str_subset[i + k - 1:: -1] and str_subset[i: i + k] == str_subset[i: i + k][:: -1]:\n                ans = max(ans, str_len_subset - k + 1)\n                # print(f'ans: {ans}')\n            i += 1\n    print(ans)"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\nabcbac\") == \"3\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\necbedececacbcbccbdec\") == \"15\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n7 1 2 3 4 5\") == \"YES\\n1 2 3\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\"\nassert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\"\nassert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_str) == test_res"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'YES\\n1 3 5'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 3 4 5') == 'YES\\n1 3 5'\nassert solution('2 2\\n1 2') == 'NO'\nassert solution('5 4\\n5 5 4 4 5') == 'NO'\nassert solution('2 2\\n1 2') == 'NO'\nassert solution('2 2\\n3 4') == 'NO'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n7 18 3 14 1') == 'YES\\n1 3 5'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\\n') == 'YES\\n1 3 5\\nNO\\nNO\\n'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint('Successful')\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4 5\\n2 2\\n1 2 8 4 10 2\\n\") == \"NO\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10010111') == 964176192\nassert solution('111111111111111111111111111111101') == 3221225471\nassert solution('1') == 1\n\nimport math\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].zfill(32)[::-1], 2)\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10011111001111100111111111001111\") == \"3221225471\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11011000') == '11111111111111111111111111111100'\nassert solution('111111111111111111111111111111101') == '3221225471'\n\n\"\"\"\n\nclass Solution:\n    def __init__(self, n):\n        self.reverse = n\n\n    def reverse_bits(self):\n        self.reverse = self.reverse >> 16 | self.reverse << 16\n        self.reverse = self.reverse >> 8 | self.reverse << 8\n        self.reverse = self.reverse >> 4 | self.reverse << 4\n        self.reverse = self.reverse >> 2 | self.reverse << 2\n        self.reverse = self.reverse >> 1 | self.reverse << 1\n        return self.reverse\n\nsolution = Solution(0b11011000)\nprint(solution.reverse_bits())\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(0b11111) == 0b111111111111111111111111111111\nassert solution(0b11101) == 0b10111111111111111111111111111\nassert solution(0b11111111111111111111111111111101) == 0b11111111111111111111111111111101\nassert solution(0b111011111111111111111111111110) == 0b11111111111111111111111111110\nassert solution(0b111111111111111111111111111111101) == 0b111111111111111111111111111111101\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111011110011100111011110101111000111100') == '1011111101100111011110111101111011100111011110111101111000111001111111111111111111011100110011111111110011111100110011111111110011101110011111111111011100111111111110111001111111111101110011111111111011100111111111110111001111111111111111110011111111111011100111111111110111001111111111101110011111111111111111100111111111111110011101110011111111111011100111111111110111001111111111101110011111111111011100111111111110111001111111111111111110011111111111111001111111011100111111111110111001111111111111111110011111111111111001111111011100111111111110111001111111111101110011111111111011100111111111111111011100111111111111111111001111111111111100111111111111110011111111111111111100111111111111111111101110011111111111011100111111111110111001111111111111111110011111111111111111111111011100111111111110111001111111111101110011111111111011100111111111110111001111111111101110011111111111011100111111111110111001111111111101110011111111111011100111111111110111001111111111101110011111111111011100111111111110111001111111111101110011111111111111111100111111111111111111111110111001111111111101110011111111111011100111111111110111001111111111111110111001111111111111111111011100111111111110111001111111111111111111011100111111111111111111101110011111111111011100111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111101110011111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111111111011100111111111111111111101110011111111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111111101110011111111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111101110011111111111111111110111001111111111111111111111101110011111111111111111110111001111111111111111111111101110011111111111111111111111111101110011111111111111111110111001111111111111111111111101110011111111111111111110111001111111111111111111011100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00000010100101000001111010011100\") == \"964176192\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"111\") == \"3221225471\"\nassert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('110011001100110011') == '110011001100110011'\nassert solution('11001101110011010') == '10110110110110110'\n\"\"\"\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].zfill(32)[::-1], 2)\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11101\") == \"10101\"\nassert solution(\"10010\") == \"10010\"\nassert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00000010100101000001111010011100') == 964176192\nassert solution('111111111111111111111111111111101') == 3221225471\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nassert solution(\"3\") == [[1],[1,1],[1,2,1]]\nassert solution(\"0\") == []\nassert solution(\"-2\") == []\nassert solution(\"1\") == [[1]]\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\nassert solution(\"1\") == [[1]]\nassert solution(\"0\") == []\nassert solution(\"10\") == [\n    [1],\n    [1,1],\n    [1,2,1],\n    [1,3,3,1],\n    [1,4,6,4,1],\n    [1,5,10,10,5,1],\n    [1,6,15,20,15,6,1],\n    [1,7,21,35,35,21,7,1],\n    [1,8,28,56,70,56,28,8,1],\n    [1,9,36,84,126,126,84,36,9,1],\n    [1,10,45,120,210,252,210,120,45,10,1]\n]\n\n\"\"\"\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        \n        triangle = []\n        for row in range(numRows):\n            # The first and last row elements are always 1.\n            row_list = [None for _ in range(row+1)]\n            row_list[0], row_list[-1] = 1, 1\n\n            # Each triangle element is equal to the sum of the elements\n            # above-and-to-the-left and above-and-to-the-right.\n            for j in range(1, len(row_list)-1):\n                row_list[j] = triangle[row-1][j-1] + triangle[row-1][j]\n\n            triangle.append(row_list)\n\n        return triangle\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution(\"4\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\nassert solution(\"3\") == [[1], [1, 1], [1, 2, 1]]\n\"\"\"\nfrom typing import List\n\n\"\"\"\n\nGiven the following triangle, find the minimum path sum from top to bottom.\n\n[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == [\n   [1],\n  [1,1],\n [1,2,1],\n[1,3,3,1],\n[1,4,6,4,1]\n]\n\"\"\"\nimport unittest\n\nimport numpy as np\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '[\\n [1],\\n [1,1],\\n [1,2,1],\\n [1,3,3,1],\\n [1,4,6,4,1]\\n]'\nassert solution('0') == '[]'\nassert solution('-1') == '[]'\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ]\n'''\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        result = [[1]]\n        for i in range(1,numRows):\n            result.append([])\n            for j in range(len(result[i-1])):\n                if j == 0 or j == len(result[i-1])-1:\n                    result[i].append(result[i-1][j]+1)\n                else:\n                    result[i].append(result[i-1][j]+result[i-1][j+1])\n        return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\n\n\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\njoe@gmail.com\\njoe@kth.se\\n') == ['joe@kth.se']\nassert solution('2\\njoey@gmail.com\\njoe@kth.se\\n') == ['joey@gmail.com', 'joe@kth.se']"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\nanna\") == ['anna']\nassert solution(\"2\\nanna\\nbeth\") == ['anna', 'beth']\nassert solution(\"3\\nanna\\nbeth\\ncaroline\") == ['anna', 'beth', 'caroline']\nassert solution(\"4\\nanna\\nbeth\\nc\\ndavid\\ne\") == ['anna', 'beth', 'c', 'david', 'e']\nassert solution(\"5\\nanna\\nbeth\\nc\\ndavid\\ne\\nf\\ng\\nh\\ni\") == ['anna', 'beth', 'c', 'david', 'e', 'f', 'g', 'h', 'i']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\ni am a hacker\\nx@code.com\") == ['i am a hacker@code.com']\nassert solution(\"2\\ni am a hacker\\ny@code.com\") == ['i am a hacker@code.com', 'y@code.com']\nassert solution(\"3\\ni am a hacker\\nx@code.com\\ny@code.com\\nz@code.com\") == ['i am a hacker@code.com', 'y@code.com', 'z@code.com']\nassert solution(\"4\\ni am a hacker\\nx@code.com\\ny@code.com\\nz@code.com\\na@code.com\\nb@code.com\\n\") == ['i am a hacker@code.com', 'y@code.com', 'z@code.com', 'a@code.com', 'b@code.com']"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nriya-bhargava@my.eecs.berkeley.edu\\nrich-lazier@eecs.berkeley.edu\\nrich@eecs.berkeley.edu\\nriya@eecs.berkeley.edu\") == [\"riya-bhargava@my.eecs.berkeley.edu\", \"rich@eecs.berkeley.edu\", \"riya@eecs.berkeley.edu\"]\nassert solution(\"2\\nriya-bhargava@my.eecs.berkeley.edu\\nrich-lazier@eecs.berkeley.edu\") == [\"riya-bhargava@my.eecs.berkeley.edu\"]\nassert solution(\"0\") == []\n\n=====Test 1=====\ninput\n4\nriya-bhargava@my.eecs.berkeley.edu\nrich-lazier@eecs.berkeley.edu\nrich@eecs.berkeley.edu\nriya@eecs.berkeley.edu\noutput\n[\"riya-bhargava@my.eecs.berkeley.edu\", \"rich@eecs.berkeley.edu\", \"riya@eecs.berkeley.edu\"]\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nfilter\\n1,2,3\\n[(lambda x: x > 1 and x < 3) (1,2,3)]') == '[2,3]'\nassert solution('3\\nfilter\\n2,1,3\\n[(lambda x: x > 1 and x < 3) (1,2,3)]') == '[2]'\nassert solution('3\\nfilter\\n2,1,3\\n[(lambda x: x > 1 and x < 3) (1,2,3)]') == '[2]'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '2\\n'\n    'i@gmail.com\\n'\n    'se@yahoo.com'\n) == ['i@gmail.com','se@yahoo.com']\nassert solution(\n    '1\\n'\n    'qwerty\\n'\n) == ['qwerty']\nassert solution(\n    '2\\n'\n    '123@yahoo.com\\n'\n    '123@abc.net'\n) == ['123@abc.net', '123@yahoo.com']\n\nProblem Challenge 1\n\nPrint a list of the squares of the numbers between 1 and 10 (both included).\n\nProblem Challenge 2\n\nPrint a list of the odd numbers between 1 and 10 (both included).\n\nProblem Challenge 3\n\nPrint a list of the even numbers between 1 and 10 (both included).\n\nProblem Challenge 4\n\nPrint a list of all numbers which are divisible by 2 between 1 and 100 (both included).\n\nProblem Challenge 5\n\nPrint a list of all numbers which are divisible by 3 between 1 and 100 (both included).\n\nProblem Challenge 6\n\nPrint a list of all numbers which are divisible by 2 or 3 between 1 and 100 (both included).\n\nProblem Challenge 7\n\nPrint a list of all the numbers between 1 and 100, which are divisible by 2, 3 and 4.\n\nSolution for Problem Challenge 7"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nluke@gmail.com\\njohn@gmail.com\\njames@gmail.com\\ncyril@gmail.com\\nkatie@gmail.com\") == \\\n    ['luke@gmail.com', 'cyril@gmail.com', 'katie@gmail.com']\n\nassert solution(\"5\\nluke@gmail.com\\njohn@gmail.com\\njames@gmail.com\\ncyril@gmail.com\\nkatie@gmail.com\") == \\\n    ['luke@gmail.com', 'cyril@gmail.com', 'katie@gmail.com']\n\nassert solution(\"1\\nrich@gmail.com\") == [\"rich@gmail.com\"]\n\nassert solution(\"2\\nrich@gmail.com\\nrich@gmail.com\") == [\"rich@gmail.com\", \"rich@gmail.com\"]\n=======\nYou are given a string containing characters  and  only. Your task is to change it into a string such that there are no matching adjacent characters. To do this, you are allowed to delete zero or more characters in the string.\n\nYour task is to find the minimum number of required deletions.\n\nFor example, given the string, remove an  at positions  and  to make  in  deletions.\n\n>> print(solution(\"AABAAB\"))\n2\n\n>> print(solution(\"BBABAA\"))\n1\n\n>> print(solution(\"BABAB\"))\n0\n\n>> print(solution(\"AAABBAAAB\"))\n0\n\n>> print(solution(\"BAAABB\"))\n1\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\nrich@edx.org\\nriches@gmail.com\\n\") == ['riches@edx.org', 'riches@gmail.com']\nassert solution(\"0\\nrich@edx.org\\nriches@gmail.com\\n\") == ['rich@edx.org', 'riches@gmail.com']\nassert solution(\"0\\nrich@edx.org\\nrich@gmail.com\\n\") == ['rich@edx.org', 'rich@gmail.com']\nassert solution(\"0\\nrich@edx.org\\nrich@gmail.com\\n\") == ['rich@edx.org', 'rich@gmail.com']\nassert solution(\"0\\nrich@edx.org\\nrich@gmail.com\\n\") == ['rich@edx.org', 'rich@gmail.com']\n\nn = int(stdin)\nl = [stdin for _ in range(n)]\n=======\n3\nrich@edx.org\nriches@gmail.com\npokemon@edx.org\n\n=======\n5\nrich@edx.org\nrich@gmail.com\nriches@edx.org\npokemon@gmail.com\npokemon@edx.org"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nanna\\njoe\") == ['anna.email@email.com', 'joe.email@email.com']\nassert solution(\"0\\n\") == []\nassert solution(\"1\\nanna\") == ['anna.email@email.com']\nassert solution(\"1\\nanna\\njoe\") == ['anna.email@email.com', 'joe.email@email.com']\nassert solution(\"2\\nanna\\njoe\\njane\") == ['anna.email@email.com', 'jane.email@email.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nriya riya@gmail.com\\njulia sjulia@julia.me\\njulia sjulia@gmail.com\\njulia sjulia@gmail.com\\nrira@gmail.com\") == ['riya@gmail.com','sjulia@julia.me','sjulia@gmail.com']\nassert solution(\"2\\nriya.r@gamil.com\\njulia@julia.me\") == ['riya.r@gamil.com']\nassert solution(\"0\") == []\n\nprint(\"Successfully tested.\")"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n\n=====Test Case 2=====\nInput Format:\nThe first line contains a string,. The string contains space separated integers. The string represents a list of numbers.\n\n>> solution('1 2 3')\n[1, 8, 27]\n\n=====Test Case 3=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list on a single line containing the cubes of the first N fibonacci numbers.\n\n>> solution('4')\n[0, 1, 1, 8]\n\nConcept\n\nThe reduce() function applies a function of two arguments cumulatively on a list of objects in succession from left to right to reduce it to one value. \n\nThus reduce() function is defined in functools library in Python. \n\nIt is an alternative for a loop that performs an operation on every element of an iterable.\n\n>>> reduce(lambda x, y: x + y, [1, 2, 3, 4, 5])\n15\n\n>>> from functools import reduce\n>>> reduce(lambda x, y: x + y, [1, 2, 3, 4, 5])\n15\n\n>>> from functools import reduce\n>>> reduce(lambda x, y: x + y, [1, 2, 3, 4, 5])\n15\n\n=====Input Format=====\nOne line of input: a string. \nThe string contains space separated numbers. \n\n=====Output Format=====\nA list of integers on a single line. \n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 4=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n=====Test Case 5=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 6=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 7=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n=====Test Case 8=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 9=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 10=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 11=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 12=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n=====Test Case 13=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 14=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 15=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 16=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 17=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n=====Test Case 18=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 19=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 20=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n>>> solution('1 2 3 4 5')\n[1, 8, 27, 64, 125]\n\n=====Test Case 21=====\nInput Format:\nThe first line contains an integer,.\n\nOutput Format:\nA list of integers on a single line.\n\n>>> solution('1 2 3 4 5')\n[1, 8"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n\n>>>>>>> 8a0fafb4cb6b57c35a56c2910d7b9c2872cae5d8\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == [0, 1, 1, 8, 27, 64]\nprint('Test Passed')\n\n>>>>>>> c6e6ca57d75f9e9f9f979b7d2975d5fc5ecf4362\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == [0]\n\nprint(solution('5'))\n    [0, 1, 1, 8, 27]\n    \n========================================"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == []\nassert solution('2') == [1]\nassert solution('5') == [1, 1, 2, 8]\nassert solution('9') == [1, 1, 2, 8, 27, 64, 125, 216, 343]\n\nInput Format\n\nThe first and only line of input contains the integer N, 1 <= N <= 15.\n\nConstraints\n\nOutput Format\n\nPrint a single line of N space-separated long integers denoting the sequence of first N Fibonacci numbers.\n\nSample Input\n\n3\nSample Output\n\n1 1 2\n=====\n//python code"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\nassert solution('4') == [0, 1, 1, 8]\n\nsolution()\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == [0, 1, 1, 8, 27, 64]\nprint(\"Success\")\n\n=====Test 1=====\n\n=====Test 2=====\n\n=====Test 3=====\n\n=====Test 4=====\n\n=====Test 5=====\n\n>>>>>>> 02dce2f7d1883584c5b5f3cac5f0e37321f79bfe\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nassert solution('10') == [0, 1, 1, 8, 34, 546, 43046721, 10946, 1086264564]"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == []\nassert solution('5') == [0, 1, 1, 8, 27]\nassert solution('10') == [0, 1, 1, 8, 27, 125]\nreturn solution(stdin)\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 0\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 2\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n    <entry>\n        <author gender='male'>Bhavya</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>''') == 3\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('<data>' + '\\n' + '\\t' * 3 + '<level>' + '\\n' + '\\t' * 4 + '<level>' + '\\n' + '\\t' * 5 + '<level>' + '\\n' + '\\t' * 6 + '</level>' + '\\n' + '\\t' * 4 + '</level>' + '\\n' + '</data>') == 4\n=====\nfor i in range(n):\n    s.append(stdin.readline())\n\ns = '\\n'.join(s)\nprint(solution(s))"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 0\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n        <question type='hard'>XML 3</question>\n    </entry>\n</feed>\n''') == 0\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n    <entry>\n        <question type='medium'>XML 3</question>\n        <question type='medium'>XML 4</question>\n    </entry>\n</feed>\n''') == 2\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\n\"\"\"\n\nSolution\n========"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '<feed xml:lang=\"en\">\\n'\n    '<title>HackerRank</title>\\n'\n    '<subtitle lang=\"en\">Programming challenges</subtitle>\\n'\n    '<link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '</feed>'\n) == 1\n\nassert solution(\n    '<feed xml:lang=\"en\">\\n'\n    '<title>HackerRank</title>\\n'\n    '<subtitle lang=\"en\">Programming challenges</subtitle>\\n'\n    '<link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '<entry>\\n'\n    '<title>HackerRank</title>\\n'\n    '<content type=\"html\">\\n'\n    '<![CDATA[\\n'\n    '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\\n'\n    '&lt;feed xml:lang=\"en\"&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;subtitle lang=\"en\"&gt;Programming challenges&lt;/subtitle&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;entry&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;/entry&gt;\\n'\n    '&lt;/feed&gt;\\n'\n    ']]&gt;\\n'\n    '</content>\\n'\n    '</feed>'\n) == 1\n\nassert solution(\n    '<feed xml:lang=\"en\">\\n'\n    '<title>HackerRank</title>\\n'\n    '<subtitle lang=\"en\">Programming challenges</subtitle>\\n'\n    '<link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '<entry>\\n'\n    '<title>HackerRank</title>\\n'\n    '<content type=\"html\">\\n'\n    '<![CDATA[\\n'\n    '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\\n'\n    '&lt;feed xml:lang=\"en\"&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;subtitle lang=\"en\"&gt;Programming challenges&lt;/subtitle&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;entry&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;/entry&gt;\\n'\n    '&lt;/feed&gt;\\n'\n    ']]&gt;\\n'\n    '</content>\\n'\n    '</feed>'\n) == 1\n\nassert solution(\n    '<feed xml:lang=\"en\">\\n'\n    '<title>HackerRank</title>\\n'\n    '<subtitle lang=\"en\">Programming challenges</subtitle>\\n'\n    '<link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '<entry>\\n'\n    '<title>HackerRank</title>\\n'\n    '<content type=\"html\">\\n'\n    '<![CDATA[\\n'\n    '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\\n'\n    '&lt;feed xml:lang=\"en\"&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;subtitle lang=\"en\"&gt;Programming challenges&lt;/subtitle&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;entry&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;/entry&gt;\\n'\n    '&lt;/feed&gt;\\n'\n    ']]&gt;\\n'\n    '</content>\\n'\n    '</feed>'\n) == 1\n\nassert solution(\n    '<feed xml:lang=\"en\">\\n'\n    '<title>HackerRank</title>\\n'\n    '<subtitle lang=\"en\">Programming challenges</subtitle>\\n'\n    '<link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '<entry>\\n'\n    '<title>HackerRank</title>\\n'\n    '<content type=\"html\">\\n'\n    '<![CDATA[\\n'\n    '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\\n'\n    '&lt;feed xml:lang=\"en\"&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;subtitle lang=\"en\"&gt;Programming challenges&lt;/subtitle&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;entry&gt;\\n'\n    '&lt;title&gt;HackerRank&lt;/title&gt;\\n'\n    '&lt;link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '&lt;/entry&gt;\\n'\n    '&lt;/feed&gt;\\n'\n    ']]&gt;\\n'\n    '</content>\\n'\n    '</feed>'\n) == 1"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(r'<data>' + '\\n' + r'   '+ '<question type=\"multiple\">' + '\\n' + r'       '+ '<text>Which one is correct team name in NBA?</text>' + '\\n' + r'       '+ '<answer fraction=\"100%\">New York Bulls</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Los Angeles Kings</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Golden State Warriros</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Huston Rocket</answer>' + '\\n' + r'   '+ '</question>' + '\\n' + r'   '+ '<question type=\"multiple\">' + '\\n' + r'       '+ '<text>Which one is correct continent name in NBA?</text>' + '\\n' + r'       '+ '<answer fraction=\"100%\">America</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Asia</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Africa</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Europe</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Antarctica</answer>' + '\\n' + r'   '+ '</question>' + '\\n' + r'</data>') == 4\nassert solution(r'<data>' + '\\n' + r'   '+ '<question type=\"multiple\">' + '\\n' + r'       '+ '<text>Which one is correct team name in NBA?</text>' + '\\n' + r'       '+ '<answer fraction=\"100%\">New York Bulls</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Los Angeles Kings</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Golden State Warriros</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Huston Rocket</answer>' + '\\n' + r'   '+ '</question>' + '\\n' + r'</data>') == 0\nassert solution(r'<data>' + '\\n' + r'   '+ '<question type=\"multiple\">' + '\\n' + r'       '+ '<text>Which one is correct continent name in NBA?</text>' + '\\n' + r'       '+ '<answer fraction=\"100%\">America</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Asia</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Africa</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Europe</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Antarctica</answer>' + '\\n' + r'   '+ '</question>' + '\\n' + r'   '+ '<question type=\"multiple\">' + '\\n' + r'       '+ '<text>Which one is correct team name in NBA?</text>' + '\\n' + r'       '+ '<answer fraction=\"100%\">New York Bulls</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Los Angeles Kings</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Golden State Warriros</answer>' + '\\n' + r'       '+ '<answer fraction=\"100%\">Huston Rocket</answer>' + '\\n' + r'   '+ '</question>' + '\\n' + r'</data>') == 2\n\n=====Print Output=====\n4\n0\n2\n'''\n\nimport xml.etree.ElementTree as etree\nimport re\n\nmaxdepth = 0\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\n\"\"\")\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 1</title>\n    </entry>\n</feed>\n\"\"\") == 2\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 1</title>\n        <author>\n            <name>Harsh</name>\n            <email>harsh@harsh.com</email>\n            <mobile>9876543210</mobile>\n        </author>\n    </entry>\n</feed>\n\"\"\") == 3\n\"\"\")\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 1</title>\n        <author>\n            <name>Harsh</name>\n            <email>harsh@harsh.com</email>\n            <mobile>9876543210</mobile>\n        </author>\n    </entry>\n    <entry>\n        <author>\n            <name>Akshay</name>\n            <email>akshay@akshay.com</email>\n            <mobile>1234567890</mobile>\n        </author>\n    </entry>\n</feed>\n\"\"\") == 3"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\n=====Test 7=====\nInput\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput\n1\n1\n1\n\nExplanation\nThere are 3 lines of input, corresponding to the 3 sample XML documents.\n\nThe maximum level of nesting is 1 in all the 3 sample XML documents.\n=====Solution=====\n\"\"\"\n    pass"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 1\n\n=====Test Case 1=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nThe maximum level of nesting is 1.\n=====Test Case 2=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nThe maximum level of nesting is 2.\n=====Test Case 3=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nThe maximum level of nesting is 0.\n=====Test Case 4=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nThe maximum level of nesting is 0.\n\n=====Sample Test Case 2=====\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nThe maximum level of nesting is 3.\n\n'''\nfrom io import StringIO\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def __init__(self):\n        super().__init__()\n        self.__level = 0\n        self.__record = []\n\n    def handle_starttag(self, tag, att"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'></question>\n    </entry>\n</feed>\n\"\"\") == 1\n\"\"\"\n=====Test Case 2=====\nTest Case Input\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\nTest Case Output\n2\n\n=====Test Case 3=====\nTest Case Input\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\nTest Case Output\n1\n\"\"\"\n\n\"\"\"\n======Sample Input=======\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\n======Sample Output=======\n2\n\n======================\n\"\"\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('977987845') == 'YES'\nassert solution('987845') == 'NO'\nassert solution('9779878') == 'YES'\n\nassert solution('97798784542') == 'NO'\nassert solution('987845') == 'NO'"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7123456789') == \"YES\"\nassert solution('987654321') == \"YES\"\nassert solution('9119543654') == \"YES\"\nassert solution('919543654') == \"YES\"\nassert solution('919543654a') == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"73486987654\") == \"YES\"\nassert solution(\"934348698765\") == \"NO\"\nassert solution(\"869343486987\") == \"YES\"\nassert solution(\"5346987654\") == \"NO\"\nassert solution(\"43216598765\") == \"NO\"\n\nprint(solution(\"73486987654\"))\n\nProblem\nA valid mobile number is a ten digit number starting with a 7, 8, or 9.\n\nHow many mobile numbers are valid?\n\nHint\nUse Regular Expression to match the input.\n\nInput Format\nThe first line contains an integer N, the number of inputs.\nN lines follow, each containing some string.\n\nConstraints\n1\u2264N\u226410\n2\u2264len(Number)\u226415\n\nOutput Format\nFor every string listed, print \"YES\" if it is a valid mobile number and \"NO\" if it is not on separate lines. Do not print the quotes.\nSample Input\n2\n9587456281\n1252478965\nSample Output\nYES\nNO\n\n==Test Case 1==\n====Input====\n9587456281\n====Output====\nYES\n====Explanation====\nValid mobile numbers are 758***81, 758***82, 758***83, 758***84, 758***85, 758***86, 758***87, 758***88, 758***89.\n\n====Input====\n1252478965\n====Output====\nNO\n====Explanation====\nValid mobile numbers are 752***23, 752***24, 752***25, 752***26, 752***27, 752***28, 752***29, 752***30, 752***31, 752***32, 752***33, 752***34, 752***35, 752***36, 752***37, 752***38, 752***39, 752***40, 752***41, 752***42, 752***43, 752***44, 752***45, 752***46, 752***47, 752***48, 752***49, 752***50, 752***51, 752***52, 752***53, 752***54, 752***55, 752***56, 752***57, 752***58, 752***59, 752***60, 752***61, 752***62, 752***63, 752***64, 752***65, 752***66, 752***67, 752***68, 752***69, 752***70, 752***71, 752***72, 752***73, 752***74, 752***75, 752***76, 752***77, 752***78, 752***79, 752***80, 752***81, 752***82, 752***83, 752***84, 752***85, 752***86, 752***87, 752***88, 752***89, 752***90, 752***91, 752***92, 752***93, 752***94, 752***95, 752***96, 752***97, 752***98, 752***99, 752***100, 752***101, 752***102, 752***103, 752***104, 752***105, 752***106, 752***107, 752***108, 752***109, 752***110, 752***111, 752***112, 752***113, 752***114, 752***115, 752***116, 752***117, 752***118, 752***119, 752***120, 752***121, 752***122, 752***123, 752***124, 752***125, 752***126, 752***127, 752***128, 752***129, 752***130, 752***131, 752***132, 752***133, 752***134, 752***135, 752***136, 752***137, 752***138, 752***139, 752***140, 752***141, 752***142, 752***143, 752***144, 752***145, 752***146, 752***147, 752***148, 752***149, 752***150, 752***151, 752***152, 752***153, 752***154, 752***155, 752***156, 752***157, 752***158, 752***159, 752***160, 752***161, 752***162, 752***163, 752***164, 752***165, 752***166, 752***167, 752***168, 752***169, 752***170, 752***171, 752***172, 752***173, 752***174, 752***175, 752***176, 752***177, 752***178, 752***179, 752***180, 752***181, 752***182, 752***183, 752***184, 752***185, 752***186, 752***187, 752***188, 752***189, 752***190, 752***191, 752***192, 752***193, 752***194, 752***195, 752***196, 752***197, 752***198, 752***199, 752***200, 752***201, 752***202, 752***203, 752***204, 752***205, 752***206, 752***207, 752***208, 752***209, 752***210, 752***211, 752***212, 752***213, 752***214, 752***215, 752***216, 752***217, 752***218, 752***219, 752***220, 752***221, 752***222, 752***223, 752***224, 752***225, 752***226, 752***227, 752***228, 752***229, 752***230, 752***231, 752***232, 752***233, 752***234, 752***235, 752***236, 752***237, 752***238, 752***239, 752***240, 752***241, 752***242, 752***243, 752***244, 752***245, 752***246, 752***247, 752***248, 752***249, 752***250, 752***251, 752***252, 752***253, 752***254, 752***255, 752***256, 752***257, 752***258, 752***259, 752***260, 752***261, 752***262, 752***263, 752***264, 752***265, 752***266, 752***267, 752***268, 752***269, 752***270, 752***271, 752***272, 752***273, 752***274, 752***275, 752***276, 752***277, 752***278, 752***279, 752***280, 752***281, 752***282, 752***283, 752***284, 752***285, 752***286, 752***287, 752***288, 752***289, 752***290, 752***291, 752***292, 752***293, 752***294, 752***295, 752***296, 752***297, 752***298, 752***299, 752***300, 752***301, 752***302, 752***303, 752***304, 752***305, 752***306, 752***307, 752***308, 752***309, 752***310, 752***311, 752***312, 752***313, 752***314, 752***315, 752***316, 752***317, 752***318, 752***319, 752***320, 752***321, 752***322, 752***323, 752"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(123) 456-7890\") == \"YES\"\nassert solution(\"(1111)555 2345\") == \"NO\"\nassert solution(\"(098) 123 4567\") == \"YES\"\n\n=====Solution=====\n\nnum_lines = int(stdin.readline())\nfor _ in range(num_lines):\n    print('YES' if re.match(r'^[789]\\d{9}$', stdin.readline().strip()) else 'NO')"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7348693334\") == \"YES\"\nassert solution(\"7993438493\") == \"NO\"\nassert solution(\"89997789934\") == \"YES\"\nassert solution(\"955578436578\") == \"NO\"\nassert solution(\"22344556\") == \"NO\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"YES\"\nassert solution('890-476-2446') == \"YES\"\nassert solution('8908461246') == \"NO\"\nassert solution('-8801461246') == \"NO\"\nassert solution('8908-461246') == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('(789) 123-4567') == 'YES'\nassert solution('(789) 456-7890') == 'NO'\nassert solution('(123) 456-7890') == 'NO'\nassert solution('(123)456-7890') == 'NO'\nassert solution('7891234567') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7805356079') == 'YES'\nassert solution('9234234982') == 'YES'\nassert solution('8234234982') == 'NO'"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7999999999') == 'YES'\nassert solution('8999999999') == 'YES'\nassert solution('7888888888') == 'NO'\nassert solution('7859999999') == 'NO'\nassert solution('7999999999') == 'YES'"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"72752519\") == \"YES\"\nassert solution(\"923413452\") == \"NO\"\nassert solution(\"92314452\") == \"NO\"\nassert solution(\"762519\") == \"YES\"\nassert solution(\"7(3)\") == \"YES\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 4 5 9\\n3\\n5 6 8') == '8 9'\n\nassert solution('4\\n2 4 5 9\\n3\\n5 6 8') == '8 9'\n\nassert solution('4\\n2 4 5 9\\n3\\n5 6 8') == '8 9'\n\nassert solution('1\\n9') == '9'\n\nassert solution('4\\n2 4 5 9\\n3\\n5 6 8') == '8 9'"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 5 9 12\\n4\\n2 4 11 12') == '5\\n9\\n12'\n\nassert solution('5\\n2 4 5 9 12\\n4\\n2 4 11 12') == '5\\n9\\n12'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5 6\\n3\\n1 2\\n\") == \"2\\n6\"\n=====Test Case=====\n>>> solution(\"4\\n2 3 5 6\\n3\\n1 2\\n\")\n'2\\n6'\n\n>>> solution(\"5\\n2 3 4 5 6\\n4\\n2 3 5 7 1\\n\")\n'3\\n6'\n\"\"\"\nimport operator"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 5 9\\n3\\n5 3 2\") == \"2 3 9\"\nassert solution(\"4\\n9 9 4 4\\n9\\n9 2 3 4\") == \"2 3 4\"\nassert solution(\"3\\n9 9 4 4\\n9\\n9 2 3 4\") == \"2 3 4\"\nassert solution(\"5\\n3 4 2\\n9 4 12 15 1 0\") == \"3 5 1 0\"\nassert solution(\"4\\n9 9 4 4\\n9\\n9 2 3 4\") == \"2 3 4\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self):\n        pass"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n5\n2\n3\n''') == '2 3 5'\nassert solution('''5\n5\n2\n4\n''') == '2 3 4'\nassert solution('''5\n5\n2\n2\n''') == '2 4'\nassert solution('''6\n2\n5\n3\n1\n6\n4\n''') == '2 4 6 5 3 1'\n\n=====Test Case 2=====\nForgot to add newline at the end of input"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n\" + \"1 2 3 4\" + \"\\n\" + \"3\\n\" + \"2 3 5\") == \"1 5\"\nassert solution(\"4\\n\" + \"1 2 3 4\" + \"\\n\" + \"3\\n\" + \"2 3 5\") == \"1 5\"\nassert solution(\"4\\n\" + \"1 2 3 4\" + \"\\n\" + \"3\\n\" + \"2 3 5\") == \"1 5\"\nassert solution(\"4\\n\" + \"1 2 3 4\" + \"\\n\" + \"3\\n\" + \"2 3 5\") == \"1 5\"\nassert solution(\"4\\n\" + \"1 2 3 4\" + \"\\n\" + \"3\\n\" + \"2 3 5\") == \"1 5\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n\" + \"1 2 3 4\" + \"\\n\" + \"5 6 7 8\") == \"8 9 10\"\n\n=====Test Case=====\n>>> for i in range(int(input())):\n    n, m = input().split()\n    n = set(map(int, input().split()))\n    m = set(map(int, input().split()))\n    print(' '.join(sorted(n.symmetric_difference(m))))\n\n\n\n============================================================\n\nUsing for loop:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(' '.join(sorted(M)))\n\n\n============================================================\n\nUsing while loop:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> print(sorted(M))\n>>> \n>>> \n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(sorted(M))\n>>> \n\n============================================================\n\nUsing list comprehension:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> print(sorted(M))\n>>> \n>>> \n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(sorted(M))\n>>> \n\n============================================================\n\nUsing for loop and set function:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(sorted(M))\n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n\n============================================================\n\nUsing for loop and sorted function:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(*sorted(M))\n>>> \n>>> \n>>> \n>>> \n>>> \n\n============================================================\n\nUsing for loop and set function:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(*sorted(M))\n>>> \n>>> \n>>> \n>>> \n>>> \n\n============================================================\n\nUsing for loop and set function:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(*sorted(M))\n>>> \n>>> \n>>> \n>>> \n>>> \n\n============================================================\n\nUsing for loop and set function:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(*sorted(M))\n>>> \n>>> \n>>> \n>>> \n>>> \n\n============================================================\n\nUsing for loop and set function:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(*sorted(M))\n>>> \n>>> \n>>> \n>>> \n>>> \n\n============================================================\n\nUsing for loop and set function:\n\n>>> N = int(input())\n>>> M = set(map(int, input().split()))\n>>> N = int(input())\n>>> L = list(map(int, input().split()))\n>>> M.update(L)\n>>> print(*sorted(M))\n>>> \n>>> \n>>>"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 6 5\\n3\\n2 3 11\") == \"5\\n6\"\n=====Testcases=====\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Python cases --\nInput:\nsolution.solution(\"3\\n3\\n1\")\nOutput:\n1\n\nInput:\nsolution.solution(\"4\\n2\\n1\")\nOutput:\n2\n\nInput:\nsolution.solution(\"4\\n2\\n10\\n6\")\nOutput:\n8\n\nInput:\nsolution.solution(\"4\\n2\\n10\\n6\\n2\")\nOutput:\n8\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 3 2\\n4\\n2 3 5') == '5 3'\n\nassert solution('5 4 3 2\\n4\\n2 4') == '2 3 5'\n\nassert solution('5 4 3 2\\n5\\n2 4 5') == '5 4 2'\n\nassert solution('5 4 3 2\\n4\\n3') == '5 3 4'\n\nassert solution('5 4 3 2\\n4\\n5') == '5'"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12', 'Oops!'\n>>>>>>> a8c4b7e8cdfb4ceea4c21f8a5c0626cc1e01af9\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\nassert solution('5\\nID\\nCLASS\\nNAME\\nMARKS\\n') == '67.50'\n\n=====Sample Input=====\n3\nID\nMARKS\nCLASS\n1\nID:foo\nMARKS:3\nCLASS:bar\nNAME:qwerty\n2\nMARKS:98\nCLASS:foo\nNAME:asdfg\n3\nMARKS:4\nCLASS:foo\nNAME:qwerty\nID:foo\nMARKS:4\nCLASS:foo\nNAME:qwerty\n\n=====Sample Output=====\n78.00\n67.50\n67.50\n\n\"\"\"\n\nfrom collections import namedtuple\n\nn = int(input())\nfields = input().split()\nstudents = namedtuple('student', fields)\nsum = 0\ncount = 0\n\nfor i in range(n):\n    student = students(*input().split())\n    sum += int(student.MARKS)\n    count += 1\nprint(sum/count)\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n'''\n) == '78.00'\n\nassert solution('''\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n'''\n) == '81.00'\nAssertionError\n=====Tests=====\nimport collections\n\nimport pytest\n\nfrom solution import solution\n\n\n@pytest.mark.parametrize(\n    \"test_input,expected\",\n    [\n        (\"\", \"\"),\n        (\"\\n\", \"\"),\n        (\"\\n\\n\", \"\"),\n        (\"\\n\\n\\n\", \"\"),\n        (\"\\n\\n\\n\\n\", \"\"),\n        (\"\\n\\n\\n\\n\\n\", \"\"),\n    ],\n)\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\nassert solution(\"3\\nNAME\\nMARKS\\nCLASS\\nID\\n\") == \"67.50\"\n\"\"\"\n\nfrom collections import namedtuple\n\nn = int(input())\ncols = input().split()\n\nStudent = namedtuple('Student', cols)\n\ntotal = 0\nfor i in range(n):\n    students = Student(*input().split())\n    total += float(students.MARKS)\n\nprint('{:.2f}'.format(total / n))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\nassert solution('3\\nNAME\\nMARKS\\nCLASS\\nID\\n') == '67.50'\nassert solution('4\\nID\\nNAME\\nMARKS\\nCLASS\\n') == '67.50'\n'''\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    {'ID': '1', 'MARKS': '80', 'CLASS': '6a', 'NAME': 'Adrian'},\n    {'ID': '2', 'MARKS': '83', 'CLASS': '6a', 'NAME': 'Bruno'},\n    {'ID': '3', 'MARKS': '90', 'CLASS': '6b', 'NAME': 'Goran'},\n    {'ID': '4', 'MARKS': '80', 'CLASS': '6a', 'NAME': 'Bruno'},\n    {'ID': '5', 'MARKS': '79', 'CLASS': '6b', 'NAME': 'Andri'}\n) == '90.00'\nassert solution(\n    {'ID': '1', 'MARKS': '80', 'CLASS': '6a', 'NAME': 'Adrian'},\n    {'ID': '2', 'MARKS': '83', 'CLASS': '6a', 'NAME': 'Bruno'},\n    {'ID': '3', 'MARKS': '90', 'CLASS': '6b', 'NAME': 'Goran'},\n    {'ID': '4', 'MARKS': '80', 'CLASS': '6a', 'NAME': 'Bruno'},\n    {'ID': '5', 'MARKS': '79', 'CLASS': '6b', 'NAME': 'Andri'}\n) == '75.00'\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nprint(\"Test PASSED\")\n\n=========================================================\n=======================Output========================\n=======================Expected=======================\nTest PASSED\n=========================================================\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"75.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\nassert solution(\"3\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"67.50\"\n\n=====Sample Input=====\n2\nID\nMARKS\nCLASS\nNAME\n12345\n90\nABCD\n5.5\n=====Sample Output=====\n75.00\n67.50\n\n\n=====Explanation=====\nThere are 2 students in this class whose average is 73.33.\n>>> \n==="
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nID,MARKS,CLASS,NAME\\n1,90,1,Jone\\n2,91,1,Tim\\n3,92,2,Mike\\n4,93,2,Quiz\\n\") == \"90.00\"\nassert solution(\"4\\nMARKS,CLASS,NAME,ID\\n92,2,Mike,1\\n93,2,Quiz,2\\n91,1,Tim,3\\n\") == \"91.00\"\nassert solution(\"3\\nMARKS,CLASS,NAME\\n92,2,Mike\\n93,2,Quiz\\n91,1,Tim\\n\") == \"90.00\"\n==========================================================\nclass Solution:\n    def getAverage(self,stdin):\n        marks = {line.split(',')[0]:float(line.split(',')[1]) for line in stdin.splitlines()[1:]}\n        return sum(marks.values()) / len(marks)\n    \n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n\"\"\") == '78.00'\nassert solution(\"\"\"5\nMARKS      CLASS      NAME       ID        \n92          2          Calum      1         \n82          5          Scott      2         \n94          2          Jason      3         \n55          8          Glenn      4         \n82          2          Fergus     5         \n\"\"\") == '81.00'\n\n========================================"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == \"Weird\"\nassert solution('24') == \"Not Weird\"\nassert solution('0') == \"Not Weird\"\nassert solution('9') == \"Weird\"\nassert solution('3.14') == \"Not Weird\"\n\nstdin = sys.stdin.readlines()\n\npass\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(5) == \"Weird\"\nassert solution(6) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Not Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"6\") == \"Weird\"\nassert solution(\"8\") == \"Not Weird\"\nassert solution(\"10\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Weird'\nassert solution('2') == 'Not Weird'\nassert solution('4') == 'Weird'\nassert solution('6') == 'Not Weird'\nassert solution('20') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == \"Weird\"\nassert solution(24) == \"Not Weird\"\nassert solution(0) == \"Not Weird\"\nassert solution(1) == \"Weird\"\nassert solution(2) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(14) == \"Weird\"\nassert solution(20) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(3) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('9') == 'Not Weird'\nassert solution('6') == 'Weird'\nassert solution('21') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"Weird\"\nassert solution(\"24\") == \"Not Weird\"\nassert solution(\"2\") == \"Weird\"\nassert solution(\"20\") == \"Not Weird\"\nassert solution(\"100\") == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == \"Weird\"\nassert solution(6) == \"Weird\"\nassert solution(20) == \"Not Weird\"\nassert solution(1) == \"Weird\"\nassert solution(101) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(10) == \"Weird\"\nassert solution(15) == \"Not Weird\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\n=====Test Input=====\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    "
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n\"\"\") == '5'\n\"\"\"\n\n=====Test Time:=====\nTest 1:\nInput:\n------------\n<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\n------------\nOutput:\n------------\n5\n------------\nExplanation:\n------------\nThe feed and subtitle tag have one attribute each - lang.\nThe title, updated and feed tags have no attributes.\nThe link tag has three attributes - rel, type and href.\n\"\"\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 30\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 42\n\nProblem\nIn this challenge, you are required to calculate and print the sum of the score of each XML element.\n\nThe score of each element is equal to the number of attributes it has.\n\nInput Format\n\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\nConstraints\n\nThe input is guaranteed to be valid\nOutput Format\n\nPrint the sum of the scores of all the elements in the XML document.\n\nSample Input\n\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output\n\n46\nExplanation\n\nThe total score of the feed element is 6 + 10 + 14 + 6 + 6 + 6 = 46.\n\nThe total score of the title element is 1 + 1 + 1 + 1 + 1 + 0 = 6.\nThe total score of the updated element is 0 + 0 + 0 + 0 + 0 + 10 = 10.\nThe total score of the link element is 1 + 0 + 1 + 1 + 0 + 1 = 6.\nThe total score of the subtitle element is 0 + 0 + 0 + 0 + 1 + 1 = 5.\nThe total score of the description element is 1 + 0 + 0 + 0 + 1 + 1 = 5.\nThe sum of the scores of all the elements is 46 + 6 + 10 + 5 + 5 + 5 = 71.\n\"\"\"\n\nimport sys\nimport xml.etree.ElementTree as etree"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 30\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 30\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 70\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n=====Test Case 1=====\n4\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated></feed>\nExpected output:\n\n2\n\n=====Test Case 2=====\n4\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated></feed>\nExpected output:\n\n3\n\n=====Test Case 3=====\n4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nExpected output:\n\n0\n\n=====Test Case 4=====\n4\n<feed xml:lang='en'><link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated></feed>\nExpected output:\n\n0\n\n=====Test Case 5=====\n1\n<feed xml:lang='en'><link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated></feed>\nExpected output:\n\n0\n\n=====Test Case 6=====\n1\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated></feed>\nExpected output:\n\n2\n\n=====Test Case 7=====\n1\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated></feed>\nExpected output:\n\n2\n\"\"\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'<feed xml:lang='\n'en-ca'\n' xmlns='\n'http://www.w3.org/2005/Atom'\n' xmlns:openSearch='\n'http://a9.com/-/spec/opensearch/1.1/'\n'><entry><id>http://dmoz.org/'\n'<updated>2003-11-20T00:00:00'\n'</updated><title>'\n'<updated>2003-11-20T00:00:00'\n'</updated><link href='\n'<updated>2003-11-20T00:00:00'\n'</updated><category term='\n'<updated>2003-11-20T00:00:00'\n'</updated><description><updated>2003-11-20T00:00:00'\n'</updated><openSearch:totalResults>'\n'<openSearch:startIndex>1'\n'</openSearch:startIndex><openSearch'\n':itemsPerPage>1'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'<openSearch:totalResults>'\n'<openSearch:startIndex>0'\n'</openSearch:startIndex><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><openSearch:itemsPerPage>'\n'</openSearch:itemsPerPage><"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('<doc>\\n<item1>item1</item1>\\n<item2 item2=\"yes\" />\\n<item3>\\n<subitem1>subitem1</subitem1>\\n<subitem2>subitem2</subitem2>\\n</item3>\\n</doc>') == 17\nassert solution('<doc>\\n<item1>item1</item1>\\n<item2 item2=\"yes\"/>\\n</doc>') == 2\nassert solution('<doc>\\n<item1>item1</item1>\\n</doc>') == 0\n\ninputString: str = stdin.read()\nlistOfLines: List[str] = inputString.splitlines()\nlistOfLines = list(filter(lambda x: len(x) > 0, listOfLines))"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == output, solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\")\n\n=====Test 1=====\nInput\n\n3\n<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput\n\n3\n\n=====Test 2=====\nInput\n\n3\n<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput\n\n5\n\n=====Test 3=====\nInput\n\n1\n<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput\n\n5\n\n=====Test 4=====\nInput\n\n4\n<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput\n\n0\n\"\"\""
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n      <title>HackerRank</title>\n      <subtitle lang='en'>Programming challenges</subtitle>\n      <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n      <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 5\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n      <title>HackerRank</title>\n      <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == 0\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n      <title>HackerRank</title>\n    </feed>\n    \"\"\") == 1\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n      <title>HackerRank</title>\n      <subtitle>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == 3\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n      <title>HackerRank</title>\n      <subtitle>Programming challenges</subtitle>\n      <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n      <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 6\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('<a attr=\"val\"><sub>text</sub></a>') == 6\nassert solution('<a attr=\"val\"><sub>text1</sub><sub>text2</sub></a>') == 6\nassert solution('<a attr=\"val\"><sub>text1</sub><sub>text2</sub><sub>text3</sub></a>') == 8\nassert solution('<a attr=\"val\"><sub><sub><sub><sub><sub><sub>text1</sub></sub></sub></sub></sub></sub></a>') == 10\nassert solution('<a attr=\"val\"><sub><sub>text1</sub><sub>text2</sub></sub><sub><sub>text3</sub><sub>text4</sub></sub></a>') == 16\n\n======Test Cases======\nSample Test Case:\n\nSample Input 1:\n<a attr=\"val\"><sub>text</sub></a>\nSample Output 1:\n1\nSample Input 2:\n<a attr=\"val\"><sub>text1</sub><sub>text2</sub></a>\nSample Output 2:\n2\nSample Input 3:\n<a attr=\"val\"><sub>text1</sub><sub>text2</sub><sub>text3</sub></a>\nSample Output 3:\n3\n\n\"\"\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.0 3.0 4.0 5.0\") == '8.466'\nassert solution(\"-1.0 -1.0 -1.0 1.0\") == '-11.927'\n\n=====Constraints=====\nAll the given points are unique.\n=====Testcases=====\nInput\n5.0 3.0 4.0 5.0\nOutput\n9.471\nInput\n1.0 1.0 0.0 1.0\nOutput\n60.764\nInput\n0.0 1.0 0.0 1.0\nOutput\n60.764\nInput\n1.0 -1.0 0.0 1.0\nOutput\n60.764\nInput\n-1.0 -1.0 -1.0 1.0\nOutput\n-11.927\n\n=====Tutorial=====\n\n=====Code to plot graph of cos vs phi=====\n\nimport matplotlib.pyplot as plt\nimport numpy as np"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1.1 2.2 3.3\n4.4 5.5 6.6''') == '78.00'\nassert solution('''2.3 -2.9 1.6\n-3.0 -0.6 4.9''') == '-62.05'\n\n======Sample Test Case======\n>>> solution('''1.1 2.2 3.3\n4.4 5.5 6.6''')\n'78.00'\n>>> solution('''2.3 -2.9 1.6\n-3.0 -0.6 4.9''')\n'-62.05'\n\"\"\"\n\nfrom math import acos, degrees\n\nX, Y, Z, P, Q, R = list(map(float, input().split(' ')))\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.0 1.0 2.0 2.0') == 60.00\nassert solution('1.1 1.1 2.0 2.0') == 59.96\nassert solution('1.0 1.0 3.0 4.0') == 180.00\n\nSolution:\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 2 3\") == \"60.00\"\n=====Solution=====\nfrom math import acos, sqrt"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n=====Main Challenge=====\nCalculate the angle correct up to 2 decimal places.\n\n>>>>>>> 61a8b6f4e9bfd3b81b4d0bfca88df9324dd4e13f\n\"\"\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == '60.00'\nassert solution('0 0 -1 0') == '180.00'\nassert solution('-1 -2 -4 4') == '152.94'\nassert solution('1 2 -3 4') == '126.57'\nassert solution('1 2 -3 4') == '126.57'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0 2.0 3.0 4.0\") == 45.0\nassert solution(\"2.0 0.0 1.0 4.0\") == 90.0\nassert solution(\"1.0 1.0 1.0 1.0\") == 0.0\nassert solution(\"1.0 2.0 3.0 1.0\") == 60.0\nassert solution(\"1.0 1.0 2.0 2.0\") == 90.0\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '60.00', solution('1 2 3 4')\nassert solution('1 5 6 0') == '180.00', solution('1 5 6 0')\nassert solution('-1 -1 -1 1') == '0.00', solution('-1 -1 -1 1')\nassert solution('0 0 0 0') == '0.00', solution('0 0 0 0')\nprint('Test passed')\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == ''\nassert solution('1 2 3 4') == ''\nassert solution('1 1 -2 2') == '90.00'\nassert solution('1 1 -1 2') == '45.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == '60'\nassert solution('1 1 -1 1') == '30'\nassert solution('-1 -1 -1 1') == '0'\nassert solution('0 0 0 0') == '0'\nassert solution('0 1 2 3') == '90'\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 one two three five') == 4\nassert solution('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 32\nassert solution('g f e d c b a') == 19\nassert solution('j i u') == 0\nassert solution('m l k j o p q') == 4\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"Hello\") == \"1\"\nassert solution(\"aei\") == \"2\"\nassert solution(\"uaeiou\") == \"0\"\nassert solution(\"y u\") == \"2\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\nhi\nbye''') == 1\nassert solution('''4\neye\non\nhit''') == 2\nassert solution('''5\nxenon\ntokyo\nabc\nxyz''') == 3\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('i i i i i i a a a p p p y y y y') == 'p'\nassert solution('e e e e e') == 'e'\nassert solution('o o u u u i i i i i i a a a a a a u u u u u i i i i i i i a a a a a a a u u u u u i i i i i i i i u u u u u u i i i u u u u u u i i i i i u u u u u u u u i i i i i i i u u u u u u u u i u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u u"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aeiou') == 2\nassert solution('aeiouy') == 5\nassert solution('aA') == 0\nassert solution('y') == 1\nassert solution('bcdfghjklmnpqrstvwxyz') == 26\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"lint code\") == 5\nassert solution(\"programming is awesome\") == 10\nassert solution(\"tell me no lies\") == 0\nassert solution(\"very very awesome\") == 15\nassert solution(\"hello world\") == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 3\nassert solution('1 2') == 2\nassert solution('2 2') == 2\nassert solution('1 2 2') == 2\nassert solution('1 2 2 3 4') == 6\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 abc dd ef\") == 3\nassert solution(\"2 abc dd\") == 2\nassert solution(\"2 abc dd ef abc dd ef\") == 3\nassert solution(\"2 abc dd ef abc dd ef xyz\") == 4\nassert solution(\"1 a\") == 1\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AA bb cc dd ee\") == 6\nassert solution(\"AA bb cc dd aa\") == 1\nassert solution(\"yummy yummy yummy yummy\") == 15\n\n=====\nOutput:\n=====\n$ python3 solution.py < tests/Y11R5P1/A.in\n2\naa bb cc dd ee\n6\nyummy yummy yummy yummy\n15\n\n=====\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nhello\\nbee\") == 6\nassert solution(\"2\\nhooraaaaaaaaaaaay\") == 0\nassert solution(\"2\\nbaaaaaaaaaaaaaaaale\") == 0\nassert solution(\"2\\n\") == 0\nassert solution(\"1\\nab\") == 0\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"XX\") == True\nassert solution(\"CMXCIX\") == True\nassert solution(\"CDXXI\") == False\nassert solution(\"MMMDCCCLXXXVIII\") == False\nassert solution(\"DCCLXXIX\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"X\"\n) == True\nassert solution(\n\"IV\"\n) == True\nassert solution(\n\"IX\"\n) == True\nassert solution(\n\"XL\"\n) == True\nassert solution(\n\"XC\"\n) == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\nprint(solution(stdin))\n=====Test Case 1=====\n\n=====Test Case 2=====\n\n=====Test Case 3=====\n\n=====Test Case 4=====\n\n=====Test Case 5=====\n\n=====Test Case 6=====\n\n=====Test Case 7=====\n\n=====Test Case 8=====\n\n=====Test Case 9=====\n\n=====Test Case 10=====\n\n=====Test Case 11=====\n\n=====Test Case 12=====\n\n=====Test Case 13=====\n\n=====Test Case 14=====\n\n=====Test Case 15=====\n\n=====Test Case 16=====\n\n=====Test Case 17=====\n\n=====Test Case 18=====\n\n=====Test Case 19=====\n\n=====Test Case 20=====\n\n=====Test Case 21=====\n\n=====Test Case 22=====\n\n=====Test Case 23=====\n\n=====Test Case 24=====\n\n=====Test Case 25=====\n\n=====Test Case 26=====\n\n=====Test Case 27=====\n\n=====Test Case 28=====\n\n=====Test Case 29=====\n\n=====Test Case 30=====\n\n=====Test Case 31=====\n\n=====Test Case 32=====\n\n=====Test Case 33=====\n\n=====Test Case 34=====\n\n=====Test Case 35=====\n\n=====Test Case 36=====\n\n=====Test Case 37=====\n\n=====Test Case 38=====\n\n=====Test Case 39=====\n\n=====Test Case 40=====\n\n=====Test Case 41=====\n\n=====Test Case 42=====\n\n=====Test Case 43=====\n\n=====Test Case 44=====\n\n=====Test Case 45=====\n\n=====Test Case 46=====\n\n=====Test Case 47=====\n\n=====Test Case 48=====\n\n=====Test Case 49=====\n\n=====Test Case 50=====\n\n=====Test Case 51=====\n\n=====Test Case 52=====\n\n=====Test Case 53=====\n\n=====Test Case 54=====\n\n=====Test Case 55=====\n\n=====Test Case 56=====\n\n=====Test Case 57=====\n\n=====Test Case 58=====\n\n=====Test Case 59=====\n\n=====Test Case 60=====\n\n=====Test Case 61=====\n\n=====Test Case 62=====\n\n=====Test Case 63=====\n\n=====Test Case 64=====\n\n=====Test Case 65=====\n\n=====Test Case 66=====\n\n=====Test Case 67=====\n\n=====Test Case 68=====\n\n=====Test Case 69=====\n\n=====Test Case 70=====\n\n=====Test Case 71=====\n\n=====Test Case 72=====\n\n=====Test Case 73=====\n\n=====Test Case 74=====\n\n=====Test Case 75=====\n\n=====Test Case 76=====\n\n=====Test Case 77=====\n\n=====Test Case 78=====\n\n=====Test Case 79=====\n\n=====Test Case 80=====\n\n=====Test Case 81=====\n\n=====Test Case 82=====\n\n=====Test Case 83=====\n\n=====Test Case 84=====\n\n=====Test Case 85=====\n\n=====Test Case 86=====\n\n=====Test Case 87=====\n\n=====Test Case 88=====\n\n=====Test Case 89=====\n\n=====Test Case 90=====\n\n=====Test Case 91=====\n\n=====Test Case 92=====\n\n=====Test Case 93=====\n\n=====Test Case 94=====\n\n=====Test Case 95=====\n\n=====Test Case 96=====\n\n=====Test Case 97=====\n\n=====Test Case 98=====\n\n=====Test Case 99=====\n\n=====Test Case 100=====\n\n=====Test Case 101=====\n\n=====Test Case 102=====\n\n=====Test Case 103=====\n\n=====Test Case 104=====\n\n=====Test Case 105=====\n\n=====Test Case 106=====\n\n=====Test Case 107=====\n\n=====Test Case 108=====\n\n=====Test Case 109=====\n\n=====Test Case 110=====\n\n=====Test Case 111=====\n\n=====Test Case 112=====\n\n=====Test Case 113=====\n\n=====Test Case 114=====\n\n=====Test Case 115=====\n\n=====Test Case 116=====\n\n=====Test Case 117=====\n\n=====Test Case 118=====\n\n=====Test Case 119=====\n\n=====Test Case 120=====\n\n=====Test Case 121=====\n\n=====Test Case 122=====\n\n=====Test Case 123=====\n\n=====Test Case 124=====\n\n=====Test Case 125=====\n\n=====Test Case 126=====\n\n=====Test Case 127=====\n\n=====Test Case 128=====\n\n=====Test Case 129=====\n\n=====Test Case 130=====\n\n=====Test Case 131=====\n\n=====Test Case 132=====\n\n=====Test Case 133=====\n\n=====Test Case 134=====\n\n=====Test Case 135=====\n\n=====Test Case 136=====\n\n=====Test Case 137=====\n\n=====Test Case 138=====\n\n=====Test Case 139=====\n\n=====Test Case 140=====\n\n=====Test Case 141=====\n\n=====Test Case 142=====\n\n=====Test Case 143=====\n\n=====Test Case 144=====\n\n=====Test Case 145=====\n\n=====Test Case 146=====\n\n=====Test Case 147=====\n\n=====Test Case 148=====\n\n=====Test Case 149=====\n\n=====Test Case 150=====\n\n=====Test Case 151=====\n\n=====Test Case 152=====\n\n=====Test Case 153=====\n\n=====Test Case 154=====\n\n=====Test Case 155=====\n\n=====Test Case 156=====\n\n=====Test Case 157=====\n\n=====Test Case 158=====\n\n=====Test Case 159=====\n\n=====Test Case 160=====\n\n=====Test Case 161=====\n\n=====Test Case 162=====\n\n=====Test Case 163=====\n\n=====Test Case 164=====\n\n=====Test Case 165=====\n\n=====Test Case 166=====\n\n=====Test Case 167=====\n\n=====Test Case 168=====\n\n=====Test Case 169=====\n\n=====Test Case 170=====\n\n=====Test Case 171=====\n\n=====Test Case 172=====\n\n=====Test Case 173=====\n\n=====Test Case 174=====\n\n=====Test Case 175=====\n\n=====Test Case 176=====\n\n=====Test Case 177=====\n\n=====Test Case 178=====\n\n=====Test Case 179=====\n\n=====Test Case 180=====\n\n=====Test Case 181=====\n\n=====Test Case 182=====\n\n=====Test Case 183=====\n\n=====Test Case 184=====\n\n=====Test Case 185=====\n\n=====Test Case 186=====\n\n=====Test Case 187=====\n\n=====Test Case 188=====\n\n=====Test Case 189=====\n\n=====Test Case 190=====\n\n=====Test Case 191=====\n\n=====Test Case 192=====\n\n=====Test Case 193=====\n\n=====Test Case 194=====\n\n=====Test Case 195=====\n\n=====Test Case 196=====\n\n=====Test Case 197=====\n\n=====Test Case 198=====\n\n=====Test Case 199=====\n\n=====Test Case 200=====\n\n=====Test Case 201=====\n\n=====Test Case 202=====\n\n=====Test Case 203=====\n\n=====Test Case 204=====\n\n=====Test Case 205=====\n\n=====Test Case 206=====\n\n=====Test Case 207=====\n\n=====Test Case 208=====\n\n=====Test Case 209====="
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"III\") == True\nassert solution(\"IV\") == True\nassert solution(\"IX\") == True\nassert solution(\"LVIII\") == True\nassert solution(\"MCMXCIV\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"X\") == False\nassert solution(\"V\") == True\nassert solution(\"XL\") == True\nassert solution(\"IV\") == True\nassert solution(\"XIV\") == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"XXI\") == True\nassert solution(\"IV\") == True\nassert solution(\"XCIX\") == True\nassert solution(\"CXX\") == False\nassert solution(\"CCXLIII\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('I') == True\nassert solution('II') == True\nassert solution('III') == True\nassert solution('IV') == True\nassert solution('V') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXC') == True\nassert solution('MMMDCCCLXXXVIII') == True\nassert solution('MMMDCCCLXXXIX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"XX\") == False, 'wrong answer'\nassert solution(\"XIV\") == True, 'wrong answer'\nassert solution(\"XXIV\") == True, 'wrong answer'\nassert solution(\"CDXXI\") == True, 'wrong answer'\nassert solution(\"XXI\") == False, 'wrong answer'\n=====\nWrite a program to check whether a given number is an ugly number.\n\nUgly numbers are positive numbers whose prime factors only include 2, 3, 5.\n\nExample:\n\nInput: 6\nOutput: true\nExplanation: 6 = 2 \u00d7 3\n\nInput: 8\nOutput: true\nExplanation: 8 = 2 \u00d7 2 \u00d7 2\n\nInput: 14\nOutput: false \nExplanation: 14 is not ugly since it includes another prime factor 7.\n\nNote:\n\n1 is typically treated as an ugly number.\nInput is within the 32-bit signed integer range: [\u2212231,  231 \u2212 1].\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('X') == 'False'\nassert solution('XL') == 'True'\nassert solution('CDXLIV') == 'True'\nassert solution('MMMCMXCIX') == 'True'"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+918012345678') == '+91 8012345678'\nassert solution('91 8012345678') == '91 8012345678'\nassert solution('+91 8012345678') == '+91 8012345678'\nassert solution('818012345678') == '91 818012345678'"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"91 67432 123555\") == \"\"\"+91 67432 123555\n+91 67432 123555\n+91 67432 123555\n+91 67432 123555\n+91 67432 123555\"\"\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 2 5 4 7 1 3') == '+91 7852 5448 3713'\n'''\n\nimport sys\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('080942519680') == ['(080) 9425 19680', '(080) 9425, (080) 9462, (080) 9462 59680']\nassert solution('0809425196801') == ['(080) 9425 196801', '(080) 9425, (080) 9462, (080) 9462 59680']\nassert solution('865382873') == ['(865) 3828 73']\nassert solution('865382873 91') == ['(865) 3828 73', '(865) 3828 73', '(865) 3828 739']\nassert solution('938348698768') == ['(938) 34869 8768']\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9,223,372,036,854,775,807\") == [\n    \"+91 888888888\",\n    \"+91 888888888\",\n    \"+91 888888888\",\n]\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"07895462130\") == '+91 78954 62130'\nassert solution(\"919875641230\") == '+91 98475 62130'\nassert solution(\"017895462130\") == '+91 78954 62130'\n\nimport re\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n7\\n5\\n3\\n5\\n0\\n1\\n9') == '''0\n1\n3\n5\n5\n7\n8\n9'''"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9155673898\") == \"+91 56738 98\"\nassert solution(\"91956\") == \"+91 91956\"\nassert solution(\"9155\") == \"+91 155\"\nassert solution(\"9182846\") == \"+91 846\"\nassert solution(\"912341234\") == \"+91 1234 1234\"\nprint(solution(input()))\n=======\nimport os\nimport io\nimport time\nimport json\nimport sys\nimport operator\nimport re\nimport datetime\nimport copy\nimport heapq"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('977981739810 79897897789') == '+977981739810 79897897789'\nassert solution('977981739810 79897897789 10') == '+977981739810 79897897789'\nassert solution('977981739810 79897897789 010') == '+977981739810 79897897789'\nassert solution('977981739810 79897897789 010 101010') == '+977981739810 79897897789'\n\nInput Format:\nThe first line contains an integer N, the number of mobile numbers.\n\nN lines follow each containing a mobile number.\n\nOutput Format:\nPrint N mobile numbers on separate lines in the required format.\n\nSample Input:\n9\n977981739810 79897897789\n977981739811 79897897789\n977981739812 79897897789\n977981739813 79897897789\n977981739814 79897897789\n977981739815 79897897789\n977981739816 79897897789\n977981739817 79897897789\n977981739818 79897897789\n977981739819 79897897789\n\nSample Output:\n+977981739810 79897897789\n+977981739811 79897897789\n+977981739812 79897897789\n+977981739813 79897897789\n+977981739814 79897897789\n+977981739815 79897897789\n+977981739816 79897897789\n+977981739817 79897897789\n+977981739818 79897897789\n+977981739819 79897897789\n\nimport sys\nimport re\nn = int(input())\n\npattern = r'[+]91?[0-9]{10}'\nfor _ in range(n):\n    line = sys.stdin.readline()\n    try:\n        match = re.search(pattern, line).group()\n        print(match)\n    except:\n        pass"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+91 8965432167\") == \"8965432167\"\nassert solution(\"938474592\") == \"8938474592\"\nassert solution(\"+1 (123) 456-7890\") == \"1234567890\"\nassert solution(\"123 456 789\") == \"123456789\"\nassert solution(\"123 456-789\") == \"123456789\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nArjun 70 70 70\\nMalika 52 56 60\\nMalika') == '56.00'\n=====Test Case 1=====\n>>> solution(\"3\\nArjun 70 70 70\\nMalika 52 56 60\\nMalika\")\n56.00\n\n>>> solution(\"1\\nArjun\\n70 70 70\")\n70.00\n\n>>> solution(\"3\\nArjun 70 70 70\\nMalika 52 56 60\\nMalika\")\n56.00\n\n>>> solution(\"0\\n\")\n0.00\n\n>>> solution(\"-1\\n\")\n0.00\n\n=====Test Case 2=====\n>>> solution(\"6\\nArjun 70 70 70\\nMalika 52 56 60\\nMalika\")\n56.00\n\n>>> solution(\"5\\nArjun 70 70 70\\nMalika 52 56 60\\nMalika\")\n56.00\n\n>>> solution(\"7\\nArjun 70 70 70\\nMalika 52 56 60\\nMalika\")\n56.00\n\n>>> solution(\"-1\\n\")\n0.00\n\n>>> solution(\"3\\nArjun 70 70 70\\nMalika 52 56 60\\nMalika\")\n56.00\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nJeff\\n3\\n3\\n4\\n5\") == '3.00'\nassert solution(\"5\\nSteven\\n4\\n3\\n7\") == '4.67'\nassert solution(\"5\\nSteven\\n4\\n3\\n7\") == '4.67'\n\n=====Execution Time=====\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"'alpha': [20,30,40]\\n'beta': [30,50,70]\\nquery_name = 'beta'\") == \"50.00\"\nassert solution(\"'alpha': [50,50,50]\\n'beta': [30,50,70]\\nquery_name = 'beta'\") == \"60.00\"\nassert solution(\"'alpha': [20,30,40]\\n'beta': [30,50,70]\\nquery_name = 'alpha'\") == \"33.33\"\n\"\"\"\n\nfrom ast import literal_eval\nimport sys"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nHarry\\n37.21\\nBerry\\n37.21\\nTina\\n37.2\\nAkriti\\n41\\nHarsh\\n39\") == \"42.00\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nHarry\\n37.21\\nBerry\\n37.21\\nTina\\n37.2\\nAkriti\\n41\\nHarsh\\n39\") == '37.2'\nassert solution(\"5\\nHarsh\\n25\\nBeria\\n32\\nKakashi\\n33\") == '25.75'\nassert solution(\"5\\nBeria\\n30\\nHarsh\\n26\\nKakashi\\n23\") == '32.67'\n\n=====Sample Test=====\nTest.it(\"should return '37.2'\")\nTest.assert_equals(solution(\"5\\nHarry\\n37.21\\nBerry\\n37.21\\nTina\\n37.2\\nAkriti\\n41\\nHarsh\\n39\"), '37.2')\nTest.assert_equals(solution(\"5\\nHarsh\\n25\\nBeria\\n32\\nKakashi\\n33\"), '25.75')\nTest."
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nArun 70 70 70\\nMalika 52 60 50\\nMalika') == '52.00'\nassert solution('2\\nHarsh 25 26.5 28\\nAnurag 26 28 30') == '26.50'\nassert solution('2\\nHarsh 49 50 48\\nAnurag 26 28 30') == '42.00'\n\n=====Test Case Explanation=====\nYou are required to calculate the average marks of each student and to print the student's name along with his/her average marks in a single line.\n\nTo calculate the average marks you need to divide the cumulative sum by the number of students.\n\nHere, the cumulative sum is calculated by adding all the marks of each student and then dividing by the total number of students.\n\nmarks key:value pairs are\n'alpha': [20, 30, 40]\n'beta': [30, 50, 70]\nquery_name = 'beta'\nThe query_name is 'beta'. beta's average score is (30+50+70)/3 = 50\n\nNote: You can modify the input code to test your solution on custom input by chaning the input function from input() to input().\n=======================================================================================\n\nWrite 5 lines of code to test the correctness of solution:\n\n=====Problem Statement=====\nThe provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.\n\n=====Example=====\nmarks key:value pairs are\n'alpha': [20,30,40]\n'beta': [30,50,70]\nquery_name = 'beta'\nThe query_name is 'beta'. beta's average score is (30+50+70)/3 = 50\n\n=====Input Format=====\nThe first line contains the integer n, the number of students' records. The next n lines contain the names and marks obtained by a student, each value separated by a space. The final line contains query_name, the name of a student to query.\n\n=====Constraints=====\n2\u2264n\u226410\n0\u2264marks[i]\u2264100\nlength of marks arrays = 3\n\n=====Output Format=====\nPrint one line: The average of the marks obtained by the particular student correct to 2 decimal places.\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abhi 5 0.7 3.6 beta 5.6\") == '5.5'\nassert solution(\"abhi 5 0.7 3.6 beta 5.6\") == '5.5'\n\"\"\"\nimport re\nstd = input()\nmarks = {}\nwhile std:\n    std = re.split(r\"\\s+\", std)\n    marks[std[0]] = [float(std[1]), float(std[2]), float(std[3])]\n    std = input()\n\nquery = input()\navg = sum(marks[query]) / len(marks[query])\nprint(\"%.2f\" % avg)"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\nHarry\n37.21\nBerry\n37.21\nTina\n37.2\nAkriti\n41\nHarsh\n39\n\n\"\"\") == \"39.00\"\nassert solution(\"\"\"5\nHarsh\n20\nBeria\n20\nKaran\n19\n\n\"\"\") == \"19.00\"\n\n\"\"\"\n\n'''\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nArjun 70 70 70 Arjun\") == \"70.00\"\nassert solution(\"5\\nHarsh 25 26.5 28 29.0 Harsh\") == \"26.50\"\n\n=====Test Case 2=====\nSample Input 0:\n3\nKrishna 67 68 69\nArjun 70 70 70\nMalika 52 56 60\nMalika\nSample Output 0:\n56.00\n\nSample Input 1:\n3\nHarsh 25 26.5 28 29.0 Harsh\nHarsh 46 46\nAnurag 26 28 30 30 Anurag\nAnurag\nSample Output 1:\n26.50\n\n=====Sample Test Cases=====\nTest Case 1\nSample input is stored in variable n\nSample output is stored in variable comp_ans\n\"\"\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nHelo World\\nMark 4\\nMark 5\\nMark 6\\nMark 7') == 'Mark 4\\nMark 5\\nMark 6\\nMark 7'\nassert solution('4\\nHelo World\\nMark 5\\nMark 6\\nMark 7\\nMark 8\\nMark 9\\nMark 10') == 'Mark 5\\nMark 6\\nMark 7\\nMark 8\\nMark 9\\nMark 10'\nassert solution('4\\nHelo World\\nMark 4\\nMark 5\\nMark 6\\nMark 7\\nMark 8\\nMark 9\\nMark 10') == 'Mark 4\\nMark 5\\nMark 6\\nMark 7\\nMark 8\\nMark 9\\nMark 10'\nassert solution('2\\nHelo World\\nMark 4\\nMark 5\\nMark 6\\nMark 7') == 'Mark 4\\nMark 5\\nMark 6\\nMark 7'\nassert solution('2\\nHelo World\\nMark 5\\nMark 6\\nMark 7\\nMark 8\\nMark 9\\nMark 10') == 'Mark 5\\nMark 6\\nMark 7\\nMark 8\\nMark 9\\nMark 10'\n=====Tests=====\nOK\n'''"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Henry Davids\\nMary George\\n45\\nM\\n55\\nM\\n\") == 'Mr. Henry Davids\\nMs. Mary George'\n=====TEST=====\nimport sys\nfrom io import StringIO\nimport unittest\n\nclass Test_test(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = StringIO(input), StringIO()\n        resolve()\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(output, sys.stdout.getvalue().strip())\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"Henry Davids\nMary George\n45\nM\n55\nM\"\"\"\n        output = \"\"\"Mr. Henry Davids\nMs. Mary George\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"John Doe\nMike T.\n34\nM\n55\nM\"\"\"\n        output = \"\"\"Mr. John Doe\nMs. Mike T.\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"Rajesh Ambani\nKumar Chetan\n20\nF\n25\nM\"\"\"\n        output = \"\"\"Mr. Rajesh Ambani\nMs. Kumar Chetan\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"M 10 F 3\") == \"Mr. 10 Ms. 3\"\nassert solution(\"John Doe 23 M\") == \"Ms. Doe 23\"\nassert solution(\"123456789 10 F 3\") == \"Ms. 123456789\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"M 2 F 2\") == \"M 2 F 2\"\nassert solution(\"M 1 F 1\") == \"M 1 F 1\"\nassert solution(\"M 1 F 1 M 1 F 1\") == \"M 1 F 1 M 1 F 1\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''George Michael 20 M\nPrayer in the afternoon 18 13 F\nTo be, or not to be that is the question 24 3 M\nWhether 'tis nobler in the mind to suffer The slings and arrows of outrageous fortune Or to take Arms against a Sea of troubles And by opposing end them. To die, to sleep; no more; and by a sleep to say we end The heartache, and the thousand natural shocks That flesh is heir to. ''') == '''George Michael\nPrayer in the afternoon\nTo be, or not to be that is the question\nWhether 'tis nobler in the mind to suffer\nThe slings and arrows of outrageous fortune\nOr to take Arms against a Sea of troubles\nAnd by opposing end them. To die, to sleep;\nNo more; and by a sleep to say we end\nThe heartache, and the thousand natural shocks\nThat flesh is heir to.'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\nJohn Locke\nThomas Aquinas\nDavid Hume\nRene Descartes\nJoseph Fourier\nMartin Heidegger\nAnatole Lucan''') == \\\n\"\"\"Anatole Lucan\nDavid Hume\nJohn Locke\nMartin Heidegger\nRene Descartes\nThomas Aquinas\nJoseph Fourier\n\"\"\", solution('''4\nFriedrich Nietzsche\nSigmund Freud\nOtto Von Mises\nRosa Luxemburg''') == \\\n\"\"\"Rosa Luxemburg\nSigmund Freud\nFriedrich Nietzsche\nOtto Von Mises\n\"\"\", solution('''6\nSteve Jobs\nBill Gates\nJeff Bezos\nMusk\nElon Musk''') == \\\n\"\"\"Elon Musk\nBill Gates\nJeff Bezos\nSteve Jobs\nMusk\n\"\"\", solution('''3\nThomas Aquinas\nDavid Hume\nRene Descartes''') == \\\n\"\"\"Rene Descartes\nThomas Aquinas\nDavid Hume\n\"\"\", solution('''0''') == ''\n\"\"\"\n\n\"\"\"\n\n## Hints\n\n**Read this problem statement carefully!**\n\n> You're given a string `s` of length `n` and a function `f`.\n>\n> You have to print a new string `t` of length `n` such that `t[i]` is `f(s[i])` for every valid `i` (0-indexed) such that `0 \u2264 i < n`.\n>\n> **Note** that `f` is guaranteed to be a valid function, that is `f` is a function such that `f(s[i])` is a valid `i` for every valid `i` (0-indexed) such that `0 \u2264 i < n`.\n>\n> Note that you don't have to call the given function `f` explicitly.\n>\n> **Example:**\n>\n> * `s = 'code'` and `f = lambda x: x.lower()`\n>     * `t = 'code'`\n> * `s = 'This'` and `f = lambda x: x.lower()`\n>     * `t = 'this'`\n\n**There are multiple ways of solving this problem!**\n\n> **Method 1:**\n>\n> As we know, we can print the result in multiple ways. One way is to iterate over the string `s` and do something like this:\n>\n>     ```\n>     t = \"\"\n>     for i in range(0, len(s)):\n>         t += f(s[i])\n>     ```\n>\n> We can also use `map` to print the same result in one line of code.\n\n> **Method 2:**\n>\n> Instead of iterating over the string, we can use the `apply` function to do the required task in one line. We can do this in two ways:\n>\n>     * `apply(f, s)` will apply `f` to every element of `s`.\n>     * `apply(f, s, len(s))` will apply `f` to every element of `s` till the length of `s`.\n\n> Below is the implementation of the above approach:\n>\n>     ```python\n>     from functools import reduce\n>\n>     def solution(s: str, f: Callable) -> str:\n>         return reduce(lambda x, y: x + y, map(f, s))\n>     ```\n>\n>     **Note:** The above approach is not the only way to solve this problem, and there are other ways!\n\n> **Method 3:**\n>\n> We can also use a built-in function `reduce` to do the same task. We can also pass an optional parameter `initializer` to the `reduce` function.\n>\n>     ```python\n>     from functools import reduce\n>\n>     def solution(s: str, f: Callable, initializer: str) -> str:\n>         return reduce(lambda x, y: x + y, map(f, s), initializer)\n>     ```\n>\n>     **Note:** The `initializer` is used only when the length of `s` is not known.\n>\n> **Method 4:**\n>\n> It can also be done in a single line. We can use the `lambda` function to create a temporary function. The following code does the same thing as the above four methods.\n>\n>     ```python\n>     from functools import reduce\n>\n>     def solution(s: str, f: Callable) -> str:\n>         return reduce(lambda x, y: x + y, map(f, s))\n>     ```\n>\n>     **Note:** This approach uses a temporary function, which is an overhead.\n>\n> **Method 5:**\n>\n> The last, and the best, solution is to use a built-in function `filter`. We can use `lambda` function to create a temporary function.\n>\n>     ```python\n>     from functools import reduce\n>\n>     def solution(s: str, f: Callable) -> str:\n>         return reduce(lambda x, y: x + y, filter(f, s))\n>     ```\n>\n>     **Note:** This approach does not use a temporary function, but we can use a lambda function to create a temporary function.\n\n## Test Cases\n## ----------\n##\n##     >>> solution(\"code\", lambda x: x.lower())\n##     'code'\n##     >>> solution(\"This\", lambda x: x.lower())\n##     'this'\n##     >>> solution(\"code\", lambda x: x.lower())\n##     'code'\n##     >>> solution(\"code\", lambda x: x.lower())\n##     'code'\n##     >>> solution(\"\", lambda x: x.lower())\n##     ''\n##     >>> solution(\"code\", lambda x: x.lower())\n##     'code'\n\n## Inspired by: [HumanEval](https://github.com/openai/human-eval)\n\n## Solution by: [Johnny Vestergaard](https://github.com/JohnnyVestergaard)\n## ([source](https://github.com/JohnnyVestergaard/Python/blob/main/tests/lib/comparison.py))\n\n##\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Jhon Doe\\nMike T. Doe\\nBob Smith\\n2\\nMike T. Doe\\nJhon Doe\\n2\\nBob Smith\\nJhon Doe\\n1\\n') == 'Mr. Mike T. Doe\\nMr. Jhon Doe\\nMs. Bob Smith\\n'\n>>>>>>> 9b3f396d94fb204292b94f897479298261a9f32d\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nMike Thomson 20 M\\nRobert Bustle 32 M\") == \"Mr. Mike Thomson\\nMr. Robert Bustle\"\n=======\nfrom typing import List\n\nimport os\nimport io\nimport collections\nimport sys"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"Yue qi lan\") == \"Mr. Yue Qi Lan\"\nassert solution(\"Mary George\") == \"Ms. Mary George\"\n=======\nprint(solution(\"Yue qi lan\"))\nprint(solution(\"Mary George\"))\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''Joey Tribbiani\nMonica Geller\nChandler Bing\nPhoebe Buffay''') == '''Joey Tribbiani\nChandler Bing\nPhoebe Buffay\nMonica Geller'''\nassert solution('''Chandler Bing\nPhoebe Buffay\nJoey Tribbiani\nMonica Geller''') == '''Phoebe Buffay\nJoey Tribbiani\nChandler Bing\nMonica Geller'''\n\n=====TEST=====\nimport re\nimport sys\nimport collections\nimport statistics\nimport itertools\nimport timeit\n\nstdin = sys.stdin.read()\ninput = stdin.split(\"\\n\")"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('John\\nDoe\\n40\\nM') == 'Mr. John Doe\\n'\nassert solution('Jane\\nSmith\\n35\\nF') == 'Ms. Jane Smith\\n'\nassert solution('David\\nSmith\\n64\\nM') == 'Mr. David Smith\\n'\nassert solution('Mary\\nGeorge\\n45\\nF') == 'Ms. Mary George\\n'\n=======\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 3\") == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution(\"2 2 3 3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 2, 5, 1) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\nprint(solution(3, 2, 5, 1), \"\\n\")\n\nassert solution(2, 2, 2, 2) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\nprint(solution(2, 2, 2, 2), \"\\n\")\n\nassert solution(1, 1, 2, 1) == [[0, 0, 0]]\nprint(solution(1, 1, 2, 1), \"\\n\")\n\nassert solution(1, 2, 1, 0) == []\nprint(solution(1, 2, 1, 0), \"\\n\")\n\nassert solution(1, 1, 1, 100) == [[0]]\nprint(solution(1, 1, 1, 100), \"\\n\")"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2 3\") == \"2 1 1 0\"\nassert solution(\"2 2 2 3\") == \"0 0 2 2 0 1 2 2 0 2 1 1 1 2 1 2 2 0 2 1 0 0 2 0 2 0 1 0 2 1 1 0 1 2 1 1 1 1 1 2 1 1 1 0 1 0 1 0 1 2 1 0 2 0 2 1 0 2 2 0 2 0 1 0 1 2 2 1 2 2 1 2 2 2 2 1 1 0 2 1 1 1 2 1 0 1 0 0 2 1 2 2 1 0 2 2 0 1 0 2 2 2 2 1 1 1 2 1 1 1 1 1 0 1 0 2 0 0 0 1 2 1 2 2 0 1 1 0 2 0 2 2 1 2 2 2 1 0 1 2 2 2 2 1 1 0 2 0 2 0 2 1 1 0 1 2 1 0 1 1 2 1 0 2 2 1 2 1 1 0 2 2 0 2 1 2 0 2 2 1 2 2 1 1 0 1 2 0 2 0 1 1 1 2 2 1 0 2 1 2 2 1 0 2 2 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 2 0 1 0 2 2 0 1 1 2 2 0 1 0 1 2 1 0 1 1 2 2 1 2 2 1 1 2 0 2 0 2 2 1 1 1 1 2 2 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution('1 2 3 5') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3]]\n=====Output Format=====\nPrint the list in lexicographic increasing order.\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nprint(solution('1 2 3 4'))\nprint(solution('1 2 3 5'))\n=====Time Limit=====\n1.0 sec(s) for each input file.\n\n=====Memory Limit=====\n64 MB.\n\n=====Note=====\nThere is only one correct solution for each test set.\nYou can use the same input if you wish.\nPlease do not simply copy the solution it is intended to be solved by the function.\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution('1 2 3 4') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 1, 0], [3, 1, 1], [3, 1, 2]]\n\n'''\n\nx, y, z, n = [int(x) for x in input().split(' ')]\n\nprint([[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n])\n\n\n\nprint([[i, j, k] for i in range(1, 4) for j in range(1, 4) for k in range(1, 4) if i + j + k!= 4])"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n1\\n3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"1\\n1\\n1\\n4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"2\\n2\\n2\\n4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"2\\n2\\n2\\n6\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n=====Output=====\nPrint the list of lists in lexicographical order\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nassert solution(\"1\\n1\\n1\\n3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 3\") == \"[0,0,0],[0,0,1],[0,0,2],[0,1,0],[1,0,0],[1,1,0]\"\nassert solution(\"2 2 1 1\") == \"[0,0,0],[0,1,0],[0,2,0],[1,0,0],[1,1,0],[2,0,0]\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n=====Output Format=====\nPrint the list of lists in lexicographic order.\n\n3\n\n1\n\n[[0, 0, 0], [1, 0, 0], [1, 1, 1]]\n\n\"\"\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3,2,1,5) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\nprint('Passed')\n=====Test=====\nimport sys, os\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n2\\n3\\n') == [\n    [0, 0, 0],\n    [0, 0, 1],\n    [0, 0, 2],\n    [0, 1, 0],\n    [0, 1, 1],\n    [0, 1, 2],\n    [1, 0, 0],\n    [1, 0, 1],\n    [1, 0, 2],\n    [1, 1, 0],\n    [1, 1, 1],\n    [1, 1, 2]\n]\nassert solution('1\\n2\\n3\\n4\\n') == [\n    [0, 0, 0],\n    [0, 0, 1],\n    [0, 0, 2],\n    [0, 1, 0],\n    [0, 1, 1],\n    [0, 1, 2],\n    [1, 0, 0],\n    [1, 0, 1],\n    [1, 0, 2],\n    [1, 1, 0],\n    [1, 1, 1],\n    [1, 1, 2]\n]\nassert solution('1\\n2\\n3\\n4\\n5\\n') == [\n    [0, 0, 0],\n    [0, 0, 1],\n    [0, 0, 2],\n    [0, 1, 0],\n    [0, 1, 1],\n    [0, 1, 2],\n    [1, 0, 0],\n    [1, 0, 1],\n    [1, 0, 2],\n    [1, 1, 0],\n    [1, 1, 1],\n    [1, 1, 2],\n    [2, 0, 0],\n    [2, 0, 1],\n    [2, 0, 2],\n    [2, 1, 0],\n    [2, 1, 1],\n    [2, 1, 2],\n    [3, 0, 0],\n    [3, 0, 1],\n    [3, 0, 2],\n    [3, 1, 0],\n    [3, 1, 1],\n    [3, 1, 2]\n]\n\n=====Output Format=====\nPrint the list of lists in lexicographic order; each inner list must be printed on a new line\nPrint an integer that represents the number of permutations that result in a solution\n\n'''\n\nx, y, z, n = int(input()), int(input()), int(input()), int(input())"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == e\nprint(solution(s))\n'''\n\nimport sys\ninput()\nc1 = list(map(float, input().split()))\nc2 = list(map(float, input().split()))\n\nprint(\"{:.2f} + {:.2f}i\".format(c1[0] + c2[0], c1[1] + c2[1]))\nprint(\"{:.2f} - {:.2f}i\".format(c1[0] - c2[0], c1[1] - c2[1]))\nprint(\"{:.2f} * {:.2f}i\".format(c1[0] * c2[0], c1[1] * c2[1]))\nprint(\"{:.2f} / {:.2f}i\".format(c1[0] / c2[0], c1[1] / c2[1]))\nprint(\"{:.2f} % {:.2f}i\".format(c1[0] % c2[0], c1[1] % c2[1]))"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('1+1i') == '2.00+2.00i'\nassert solution('-1+1i') == '0.00+2.00i'\nassert solution('1-1i') == '0.00-2.00i'\nassert solution('-1-1i') == '-2.00-2.00i'\n\"\"\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"1+1i\") == \"2.00+2.00i\"\nassert solution(\"1+-1i\") == \"0.00-2.00i\"\nassert solution(\"0+-1i\") == \"0.00-1.00i\"\nassert solution(\"0.00+0.00i\") == \"0.00+0.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('1 -2') == '-1 -4'\nassert solution('1.1 1.1') == '2.2 2.2'\nassert solution('1.1 -1.1') == '0.0 -2.2i'\nassert solution('0 0') == '0.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('1 -2') == '-3 -4'\nassert solution('1.1 2.2') == '3.3 4.4'\nassert solution('1.1 -2.2') == '-3.3 -4.4'\nassert solution('1+1i 2+2i') == '3+3i 4+4i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == '2.00+2.00i'\n\nassert solution(\"0 2\") == '2.00+0.00i'\n\nassert solution(\"1+1i\") == '0.00+2.00i'\n\nassert solution(\"1.5+2.5i\") == '3.00+5.00i'\n\nassert solution(\"1+1i + 1 + 2i\") == '3.00+3.00i'"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3+5i\") == \"3+5i\"\n\nassert solution(\"1+2i\") == \"1+2i\"\n\nassert solution(\"1+-1i\") == \"0+2i\"\n\nassert solution(\"1+-3i\") == \"1-3i\"\n\nassert solution(\"1+5i\") == \"1+5i\""
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"0 1\") == \"1.00+2.00i\"\nassert solution(\"1 0\") == \"2.00+1.00i\"\nassert solution(\"0 0\") == \"0.00+0.00i\"\nassert solution(\"0 0 0 0\") == \"0.00+0.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1.00+1.00i'\nassert solution('1 -1') == '1.00-1.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('0 1') == '0.00+1.00i'\nassert solution('1 0') == '1.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3 4\"\nassert solution(\"1+1i 2+1i\") == \"3-3i\"\nassert solution(\"0+2i 2+2i\") == \"2+0i\"\nassert solution(\"0+0i\") == \"0.00+0.00i\"\nassert solution(\"1+0i\") == \"1.00+0.00i\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nprint(solution(\"xyz\"))\n\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nassert solution('zab') == 'xaybzc'\nassert solution('abz') == 'xaybzc'\nassert solution('ab') == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\nYou have been given an array A consisting of N elements, and an integer K.\nYour task is to find the total number of subarrays having the property that the number of elements in the subarray is exactly K.\n\nInput Format:\nThe first line contains the integer N, the number of elements in the array.\nThe second line contains N space-separated integers, where the i-th integer denotes Ai.\nThe third line contains the integer K, denoting the number of elements in each subarray.\n\nOutput Format:\nPrint the required answer.\n\nSample Input 1:\n4\n1 2 4 4\n2\n\nSample Output 1:\n5\n\nSample Input 2:\n4\n1 1 1 1\n2\n\nSample Output 2:\n4\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nassert solution('baaad') == 'xaybzc'\nassert solution('aabb') == 'xaybzc'\nassert solution('xyzz') == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nassert solution('abcd') == 'xaybzc'\nassert solution('abcde') == 'xaybzc'\nassert solution('abcdef') == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n\nO = stdin[0]\nE = stdin[1]"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\nassert solution(\"abcd\") == \"xaybzc\"\nassert solution(\"abce\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"xaybzc\") == \"xaybzc\"\nassert solution(\"pqrstuv\") == \"pqrstuv\"\nassert solution(\"zzz\") == \"zzz\"\nassert solution(\"\") == \"\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdefghijklmnop\") == \"abcdefghijklmnop\"\nassert solution(\"qwertyuiopasdfghjklzxcvbnm\") == \"qwertyuiopasdfghjklzxcvbnm\"\nassert solution(\"bazza\") == \"bazza\"\nassert solution(\"wweewweeeeee\") == \"wweewweeeeee\"\n\"\"\"\nimport unittest"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('01B0') == '00'\nassert solution('01B1') == '01'\n\n-----\n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B0\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    1 -> 01\n    B -> B1\n    \n    0 -> 00\n    "
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10110') == '01110'\nassert solution('11011') == '10110'\n\"\"\"\n\nfrom typing import Union, List, Optional\n\nB = 'B'\nS = 'S'\n\n_0 = '0'\n_1 = '1'\n\nimport unittest\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01B0\") == \"00\"\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('01B0') == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\nimport re"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nimport unittest\nfrom collections import deque\nfrom typing import List, Deque"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 1 1 1 1') == '0'\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('2\\n1') == '0'\nassert solution('10\\n3 1 3 2 3 1 4 5 7 6') == '9'\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nstools = []\n\nfor x in a:\n    stools.append(x)\n\nfor i in range(n - 1):\n    for j in range(n - i - 1):\n        if stools[j] > stools[j + 1]:\n            stools[j], stools[j + 1] = stools[j + 1], stools[j]\n\nprint(sum(stools))\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\nassert solution(\"ccc\") == \"C\"\nassert solution(\"b\") == \"B\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'B'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aca\\ncac\\nca') == 'A'\nassert solution('aba\\nacb\\nacb') == 'A'\nassert solution('cab\\nccb\\nca') == 'C'\nassert solution('cca\\nccb\\nca') == 'C'\n\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aca\\naccc\\nca') == 'A'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aca\\naccc\\nca\\n') == 'A'\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'B'\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\\ncacc\\nca\") == \"A\"\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/55d8a92fcfc3c00052b1f8a8a\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aca\\ncac\\ncac\\n\") == \"A\"\nassert solution(\"ccc\\nccc\\nccc\\n\") == \"C\"\nassert solution(\"ccc\\nccc\\nccc\\n\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\"\"\"\n\ns_a = stdin.splitlines()[0]\ns_b = stdin.splitlines()[1]\ns_c = stdin.splitlines()[2]\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\\n\") == \"YES\"\nassert solution(\"7 5 5\\n\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"NO\"\nassert solution(\"7 5 5\") == \"YES\"\nassert solution(\"7 7 7\") == \"YES\"\nassert solution(\"7 5 7\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 7\\n') == 'YES'\nassert solution('3 5 7\\n') == 'NO'\nassert solution('7 3 5\\n') == 'YES'\nassert solution('5 3 7\\n') == 'NO'\nassert solution('7 5 3\\n') == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"7 5 5\") == \"NO\"\nassert solution(\"8 8 9\") == \"NO\"\nassert solution(\"9 9 9\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5 7') == 'YES'\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5 7\\n') == 'YES'\nassert solution('7 5 5\\n') == 'YES'\nassert solution('5 7 5\\n') == 'YES'\nassert solution('7 5 5\\n') == 'NO'\nassert solution('5 6 6\\n') == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('7 5 5') == 'NO'\nassert solution('5 7 5') == 'YES'\nassert solution('7 5 7') == 'YES'\nassert solution('5 5 7') == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\nassert solution(\"5 5 6\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 7\\n\") == 'YES'\nassert solution(\"5 7 5\\n\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == '7'\nassert solution(\"6\") == '29'\nassert solution(\"1\") == '2'\nassert solution(\"2\") == '1'\nassert solution(\"3\") == '4'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom typing import TypeVar\n\nT = TypeVar('T')\n\n\n@dataclass(frozen=True)\nclass Integer:\n    value: int\n\n    def __add__(self: T, other: T) -> T:\n        return Integer(self.value + other.value)\n\n    def __sub__(self: T, other: T) -> T:\n        return Integer(self.value - other.value)\n\n    def __mul__(self: T, other: T) -> T:\n        return Integer(self.value * other.value)\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"11\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '11'\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == '11'\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '11'\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '11'\n\"\"\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '11'\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n4\n2''') == '7'\n\ntry:\n    assert solution('''4\n4\n2''') == '12'\nexcept:\n    assert False\n\ntry:\n    assert solution('''1\n1\n1''') == '1'\nexcept:\n    assert False\n\ntry:\n    "
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"7\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\nassert solution(\"1\\n2\\n1\") == \"0\"\n\nprint(\"Passed!\")\n\n\"\"\"\n\nfrom ast import literal_eval\n\ninp = input()\na = literal_eval(inp)\n\na, b, h = a\n\nbase_area = (a+b)/2*h\nheight_area = base_area * h\n\nprint(int(height_area))"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n\"\"\"\n\na, b, h = [int(x) for x in stdin.split()]\nprint((a+b)*h//2)"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 2') == '7'\nassert solution('5 6 5') == '10'\nassert solution('10 5 5') == '15'\nassert solution('5 10 5') == '50'\nassert solution('5 10 10') == '100'\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n4\n2''') == '7'\n\nassert solution('''1\n2\n3''') == '2'\n\nassert solution('''100\n100\n100''') == '250000'\n\nassert solution('''3\n4\n2''') == '7'\n\nassert solution('''3\n4\n2''') == '7'"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\\n\") == \"11\"\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1 1 1 1\") == \"36\"\nassert solution(\"2\\n1 1\\n1 1\") == \"5\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\nprint(solution(\"3\\n1 2 3\"))\n\n-----\n3\n1 2 3\n\n11\n\n-----\n2\n10 100\n\n100\n\n-----\n2\n10 100\n\n100\n\n-----\n1\n10\n\n10\n\n-----\n5\n100 10 20 30 40\n\n0\n\n-----\n1\n10\n\n10\n\n-----\n10\n100 100 100 100 100\n\n10000\n\n-----\n5\n10 9 8 7 6\n\n45\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 2') == \"YES\"\nassert solution('3 3 3') == \"NO\"\nassert solution('2 2 2') == \"NO\"\nassert solution('1 1 1') == \"YES\"\nassert solution('1 2 3') == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 2') == 'YES'\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"5 8 7\") == \"YES\"\nassert solution(\"3 2 8\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4 3 2\\n'\n) == 'YES'\n\nassert solution(\n    '4 3 2\\n'\n) == 'YES'\n\nassert solution(\n    '4 3 2\\n'\n) == 'YES'\n\nassert solution(\n    '4 3 2\\n'\n) == 'NO'\n\nassert solution(\n    '4 3 2\\n'\n) == 'NO'"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 11\\n1') == '30'\nassert solution('5 3 11\\n2') == '30'\nassert solution('5 3 11\\n3') == '30'\nassert solution('5 3 11\\n4') == '30'\nassert solution('5 3 11\\n5') == '30'\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 3 11\"\n) == \"30\"\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n\"\"\"\n\n\"\"\"\nSOLUTION 1\nThis solution uses a dynamic programming approach. It searches for the best possible solution with the number of integers remaining.\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 9') == '19'\n\n-----Explanation-----\nIf A = 4, B = 3, and C = 9, the integers written on the blackboard after the first operation are 4, 3, 9.\nThe largest possible sum of the integers written on the blackboard after the first operation is 4 + 3 + 9 = 19.\n\nIf A = 4, B = 3, and C = 9, the integers written on the blackboard after the second operation are 2, 3, 9.\nThe largest possible sum of the integers written on the blackboard after the second operation is 2 + 3 + 9 = 13.\n\nIf A = 4, B = 3, and C = 9, the integers written on the blackboard after the third operation are 2, 5, 9.\nThe largest possible sum of the integers written on the blackboard after the third operation is 2 + 5 + 9 = 15.\n\nIf A = 4, B = 3, and C = 9, the integers written on the blackboard after the fourth operation are 2, 6, 9.\nThe largest possible sum of the integers written on the blackboard after the fourth operation is 2 + 6 + 9 = 16.\n\nIf A = 4, B = 3, and C = 9, the integers written on the blackboard after the fifth operation are 2, 8, 9.\nThe largest possible sum of the integers written on the blackboard after the fifth operation is 2 + 8 + 9 = 20.\n\nIf A = 4, B = 3, and C = 9, the integers written on the blackboard after the sixth operation are 2, 8, 11.\nThe largest possible sum of the integers written on the blackboard after the sixth operation is 2 + 8 + 11 = 22.\n\nThe largest possible sum of the integers written on the blackboard after all operations is 19.\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n3\\n\") == \"6\"\nassert solution(\"3 2 1\\n1\\n\") == \"6\"\nassert solution(\"1 2 3\\n3\\n\") == \"6\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccaabba\") == \"No\"\nassert solution(\"aaaa\") == \"Yes\"\nassert solution(\"aaa\") == \"No\"\n\"\"\"\n\n\"\"\"\nCODE DRAFT"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabbccdd\") == \"No\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\nassert solution(\"abcde\") == \"Yes\"\nassert solution(\"abcda\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\n\"\"\"\nimport string\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbbcc\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbccdd') == 'Yes'\nassert solution('abaccaba') == 'Yes'\nassert solution('ab') == 'No'\nassert solution('aba') == 'No'\nassert solution('aa') == 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abaccab\") == \"No\"\nassert solution(\"aaaaa\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"ccccc\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('aaa') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('abb') == 'No'\nassert solution('aab') == 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaccaba\") == 'Yes'\n\nassert solution(\"abaccab\") == 'No'\n\nassert solution(\"abc\") == 'No'\n\nassert solution(\"abbccc\") == 'No'\n\nassert solution(\"abccba\") == 'No'"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2\\n3 3') == '3'\nassert solution('1 2\\n3 4') == '3'\n\n'''\nfrom collections import deque"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"3\"\nassert solution(\"3 4\") == \"3\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, input().split())\narr = [0] + [int(sys.stdin.readline()) for _ in range(n)]\ndp = [[None for _ in range(k+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, k+1):\n        dp[i][j] = dp[i-1][j]\n        if j - arr[i] >= 0:\n            dp[i][j] = max(dp[i][j], dp[i-1][j-arr[i]] + arr[i])\n\nprint(dp[n][k])"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"3\"\n\"\"\"\n\nimport sys\nimport os\n\ntest_dir = os.path.dirname(__file__)\ninput_file = os.path.join(test_dir, '../resources/input.txt')"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 1\\n2 2\\n3 3\\n\") == 3\n\"\"\"\n\n\"\"\"\nn,k = map(int,input().split())\nli = []\nfor i in range(n):\n    a,b = map(int,input().split())\n    li.append(a)\n    li.append(b)\n\nli.sort()\nprint(li[k-1])\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\n\n------\n1\n1\n1\n\n-----Sample Output-----\n2\n\n------\n1\n2\n2\n\n-----Sample Input-----\n1 4\n2\n\n-----Sample Output-----\n2\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '3'\nassert solution('2 3') == '3'\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n''') == '2'\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '4'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 2\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == expected\n\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('3 3\\n') == '4'\nassert solution('4 4\\n') == '7'\nassert solution('4 5\\n') == '24'\nassert solution('10 10\\n') == '262144'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"10 6\\n1 2 3 4 5 6\") == \"9\"\nassert solution(\"10 1\\n1 2 3 4 5\") == \"5\"\nassert solution(\"10 4\\n1 2 3 4 5\") == \"9\"\nassert solution(\"10 6\\n1 2 3 4 5 6\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('abc') == ''\nassert solution('a,b') == ''\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(stdin.rstrip())"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4\"\nassert solution(\"2\\n10 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 3\\n5 10 15\") == 10\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n\"\"\"\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"5 10 15\") == \"14\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\nassert solution(\"2 3\\n1 3\") == \"2\"\nassert solution(\"5 3\\n1 3 2 4 5\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\nK, N = map(int, sys.argv[1:])\n\nhouses = list(map(int, sys.stdin.read().split(\"\\n\")[1:]))\nhouses.sort()"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nK, N = [int(x) for x in stdin.split()]\nA = [int(x) for x in stdin.split()]\nA.sort()\n\ndist = 0\nfor i in range(N - 1):\n    dist += (A[i + 1] - A[i]) % K\n\nprint(dist)"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('4 4 2 6') == '16'\n\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3 5 1\n''') == '9'"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"5 6 2 2\") == \"18\"\nassert solution(\"2 5 2 7\") == \"15\"\nassert solution(\"5 6 2 2\") == \"18\"\nassert solution(\"2 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"3 4 2 7\") == \"15\"\nassert solution(\"5 7 6 8\") == \"25\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), os.path.pardir))\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2 7\") == \"15\"\nprint(solution(\"4 5 2 7\"))\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"2 4 6 8\") == \"16\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"0 1 1 1\") == \"0\"\nassert solution(\"0 0 1 1\") == \"0\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"3 5 6 7\") == \"15\"\nassert solution(\"2 2 3 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"2 2 2 2\") == \"0\"\nassert solution(\"9 9 9 9\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nprint(solution(stdin))"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC\") == \"AC 3\"\nassert solution(\"TLE\") == \"TLE 1\"\nassert solution(\"AC\") == \"AC 3\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nhours = int(input().strip())\nhours_till_new_year = hours + 24\nhours_till_new_year = hours_till_new_year - 30\nhours_till_new_year = hours_till_new_year % 24\nprint(hours_till_new_year)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('21') == '27'"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21') == '27'\n\n---\n\nM = int(stdin.readline())\n\nhours_until_new_year_at_m_o_clock = (M*60 + (M*60 + 59)//24)\nprint(hours_until_new_year_at_m_o_clock)"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"21\") == \"27\"\nassert solution(\"22\") == \"23\"\nassert solution(\"23\") == \"24\"\nassert solution(\"12\") == \"12\"\n\"\"\"\n\nM = int(input())\nprint(24 - M)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('21') == '27'\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('21') == '27'\nprint(solution(input()))"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nM = input()"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3\\n') == '9'\nassert solution('3 6\\n') == 'error'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(eval(input()))\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(input())\n\n-------------"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 2''') == '3'\nassert solution('''2 2''') == 'error'\nassert solution('''1 2 3 4 5 6 7 8 9 10 11 12''') == '59'\nassert solution('''4 5''') == 'error'\nassert solution('''1 2 3''') == '6'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"8\"\nassert solution(\"6 4\") == \"error\"\nassert solution(\"1 9\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"6 99\") == \"error\"\nassert solution(\"20 5\") == \"error\"\n\"\"\"\n\n\"\"\"\nYou are given two integers A and B. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines each contain two space-separated integers A and B.\n\n-----Output-----\nFor each test case, output the value of A + B, or error if A + B is greater than or equal to 10.\n\n-----Sample Input-----\n3\n3 6\n5 5\n0 9\n10 10\n\n-----Sample Output-----\n8\n9\nerror\n\n-----Explanation-----\nIn the first test case, A + B = 3 + 6 = 9.\nIn the second test case, A + B = 5 + 5 = 10.\nIn the third test case, A + B = 0 + 9 = 9.\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"6 5\") == \"error\"\nassert solution(\"2 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3') == '9'\n\nassert solution('5 5') == 'error'\n\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_string) == expected_string\n\n------------------------------------------------"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 7 9') == '7'\nassert solution('4 6 7 9') == '7'\nassert solution('1 2 5 7') == '6'\nassert solution('1') == '0'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 7 9\") == '7'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 7 9\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2, 3, 7, 9) == 7\nassert solution(4, 2, 3, 7, 9) == 7\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 7 9\") == 7\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 12\") == \"No\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == 'Yes'\nassert solution('1 2\\n') == 'No'\n\"\"\"\nimport sys"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Yes'\nassert solution('2 3') == 'No'\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n') == \"Yes\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('2 4') == 'No'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n2 3\\n1 2') == 'Yes'\nassert solution('1 3\\n2 3\\n4 1\\n4 2') == 'No'\nassert solution('1 3\\n4 1\\n4 2') == 'Yes'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('2 5') == 'No'\nassert solution('10 1') == 'Yes'\nassert solution('4 5') == 'No'\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Even\"\n-----\na, b = map(int, input().split())\n\nprint(\"Even\" if (a*b) % 2 == 0 else \"Odd\")\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == 'Even'\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n') == 'Even'\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('3 5') == 'Odd'"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'Even'\n\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin_a) == stdout_a\nassert solution(stdin_b) == stdout_b\nassert solution(stdin_c) == stdout_c\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5') == '5'\nassert solution('1 2 3 4 5') == 'Odd'\nassert solution('1 2 3 4 5 6 7 8 9 10') == 'Even'\n\"\"\"\n\nimport ast\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('3 4') == 'Even'\nassert solution('5 10') == 'Even'\nassert solution('3 10') == 'Odd'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('1 2') == 'Odd'\n\n\"\"\"\nimport sys\n\nA = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('1 2') == 'Odd'\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n\") == \"1\"\nassert solution(\"4 4\\n\") == \"4\"\nassert solution(\"1 6\\n\") == \"2\"\nassert solution(\"2 5\\n\") == \"1\"\nassert solution(\"2 10\\n\") == \"2\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 6\\n') == 2\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"\n\n\"\"\"\nSCC = Strongly Connected Components\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n\nn, m = map(int, sys.stdin.readline().strip().split())\n\ngraph = [[] for _ in range(n + 1)]\n\nfor _ in range(m):\n    u, v = map(int, sys.stdin.readline().strip().split())\n    graph[u].append(v)\n    graph[v].append(u)\n\nvisited = set()\nresult = 0\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6\") == \"2\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2') == 2\nassert solution('6 10') == 2\nassert solution('10 10') == 1\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 6') == '2'\nassert solution('1 2') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 5\n\"\"\") == 2\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nassert solution(\"3 2 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\\\n2 1 4\\\\n2\\\\n1 1\\\\n2 3\\\\n\") == \"6\\\\n9\"\n\"\"\"\n\nimport sys\n\nN = int(input())\nT = list(map(int, input().split()))\nM = int(input())\nX = list(map(int, input().split()))\n\ndp = [0 for _ in range(N)]\n\nfor i in range(N):\n    dp[i] = sum(T[j] if j!= i else X[j] for j in range(N))\n\nprint(\" \".join(map(str, dp)))\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport collections\nfrom typing import List\nfrom typing import Tuple\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\n3\n2 1 4\n2\n1 1\n2 3\") == \"6\\n9\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\n\"\"\"\nIntroduction\n\nIn the last challenge, the time it took to solve each problem was calculated as the sum of individual times.\nThis time was not calculated in this challenge.\nYour task is to write a program that calculates the time it takes for Joisino to solve all the problems if she takes a drink.\n\nTask\nYour task is to write a program which calculates the time it takes to solve all the problems if Joisino takes a drink, based on their input.\n\nConstraints\n - 1\u2266N\u2266100\n - 1\u2266T_i\u226610^5\n - 1\u2266M\u2266100\n - 1\u2266P_i\u2266N\n - 1\u2266X_i\u226610^5\n\nInput\n - On the first line, there is a single integer N denoting the number of problems in the contest.\n - On the next N lines, there are N space-separated integers T_1,T_2,...,T_N, each denoting the time it takes for Joisino to solve the problem of the respective index (1-based).\n - On the next line, there is a single integer M denoting the number of drinks offered to the contestants.\n - On the next M lines, there are M space-separated integers P_1,X_1,P_2,X_2,...,P_M,X_M, each denoting the number of the problem and the time that it takes for Joisino to take one of the respective number of drinks, respectively (1-based).\n - It is guaranteed that each contestant takes exactly one drink.\n\nOutput\n - On the first line, print the time it takes Joisino to solve all the problems if she takes a drink.\n\nSample Input\n5\n2 1 4\n2\n1 1\n2 3\n\nSample Output\n6\n9\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 1 4') == '6\\n9'\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1000 8\n1 3 4 5 6 7 8 9''') == '2000'\nassert solution('''1000 9\n1 3 4 5 6 7 8 9''') == '2001'\nassert solution('''1000 8\n9 7 5 4 3 2 1''') == '1999'\nassert solution('''1000 8\n9 7 5 4 3 2 1\n''') == '1998'\nassert solution('''1000 8\n2 3 4 5 6 7 8 9''') == '1997'\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\nassert solution(\"1000 8\\n1 2 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\nnums = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\nassert solution(\"1010 8\\n1 3 4 5 6 7 8 9\") == \"1110\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\") == 2\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\n1 2 3 4\n1 3\n2 3\n2 4\") == \"2\"\nassert solution(\"3 2\n2 3\n2 4\") == \"1\"\nassert solution(\"2 2\n1 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        Observatory solution\n        N, M = [int(x) for x in stdin.split()]\n        observatories = [int(x) for x in stdin.split()]\n        roads = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n\n        # Build graph from roads\n        graph = {i: set() for i in range(1, N+1)}\n        for a, b in roads:\n            graph[a].add(b)\n            graph[b].add(a)\n\n        # Observatories must be reachable\n        visited = set()\n        def dfs(node: int) -> None:\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    dfs(neighbor)\n\n        # Find good observatories\n        good_observatories = set()\n        for node in range(1, N+1):\n            if node not in visited:\n                dfs(node)\n                good_observatories.add(node)\n\n        return str(len(good_observatories))\n\n\n        \"\"\"\n        # Dynamic programming\n        # O(NM) time\n        # O(NM) space\n        N, M = [int(x) for x in stdin.split()]\n        observatories = [int(x) for x in stdin.split()]\n        roads = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n        graph = {i: set() for i in range(1, N+1)}\n        dp = {i: set() for i in range(1, N+1)}\n        for a, b in roads:\n            graph[a].add(b)\n            graph[b].add(a)\n\n        for node in range(1, N+1):\n            if node not in graph:\n                dp[node] = {node}\n            for neighbor in graph[node]:\n                if neighbor not in dp:\n                    dp[neighbor] = {node}\n                else:\n                    dp[neighbor].add(node)\n                    dp[neighbor] = dp[neighbor].union(dp[node])\n\n        def dfs(node: int) -> None:\n            for neighbor in graph[node]:\n                if neighbor not in dp:\n                    dp[neighbor] = dp[node]\n                else:\n                    dp[neighbor].add(node)\n                    dp[neighbor] = dp[neighbor].union(dp[node])\n            for child in dp[node]:\n                dfs(child)\n\n        good_observatories = set()\n        for node in range(1, N+1):\n            if node not in dp:\n                dfs(node)\n                good_observatories.add(node)\n\n        return str(len(good_observatories))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"5 4\n5 5 4 4 4\n1 3\n1 4\n2 4\n3 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"5 3\n5 5 4 4 4\n1 3\n1 4\n2 4\n3 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"5 5\n5 5 4 4 4\n1 3\n1 4\n2 4\n3 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"5 1\n5 5 4 4 4\n1 3\n1 4\n2 4\n3 4\n\"\"\") == \"0\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == 10\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == '10'\nassert solution('5 6\\n') == '60'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3') == '10'\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"10\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 0\nassert solution('0') == 1\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0') == '1'\nassert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('125') == '176'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin.readlines():\n    line = line.strip()\n    sum = 0\n    for i in range(1, int(line) + 1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum += int(line) - i + 1\n\n    print(sum)\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1234\") == \"55\"\nassert solution(\"1123\") == \"611\"\n\"\"\"\n\n\"\"\"\nHINT:\n- You might be surprised by the solution.\n- Try to first solve the problem by writing only the formula.\n- Then, try to find the solution by writing the solution.\n- And finally, try to find the solution by using the solution.\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('125') == '176'\nassert solution('123') == '837'\n\"\"\"\nimport re"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('125') == '176'\nassert solution('12') == '17'\nassert solution('11111111') == '330'\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('125') == '176'\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"125\") == \"176\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('125') == '176'\n\"\"\"\n\nfrom typing import Set, Dict, Iterable\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('125') == '176'\nassert solution('142857') == '240170'\nassert solution('891234') == '853504'\nassert solution('876') == '636'\nassert solution('5467') == '2874'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('125') == '176'\nassert solution('3') == '6'\nassert solution('8') == '20'\nassert solution('999') == '3360'\nassert solution('99+99') == '198'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+2+5\") == \"8\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"125+26\") == \"176\"\n\"\"\"\nimport re\nfrom typing import Dict\n\nfrom icontract import require, DBC, ensure, snapshot\n\nfrom python_by_contract_corpus.common import Lines\n\n\n@require(lambda number: re.fullmatch(r\"[1-9][0-9]*\", number))\n@ensure(\n    lambda result: re.fullmatch(r\"[1-9][0-9]*\", result) and int(result) >= 0\n)\nclass Formula:\n    \"\"\"Represent a formula.\"\"\"\n\n    def __init__(self, string: str) -> None:\n        self.string = string\n        self.parts = [int(part) for part in string.split(\"+\")]\n\n    def __repr__(self) -> str:\n        return f\"Formula(string={self.string!r})\"\n\n\nclass Solution:\n    \"\"\"\n    Compute the sum of all possible evaluations of the formulas\n    contained in the input.\n\n    >>> solution = Solution()\n    >>> solution.solve(\"125\")\n    176\n    \"\"\"\n\n    def solve(self, number: str) -> int:\n        \"\"\"Compute the sum of all possible evaluations of the formulas\n        contained in the input.\n\n        >>> solution = Solution()\n        >>> solution.solve(\"125\")\n        176\n        \"\"\"\n        formulas = self.parse(number)\n        return sum(self.evaluate(formula) for formula in formulas)\n\n    def parse(self, number: str) -> DBC[Formula]:\n        \"\"\"Parse the input formula.\n\n        >>> solution = Solution()\n        >>> list(solution.parse(\"125\"))\n        [Formula(string='125')]\n        >>> list(solution.parse(\"1+25\"))\n        [Formula(string='1+25')]\n        >>> list(solution.parse(\"12+5\"))\n        [Formula(string='12+5')]\n        >>> list(solution.parse(\"125+26\"))\n        [Formula(string='125+26')]\n        \"\"\"\n        for formula in self.get_formulas(number):\n            yield Formula(formula)\n\n    @staticmethod\n    def get_formulas(number: str) -> Lines:\n        \"\"\"Yield all possible formulas in the input.\n\n        >>> solution = Solution()\n        >>> list(solution.get_formulas(\"125\"))\n        ['125', '1+25', '12+5', '1+2+5']\n        >>> list(solution.get_formulas(\"1+2+5\"))\n        ['1+2+5']\n        \"\"\"\n        length = len(number)\n        for i in range(1, length):\n            for j in range(i + 1, length + 1):\n                left_part = number[:i]\n                right_part = number[i:j]\n                if left_part and right_part:\n                    yield left_part + \"+\" + right_part\n\n    def evaluate(self, formula: Formula) -> int:\n        \"\"\"Evaluate a formula.\n\n        >>> solution = Solution()\n        >>> solution.evaluate(Formula(\"125\"))\n        125\n        >>> solution.evaluate(Formula(\"1+25\"))\n        26\n        >>> solution.evaluate(Formula(\"12+5\"))\n        17\n        >>> solution.evaluate(Formula(\"125+26\"))\n        176\n        \"\"\"\n        parts = self.solve_parts(formula.parts)\n        return sum(parts)\n\n    def solve_parts(self, parts: DBC[int]) -> DBC[int]:\n        \"\"\"\n        >>> solution = Solution()\n        >>> solution.solve_parts([1, 2, 3])\n        {1: 0, 2: 1, 3: 2}\n        >>> solution.solve_parts([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8}\n        \"\"\"\n        value = 0\n        solutions = {0: 0}\n        for part in parts:\n            new_solutions = {}\n            for solution in solutions:\n                value = solution + part\n                new_solutions[value] = solutions[solution] + 1\n            solutions = new_solutions\n        return solutions\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"0\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4 5') == '1'\nassert solution('3\\n1 2 3') == '0'\nassert solution('6\\n1 2 3 4 5 6') == '1'\n\n'''\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == \"15800\"\n'''\n\nimport math\nN = int(input())\n\nmoney = 800*N\nchange = 0\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n\nn = int(input())\n\na = n * 800\nb = 200 * (n - 1)\n\nprint(a - b)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20\") == \"15800\"\nassert solution(\"50\") == \"31680\"\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15') == '15'\nassert solution('20') == '15800'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"\n\nimport re\nfrom functools import reduce\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('abc') == 'abc'\n\n---"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ant') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('a') == 'a'\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == 2\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '2'\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n\n---\nIf you want to try your solution, uncomment the code in the \"-----Solution\" section.\nDon't forget to comment your code before you submit it and remove this comment.\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == 2\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == \"3\"\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"011\") == 0\nassert solution(\"10101010\") == 2\nassert solution(\"11011010\") == 4\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == 2\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"2\"\nprint(solution(\"101\"))\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"110\") == 2\nassert solution(\"111\") == 3\nassert solution(\"011\") == 3\nassert solution(\"110\") == 2\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5\\n3\\n10000\\n9000'\n) == '48000'\n\nassert solution(\n    '6\\n2\\n1000\\n2000'\n) == '24000'\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n10000\\n9000\\n\") == \"48000\"\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 10000 9000\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\nassert solution('5\\n3\\n10010\\n9010') == '55010'\nassert solution('5\\n3\\n10010\\n9010') == '55010'\nassert solution('5\\n3\\n10010\\n9010') == '55010'\nassert solution('5\\n3\\n10010\\n9010') == '55010'"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\n---\nIf you know how to solve this problem, you can get points by pressing 'Run Code' and submitting the solution.\nIf you don't know how to solve this problem or don't want to give it to the solution, you can fetch the sample input and output from Sample Codes.\n\nWe will be happy to see your solution and help you to answer the problem.\n\"\"\"\n\nimport ast\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000 10000 10000 9000\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 10000 9000\") == \"48000\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000 2 10000\") == \"48000\"\nassert solution(\"10000 1 10000\") == \"10000\"\nassert solution(\"10000 1 10000 2 10000 3 10000\") == \"25000\"\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n10000\n9000''') == '48000'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"5 - 2\") == \"3\"\nassert solution(\"3 * 2\") == \"6\"\nassert solution(\"10 / 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == \"3\"\nassert solution(\"1 + 2\") == \"3\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"1 + 2 + 2\") == \"5\"\nassert solution(\"1 + 2 - 2\") == \"1\"\nassert solution(\"1 + 2 - 2 + 2\") == \"3\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 + 2') == '3'"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 + 2') == '3'\n\n---Sample Input 0---\n1 + 2\n\n---Sample Output 0---\n3\n\n---Sample Input 1---\n0 - 2\n\n---Sample Output 1---\n-1\n\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"2 - 4\") == \"0\"\nassert solution(\"9 + 2\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"1 * 2\") == \"2\"\nassert solution(\"2 - 2\") == \"0\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000') == 'ABC'\nprint(solution(stdin))\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000') == 'ABC'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\na, b, c = input().split()\nprice = min(int(a), int(b), int(c))\nprint(price + 2 * price)\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a * b + c * d + e) == f\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nA, B, C = (int(n) for n in INPUT_LINES[0].split())\n\nmin_bell_price = min(A, B, C)\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('700 600 780') == '1300'\n\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())\n\nprint(min(a + b, a + c, b + c))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\na, b, c = map(int, input().split())\nprint(min(2 * a, a + 2 * b, a + 2 * c))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\n\"\"\"\n\na, b, c = map(int, stdin.split())\n\nprint((a + b + c) // 3)\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\na c\\n: \\nb c\") == \"#####\\n#a#c#\\n#b#c#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\na bc\") == \"#####\\n#a#b#\\n#c#\\n#####\"\n\nassert solution(\"2 3\\nadc\") == \"#####\\n#d#c#\\n#c#\\n#####\"\n\nassert solution(\"2 3\\nadc\\nafc\\nazc\") == \"#####\\n#d#c#\\n#f#c#\\n#z#\\n#####\"\n\nassert solution(\"1 1\\n1\") == \"##\"\n\nassert solution(\"1 1\\n0\") == \"##\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\nassert solution('2 4\\nab\\nac') == '##\\n#ab\\n#ac\\n##'\n\nprint('Success')"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"ab\\ncd\\nef\") == \"#####\\n#ab#\\n#cd#\\n#ef#\\n#####\"\n\n\"\"\"\nThe logic for my solution is pretty simple. I read the input string to the list of strings.\nThe split the list of strings to two lists for the first and the second row.\nFor each string in the first list, I create a list of length equal to the width of the input string and\npopulate the list with the character's ASCII code.\nFor each string in the second list, I create a list of length equal to the width of the input string and\npopulate the list with the character's ASCII code.\nI then print the row 1, the row 2 and the row 3 as described in the problem.\n\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\nassert solution('ab\\ncd\\n') == '#####\\n#ab#\\n#cd#\\n#####'\nassert solution('abc') == '#####\\n#abc#\\n#####'\nassert solution('abc\\n\\n') == '#####\\n#abc#\\n#####'\nassert solution('abc\\n') == '#####\\n#abc#\\n#####'\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"DDIIDI\") == 2\n\"\"\"\n\n\"\"\"\n7. Write a program that reads an integer N and outputs an N-dimensional boolean matrix with all elements set to true.\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of N integers separated by a space.\n\nInput Format:\nInput consists of N integers separated by a space.\n\nInput Format:\nInput consists of N integers separated by a space.\n\nSample Input:\n3\n\nSample Output:\n[[True, True, True],\n [True, True, True],\n [True, True, True]]\n\"\"\"\n\n\"\"\"\n8. Write a program that reads an integer N and outputs the first N numbers in the Fibonacci sequence.\nThe Fibonacci sequence starts with 0 and 1, and then has the first N numbers: 0, 1, 1, 2, 3, 5, 8, 13,...,\nThe next number is the sum of the previous two numbers, so the first N numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13,....\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nSample Input:\n3\n\nSample Output:\n0\n1\n1\n\"\"\"\n\n\"\"\"\n9. Write a program that reads N integers from the user and writes their sum.\nInput Format:\nInput consists of N integers separated by a space\n\nInput Format:\nInput consists of N integers separated by a space\n\nInput Format:\nInput consists of N integers separated by a space\n\nInput Format:\nInput consists of N integers separated by a space\n\nSample Input:\n3\n9 10 3\n\nSample Output:\n18\n\"\"\"\n\n\"\"\"\n10. Write a program that reads a number from the user and writes a table showing the factorial of that number.\n\nThe factorial of a non-negative integer, n, is the product of all positive integers less than or equal to n.\nFor example, the factorial of 6 is 720 (6 * 5 * 4 * 3 * 2 * 1).\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 12)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 12)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 12)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 12)\n\nSample Input:\n6\n\nSample Output:\n6\n720\n\nSample Input:\n3\n\nSample Output:\n6\n720\n\nSample Input:\n5\n\nSample Output:\n120\n3628800\n\nSample Input:\n9\n\nSample Output:\n362880\n3628800\n39916800\n479001600\n6227020800\n\"\"\"\n\n\"\"\"\n11. Write a program that reads an integer N from the user and writes out the first N numbers of the Fibonacci sequence.\nFibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nSample Input:\n3\n\nSample Output:\n0\n1\n1\n\nSample Input:\n5\n\nSample Output:\n0\n1\n1\n2\n3\n\"\"\"\n\n\"\"\"\n12. Write a program that reads an integer N from the user and writes out the first N numbers of the Fibonacci sequence.\nFibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nSample Input:\n3\n\nSample Output:\n0\n1\n1\n\nSample Input:\n5\n\nSample Output:\n0\n1\n1\n2\n3\n\nSample Input:\n9\n\nSample Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\nSample Input:\n10\n\nSample Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n\"\"\"\n\n\"\"\"\n13. Write a program that reads a number N from the user and writes out the first N numbers of the Fibonacci sequence.\nFibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nSample Input:\n3\n\nSample Output:\n0\n1\n1\n\nSample Input:\n5\n\nSample Output:\n0\n1\n1\n2\n3\n\nSample Input:\n9\n\nSample Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\nSample Input:\n10\n\nSample Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n\"\"\"\n\n\"\"\"\n14. Write a program that reads a number N from the user and writes out the first N numbers of the Fibonacci sequence.\nFibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nSample Input:\n3\n\nSample Output:\n0\n1\n1\n\nSample Input:\n5\n\nSample Output:\n0\n1\n1\n2\n3\n\nSample Input:\n9\n\nSample Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\nSample Input:\n10\n\nSample Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n\"\"\"\n\n\"\"\"\n15. Write a program that reads a number N from the user and writes out the first N numbers of the Fibonacci sequence.\nFibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nInput Format:\nInput consists of a single integer N (1 \u2264 N \u2264 100)\n\nSample Input:\n3\n\nSample Output:\n0\n1"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2IIDID') == '2'\nassert solution('IIDIDI') == '2'\nassert solution('IIIDID') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('IIDID') == 2\nassert solution('IDID') == 1\nassert solution('IIIDI') == 3\n\n-----Test Input-----\n5\nIDID\n\n-----Test Output-----\n2\n\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('IIDID') == 2\nprint(solution('IIDID'))\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n\nimport unittest\nimport sys\n\nsys.path.append(\".\")\nfrom util.helper import read_input"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('IIDID') == '2'\nassert solution('IIIDI') == '3'\nassert solution('IDIDID') == '1'\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"IIDID\") == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5IIDID') == '2'\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5IIDID') == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1111) == 1\nassert solution(11) == 1\nassert solution(111121111) == 4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11009 11332\") == 4\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11009 11332') == 4\nprint(solution('11009 11332'))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11009 11332') == 4\nprint(solution('11009 11332'))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''11009 11332''') == 4\n'''\nn = stdin.split('\\n')\nprint(solution(n[1]))\n'''"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n\na, b = [int(x) for x in stdin.split(' ')]\n\ncount = 0\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1\n4\n2''') == '3'\nassert solution('''3\n1\n4\n2''') == '3'\nassert solution('''1\n3\n2\n3''') == '1'\nassert solution('''4\n4\n4\n4\n''') == '1'\nassert solution('''5\n5\n4\n3\n2''') == '3'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 1 4''') == '3'\nassert solution('''4 1 4''') == '2'\nassert solution('''5 5 5''') == '1'\nassert solution('''3 3 3''') == '1'\n'''\n\n\"\"\"\n\nfrom math import *\nfrom collections import Counter"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('1 1 1') == '0'\nassert solution('3 3 3') == '1'\nassert solution('1 1 2') == '2'\nassert solution('1 1 2 2') == '2'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 4') == '3'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import Counter\n\nstdin = input()\na, b, c = stdin.split()\n\ncolors = Counter([int(a), int(b), int(c)])\n\nprint(len(colors))"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 4') == 3"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('2 1 1') == '3'\nassert solution('3 2 3') == '3'\nassert solution('2 2 2') == '1'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"3 1 3\") == \"2\"\nassert solution(\"100 100 100\") == \"1\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 4') == '3'\nprint(solution(stdin))"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n1 2 3\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == 12\n'''\nimport sys\nimport os"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\nl = list(map(int, stdin.readline().split()))\ns = 0\n\nfor i in range(K):\n    s += l[i]\nprint(s)\n\nfor i in range(K, N):\n    s -= l[i-K]\n    s += l[i]\n    print(s)\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 2 3 4 5\n''') == '12'\n\n'''\n\uc815\ub2f5\uc744 \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc740 \ub9ce\ub2e4.\n\uc5ec\uae30\uc11c\ub294 \ubc14\ub85c \uc720\ud074\ub9ac\ub4dc \ud638\uc81c\ubc95\uc744 \uc774\uc6a9\ud574 \uc811\uadfc\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n\uc720\ud074\ub9ac\ub4dc \ud638\uc81c\ubc95\uc744 \uc774\uc6a9\ud558\uba74 \ud604\uc7ac \uac00\uc7a5 \uae34 \uae38\uc774\uac00 K\uc778 \uc11c\ub85c \ub2e4\ub978 \ub450 \uc9d1\ud569 \uc911\uc5d0\uc11c \uacf1\ud558\uae30\ubcf4\ub2e4 \ud558\ub098\ub9cc \uacf1\ud558\ub294 \uac83\uc774 \ucd5c\uc18c\uac00 \ub41c\ub2e4.\n\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 K\ub9cc\ud07c \ubc18\ubcf5\ud558\uba74\uc11c \uac01\uac01\uc758 \uae38\uc774\ub97c \uad6c\ud558\uace0 \uadf8 \uae38\uc774\ub97c \uacf1\ud55c \uac12\ub4e4 \uc911\uc5d0\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4 \ud604\uc7ac \uac00\uc7a5 \uae34 \uae38\uc774\uac00 3\uc778 \uc9d1\ud569\uc774 \ub098\uba38\uc9c0 K-1\uac1c\uc758 \uc9d1\ud569\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\uace0\n\ub098\uba38\uc9c0 \uac12\uc744 \ubc18\ubcf5\ud558\uc5ec \uacf1\ud558\uc5ec \uac01\uac01\uc758 \uae38\uc774\ub97c \uc5bb\uc5b4 \ucd5c\ub300 \uae38\uc774\ub97c \ucc3e\ub294 \uac83\uc774\ub2e4.\n\n\uc704\uc5d0\uc11c \uc5b8\uae09\ud55c \uac83\uacfc \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4.\n\ud604\uc7ac \uc81c\uc77c \uae34 \uae38\uc774\ub294 K\uc774\uace0 \ub098\uba38\uc9c0 \uae38\uc774\ub294 \ub2e4\ub978 \uae38\uc774\uc774\ub2e4.\n\uc774\ub7f0\uc2dd\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4.\n\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc720\ud074\ub9ac\ub4dc \ud638\uc81c\ubc95\uc774 \uc774\ub8e8\uc5b4\uc9c0\ub294 \uac83\uc774\ub2e4.\n\uadf8\ub9ac\uace0 \ub098\uc11c \ud604\uc7ac \uc81c\uc77c \uae34 \uae38\uc774\uac00 K\uc774\uace0 \ub098\uba38\uc9c0 \uae38\uc774\ub294 \ub2e4\ub978 \uae38\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc5ec\n\ucd5c\ub300 \uae38\uc774\ub97c \ucc3e\ub294 \ubc29\uc2dd\uc774 \uc801\uc6a9\ub41c\ub2e4.\n'''"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\") == 3\nassert solution(\"2 2\\n1 2\") == 1\nassert solution(\"2 3\\n1 2\") == 3\nassert solution(\"2 3\\n1 3\") == 4\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n\n-----\n>>> \n=== RESTART: /Users/sobheshrunkumar/Documents/replit/Solve_this_assigment/snuke_toy.py ===\nPlease, provide the number of sticks\n5\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1\nPlease, provide the number of sticks\n5\n1"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2 7\n''') == 'B'\nassert solution('''4 8 6\n''') == 'A'\nassert solution('''10 4 2\n''') == 'A'\nassert solution('''3 5 4\n''') == 'B'\nassert solution('''6 7 1\n''') == 'B'\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u0435\u0440\u0432\u044b\u0445 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b: 1 -0.5 0.25 -0.125...\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (n) \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: 1.0\n\"\"\"\n\nn = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: '))\nmy_list = [1]\nsum = 0\nfor i in range(n - 1):\n    my_list.append(1 / 2 ** i)\n    sum += 1 / 2 ** i\nprint(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: {n}, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: {sum}')\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u0435\u0440\u0432\u044b\u0445 n \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b:\n1, -0.5, 0.25, -0.125,...\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (n) \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: 1.0\n\"\"\"\n\nn = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: '))\nmy_list = [1]\nsum = 0\nfor i in range(n - 1):\n    my_list.append(-1 / 2 ** i)\n    sum += -1 / 2 ** i\nprint(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: {n}, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: {sum}')\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u0435\u0440\u0432\u044b\u0445 n \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b:\n1, 0, 0, 0,...\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (n) \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: 1.0\n\"\"\"\n\nn = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: '))\nmy_list = []\nsum = 0\nfor i in range(n):\n    my_list.append(1 / (2 ** i))\n    sum += 1 / (2 ** i)\nprint(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: {n}, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: {sum}')\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u0435\u0440\u0432\u044b\u0445 n \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b:\n1, 1, 2, 3, 5, 8,...\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (n) \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: 3.0\n\"\"\"\n\nn = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: '))\nmy_list = []\nsum = 0\nfor i in range(1, n + 1):\n    my_list.append(i)\n    sum += i\nprint(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: {n}, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: {sum}')\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u0435\u0440\u0432\u044b\u0445 n \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b:\n1, 1, 2, 3, 5, 8, 13, 21,...\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (n) \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: 3, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: 3.0\n\"\"\"\n\nn = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: '))\nmy_list = []\nsum = 0\nfor i in range(1, n + 1):\n    my_list.append(2 ** i)\n    sum += 2 ** i\nprint(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: {n}, \u0438\u0445 \u0441\u0443\u043c\u043c\u0430: {sum}')\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u0435\u0440\u0432\u044b\u0445 n \u0447\u0438\u0441\u0435\u043b \u0438\ufffd"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 7') == 'B'\n\n\"\"\"\nimport sys\n\nx, a, b = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 7\\n\") == \"B\"\n\"\"\"\n\nx, a, b = [int(n) for n in stdin.split()]\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 7\") == 'B'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n\nx, a, b = map(int, stdin.split())\nprint('A' if abs(x-a) < abs(x-b) else 'B')\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 7\\n') == 'B'\nassert solution('3 1 1\\n') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\nstdin = input()\nprint(f'{2018}{stdin[4:]}')\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\n\"\"\"\n\nimport re\n\ntext = input()\n\nyear, month, day = re.findall(\"(\\d{4})/(\\d{2})/(\\d{2})\", text)\n\nprint(\"\".join([year, \"/\", month, \"/\", day]))\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2018/01/07') == '2018/01/07'\n\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2017/01/01') == '2018/01/01'\nassert solution('2017/01/31') == '2018/01/31'\nassert solution('2017/02/01') == '2018/02/01'\nassert solution('2017/02/29') == '2018/02/29'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac', solution('3\\ncbaa\\ndaacc\\nacacac')\nassert solution('1\\nab') == 'b', solution('1\\nab')\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\n\"\"\"\nThe answer can be generated by solving a dynamic programming problem. The solution is only unique if the problem has unique solution.\n\nThis problem can be solved by using DYNAMIC PROGRAMMING. The only other difference in this problem is that we have to consider all strings regardless of which string the headline contains.\n\nIf we want to solve this problem using DYNAMIC PROGRAMMING we have to initialize all of the DP table.\n\nFor example, if we want to create a string with all the characters in alphabet 'a' then we have to initialize our DP table with all the characters in 'a'.\n\nFor example, if we want to create the string 'aaaaa', then we have to initialize our DP table with 'aaaaa'.\n\nFor each string in our headline, we check if the string can be generated by appending characters from the last row of our DP table.\n\nFor example, if the headline is 'cbaa', then we have to check if cbaa can be generated by appending characters from the last row of our DP table.\n\nIf that is the case, then we can append the last character of the last row.\n\nNow we have to check the string 'cbaa' can be generated by appending characters from the last row of our DP table.\n\nIf that is the case, then we can append the last character of the last row.\n\nNow we have to check the string 'cbaa' can be generated by appending characters from the last row of our DP table.\n\nIf that is the case, then we can append the last character of the last row.\n\nNow we have to check the string 'cbaa' can be generated by appending characters from the last row of our DP table.\n\nIf that is the case, then we can append the last character of the last row.\n\nNow we have to check the string 'cbaa' can be generated by appending characters from the last row of our DP table.\n\nIf that is the case, then we can append the last character of the last row.\n\nNow we have to check the string 'cbaa' can be generated by appending characters from the last row of our DP table.\n\nIf that is the case, then we can append the last character of the last row.\n\nNow we have to check the string 'cbaa' can be generated by appending characters from the last row of our DP table.\n\nIf that is the case, then we can append the last character of the last row.\n\nWe can continue this process until we reach the first row of our DP table.\n\nWe can finally print the lexicographically smallest string of the longest strings that can be created regardless of which string the headline contains.\n\nFor example, if the headline is 'cbaa' then we can append the last character of the last row since that is the lexicographically smallest string.\n\nThen we can append the last character of the second row since that is the lexicographically smallest string.\n\nSo we can append the last character of the third row since that is the lexicographically smallest string.\n\nSo we can append the last character of the fourth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the fifth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the sixth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the seventh row since that is the lexicographically smallest string.\n\nSo we can append the last character of the eighth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the ninth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the tenth row since that is the lexicographically smallest string.\n\nNow we can finally print the lexicographically smallest string of the longest strings that can be created regardless of which string the headline contains.\n\nFor example, if the headline is 'cbaa' then we can append the last character of the last row since that is the lexicographically smallest string.\n\nSo we can append the last character of the second row since that is the lexicographically smallest string.\n\nSo we can append the last character of the third row since that is the lexicographically smallest string.\n\nSo we can append the last character of the fourth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the fifth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the sixth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the seventh row since that is the lexicographically smallest string.\n\nSo we can append the last character of the eighth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the ninth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the tenth row since that is the lexicographically smallest string.\n\nSo we can finally print the lexicographically smallest string of the longest strings that can be created regardless of which string the headline contains.\n\nFor example, if the headline is 'cbaa' then we can append the last character of the last row since that is the lexicographically smallest string.\n\nSo we can append the last character of the second row since that is the lexicographically smallest string.\n\nSo we can append the last character of the third row since that is the lexicographically smallest string.\n\nSo we can append the last character of the fourth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the fifth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the sixth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the seventh row since that is the lexicographically smallest string.\n\nSo we can append the last character of the eighth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the ninth row since that is the lexicographically smallest string.\n\nSo we can append the last character of the tenth row since that is the lexicographically smallest string.\n\nSo we can finally print the lexicographically smallest string of the longest strings that can be created regardless of which string the headline contains.\n\n-----Complexity-----\nTime complexity is O(n) where n is the length of the string.\n\nSpace complexity is O(n) where n is the length of the string.\n\n-----Test Input-----\n5\nabcd\nabab\nabaa\nabaa\nabaab\n\n-----Test Output-----\nbcda\nbcb\nc\nc\nc\n\"\"\"\n\n\"\"\"\nThe solution is similar to the one above. The only difference in this problem is that we have to consider all strings regardless of which string the headline contains.\n\nNow we have to initialize all of the DP table.\n\nFor example, if we want to create the string 'aaaaa', then we have to initialize our DP table with 'aaaaa'.\n\nFor example, if we want to create the string 'cbaa', then we have to initialize our DP table with 'cbaa'.\n\nFor each string in our headline, we check if the string can be generated by appending characters from the last row of our DP table"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\nassert solution(\"5\\ncbaac\\ndaacc\\ndaacc\\nacacac\") == \"aaacac\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"aca\"\n\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\", \"case1, expected aac\"\nassert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\", \"case2, expected aac\"\nassert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\", \"case3, expected aac\"\n\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline().strip())\ns = [stdin.readline().strip() for _ in range(n)]\n\nprint(max(s, key=len))\n\"\"\"\n\n\"\"\"\ns = {'a': 'b', 'c': 'a', 'b': 'a', 'd': 'c'}\nprint(list(sorted(s.values()))[-1])\n\"\"\"\n\n\"\"\"\nimport sys\nfor line in sys.stdin:\n    n = int(line.strip())\n    s = sorted(set([stdin.readline().strip() for _ in range(n)]))\n    print(s[-1])\n\"\"\"\n\n\"\"\"\nimport sys\nfor line in sys.stdin:\n    n = int(line.strip())\n    s = [stdin.readline().strip() for _ in range(n)]\n    s = sorted(set(s))\n    longest = ''\n    for i in s:\n        if len(i) > len(longest):\n            longest = i\n    print(longest)\n\"\"\"\n\n\"\"\"\nimport sys\nfor line in sys.stdin:\n    n = int(line.strip())\n    s = [stdin.readline().strip() for _ in range(n)]\n    s = sorted(set(s))\n    longest = ''\n    for i in s:\n        if len(i) > len(longest) and i in s:\n            longest = i\n    print(longest)\n\"\"\"\n\n\"\"\"\nimport sys\nfor line in sys.stdin:\n    n = int(line.strip())\n    s = sorted([stdin.readline().strip() for _ in range(n)])\n    longest = ''\n    for i in s:\n        if len(i) > len(longest) and i in s:\n            longest = i\n    print(longest)\n\"\"\"\n\n\"\"\"\nimport sys\nfor line in sys.stdin:\n    n = int(line.strip())\n    s = [stdin.readline().strip() for _ in range(n)]\n    s = sorted(set(s))\n    longest = ''\n    for i in s:\n        if len(i) > len(longest) and i in s:\n            longest = i\n    print(longest)\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aacc\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"cbaa\") == \"aac\"\nassert solution(\"ccc\") == \"ccc\"\nassert solution(\"a\") == \"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\nassert solution('1\\nacacac') == ''\n\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\"\nassert solution(\"bbaa\\ndaacc\\nacacac\") == \"\"\nassert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\"\nassert solution(\"cbaa\\nacacac\") == \"\"\n\nassert solution(\"daacc\\nacacac\") == \"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(':\n24 30\n') == 7\n\nprint(solution(':\n24 30\n'))\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n24 30\") == \"7\"\n\"\"\"\n\nimport sys\nimport bisect\n\n_, seats = sys.stdin.readline().split()\nseats = [int(i) for i in seats.split()]\n\ncount = 0\nfor i in range(1, len(seats) + 1):\n    count += i * (seats[-i] - seats[-i - 1])\n\nprint(count)\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 24 30\") == \"7\"\nassert solution(\"2 26 34\") == \"7\"\nassert solution(\"3 28 36\") == \"6\"\nassert solution(\"4 30 40\") == \"6\"\nassert solution(\"5 32 45\") == \"5\"\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 100\\n50 50\\n25 75\\n4 4') == '21'\nassert solution('5\\n3 100\\n52 50\\n2 55\\n4 94\\n5 55') == '13'\nassert solution('10\\n1 100\\n2 200\\n3 300\\n4 400\\n5 500\\n6 600\\n7 700\\n8 800\\n9 900') == '21'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\n24 30\n''') == 7\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 24 30\\n') == '7'\nassert solution('2 45 39\\n') == '2'\nassert solution('3 23 26\\n') == '0'\nassert solution('4 23 30\\n') == '3'\nassert solution('5 25 32\\n') == '5'\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n3 4\") == \"6\"\nprint(solution(stdin.strip()))\n\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def solution(self, stdin):\n        num_rows = int(stdin[0].strip())\n        num_cols = int(stdin[1].strip())\n\n        mat = []\n        for row_idx in range(num_rows):\n            row = stdin[row_idx+2].strip()\n            mat.append(list(map(int, row.split(\" \"))))\n        \n        width_count = Counter()\n        height_count = Counter()\n        for row in mat:\n            for col in row:\n                width_count[col] += 1\n                height_count[col] += 1\n        \n        width_count = list(width_count.items())\n        width_count.sort(key=lambda x: x[1], reverse=True)\n        print(width_count)\n\n        height_count = list(height_count.items())\n        height_count.sort(key=lambda x: x[1], reverse=True)\n        print(height_count)\n\n        width_size = width_count[0][0]\n        height_size = height_count[0][0]\n        \n        count = 0\n        for row in mat:\n            for col in row:\n                if col == width_size:\n                    count += 1\n                elif col == height_size:\n                    count += 1\n\n        return str(count)"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '6'\nassert solution('5 5') == '10'\nassert solution('4 5') == '12'"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2 3 4 5\\n3 2 4 1 5\\n2 2 4 3 3\\n1 1 2 3 3') == 6\n\"\"\"\n\n\"\"\"\nT=O(n), S=O(1)\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4') == 6\n\"\"\"\n\nn, m = map(int, input().split())\nprint(n * m)\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4''') == '6'\nassert solution('''5 5''') == '30'\n\n-----\n'''"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 2\\n4 1') == '6'\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4''') == '6'\n\n-----\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == '6'\n\n'''\nfrom sys import stdin"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nprint((n+m-1)*(n+m-2)//2)\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('1 5') == 'Possible'\nassert solution('2 5') == 'Possible'\nassert solution('4 6') == 'Impossible'\nassert solution('5 6') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"1 1\") == \"Impossible\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n9 8 7 6 5 4 3 2 1') == 'Possible'\n\"\"\"\n\na, b = input().split(' ')\na, b = int(a), int(b)"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'Possible'\n\n\"\"\"\n\nfrom math import gcd\n\na, b = map(int, input().split(' '))"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == 'Possible'\nassert solution(\"9 9\") == 'Impossible'\nassert solution(\"3 5\") == 'Impossible'\nassert solution(\"1 100\") == 'Impossible'\nassert solution(\"10 10\") == 'Impossible'\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n9\") == \"Possible\"\n\"\"\"\n\nA, B = [int(x) for x in stdin.read().split('\\n')[:-1]]\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\nA,B = map(int,stdin.readline().split())"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('1 2') == 'Impossible'\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('4 6') == 'Impossible'\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'coder'\nassert solution('??c??') == 'atcoder'\nassert solution('c??c') == 'coder'\nassert solution('c?c??c') == 'atcoder'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"atcoder\"\n\n-----\nS = tca\nT = c\n\nTCA\nCODER\n\n---\n\n\n3\ncoder\ncoder\ncoder\n\n---\n\nTCA\nCODER\n\n---\n\nBOGUS\n\n\n\nBOGUS\n\nTCA\nCODER\n\n---\n\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA\nCODER\n\n---\n\nTCA\nCODER\n\nBOGUS\n\nTCA"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"tc???\") == \"atcoder\"\nassert solution(\"?tc???\") == \"UNRESTORABLE\"\nassert solution(\"coder\") == \"coder\"\n'''\n\n'''\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'atcoder'\n\"\"\"\n\nfrom math import comb\n\nstdin = input()\n\nt = 'coder'\nn = len(stdin)\na = len(t)\nd = {}\nfor c in t:\n    d[c] = d.get(c, 0) + 1\n\nf = {}\nfor c in stdin:\n    f[c] = f.get(c, 0) + 1"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('coder') == 'atcoder'\nassert solution('tacocat') == 'atcoder'\nassert solution('codewars') == 'unrestorable'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('t?c??e') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"tc????\") == \"atcoder\"\nassert solution(\"coder\") == \"atcoder\"\n\"\"\"\n\nimport sys\nimport re\n\nregex = re.compile(r'[^\\w\\s?]+')\n\nstring = sys.stdin.readline().rstrip()\n\nprint(regex.sub('',string)) if regex.sub('',string)!= '' else print('UNRESTORABLE')"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'coder'\nassert solution('tc????') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'UNRESTORABLE'\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aabbbccc') == 'aaabbbccc'\nassert solution('aaabbbccc?a') == 'aaabbbccca'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('tc???') == 'atcoder'\n\nassert solution('tcac???') == 'UNRESTORABLE'\n\n-----Note-----\n - Because of the constraints, the input is not guaranteed to be valid.\n - The string S may contain?'s.\n - The string S' may contain?'s.\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2002\\n2017') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2002\\n2017') == '2032'\nassert solution('2020\\n2030') == '2030'\nassert solution('1999\\n2002') == '1999'\nassert solution('1999\\n2004') == '2004'\nassert solution('1999\\n2005') == '2006'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2033\n2020\n\"\"\"\n) == \"\"\"\n2032\n\"\"\"\n\nassert solution(\n\"\"\"\n2033\n2019\n\"\"\"\n) == \"\"\"\n2032\n\"\"\"\n\nassert solution(\n\"\"\"\n2033\n2022\n\"\"\"\n) == \"\"\"\n2020\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 2) == 1.5\nassert solution(100, 200) == 150\nassert solution(200, 300) == 250\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2002\\n2017') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\nassert solution(\"2017\\n2002\") == \"2032\"\nassert solution(\"2018\\n2017\") == \"2032\"\nassert solution(\"2017\\n2017\") == \"2017\"\n\n\"\"\"\n\nimport io\nimport sys\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2002\\n2017') == '2032'\nprint('Test pass.')\n\nhttps://www.hackerrank.com/challenges/find-the-running-median/problem"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2002\\n2017') == '2032'\nassert solution('3015\\n3241') == '2782'\n\"\"\"\n\nR, G = [int(x) for x in input().split()]"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('assesses') == 1\nassert solution('uncopyrightable') == 13\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('assesses') == 1\nassert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Problem-----\nAmsterdam has $N=10000$ houses. You go on a trip to visit them all. You have to go to exactly $T=1000$ houses. Of these houses, you will visit at most $K=100$ houses. You have to bring two large suitcases which have an initial capacity of $M=1000$. You have to leave the last house on the $T-K$th house.\n\nNote that you can\u2019t take all the houses on your current trip, because you have to leave the house you are currently in on the $T-K$th house. If you do this, you will not be able to take the last house on the trip.\n\nWhat is the minimum number of houses you will need to take with you in order to get from the $1$th house to the $T$th house?\n\n-----Solution-----\nDraw a simple example and then try to generalize it.\n\nWe will define the simplicity of the string to be the number of distinct letters in the string. We have the following initial conditions:\n\nSimplicity of the string is at least 1\nSimplicity of the string is at most 2\nFor each house, the simplicity is at least 1\nFor each house, the simplicity is at most 2\nThe last house on the trip is not visited\nIn order to leave the last house on the trip, we need to visit at least $T-K$ houses.\n\nThen we must have at least one house we need to visit so that we can leave the last house on the trip. In addition, we can visit at most $K$ houses so that we can leave the last house on the trip.\n\nIn this situation, the simplicity of the string is at most 2. We can take the string and the last house on the trip, and we can take the last house on the trip without the string.\n\nIn this situation, the simplicity of the string is at most 2. We can take the last house on the trip, and we can take the string, and the last house on the trip.\n\nIn this situation, the simplicity of the string is at least 1. We can take the string and the last house on the trip, and we can take the last house on the trip without the string.\n\nSo our complexity is at least 3.\n\nFinally, if we have more than $2$ distinct letters, we can only take one house on the trip and the string. This means we have a complexity of 4.\n\n-----Explanation-----\nWe can use a breadth first search algorithm that will make sure we don't go past the complexity requirement. We can define this function:"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\"\"\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100000000 500 3\\n\") == \"TLE\"\nassert solution(\"100000000 50 3\\n\") == \"AC\"\nassert solution(\"100000000 10001 5\\n\") == \"TLE\"\nassert solution(\"100000000 10000 5\\n\") == \"AC\"\nassert solution(\"19931568 1000000 6\\n\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'TLE'\nassert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10001 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10001 6\") == \"TLE\"\nassert solution(\"100000000 10001 7\") == \"AC\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('100000000 10000 5\\n') == 'AC'\nassert solution('19931568 1000000 6\\n') == 'TLE'"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '100000000 500 3'\n    ) == 'TLE'\nassert solution(\n    '100000000 50 3'\n    ) == 'AC'\nassert solution(\n    '100000000 10001 5'\n    ) == 'TLE'\nassert solution(\n    '100000000 10000 5'\n    ) == 'AC'\nassert solution(\n    '19931568 1000000 6'\n    ) == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10001 6\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__.split(\"\\n\")[0]) == ''\nassert solution(*solution.__doc__.split('\\n')[1].split('\\n')) == ''\n\"\"\"\n\n\"\"\"\nYour task is to replace the zeros in the list of integers with the smallest nonzero integer.\n\nExample\nFor a = [0, 2, 0, 6, 0], the output should be smallestReplace(a) = 7.\n\n7 is the smallest non-zero integer that can be put into the list.\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\"\n) == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nprint(\"passed\")\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2\") == \"2 16 8 0\\n4 64 4 0\\n0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '8 4 0 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n\nSample Input 1:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\nSample Output 1:\n4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n\nSample Input 2:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\nSample Output 2:\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 3:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 3:\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 4:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 4:\n2 0 0 0\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 5:\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 5:\n4 4 8 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n'''\n'''\nIn this problem, you need to transform the input string into a four-row array, each element of which is an integer. Then, the game starts. After that, the program receives a string of commands (left, up, right, and down). First, the program initializes the puzzle by constructing an empty 4x4 array and filling the empty cells with zeroes. Then, for each command the program moves the empty cells in the corresponding direction. If there is an overlap between the empty cells and the non-zero cells, the empty cells are filled with the non-zero cells. After all the commands are executed, the program prints the resulting puzzle array.\n\nInput format\n\nThe first four lines of input contains the initial puzzle state. Each line contains four integers that are separated by a single space. The integers in each line are not greater than 1024 and not less than 0.\n\nAfter that, the next line contains the number of commands.\n\nThen, the next line contains a string of commands (left, up, right, and down).\n\nConstraints\n\nThe puzzles start with an empty 4x4 array of zeroes, no two cells are equal.\n\nThe puzzles end with the initial 4x4 array.\n\nOutput format\n\nThe first four lines of output contain the resulting puzzle state. Each line contains four integers that are separated by a single space. The integers in each line are not greater than 1024 and not less than 0.\n\nSample Input 1\n\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 1\n\n4 0 0 0\n8 16 16 4\n32 32 0 0\n32 32 32 0\n\nSample Input 2\n\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\nSample Output 2\n\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 3\n\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\nSample Output 3\n\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 4\n\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 4\n\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 5\n\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 5\n\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n'''\n'''\nimport math"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2 0 0 2) == '4 0 0 0'\nassert solution(4 16 8 2) == '4 16 8 2'\nassert solution(2 64 32 4) == '2 64 32 4'\nassert solution(1024 1024 64 0) == '1024 1024 64 0'\nassert solution(2) == '2 0 0 0'\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"0 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\"\n\nimport sys\nimport os\nimport pprint\n\nclass Board:\n    def __init__(self, data, moves, score=0):\n        self.data = data\n        self.moves = moves\n        self.score = score\n\n    def copy(self):\n        return Board(self.data.copy(), self.moves.copy(), self.score)\n\n    def __str__(self):\n        return pprint.pformat(self.data)\n\n    def __repr__(self):\n        return pprint.pformat(self.data)\n\n    def __eq__(self, other):\n        return self.data == other.data and self.moves == other.moves\n\n    def apply(self, move):\n        i, j = self.moves[-1]\n        d = self.data[i][j]\n\n        if move == 0:\n            self.data[i][j] = 0\n        elif move == 1:\n            self.data[i][j] *= 2\n            self.score += self.data[i][j]\n            self.data[i].insert(0, 0)\n            self.data[i].pop()\n        elif move == 2:\n            self.data[i].insert(0, 0)\n            self.data[i].pop()\n        elif move == 3:\n            self.data[i].append(0)\n\n        if d:\n            self.moves.append((i, j))\n\n        self.moves.append(move)\n\n        return self\n\n    def apply_one_move(self, move):\n        i, j = self.moves[-1]\n        d = self.data[i][j]\n\n        if move == 0:\n            self.data[i][j] = 0\n        elif move == 1:\n            self.data[i][j] *= 2\n            self.score += self.data[i][j]\n            self.data[i].insert(0, 0)\n            self.data[i].pop()\n        elif move == 2:\n            self.data[i].insert(0, 0)\n            self.data[i].pop()\n        elif move == 3:\n            self.data[i].append(0)\n\n        if d:\n            self.moves.append((i, j))\n\n        self.moves.append(move)\n\n        return self\n\n    def undo(self):\n        self.apply(self.moves.pop())\n\n    def undo_one_move(self):\n        self.apply(self.moves.pop())\n\nclass Game:\n    def __init__(self, data):\n        self.data = data\n\n    def __str__(self):\n        return pprint.pformat(self.data)\n\n    def __eq__(self, other):\n        return self.data == other.data\n\n    def apply(self, move):\n        i, j = self.data.moves[-1]\n        d = self.data.data[i][j]\n\n        if move == 0:\n            self.data.data[i][j] = 0\n        elif move == 1:\n            self.data.data[i][j] *= 2\n            self.data.score += self.data.data[i][j]\n            self.data.data[i].insert(0, 0)\n            self.data.data[i].pop()\n        elif move == 2:\n            self.data.data[i].insert(0, 0)\n            self.data.data[i].pop()\n        elif move == 3:\n            self.data.data[i].append(0)\n\n        if d:\n            self.data.moves.append((i, j))\n\n        self.data.moves.append(move)\n\n        return self\n\n    def undo(self):\n        self.apply(self.data.moves.pop())\n\n    def undo_one_move(self):\n        self.apply(self.data.moves.pop())"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\"\"\"\n\ninp = \"\"\"\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n') == '4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \\\n    \"4 0 0 0\\n8 16 8 2\\n32 64 32 4\\n2048 64 0 0\"\nprint(\"Test 1:\", solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\"))\n\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \\\n    \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nprint(\"Test 2:\", solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\"))\n\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \\\n    \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nprint(\"Test 3:\", solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\"))\n\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \\\n    \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nprint(\"Test 4:\", solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\"))\n\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n2\") == \\\n    \"0 0 0 4\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\\n2048 64 0 0\"\nprint(\"Test 5:\", solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n2\"))\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('H2O 12') == '0'\nassert solution('C6H6OCH2O 10') == '12'\nassert solution('CH3OH 1') == '1'\nassert solution('C6H14 10') == '12'\nassert solution('C5H10') == '0'\n\"\"\"\n\nfrom itertools import chain\nfrom collections import Counter"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H2O\") == \"0\"\nassert solution(\"C2H6OCH2O\") == \"6\"\nassert solution(\"C6H14\") == \"12\"\nassert solution(\"C6H6OCH2O\") == \"6\"\nassert solution(\"CH3OH\") == \"1\"\n\"\"\"\nfrom collections import Counter\nimport re\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H2OC100H1\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H2O 2\") == 0\nassert solution(\"C2H6 10\") == 6\nassert solution(\"C3H8\") == 3\nassert solution(\"CH3OH 1\") == 1\nassert solution(\"C6H6OCH2O 10\") == 12\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('H2O10C5H7O7') == '12'\n\n---\nYou are given a string consisting of uppercase and lowercase letters.\n\nYour task is to convert it to a string with no duplicate letters.\n\nExample\n\nFor inputString = \"abAB\", the output should be\nmakeUnique(inputString) = \"ab\".\n\"\"\"\n\ninputString = stdin.read().strip()\nunique_string = \"\"\nfor letter in inputString:\n    if letter not in unique_string:\n        unique_string += letter\nprint(unique_string)\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H 2\") == 0\nassert solution(\"O\") == 0\nassert solution(\"C2H6 10\") == 6\nassert solution(\"C3H8\") == 0\nassert solution(\"CH3OH 1\") == 1\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"H2O 10\") == \"6\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"3\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"3\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''ABC HAPPYBIRTHDAYCACEY''') == 'PASS'\nassert solution('''ABC TRAGICBIRTHDAYCACEY''') == 'FAIL'\nassert solution('''ABC HAPPYBIRTHDAY''') == 'FAIL'\nassert solution('''SECRET SOMECHORESARETOUGH''') == 'PASS'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\nprint('All tests passed.')"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\n\"\"\"\n\n\"\"\"\nAn interpreted solution for the example in the prompt.\n\"\"\"\n\nfrom typing import Dict, List\nimport itertools"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''ABC HAPPYBIRTHDAYCACEY''') == 'PASS'\nassert solution('''ABC TRAGICBIRTHDAYCACEY''') == 'FAIL'\nassert solution('''ABC HAPPYBIRTHDAY''') == 'FAIL'\nassert solution('''SECRET SOMECHORESARETOUGH''') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(TEST_INPUT) == TEST_OUTPUT\nprint(solution(INPUT))\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"(()))(\") == \")\"\nassert solution(\"([(])\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } ]\") == \"] 19\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('([] [] ]') == '] 7'\nassert solution('[ { { () () () () } } ]') == 'ok so far'\nassert solution('[ { [[()]] (({})) } ] () {}') == '] 20'"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n(([] [] ])\\n\") == \"]\"\nassert solution(\"13\\n(([] [[]] ()))\\n\") == \"ok so far\"\nassert solution(\"21\\n[ { { () () () () } } ]\\n\") == \"]\"\nassert solution(\"27\\n[ { [[()]] (({})) } ] () {}\\n\") == \"ok so far\"\nassert solution(\"17\\n[[[[(()))]]]]\\n\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } ]\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"([] [] ]\") == \"] 7\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"] 20\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[ { { () () () } ]\") == \"[\"\nassert solution(\"[ { ((())) } ]\") == \"]\"\nassert solution(\"( () )\") == \")\"\nassert solution(\"( () [ ) ] )\") == \"]\"\nassert solution(\"( [ ) ] )\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"([] [] ]\") == \"[ 7 ]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"[ 20 ]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[ { { () () () () } } ]\") == \"]\"\nassert solution(\"()\") == \"ok so far\"\nassert solution(\"(()\") == \"]\"\nassert solution(\"((()\") == \"ok so far\"\nassert solution(\"()[]{}()\") == \"]\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\napple\n\"\"\") == \"Player 2 lost\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\"\n\nfrom typing import List, Tuple\n\n\nclass Solution:\n    def judge(self, words: List[str]) -> str:\n        if len(words) % 2 == 0:\n            return \"Fair Game\"\n\n        word1, word2 = words[::2], words[1::2]\n        if len(word1)!= len(word2):\n            return \"Player 1 lost\" if len(word1) < len(word2) else \"Player 2 lost\"\n\n        for i in range(len(word1)):\n            if word1[i]!= word2[i][-1]:\n                return \"Player 1 lost\" if len(word1) < len(word2) else \"Player 2 lost\"\n\n        return \"Fair Game\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\napple\\neat\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nextra\\napple') == 'Player 2 lost'\nassert solution('1\\napple\\napple\\napple') == 'Fair Game'\nassert solution('2\\napple\\napple\\napple') == 'Fair Game'\nassert solution('1\\napple\\napple\\napple') == 'Fair Game'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\n\"\"\"\n\nN = int(input())\n\nplayer = 1\nlst = []\nfor i in range(N):\n    x = input()\n    lst.append(x)\n\nwhile len(lst) > 1:\n    if lst[0][0] == lst[1][0]:\n        print(\"Fair Game\")\n        break\n    else:\n        if player % 2 == 1:\n            print(\"Player 1 lost\")\n            break\n        else:\n            print(\"Player 2 lost\")\n            break\n    lst.pop(0)\n    lst.pop(0)\n    lst.append(input())\n    player += 1\n    print(lst)\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n'\n    'apple\\n'\n    'ear\\n'\n    'real\\n'\n    'letters\\n'\n    'style\\n'\n) == 'Fair Game'\n\nassert solution(\n    '3\\n'\n    'apple\\n'\n    'extra\\n'\n    'apple\\n'\n) == 'Player 1 lost'\n\nassert solution(\n    '2\\n'\n    'apple\\n'\n    'neat\\n'\n) == 'Player 2 lost'"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple\n''') == 'Player 1 lost'\nassert solution('''2\napple\nneat\napple\n''') == 'Player 2 lost'"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Fair Game'\nassert solution('abc') == 'Player 1 lost'\nassert solution('abc abc abc') == 'Fair Game'\nassert solution('abc apple apple') == 'Player 2 lost'\nassert solution('abc apple apple apple apple') == 'Player 1 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple''') == 'Player 1 lost'\nassert solution('''2\napple\nneat''') == 'Player 2 lost'\n\n-----Test Case-----\n'''\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 * 100 + 100\") == \"100100\"\nassert solution(\"1000 * 100 + 100\") == \"100100\"\nassert solution(\"1000 * 100 + 100\") == \"100100\"\n\"\"\"\nimport re"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 * 100\") == \"100000\"\nassert solution(\"10+10\") == \"110\"\nassert solution(\"1000 + 100\") == \"1100\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 * 100 + 10') == '100100'\nassert solution('1000 + 10') == '1010'\nassert solution('10000 * 1000 + 100') == '10010001000'\nassert solution('1000 + 10 * 100') == '1010'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 * 100\") == \"10000\"\nassert solution(\"10000 + 10\") == \"1010\"\nassert solution(\"100 * 1000\") == \"100000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100*100\") == 10000\nassert solution(\"100+100\") == 20000\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 * 100') == '100000'\nassert solution('10 + 1000') == '1010'\n\"\"\"\n\na, op, b = input(), input(), input()"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\n\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 out\n''') == '3'\n\nassert solution('''8 in\n''') == '6'\n\nassert solution('''52 out\n''') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\"\n\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\nprint(solution(\"8 out\"))\nprint(solution(\"8 in\"))\nprint(solution(\"52 out\"))\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\n\"\"\"\n\n\nfrom typing import List, Tuple\nfrom collections import Counter\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\nprint(solution(\"8 out\"))\nprint(solution(\"8 in\"))\nprint(solution(\"52 out\"))\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\nprint(solution(\"menolaxios mox\"))\nprint(solution(\"alemaxe maxos\"))\nprint(solution(\"pamoli toxes\"))\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\"\"\"\n\n\n\n\"\"\"\n[All right, friend! Now we are ready to make your move. It's time to conquer the world! You are ready with the powerful Google API. Go on! (:]]\n\nYou are given a text of N lines. The text contains a word on each line. Your task is to find all the places in the text where the words \"google\" or \"facebook\" occur.\n\nFor example, in the given text we have 3 occurrences of the word \"google\" and also 3 occurrences of the word \"facebook\":\n\nWe need to return a list of all the indices (each index is a number starting from 0) where the word \"google\" occurs.\n\nThen, we need to return the list of all the indices where the word \"facebook\" occurs.\n\nThe result of the previous task should be a list of tuples.\n\nFor example, in the list we have (2, 3, 4), meaning that the word \"google\" occurs at those indices: 2, 3 and 4.\n\nCheck the TESTS tab to see the list of indices for each of the words \"google\" and \"facebook\".\n\nInput: A text as a string (unicode).\n\nOutput: A list of tuples (position, index), where position is an index of a line and index is an index of a word in the line (starting from 0).\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint('Passed all tests...')\n\"\"\"\nimport re\nimport string"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\nprint(\"Success\")\n\n-----\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\nprint(solution(\"menolaxios mox\"))\nprint(solution(\"alemaxe maxos\"))\nprint(solution(\"pamoli toxes\"))\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\n\"\"\"\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        assert solution('menolaxios mox') =='menolaxiosexmox'\n        assert solution('alemaxe maxos') == 'alemaxexmaxos'\n        "
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('abcd') == 'abcd'\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"xaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxax"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\nprint('All tests passed.')\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\nassert solution(\"2021\") == \"yes\"\nassert solution(\"2022\") == \"no\"\n\nprint(solution(\"2018\"))\nprint(solution(\"2019\"))\nprint(solution(\"2020\"))\nprint(solution(\"2021\"))\nprint(solution(\"2022\"))\n\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\") == 'yes'\nassert solution(\"2019\") == 'no'\nassert solution(\"2020\") == 'yes'\n\"\"\"\n\n\"\"\"\nYou are an eccentric billionaire with an affinity for sending stuff to Mars. In an ideal world you would send stuff to Mars all the time, but your engineers tell you that it is most efficient to do it when Earth and Mars are somewhat close to each other. \n\nYour engineers have calculated that optimal launch windows occur once every 26 months, and that one of them occurs in April 2018. They also tell you that they will not have any Big Finished Rockets by then, so you will have to wait for a later launch window.\n\nSince your rocket scientists apparently can not be bothered to tell you about the optimal launch windows before it is too late, you have to keep track of that yourself. Write a program that determines if there is an optimal launch window in any given year.\n\n-----Input-----\nThe only line of input contains an integer $y$ ($2018 \\le y \\le 10000$), the year you are interested in.\n\n-----Output-----\nOutput \u201cyes\u201d if there is an optimal launch window in the year $y$, otherwise output \u201cno\u201d.\n\n-----Examples-----\nSample Input 1:\n2018\nSample Output 1:\nyes\n\nSample Input 2:\n2019\nSample Output 2:\nno\n\nSample Input 3:\n2020\nSample Output 3:\nyes\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\"\n\n------Solution------\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\nimport sys\nimport functools\nimport itertools\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\nassert solution('1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('3 2 1 2 2') == '0'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '64'"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 0 0 0 4 0 0 0 0 4\"\n) == \"64\"\nassert solution(\n    \"10 10 10 20 0 10 10 10 10 10\"\n) == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nprint(solution(\"4 0 0 0 4 0 0 0 0 4\"))\nprint(solution(\"10 10 10 20 0 10 10 10 10 10\"))"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 10 10 20 0 10 10 10 10 10''') == '1820000'\nassert solution('''4 0 0 0 4 0 0 0 0 4''') == '64'\nassert solution('''4 0 0 0 4 0 0 0 0 4''') == '0'\nassert solution('''4 0 0 0 4 0 0 0 0 4''') == '0'\n\nprint('Success')"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\nassert solution(\"3 0\\n30 270 995 996 997 998 999\") == \"1 570\"\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n\nimport operator\nfrom math import inf\nfrom fractions import Fraction\n\nN, p = map(int, input().split())\nscore = list(map(int, input().split()))\np_score = []\n\nfor i in range(N):\n    p_score.append([i, score[i]])\n\np_score.sort(key=operator.itemgetter(1), reverse=True)\np_score.pop(p)\n\nmin_val = inf\nans = [0, 0]\n\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        for k in range(j + 1, N):\n            if i == p or j == p or k == p:\n                continue\n\n            curr_val = 0\n\n            if p_score[i][0] == p_score[j][0]:\n                curr_val += 3\n            if p_score[i][0] == p_score[k][0]:\n                curr_val += 2\n            if p_score[j][0] == p_score[k][0]:\n                curr_val += 1\n\n            curr_val = curr_val / 3\n\n            if curr_val < min_val:\n                ans = [p_score[i][0] + 1, p_score[k][0] + 1]\n                min_val = curr_val\n\nprint(' '.join(map(str, ans)))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2\\n3 4') == '1 2\\n3 4'\nassert solution('1 2\\n1 2\\n3 4') == '1 1\\n3 4'\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input_text) == expected_result_text\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n\nn, p = map(int, stdin.readline().strip().split(' '))\ntime = list(map(int, stdin.readline().strip().split(' ')))\nac = [0 for _ in range(n)]\npenalty_time = [0 for _ in range(n)]\nfor i in range(n):\n    if i == p:\n        continue\n    ac[i] = ac[i - 1] + 1\n    if time[i] < 300:\n        penalty_time[i] = penalty_time[i - 1] + ac[i] * time[i]\n    else:\n        penalty_time[i] = penalty_time[i - 1] + ac[i] * 300\nprint(ac[-1], penalty_time[-1])"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\n\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\n\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == '2 330'\nprint(solution(input()))\n\n-----Notes-----\nThe problem statement did not give any constraints on the time allowed for the solution.\n\n\n\n'''"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\nassert solution('abcd') == 5\nassert solution('abcde') == 3\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcdef') == 6\nassert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\n\nprint('Success')\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaabbaabba\") == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abbaabba') == 2\nassert solution('abcdef') == 6\n\nprint(solution(stdin))\n\n-----Notes-----\nPlease keep the input and output to the problem statements in the format specified above.\n\nIn Sample Case #2, the string is a permutation of the string abcdef, so the period is 6.\n\nPlease do not use a language's built-in functions to solve this problem.\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\nprint(solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\"))\nprint(solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\"))\nprint(solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\"))\n\n-----Problem-----\nYou travel along a road on the Irish countryside and you observe many stones placed along the road. You may only spend a few minutes at each stone to assess its contents. After you have finished looking around at the stones, you want to know which stones you have visited.\n\nYou do not know the distance from your current position to the next stone and you do not want to waste any more time.\n\nLet us say that for every stone you pass, you can measure its distance to your current position. You are given an array A of N positive integers. Array A represents the distances to the next stone at the positions marked with 1, while the elements at index 0 and N\u22121 are zeros.\n\nThe distance from the point 0 to point 0 is defined to be 0.\n\nYou have to answer Q queries. The i-th query is asking for a distance to a stone which is at index i in the array.\n\nThe distance is measured in miles.\n\n-----Solution-----\n\nWrite 5 lines of code to test the correctness of solution:\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\n\nTake the input\nN = input()\na = input().split()\nfor i in range(N):\n    a[i] = int(a[i])\nq = input()\nfor i in range(q):\n    index = input()\n    print(a[index])\n\n----\n\nWrite 5 lines of code to test the correctness of solution:"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n-----Notes-----\n    - Accepts <10^3 input values\n    - The first input line contains two integers: $M$ and $N$ (2 <= $ M, N <= 10 ^ 3$).\n    - The second input line contains $M$ distinct integers in ascending order: $T_{1..M}$ (0 <= $ T_ i \\leq 10 ^ 15$).\n    - The third input line contains $N$ distinct integers in ascending order: $X_{1..N}$ (0 <= $ X_ i \\leq 10 ^ 15$).\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\"\n\n\"\"\"\n\nfrom math import ceil, log"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\n\"\"\"\n\n\"\"\"\n    Big O: O(NlogN)\n    Starts with a set of all possible speeds. Then compares every entry in the input and removes any entry that cannot reach the next entry. Each such entry must be an integer multiple of the previous entry, because we have assumed that all the numbers are distinct.\n\"\"\"\nfrom math import ceil, floor\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n\") == \"0\"\nassert solution(\"2 5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n\") == \"1\"\nassert solution(\"3 6\\n1 2\\n1 2\\n1 2\\n2 3\\n2 3\\n2 3\\n\") == \"1\"\nassert solution(\"5 10\\n1 2\\n1 2\\n1 2\\n2 3\\n2 3\\n2 3\\n\") == \"1\"\nassert solution(\"4 12\\n1 2\\n1 2\\n1 2\\n2 3\\n2 3\\n2 3\\n\") == \"0\"\n\n\"\"\"\n\nimport sys\n\nM, N = map(int, sys.stdin.readline().split())\nT = sorted(map(int, sys.stdin.readline().split()))\nX = sorted(map(int, sys.stdin.readline().split()))\n\nx_start = X[0]\nx_end = X[-1]\nx_delta = x_end - x_start\nx_step = x_delta // (len(X) - 1)\n\nspeed = [0]\n\nfor i in range(1, x_delta + 1):\n    if i % x_step == 0:\n        speed.append(i // x_step)\n\nspeed = set(speed)\n\ndist = []\n\nfor i in range(len(X)):\n    if T[i] - x_start > x_step:\n        dist.append(x_start + x_step)\n        x_start += x_step\n    else:\n        dist.append(T[i] - x_start)\n\nfor i in range(len(dist)):\n    if dist[i] % x_step == 0:\n        speed.add(dist[i] // x_step)\n\nspeed = sorted(list(speed))\nprint(len(speed))\nprint(' '.join([str(i) for i in speed]))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"1\\n1\"\n\"\"\"\n\nm, n = [int(x) for x in stdin.readline().split()]\ntimes = [int(x) for x in stdin.readline().split()]\ndistances = [int(x) for x in stdin.readline().split()]\n\npossible_speeds = set()\n\nfor j in range(len(times)):\n    speed = distances[j] / times[j]\n    possible_speeds.add(speed)\n\nprint(len(possible_speeds))\n\nprint(\" \".join([str(x) for x in distances]))\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\nprint('Hooray!')\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0447\u0438\u0441\u043b\u0430 n\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f i \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e n, \u0437\u043d\u0430\u0447\u0438\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0440\u0430\u0432\u043d\u043e n!\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a n, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u0445, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438 n \u0440\u0430\u0432\u043d\u043e 0, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 [] \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0447\u0438\u0441\u043b\u0430 0\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u0447\u0438\u0441\u043b\u0435 n \u043f\u043e\u0437\u0438\u0446\u0438\u0439, \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 n + 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\nn = 3\n1\n2\n3\n\u0412\u044b\u0432\u043e\u0434: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2:\nn = 4\n1\n2\n3\n4\n\u0412\u044b\u0432\u043e\u0434: [1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]\n\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"55555555\") == \"0\"\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(123) == 1\nassert solution(456) == 1\nassert solution(111) == 0\nassert solution(222) == 0\nassert solution(333) == 0\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5551212) == 1\nassert solution(5519876) == 0\nassert solution(5055555) == 0\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n\nimport sys\nfrom fractions import Fraction"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n\nimport gcd\nimport math"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n\nimport gcd\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"32/2\") == \"0/1\"\nassert solution(\"1/1\") == \"1/1\"\n\"\"\"\n\nimport gcd\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(['C E G', 'D F# A']) == 'Transposition'\nassert solution(['C C G G A A G', 'C C F F D# D# F']) == 'Inversion'\nassert solution(['A B C D E F G', 'G F E D C B A']) == 'Retrograde'\n\nSolution\n\nclass Solution:\n    def solution(self, s: str) -> str:\n        return \"Inversion\" if s[0] == \"C\" else \"Transposition\" if s[0] == \"D\" else \"Retrograde\" if s[0] == \"G\" else \"Nonsense\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nC E G\\nD F# A') == \"Transposition\"\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == \"Inversion\"\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == \"Retrograde\"\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3\n    C E G\n    D F# A\n    \"\"\"\n) == \"\"\"Transposition\"\"\"\n\nassert solution(\n    \"\"\"\n    7\n    C C G G A A G\n    C C F F D# D# F\n    \"\"\"\n) == \"\"\"Inversion\"\"\"\n\nassert solution(\n    \"\"\"\n    7\n    A B C D E F G\n    G F E D C B A\n    \"\"\"\n) == \"\"\"Retrograde\"\"\"\n\nprint(\"Successfully tested.\")"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\\n\") == \"Transposition\\n\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\\n\") == \"Inversion\\n\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\\n\") == \"Retrograde\\n\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\n\"\"\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nfrom typing import Dict, List\n\nletters_map: Dict[str, str] = {\n    \"a\": \"A\",\n    \"b\": \"B\",\n    \"c\": \"C\",\n    \"d\": \"D\",\n    \"e\": \"E\",\n    \"f\": \"F\",\n    \"g\": \"G\",\n    \"h\": \"H\",\n    \"i\": \"I\",\n    \"j\": \"J\",\n    \"k\": \"K\",\n    \"l\": \"L\",\n    \"m\": \"M\",\n    \"n\": \"N\",\n    \"o\": \"O\",\n    \"p\": \"P\",\n    \"q\": \"Q\",\n    \"r\": \"R\",\n    \"s\": \"S\",\n    \"t\": \"T\",\n    \"u\": \"U\",\n    \"v\": \"V\",\n    \"w\": \"W\",\n    \"x\": \"X\",\n    \"y\": \"Y\",\n    \"z\": \"Z\",\n}\n\ndashed_letters: List[str] = [\n    \"b\",\n    \"d\",\n    \"g\",\n    \"k\",\n    \"n\",\n    \"p\",\n    \"t\",\n]\n\nfirst_letters: List[str] = [\n    \"a\",\n    \"c\",\n    \"e\",\n    \"g\",\n    \"i\",\n    \"l\",\n    \"m\",\n    \"o\",\n    \"r\",\n    \"s\",\n    \"u\",\n    \"w\",\n]"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\"\"\"\n\nfrom collections import deque\n\nimport re\n\ntest_cases = ['Cat-a-pil-lar', 'Co-ding is the best', '', 'I love ba-na-na']\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"I love ba-na-na\"\n) == \"Gah kove bababa\"\nassert solution(\n\"Cat-a-pil-lar\"\n) == \"Catacillar\"\nassert solution(\n\"Co-ding is the best\"\n) == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\n\"\"\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(1)) == '6'\nassert solution(str(2)) == '16'\nassert solution(str(3)) == '14'\n\"\"\"\n\nimport sys\nimport math\n\nV = int(sys.stdin.readline())\n\nA = V*(V+1)/2\nprint(math.floor(A))"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 16\n\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\n\nassert solution(\"3\") == \"14\"\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\n\n\"\"\"\nSolution Approach\n\nBrute force would be to try every possible combination of boxes and find the lowest one. That would be O(n^(n^2)), where n is the number of boxes.\n\nWe can do better. First, we will try to think of a way to calculate the surface area of the boxes. Let's call an array of the form [area_of_box_1, area_of_box_2,..., area_of_box_n].\n\nThe total surface area is given by:\n\narea_of_box_1 + area_of_box_2 +... + area_of_box_n\n\nNow, we'll calculate the cost of the boxes. The cost of the box is given by:\n\ncost_of_box_1 + cost_of_box_2 +... + cost_of_box_n\n\nNow, we can calculate the lowest possible cost of the boxes. We want to minimize the cost of the boxes. This can be done by minimizing the cost of the boxes. We can try to minimize the cost of the boxes by minimizing the sum of the boxes.\n\nLet's call the function to minimize the sum of the boxes:\n\nminimize_sum(arr)\n\nminimize_sum(arr) will return the minimum sum of the boxes.\n\nSince, we are working on a rectangular box, the cost of a box is given by the number of cubes it contains. We can calculate the number of cubes in the box by:\n\nn_cubes = area_of_box / length_of_side\n\nNow, we can calculate the cost of the box by:\n\ncost = n_cubes * cost_of_side\n\nNow, we can minimize the cost of the boxes by minimizing the cost of the boxes. We can do this by minimizing the cost of the boxes and adding it to the cost of the box. We can add the cost of the boxes by adding the costs of the boxes.\n\nminimize_cost(arr)\n\nminimize_cost(arr) will return the minimum cost of the boxes.\n\nFinaly, we can calculate the cheapest possible cost of boxes by subtracting the minimum cost of boxes from the total surface area.\n\nfinal_cost = minimize_cost(arr) - minimize_sum(arr)\n\nYou can verify this solution by running the following code:\n\nn = int(stdin.readline().strip())\n\nprint(solution(n))\n\n\"\"\"\n\nn = int(input())\n\nn_cubes = n//3\nprint(n_cubes)\n\nprint(n_cubes * 6)\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nimport sys\nimport math\nimport heapq\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1''') == '6'\nassert solution('''4''') == '16'\n'''\n\" %s %s %s \" % (10, 20, 30)\n\" {0} {1} {2} \".format(10, 20, 30)\n\" {2} {0} {1} \".format(10, 20, 30)\n'''\n'{:.2f}'.format(2.3)\n'{:.2f}'.format(2.3, 4.5)\n'{:.2f}'.format(2.3, 4.5, 6.7)\n'{0}'.format(2.3, 4.5, 6.7)\n'{0}'.format(2.3, 4.5, 6.7, 10.0)\n'{:.2f}'.format(2.3, 4.5, 6.7, 10.0)\n'{0:.2f}'.format(2.3, 4.5, 6.7, 10.0)\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nimport sys\nfrom math import ceil\n\nV = int(sys.stdin.readline())\n\narea = V ** 2\ncost = 1\n\nwhile area % 2 == 0:\n    cost += 1\n    area = ceil(area / 2)\n\nprint(cost)\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == '3'\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == '2'\nassert solution(\"4 10\\n1 3 1 7\\n\") == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n\nprint(\"All test cases passed.\")\n\n-----Solution-----\n\n---My solution---\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == 3\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 6\n1 2 3 4 5''') == '3'\nassert solution('''5 10\n4 8 1 9 7''') == '2'\nassert solution('''4 10\n1 3 1 7''') == '4'\nprint('Success')"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\\n6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9\") == \"3\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nassert solution('1\\n1') == '1'\n\nassert solution('5 10\\n1 2 3 4 5') == '3'\n\nassert solution('5 10\\n4 8 1 9 7') == '2'\n\nassert solution('5 10\\n4 8 1 9 7') == '2'"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10\\n1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == 'possible'\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n0 1 0\\n1 0 1\\n\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n0\\n1\\n0\\n\") == 'possible'\nassert solution(\"1\\n1\\n0\\n1\\n0\\n\") == 'impossible'\nassert solution(\"2\\n1\\n0\\n0\\n1\\n0\\n\") == 'impossible'\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == \"impossible\"\nassert solution(\"1 2\\n0 1 0\\n1 0 1\\n\") == \"impossible\"\nassert solution(\"1 2\\n0 0 1\\n1 0 1\\n\") == \"impossible\"\n\n\"\"\"\n\"\"\"\nThe data is inconsistent.\n\nIn fact, all data is incorrect. If we just add the sum of the passengers who left the train to the total number of passengers in the train, we get:\n\n3 + 1 + 0 + 0 + 1 = 5\nwhich is more than the capacity.\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\\n\") == \"impossible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\n\nin_ = [0] * n\nout_ = [0] * n\nwait_ = [0] * n\n\nfor i in range(n):\n    in_[i], out_[i], wait_[i] = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == 'possible'\nassert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == 'impossible'\nassert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == 'impossible'\nassert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == 'possible'\nassert solution(\"1 2\\n0 1 0\\n1 0 1\\n\") == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 0 0\\n1 0 1\") == 'possible'\nassert solution(\"2\\n1 0 0\\n0 1 0\") == 'impossible'\nassert solution(\"2\\n0 0 0\\n0 0 0\") == 'impossible'\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n1 0 1\\n0 1 0') == 'possible'\nassert solution('1\\n2\\n1 0 1\\n1 0 0') == 'impossible'\nassert solution('1\\n2\\n1 0 1\\n1 0 0') == 'impossible'\nassert solution('1\\n2\\n0 0 0\\n0 0 0') == 'possible'\nassert solution('1\\n2\\n1 0 1\\n1 1 1') == 'possible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('1,2') == 'impossible'\nassert solution('1,2\\n0,0,0\\n1,0,0') == 'possible'\n'''\n\n'''\nSTORY:\n\nGiven a number of stations and train capacity, find a number of train that will arrive at each station in order to\n\n1. Ensure trains arrive on time at each station\n2. Ensure trains leave on time to each station\n3. The number of people in each train should not exceed the capacity\n\nTASK:\n\nWrite the code to solve the problem from the statement\n\n- Write a function that takes the number of stations and the train capacity as parameters and\n    returns a list of integers where each list element is the number of people that should enter\n    the train at a station.\n\n- Write a function that takes a list of the number of people that should enter the train at a station\n    and returns the number of people that actually entered the train.\n\n- Write a function that takes the list of the number of people that should enter the train at a station\n    and the number of people that entered the train, and returns the number of people that had to wait\n    on the station\n\nTEST CASES:\n\n- Ensure trains arrive on time at each station\n- Ensure trains leave on time to each station\n- The number of people in each train should not exceed the capacity\n\n- Ensure that if there is a train for a station the number of passengers that should enter the train\n    at that station is the number of passengers that actually entered the train\n\n- Ensure that if there is a train for a station the number of passengers that should enter the train\n    at that station is the number of passengers that actually entered the train, and the number of passengers\n    that had to wait on the station is the number of passengers that left the train at the station\n\n- Ensure that the number of people that should enter the train at a station is always greater\n    than or equal to the number of passengers that actually entered the train at the station.\n\n'''\n\n'''\nSAMPLE INPUT:\n1 2\n0 1 1\n1 0 0\nSAMPLE OUTPUT:\npossible\n\nSAMPLE INPUT 2:\n1 2\n0 1 0\n1 0 1\nSAMPLE OUTPUT 2:\nimpossible\n\nSAMPLE INPUT 3:\n1 2\n0 1 0\n1 0 1\nSAMPLE OUTPUT 3:\nimpossible\n'''"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"1.875\"\nassert solution(\"6 2\\n\") == \"4.25\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"1.875\"\nassert solution(\"6 2\\n\") == \"4.25\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == '1'\nassert solution(\"2 3\") == '1.875'\nassert solution(\"6 2\") == '4.25'\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\n\"\"\"\nfrom math import log2"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\n\"\"\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\nprint('Passed!')\n\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\nimport math"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0 0'\nassert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\nassert solution('4 1 3') == '1 1'\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 7') == '1 4'\nassert solution('1 1 0') == '0 0'\nassert solution('3 0 0') == '1 6'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\nimport collections\nfrom math import ceil, sqrt\nfrom typing import List, Tuple, Union\n\nfrom pytest import raises\n\nfrom utils import read_input\n\nPoint = Tuple[int, int]\nBranches = List[Point]\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\nassert solution(str(sample_input_3)) == str(sample_output_3)\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0 0'\nassert solution('0 1 0') == '0 0'\nassert solution('0 0 0') == '0 0'\nassert solution('2 1 4') == '1 4'\nassert solution('1 0 1') == '0 0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(111111)\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nBWWB\\nBWBB\\nWBBW\\nBWBW') == '1'\n\nassert solution('6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW') == '0'\n\nassert solution('4\\nBWWW\\nBWWW\\nBWWW\\nBWWW') == '0'\n\nassert solution('6\\nWWWB\\nBWBW\\nWBBW\\nWBBW\\nWBBW\\nWBBW') == '0'\n\nassert solution('6\\nBBWB\\nWWWB\\nBWBB\\nWWWB\\nBWBW\\nBBWB') == '0'"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == '1'\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == '0'\nassert solution(\"6\\nBWWWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\\nWWBWWB\") == '0'\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nBWWB\\nBWBB\\nWBBW\\nWBWW') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\\nWWBWBB') == '0'\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nWBWB\\nBWBB\\nWBBW\\nBWBW') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nWBWB\\nBWWB\\nWBBW\\nWBWW') == '1'\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BWBWBW\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\") == \"0\"\nassert solution(\"WBWBWB\\nBWBWBW\\nWBWBWB\\nBWBWBW\\nWBWBWB\\nBWBWBW\") == \"1\"\nassert solution(\"WBBBWB\\nBWBWBW\\nWBWBWB\\nBWBWBW\\nWBWBWB\\nBWBWBW\") == \"0\"\nassert solution(\"BWBWBW\\nWBWBWB\\nBWBWBW\\nBWBWBW\\nWBWBWB\\nBWBWBW\") == \"1\"\nassert solution(\"WBWBWB\\nBWBWBW\\nWBWBWB\\nBWBWBW\\nWBWBWB\\nBWBWBW\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nWBWB\\nBWWB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWBW\\nBWBW\\nBWBW\\nBWBW\") == \"0\"\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBWW\\nWWBWBB\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"4\\nBWWB\\nWBWB\\nBWWB\\nBWBW\\n\") == \"0\"\nassert solution(\"6\\nBWWWWB\\nWBWWWB\\nWBBWBW\\nBBWWWB\\nBWWWBB\\nWWBWWB\\n\") == \"0\"\nassert solution(\"6\\nWBBWWB\\nWBWWWB\\nWBBWWB\\nBWWBBB\\nBWWWBB\\nWWBWWB\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nBWWB\\nWBWB\\nBWWB\\nBWBW\\n') == '1'\nassert solution('4\\nWBWW\\nBWBW\\nWBWB\\nBWBW\\n') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBWB\\nWWBWBB\\n') == '0'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '1 2 3'\nassert solution('1\\n2\\n3\\n4\\n') == '1 2 3 4'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == \"2 1\"\nassert solution(\"2 6 3 4\") == \"6 3\"\nassert solution(\"2 4 1 3\") == \"4 1\"\nassert solution(\"1 2 1 3\") == \"2 1\"\nassert solution(\"1 4 5 8\") == \"4 5\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"3 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\nassert solution('1 2 1 2\\n2 6 3 4') == '2 1\\n3 4'\nassert solution('1 2 1 3\\n1 4 5 8') == '3 7'\n\"\"\""
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n5\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"3 7\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\n\nclass Solution:\n    def solve(self, q: int, data: List[List[int]]) -> List[str]:\n        segments = defaultdict(list)\n        ans = []\n        for l, r, l2, r2 in data:\n            segments[l, r].append(l2)\n            segments[l, r].append(r2)\n\n        for l, r in segments:\n            if len(segments[l, r]) == 2:\n                ans.append(l)\n                ans.append(r)\n\n        return ans\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n1\\n2\\n') == '3\\n2'\nassert solution('2\\n6\\n3\\n4\\n2\\n1\\n1\\n2\\n') == '1\\n3\\n3'\nassert solution('1\\n2\\n1\\n2\\n') == '1\\n3\\n3'\nassert solution('1\\n2\\n1\\n2\\n') == '1\\n3\\n3'\n\n\"\"\""
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\""
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[3,2,0,-4]\") == \"true\"\nassert solution(\"[1,2]\") == \"true\"\nassert solution(\"[1]\") == \"true\"\nassert solution(\"[1,2,1]\") == \"true\"\nassert solution(\"[1,2,0]\") == \"true\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution({\"head\": [3,2,0,-4], \"pos\": 1}) == True\nassert solution({\"head\": [1,2], \"pos\": 0}) == True\nassert solution({\"head\": [1], \"pos\": -1}) == False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('12') == '1, 2'\nassert solution('1, 2, 3') == '1, 2, 3'\nassert solution('1, 2, 3, 4, 5') == '1, 2, 3, 4, 5'\nassert solution('1, 2, 3, 4, 5, 6') == '1, 2, 3, 4, 5, 6'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 -1 1 2') == 'false'\nassert solution('1 1 1 2') == 'true'\nassert solution('1 1 2 3') == 'false'\nassert solution('1 2 3 1') == 'true'\nassert solution('2 3 1 3') == 'true'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1,2') == True\nassert solution('1,2,3,4') == False\nassert solution('1,2,3,4,5') == True\nassert solution('1,2,3,4,5,6,7') == True\nassert solution('1,2,3,4,5,6,7,8') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[3,2,0,-4]\") == \"true\"\nassert solution(\"[1,2]\") == \"true\"\nassert solution(\"[1]\") == \"false\"\nassert solution(\"[0,-1]\") == \"false\"\nassert solution(\"[0,-1,2]\") == \"true\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3,2,0,-4\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == True\nassert solution(\"\") == False\nassert solution(\"a\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('[3,2,0,-4]\\n1') == True\nassert solution('[1,2]\\n0') == True\nassert solution('[1]\\n-1') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('[3,2,0,-4]', 1) == True\nassert solution('[1,2]', 0) == True\nassert solution('[1]', -1) == False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3,2,0,-4\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == False\nassert solution(\"1,2\") == True\n\"\"\"\n\n\nfrom typing import Dict\n\nfrom DataStructure.Utils.leetcode import ListNode\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \"\"\"\n        1. use hash to record the node and the index\n        2. if the node is in the hash, return True\n        \"\"\"\n        hash: Dict[int, int] = {}\n        while head:\n            if hash.get(head, -1)!= -1:\n                return True\n            hash[head] = 1\n            head = head.next\n        return False\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2, 7, 11, 15') == '0, 1'\n\"\"\"\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        map_value = {}\n        for i in range(len(nums)):\n            num = nums[i]\n            complement = target - num\n            if complement in map_value:\n                return [map_value[complement], i]\n            map_value[num] = i\n        return []\n\nsolution = Solution()\nnums = [2, 7, 11, 15]\ntarget = 9\nassert solution.twoSum(nums, target) == [0, 1]\nnums = [3, 2, 4]\ntarget = 6\nassert solution.twoSum(nums, target) == [1, 2]\nnums = [3, 3]\ntarget = 6\nassert solution.twoSum(nums, target) == [0, 1]\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 7 11 15') == '0 1'"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(nums=[2, 7, 11, 15], target=9) == [0, 1]\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2,7,11,15') == '0,1'\n'''\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 7 11 15\") == \"0 1\"\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 7 11 15') == [0, 1]\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2') == '2'\nassert solution('5\\n1\\n2') == '1'\nassert solution('9\\n3\\n2') == '1'\nassert solution('2\\n1\\n3') == '0'\nassert solution('1\\n2\\n3') == '1'\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 7 11 15\") == \"0 1\"\nassert solution(\"2 2\") == \"0 0\"\nassert solution(\"2 2 2\") == \"0 0 0\"\nassert solution(\"2 2 2 2\") == \"0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\n\nfrom typing import List, Optional\nfrom collections import Counter\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2,7,11,15\") == [0,1]\n\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1') == ''\nassert solution('1\\n1\\n') == ''\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 3\\n2 3 4\") == \"1\"\nprint(solution(\"3\\n3 3 3\"))\nprint(solution(\"4\\n2 3 4\"))\nprint(solution(\"3\\n3 3 3\"))\nprint(solution(\"5\\n3 2 3 2 5\"))\nprint(solution(\"4\\n3 3 3\"))\nprint(solution(\"4\\n2 2 2\"))\nprint(solution(\"3\\n1 1 1\"))\nprint(solution(\"5\\n4 5 4 5\"))\nprint(solution(\"3\\n4 4 4\"))\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = [[int(i) for i in sys.stdin.readline().strip().split()] for j in range(n)]\nd = [[(j[i] + j[j] + a[i][j]) for j in range(n)] for i in range(n)]\nprint(sum([max(x) for x in d]))\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1') == '0'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\n\nn = int(input())\n\nintersections = 0\n\nfor i in range(n):\n    for j in range(n):\n        if i!= j:\n            if (j + 1 - i == n - 1) and (i + 1 - j == n - 1):\n                intersections += 1\n            elif (j + 1 - i == 1) and (i + 1 - j == 1):\n                intersections += 1\n\nprint(intersections)"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('2\\n1 1') == 'impossible'\nassert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n'''\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('2\\n3 7') == 'impossible'\n\nimport sys\na = sys.stdin.read()\na = a.split('\\n')\na = list(map(int, a))\nsys.stdout.write(solution(a))"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\n\"\"\"\n\nimport sys\n\ninput_string = sys.stdin.readlines()\nn = int(input_string[0].split()[0])\nsocks = input_string[1].split()\nsocks = [int(i) for i in socks]\n\nsocks.sort()\nd = dict()\n\nfor i in range(n):\n    if socks[i] not in d:\n        d[socks[i]] = 1\n    else:\n        d[socks[i]] += 1"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"1 2 2 1\"]) == \"4\"\nassert solution([\"1 2 2 1\", \"3 7\"]) == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('2\\n1 1\\n1 1') == 'impossible'\nassert solution('1\\n3') == 'impossible'\nassert solution('2\\n1 2 2 1\\n1 1 1 1') == '4'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('184 1\\n') == '180'\nassert solution('123450995 1\\n') == '123451000'\n\"\"\"\n\nx,y = input().split(' ')\nz = ''\nwhile len(z) < len(x) and len(z) < len(y) and x[0] == y[0]:\n    z += x[0]\n    x = x[1:]\n    y = y[1:]\n\nprint(int(z+x+y))"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\"\nimport sys"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''184 1''') == '180'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == e\nprint(solution(stdin))"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"184 1\") == \"180\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('184 1\\n') == '180'\nassert solution('123450995 1\\n') == '123451000'\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1\\n1 0\\n1 1\\n\") == \"0.000000\"\nassert solution(\"3\\n2 2\\n1 1\\n3 3\\n\") == \"1.000000\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == \"0.000000\"\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\nIn the second example, the total unusefulness is 0, because all citizens are located exactly on the tram line.\n\n---\nIn the first example, the total unusefulness is 0, because all citizens are located exactly"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == \"0.000000\"\nassert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == \"0.000000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\nassert solution('5\\n0 0\\n0 3\\n1 1\\n1 2') == '0.666667'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"0.5\"\nassert solution(\"5\\n1 0\\n2 1\\n3 0\\n4 1\\n5 1\") == \"1.5\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\"\"\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    \"\"\") == \"\"\n\"\"\"\n)\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\n\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\n\n\"\"\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\nassert solution('6\\n2 1 4 6 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8\\n1 2 3 5 7 8') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n1 2 3 4\\n2 3 4\\n3 4\\n5\\n4 2 6 8 1\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0431\u044b\u043b \u0431\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0433\u0440\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0442.\u043a. \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u043c \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c, \u0434\u043b\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\n\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0432\u0435\u0442 \u0434\u043b\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u0441\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u043e\u043a\u0430\u0436\u0443\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c\u0438. \u041f\u0440\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f. \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0435.\n\n\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n5\n2 1 2\n3 2 3 4\n3 4 2 1\n3 2 4 1\n5 4 3 2 1\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n3\n4\n5\n1\n2\n3\n4\n5\nSample Output:\n1\n2\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n\"\"\"\n\n\"\"\"\n\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043a\u0440\u0430\u0441\u0438\u0432\u0435\u0435 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u043e\u0441\u044c \u0447\u0435\u0440\u0435\u0437 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0442.\u043a. \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043d\u0435 \u0441\u0442\u043e\u044f\u043b\u0438 \u0432 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\n\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438, \u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a. \u0422\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432.\n\n\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0438\u0441\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e.\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u0441\u044f \u043d\u0430 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e \u0438 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u0437"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(0).read()) == open(1).read()\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\nassert solution('3 4 5') == 6\nassert solution('2 2 2') == 8\nassert solution('1 1 1') == 1\n'''\nfrom collections import Counter\nimport itertools"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('2 2') == '4'\n\"\"\"\n\nimport itertools\n\nstdin = input().split()\n\nstdin = [int(i) for i in stdin]\n\neye = itertools.combinations(range(1, stdin[0] + 1), 3)\nnose = itertools.combinations(range(1, stdin[1] + 1), 3)\nmouth = itertools.combinations(range(1, stdin[2] + 1), 3)\n\nprint(len(list(set(list(eye) + list(nose) + list(mouth)))))\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 2 3') == '6'\n\"\"\"\n\nnum_eyes = int(stdin.split(' ')[0])\nnum_nose = int(stdin.split(' ')[1])\nnum_mouth = int(stdin.split(' ')[2])\n\nnum_ways = 1\nfor i in range(1, num_eyes + 1):\n    num_ways *= i\nfor i in range(1, num_nose + 1):\n    num_ways *= i\nfor i in range(1, num_mouth + 1):\n    num_ways *= i\n\nprint(num_ways)\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\n\"\"\"\n\n\"\"\"\nThe solution is a little complex. It iterates through the three lists and does a couple of operations.\nThe operations:\n- Count the number of possible designs when the number of eyes is $n$, nose $t$, and mouth $m$.\n- Multiply this number with all the possible eye designs ($n!$).\n- Multiply this number with all the possible nose designs ($t!$).\n- Multiply this number with all the possible mouth designs ($m!$).\n- Add up all of these values.\nThe number of possible designs is the product of the three numbers above.\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\n\"\"\"\n\nfrom typing import List\n\nNUMBER_OF_BASE_EVENTS = 5\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\nassert solution('3 0 2\\n0 -1 0') == '1.0'\nassert solution('3 0 2\\n0 0 0') == '1.0'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 2\") == '1.666666'\nassert solution(\"3 1 -1 4\") == '2.5'"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\n\nassert solution('3 -1 4') == '2.5'\nassert solution('5 2 4 1 3 -1') == '1.3'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 0 2\\n3 0 2') == '1.6666666666666667'\nassert solution('1 -1 4\\n3 0 2') == '2.5'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7') == '7'\nassert solution('3 5') == '5'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('Problem_018.txt')\nn, k = map(int, input().split())\ncnt = 0\nfor i in range(2, n + 1):\n    if cnt == k:\n        print(i)\n        break\n    if i % 2 == 0:\n        pass\n    else:\n        cnt += 1\n\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1') == '3'\nassert solution('6 3') == '5'\nassert solution('7 100') == '97'\nassert solution('10 10000000') == '999999999'\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == '6'\nassert solution(\"15 12\") == '7'"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N M\\n1 1') == 'N M\\n2'\nassert solution('N M\\n2 10') == 'N M\\n3'\nassert solution('N M\\n3 100') == 'N M\\n4'\nassert solution('N M\\n4 1000') == 'N M\\n5'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1\n2\n3''') == '1'\nassert solution('''5 10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n''') == '7'\nassert solution('''5 9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n''') == '4'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n6') == '6'\nassert solution('15 12\\n7') == '7'\n\"\"\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456 123457\") == \"0\"\nassert solution(\"123789 123791\") == \"0\"\nassert solution(\"123789 123877\") == \"0\"\nassert solution(\"123864 123865\") == \"1\"\nassert solution(\"123864 123864\") == \"6\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nassert solution(\"101010 101010\") == \"0\"\n\"\"\"\n\nl, h = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123864 123865\") == \"1\"\n\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.666666666'\nassert solution('5\\n') == '0.833333333'\nassert solution('10\\n') == '0.9'\nassert solution('100\\n') == '0.99'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '0.5'\n\"\"\"\n\n\"\"\"\nApproach\nThe function can be obtained using the following equations.\n\nFor each i:\n    1. We consider the equation:\n            \\sum_{j=0}^{n-1} \\text{I}(i, j) = 1\n    where:\n        - I(i, j) is the probability of giving gifts to citizen j after receiving gifts from citizen i.\n        - n is the number of citizens.\n    \n    2. We then need to calculate the values of each individual\n        - So we consider the equation:\n            \\sum_{i=0}^{n-1} \\text{I}(i, j) = 1\n    for each citizen i, and find the value of each i.\n    \n    3. Once we have the value for each i, we then calculate the probability of giving gifts to the citizen itself:\n            \\sum_{i=0}^{n-1} \\text{I}(i, i) = n\n    and find the probability.\n\"\"\"\n\nfrom math import factorial as fac"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '0.5'\n\"\"\"\nimport random\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\n\"\"\"\n\nfrom math import factorial\n\nN = int(input())\n\nfact = factorial(N)\n\nans = fact / (fact * 2 ** N)\n\nprint(ans)\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\") == \"0.5\"\nassert solution(\"3\\n5\") == \"0.666666666\"\n\"\"\"\n\nfrom math import factorial as fac\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0) == 'impossible'\nassert solution(1) == 'impossible'\nassert solution(2) == 'impossible'\nassert solution(3) == 'impossible'\nassert solution(4) == 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\nprint(solution(\"180\"))\nprint(solution(\"96\"))\n\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'impossible'\n\nSample Input 1:\n180\nSample Output 1:\ntriple 20\ntriple 20\ntriple 20\nSample Input 2:\n96\nSample Output 2:\ntriple 19\ndouble 15\nsingle 9\nSample Input 3:\n144\nSample Output 3:\ndouble 18\ntriple 20"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('7') == 'impossible'\nassert solution('10') == 'impossible'\nassert solution('18') == 'impossible'\n\"\"\"\nimport re"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('180') == 'impossible'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"180\") == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution(\"96\") == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution(\"15\") == 'impossible'\nassert solution(\"20\") == 'impossible'\nassert solution(\"19\") == 'triple 19'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"\n\nfrom math import prod"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\nprint(solution(\"10 4 7\"))\nprint(solution(\"5 2 2\"))\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a square cake of side length $n$, and two cuts made on the cake, determine the volume of the largest piece of cake resulting from the cuts.\n\nSample Input 1:\n\n10\nSample Output 1:\n\n343\n\nSample Input 2:\n\n5\nSample Output 2:\n\n125\n\nSample Input 3:\n\n8\nSample Output 3:\n\n224\n\nSample Input 4:\n\n6\nSample Output 4:\n\n18\n\nSample Input 5:\n\n4\nSample Output 5:\n\n4\n\nSample Input 6:\n\n3\nSample Output 6:\n\n9\n\nSample Input 7:\n\n2\nSample Output 7:\n\n5\n\nSample Input 8:\n\n1\nSample Output 8:\n\n1"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 10\\n\") == \"7\"\nassert solution(\"2\\n3 8\\n5 8\\n\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(input())\ns, b = [0] * n, [0] * n\n\nfor i in range(n):\n    s[i], b[i] = map(int, sys.stdin.readline().split())\n\nprint(min(min(abs(sum(s) - sum(b)), abs(s[0] - b[0])), abs(s[0] - b[1])))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 10\") == \"7\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 8\") == \"1\"\nassert solution(\"3 10\") == \"7\"\nassert solution(\"3 0\") == \"0\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 10\") == \"3\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nsourness_list = []\nbitterness_list = []\nfor _ in range(N):\n    s, b = list(map(int, sys.stdin.readline().split()))\n    sourness_list.append(s)\n    bitterness_list.append(b)\nsourness_list.sort()\nbitterness_list.sort()\nsourness_max = sourness_list[N - 1]\nbitterness_min = bitterness_list[0]\n\nresult = 1000000000\n\nfor i in range(1, N - 1):\n    result = min(result, abs(bitterness_list[i] - (sourness_max - sourness_list[i])))\n\nprint(result)\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 10\\n5 8\\n8\\n1\\n1000000000\") == \"7\"\nassert solution(\"1\\n5 8\\n8\\n1\\n1000000000\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1000000000\") == \"0\"\n\nprint(solution(\"1\\n3 10\\n5 8\\n8\\n1\\n1000000000\"))"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\n3 10\n5 8\n8 3\"\"\") == \"1\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"3 10\"\n) == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 10\\n5 7\\n1 7\\n5\\n\") == \"3\"\nassert solution(\"2\\n2 2\\n\") == \"0\"\nassert solution(\"2\\n2 2\\n\") == \"0\"\n\"\"\"\n\nimport sys\n\nnum_ingredients = int(sys.stdin.readline())\nsourness_bitterness = []\nfor i in range(num_ingredients):\n    s, b = [int(x) for x in sys.stdin.readline().split()]\n    sourness_bitterness.append((s, b))\n\nsourness_bitterness.sort()\n\nsourness = 0\nbitterness = 0\nfor i in range(num_ingredients):\n    sourness += sourness_bitterness[i][0]\n    bitterness += sourness_bitterness[i][1]\n\nprint(abs(sourness - bitterness))"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n5 6\\n3 2\\n2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n3 10\\n5 8') == '1'\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your left hand.\\n'\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says smile.\\n\") == \"Simon says raise your left hand.\\nSimon says raise your right hand.\\nSimon says smile.\\n\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1\nSimon says smile.\n''') =='smile.'\n\nassert solution('''3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == 'raise your right hand.\\nraise your left hand.'\n\nimport sys\nsys.stdin = open('solution.in')\nsys.stdout = open('solution.out', 'w')\n\nprint(solution(input()))\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''1\nSimon says smile.\n'''),'smile.')\n        self.assertEqual(solution('''3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n'''), 'raise your right hand.\\nraise your left hand.')\nunittest.main()"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your left hand.\"\n\nprint(\"All test cases passed.\")\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") == \"smile.\"\nassert solution(\"\"\"\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"raise your right hand.\\nraise your left hand.\"\nassert solution(\"\"\"\n2\nSimon says smile.\nSimon says frown.\n\"\"\") == \"smile.\\nSimon says frown.\"\nassert solution(\"\"\"\n2\nSimon says smile.\nSimon says frown.\nSimon says frown.\n\"\"\") == \"Simon says frown.\"\nassert solution(\"\"\"\n2\nSimon says smile.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown.\nSimon says frown"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \" smile.\\n\"\nassert solution(\"2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \" raise your right hand.\\n\"\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n2\nSimon says lower your right hand.\n3\nSimon says raise your left hand.\n4\nSimon says something like that.\n5\nSimon says something else.\n6\nSimon says touch your nose.\n7\nSimon says stop touching your nose.\n\"\"\") == \"\"\" smile.\nlower your right hand.\nraise your left hand.\nsomething like that.\nsomething else.\ntouch your nose.\nstop touching your nose.\n\"\"\"\n\n\"\"\"\nWrite a program that prompts the user to enter a number between 10 and 20, inclusively. If the number is valid, the program should display the message \u201cYou entered the number X\u201d (where X is the number the user entered), and it should continue to prompt the user to enter another number. The program should display the message \u201cYou did not enter a valid number\u201d when the user enters a value that is not between 10 and 20, and it should continue to prompt the user to enter a new number. The program should exit when the user enters the number 20.\n\nNote: The input() function returns a string. If you want an integer value, you need to use the int() function to convert the string to an integer.\n\n-----Examples-----\nSample input:\n12\n\nSample output:\nYou entered the number 12\n\nSample input:\n22\n\nSample output:\nYou did not enter a valid number\n\nSample input:\n14\n\nSample output:\nYou entered the number 14\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\n\"\"\"\n\nimport sys\n\ncommand = sys.stdin.readline().strip()\ncommand_list = command.split('\\n')\n\nfor i in range(len(command_list)):\n    if command_list[i][:11] == \"Simon says\":\n        command_list[i] = command_list[i][11:]\n        print(command_list[i])\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\nSimon says smile.\n\"\"\") == \"smile.\"\nassert solution(\n\"\"\"\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\"\nraise your right hand.\nraise your left hand.\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n2\nSimon says raise your right hand.\n3\nSimon says raise your left hand.\n4\nSimon says stop raising your left hand.\n5\nSimon says stop raising your right hand.\n\"\"\") == \"\"\" smile.\nraise your right hand.\nraise your left hand.\nstop raising your left hand.\nstop raising your right hand.\n\"\"\"\n\nassert solution(\"\"\"1\nSimon says smile.\n2\nSimon says raise your right hand.\n3\nSimon says stop raising your right hand.\n4\nSimon says stop raising your left hand.\n5\nSimon says smile.\n\"\"\") == \"\"\" smile.\n\"\"\"\n\nassert solution(\"\"\"1\nSimon says smile.\n2\nSimon says stop smiling.\n3\nSimon says smile.\n4\nSimon says smile.\n5\nSimon says smile.\n\"\"\") == \"\"\" stop smiling.\n\"\"\"\n\nassert solution(\"\"\"1\nSimon says smile.\n2\nSimon says raise your right hand.\n3\nSimon says raise your left hand.\n4\nSimon says stop raising your left hand.\n5\nSimon says stop raising your right hand.\n\"\"\") == \"\"\" smile.\nraise your right hand.\nraise your left hand.\nstop raising your left hand.\nstop raising your right hand.\n\"\"\"\n\nassert solution(\"\"\"1\nSimon says smile.\n2\nSimon says raise your right hand.\n3\nSimon says raise your left hand.\n4\nSimon says stop raising your left hand.\n5\nSimon says smile.\n6\nSimon says raise your right hand.\n7\nSimon says raise your left hand.\n8\nSimon says stop raising your left hand.\n9\nSimon says stop raising your right hand.\n10\nSimon says smile.\n11\nSimon says raise your right hand.\n12\nSimon says raise your left hand.\n13\nSimon says stop raising your left hand.\n14\nSimon says smile.\n15\nSimon says raise your right hand.\n16\nSimon says raise your left hand.\n17\nSimon says smile.\n18\nSimon says stop raising your left hand.\n19\nSimon says stop raising your right hand.\n20\nSimon says smile.\n21\nSimon says raise your right hand.\n22\nSimon says raise your left hand.\n23\nSimon says smile.\n24\nSimon says stop raising your left hand.\n25\nSimon says stop raising your right hand.\n26\nSimon says smile.\n27\nSimon says raise your right hand.\n28\nSimon says raise your left hand.\n29\nSimon says smile.\n30\nSimon says stop raising your left hand.\n31\nSimon says stop raising your right hand.\n32\nSimon says smile.\n33\nSimon says raise your right hand.\n34\nSimon says raise your left hand.\n35\nSimon says stop raising your left hand.\n36\nSimon says stop raising your right hand.\n37\nSimon says smile.\n38\nSimon says raise your right hand.\n39\nSimon says raise your left hand.\n40\nSimon says stop raising your left hand.\n41\nSimon says stop raising your right hand.\n42\nSimon says smile.\n43\nSimon says raise your right hand.\n44\nSimon says raise your left hand.\n45\nSimon says stop raising your left hand.\n46\nSimon says stop raising your right hand.\n47\nSimon says smile.\n48\nSimon says raise your right hand.\n49\nSimon says raise your left hand.\n50\nSimon says smile.\n51\nSimon says stop raising your left hand.\n52\nSimon says stop raising your right hand.\n53\nSimon says smile.\n54\nSimon says raise your right hand.\n55\nSimon says raise your left hand.\n56\nSimon says stop raising your left hand.\n57\nSimon says stop raising your right hand.\n58\nSimon says smile.\n59\nSimon says raise your right hand.\n60\nSimon says raise your left hand.\n61\nSimon says stop raising your left hand.\n62\nSimon says stop raising your right hand.\n63\nSimon says smile.\n64\nSimon says raise your right hand.\n65\nSimon says raise your left hand.\n66\nSimon says smile.\n67\nSimon says stop raising your left hand.\n68\nSimon says stop raising your right hand.\n69\nSimon says smile.\n70\nSimon says raise your right hand.\n71\nSimon says raise your left hand.\n72\nSimon says smile.\n73\nSimon says stop raising your left hand.\n74\nSimon says stop raising your right hand.\n75\nSimon says smile.\n76\nSimon says raise your right hand.\n77\nSimon says raise your left hand.\n78\nSimon says smile.\n79\nSimon says stop raising your left hand.\n80\nSimon says stop raising your right hand.\n81\nSimon says smile.\n82\nSimon says raise your right hand.\n83\nSimon says raise your left hand.\n84\nSimon says smile.\n85\nSimon says stop raising your left hand.\n86\nSimon says stop raising your right hand.\n87\nSimon says smile.\n88\nSimon says raise your right hand.\n89\nSimon says raise your left hand.\n90\nSimon says smile.\n91\nSimon says stop raising your left hand.\n92\nSimon says stop raising your right hand.\n93\nSimon says smile.\n94\nSimon says raise your right hand.\n95\nSimon says raise your left hand.\n96\nSimon says smile.\n97\nSimon says stop raising your left hand.\n98\nSimon says stop raising your right hand.\n99\nSimon says smile.\n100\nSimon says raise your right hand.\n101\nSimon says raise your left hand.\n102\nSimon says smile.\n103\nSimon says stop raising your left hand.\n104\nSimon says stop raising your right hand.\n105\nSimon says smile.\n106\nSimon says raise your right hand.\n107\nSimon says raise your left hand.\n108\nSimon says smile.\n109\nSimon says stop raising your left hand.\n110\nSimon says stop raising your right hand.\n111\nSimon says smile.\n112\nSimon says raise your right hand.\n113\nSimon says raise your left hand.\n114\nSimon says smile.\n115\nSimon says stop raising your left hand.\n116\nSimon says stop raising your right hand.\n117\nSimon says smile.\n118\nSimon says raise your right hand.\n119\nSimon says raise your left hand.\n120\nSimon says smile.\n121\nSimon says stop raising your left"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\n\"\"\"\nNotes:\n\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n------------------------------"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nprint(solution(\"4 1\\nA\\nA\\nG\\nT\"))\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''4 2\nAA\nAT\nTT\nTC'''\n) == '3'\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == '3\\n0 1\\n0 2\\n0 3'\n\"\"\"\n\n\"\"\"\nSolution: https://app.codility.com/demo/results/training3BQWYX-7VD/"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\nassert solution(\"4 1\\nA\\nB\\nC\\nD\") == 0\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2\nAA\nAT\nTT\nTC''') == '3\n0 1\n0 2\n0 3'\nassert solution('''4 1\nA\nA\nG\nT''') == '2\n0 1\n0 2\n0 3'\n'''"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n0 2\\n1 2\\n2 3'\n\n\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 2\\n' + \\\n    'AA\\n' + \\\n    'AT\\n' + \\\n    'TT\\n' + \\\n    'TC'\n) == '3\\n0 1\\n0 2\\n0 3'\nassert solution(\n    '4 1\\n' + \\\n    'A\\n' + \\\n    'A\\n' + \\\n    'G\\n' + \\\n    'T'\n) == '2\\n0 1\\n0 2'\nprint('Passed')"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\n\nprint('Test passed\\n')\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 'ab'\nassert solution('abbba') == 'bba'\nassert solution('ab') == '-1'\nassert solution('abb') == 'ab'\nassert solution('abc') == '-1'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nprint('Success')\n\n'''\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"bab\") == \"bba\"\nassert solution(\"abb\") == -1\nassert solution(\"baabb\") == \"bb\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == -1\nassert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('abba') == 'a'\nassert solution('abc') == '-1'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"bbabab\") == \"bba\"\nassert solution(\"abb\") == \"abb\"\nassert solution(\"ab\") == \"ab\"\n\nassert solution(\"abcd\") == \"abcd\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"bab\") == \"-1\"\n\nimport pytest\nfrom collections import Counter\nfrom collections import defaultdict\n\n\n@pytest.mark.parametrize('word, expected', [\n    ('aaaa', 'a'),\n    ('bab', '-1')\n])\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''20 100\n''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('''2 3\n''') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\nprint(solution(stdin))"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''20 100\n''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('''2 3\n''') == 'Dr. Chaz needs 1 more piece of chicken!'\n\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 100\\n2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 2 more piece of chicken!'\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\"\"\"\n\nfrom functools import reduce\n\na, b = map(int, input().split())\n\nprint(\"Dr. Chaz will have\" + (b % a) * \" piece\" + \"left over!\")\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\n\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\nassert solution('''4 10\n1 1 1\n5 2 3\n5 2 1\n2 2 2''') == '0'\nassert solution('''4 30\n1 1 1\n5 2 3\n5 2 1\n2 2 2''') == '0'\nassert solution('''4 30\n1 1 1\n5 2 3\n5 2 1\n2 2 2''') == '0'\n\n---"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == 0"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == 0"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == 0\n\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('o#a#') == 'a'\nassert solution('luka') == 'kala'\nassert solution('o#a#kula') == 'a'\nassert solution('lukao#a#kula#i#a#') == 'a'"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"4 4\n    luka\n    o#a#\n    kula\n    i#a#\n    \"\"\"\n) == \"kala\"\n\nassert solution(\n    \"\"\"4 4\n    luka\n    o#a#\n    kula\n    i#as\n    \"\"\"\n) == \"as\"\n\nassert solution(\n    \"\"\"4 4\n    luka\n    o#a#\n    kula\n    i#as\n    \"\"\"\n) == \"as\"\n\n\"\"\"\nRuntime: 24 ms, faster than 99.54% of Python3 online submissions for Smallest Word in a Crossword.\nMemory Usage: 14.4 MB, less than 60.25% of Python3 online submissions for Smallest Word in a Crossword.\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nluka\\n#o#\\nkula\\ni#\\n\") == \"kala\"\nassert solution(\"4 4\\nluka\\n#o#\\nkula\\ni#\\n\") == \"as\"\n\"\"\"\nimport sys\nimport string"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\"\"\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\n[+]Temporal marker            :  Sun, 6:50 | Feb 02, 20\n[+]Temporal marker untethered :  Sun, 6:50 | Feb 02, 20\n[+]Comments                  : *Really struggled with this one\n                                *The approach was to set a set of words and then check for words\n                                *Afterwords I found the problem was that I wasn't looking for words\n                                *The approach was to check for words of length 1 and 2 only\n                                *I then found that the algorithm was checking words backwards\n                                *This is the last approach I tried\n                                *Time complexity is O(n*m*k) - n rows, m cols, k = # of chars in a word\n                                *Space complexity is O(n*m) - where n = rows, m = cols, and O(n) comes from the set\n                                *I couldn't figure out the runtime and space complexity\n\n\"\"\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == 'kala'\nassert solution(\"4 4\\nluka\\n#as\\nkula\\ni#a#\") == 'as'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\nassert solution(\"3 4\\nluka\\no#a#\\nkula\\ni#as\") == \"kla\"\n\n\"\"\"\n\nimport math\n\nR, C = [int(x) for x in input().split()]\ninput_list = []\nfor i in range(R):\n    input_list.append(input())\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\n\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\n\nassert solution('''4 4\nluka\no#a#\nkula\ni#as\n''') == 'as'\n\nassert solution('''4 4\nluka\no#a#\nkula\ni#as\n''') == 'as'\n\nassert solution('''4 4\nluka\no#a#\nkula\ni#as\n''') == 'as'"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n\"\"\"\n\nfrom itertools import zip_longest\nfrom typing import Dict, Tuple, List\n\nINPUT_STR = 'WNEENWEENEENE'\nROUTE_MACRO_LIST = ['N', 'S', 'E', 'W', 'M']"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WNW') == 'WNWM'\nassert solution('WWENWWWNWWWE') == 'WWWWWWWWWWWWWWWWW'\nassert solution('WNWNWNWW') == 'WNWWWWWNWNWNWNWW'\nassert solution('NWNWNWW') == 'NWNWNWNWNWNWNWNW'\nassert solution('WNWNW') == 'WNWWWWWNWNWNW'\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('NSEW') == '4'\nassert solution('WNENWNENWESWNWSWWNENWSEWNNESWNENENWSEWNENWSEWNNESWNENENWSEWNENWSEWNENWSEWNENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENEN"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WNEENWEENEENE') == '10'\nassert solution('NSEW') == '4'\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\nassert solution
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\nassert solution('3 3 3 3') == 'problems ahead\\n'\nassert solution('0 0 0 0') == 'problems ahead\\n'\n\n----\n\nprint('1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n')\nprint('0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n')\nprint('3 3 3 3')\nprint('0 0 0 0')\n\n###\n\n1 2 3 4\n0 4 2 2\n3 3 3 3\n0 0 0 0\n\n###\n\n1 2 3 4\n0 4 2 2\n0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\nproblems ahead\n\n###\n\n1 2 3 4\n0 4 2 2\n0 0 0 0\n0 0 0 0\n3 3 3 3\n0 0 0 0\nproblems ahead\n\n###\n\n1 2 3 4\n0 4 2 2\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\nproblems ahead\n\n###\n\n1 2 3 4\n0 0 0 0\n0 4 2 2\n0 0 0 0\n0 0 0 0\n0 0 0 0\nproblems ahead\n\n###\n\n1 2 3 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\nproblems ahead\n\n###\n\n1 2 3 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\nproblems ahead"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\"\nassert solution(\"0 - 2 2\") == \"problems ahead\"\n\"\"\"\nimport math\nimport sys\nfrom functools import reduce\n\nstdin = [int(i) for i in sys.stdin.read().split()]\na, b, c, d = stdin[0:4]"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\"\"\"\nassert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\nproblems ahead\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\nassert solution('0 0 0 0') == 'problems ahead\\n'\nassert solution('0 0 0 0') == 'problems ahead\\n'\nassert solution('0 0 0 0') == 'problems ahead\\n'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\nassert solution(\"0 1 1 0\") == \"problems ahead\\n\"\n\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\n\nimport sys\nfrom io import StringIO"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution(\"0 4 2 2\") == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\nassert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution(\"0 4 2 2\") == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\nassert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\"\"\".splitlines()\nassert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\nproblems ahead\n\"\"\".splitlines()\n\n------Hint------\n- You can use the min, max and range functions to find the combinations of operators that work for all numbers.\n- You can find the value of an expression with the eval() function.\n- If you are using the min and max functions, make sure to use the operator precedence to take care of the expression.\n\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\nprint(\"OK!\")\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BANANA PIDZAMA') == '...\\n...\\nABANAN\\n..M..'\nassert solution('MAMA TATA') == '..T..\\n.M.A.\\n..T..'\n\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'BANANA PIDZAMA'\n) == '....\\n....\\n....\\n....\\nBANANA\\n....\\n....\\n....'\nassert solution(\n    'MAMA TATA'\n) == '..T\\n..M\\n.A\\n.T\\n.A'\n\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BANANA PIDZAMA') == '\\n'.join(['P....', 'I....', 'D....', 'Z....', 'BANANA', 'M....', 'A....'])\nassert solution('MAMA TATA') == '\\n'.join(['T..', 'MAMA', 'T..', 'A..'])\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A=\"ABBA\", B=\"CCBB\") == 4\nassert solution(A=\"BANANA\", B=\"PIDZAMA\") == 5\nassert solution(A=\"MAMA\", B=\"TATA\") == 3\nassert solution(A=\"BANANA\", B=\"PIDZAMA\") == 5\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BANANA PIDZAMA') == '\\n.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '\\n.T..\\nMAMA\\n.T..\\n.A..'"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABBA CCBB\") == \"\"\"\n.C..\n.C..\nABBA\n.B..\n\"\"\"\n\"\"\"\nThis is a template solution for the problem BANANA PIDZAMA.\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3\\n10 14\\n13 17\\n25 26') == '10'\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26\\n') == 10\nassert solution('2\\n1 365\\n20 28\\n') == 365\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\\n4 5\\n1 1\\n2 1\") == 2\nassert solution(\"3 3\\n1 2\\n2 3\\n4 5\\n1 1\\n2 1\") == 5\nassert solution(\"1 365\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n2 1\") == 31\n\n------Constraints------\n1 <= N <= 100\n1 <= s_ i <= t_ i <= 365\n\n'''\n\nfrom itertools import chain, combinations, product"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == 10\nprint(solution(stdin))\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"\nassert solution(\"3\\n1 365\\n20 28\\n\") == \"365\"\n\nprint(\"Successfully passed all tests for Q1\")\n\n'''\nQ2:\n    I think there is an easier way to calculate this problem. It can be written as\n    day_count = 0\n    for each day in range(1, 365):\n        if day in range(s1, t1+1) or day in range(s2, t2+1) or day in range(s3, t3+1):\n            day_count += 1\n    return day_count\n'''"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('a\\nb') == 0\nassert solution('a\\n1') == 1\nassert solution('a\\n1\\n1') == 2\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"1\") == \"0 1\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == '0 1'\nassert solution(\"2\") == '1 2'\nassert solution(\"3\") == '2 4'\nassert solution(\"4\") == '4 8'\nassert solution(\"5\") == '6 12'\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"2\") == \"0 1\"\nassert solution(\"3\") == \"0 2\"\nassert solution(\"4\") == \"1 2\"\nassert solution(\"5\") == \"2 4\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n\") == \"0 1\"\nassert solution(\"2\\n\") == \"1 0\"\nassert solution(\"3\\n\") == \"0 2\"\nassert solution(\"4\\n\") == \"1 2\"\nassert solution(\"5\\n\") == \"0 4\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline())\n\na_count = 0\nb_count = 0\n\nfor i in range(K):\n    if i % 3 == 0:\n        a_count += 1\n    elif i % 3 == 1:\n        b_count += 1\n\nprint(a_count, b_count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nSample Input:\n1\nSample Output:\n0 1\n\nSample Input:\n4\nSample Output:\n2 3\n\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == (\"0 1\")\nassert solution(\"2\") == (\"1 0\")\nassert solution(\"4\") == (\"2 3\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2 3'\nprint(solution('4'))\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '2 3'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2 3\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '2 3'"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == \"B 100 49\"\n\n\"\"\"\n\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\n3 0\n5 1\n2 100 99\n1 100 99\n1 100 99\n3 100 50\n\n\"\"\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nprint(solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\"))"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\"\n\"\"\"\n\n\nimport unittest\nimport sys\n\n\nclass Solution:\n    def compute(self, raw_input):\n        pass\n\n    def get_parsed_input(self, raw_input):\n        pass\n\n    def compute_all(self, raw_input):\n        pass\n\n    def solution(self, raw_input):\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nprint('OK')\n\n-----Problem-----\nYou are given a set of $D$ districts, and a district $d$ is described by a list of $P$ precincts. For each precinct $p$, you are given the number of votes for the candidate from party A ($0 \\le a_ p \\le 100000$), and the number of votes for the candidate from party B ($0 \\le b_ p \\le 100000$). It is guaranteed that:\n - for each precinct $p$, $0 < a_ p + b_ p$,\n - each district is assigned at least one precinct, and\n - there are no ties within any district.\n\nGiven this input, determine the party that wins each district. Then, determine the number of wasted votes for party A and for party B. Finally, determine the efficiency gap between the two parties. The efficiency gap should be accurate to within an absolute error of $10^{-6}$.\n\n-----Solution-----"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('5 5\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\nassert solution('5 5\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\nassert solution('5 5\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\nassert solution('5 5\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\\n\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1 + 4 + 9 + 16 = 33'\nassert solution('5\\n1 2 3 4 5') == '1 + 4 + 9 + 16 = 33'\n\n'''"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('A') == 'A'\nassert solution('$a$') == '$a$'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\nprint(solution('5\\n2\\n1\\n4\\n3\\n5'))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == expected\nprint(solution(a))\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3\\n1\\n5\\n7') == 35\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nresult = 0\n\nfor i in range(1, n + 1):\n    x = int(sys.stdin.readline())\n    result += x ** 2\n\nprint(result * (n + 1))"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('2\\n1\\n1\\n') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n4\\n3\\n5\\n\") == \"168\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == '168'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF', 'Wrong solution'\nassert solution('3 3\\nBCA\\nDEF\\n2\\n') == 'ABCD', 'Wrong solution'\n\nprint('Hooray!')\n\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"3 3\", \"ABC\", \"DEF\", \"0\"]) == \"CBDADEF\"\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(stdin)) == str(stdin)\n\n\"\"\"\n\nimport sys\n\nrows, cols = [int(x) for x in input().split()]\nm = []\nfor _ in range(rows):\n    m.append(input())\nT = int(input())"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('3 3\\nBCA\\nDEF\\n2') == 'BCDEDF'\nassert solution('3 3\\nAB\\nDEF\\n2') == 'CBDEDF'\nassert solution('3 3\\nAB\\nEDF\\n2') == 'CBDEDF'\nassert solution('3 3\\nAB\\nCDE\\n2') == 'CBEFDA'\n\"\"\"\n\nfrom typing import List\n\nN1, N2 = map(int, input().split())"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 ABC DEF 0\") == \"CBADEF\"\nassert solution(\"2 3 ABC DEF 2\") == \"CDBEAF\"\nassert solution(\"5 6 ABC DEF 2\") == \"CDAFBE\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 ABC DEF 0\") == \"CBADEF\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n''') == '4'\n\nassert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '1'\n\nassert solution('''\n5\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n''') == '4'\n\nassert solution('''\n3\n3\n100 T\n100 N\n100 T\n100 N\n''') == '4'\n\nassert solution('''\n3\n5\n50 T\n100 N\n100 T\n100 N\n''') == '4'"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"5\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n2\\n3\\n3\\n4\\nT\\n5\\nT\\n2\\n3\\n3\\nP\\n3\\nT\\nT\\nT\\nT\\nN\\nT\\nN\\nP\\nN\\nN\\nN\\nN\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nN\\nT\\nT\\nN\\nP\\nT\\nT\\nN\\nP\\nT\\nN\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nN\\nT\\nN\\nN\\nN\\nT\\nN\\nT\\nN\\nN\\nT\\nP\\nT\\nP\\nT\\nN\\nN\\nN\\nT\\nT\\nP\\nN\\nN\\nP\\nP\\nT\\nN\\nT\\nN\\nT\\nP\\nN\\nN\\nT\\nN\\nT\\nP\\nT\\nN\\nP\\nT\\nT\\nT\\nN\\nN\\nP\\nT\\nN\\nN\\nN\\nN\\nT\\nP\\nT\\nT\\nT\\nN\\nP\\nT\\nN\\nP\\nT\\nN\\nP\\nT\\nP\\nP\\nT\\nN\\nP\\nT\\nP\\nN\\nN\\nP\\nP\\nT\\nP\\nN\\nT\\nP\\nN\\nP\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nN\\nP\\nT\\nN\\nP\\nN\\nN\\nT\\nP\\nN\\nP\\nN\\nP\\nN\\nT\\nP\\nP\\nP\\nT\\nP\\nN\\nN\\nT\\nN\\nT\\nP\\nP\\nN\\nN\\nN\\nN\\nN\\nP\\nT\\nN\\nN\\nN\\nT\\nP\\nT\\nT\\nP\\nN\\nT\\nT\\nN\\nN\\nP\\nN\\nN\\nP\\nT\\nN\\nN\\nT\\nP\\nT\\nN\\nN\\nN\\nN\\nT\\nT\\nN\\nP\\nP\\nN\\nP\\nN\\nN\\nN\\nT\\nN\\nN\\nN\\nN\\nN\\nP\\nN\\nN\\nN\\nN\\nT\\nP\\nN\\nT\\nP\\nT\\nP\\nP\\nN\\nT\\nT\\nN\\nN\\nN\\nN\\nN\\nT\\nT\\nT\\nT\\nN\\nP\\nP\\nN\\nP\\nN\\nN\\nP\\nP\\nT\\nN\\nP\\nP\\nP\\nP\\nN\\nN\\nN\\nN\\nT\\nN\\nN\\nP\\nT\\nN\\nN\\nT\\nT\\nT\\nN\\nN\\nN\\nT\\nN\\nN\\nT\\nN\\nN\\nN\\nN\\nP\\nT\\nN\\nP\\nT\\nN\\nN\\nN\\nN\\nT\\nT\\nT\\nP\\nP\\nP\\nN\\nN\\nN\\nT\\nT\\nN\\nN\\nT\\nT\\nN\\nN\\nN\\nT\\nN\\nT\\nN\\nN\\nN\\nT\\nT\\nN\\nP\\nN\\nP\\nN\\nT\\nN\\nN\\nN\\nN\\nN\\nN\\nP\\nN\\nT\\nN\\nN\\nP\\nN\\nN\\nN\\nT\\nN\\nP\\nT\\nN\\nN\\nN\\nN\\nP\\nN\\nN\\nN\\nT\\nP\\nT\\nN\\nP\\nN\\nN\\nP\\nN\\nN\\nT\\nP\\nN\\nN\\nN\\nT\\nP\\nN\\nN\\nT\\nP\\nN\\nN\\nN\\nN\\nN\\nP\\nT\\nT\\nT\\nN\\nN\\nN\\nN\\nN\\nT\\nN\\nN\\nP\\nT\\nN\\nT\\nP\\nT\\nP\\nN\\nN\\nT\\nN\\nN\\nN\\nP\\nT\\nP\\nT\\nN\\nN\\nN\\nN\\nT\\nP\\nN\\nP\\nN\\nN\\nP\\nN\\nP\\nN\\nT\\nP\\nN\\nN\\nT\\nN\\nN\\nN\\nN\\nN\\nT\\nN\\nN\\nN\\nT\\nT\\nP\\nN\\nN\\nT\\nT\\nP\\nN\\nP\\nT\\nN\\nN\\nP\\nP\\nN\\nN\\nT\\nN\\nN\\nN\\nN\\nP\\nP\\nN\\nN\\nT\\nN\\nP\\nP\\nT\\nN\\nN\\nP\\nN\\nT\\nN"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '5'\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '5'\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 N') == '4'\n\n'''"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == '1'\nassert solution(\n\"\"\"\n1\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n\"\"\") == '4'\n\"\"\"\n)\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"6\"\nassert solution(\"6 8\\n1 2\\n1 3\\n2 3\\n4 5\\n5 6\") == \"22\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == 6\nassert solution('6 8') == 22\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n6 8') == '22'\n\"\"\"\n\na, b = map(int, stdin.readline().split())\n\na_b = a * (a - 1) // 2\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('123456') == ''\nassert solution('1234') == ''\nassert solution('123') == ''\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n''') == '6'\n\nassert solution('''6 8\n''') == '22'\n\nassert solution('''6 4\n''') == '6'\n\nassert solution('''4 2\n''') == '2'\n\nassert solution('''6 7\n''') == '12'"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"6 8\") == \"22\"\n\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 2') == '6'\nassert solution('6 8\\n1 2 2 3 3 4 4 5') == '22'\n\nSample Input 3:\n10 100\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '100'\n\nassert solution('10 100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '100'\n\nassert solution('10 100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '100'\n\nassert solution('10 100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n1 2 3 4 5"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3') == '6'\nassert solution('6 8\\n1 2 1 3 4 5 6\\n1 3 1 4 5 2 6\\n2 3 2 4 5 6\\n1 4 1 5 2 6\\n4 5 1 2 6\\n3 4 2 5 6') == '22'\n\n\"\"\"\n\nfrom queue import PriorityQueue\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n6 8\") == \"22\"\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(a * (a - 1) // 2 - b * (b - 1) // 2)\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\n\n\"\"\"\nfrom numpy import full, array, zeros"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == 1\nassert solution(\"1 4\\n4 3 2 1\") == 0\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '1'\nassert solution('''1 4\n4 3 2 1''') == '0'\n\n'''\nThis problem was asked by Dropbox.\n\nThe skyline of a city is composed of several buildings of various heights, all of which have a skyline of their own. We consider two buildings to have a skyline of intersection if their \nunion height is less than the height of the tallest building in the union.\n\nFor example, if the city has a building of height $h(1)$ and another building of height $h(2)$, the first building has a skyline of intersection of height $h(1)+h(2)-h(1 \\cup 2)$.\n\nGiven the heights of the buildings, write a function that returns the height of the tallest possible skyline of intersection.\n\nNote: There can be many skylines with the same height, you can return any of them.\n\n-----------------\n\nSo, the skyline is the union of the skylines of each building, so it can be represented as a skyline of union of each building.\n\nSince we're given the heights of the buildings, we can assume that the buildings are in order. The skyline of the union of two buildings, A and B, is the union of the skylines of A and B.\n\nSo, we can iterate over each building, and for each building, we can calculate the skyline of the union of the building with all the others.\n\nSo, we can iterate over each building, and for each building, we can calculate the skyline of the union of the building with all the others.\n\nWe can use a dictionary to keep track of the maximum skyline height that we've seen so far. If we've seen a skyline height that's already been seen before, then we can just return it. Otherwise, we can add the current height to the dictionary.\n\nHowever, we have to make sure that we don't add a height that's already been seen before. We can do that by first computing the union of all buildings, and then keeping a set of all heights that we've seen. If the union height is in the set of previously seen heights, then we can return the previously seen height. Otherwise, we add it to the set of heights we've seen, and return the current union height.\n\nOverall, the time complexity is O(b * (n^2)) where b is the number of buildings, and n is the size of the skyline. In the worst case, each building would have to be iterated over n times.\n\nThe space complexity is O(n) for the set of heights we've seen so far, and O(b) for the union height.\n'''"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 3 2 1\n4 3 2 1\n4 3 2 1\n4 3 2 1\"\"\") == \"0\"\n\"\"\"\nfrom itertools import zip_longest"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '1'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '1'\nassert solution('''4 1\n4 1 2 3''') == '0'\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('1 4\\n4 3 2 1') == '0'\nprint(solution(input()))"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == 1\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nassert solution(\"5\\n1\\n6\\n8\\n4\") == \"15\"\n\"\"\"\n\nx = int(input())\nn = int(input())\n\nsum_list = []\nfor i in range(1, n+1):\n    if i == 1:\n        sum_list.append(x)\n    else:\n        sum_list.append(x - sum_list[i-2])\nprint(sum_list[n-1])\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\n\nSample Input 3:\n100\n3\n21\n5\n10\nSample Output 3:\n67\n\nSample Input 4:\n100\n3\n21\n5\n10\nSample Output 4:\n81\n\"\"\"\nx = int(input())\nn = int(input())\np = []\nfor i in range(n):\n    p.append(int(input()))\n\nans = x\nfor i in range(n):\n    ans += p[i] - min(p)\n\nprint(ans)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2\\n1\\n4\\n4') == '15'\nassert solution('15\\n3\\n4\\n4\\n5\\n5') == '10'\nassert solution('15\\n3\\n4\\n4\\n5\\n5\\n3') == '20'\nassert solution('15\\n3\\n4\\n4\\n5\\n5\\n3\\n5') == '20'\n\nprint('Success')\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nx, n = map(int, input().split())\np = [int(input()) for _ in range(n)]\na = x\nb = x\nfor i in p:\n    if i < a:\n        a -= i\n    elif i > b:\n        b += i\nprint(b - a)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(output())\n\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2\\n') == '28'\n\"\"\"\nimport sys\n\nX, N = input().split()\nX, N = int(X), int(N)\nP = sys.stdin.read().splitlines()\n\nprint(sum([int(P[i]) for i in range(N) if int(P[i]) < X]))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '10\\n3\\n4\\n6\\n2'\n) == '28'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1\\n7\\n1\\n7\\n1\\n7\\n1') == '21'\nprint(solution('10\\n3\\n10\\n2\\n12'))\n\nSample Output\n21\n10"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"10\", \"3\", \"4\", \"6\", \"2\"]) == \"28\"\nassert solution([\"10\", \"3\", \"4\", \"6\", \"2\"]) == \"28\"\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12\\n') == '16'\nassert solution('10\\n2\\n4\\n6\\n') == '28'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"sississippi\") == \"hiss\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"mississippi\") == \"hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"misk\") == \"no hiss\"\nassert solution(\"kiss\") == \"hiss\"\nassert solution(\"mississippi\") == \"hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('hectar') == 'no hiss'\nassert solution('wekwekwek') == 'no hiss'\nassert solution('ab') == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('amiss') == 'hiss'\nassert solution('mississippi') == 'hiss'\nassert solution('amississippi') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('mississippi') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\nfrom typing import Dict, List, TextIO\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\n\"\"\"\nimport re\nimport sys\n\nREGEX = r\"s(?=s)\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\nprint(solution('amiss'))\nprint(solution('octopuses'))"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('cde') == ''\nassert solution('c++') == 'c'\nassert solution('C++') == 'c'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nc\\nc\\nc\\nc\\n') == '3'\nassert solution('5\\nc\\nc\\nc\\nc\\nc\\n') == '5'\nassert solution('5\\nc\\nc\\nc\\nc\\n') == '5'\n\nprint('Success')\n\n-----------------------------------------"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nC#') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\n\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\nc\") == \"3\"\nassert solution(\"5\\nc\\nc\\nc\\nc\") == \"5\"\nassert solution(\"5\\na\\nb\\nc\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nC#') == 3\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nc\\nC\\nc\\nC\\n') == '3'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nc\\nc\\nC\\nC') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\nC\\n\") == \"3\"\nprint(solution(stdin))\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nc\\nc\\ncc\\ncc\") == 3\nassert solution(\"5\\nc\\nc\\ncc\\ncc\") == 5\nassert solution(\"5\\nc\\nc\\ncc\\ncc\") == 5\n\"\"\"\n\nimport string\nimport collections\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nc\\nc\\nC\\nc\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"TCC\") == 9\nassert solution(\"CC\") == 1\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\"\n\nimport re"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"TCGTTC\"\n) == 21\n\"\"\"\n\nimport math"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\nprint(solution(\"TCGTTC\"))\nprint(solution(\"CCC\"))\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CC\") == 9\nassert solution(\"TCC\") == 7\nassert solution(\"CCTCC\") == 21\nassert solution(\"CCTCCT\") == 49\nassert solution(\"CCTTCCCT\") == 98\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"TCGTTC\"\n) == \"21\"\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"TCTCGT\") == 21\nassert solution(\"CCCGTT\") == 9\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\nassert solution(\"315\", \"315\") == \"0\"\nassert solution(\"180\", \"180\") == \"0\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('315','45') == '90'\nassert solution('180','270') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\nassert solution(\"180\", \"90\") == \"180\"\n\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"0\\n360\") == \"0\"\nassert solution(\"90\\n0\") == \"180\"\nassert solution(\"180\\n90\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\"\"\"\n\n\"\"\"\nSolution 1:\n\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"315 45\") == \"90\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('315', '45') == '90'\nassert solution('180', '270') == '90'\nassert solution('270', '315') == '180'\nassert solution('0', '360') == '180'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"315 45\") == \"90\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str([315, 45])) == \"90\"\nassert solution(str([180, 270])) == \"90\"\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n20\\n33\\n40\\n55') == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n\"\"\"\n\n\n\"\"\"\nThe only important part of this problem is the inputs. The format is very simple.\n\nYou can generate all permutations of the numbers from 1 to 100 in ascending order.\n\nThen, starting from the first element, for each permutation, in each iteration, compare the value of the current element with the value of the previous one. If the value of the current element is greater, then the answer is the number of iterations (in this permutation) minus the number of iterations in the previous permutation, which represents the number of iterations required to get a smaller value than the previous element.\n\nSo, if we have the permutation [1, 2, 3], we know that we should look at the element 1, compare it with the element 2, then the element 3, so the answer is 1 minus 2 = 1, which is the only permutation with a smaller value than 1.\n\nYou can test this intuition in this example:\n\n[1, 2, 3]\n\nNow, we are looking at the element 1, so we compare it with the element 2, which is 3. If the value of the current element is greater than the value of the previous element, we need 1 iteration.\n\nThen, we look at the element 2, which is 3. It is smaller than the previous element, so we need one more iteration.\n\nFinally, we look at the element 3, which is 2. It is smaller than the previous element, so we need one more iteration. So the answer is 1.\n\nThis is how you can check each permutation, starting from the first element.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n\") == \"3\"\n\nprint(solution(\"5\\n1\\n23\\n18\\n13\\n99\\n\"))\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == 3\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\nassert solution('''5\n11\n20\n33\n40\n55''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBWBW') == '0'\nassert solution('WBBWBBW') == '0'\nassert solution('BWWWBBW') == '1'\nassert solution('WBWBWWB') == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBW\") == \"1\"\nassert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBW\") == \"1\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBWWW\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWWBWBWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".WWWWBBW\") == \"0\"\n\"\"\"\n\nimport math\nimport unittest\n\n\nclass Solution:\n    def solution(self, s: str) -> int:\n        n = len(s)\n        if n % 2 == 1:\n            return 0\n\n        white = 0\n        black = 0\n        for char in s:\n            if char == \"W\":\n                white += 1\n            else:\n                black += 1\n        if black == white or white == black:\n            return 1\n\n        return 0\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        input = \".WWWWBBW\"\n        output = \"1\"\n        self.assertEqual(Solution().solution(input), output)\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWBWBB\") == 1\nassert solution(\"WWWWBBW\") == 0\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBWW') == '1'\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWBWBB\") == 1\nassert solution(\"WWWWBBW\") == 0\n\nprint(solution(\"WWWWBBW\"))\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWWBBWW\") == 0\nassert solution(\"WWWBBBW\") == 1\nassert solution(\"WWBBBWW\") == 1\nassert solution(\"WWBWBBW\") == 1\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WWBWBB') == 1\nassert solution('WWWWBBW') == 0\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\nprint('Success')\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n\nimport math\n\nfrom collections import namedtuple\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\n\nPoint = namedtuple(\"Point\", [\"x\", \"y\"])\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3 3 3''') == '9'\nassert solution('''1 2 1 1''') == '1.299038105676658'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 3 3 3\n\"\"\"\n) == '9'\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"roobert\") == \"robert\"\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('r') == 'r'\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\n\nassert solution(\"aaabbbb\") == \"a3b2\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"zzzzzzzz\") == \"zzzzzzzz\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rrrvvvbbberrr') == 'robert'\n\nprint(solution('robert'))\nprint(solution('rrrooobbbert'))\nprint(solution('rrrvvvbbberrr'))"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\n\nassert solution(\"rrrrrrrrrrrrrbbbbbbbbrrrrbbbbbbbbrrrrbbbbbbbb\") == \"rbrrrrrrrrrrrbbrrrrbbbbbbbrrrrbbbbbbrrrrbbbbbbbb\"\n\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"robert\") == \"robert\"\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('roobert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rroooobbbert') == 'robert'\n\n-----Test Case-----\nSample Input 1:\nrroobbebr\nSample Output 1:\nrrobbbbe\n\n-----Test Case-----\nSample Input 1:\nrrrooobbbert\nSample Output 1:\nrrobbbbert\n\n-----Test Case-----\nSample Input 1:\nroobert\nSample Output 1:\nrobert\n\n-----Test Case-----\nSample Input 1:\nrrrrrrrrrrrrrrrrrrrrrrrrrrrr\nSample Output 1:\nrrrrrrrrrrrrrrrrrrrrrrrrrr\n\n-----Test Case-----\nSample Input 1:\nrrooobbbebr\nSample Output 1:\nrroobbbebr\n\n-----Test Case-----\nSample Input 1:\nrroobbebr\nSample Output 1:\nrroobbbebr\n\n-----Test Case-----\nSample Input 1:\nrroobbebr\nSample Output 1:\nrroobbbebr\n\n-----Test Case-----\nSample Input 1:\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\nSample Output 1:\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\n\n-----Test Case-----\nSample Input 1:\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"rrrrrrrroobert\") == \"robert\"\nassert solution(\"roaobart\") == \"roba\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1000 9 7''') == '108 4'\nassert solution('''1000 900 7''') == 'Impossible'"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\nassert solution('1 0 1') == 'Impossible'\nassert solution('2 2 1') == 'Impossible'\nassert solution('10 9 10') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\nprint(solution(input()))\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Union, Dict\nfrom collections import Counter\n\n\nclass Solution:\n    # Time: O(N), where N is the number of digits in the volume of the shipment\n    # Space: O(N), where N is the number of digits in the volume of the shipment\n    def solution(self, volume: int) -> Tuple[int, int]:\n        if volume == 1:\n            return 1, 0\n        elif volume < 1:\n            return 0, 0\n        volume_digits = Solution.get_digits(volume)\n        number_of_two_digit_bottles = self.__count_number_of_bottles(volume_digits, 2)\n        number_of_one_digit_bottles = volume_digits[0] - number_of_two_digit_bottles\n        if number_of_one_digit_bottles < 0 or number_of_two_digit_bottles < 0:\n            return 0, 0\n        return number_of_one_digit_bottles, number_of_two_digit_bottles\n\n    @staticmethod\n    def get_digits(number: int) -> List[int]:\n        digits = []\n        while number > 0:\n            number, digit = divmod(number, 10)\n            digits.append(digit)\n        return digits\n\n    def __count_number_of_bottles(self, volume_digits: List[int], volume: int) -> int:\n        number_of_one_digit_bottles = 0\n        volume_of_one_digit_bottles = 1\n        while volume_of_one_digit_bottles <= volume:\n            number_of_one_digit_bottles += volume_digits[volume_of_one_digit_bottles - 1]\n            volume_of_one_digit_bottles *= 10\n        return number_of_one_digit_bottles\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 9 9\") == \"Impossible\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\"\"\"\n\nimport sys\n\n_, *args = sys.stdin.read().strip().split(' ')\n\nprint('Impossible' if int(*args) < min(int(*args)) else int(args[0]) * int(args[1]))\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\nassert solution(\"1000 999 7\") == \"Impossible\"\nassert solution(\"1000 9 0\") == \"108 0\"\nassert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\n\nimport math\nimport sys\nimport unittest\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\nprint(solution(input()))\n\"\"\"\n\nimport sys\nimport math\n\ns,v1,v2 = [int(e) for e in sys.stdin.readline().split()]"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\\n\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\\n\"\nassert solution(\"4 4\\n...#\\n..X.\\n..X.\\n..X.\\n\") == \"0\\n1\\n1\\n1\\n0\\n\"\nassert solution(\"4 4\\n..#.\\n..#.\\n...\\n...\\n\") == \"3\\n0\\n0\\n0\\n0\\n\"\nassert solution(\"4 4\\n#..#\\n..#.\\n...\\n...\\n\") == \"4\\n1\\n1\\n1\\n0\\n\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\\n\") == [1,1,2,1,0]\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".XX..XX.\") == \"6\"\nassert solution(\".#.X.##.##\") == \"1\"\nassert solution(\".X..X..X\") == \"2\"\nassert solution(\".X.X.X.X\") == \"2\"\nassert solution(\".X.XX.X.X\") == \"4\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == {1, 1, 2, 1, 0}"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n....\\n....\\n....\\n....') == '1\\n1\\n2\\n1\\n0\\n'\nassert solution('4 4\\n....\\n..X\\n....\\n....') == '1\\n0\\n1\\n1\\n0\\n'\nassert solution('4 4\\n....\\n..X\\n....\\n...') == '1\\n0\\n0\\n0\\n0\\n'\nassert solution('4 4\\n....\\n..X\\n....\\n...\\n....') == '2\\n1\\n0\\n1\\n0\\n'\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1\\n') == ''\nassert solution('1\\n1\\n1\\n') == ''\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"9\\n0\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\n\"\"\"\n\nnumber_of_addends = int(input().strip())\nnumber_list = []\nfor i in range(number_of_addends):\n    number_list.append(int(input().strip()))\n\nresult = 0\nfor number in number_list:\n    result += (number * (number % 10))\n\nprint(result)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nprint(solution(\"5\\n23\\n17\\n43\\n52\\n22\"))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nprint(solution(\"5\\n23\\n17\\n43\\n52\\n22\"))\n\n-----\n\"\"\"\n\nnum = int(input())\nnums = [int(input()) for _ in range(num)]\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nassert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n212\n1253''') == '1953566'\nassert solution('''5\n23\n17\n43\n52\n22''') == '102'\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'2'\n) == '212'\nassert solution(\n'5'\n) == '102'\n'''\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\na = list(map(str,a))\nx = 0\nfor i in range(1, n+1):\n    x += int(a[-i])**i\n\nprint(x)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n212\n1253''') == '1953566'\nassert solution('''5\n23\n17\n43\n52\n22''') == '102'\n\nimport re\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(    \"2\\n212\\n1253\") == \"1953566\"\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == '0.0 0.0 0.0'\nassert solution(\"9 9 9\\n3 2 1\") == '0.0 3.0 6.0'\nassert solution(\"9 9 9\\n1 1 1\") == '0.0 0.0 0.0'\nassert solution(\"9 9 9\\n5 5 5\") == '0.0 0.0 0.0'\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 10\\\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\n\nprint(solution(\"9 9 9\\\\n3 2 1\"))\nprint(solution(\"8 10 5\\\\n4 1 2\"))\nprint(solution(\"8 8 8\\\\n4 1 1\"))\nprint(solution(\"1 1 1\\\\n1 1 1\"))\n\n\"\"\"\n\na,b,c = [int(i) for i in stdin.split(\"\\n\")[0].split()]\ni,j,k = [int(i) for i in stdin.split(\"\\n\")[1].split()]"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\nassert solution(\"11 11 11\\n3 1 1\") == \"0.0 3.0 8.0\"\nassert solution(\"1 1 1\\n2 2 2\") == \"0.0 3.0 6.0\"\nassert solution(\"1 1 1\\n2 3 2\") == \"0.0 3.0 9.0\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\n\"\"\"\n\nA, B, C = map(int, input().split())\nI, J, K = map(int, input().split())\n\nprint(C - ((A - B) * I + (B - A) * J + (A - C) * K) / (I + J + K))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\n\"\"\"\n\n\"\"\"\n- Si todos los ingredientes son del mismo tipo, se divide el stock de ese tipo de ingrediente en el stock m\u00e1ximo de ese tipo de ingrediente.\n- Si hay un tipo de ingrediente que no es del mismo tipo que el stock m\u00e1ximo, no se puede hacer una compra, y se devuelve el stock de ingrediente que no es del mismo tipo que el stock m\u00e1ximo.\n- Si hay ingredientes de tipos diferentes, se dividen el stock de ese tipo de ingrediente en el stock m\u00e1ximo de ese tipo de ingrediente.\n- Si existe un tipo de ingrediente m\u00e1s grande que el stock m\u00e1ximo, se devuelve el stock de ese tipo de ingrediente.\n\"\"\"\nfrom fractions import Fraction\nimport sys"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\nassert solution(\"1 1 1\\n3 2 1\") == \"0.333333\"\nassert solution(\"1 1 1\\n3 1 1\") == \"0.333333\"\nassert solution(\"9 8 7\\n1 1 1\") == \"0.333333\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\n\n-----Notes-----\nThis is a straightforward problem.\n'''\n\nimport math"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 10 10\n3 3 3''') == '0.000000 0.000000 0.000000'\n\nassert solution('''9 9 9\n3 2 1''') == '0.000000 3.000000 6.000000'\n\nprint('Success')\n\n-----"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 10 10\\n3 3 3\\n') == '0.0 0.0 0.0\\n'\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom decimal import Decimal, getcontext\n\na, b, c = [int(i) for i in stdin.strip().split(' ')]\n\ngetcontext().prec = 4\n\na1 = Decimal(a) / Decimal(b)\nb1 = Decimal(c) / Decimal(b)\nc1 = Decimal(c) / Decimal(a)\n\nprint(a1, b1, c1)\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">abc<\") == \"abc\"\nassert solution(\">abc<defg>\") == \">abcdefg\"\nassert solution(\">abcdefg<\") == \"abcdefg\"\nassert solution(\">abcdefg<xyz\") == \">abcdefgxyz\"\nassert solution(\">abcdefg<\") == \">abcdefg\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"foss<<<rritun\") == \"forritun\"\nassert solution(\"a<bc<\") == \"b\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"foss<<<ritun\") == \"forritun\"\nprint(\"OK\")\n\n---\n>>> \n== RESTART: C:/Users/User/Desktop/Codility/InsertionSortKthElement.py =\nOK\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"{{{}}}\") == \"{}\"\n\nSample Input 3:\nabc\nSample Output 3:\n\"abc\"\n\nSample Input 4:\nab<c\nSample Output 4:\n\"ab<c\"\n\nSample Input 5:\nab<c\nSample Output 5:\n\"ab<c\"\n\n------\n\nimport string\n\nstring.printable\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nassert solution('a<bc>') == 'ab'\nassert solution('foss<<rritun') == 'forritun'\n\nassert solution('abc<def>ghi') == 'acbdg'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Kmp-Omp') == 'KMP'\nassert solution('mM-sS') == 'MS'\nassert solution('M-sS') == 'MS'\nassert solution('mM-sS') == 'MS'\nassert solution('M-sS') == 'MS'"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"Knuth-Morris-Pratt\"\n) == \"KMP\"\nassert solution(\n\"Mirko-Slavko\"\n) == \"MS\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('K-M-P') == 'KMP'\nassert solution('M-S-L-V-K-O') == 'MS'\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('K-M-P') == 'KMP'\nassert solution('M-S-L-A-V-K-N') == 'MSLAKN'\nassert solution('M-S-L-A-V') == 'MSLA'\n\nSample Input 3:\nAM-PM-PYTHON-3000\nSample Output 3:\nAMPYTHON3K\n\nimport re"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Mirko-Slavko') == 'MS'\n\"\"\"\n\n\"\"\"\nfrom typing import Dict\nfrom string import ascii_lowercase"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\nprint(solution('Mirko-Slavko'))"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AA') == 'A'\nassert solution('AA-') == 'A'\nassert solution('AA-B') == 'AB'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nprint(\"Success\")\n\n------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\n\nSample Input 3:\nDjango-React\nSample Output 3:\nDR\n\nassert solution(\"Django-React\") == \"DR\"\nassert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(0, 1, 0) == \"Estate or Copper\"\nassert solution(2, 1, 0) == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\n\"\"\"\n\nGold = int(input())\nSilver = int(input())\nCopper = int(input())\nbuying_power = Gold * 6 + Silver * 3 + Copper * 1"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"Estate or Copper\"\nassert solution(\"2 1 1\") == \"Province or Gold\"\nassert solution(\"2 2 0\") == \"Province or Gold\"\nassert solution(\"0 2 0\") == \"Estate or Copper\"\nassert solution(\"0 1 0\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 0 0') == 'Province or Gold'\nassert solution('0 0 2') == 'Province or Copper'\nassert solution('0 1 2') == 'Province or Silver'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 0 0') == 'Gold or Silver'\nassert solution('2 2 0') == 'Estate or Silver'\nassert solution('2 2 1') == 'Province or Silver'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Province or Gold'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 0') == 'Estate or Copper'\nassert solution('1 2 3') == 'Province or Gold'\nassert solution('1 1 1') == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"Estate or Copper\"\nassert solution(\"1 1 2\") == \"Province or Gold\"\nassert solution(\"2 1 2\") == \"Province or Gold\"\nassert solution(\"3 1 2\") == \"Province or Gold\"\nassert solution(\"0 1 0\") == \"Estate or Copper\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('1 1 1') == 'Province or Gold'\nassert solution('3 1 3') == 'Province or Estate'\nassert solution('0 1 2') == 'Province or Copper'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\n\nassert abs(solution('10 3\\n80 90') - 75.7142857) < 1e-7\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.00'\nassert solution('10 3\\n80 90\\n') == '75.7142857'\n\"\"\"\n\nimport sys\nimport math\n\nn, k = map(int, sys.stdin.readline().split())\nd, s = map(int, sys.stdin.readline().split())\nprint(int(math.ceil(d * n - k * s)))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(r'2 1\\n70 50') == r'90.00'\nassert solution(r'10 3\\n80 90') == r'75.7142857'\n\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 1\n70 50''') == '90.00'\nassert solution('''10 3\n80 90''') == '75.7142857'\nprint('Success')"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n70 50') == '90.0'\nassert solution('5 0\\n70 50') == 'impossible'\nassert solution('10 6\\n100 50') == '66.66666666'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\nprint('Success')\n\n'''\n\nn, k = map(int, input().split())\nd, s = map(int, input().split())"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.714286\"\n\nimport sys\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"7\\n1 2 3 4 5 6\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7\n2 3 1 5 4 7 6\n''') == '4\\n2 3 5 7'\n\nassert solution('''5\n1 2 3 4 5\n''') == '5\\n1 2 3 4 5'\n\"\"\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nprint(\"Passed!\")\n\n------ Hints ------\n- This problem requires some searching.\n- This problem can be solved in O(N), where N is the length of the permutation.\n- This problem can also be solved in O(NlogN) time using sorting.\n- The data structures that can be used are:\n    - OrderedSet\n    - Array\n- It's worth noting that the items in the permutation are 1-indexed, so the last element of the array is $A[N]$.\n- Finally, the items in the array are in the correct order, but they may not be sorted. For example, in the example above, the array $A = [2, 3, 1, 5, 4, 7, 6]$ is sorted, but the items in the array don't follow this ordering: $A[0] = 2$, $A[1] = 3$, $A[2] = 1$, $A[3] = 5$, $A[4] = 4$, $A[5] = 7$, $A[6] = 6$. \n\n\"\"\"\n\nimport sys\nimport collections\nimport math"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('1\\n2\\n3\\n4\\n5') == '5\\n1 2 3 4 5\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '5\\n1 2 3 4 5\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '6\\n1 2 3 4 5 6\\n'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 5 4 7 6\") == \"4\"\nassert solution(\"1 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('23 23') == '22 22'\nassert solution('11 59') == '10 44'\nassert solution('0 0') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''9 10''') == '''9 25'''\nassert solution('''0 30''') == '''23 45'''\nprint('Test passed')\n\n-----\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nprint('Test pass.')\n\n-----"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('23 45') == '0 30'\nassert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\nimport sys\nassert int(sys.argv[1]) > 0\nassert int(sys.argv[2]) > 0\nassert len(sys.argv) == 3\n\"\"\"\n\nimport sys\nassert int(sys.argv[1]) > 0\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\n\nimport os\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, stdin: str, path: str) -> None:\n        self.stdin = stdin\n        self.path = path\n        self.file = None\n        self.is_opened = False\n\n    def open_file(self):\n        if self.is_opened:\n            return\n        self.file = open(os.path.join(self.path, 'output.txt'), 'w')\n        self.is_opened = True\n\n    def close_file(self):\n        if not self.is_opened:\n            return\n        self.file.close()\n        self.is_opened = False\n\n    def write(self, line: str) -> None:\n        if self.is_opened:\n            self.file.write(line + '\\n')\n\n    def readline(self) -> str:\n        if self.is_opened:\n            return self.file.readline()\n        return self.stdin\n\n    def __del__(self) -> None:\n        self.close_file()\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nprint('Use input() to read input from stdin and print() to write output to stdout')\n\"\"\"\n\n\nfrom math import floor\nfrom functools import partial"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readline().strip()\nH, M = map(int, stdin.split())\n\nN_H = H + (M + 45) // 60\nN_M = (M + 45) % 60\n\nprint(N_H, N_M)\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'undefined'\n\n-----Constraints-----\n$0 \\leq N\\leq 2 \\cdot 10^{5}$"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"2.000000\") == \"1.414214\"\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('1.36788') == '1.378788'\nassert solution('2.718281') == '2.718788'\nassert solution('3.4') == '3.40'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '0.551115'\n\nSolution for Fibonacci Sequence\nThere is an easy way to calculate the Fibonacci sequence using recursion.\n\nLet's assume n is a positive integer.\n\nFor n=0, the answer is 0.\nFor n=1, the answer is 1.\nFor n>1, the answer is the sum of the two previous terms.\n\nBut wait, how is this algorithm recursively defined?\n\nFor n=0, we simply return 0.\nFor n=1, we return 1.\nFor n>1, we need to return the sum of the two previous terms.\n\nBut wait, how can we do this?\n\nWell, we can define a function sum(n) which is the sum of the first n numbers in the Fibonacci sequence.\n\nAs a reminder, the Fibonacci sequence is defined as follows:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...\n\nSo when n=0, the answer is 0.\n\nFor n=1, the answer is 1.\n\nFor n>1, the answer is the sum of the two previous terms, so in our case sum(n) = sum(n-1) + sum(n-2).\n\nSo if we define the recursive function f(n) to be the sum of the first n numbers in the Fibonacci sequence, then we have:\n\nf(0) = 0\nf(1) = 1\nf(n) = f(n-1) + f(n-2) for n>1\n\nTo recall, the first few terms of the Fibonacci sequence are:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...\n\nSo our recursive function is:"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0.36788\") == \"1.414214\"\nprint(\"PASSED\")\n\nSample Input 3:\n2.718281\nSample Output 3:\n1.414214\n\nSample Input 4:\n0.36788\nSample Output 4:\n0.36788\n\nSample Input 5:\n0.5\nSample Output 5:\n0.5\n\n-----Solution-----\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2.000000') == '1.414214'\nprint(solution(input()))\n\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin='') == stdout\nprint(solution(stdin=input()))\n\n'''"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(    '2.000000') == '1.414214'\nassert solution(    '1.000000') == '1.000000'\nassert solution(    '3.1415') == '1.414214'\nassert solution(    '2.71828') == '1.414214'\nassert solution(    '3.7123') == '1.414214'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\n\"\"\"\n\n\"\"\"\nFibonacci Sequence\nFor this problem, we'll use the simplest, most naive algorithm: just add the previous two values to get the next value.\n\nGiven any positive integer, it will always be possible to obtain a Fibonacci sequence of length n by just repeating this process n times.\n\nFor example, if we start with 0 and 1, we can get the Fibonacci sequence [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] by repeating this process 9 times.\n\nWrite a function to find the nth Fibonacci number in the Fibonacci sequence.\n\nSample input: 7\nSample output: 13\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '1.388130'\nassert solution('0.36788') == '1.388130'\nassert solution('2.718281') == '1.510547'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3:','solution(\"3\") == \"3:\"'\nassert solution('50') == '50:','solution(\"50\") == \"50:\"'\nassert solution('1') == '','solution(\"1\") == \"\"'\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3:\", \"WA\"\nassert solution(\"50\") == \"50:\", \"WA\"\n\nprint(\"PASSED\")\n\n----INPUT FORMAT----\n\nThe first line of input contains the integer S, where S is between 3 and 32767.\n\n----OUTPUT FORMAT----\n\nFor each of the first S lines of output, print the compact representation of the flag pattern, in the form x,y, where x and y are positive integers no greater than S.\n\nThere is no space between x and y in any of the lines of output.\n\n----SAMPLE INPUT----\n\n3\n----SAMPLE OUTPUT----\n\n3:\n2,1\n----\n3\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\n----\n3\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\n----\n50\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\n----\n\n-----NOTES-----\n\n- In Python, the integer x and the integer y in an x,y pair are delimited by a comma.\n- A flag pattern is visually appealing if it satisfies the following conditions:\n\nEvery other row has the same number of stars.\nAdjacent rows differ by no more than one star.\nThe first row cannot have fewer stars than the second row.\n\n-----LOG-----\n\n3:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\n3:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\n-----CODE----\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '3: \\n2,1\\n'\nassert solution('50') == '50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n'\nassert solution('32767') == '32767: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n32,7\\n33,8\\n32,9\\n31,10\\n30,11\\n29,12\\n28,13\\n27,14\\n26,15\\n25,16\\n24,17\\n23,18\\n22,19\\n21,20\\n20,21\\n19,22\\n18,23\\n17,24\\n16,25\\n15,26\\n14,27\\n13,28\\n12,29\\n11,30\\n10,31\\n9,32\\n8,33\\n7,34\\n6,35\\n5,36\\n4,37\\n3,38\\n2,39\\n1,40\\n0,41\\n41,0\\n39,1\\n38,2\\n37,3\\n36,4\\n35,5\\n34,6\\n33,7\\n32,8\\n31,9\\n30,10\\n29,11\\n28,12\\n27,13\\n26,14\\n25,15\\n24,16\\n23,17\\n22,18\\n21,19\\n20,20\\n19,21\\n18,22\\n17,23\\n16,24\\n15,25\\n14,26\\n13,27\\n12,28\\n11,29\\n10,30\\n9,31\\n8,32\\n7,33\\n6,34\\n5,35\\n4,36\\n3,37\\n2,38\\n1,39\\n0,40\\n40,0\\n39,1\\n38,2\\n37,3\\n36,4\\n35,5\\n34,6\\n33,7\\n32,8\\n31,9\\n30,10\\n29,11\\n28,12\\n27,13\\n26,14\\n25,15\\n24,16\\n23,17\\n22,18\\n21,19\\n20,20\\n19,21\\n18,22\\n17,23\\n16,24\\n15,25\\n14,26\\n13,27\\n12,28\\n11,29\\n10,30\\n9,31\\n8,32\\n7,33\\n6,34\\n5,35\\n4,36\\n3,37\\n2,38\\n1,39\\n0,40\\n40,0\\n39,1\\n38,2\\n37,3\\n36,4\\n35,5\\n34,6\\n33,7\\n32,8\\n31,9\\n30,10\\n29,11\\n28,12\\n27,13\\n26,14\\n25,15\\n24,16\\n23,17\\n22,18\\n21,19\\n20,20\\n19,21\\n18,22\\n17,23\\n16,24\\n15,25\\n14,26\\n13,27\\n12,28\\n11,29\\n10,30\\n9,31\\n8,32\\n7,33\\n6,34\\n5,35\\n4,36\\n3,37\\n2,38\\n1,39\\n0,40\\n40,0\\n39,1\\n38,2\\n37,3\\n36,4\\n35,5\\n34,6\\n33,7\\n32,8\\n31,9\\n30,10\\n29,11\\n28,12\\n27,13\\n26,14\\n25,15\\n24,16\\n23,17\\n22,18\\n21,19\\n20,20\\n19,21\\n18,22\\n17,23\\n16,24\\n15,25\\n14,26\\n13,27\\n12,28\\n11,29\\n10,30\\n9,31\\n8,32\\n7,33\\n6,34\\n5,35\\n4,36\\n3,37\\n2,38\\n1,39\\n0,40\\n40,0\\n39,1\\n38,2\\n37,3\\n36,4\\n35,5\\n34,6\\n33,7\\n32,8\\n31,9\\n30,10\\n29,11\\n28,12\\n27,13\\n26,14\\n25,15\\n24,16\\n23,17\\n22,18\\n21,19\\n20,20\\n19,21\\n18,22\\n17,23\\n16,24\\n15,25\\n14,26\\n13,27\\n12,28\\n11,29\\n10,30\\n9,31\\n8,32\\n7,33\\n6,34\\n5,35\\n4,36\\n3,37\\n2,38\\n1,39\\n0,40\\n40,0\\n39,1\\n38,2\\n37,3\\n36,4\\n35,5\\n34,6\\n33,7\\n32,8\\n31,9\\n30,10\\"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3:\", \"Should be 3: 1,2,3\"\nassert solution(\"50\") == \"50: 2,1 2,2 3,2 5,4 5,5 6,5 10,10 13,12 17,16 25,25\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3: '\nassert solution('50') == '50: '\nassert solution('1') == '1: '\nassert solution('2') == '2: '\nassert solution('5') == '5: '\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3: \"\nassert solution(\"50\") == \"50: \"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3:\\\\n2,1\\\\n'\nassert solution('50') == '50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25\\\\n'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3:\", \"Test 1 Failed\"\nassert solution(\"50\") == \"50:\", \"Test 2 Failed\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"1\") == \"1:\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\nprint(solution(stdin))\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"THE RAIN IN SPAIN\"\n) == \"yes\"\nassert solution(\n    \"IN THE RAIN AND THE SNOW\"\n) == \"no\"\nassert solution(\n    \"THE RAIN IN SPAIN IN THE PLAIN\"\n) == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\nimport re"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"RRBBBLLR\"\n) == \"SSKKKHHS\"\nassert solution(\n    \"RBLLLBRR\"\n) == \"CHCS\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, moves):\n        no_move = 0\n        move_list = []\n        for move in moves:\n            if move == \"R\":\n                move_list.append(\"S\")\n            elif move == \"S\":\n                move_list.append(\"K\")\n            elif move == \"K\":\n                move_list.append(\"C\")\n            elif move == \"C\":\n                move_list.append(\"H\")\n            elif move == \"H\":\n                move_list.append(\"B\")\n            elif move == \"B\":\n                move_list.append(\"R\")\n            elif move == \"L\":\n                move_list.append(\"R\")\n                no_move += 1\n\n        while no_move >= 2:\n            move_list.append(\"B\")\n            move_list.append(\"R\")\n            move_list.append(\"B\")\n            move_list.append(\"S\")\n            move_list.append(\"K\")\n            move_list.append(\"C\")\n            move_list.append(\"H\")\n            move_list.append(\"L\")\n            move_list.append(\"R\")\n            move_list.append(\"B\")\n            move_list.append(\"R\")\n            move_list.append(\"B\")\n            move_list.append(\"S\")\n            move_list.append(\"K\")\n            move_list.append(\"C\")\n            move_list.append(\"H\")\n            move_list.append(\"L\")\n            move_list.append(\"R\")\n            move_list.append(\"B\")\n            move_list.append(\"R\")\n            move_list.append(\"B\")\n            move_list.append(\"S\")\n            move_list.append(\"K\")\n            move_list.append(\"C\")\n            move_list.append(\"H\")\n            move_list.append(\"L\")\n            move_list.append(\"R\")\n            no_move -= 1\n\n        return \"\".join(move_list)\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('RBRRLLR') == 'SKHHCSS'\nassert solution('RBRRLLRRR') == 'SKHHCSS'\nassert solution('RLLLLRR') == 'CCHS'\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\n\"\"\"\n\nfrom typing import List, Union\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nassert solution(\"LBRBLLRRBLL\") == \"HHHHCHHSSH\"\nassert solution(\"LLRRRRRRR\") == \"HHHHHHHHH\"\nassert solution(\"LLRRRRRRRRRRRBBB\") == \"HHHHHHHHHHHHHHHHSS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRRRRRRRRRRBBBBBBBBBBBBBBBB\") == \"SSSSSSSSSSSSSSSSSSSSSSSSSSS\"\nassert solution(\"RBRRRRBRRRRRRRRRRRRRRR\") == \"CHCHCHCHCHCHCHCHCHCHCHCHCH\"\nassert solution(\"RBRRRRBRRRRRRRRRRRRRRRR\") == \"CHCHCSCHCHCSCHCHCHCSCHCHCS\"\n\"\"\"\n\n\"\"\"\n3/1\nD\nc\n\nR\n\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('BLLLLRRR') == 'CS'\n\n\"\"\"\n\nimport re\n\nstdin = re.sub(r'\\n', '', \"\"\"\nBBBLLR\n\"\"\".strip())"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n\nprint(solution('2 3 7\\n'))\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3 7''') == '''1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7'''\n\nassert solution('''2 4 7''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7'''\n\nassert solution('''2 5 7''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7'''\n\nassert solution('''1 2 3''') == '''1\n2\nFizz'''\n\nassert solution('''1 2 7''') == '''1\n2\nFizz'''"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3 7''') == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\n\nassert solution('''2 4 7''') == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\n\nassert solution('''1 1 1''') == \"\"\"1\n\"\"\"\n\nassert solution('''1 5 100''') == \"\"\"1\nBuzz\nFizz\n3\nFizz\n5\nFizz\n7\nFizz\n9\nFizz\n11\nFizz\n13\nFizz\n15\nFizz\n17\nFizz\n19\nFizz\n21\nFizz\n23\nFizz\n25\nFizz\n27\nFizz\n29\nFizz\n31\nFizz\n33\nFizz\n35\nFizz\n37\nFizz\n39\nFizz\n41\nFizz\n43\nFizz\n45\nFizz\n47\nFizz\n49\nFizz\n51\nFizz\n53\nFizz\n55\nFizz\n57\nFizz\n59\nFizz\n61\nFizz\n63\nFizz\n65\nFizz\n67\nFizz\n69\nFizz\n71\nFizz\n73\nFizz\n75\nFizz\n77\nFizz\n79\nFizz\n81\nFizz\n83\nFizz\n85\nFizz\n87\nFizz\n89\nFizz\n91\nFizz\n93\nFizz\n95\nFizz\n97\nFizz\n99\nFizz\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(print(*solution(input())))\nprint(str(print(*solution(input())))\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n3 3 3 2') == \"It hadn't snowed this early in 3 years!\"\nassert solution('2 10\\n0 100') == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nd = list(map(int, input().split()))\n\ncount = 0\nans = 0\n\nfor i in d:\n    if i >= m:\n        count += 1\n    else:\n        ans = max(count, ans)\n        count = 0\n\nans = max(count, ans)\nprint(\"It hadn't snowed this early in {} years!\".format(ans) if ans > 0 else \"It had never snowed this early!\")\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nfrom typing import List, Set\nfrom collections import Counter"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nd = [int(sys.stdin.readline()) for i in range(n)]\n\nk = 0\n\nfor i in range(m - 1, 0, -1):\n    if d[i] > d[m - 1]:\n        print(\"It hadn't snowed this early in {} years!\".format(n - i + 1))\n        break\n    elif d[i] < d[m - 1]:\n        k = i\n\nelse:\n    print(\"It had never snowed this early!\")\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nimport math\nimport sys\nimport ast\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print(input()))\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == r\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2') == '7'\nassert solution('10 10') == '1'\n\"\"\"\n\na, b = input().split()\nc = int(a)\nd = int(b)\ne = []\n\nfor i in range(1, d + 1):\n    e.append(i)\n\nwhile len(e) > 1:\n    for i in e:\n        if i == d:\n            e.pop(0)\n            d = e[0]\n            break\n        elif i == 1:\n            e.pop(0)\n            d = e[0]\n            break\n\nprint(d)"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == 1\nassert solution('10 2') == 2\nassert solution('10 10') == 7\nassert solution('15 7') == 8\n\nprint(solution(stdin.strip()))\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 2') == 2\nassert solution('1 2\\n3 2') == 1\nassert solution('1 1\\n1 1') == 1\nassert solution('1 10\\n4 2') == 2\nassert solution('1 100\\n5 2') == 2\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 2''') == '7'\nassert solution('''10 10''') == '7'\n'''\nfrom math import gcd"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n10''') == '2'\n\nassert solution('''2\n10''') == '7'\n\nassert solution('''2\n10''') == '2'\n\nassert solution('''3\n2\n''') == '1'\n\nassert solution('''2\n10''') == '2'"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"10 10\") == 7\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2') == '7'\nassert solution('10 10') == '7'\n'''\n\nfrom collections import deque\n\ns, n = map(int, input().split())\n\nsc = deque([0])\n\nfor i in range(n):\n    x = i + 1\n    while len(sc) > 0 and sc[0] % s!= 0:\n        sc.rotate(-1)\n    sc.append(x)\n    sc.popleft()\n    \nprint(sc[0])\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n') == 2\nassert solution('10 10\\n') == 7\nassert solution('10 10\\n') == 7\n\n\"\"\"\n\ns, n = [int(x) for x in stdin.split('\\n')]\n\nprint(n - 1 if n % 2 else n // 2)\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\nprint(solution('bok'))\nprint(solution('koaski'))"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"bokj\") == \"bokj\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\nprint(\"All tests passed.\")\n\nprint(solution(\"bok\"))\nprint(solution(\"koaski\"))\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"bok!\") == \"bok!\"\nassert solution(\"bok!\") == \"bok!\"\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nprint('All tests passed.')\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"mdrgjkdahklmj\") == \"mdrgjkdahklmj\"\nassert solution(\"zjbxlhgoswqmocuf\") == \"zjbxlhgoswqmocuf\"\nassert solution(\"b\") == \"b\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"kakasi\") == \"kakosi\"\nassert solution(\"bok\") == \"bok\"\nassert solution(\"kakasi\") == \"kakosi\"\n\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6 7\") == \"4 3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200\") == \"8 3\"\nassert solution(\"2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 2621440 524288 1048576\") == \"8 3\"\nassert solution(\"3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 101 103 105 107 109 111 113 115 117 119 121 123 125 127 129 131 133 135 137 139 141 143 145 147 149 151 153 155 157 159 161 163 165 167 169 171 173 175 177 179 181 183 185 187 189 191 193 195 197 199 201 203 205 207 209 211 213 215 217 219 221 223 225 227 229 231 233 235 237 239 241 243 245 247 249 251 253 255 257 259 261 263 265 267 269 271 273 275 277 279 281 283 285 287 289 291 293 295 297 299 301 303 305 307 309 311 313 315 317 319 321 323 325 327 329 331 333 335 337 339 341 343 345 347 349 351 353 355 357 359 361 363 365 367 369 371 373 375 377 379 381 383 385 387 389 391 393 395 397 399 401 403 405 407 409 411 413 415 417 419 421 423 425 427 429 431 433 435 437 439 441 443 445 447 449 451 453 455 457 459 461 463 465 467 469 471 473 475 477 479 487 491 493 495 497 499 501\") == \"8 8\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200\") == \"8 8\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"8 2\"\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 1\"\nassert solution(\"8\") == \"2 2\"\nassert solution(\"16\") == \"2 3\"\nassert solution(\"32\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"8 2\"\n\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline())\n\na = 1\n\nwhile K > (2 ** a):\n    a += 1\n\nprint(str(2 ** (a - 1)) + \" \" + str(2 ** (a - 1) - K))\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"6\"\n) == \"8 2\"\nassert solution(\n    \"7\"\n) == \"8 3\"\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2') == '2 1'\nassert solution('10\\n2') == '4 4'\nassert solution('31\\n5') == '8 4'\nassert solution('1\\n2') == '2 2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '8 2'\n\"\"\"\nfrom math import ceil, log2"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2\n\"\"\") == \"2 1\"\nassert solution(\n\"\"\"\n5\n\"\"\") == \"4 1\"\nassert solution(\n\"\"\"\n7\n\"\"\") == \"8 3\"\nassert solution(\n\"\"\"\n9\n\"\"\") == \"8 4\"\nassert solution(\n\"\"\"\n12\n\"\"\") == \"16 2\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\nstairs\n2\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n''') == \\\n    '''\nYES\nNO\n'''\n\nassert solution('''\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and frayed\nforever in doubt\napples and pears\n''') == \\\n    '''\nYES\nYES\nYES\nYES\nNO\n'''"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('stairs') == 'NO'\nassert solution('drought') == 'NO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('drought') == 'YES'\nassert solution('stairs') == 'NO'\n\nprint(solution(stdin))"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"apple\") == \"YES\"\n\nprint(\"All tests passed.\")\n\n-----\n\nNote: there are a bunch of ways to solve this problem, with most of them being somewhat over-complicated. As you go through the solutions, you may find something that you find useful, and then come up with your own.\n\nI\u2019d like to go ahead and try to explain what I think my solutions are doing.\n\nFirst, I\u2019m guessing that the first solution is fairly straightforward. It involves a DFS on a graph, which is a search problem. For each node, you try to find a path from that node to the node in the graph with the same ending as the word, and return True if you do.\n\nThen I\u2019d like to mention that I have a friend who has come up with a recursive version of the DFS. This version is slightly more complex, but is also similar in structure to the first one. This version is slightly more efficient, but also more difficult to understand. The important thing is that it doesn\u2019t require any changes to the problem structure.\n\nI\u2019d like to call the recursive version my own solution, because I have a feeling that it\u2019s more creative, but I don\u2019t know for sure.\n\nThis DFS is pretty much identical to the one above. It\u2019s an iterative version, and it\u2019s an example of a \u2018greedy\u2019 search strategy, which is a way of solving a problem by taking the simplest way to do it.\n\nThe first is a simple greedy search, which is a strategy where you take the first step that works. The second is a slightly more advanced search strategy, which is a strategy where you take the next step in a greedy search that works.\n\nThe first one is the one I\u2019m just going to call greedy search, because it\u2019s the most straightforward to understand.\n\nThe second one is the more sophisticated version. The way I\u2019m going to call it is greedy search with recursion. Greedy search is one of the most popular search algorithms, and it\u2019s very common to use it on a graph problem. It\u2019s similar to DFS, but it returns the first step it finds that works. Then it recursively calls itself with the new step that it just found, and returns the first step it finds that works. In fact, it\u2019s what we\u2019re going to call my own solution, which is basically greedy search with recursion.\n\nSo the first one is simple, and the second is complex, but they do the same thing.\n\nThe first one is simple because it is easy to understand. The second is complex because it is much more difficult to understand.\n\nI\u2019m guessing that the first one is more efficient because it\u2019s not using any information about the graph structure and has a much simpler implementation. The second one is much more complex and harder to understand, but it makes a lot more sense.\n\nThe second one is an improvement over the first one, but it is a lot more complicated. For example, it is much more difficult to explain the purpose of each of the three lines of code, but the first one is much easier to explain.\n\nNote that these are all informed guesses, and there is no official definition of what a \u2018greedy search\u2019 is. Some people say it\u2019s \u2018the simplest way to solve a problem\u2019, but this is an incorrect definition.\n\nI\u2019m guessing that the only difference between these two solutions is that the second one is a little more efficient.\n\nThe first one is easy to understand, but the second one is hard to understand.\n\nYou can see that the first one doesn\u2019t require any changes to the problem structure, while the second one does.\n\nThe first solution is more general, because it requires no changes to the problem structure. The second solution is easier to understand, because it doesn\u2019t require any changes to the problem structure.\n\nWhen I think of this, I have a lot of questions that I want to ask.\n\nI have a few questions that I want to ask.\n\nThe first one is simple: what is the common word?\n\nThe answer to this question is, of course, stairs.\n\nWhat about the number of lists?\n\nThe answer to this question is, of course, 2.\n\nWhat about the word endings?\n\nThe answer to this question is, of course, two.\n\nWhat about the number of phrases to check?\n\nThe answer to this question is, of course, 5.\n\nWhat about the phrases?\n\nThe answer to this question is, of course, 2.\n\nWhat about the spelling of the common word?\n\nThe answer to this question is, of course, stairs.\n\nThis makes sense, because the second solution is much easier to understand. It is much more difficult to understand the first solution, so I guess that the first solution is better.\n\nI guess that the first solution is easier to understand than the second one, because it doesn\u2019t require any changes to the problem structure.\n\nThe second one is harder to understand, because it is more difficult to explain the purpose of each line of code. However, the first one is much easier to explain.\n\nThe second solution is easier to understand, because it doesn\u2019t require any changes to the problem structure.\n\nWhen I think of this, I have a lot of questions that I want to ask.\n\nI have a few questions that I want to ask.\n\nThe first one is simple: what is the common word?\n\nThe answer to this question is, of course, stairs.\n\nWhat about the number of lists?\n\nThe answer to this question is, of course, 2.\n\nWhat about the word endings?\n\nThe answer to this question is, of course, two.\n\nWhat about the number of phrases to check?\n\nThe answer to this question is, of course, 5.\n\nWhat about the phrases?\n\nThe answer to this question is, of course, 2.\n\nWhat about the spelling of the common word?\n\nThe answer to this question is, of course, stairs.\n\nThis makes sense, because the second solution is harder to understand. It is much more difficult to explain the first solution, so I guess that the first solution is better.\n\nThe second solution is harder to understand, because it is more difficult to explain the purpose of each line of code. However, the first solution is much easier to explain.\n\nThe first solution is easier to understand, because it doesn\u2019t require any changes to the problem structure."
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('stairs') == 'NO'\nassert solution('drought') == 'YES'\nassert solution('apples and pears') == 'YES'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n') == 'YES\\nNO\\nYES\\nNO\\n'\nassert solution('drought\\n2\\naught ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and frantic\\nforever in doubt\\napples and pears\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\n'\nprint(solution(stdin))"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n') == 'YES\\nNO\\nNO\\nYES\\n'\nassert solution('drought\\n2\\naught ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and dreaded\\nforever in doubt\\napples and pears\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\n'\n\n\"\"\"\n\n\"\"\"\nLine 1: Common word\nLine 2: Number of rhyming words\nLines 3-3+E: Rhyming words\nLine 4: Number of rhyming phrases\nLines 5-5+P: Rhyming phrases\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n') == 'YES\\nNO\\nYES\\nNO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"stairs\") == \"NO\"\nassert solution(\"drought\") == \"NO\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nrl = sys.stdin.readline\n\ncommon_word = rl().strip()\nnum_of_lists = int(rl().strip())\nlist_of_lists = []\nfor _ in range(num_of_lists):\n    list_of_lists.append(rl().strip())\nnum_of_phrases = int(rl().strip())\nlist_of_phrases = []\nfor _ in range(num_of_phrases):\n    list_of_phrases.append(rl().strip().split())"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\nimport math"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HANGMAN', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\nprint('Success')\n\n-----Explanation-----\nThis problem can be solved using the backtracking algorithm. We create a backtracking function that takes in the word and the permutation and recursively tries out all possible permutations of guesses.\n\nNote that we create a new copy of the permutation each time the function is called recursively. This way, each recursive call is free to change the permutation and do not affect the previous call.\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(HANGMAN) == 'WIN'\nassert solution(BANANA) == 'LOSE'\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'LOSE'\n\n\"\"\"\nimport string\nimport numpy as np"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HANGMAN', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BANANA\") == \"WIN\"\nassert solution(\"HANGMAN\") == \"LOSE\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"HELLO\") == \"WIN\"\nassert solution
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''HANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ''') == 'WIN'\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ''') == 'LOSE'\n'''\n\nimport unittest"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\nHANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'WIN'\n\nassert solution('''\nBANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'LOSE'\n\nassert solution('''\nA\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB\nAB"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '5',\n    'JOE',\n    'BOB',\n    'ANDY',\n    'AL',\n    'ADAM'\n])) == 'DECREASING'\nassert solution('\\n'.join([\n    '11',\n    'HOPE',\n    'ALI',\n    'BECKY',\n    'JULIE',\n    'MEGHAN',\n    'LAUREN',\n    'MORGAN',\n    'CARLI',\n    'MEGAN',\n    'ALEX',\n    'TOBIN'\n])) == 'NEITHER'\n\nprint(solution())\n\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n'''\n\nimport math\n\nn = int(input())\nnames = []\n\nfor _ in range(n):\n    names.append(input())\n\nsorted_names = sorted(names)\n\nis_ascending = all(name == names[i - 1] for i, name in enumerate(sorted_names, start=1))\nis_descending = all(name == sorted_names[i - 1] for i, name in enumerate(sorted_names, start=1))"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\nimport math\nfrom collections import deque"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\"\"\") == \"DECREASING\"\nassert solution(\"\"\"\n11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\n\"\"\") == \"NEITHER\"\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def __init__(self):\n        self.d = defaultdict(int)\n        self.input = []\n        self.reversed_input = []\n        self.sorted_input = []\n\n    def read_input(self, stdin: str) -> None:\n        self.input = stdin.splitlines()\n        \n        for i in range(len(self.input)):\n            self.d[self.input[i]] = i\n\n    def sort_input(self) -> None:\n        self.sorted_input = sorted(self.d.keys())\n        self.reversed_input = sorted(self.d.keys(), reverse = True)\n        \n    def is_sorted(self) -> bool:\n        return self.sorted_input == self.input\n\n    def is_reversed(self) -> bool:\n        return self.reversed_input == self.input"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\n-----Explanation-----\nIn the first example, the list is in decreasing alphabetical order.\nIn the second example, the list is neither increasing nor decreasing.\nIn the first example, the list is in increasing alphabetical order.\nIn the second example, the list is in decreasing alphabetical order.\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"NEITHER\"\nassert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"NEITHER\"\nassert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"NEITHER\"\n\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '\\n'.join([\n        '3',\n        'JOE',\n        'BOB',\n        'ANDY',\n        'AL',\n    ])\n) == 'INCREASING'\nassert solution(\n    '\\n'.join([\n        '11',\n        'HOPE',\n        'ALI',\n        'BECKY',\n        'JULIE',\n        'MEGHAN',\n        'LAUREN',\n        'MORGAN',\n        'CARLI',\n        'MEGAN',\n        'ALEX',\n        'TOBIN',\n    ])\n) == 'DECREASING'\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\"\"\"\n\n\"\"\"\nSolution for this problem in Python:\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3\\n1') == ''\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\nNina wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\n\nprint(solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\"))\nprint(solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\"))\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'No winner!'\n\nassert solution('1 2\\n3\\n4') == 'No winner!'\n\nassert solution('1 1\\n1\\n2') == 'No winner!'\n\nassert solution('1 2\\n2\\n2') == 'No winner!'\n\nassert solution('1 1\\n1\\n1') == 'No winner!'"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == '\\nGeorge wins!\\n\\nNina wins!\\n\\nJess wins!\\n'\n\n\"\"\"\n\nimport sys\nimport string\nimport re\nimport collections\nfrom itertools import chain\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\n\"\"\"\n) == \"\"\"\nGeorge wins!\nJess wins!\nNo winner!\n\"\"\"\n\nprint(solution(stdin))\n\"\"\"\n\n---\n\nSample Output 2\n\nNina wins!\nJess wins!\nNina wins!\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\n') == 'George wins!\\nNina wins!\\nJess wins!\\n'\n\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n') == 'Nina wins!\\nJess wins!\\n'\n\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n') == 'Nina wins!\\nJess wins!\\n'\n\nassert solution('2 10 13\\nJohn\\nJohn\\nNina\\nNina\\n') == 'No winner!\\nNo winner!\\n'\n\nassert solution('2 10 13\\nJohn\\nJohn\\nNina\\nNina\\n') == 'No winner!\\nNo winner!\\n'"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1''') == '''No winner!'''\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"\"\"George wins!\nJess wins!\nNo winner!\"\"\".split('\\n')\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 0 0 5 4\\n') == '2.0'\nassert solution('6 0 0 2 7 6\\n') == '2.0'\n\n'''\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n1\\n') == '1'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n') == '0'\nassert solution('0\\n1\\n0\\n0\\n0\\n0\\n') == '0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\nassert solution(\"0 0 0 0 0 0\") == \"0.0\"\nassert solution(\"0 0 0 0 0 0\") == \"0.0\"\nassert solution(\"0 0 0 0 0 0\") == \"0.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"165\") == \"330\"\n\"\"\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('7') == '8'\nassert solution('9') == '9'\nassert solution('15') == '16'\nassert solution('17') == '18'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"16\"\n) == \"1\"\nassert solution(\n    \"99\"\n) == \"0\"\nassert solution(\n    \"983\"\n) == \"988\"\nassert solution(\n    \"658\"\n) == \"659\"\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"560\") == \"600\"\nassert solution(\"111\") == \"110\"\nassert solution(\"567\") == \"900\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nx = int(input())\ny = x\nwhile True:\n    y += 1\n    if len(set(str(y))) == len(set(str(x))):\n        print(y)\n        break\n\n\"\"\"\nSolution 2\n\"\"\"\n\nx = int(input())\nwhile x > 9:\n    x = x + max([int(i) for i in str(x)])\nprint(x)\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1') == '0'\nassert solution('5') == '6'\nassert solution('9') == '9'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4') == '5'\nassert solution('11111') == '11112'\nassert solution('12345') == '12346'\nassert solution('987') == '988'\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"330\") == \"0\"\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '8'\nassert solution('89') == '9'\nassert solution('8') == '8'\nassert solution('9') == '9'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\nprint('Passed')"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n\n-------------------------\n\nimport sys\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == 4\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\n\nInput:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 3.\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 3.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 3.\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 3.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 3.\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 3.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 3.\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n\nOutput:\n4\n\nExplanation:\nThe following is an interval $[t_1, t_2, \\ldots, t_n]$ of quiet intervals and tasks that are possible to complete at this time.\n\nAll of the tasks complete in an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nEach task takes at least an interval $[t_1, t_2]$, so the maximum number of tasks is 4.\n\nSample Input:\n5 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\nOutput:\n3\n\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n\"\"\"\n\nn, m = map(int, input().split())\nt = list(map(int, input().split()))\nl = list(map(int, input().split()))"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import islice"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"0\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n\"\"\"\nfrom typing import List, Set"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == 10\nassert solution(2) == 0\nassert solution(3) == 6\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == 10\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == 1\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == 1\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1\") == \"6\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('2\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('3\\n39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1') == '6'\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"1\"\nassert solution(\"39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1\\n2\\n\") == \"6\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"no\"\nassert solution(\"12 12\") == \"no\"\nassert solution(\"4 100\") == \"no\"\nassert solution(\"12 0\") == \"yes\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 3\") == \"yes\"\nassert solution(\"2 5\") == \"no\"\nassert solution(\"1 1\") == \"no\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('12 0') == 'no'\nassert solution('2 1') == 'no'\nassert solution('1 1') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"5 5\") == \"no\"\nassert solution(\"1 1\") == \"no\"\nassert solution(\"2 2\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\"\n\nimport sys\n\n_, N, b = sys.stdin.readline().split()\nN = int(N)\nb = int(b)"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3\") == \"yes\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 2\") == \"no\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">1e5 1>0\") == \"yes\"\nassert solution(\">1e6 1>0\") == \"no\"\nassert solution(\">1e7 1>0\") == \"yes\"\nassert solution(\">1e8 1>0\") == \"no\"\n\nassert solution(\">1e5 1>1\") == \"yes\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''P02K03H04H05\nP03K04H06H07\nP04K05H08H09\nP05K06H10H11\nP06K07H12H13\nP07K08H14H15\nP08K09H16H17\nP09K10H18H19\nP10K11H20H21\nP11K12H22H23\nP12K13H24H25\nP13K14H26H27\nP14K15H28H29\nP15K16H30H31\nP16K17H32H33\nP17K18H34H35\nP18K19H36H37\nP19K20H38H39\nP20K21H40H41\nP21K22H42H43\nP22K23H44H45\nP23K24H46H47\nP24K25H48H49\nP25K26H50H51\nP26K27H52H53\nP27K28H54H55\nP28K29H56H57\nP29K30H58H59\nP30K31H60H61\nP31K32H62H63\nP32K33H64H65\nP33K34H66H67\nP34K35H68H69\nP35K36H70H71\nP36K37H72H73\nP37K38H74H75\nP38K39H76H77\nP39K40H78H79\nP40K41H80H81\nP41K42H82H83\nP42K43H84H85\nP43K44H86H87\nP44K45H88H89\nP45K46H90H91\nP46K47H92H93\nP47K48H94H95\nP48K49H96H97\nP49K50H98H99\nP50K51H100H101\nP51K52H102H103\nP52K53H104H105\nP53K54H106H107\nP54K55H108H109\nP55K56H110H111\nP56K57H112H113\nP57K58H114H115\nP58K59H116H117\nP59K60H118H119\nP60K61H120H121\nP61K62H122H123\nP62K63H124H125\nP63K64H126H127\nP64K65H128H129\nP65K66H130H131\nP66K67H132H133\nP67K68H134H135\nP68K69H136H137\nP69K70H138H139\nP70K71H140H141\nP71K72H142H143\nP72K73H144H145\nP73K74H146H147\nP74K75H148H149\nP75K76H150H151\nP76K77H152H153\nP77K78H154H155\nP78K79H156H157\nP79K80H158H159\nP80K81H160H161\nP81K82H162H163\nP82K83H164H165\nP83K84H166H167\nP84K85H168H169\nP85K86H170H171\nP86K87H172H173\nP87K88H174H175\nP88K89H176H177\nP89K90H178H179\nP90K91H180H181\nP91K92H182H183\nP92K93H184H185\nP93K94H186H187\nP94K95H188H189\nP95K96H190H191\nP96K97H192H193\nP97K98H194H195\nP98K99H196H197\nP99K100H198H199\nP100K101H200H201\nP101K102H202H203\nP102K103H204H205\nP103K104H206H207\nP104K105H208H209\nP105K106H210H211\nP106K107H212H213\nP107K108H214H215\nP108K109H216H217\nP109K110H218H219\nP110K111H220H221\nP111K112H222H223\nP112K113H224H225\nP113K114H226H227\nP114K115H228H229\nP115K116H230H231\nP116K117H232H233\nP117K118H234H235\nP118K119H236H237\nP119K120H238H239\nP120K121H240H241\nP121K122H242H243\nP122K123H244H245\nP123K124H246H247\nP124K125H248H249\nP125K126H250H251\nP126K127H252H253\nP127K128H254H255\nP128K129H256H257\nP129K130H258H259\nP130K131H260H261\nP131K132H262H263\nP132K133H264H265\nP133K134H266H267\nP134K135H268H269\nP135K136H270H271\nP136K137H272H273\nP137K138H274H275\nP138K139H276H277\nP139K140H278H279\nP140K141H280H281\nP141K142H282H283\nP142K143H284H285\nP143K144H286H287\nP144K145H288H289\nP145K146H290H291\nP146K147H292H293\nP147K148H294H295\nP148K149H296H297\nP149K150H298H299\nP150K151H300H301\nP151K152H302H303\nP152K153H304H305\nP153K154H306H307\nP154K155H308H309\nP155K156H310H311\nP156K157H312H313\nP157K158H314H315\nP158K159H316H317\nP159K160H318H319\nP160K161H320H321\nP161K162H322H323\nP162K163H324H325\nP163K164H326H327\nP164K165H328H329\nP165K166H330H331\nP166K167H332H333\nP167K168H334H335\nP168K169H336H337\nP169K170H338H339\nP170K171H340H341\nP171K172H342H343\nP172K173H344H345\nP173K174H346H347\nP174K175H348H349\nP175K176H350H351\nP176"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('P09K11H10T12H02') == 'GRESKA'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'P09K08H02H05T06T10H09T05H07T09T08H11H10P02H04T01T09H04T07H03T08H03T07H11T06H03T08H09T08H04T01H11T09H10T01H02H05H10H11P02H08P04H07T04T02H03H11T04H05H11T10T08P03T10T01H04T08H11P11H09P05T01T07P10H05H09T07H09P09T05H09T06T03P10T03H03P10T02H07P01H09T05P03H09T07H10T10T02P04P08T10H04T04T02P05T01H03P07T05H04H09T05T11H02P08T02H08T07T04H11T03H09T11P09T03H08T04T08H06T10H09P01H10T11H11T02P10T04H10T03P01H10T11H09T03P02P06H08T10H06H06H02P05T05H08P01H11T10T11P09H02P02H06H10H10H06P11T10H03P04H09P09H09H11T08H07T10T09P02H04T03P04T08T10H04T03P10T04H11T03P11T01H11P10T11H11H10P10T04H04T07H10T06T09H03P11T08T09T09T08T03H10P10T09T04H02H11P01H11P09H09T07H11T08T11T03P11H01T11P01H01T10H09H01T11T08P11T03P01H08T08H01H10P07T10P10T10H11T07P08T11T10T08P02P02H09P02T08P02P10T10P09H11H01T06P01H08H09P09H04H04T07H05T07H05T09H08P10T01P08T08P06H03H09P09H06H07T07P11T08P02T07P04H11T09T05P02P11T08H07T10T09P10T08P01H09T07H06P11T09T04H11T04T02H11T10P11T11H05T07H08H11H01T08T09H11H10P09H05H03T04T10T08T11T09H11T07T11T11P10H11T11H03P07H09H02P11T10H04P01H02T04T02H05P01H10T07P03P02H03T05T04P04H09P02P07H11P02H10H11H10P11T11H09P11P10H03T11P11H10T02P10H02T11P11T09H04H11P10H09H11H11P11H10H10T01H02H10H09T07H10H09T11H11H10H02T09T10P01H10T10T11P10H10T03H02H05T11H11H09H09H07H04T11H10T02H09T11T04P10T03P11T10T11P03H11T11H10T10H09H07T10T11H08H10H11H07T11H07H03T11P04H09P07T09P04T11H07P03T11T09H10T03P10T11T11T09H07H11H07T10T11H10T11P04H10T11T11P03H11T10H05H11H11P09T10H11P10T10H02P08T09H10T10P11H10T11T02P01H09H04P10T11P04H10T10P10T11H02T10P11H11P10H10T02H07P04H09H05H02T06H03H09H10H10H09H09P01H02H09T03T02P10H07H07T04P01T11T10T11P02H07H09H04P11H11T02H09P11T11H11P03T11T02P05T04T10H10T11P03P08T10T09H06P11T09T10T09H06P09H09P08T09H04H08H09P09H07T04T03H02P11T02H11P10P01H10T11P07T03H11P11T11P02T04H10T11T10H08P02H03H11P01H11T07T09P02H06P09T10P10P09H10H04T06H03H11H04T07H09P02H09T09P04H07T11H02T08H02H05H08T11P07T11H02P10T11H10P11H03H10T09P03H10P09H10H10T02P04H09H02P10T10T11T08P04T01T11H06P10T08T10H02P07T09H10T11P11H04T07H09T11T11P09P11T10T11P02T10T10P11H02T08P03T04H08T08H06P11T11P11H03P10T08H05T11P11H09T04P10P11H11H10P03T10T10P08H09T11P11H11H08T10T10T09P09H11H11T04P08T09T09H04H11P09H04H02P01T10T02P02H10P10T03P02H11H03P11P07T09H11T10T11T03T03P09T10T03H09T11P09H05H03T10H09H11H11P09H09H10P10T08H10T11H11T09H10T10T03P08T10P10T07H10T07T09P09P10T09T10T10H03P11T11P02P11T10H10T11P11T08T11T09P"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"P01K02H03H04\") == '12 12 11 13'\nassert solution(\"H02H10P11H02\") == 'GRESKA'\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\nprint(solution(\"P01K02H03H04\"))\nprint(solution(\"H02H10P11H02\"))\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\nprint(solution(\"P01K02H03H04\"))\nprint(solution(\"H02H10P11H02\"))\n\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"\n\nstdin = input()\n\np_num = 0\nk_num = 0\nh_num = 0\nt_num = 0\ng_num = 0\n\ncards = {\n    \"P\": p_num,\n    \"K\": k_num,\n    \"H\": h_num,\n    \"T\": t_num,\n    \"G\": g_num\n}\n\nfor i in stdin:\n    if i[0] == \"P\":\n        p_num += 1\n    elif i[0] == \"K\":\n        k_num += 1\n    elif i[0] == \"H\":\n        h_num += 1\n    elif i[0] == \"T\":\n        t_num += 1\n    elif i[0] == \"G\":\n        g_num += 1\n    else:\n        raise Exception(\"Invalid card\")\n\nprint(p_num, k_num, h_num, t_num)\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"H10H12H02H04\") == \"GRESKA\"\nassert solution(\"H02H10P11H02K03\") == \"12 12 11 13\"\nassert solution(\"H10H12H02H04K03\") == \"GRESKA\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\nassert solution('5 5 5\\n.....\\n...*\\n...*\\n...*\\n.*.*') == '0'\nassert solution('6 5 5\\n......\\n...*\\n...*\\n...*\\n.*.*\\n*...') == '1'\nassert solution('4 4 4\\n....\\n...\\n...\\n....') == '0'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\") == \"1\"\n\"\"\"\nimport sys\n\nfrom typing import List\n\nN: int = 3\nM: int = 5\nK: int = 3\n\npicture: List[str] = [\n    '.....',\n    '.....',\n    '.....',\n    '.....',\n    '.....',\n]\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*''') == '2'"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\\n+-*..\\n|*|.\\n+-*..\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n\n-----Instructions-----\nFind the maximal number of flies that can be killed with a single shot. Write down your ideas on the blackboard, but do not write them down on paper.\n\nYou are not allowed to use the built-in functions that work with strings and lists.\n\n-----Hints-----\n1. Use Python's built-in function max().\n2. Use Python's built-in function sum().\n3. You can define a function with a parameter to be used later in the code.\n4. Your function can be called in another function.\n5. Use Python's built-in functions to count the amount of flies on the picture and to find the position of the racket.\n6. You can put variables in other functions.\n\n\"\"\"\n\nR, S, K = input().split()\nR, S, K = int(R), int(S), int(K)"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....\\n') == '1'\n\"\"\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(AAC) == 4\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\nimport collections\n\nimport typing as t\n\nfrom util import *\n\nCard = t.Tuple[str, str]\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC AD AH AS KD') == 4\nassert solution('2C 4D 4H 2D 2H') == 3\nassert solution('3C 3S 3H 2S 2D') == 1\nassert solution('5D 5C 5H 5S AH') == 4\nassert solution('JD JC JH JS 9C') == 3\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''AC AD AH AS KD''') == 4\nassert solution('''2C 4D 4H 2D 2H''') == 3\nassert solution('''2C 4D 4H 2S 2C''') == 3\nassert solution('''AC AD AH AS KC''') == 2\nassert solution('''AC AD AH AS KQ''') == 2\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(['AC AD AH AS KD']) == '4'\n\nprint(solution(['AC AD AH AS KD']))\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\nassert solution('QH JS TS QS QC QD') == '4'\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"2C 4D 4S 4H 2D 2H\") == 4\nassert solution(\"AS AH AS AC AS 2C\") == 5\nassert solution(\"AD AH AC AD AC 2C\") == 4\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2C 4D 4H 2D 2H') == 3\nassert solution('AC AD AH AS KD') == 4\nassert solution('AD AH AC AS KS') == 2\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\nassert solution(\"AS KS QS JS TS\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n6 5\n2 1 1 1 0 1\n\"\"\"\n) == \"5\"\nassert solution(\n\"\"\"\n5 1\n0 0 0 0 0\n\"\"\"\n) == \"7\"\n\nprint(\"Successfully solved!\")\n\n-----\n5 1\n0 0 0 0 0\n\n-----\n5 3\n2 1 1 1 0 1\n\n-----\n6 5\n2 1 1 1 0 1\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n7 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n2 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5\n0 0 0 0 0 0\n\n-----\n6 5"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 1 0 1') == 5\nassert solution('0 0 0 0 0') == 7"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n0 0 0 0 0') == '7'\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nassert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"7 4\\n2 1 1 1 0 1\") == \"1\"\nassert solution(\"6 4\\n2 1 1 1 0 1\") == \"0\"\nassert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\n----Problem-----\nTetris is a popular computer game played in a field consisting of $C$ columns and an unlimited number of rows. In one move, one of the seven pieces is dropped into the field. When dropping a piece, the player is free to rotate the piece $90$, $180$ or $270$ degrees and to move it left or right, as long as the piece stays entirely in the field. The piece then falls until it settles on the bottom of the field or on already occupied squares. In our variant of Tetris the piece must fall so that all parts of the piece are on the bottom of the field or on already occupied squares. In other words, after the piece has fallen there must be no free square such that some square above it is occupied.\n\nFor example, let the field be six columns wide with initial heights (the number of already occupied squares in each column) $2$, $1$, $1$, $1$, $0$ and $1$. Piece number $5$ can then be dropped into the field in five different ways:\n\nYou are given the initial heights of all columns and the figure to be dropped into the field.\n\nWrite a program that calculates the number of different ways to do this, i.e., the number of different field configurations that can be achieved by dropping the piece.\n\n-----Input-----\nThe first line contains two integers $C$ and $P$, $1 \\le C \\le 100$, $1 \\le P \\le 7$, the number of columns and the number of the piece to be dropped.\n\nThe second line contains $C$ integers separated by single spaces, each between $0$ and $100$, inclusive. These are the initial heights of the columns.\n\n-----Output-----\nOutput on a single line the number of different ways to drop the piece in the field.\n\n-----Examples-----\nSample Input 1:\n6 5\n2 1 1 1 0 1\nSample Output 1:\n5\n\nSample Input 2:\n5 1\n0 0 0 0 0\nSample Output 2:\n7\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\nassert solution(\"6 5\\n1 0 0 0 0 1\") == \"7\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0 0 0 0') == '3'\nassert solution('1 1\\n0') == '1'\nassert solution('6 6\\n1 1 1 1 1 1') == '0'\nassert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('6 5\\n2 1 1 1 1 1') == '0'\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 1\n0 0 0 0 0\n''') == 7\nassert solution('''6 5\n2 1 1 1 0 1\n''') == 5\nassert solution('''6 5\n2 1 1 1 0 1\n''') == 5\nassert solution('''6 5\n2 1 1 1 0 1\n''') == 5\nassert solution('''6 5\n2 1 1 1 0 1\n''') == 5\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\\n\") == \"5\"\nprint(solution(\"6 5\\n2 1 1 1 0 1\\n\"))\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 5\n2 1 1 1 0 1\n''') == '5'\nassert solution('''\n5 1\n0 0 0 0 0\n''') == '7'\nassert solution('''\n7 5\n1 1 1 1 1 1\n''') == '0'\nassert solution('''\n7 6\n0 0 0 0 0 0\n''') == '0'\nassert solution('''\n4 3\n1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"All your base are belong to us
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\n-----Problem-----\nThe New Alphabet has been developed for Internet communications. While the glyphs of the new alphabet don't necessarily improve communications in any meaningful way, they certainly make us feel cooler.\n\nYou are tasked with creating a translation program to speed up the switch to our more elite New Alphabet by automatically translating ASCII plaintext symbols to our new symbol set.\n\nThe new alphabet is a one-to-many translation (one character of the English alphabet translates to anywhere between $1$ and $6$ other characters), with each character translation as follows:\n\nOriginal\n\nNew\n\nEnglish Description\n\na\n\n@\n\nat symbol\n\nn\n\n[]\\[]\n\nbrackets, backslash, brackets\n\nb\n\n8\n\ndigit eight\n\no\n\n0\n\ndigit zero\n\nc\n\n(\n\nopen parenthesis\n\np\n\n|D\n\nbar, capital D\n\nd\n\n|)\n\nbar, close parenthesis\n\nq\n\n(,)\n\nparenthesis, comma, parenthesis\n\ne\n\n3\n\ndigit three\n\nr\n\n|Z\n\nbar, capital Z\n\nf"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nassert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@#@ 01/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nassert solution(\"No one can cross this \\\\\\\\ line.\\n\") == \"Nn1o1 [M1N\u00a0m\u00a0l0nk1]e\u00a0 [c0n\u00a0t1n]n1 [w1n]1 [h1n]t [t1n]1 [k1n]1 [e1n]1 [n1c]1 [r1e]1!\\n\"\nassert solution(\"SOS\") == \"S\\nS\\nO\\nS\\n\"\nassert solution(\"Lum Lum Hum\") == \"L\\nL\\nU\\nM\\nU\\nM\\n\"\n\"\"\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@#?!@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$. \"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\"\"\"\n\nimport re"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Hello World!\\\\n\") == \"`/0|_||Z [email protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\\\n\"\nassert solution(\"What's the Frequency, Kenneth?\\\\n\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\\\n\"\n\"\"\"\n\nimport string\nimport re"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@#44 @%+&$#'@3 $|3 [email\u00a0protected]@|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email protected]$3 @|Z3 8310[]\\[]6 `[.]0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'`''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"Alice\"\nassert solution(\"2\\n1\") == \"Bob\"\nassert solution(\"5\\n1 4 2 3 6\\n6 5 4 3 2 1\") == \"Bob\"\nassert solution(\"3\\n1 4 2\") == \"Alice\"\nassert solution(\"5\\n1 3 4 2 5\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('5') == 'Alice'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Bob'\nassert solution('5') == 'Alice'\nassert solution('1') == 'Bob'\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Bob\"\nassert solution(\"1\") == \"Alice\"\n\n-----Test Input-----\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Bob\"\nassert solution(\"1\") == \"Alice\"\nassert solution(\"100\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('this is the number of letters here') == 'thirty is the number of letters here'\nassert solution('thirtyone letters') == 'thirty one letters'\nassert solution('threehundrednineteen') == 'three hundred nineteen'\nassert solution('sevenhundredseventyone') =='seven hundred seventy one'\nassert solution('twothreethree') == 'two hundred thirty three'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has ten letters\") == \"this sentence has tenletters\"\n\"\"\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"threehundrednineteen\") == \"threehundrednineteen\"\nassert solution(\"twothreehundred\") == \"twothreehundred\"\nassert solution(\"ninetwenty\") == \"ninetwenty\"\nassert solution(\"threehundredthreethousand\") == \"threehundredthreethousand\"\nassert solution(\"sevenhundredfortyfivehundredthousand\") == \"sevenhundredfortyfivehundredthousand\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"one two three four\") == \"one two three four\", \"Wrong result for 1: one two three four\"\nassert solution(\"ten one two three\") == \"ten one two three\", \"Wrong result for 2: ten one two three\"\nassert solution(\"three two three four\") == \"three two three four\", \"Wrong result for 3: three two three four\"\nassert solution(\"eleven two eleven three\") == \"eleven two eleven three\", \"Wrong result for 4: eleven two eleven three\"\nassert solution(\"twenty ten twenty one\") == \"twenty ten twenty one\", \"Wrong result for 5: twenty ten twenty one\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"$ is the number of letters here\") == \"thirty is the number of letters here\"\n\nSample Input 3:\n2\ntwenty\nthirty\nSample Output 3:\ntwentytwo thirty\n\nSample Input 4:\n3\nonehundred\ntwohundred\nthreehundred\nSample Output 4:\nonehundredonehundred twohundred threehundred\n\nSolution:\nwords = stdin.split('\\n')\nN = int(words[0])\nnums = ['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen', 'nineteen']\ntens = ['twenty', 'thirty', 'forty', 'fifty','sixty','seventy', 'eighty', 'ninety']\nhundreds = ['onehundred', 'twohundred', 'threehundred', 'fourhundred', 'fivehundred','sixhundred','sevenhundred', 'eighthundred', 'ninehundred']\nd = {'one': 'one', 'two': 'two', 'three': 'three', 'four': 'four', 'five': 'five','six':'six','seven':'seven', 'eight': 'eight', 'nine': 'nine', 'ten': 'ten'}"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has $ letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 4 5\") == \"twentythreefourfive\"\nassert solution(\"11 18 31\") == \"eleveneighteenthirtyone\"\nassert solution(\"13 100 21 3\") == \"thirteenhundredtwentytwelvethirtythree\"\nassert solution(\"1 19 3 1\") == \"onehundrednineteenthirtythreeone\"\nassert solution(\"2 23 1 1\") == \"twohundredtwentythreeoneone\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fourteen\") == \"fourteen\"\nassert solution(\"twenty\") == \"twenty\"\nassert solution(\"thirty\") == \"thirty\"\nassert solution(\"onehundred\") == \"onehundred\"\nassert solution(\"onehundredone\") == \"onehundredone\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\n\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"this sentence has $ letters\"), \"this sentence has thirtyone letters\")"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"This sentence has $ letters\") == \"This sentence has thirtyone letters \"\nassert solution(\"Blah blah seventeen\") == \"Blah blah seventeen \"\nassert solution(\"This sentence has $ letters\") == \"This sentence has thirtyone letters \"\nassert solution(\"Blah blah seventeen\") == \"Blah blah seventeen \""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('abcd') == '0'\nassert solution('a') == '0'\nassert solution('abcd') == '0'\nassert solution('AbcD') == '0'\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\nprint(solution('EaEbFabG'))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\nA\n\nB\n\nC\n\nD\n\n''') == '0'\n\nassert solution('''\nAbc\n\nNOP\n\nC\n\nNOP\n\nD\n\n''') == '2'\n\nassert solution('''\nABBAC\n\nBB\n\nBB\n\nBB\n\nBB\n\nBB\n\n''') == '1'\n\nassert solution('''\na\n\nb\n\nc\n\nb\n\nb\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n\nc\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\nprint(\"All tests passed.\")\n\n-----\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output 1:\n0\n\nSample Output 2:\n5\n\nSample Output"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\nassert solution(\"CcCcCc\") == \"0\"\n\"\"\"\n\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('6 3') == 'Even 6'\nassert solution('2 1') == 'Not a moose'\nassert solution('3 0') == 'Not a moose'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\nSample Input 3:\n0 2\nSample Output 3:\nNot a moose\n\"\"\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"3 2\") == \"Not a moose\"\nassert solution(\"2 2\") == \"Even 2\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\n\nassert solution(\"3 3\") == \"Even 6\"\n\nassert solution(\"2 2\") == \"Not a moose\"\n\nassert solution(\"1 1\") == \"Not a moose\"\n\nassert solution(\"0 0\") == \"Not a moose\"\n\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '2 3'\n) == 'Odd 6'\n\nassert solution(\n    '3 3'\n) == 'Even 6'\n\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 1\") == \"Not a moose\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('2 3') == 'Odd 6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr\\'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.') =='map'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ab\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"aa\") == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('3') == 'c'\nassert solution('4') == 'd'\nassert solution('5') == 'e'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '2'\nassert solution('2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '3'\n\n\"\"\"\n\n\"\"\"\nfrom itertools import product\n\nclass Dictionary:\n\n    def __init__(self, n):\n        self.dictionary = []\n        self.n = n\n        self.init_dictionary()\n\n    def init_dictionary(self):\n        for _ in range(self.n):\n            word = input()\n            self.dictionary.append(word)\n\n\nclass T9:\n\n    def __init__(self, n):\n        self.n = n\n        self.t9_dictionary = []\n        self.init_t9_dictionary()\n\n    def init_t9_dictionary(self):\n        for x in range(1, self.n + 1):\n            self.t9_dictionary.extend(map(''.join, product('123456789', repeat = x)))\n\n\nclass InputT9:\n\n    def __init__(self, string):\n        self.string = string\n        self.digits = string.split('\\n')\n        self.t9_dict = {}\n\n    def init_t9_dict(self):\n        for d in self.digits:\n            if d in self.t9_dict:\n                self.t9_dict[d] += 1\n            else:\n                self.t9_dict[d] = 1\n\n    def count_words(self):\n        dictionary = Dictionary(10 ** 6)\n        t9 = T9(10)\n        # print(t9.t9_dictionary)\n        result = 0\n        for key in self.t9_dict:\n            if key in dictionary.dictionary:\n                result += self.t9_dict[key]\n        print(result)\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '1'\nassert solution('dak') == '2'\nassert solution('6666') == '2'\n\n\"\"\"\n\nfrom collections import deque\nimport sys\n\nn = int(sys.stdin.readline())\n\ndic = dict(zip([chr(i) for i in range(65, 91)], range(1, 10)))\n\nwords = []\n\nfor _ in range(n):\n    words.append(sys.stdin.readline().strip())\n\ns = sys.stdin.readline().strip()\n\nq = deque([dic[c] for c in s])\n\ncount = 0\n\nfor word in words:\n    cur = 0\n    for letter in word:\n        cur = cur * 10 + dic[letter]\n    if cur == q[0] * 10 + q[1]:\n        count += 1\n    q.popleft()\n    q.append(cur % 10)\n\nprint(count)"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"tomo\") == 1\nassert solution(\"mono\") == 1\nassert solution(\"dak\") == 2\nassert solution(\"6666\") == 2\nassert solution(\"jal\") == 2"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"12\") == \"ab\"\nassert solution(\"23\") == \"abc\"\nassert solution(\"234\") == \"abcd\"\nassert solution(\"2345\") == \"abcde\"\n\"\"\"\nimport sys\nfrom itertools import combinations\n\ndict_ = {}\n\nfor line in sys.stdin:\n    for letter in line.rstrip():\n        if letter not in dict_:\n            dict_[letter] = 1\n        else:\n            dict_[letter] += 1\n\nnum = int(input())\n\nfor _ in range(num):\n    word = input()\n    num_keys = 0\n    for letter in word:\n        if dict_[letter] >= 1:\n            num_keys += 1\n    print(len(combinations(word, num_keys)))\n\n\n\"\"\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"tomo\") == 1\n\nassert solution(\"mono\") == 1\n\nassert solution(\"dak\") == 1\n\nassert solution(\"6666\") == 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Test 1-----\nsolution('')\n\n-----Test 2-----\nsolution('')\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\ntomo\\nmono\\ndak\\n6666') == '1'\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\n\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") ==..#..\nassert solution(\"DOG\") ==..#...#...*..\nassert solution(\"Z\") ==...#...*...\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(\n            solution(\n                \"A\"),\n            ..#..\n            )\n\n    def test_solution2(self):\n        self.assertEqual(\n            solution(\"DOG\"),\n            ..#...#...*..\n            )\n\n    def test_solution3(self):\n        self."
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"\"\"\n..#..\n.#.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"Z\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.Z.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\n'''\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"...#...#...*..\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(TEST_CASE) == EXPECTED_CASE\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\nassert solution('CAT') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.C.#.A.*.T.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\nassert solution('CHOC') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.C.#.H.*.O.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == 3.141593\nassert solution(\"21\") == 1385.442360\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '3.141593'\nassert solution('2') == '2.000000'\nassert solution('3') == '5.960464'\nassert solution('4') == '11.414213'\nassert solution('5') == '18.849609'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '1'\n) == '3.141593'\nassert solution(\n    '21'\n) == '1385.442360'\n\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nassert solution('5000') == '8.281360'\nassert solution('10000') == '55.785156'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 3.141593\nassert solution('21') == 1385.442360\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"2\") == \"4.123106\"\nassert solution(\"3\") == \"7.832037\"\nassert solution(\"4\") == \"12.536443\"\nassert solution(\"5\") == \"19.660747\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '110'\nassert solution('123') == '372'\nassert solution('4321') == '3234'\nassert solution('9123') == '98123'\n\nassert solution('0') == '0'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\nprint(solution(input()))\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test1) == test_solution1\nassert solution(test2) == test_solution2\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(12)) == \"30.285714\"\nassert solution(str(3)) == \"10.571429\"\nassert solution(str(10000)) == \"337960.920747\"\n\"\"\"\n\nimport sys\n\nR = float(sys.stdin.readline())\nprint(round(2*3.141593*R, 4))\nprint(round(R**2*2*3.141593, 4))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n\n\nfrom typing import List\nimport collections\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 -2 3\\n') == 2\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n\"\"\"\n\nn = int(input())\nk = list(map(int, input().split()))\n\nprint(sum(filter(lambda x: x < 0, k)))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n\n'''\n'''\n\u0412 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043c\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u043e\u0432. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440. \u041a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043d\u0443\u043c\u0435\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u043e\u0434\u0440\u044f\u0434, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0435\u0434\u0438\u043d\u0438\u0446\u044b. \u041c\u043e\u0436\u0435\u0442 \u043b\u0438 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0438\u043c\u0435\u0442\u044c \u043d\u043e\u043c\u0435\u0440 x, \u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u2013 \u043d\u043e\u043c\u0435\u0440 y?\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e nn \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u043e\u0432. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u044b nn \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 10000. \u0427\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n3\n1 2 3\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\nYES\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4\n4 3 2 1\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\nNO\n\n\u0422\u0435\u0441\u0442 3\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4\n1 2 1 1\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\nYES\n'''\n\nn = int(input())\nr = input().split()\nr = list(map(int, r))\nl = []\nfor i in r:\n    l.append(i)\nl.sort(reverse=True)\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 -2 3') == '2'\n\nSample Input 3:\n5\n129 44 394 253 147\nSample Output 3:\n0\n\n'''\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 -2 3') == '2'\nassert solution('1 -2 3\\n1 -2 3') == '0'\n'''"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'\n\"\"\"\n\nfrom math import ceil, log2"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\nprint(\"Success\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"2\\n2 2\") == \"8\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 1 2\") == \"8\"\nprint(\"Passed!\")\n\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\\\n2 2 2'\n) == '6'\nassert solution(\n    '3\\\\n4 1 2'\n) == '8'\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 2 2\\n') == '6'\nassert solution('3\\n4 1 2\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\nassert solution(\"5\\n1 1 1 1 1\") == \"10\"\n\nimport math"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"6\"\n\"\"\"\n\nn = int(input())\ntime_array = list(map(int, input().split()))\n\ntime_array.sort()\ntime_array.reverse()\n\ntotal_time = 0\nfor i in time_array:\n    total_time += i\n\nprint(total_time)\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\"\n\n\nfrom math import ceil"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 2\\n3 1 2') == '8'\nassert solution('1 1 2\\n2 1 1') == '5'\nassert solution('1 1 2\\n2 2 2') == '9'\nassert solution('1 1 2\\n2 2 1') == '4'\nassert solution('1 1 2\\n2 2 2') == '12'\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\n\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\n-----Notes-----\n\n-----Challenge-----\nTime limit: 1.0 sec\nMemory limit: 512 MB\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('4 2 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\n\"\"\"\n\nt, n, m = map(int, stdin.readline().strip().split())\n\nd = {'S': [0, 1], 'U': [1, 0], 'D': [-1, 0], 'L': [0, -1]}\n\ngrid = [[0 for i in range(m + 2)] for j in range(n + 2)]\ngrid[1][1] = 'S'\n\nfor i in range(t):\n    for j in range(n):\n        for k in range(m):\n            if grid[j + 1][k + 1] == 'S':\n                grid[j + d[stdin[i][k]][0]][k + d[stdin[i][k]][1]] = 'S'\n                grid[j + 1][k + 1] = 'S'\n                continue\n            if grid[j + 1][k + 1] == '1':\n                grid[j + d[stdin[i][k]][0]][k + d[stdin[i][k]][1]] = '1'"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"1 1 1\\nS\") == \"NOT POSSIBLE\"\nassert solution(\"3 1 1\\n101\\nS\") == \"NOT POSSIBLE\"\nassert solution(\"2 3 2\\n100101\\nS101\") == \"NOT POSSIBLE\"\nassert solution(\"2 5 5\\n10010101101\\nS101\") == \"NOT POSSIBLE\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\nimport sys\n\nt, n, m = [int(x) for x in sys.stdin.readline().rstrip().split()]\ngrid = []\nfor i in range(n):\n    grid.append(sys.stdin.readline().rstrip())\nS = 0\nfor i in range(n):\n    if grid[i][0] == 'S':\n        S = i\n\nans = 0\nr = 0\nfor i in range(m):\n    if grid[S][i] == 'S':\n        ans = 1\n    if grid[S][i] == 'U':\n        ans += 1\n        r = i\n        for j in range(S, 0, -1):\n            if grid[j-1][i]!= '1':\n                ans += 1\n                break\n    if grid[S][i] == 'D':\n        ans += 1\n        for j in range(S+1, n):\n            if grid[j][i]!= '1':\n                ans += 1\n                break\n    if grid[S][i] == 'L':\n        ans += 1\n        for j in range(i, 0, -1):\n            if grid[S][j-1]!= '1':\n                ans += 1\n                break\n    if grid[S][i] == 'R':\n        ans += 1\n        for j in range(i+1, m):\n            if grid[S][j]!= '1':\n                ans += 1\n                break\nprint(ans) if ans <= t else print(\"NOT POSSIBLE\")\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\n\"\"\"\n\nN, C = [int(x) for x in stdin.readline().split()]\nw = [int(x) for x in stdin.readline().split()]\n\nw.sort()\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\nassert solution('8 5\\n1 2 3 4 5 6 7 8') == '6'\nassert solution('9 5\\n1 2 3 4 5 6 7 8 9') == '8'\nassert solution('10 5\\n1 2 3 4 5 6 7 8 9 10') == '9'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == 1\nassert solution('3 5') == 2\nassert solution('4 5') == 3\nassert solution('3 3') == 0\nassert solution('3 100') == 4\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == 4\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == 4\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"\n\nimport sys\n\nN, C = map(int, sys.stdin.readline().split())\n\nweights = [int(x) for x in sys.stdin.readline().split()]\nweights.sort()\n\nres = 0\ni = 0\nw = 0\nwhile i < N and w + weights[i] <= C:\n    w += weights[i]\n    res += 1\n    i += 1\n\nprint(res)\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == 4\n\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == 4\nassert solution('7 5\\n1 5 4 3 2 1 1') == 3\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nN, C = [int(x) for x in sys.stdin.readline().split()]\nweights = [int(x) for x in sys.stdin.readline().split()]\n\nweight_count = 0\nfor weight in weights:\n    weight_count += weight\n    if weight_count > C:\n        print(weight_count)\n        sys.exit(0)\n\nweight_count = 0\nweights = deque(weights)\nwhile len(weights) > 0:\n    weight = weights.popleft()\n    weight_count += weight\n    while weight_count > C:\n        weight_count -= weights.popleft()\n    if weight_count <= C:\n        print(weight_count)\n        sys.exit(0)"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 5\n1 1 2 3 4 5\"\"\") == \"3\"\nassert solution(\"\"\"5 5\n3 1 2 1 1\"\"\") == \"4\"\nassert solution(\"\"\"5 5\n3 3 2 2 1\"\"\") == \"2\"\nassert solution(\"\"\"5 5\n3 3 2 2 2\"\"\") == \"1\"\nassert solution(\"\"\"5 5\n1 1 2 3 4 5\"\"\") == \"4\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('SSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'\n\"\"\"\n\nwith open(\"input.txt\") as file:\n    stdin = file.read()"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\") == \"5\\n10\"\n\"\"\"\n\nr = int(input())\ns = input()\nn = int(input())\n\ns_count = {'S': 0, 'P': 0, 'R': 0}\n\nfor i in range(0, n):\n    friends = input()\n    for j in range(0, r):\n        s_count[s[j]] += 1 if friends[j] == s[j] else 0\n\nprint(sum(s_count.values()), max(s_count.values()))\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n') == '5\\n10\\n'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15\\n'\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"SSPPR\\n5\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\nprint(\"All tests passed.\")\n\n------OUTPUT TEMPLATE------\nOUTPUT_NAME = \"\"\"\nOUTPUT_TEXT\n\"\"\"\n\nOUTPUT_TEXT = \"\"\"\n<your_output>\n\"\"\"\n\nimport unittest\nfrom collections import deque\nfrom typing import List, Deque\n\nclass TestPart1(unittest.TestCase):\n\n    def test_template(self):\n        # Test template for Part 1\n        pass\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"5\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n7\\n11\\n17\\n23\\n32\\n40\\n49\\n53\\n59\\n64\\n70\\n77\\n83\\n89\\n95\\n101\\n110\\n118\\n127\\n132\\n136\\n139\\n142\\n147\\n155\\n161\\n165\\n171\\n178\\n179\\n181\\n184\\n186\\n190\\n197\\n197\\n195\\n194\\n193\\n192\\n192\\n191\\n190\\n190\\n189\\n188\\n187\\n187\\n187\\n187\\n187\\n186\\n185\\n185\\n185\\n184\\n184\\n183\\n183\\n183\\n182\\n182\\n182\\n182\\n182\\n182\\n182\\n182\\n181\\n181\\n181\\n181\\n181\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n180\\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n2\\n5\\n9\\n10\") == \"still running\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2\\n7\\n11\\n\"\n) == \"4\\n\"\nassert solution(\n\"5\\n2\\n5\\n9\\n10\\n17\\n\"\n) == \"still running\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('11') == '1'\nassert solution('111') == '1'\nassert solution('1111') == '2'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n7\\n11\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"4\"\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\n\"\"\"\n\n\"\"\"\nSolution\nFirst, let\u2019s see how this problem could be solved by a computer. We want to count the number of seconds in a given time interval.\n\nEach time the stopwatch is stopped, the number of seconds in the interval changes by the number of seconds that have elapsed since the last time the stopwatch was started.\n\nIn the example above, if the stopwatch is stopped, the number of seconds in the interval is the same as the number of seconds elapsed since the last time the stopwatch was started.\n\nHowever, when the stopwatch is started, the number of seconds in the interval changes. The number of seconds in the interval is the number of seconds elapsed since the last time the stopwatch was started.\n\nWe can find the number of seconds in the interval by subtracting the number of seconds that have elapsed since the last time the stopwatch was started from the number of seconds elapsed since the last time the stopwatch was reset.\n\nThe only other possible value for the number of seconds in the interval is zero, and this only happens when the stopwatch has not been started.\n\nFor the next example, we will start the stopwatch, push the button, stop the stopwatch, and then start the stopwatch again. We know that the number of seconds in the interval is the number of seconds elapsed since the last time the stopwatch was reset minus the number of seconds elapsed since the last time the stopwatch was started.\n\nFor the next example, we will stop the stopwatch, push the button, start the stopwatch, push the button again, and then stop the stopwatch. We know that the number of seconds in the interval is the number of seconds elapsed since the last time the stopwatch was started minus the number of seconds elapsed since the last time the stopwatch was reset.\n\nFor the next example, we will start the stopwatch, push the button, stop the stopwatch, and then start the stopwatch again. We know that the number of seconds in the interval is the number of seconds elapsed since the last time the stopwatch was reset minus the number of seconds elapsed since the last time the stopwatch was started.\n\nThus, we can write the following recursive function to solve this problem:"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2\n5\n9\n10\n17''') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n2\\n5\\n9\\n10\\n17\"\n) == \"still running\"\n\n\"\"\"\n\nn = int(stdin.readline())\n\nfor i in range(n):\n    print(i + 1)\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n7\n11\n''') =='still running'\n\nassert solution('''\n5\n2\n5\n9\n10\n17\n''') =='still running'\n\nassert solution('''\n1\n7\n''') == '4'\n\nassert solution('''\n3\n2\n5\n''') =='still running'\n\nassert solution('''\n3\n10\n17\n''') =='still running'"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 1 3 2 2 3\\n2 2') == '0.6'\nassert solution('2 2') == 'impossible'\n\nassert solution('2 2') == 'impossible'\nassert solution('4 1 3 2') == 'impossible'\n\nassert solution('6 1 3 2 2 3\\n2 2') == '0.6'\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2\\n2 2\") == \"impossible\"\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations\nfrom math import log10\nfrom operator import itemgetter"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n') == 'impossible'\nassert solution('3\\n1 2 3\\n') == '0.5'\nassert solution('3\\n3 2 1\\n') == '0.6666666666666666'\nassert solution('5\\n2 3 1 1 3\\n') == '0.625'\n\nprint('all tests passed')\n\n-----Problem-----\nA company that sells coffee to offices around the world has to prepare for supplies for the upcoming holiday. They need a list of all the offices around the world, and for each office the number of coffee pots that must be prepared. They want to minimize the total number of supplies needed, so they are ready to buy as few supplies as possible.\n\nGiven a list of integers $L=\\{l_1, \\ldots, l_n\\}$, where $l_i$ is the number of coffee pots of type $i$ that must be prepared in the office $i$, determine the minimum number of supplies that must be prepared.\n\n-----Solution-----\nhttps://www.youtube.com/watch?v=nNgN5O5sdpE"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 2\") == \"impossible\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6'\nassert solution('2 2') == 'impossible'\n\nimport sys; sys.setrecursionlimit(300000)\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4\\n2 3 4\\n') == '0.5'\n\"\"\"\n\nn = int(input().strip())\nc = list(map(int, input().strip().split()))\n\ncount = 0\nres = 0\n\nfor i in range(n):\n    count += c[i]\n    res = max(res, c[i]/count)\n\nprint(res)\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1 3 2 2 3\\n6 1 3 2 2 3') == '0.6'\nassert solution('2 2\\n2 2') == 'impossible'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2\\n2 2\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nassert solution('1 20 1 20\\n1 10 2 5') == 'Tie'\nassert solution('1 4 1 4\\n1 8 1 8') == 'Tie'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Gunnar'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nassert solution('1 2 3 4\\n1 2 4 5') == 'Gunnar'\nassert solution('1 1 1 1\\n1 2 2 2') == 'Tie'\n\"\"\"\n\na, b, c, d = map(int, stdin.split('\\n')[0].split())\ne, f, g, h = map(int, stdin.split('\\n')[1].split())"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 1 4\", \"1 6 1 6\") == \"Emma\"\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 1 4\") == \"Emma\"\nassert solution(\"1 8 1 8\") == \"Tie\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n\"\"\"\n\na1, b1, a2, b2 = (int(i) for i in input().split())\nx1 = sum(range(a1, b1 + 1))\nx2 = sum(range(a2, b2 + 1))"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4\") == \"Emma\"\nassert solution(\"1 8 1 8\") == \"Tie\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 1 4\") == \"Emma\"\nassert solution(\"1 8 1 8\") == \"Tie\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 mumble mumble 7 mumble 8') == \"something is fishy\"\nassert solution('1 2 3 mumble mumble 7 mumble 8') == \"makes sense\"\n\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nassert solution('1 2 3 mumble mumble 7 mumble 8') =='makes sense'\nassert solution('5 6 7 mumble mumble 9 mumble 10') =='makes sense'\nassert solution('5 6 7 mumble mumble 9 mumble 10 mumble mumble') =='something is fishy'\nassert solution('1 2 3 mumble mumble 7 mumble 8 mumble mumble') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nassert solution('6\\n1 2 3 mumble mumble 5') =='makes sense'\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nassert solution('3\\n1 2 mumble') =='something is fishy'\nassert solution('4\\n1 2 3') =='something is fishy'\nassert solution('8\\n1 2 3 4 5 6 mumble mumble') =='makes sense'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\nimport pytest\nimport sys"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nstdin = sys.stdin.readline().split()\n\nstdin = [int(i) if i!='mumble' else i for i in stdin]\n\nprint('makes sense' if n == len(stdin) and sum([abs(i - j) for i, j in zip(stdin, stdin[1:])]) == 0 else'something is fishy')"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 mumble 5''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8''') =='something is fishy'"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\nassert solution('10 3 13 15 17 19 22 23') == '5 -7'\nassert solution('2 4 6 8 10 12') == '2 11'\nassert solution('1 2 3 4 5') == '1 4'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 6 9 12 15\\n4 9 25 49 81\") == \"1 18\"\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 6 9 12 15\") == \"1 18\"\nassert solution(\"3 9 25 49 81\") == \"2 121\"\n\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6 9 12 15') == '1 18'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\nassert solution('3 6 9 12 15') == '1 18'\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\nassert solution(\"5 1 2 3 4 5\") == \"0 3\"\nassert solution(\"5 2 1 9 3 6\") == \"1 10\"\nassert solution(\"5 6 7 10 14 16\") == \"2 0\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3 6 9 12 15\n''') == '1 18'\nassert solution('''4 9 25 49 81\n''') == '2 121'\nassert solution('''6 9 3 6 15\n''') == '0 9'\nassert solution('''9 6 12 5\n''') == '0 9'\nassert solution('''9 9 9\n''') == '1 0'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"6\\n2 4\\n5 1\\n1 3\\n4 0\\n0 5\\n3 1\\n5 2\") == \"CORRECT\"\n\n----Problem-----\nYou are given an $N \\times M$ chessboard, and want to place $N$ queens on the board so that no queen can attack any other queen on the board. How many distinct solutions are there?\n\nInput Format\nThe first line contains $N$ and $M$ separated by a space.\nThe next $N$ lines each contain $M$ integers.\n\nConstraints\n1<= N, M <= 100\n\nOutput Format\nPrint the number of solutions\n\nSample Input 0\n2 2\n0 1\n1 0\nSample Output 0\n1\n\nSample Input 1\n3 2\n0 0\n1 0\n0 1\nSample Output 1\n2\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n5 4\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'INCORRECT'\n\nassert solution('8\\n0 7\\n6 1\\n0 4\\n7 5\\n3 2\\n4 6\\n1 5\\n2 7\\n6 4') == 'CORRECT'\nassert solution('8\\n2 7\\n6 4\\n0 7\\n6 1\\n3 2\\n4 6\\n1 5\\n2 7\\n6 4') == 'CORRECT'\n\nassert solution('4\\n0 7\\n6 1\\n0 4\\n7 5\\n3 2\\n4 6\\n1 5\\n2 7\\n6 4') == 'CORRECT'"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7') == 'CORRECT'\nassert solution('3\\n0 2\\n2 0') == 'INCORRECT'\nassert solution('4\\n0 1\\n2 1') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"INCORRECT\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n0 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'INCORRECT'\nassert solution('8\\n0 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n0 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n0 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\n\nassert solution('''\n4\n2 3\n1 0\n0 2\n3 1\n''') == 'CORRECT'\n\nassert solution('''\n4\n1 2\n0 3\n3 1\n''') == 'INCORRECT'\n\nassert solution('''\n4\n2 3\n1 0\n0 2\n3 1\n''') == 'INCORRECT'\n\nassert solution('''\n3\n2 3\n0 1\n2 1\n''') == 'CORRECT'"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\nassert solution('3\\n0 1 1\\n1 0 1') == '1 1 1'\nassert solution('4\\n0 0 1 1\\n0 0 2 0\\n1 2 0 1\\n1 0 1 0') == '1 2 3 1'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\"\"\"\n\nn = int(input())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\nmax = 10**9\nm = [[0 for j in range(n)] for i in range(n)]\nfor i in range(n):\n    for j in range(i, n):\n        m[i][j] = (matrix[i][j] & matrix[i][j] == matrix[i][j])\n    m[i] = [max] + m[i] + [max]\n\nresult = [max] * n\nfor i in range(n):\n    for j in range(1, n):\n        result[i] &= m[i][j]\n\nprint(*result, sep=' ')\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\\n\") == \"1 2 3 11\"\n\"\"\"\n\nimport unittest\nimport re\nimport sys\nfrom typing import List, Pattern, Match\nfrom collections import namedtuple\n\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\"\"\"\n\nn = int(input())\ndata = []\nfor i in range(n):\n    row = input().split()\n    row = [int(i) for i in row]\n    data.append(row)\n\nr = len(data)\nc = len(data[0])"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\nSample Input 3:\n5 1\nSample Output 3:\nSaturday\n\nSample Input 4:\n7 10\nSample Output 4:\nSunday\n\nSample Input 5:\n9 12\nSample Output 5:\nThursday\n\nSample Input 6:\n11 11\nSample Output 6:\nTuesday\n\nSample Input 7:\n9 11\nSample Output 7:\nThursday\n\nSample Input 8:\n20 10\nSample Output 8:\nFriday\n\nSample Input 9:\n6 7\nSample Output 9:\nSunday\n\nSample Input 10:\n7 6\nSample Output 10:\nSunday\n\nSample Input 11:\n14 8\nSample Output 11:\nWednesday\n\nSample Input 12:\n8 15\nSample Output 12:\nSaturday\n\nSample Input 13:\n21 20\nSample Output 13:\nFriday\n\nSample Input 14:\n19 16\nSample Output 14:\nThursday\n\nSample Input 15:\n10 8\nSample Output 15:\nSunday\n\nSample Input 16:\n5 6\nSample Output 16:\nSaturday\n\nSample Input 17:\n13 12\nSample Output 17:\nThursday\n\nSample Input 18:\n25 8\nSample Output 18:\nFriday\n\nSample Input 19:\n18 6\nSample Output 19:\nSunday\n\nSample Input 20:\n20 10\nSample Output 20:\nTuesday\n\nSample Input 21:\n9 11\nSample Output 21:\nFriday\n\nSample Input 22:\n5 6\nSample Output 22:\nSaturday\n\nSample Input 23:\n21 2\nSample Output 23:\nThursday\n\nSample Input 24:\n7 1\nSample Output 24:\nMonday\n\nSample Input 25:\n5 10\nSample Output 25:\nSaturday\n\nSample Input 26:\n15 16\nSample Output 26:\nSunday\n\nSample Input 27:\n10 9\nSample Output 27:\nSunday\n\nSample Input 28:\n15 15\nSample Output 28:\nSaturday\n\nSample Input 29:\n17 1\nSample Output 29:\nTuesday\n\nSample Input 30:\n1 9\nSample Output 30:\nSunday\n\nSample Input 31:\n9 8\nSample Output 31:\nTuesday\n\nSample Input 32:\n17 15\nSample Output 32:\nSunday\n\nSample Input 33:\n15 15\nSample Output 33:\nSaturday\n\nSample Input 34:\n1 15\nSample Output 34:\nSaturday\n\nSample Input 35:\n9 13\nSample Output 35:\nFriday\n\nSample Input 36:\n25 1\nSample Output 36:\nMonday\n\nSample Input 37:\n15 1\nSample Output 37:\nFriday\n\nSample Input 38:\n14 7\nSample Output 38:\nWednesday\n\nSample Input 39:\n9 9\nSample Output 39:\nTuesday\n\nSample Input 40:\n6 2\nSample Output 40:\nThursday\n\nSample Input 41:\n7 8\nSample Output 41:\nSunday\n\nSample Input 42:\n5 8\nSample Output 42:\nSunday\n\nSample Input 43:\n15 1\nSample Output 43:\nSaturday\n\nSample Input 44:\n1 1\nSample Output 44:\nMonday\n\nSample Input 45:\n25 1\nSample Output 45:\nMonday\n\nSample Input 46:\n14 15\nSample Output 46:\nSunday\n\nSample Input 47:\n15 15\nSample Output 47:\nSaturday\n\nSample Input 48:\n7 3\nSample Output 48:\nWednesday\n\nSample Input 49:\n14 2\nSample Output 49:\nWednesday\n\nSample Input 50:\n9 2\nSample Output 50:\nTuesday\n\nSample Input 51:\n13 1\nSample Output 51:\nFriday\n\nSample Input 52:\n11 12\nSample Output 52:\nSunday\n\nSample Input 53:\n8 10\nSample Output 53:\nSaturday\n\nSample Input 54:\n14 8\nSample Output 54:\nSunday\n\nSample Input 55:\n17 1\nSample Output 55:\nTuesday\n\nSample Input 56:\n9 10\nSample Output 56:\nSaturday\n\nSample Input 57:\n19 1\nSample Output 57:\nMonday\n\nSample Input 58:\n9 9\nSample Output 58:\nTuesday\n\nSample Input 59:\n5 6\nSample Output 59:\nSaturday\n\nSample Input 60:\n12 1\nSample Output 60:\nThursday\n\nSample Input 61:\n11 14\nSample Output 61:\nSunday\n\nSample Input 62:\n12 7\nSample Output 62:\nWednesday\n\nSample Input 63:\n5 10\nSample Output 63:\nSaturday\n\nSample Input 64:\n9 11\nSample Output 64:\nFriday\n\nSample Input 65:\n7 5\nSample Output 65:\nSaturday\n\nSample Input 66:\n8 7\nSample Output 66:\nSunday\n\nSample Input 67:\n18 12\nSample Output 67:\nSunday\n\nSample Input 68:\n15 1\nSample Output 68:\nSaturday\n\nSample Input 69:\n17 1\nSample Output 69:\nTuesday\n\nSample Input 70:\n21 2\nSample Output 70:\nThursday\n\nSample Input 71:\n2 8\nSample Output 71:\nSunday\n\nSample Input 72:\n13 9\nSample Output 72:\nThursday\n\nSample Input 73:\n8 2\nSample Output 73:\nMonday\n\nSample Input 74:\n12 6\nSample Output 74:\nSunday\n\nSample Input 75:\n4 1\nSample Output 75:\nThursday\n\nSample Input 76:\n9 13\nSample Output 76:\nFriday\n\nSample Input 77:\n7 2\nSample Output 77:\nThursday\n\nSample Input 78:\n1 6\nSample Output 78:\nSunday\n\nSample Input 79:\n6 12\nSample Output 79:\nSunday\n\nSample Input 80:\n15 2\nSample Output 80:\nSaturday\n\nSample Input 81:\n15 1\nSample Output 81:\nSaturday\n\nSample Input 82:\n7 1\nSample Output 82:\nMonday\n\nSample Input 83:\n6 9\nSample Output 83:\nSunday\n\nSample Input 84:\n15 7\nSample Output 84:\nSunday\n\nSample Input 85:\n7 11\nSample Output 85:\nSunday\n\nSample Input 86:\n16 6\nSample Output 86:\nSunday\n\nSample Input 87:\n12 9\nSample Output 87:\nFriday\n\nSample Input 88:\n10 9\nSample Output 88:\nSaturday\n\nSample Input 89:\n15 11\nSample Output 89:\nSaturday\n\nSample Input 90:\n7 1\nSample Output 90:\nMonday\n\nSample Input 91:\n15 1\nSample Output 91:\nSaturday\n\nSample Input 92:\n11 12\nSample Output 92:\nSunday\n\nSample Input 93:\n13 12\nSample Output 93:\nThursday\n\nSample Input 94:\n11 2\nSample Output 94:\nThursday\n\nSample Input 95:\n8 4\nSample Output 95:\nFriday\n\nSample Input 96:\n5 11\nSample Output 96:\nSaturday\n\nSample Input 97:\n1 1\nSample Output 97:\nMonday\n\nSample Input 98:\n2 7\nSample Output 98:\nMonday\n\nSample Input 99:\n5 8\nSample Output 99:\nSaturday\n\nSample Input 100:\n6 6\nSample Output 100:\nSaturday\n\nSample Input 101:\n15 5\nSample Output 101:\nFriday\n\nSample Input 102:\n3 8\nSample Output 102:\nWednesday\n\nSample Input 103:\n10 10\nSample Output 103:\nFriday\n\nSample Input 104:\n3 2\nSample Output 104:\nThursday\n\nSample Input 105:\n19 1\nSample Output 105:\nTuesday\n\nSample Input 106:\n15 6\nSample Output 106:\nSaturday\n\nSample Input 107:\n8 2\nSample Output 107:\nMonday\n\nSample Input 108:\n17 1\nSample Output 108:\nMonday\n\nSample Input 109:\n8 6\nSample Output 109:\nSunday\n\nSample Input 110:\n2 3\nSample Output 110:\nWednesday\n\nSample Input 111:\n17 1\nSample Output 111:\nTuesday\n\nSample Input 112:\n3 9\nSample Output 112:\nThursday\n\nSample Input 113:\n8 1\nSample Output 113:\nMonday\n\nSample Input 114:\n14 7\nSample Output 114:\nWednesday\n\nSample Input 115:\n2 12\nSample Output 115:\nSunday\n\nSample Input 116:\n13 10\nSample Output 116:"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\nassert solution(\"1 2\") == \"Monday\"\nassert solution(\"1 1\") == \"Thursday\"\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\n\"\"\"\n\n\"\"\"\n------------------------------------------------------------------------------------------------------------------------\nYou are given a positive integer N (N is not greater than 25). Write a program that prints a sequence of integers\nstarting from 0 and ending with N. If N is greater than 25, the program should output \u201cInvalid number\u201d.\n\nInput Format\nThe first line contains a single integer N (0 < N < 25).\n\nOutput Format\nPrint a sequence of integers starting from 0 and ending with N.\n\nSample Input 0\n5\nSample Output 0\n0 1 2 3 4 5\n\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Thursday'\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\n\"\"\"\n\n\"\"\"\nSample Input 1:\n1 1\nSample Output 1:\nThursday\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\"\n\nD, M = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('2 1') == 'Monday'\nassert solution('29 2') == 'Sunday'\nassert solution('30 3') == 'Monday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('1 3') == 'Sunday'\nassert solution('1 12') == 'Thursday'\nassert solution('5 12') == 'Saturday'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\nprint(\"Test 1 OK\")\n\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\\n\"\nprint(\"Test 2 OK\")\n\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\\n\"\nprint(\"Test 3 OK\")"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n100\\n4\\n12') == '4\\n129'\nassert solution('1\\n1\\n1\\n2') == '1\\n2'\n\"\"\"\n\nfrom collections import deque\nimport math\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\n\nstdin = open(r\"C:\\Users\\Anastasia Siedykh\\Documents\\Backup\\kodoktor\\kodoktor-python-task-swi-ai-19\\swi_AI_19_1\\week3\\swi_AI_19_1_2_in.txt\", \"r\")\n\nfile = open(r\"C:\\Users\\Anastasia Siedykh\\Documents\\Backup\\kodoktor\\kodoktor-python-task-swi-ai-19\\swi_AI_19_1\\week3\\swi_AI_19_1_2_out.txt\", \"w\")\n\"\"\"\n\nimport sys\n\nassert sys.argv[1:][0] == \"1\"\nassert sys.argv[1:][1] == \"100\"\nassert sys.argv[1:][2] == \"4\"\n\nprint(\"4\\n40\")\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\n\"\"\"\n\nn1 = int(input())\nn2 = int(input())\nx = int(input())\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\\n\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"4\\n40\"\nassert solution(\"1\\n100\\n4\\n12\") == \"4\\n40\"\nassert solution(\"1\\n100\\n4\\n27\") == \"13\\n103\"\nassert solution(\"1\\n100\\n4\\n36\") == \"10\\n100\"\n\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40\\n'\nprint('The local tests are done. Try to solve the task on a problem box.')\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint('Hooray!')"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\"\"\"\n\n\"\"\"\nfrom fractions import Fraction\nfrom typing import Tuple, List\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\nprint('Hooray!')\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\nprint(solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\"))\nprint(solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\"))\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\"\"\") == \"4.0 3\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\n\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\"\"\"\n\nfrom math import sqrt\n\nstdin = open('./input.txt').read().splitlines()\n\nvertices = stdin[0].split(' ')\nvertices = [int(x) for x in vertices]\n\nn = int(stdin[1])\n\ntrees = []\n\nfor tree in stdin[2:]:\n    trees.append(int(tree))"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\n\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '6.0\\n3'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\nassert solution(\"10\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n\nn = int(input())\n\nlcm = n\n\nwhile True:\n    if n % lcm == 0:\n        break\n    lcm += 1\n\nprint(lcm // n)\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nfor m in range(n, 2, -1):\n    if n * m % m ** 2 == 0:\n        print(m)\n        break\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 4\"\n\"\"\"\n\nimport re\n\n\nclass Blimp:\n    def __init__(self, code: str) -> None:\n        self.code = code\n        self.reg_pattern = re.compile(r'\\d+|[A-Z]+(?=[a-z])|[a-z]+')\n\n    def get_codes(self, reg_pattern: re.Pattern, code: str) -> list:\n        \"\"\"\n        \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0441\u0435\u0445 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430\n        \"\"\"\n        return [i for i in reg_pattern.finditer(code)]\n\n    def get_nums(self, reg_pattern: re.Pattern, code: str) -> list:\n        \"\"\"\n        \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043a\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\n        \"\"\"\n        nums = []\n        for m in reg_pattern.finditer(code):\n            if m.group().isdigit():\n                nums.append(int(m.group()))\n        return nums\n\n    def get_colors(self, code: str) -> list:\n        \"\"\"\n        \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0432\u0441\u0435 \u0446\u0432\u0435\u0442\u0430 \u0438\u0437 \u043a\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\n        \"\"\"\n        return [x.group() for x in re.finditer(r'(?<=\\d)([A-Z]{1})(?=[a-z])', code)]\n\n    def compare_nums(self, nums: list, blimp_nums: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u0435\u043b\n        \"\"\"\n        diff = []\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                diff.append(i)\n        return diff\n\n    def compare_colors(self, colors: list, blimp_colors: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0446\u0432\u0435\u0442\u043e\u0432\n        \"\"\"\n        diff = []\n        for i in range(1, len(colors)):\n            if colors[i] == colors[i-1]:\n                diff.append(i)\n        return diff\n\n    def compare_codes(self, codes: list, blimp_codes: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u043e\u0434\u043e\u0432\n        \"\"\"\n        diff = []\n        for i in range(1, len(codes)):\n            if codes[i]!= codes[i-1]:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_nums(self, nums: list, blimp_nums: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u0435\u043b\n        \"\"\"\n        diff = []\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_colors(self, colors: list, blimp_colors: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0446\u0432\u0435\u0442\u043e\u0432\n        \"\"\"\n        diff = []\n        for i in range(1, len(colors)):\n            if colors[i]!= colors[i-1]:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_codes(self, codes: list, blimp_codes: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u043e\u0434\u043e\u0432\n        \"\"\"\n        diff = []\n        for i in range(1, len(codes)):\n            if codes[i]!= codes[i-1]:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_codes_v2(self, codes: list, blimp_codes: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u043e\u0434\u043e\u0432\n        \"\"\"\n        diff = []\n        for i in range(1, len(codes)):\n            if codes[i]!= codes[i-1]:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_codes_v3(self, codes: list, blimp_codes: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u043e\u0434\u043e\u0432\n        \"\"\"\n        diff = []\n        for i in range(1, len(codes)):\n            if codes[i]!= codes[i-1]:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_codes_v4(self, codes: list, blimp_codes: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u043e\u0434\u043e\u0432\n        \"\"\"\n        diff = []\n        for i in range(1, len(codes)):\n            if codes[i]!= codes[i-1]:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_nums_v2(self, nums: list, blimp_nums: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u0435\u043b\n        \"\"\"\n        diff = []\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_nums_v3(self, nums: list, blimp_nums: list) -> list:\n        \"\"\"\n        \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u0435\u043b\n        \"\"\"\n        diff = []\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                diff.append(i)\n        return diff\n\n    def compare_blimp_nums_v4(self, nums: list, blimp_n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n1\\n1\\nHE GOT AWAY!'\nprint(solution(stdin))"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n3\"\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n2\\n3\"\n\"\"\"\n\nimport sys\n\nrows = sys.stdin.readlines()\n\ncis_codes = set(row.strip() for row in rows)\ncis_codes.discard('N')\ncis_codes.discard('-')\n\nprint('1') if len(cis_codes) == 0 else print(' '.join(str(i) for i in range(1, len(cis_codes)+1)))\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n1\\n1\\n1\\n0\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\nprint(solution(input()))\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\nHE GOT AWAY!\"\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\"\n\nimport re\nfrom typing import Iterator, List, Pattern, Tuple"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n1\\n1\\nHE GOT AWAY!'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"9A-USKOK\") == \"1\"\nassert solution(\"I-NTERPOL\") == \"1\"\nassert solution(\"G-MI6\") == \"1\"\nassert solution(\"RF-KGB1\") == \"1\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 3\\n4 5 4\") == \"6.843530573929037\"\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == \"8.0\"\nassert solution(\"3 3 3\\n4 5 4\") == \"6.843530573929037\"\nassert solution(\"2\\n3 3 3\\n4 5 4\") == \"8.0\"\nassert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\nassert solution(\"2\\n5 10 10\\n4 8 5\") == \"20.0\"\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 5\\n3 3 3\") == \"6.843530573929037\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n3 3 3\n4 5 4''') == '6.843530573929037'\nassert solution('''2\n3 3 3\n4 5 4''') == '6.843530573929037'\nassert solution('''3\n3 3 3\n4 5 4\n4 4 4''') == '6.010140695983878'\nassert solution('''1\n1 1 1\n2 1 2''') == '1.4142135623730951'\n\n'''\n\uc0c1\uc6b4\uc774\ub294 \ub2e4\uc591\ud55c \uacc4\ub2e8 \uac8c\uc784\ub4e4\uc744 \ud558\uace0 \uc788\ub2e4. \uac01 \uacc4\ub2e8\uc740 \uac8c\uc784 \uc2a4\ud14c\uc774\uc9c0\uc5d0\uc11c \ucd5c\ub300 4\uac1c\ub97c \ubc1f\uc544\uc57c \ud55c\ub2e4.\n\uc774\ub54c \uacc4\ub2e8\uc744 \uc62c\ub77c\uac00\uae30 \uc704\ud574\uc120 \ud55c \ubc88\uc5d0 \ud55c \uacc4\ub2e8\uc740 1\uac1c\uc529\ub9cc \uc62c\ub77c\uac08 \uc218 \uc788\ub2e4. \uac01 \uacc4\ub2e8\uc740 \ub9ac\uc2a4\ud2b8\ub85c \uc785\ub825\ubc1b\uc544 \uc788\ub2e4.\n\uac01 \uacc4\ub2e8\uc758 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd5c\ub300 4\uac1c\ub9cc \ubc1f\uc744 \uc218 \uc788\ub2e4. \uacc4\ub2e8\uc774 \ub9ac\uc2a4\ud2b8\uc5d0 \uc874\uc7ac\ud558\uba74\uc11c \ucd5c\ub300 4\uac1c\ub97c \ubc1f\uc740 \uc9c0\uc810\ub4e4\uc758 \uc218\ub294?\n\n\ucd9c\ub825\ud558\ub294 \uac12\uc740 \ucd5c\uc18c \ud544\uc694\ud55c \uae38\uc774\uc774\ub2e4.\n\n-----\ud480\uc774-----\n\uc774\ub7f0 \uacc4\ub2e8 \uac8c\uc784\ub3c4 \uac19\uc740 \uac83\uc774\ub2e4.\n\ub9e8 \ucc98\uc74c\uc5d0 \uc774\ub7f0 \ubb38\uc81c\ub97c \ud480 \ub54c, \ub2e8\uc21c \ud604\uc7ac \uacc4\ub2e8\uc758 \uac1c\uc218\ub97c \ud655\uc778\ud574\uc57c \ud558\ub294 \ubb38\uc81c\uc600\ub2e4.\n\uac00\ub85c\uc640 \uc138\ub85c \ubcbd\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \uacc4\ub2e8\uc744 \uac01\uac01 \ucd5c\ub300 4\uac1c\ub9cc \uc62c\ub77c\uac08 \uc218 \uc788\ub2e4.\n\uadf8 \ub2e4\uc74c\uc5d0, \ub2e4\ub978 \uacbd\ub85c\ub97c \uace0\ub824\ud574\uc57c \ud560 \ubb38\uc81c\ub97c \ud480 \ub54c,\n\ub0a8\uc740 \uacbd\ub85c\ub97c \uac80\uc0ac\ud558\uae30 \uc704\ud574 \uc774\ub7f0 \ubc29\uc2dd\uc73c\ub85c \uacc4\ub2e8\uc744 \ubc1f\uc73c\uba74\uc11c \ub0a8\uc740 \uae38\uc744 \uc138\uc5b4\ubcf4\ub294 \uac83\uc73c\ub85c \uac00\uc815\ud558\uc790.\n\n\uadf8\ub7ec\uba74 \ucd5c\uc18c \ud544\uc694\ud55c \uae38\uc774\ub97c \uad6c\ud560 \uc218 \uc788\ub2e4.\n'''\nimport math"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n0 0 0') == '0.0'\nassert solution('2\\n1 1 1') == '1.414214'\nassert solution('2\\n3 3 3') == '5.0'\nassert solution('2\\n1 3 2') == '2.2360679775'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"2.0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3\\n4 5 4\\n') == '8.0'\nassert solution('3 3 3\\n4 5 6\\n') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 5 6\\n') == '8.0'\n\n\"\"\"\n\nfrom math import acos, sqrt, pi\nfrom decimal import Decimal"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3\\n4 5 4') == '8.0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\\n5 6 7 8\\n\") == \"8.0\"\n\"\"\"\n\nfrom typing import List\nfrom math import sqrt"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24') == '24'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(24) == \"24\"\nassert solution(25) == \"27\"\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\nSolution:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        print(1)\n    else:\n        ans = 10\n        while n > 9 * ans:\n            ans *= 10\n        ans = ans // 10\n        while ans > 0:\n            if n % ans == 0:\n                break\n            ans -= 1\n        ans += 1\n        print(ans)\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nprint('Test pass.')\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n\n\"\"\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n\"\"\"\n\nimport random"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+3+5+6+7+8+9\") == \"188\"\n\"\"\"\n\nfrom collections import deque\nfrom itertools import islice"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n\nprint(solution('1+9+8+4'))\nprint(solution('1+2+3+4+5+6+7+8+9'))\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n\nprint(solution('1 5 2'))\nprint(solution('2 2 -4 5'))\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\n\"\"\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '5 3 6 4'\nassert solution('2 2 -4 5') == '5 -2 4'\n\n-----Test cases-----\nSample Case 1\nSample Input 1\n1 5 2\nSample Output 1\n2 5\n\nSample Case 2\nSample Input 2\n2 2 -4 5\nSample Output 2\n5 -2 4\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\"\"\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\n\"\"\"\n\n\"\"\"\nPseudocode\n\nThis is the pseudocode for implementing the solution to the problem\n\n1. Set the constants\n2. Initialize the values\n3. Iterate through i from 0 to m-1\n    a. Compute p(i)\n    b. Print p(i)\n\n\"\"\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\nassert solution(\"2 2 -4 5\\n\") == \"5 -2 4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 2\n2 1 2 1 2\n\"\"\"\n) == \"\"\"\n2 2 2 1 1\n\"\"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\nassert solution(\"3 1\\n1\") == \"1\"\nassert solution(\"8 3\\n1 2 2 2 2 1 1 1\") == \"1 1 1 2 2 2 2\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\nprint(solution(stdin.strip()))\n\n---\n\nWrite 5 lines of code to test the correctness of solution:\n\n-----Input-----\n5 2\n2 1 2 1 2\n-----Output-----\n2 2 2 1 1\n-----Input-----\n9 3\n1 3 3 3 2 2 2 1 1\n-----Output-----\n1 1 1 3 3 3 2 2 2\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1\\n') == '1 1 1 3 3 3 2 2 2'\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\n\"\"\"\n\nn, m = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\narr.sort(key=lambda x: -(arr.count(x)))\nprint(*arr)\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"38 24\\n\") == \"875\"\nassert solution(\"1 100\\n\") == \"100\"\n\"\"\"\n\na, i = [int(n) for n in input().split()]\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('38 24') == '875'\nprint(solution('1 100'))"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('38 24') == '875'\nprint(solution(input()))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n38 24\n\"\"\"\n) == \"875\"\nprint(\"Test 1 OK\")\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"38 24\") == \"875\"\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('38 24\\n') == '875'\nassert solution('1 100\\n') == '100'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"24 38\") == \"875\"\nassert solution(\"100\") == \"100\"\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('38 24\\n') == '875'\nassert solution('1 100\\n') == '100'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sys.stdin.readlines())) == str(sys.stdin.readlines().split('\\n')[0])\n\nwith open('tests.txt', 'r') as file:\n    sys.stdin = file\n    solution(str(sys.stdin.readlines()))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"123 456\") == \"654\"\nassert solution(\"973 652\") == \"891\"\nassert solution(\"811 654\") == \"851\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"9 734 893\") == \"437\"\nassert solution(\"9 734 893\") == \"437\"\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\nprint(solution(input()))\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"734 893\"), \"437\")\n\n    def test_2(self):\n        self.assertEqual(solution(\"221 231\"), \"132\")"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '734 893'\n) == '437'\nassert solution(\n    '221 231'\n) == '132'\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '734 893'\n    ) == '437'\nassert solution(\n    '221 231'\n    ) == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('4 8') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 131\") == \"programming\"\n\"\"\"\n\nimport sys\n\nl, w = [int(i) for i in sys.stdin.readline().strip().split()]\n\na = (w // 26) * 26\nw = w % 26\n\nb = (l // 26) * 26\nl = l % 26\n\nc = (w // 13) * 13\nw = w % 13\n\nd = (l // 13) * 13\nl = l % 13"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\nSample Case 1:\nl = 11\nw = 131\nSample Case 2:\nl = 7\nw = 96\n\n-----Notes-----\n\n-----Bibliography-----\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('11 96') == 'impossible'\nassert solution('13 96') == 'impossible'\nassert solution('1 96') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming', 'Incorrect output'\nassert solution('7 96') == 'contest', 'Incorrect output'\n\nSample Input 3:\n8 21\nSample Output 3:\nimpossible"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\nl, w = [int(x) for x in input().split()]\ns = set()\nfor i in range(l):\n    s.add(input())\n\nfor i in range(l):\n    for j in range(l):\n        a = input()\n        if len(a) == l and sum(ord(a[i]) - ord('a') + 1 for i in range(l)) == w:\n            print(a)"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 131') == 'programming', 'Test 1 Failed'\nassert solution('7 96') == 'contest', 'Test 2 Failed'\n\n\"\"\"\n\n\nimport sys\nimport string\n\nL, W = sys.stdin.readline().split()\nL, W = int(L), int(W)\n\nd = dict.fromkeys(string.ascii_lowercase, 0)\n\nfor i in range(L):\n    d[sys.stdin.readline().strip()[-1]] = i+1\n\nfor i in d:\n    print(f'{i} {d[i]}')"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 \"X\"') == 'X^\\n--\\nX'\nassert solution('3 12 \"A\"') == 'ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\nBBABABABABAB'\n\n\"\"\"\n\nimport unittest\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(sample_input_part1) == sample_output_part1\nassert solution(sample_input_part2) == sample_output_part2\n\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    2 2 'X'\n    X^\n    --\n    .X\n    --\n    \"\"\"\n) == \"\"\"\n.^\n--\n\n\"\"\"\n\nassert solution(\n    \"\"\"\n    3 12 'A'\n    ABABABABABAC\n    BABABABABABB\n    ABABABABABAB\n    \"\"\"\n) == \"\"\"\nBBABABABABAC\nBBBABABABABB\nBBABABABABAB\n\"\"\"\n\nassert solution(\n    \"\"\"\n    2 2 'X'\n    X^\n    --\n    .X\n    --\n    \"\"\"\n) == \"\"\"\n.^\n--\n\n\"\"\"\n\nassert solution(\n    \"\"\"\n    2 2 'X'\n    X^\n    --\n    .X\n    --\n    \"\"\"\n) == \"\"\"\n.^\n--\n\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 2 \"X\"'), '2 2 \"X\"'\nassert solution('3 12 \"A\"'), '3 12 \"A\"'\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".X\") == \".^\"\n\nSample Input 1:\n2 2 'X'\nX^\n--\n\n.X\n--\nSample Output 1:\n.^\n--\n\nSample Input 2:\n3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\nSample Output 2:\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\nassert solution(\"2 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\") == \"BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\\n\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".X\\n--\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nABABABABABAB\") == \"\\nBBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n\"\"\"\n\n\nimport numpy as np\nimport sys\n\nM, N, C = [int(s) for s in sys.stdin.readline().split()]\nA = np.full((M, N), C, dtype=str)\nB = np.full((M, N), C, dtype=str)\n\nfor i in range(M):\n    for j in range(N):\n        A[i][j] = sys.stdin.readline()[0]\n\nfor i in range(M):\n    for j in range(N):\n        B[i][j] = sys.stdin.readline()[0]"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--') == '.^\\n--\n\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\\nBBBABABABABA\\nBBBBABABABAB\\nBBABABABABAB'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".X\\n--\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n\n'''\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 \\'X\\'\\nX^\\n--\\n\\'.X\\n--\\n') == '\\'.^\\n--'\nassert solution('3 12 \\'A\\'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BABABABABABA\\nBBABABABABAC\\nBBBABABABABA\\nBBABABABABAB'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n7 0 0\"\nassert solution(\"1 1 1\") == \"impossible\"\n\nassert solution(\"1 1 1\") == \"impossible\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2 4 4 14) == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(100 80 60 240) == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\"\n\"\"\"\nSolution:\n1. \n    brute force:\n        create a graph, which is like:\n            A --> B\n        by:\n            A --> B : B has a certain number of legs, then A must have the same number of legs\n        can be written like this:\n            A: has number of legs:\n            B: has number of legs:\n                A: has number of legs:\n                    B: has number of legs:\n                        A: has number of legs:\n                            B: has number of legs:\n                                A: has number of legs:\n                                    B: has number of legs:\n                                        A: has number of legs:\n                                            B: has number of legs:\n                                                A: has number of legs:\n                                                    B: has number of legs:\n                                                        A: has number of legs:\n                                                            B: has number of legs:\n                                                                A: has number of legs:\n                                                                    B: has number of legs:\n                                                                        A: has number of legs:\n                                                                            B: has number of legs:\n                                                                                A: has number of legs:\n                                                                                    B: has number of legs:\n                                                                                        A: has number of legs:\n                                                                                            B: has number of legs:\n                                                                                                A: has number of legs:\n                                                                                                    B: has number of legs:\n                                                                                                        A: has number of legs:\n                                                                                                                B: has number of legs:\n                                                                                                                    A: has number of legs:\n                                                                                                                            B: has number of legs:\n                                                                                                                            A: has number of legs:\n                                                                                                                                    B: has number of legs:\n                                                                                                                                    A: has number of legs:\n                                                                                                                                        B: has number of legs:\n                                                                                                                                        A: has number of legs:\n                                                                                                                                            B: has number of legs:\n                                                                                                                                            A: has number of legs:\n                                                                                                                                                B: has number of legs:\n                                                                                                                                                A: has number of legs:\n                                                                                                                                                    B: has number of legs:\n                                                                                                                                                    A: has number of legs:\n                                                                                                                                                        B: has number of legs:\n                                                                                                                                                        A: has number of legs:\n                                                                                                                                                            B: has number of legs:\n                                                                                                                                                            A: has number of legs:\n                                                                                                                                                                B: has number of legs:\n                                                                                                                                                                A: has number of legs:\n                                                                                                                                                                    B: has number of legs:\n                                                                                                                                                                    A: has number of legs:\n                                                                                                                                                                        B: has number of legs:\n                                                                                                                                                                        A: has number of legs:\n                                                                                                                                                                            B: has number of legs:\n                                                                                                                                                                            A: has number of legs:\n                                                                                                                                                                                B: has number of legs:\n                                                                                                                                                                                A: has number of legs:\n                                                                                                                                                                                    B: has number of legs:\n                                        "
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\n\n\"\"\"\nfrom typing import List\nfrom math import ceil, log2\n\nfrom aoc.int_code_computer import run_int_code\n\nLOG2 = ceil(log2(4))\n\nclass Day5:\n    def __init__(self, program: List[int]):\n        self.program = program\n        self.inputs = []\n        self.outputs = []\n        self.halt = False\n\n    def run(self) -> None:\n        outputs = self.run_int_code(\n            [self.program[i] for i in range(len(self.program))],\n            self.inputs,\n            self.outputs,\n            self.halt\n        )\n        print(outputs)\n\n    def solve(self):\n        pass\n\n    def test_inputs(self):\n        pass\n\n    def test_outputs(self):\n        pass\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n3 0 2\"\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 100 100 100\") == \"impossible\"\nassert solution(\"100 0 0 100\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4\\n3\\n2\\n1') == 'good job'\nassert solution('9\\n7\\n5\\n4\\n3\\n2\\n1') == '1 3 6'\n\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == 'good job'\nassert solution(\"5\\n3\\n7\\n6\\n6\\n8\\n3\") == '1\\n4\\n9'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\") == '1\\n2\\n3\\n4\\n5\\n6\\n7'\nassert solution(\"2\\n1\\n3\\n4\\n5\\n6\\n7\") == '1\\n2\\n3\\n4\\n5\\n6\\n7'\nassert solution(\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == '1\\n2\\n3\\n4\\n5\\n6\\n7'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3\\n2\") == \"1\\n4\\n5\\n6\\n7\\n8\\n9\\n10\"\n\nassert solution(\"9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\"\n\nassert solution(\"2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\"\n\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n9\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\"\n\nassert solution(\"3\\n1\\n2\\n3\") == \"4\\n5\\n6\\n7\\n8\\n9\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job'\nassert solution('9\\n2\\n4\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n') == '1\\n3\\n6\\n12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == 'good job'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == '1\\n3\\n6\\n12'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == '1\\n3\\n6\\n12\\n17'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == '1\\n3\\n6\\n12\\n17'\n\n------\n5\n2\n3\n4\n5\n1\n2\n4\n5\nSample Output:\n3\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\\n9\") == \"1\\n3\\n6\"\nassert solution(\"2\\n4\\n7\\n10\") == \"1\\n3\\n6\"\nassert solution(\"2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\"\nassert solution(\"2\\n3\\n5\\n7\\n9\") == \"1\\n4\\n6\"\nassert solution(\"7\\n3\\n8\\n9\\n11\\n13\\n16\") == \"1\\n4\\n6\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\n\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'good job'\nassert solution('4\\n2') == '1\\n3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '''1\n3\n6\n12'''\nassert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '''1\n3\n6\n12'''\nassert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '''1\n3\n6\n12'''\nassert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '''1\n3\n6\n12'''\nassert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '''1\n3\n6\n12'''\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n3\\n5\\n8\\n10\\n11\\n13\\n14\\n') == 'good job'\nassert solution('3\\n5\\n8\\n10\\n11\\n13\\n14\\n') == '1\\n3\\n6'\nassert solution('8\\n3\\n5\\n8\\n10\\n11\\n13\\n14\\n') == '1\\n3\\n6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == 'good job'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '1\\n3\\n6'\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 1.1 10.3 10.3') == '18.7142857 14.5'\nassert solution('5 0.1 10.3 10.3') == '14.71428570514.5'\nassert solution('5 1 0 10.3 10.3') == '14.71428570514.5'\nassert solution('5 1 1 10.3 10.3') == '14.71428570514.5'\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom math import log\n\na, p, s, v = map(float, input().split())\n\nprint(f\"{(s / (1 + 1 / a)) * (log(a * s) / p):.6f} {1 / ((1 + 1 / a) * log(a * s) / p):.6f}\")\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\nimport math\n\nn, p, s, v = [float(i) for i in stdin.split()]\n\nc = math.sqrt(2)"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom typing import List\nfrom math import ceil\n\nn, p, s, v = [float(x) for x in stdin.split()]\n\nt = ceil((s * (1 + 1 / n)) / v)\nprint(round(t, 6))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"5 0.001 5000 10.5 1000\") == \"2047.81971262 2.05981266e-09\"\n\"\"\"\n\nimport math\n\nPRECISION = 6"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 4\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"10\") == \"55\"\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == result\n\n\"\"\"\n\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 0\nassert solution('2') == 1\nassert solution('3') == 4\nassert solution('4') == 10\nassert solution('5') == 19\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('4') == '13'\nassert solution('5') == '33'\n\n\"\"\"\n\n\"\"\"\nSolution\nThe number of relationships is equivalent to the number of characters.\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\"\n\nN = input()"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('AAA') == 0\nassert solution('ABA') == 1\nassert solution('AAAA') == 0\nassert solution('AAAB') == 2\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n\n-----Note-----\nThis question is similar to the previous one, but the final score is always $n - 1$ due to the fact that the student gets a point for every correct answer, even if that answer is not on his/her correct line.\n\n-----Test cases-----\n2 \u2264 n \u2264 10000\n\n---\n'''"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nB\\nB\\nB\\nA') == '2'\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nA\nA\nA\nA''') == '3'\nprint(\"Test passed\")\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A\\nA\\nA\\nA\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n\"\"\") == \"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\nA\nA\nA\nA''') == '3'\nassert solution('''4\nA\nB\nC\nA''') == '2'\nassert solution('''4\nD\nC\nA\nA''') == '2'\nassert solution('''3\nA\nB\nA''') == '0'\nassert solution('''4\nA\nB\nD\nA''') == '1'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\\nA\\nA\\nA\") == \"3\"\nassert solution(\"A\\nB\\nC\\nD\") == \"0\"\nassert solution(\"A\\nA\\nA\\nB\") == \"0\"\nassert solution(\"B\\nC\\nD\\nA\") == \"0\"\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 3 1\\nx\\ny\\nz\") == \"xxxx\\nyyy\\nz\\n\"\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '.xx..\\nxx..xx\\n..xx..'\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"4 5 1 2\\n.x..\\nx..x\\n.x..\\nx.x.\") == \"..xx..\\nxx..xx\\n..xx..\\nxx..xx\"\nassert solution(\"5 3 1 2\\n.x...\\nx...\\n.x..\\nx..x\\nx.x.\") == \"..xx..\\nxx..xx\\n..xx..\\nxx..xx\\nxx.xx\"\nassert solution(\"4 5 3 2\\n.x..\\nx...\\n.x..\\nx.x\\nx.x.\") == \"..xx..\\nxx..xx\\n..xx..\\nxx..xx\\nxx.xx\"\nassert solution(\"4 5 3 2\\n.x...\\nx...\\n.x..\\nx.x\\nx.x.\") == \"..xx..\\nxx..xx\\n..xx..\\nxx..xx\\nxx.xx\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\nassert solution('4 4 1 1\\n.x.\\nx.x\\n.x.') == '....\\n....\\n....\\n....'\nassert solution('4 3 1 1\\n.x.\\nx.x\\n.x.') == '....\\n....\\n....\\n....'\nassert solution('5 2 1 1\\n.x.\\nx.x\\n.x.') == 'x..x\\n..xx\\nxx..'\nassert solution('5 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx...\"\nassert solution(\"4 3 1 2\\nx.\\nx.x\\n.x.\") == \"xx..xx\"\nassert solution(\"4 3 1 2\\n..x\\n..x\\n..x.\") == \"..xx..\"\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '.xx..\\nxx..xx\\n..xx..'\nassert solution('5 2 2 2\\n.....\\nxx..\\nxx..\\nxx..\\nxx..') == '.....\\nxx.xx\\nxx.xx\\nxx.xx\\nxx.xx'\nassert solution('6 3 2 2\\n..x.\\nxxx\\n..x\\nxxx\\n..x\\nxxx\\n..x') == '..xx..\\nxx.xxx\\n..xx..\\nxxx.xx\\n..xx..\\nxxx.xx\\n..xx..'\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"4 4 3 3\\n.x..\\nx.x\\n.x.\\nx.x\\n\") == \"..xx..\\nxx..xx\\n..xx..\\nx.x..\\n\"\nassert solution(\"3 4 1 1\\n.x..\\n.xx\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\\n\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\nprint(solution(\"F 60 13 20\"))\n\nSample Input:\n2\nF 5 13 20\nB 6 3 20\nSample Output:\n6 32\n19 44\nassert solution(\"F 5 13 20\") == \"6 32\"\nassert solution(\"B 6 3 20\") == \"19 44\"\n\nprint(solution(\"F 5 13 20\"))\nprint(solution(\"B 6 3 20\"))\n\nSample Input:\n3\nF 10 15 17\nF 10 15 20\nB 30 30 23\nSample Output:\n13 17\n13 23\n14 30\nassert solution(\"F 10 15 17\") == \"13 17\"\nassert solution(\"F 10 15 20\") == \"13 23\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''F60 13 20\n''') == '14 20'\nassert solution('''B90 32 6 3\n''') == '3 6 20'\n'''"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin), end=\"\")\n\nInput:\n2\nF 60 13 20\nF 13 60 20\nOutput:\n14 20\n17 10\n\nSolution:"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('F 60 13 20') == '14 20'\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\nassert solution(\"B 50 13 20\") == \"22 21\"\n\nassert solution(\"F 60 13 20\") == \"14 20\"\n\nassert solution(\"B 50 13 20\") == \"22 21\"\n\nassert solution(\"F 60 13 20\") == \"14 20\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'F 60 13 20'\n) == '14 20'\n\nassert solution(\n'F 60 13 20'\n) == '14 20'\n\nassert solution(\n'F 60 13 20'\n) == '14 20'\n\nassert solution(\n'B 60 13 20'\n) == '23 33'\n\nassert solution(\n'B 60 13 20'\n) == '23 33'"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('F 60 13 20') == '14 20'\nassert solution('B 1 13 20') == '23 20'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin='') == 'nope'\nassert solution(stdin='OCT 31') == 'yup'\nassert solution(stdin='OCT 10') == 'yup'\nassert solution(stdin='OCT 10') == 'yup'\nassert solution(stdin='OCT 1') == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('OCT 32', 'FEB 30') == 'nope'\n\"\"\"\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('JAN 31') == 'nope'\nassert solution('JAN 32') == 'nope'\nassert solution('FEB 31') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\n\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('NOV 12') == 'nope'\n\"\"\"\nimport datetime\nfrom datetime import date"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 12\") == \"nope\"\nassert solution(\"DEC 24\") == \"yup\"\n\nprint(solution(\"OCT 31\"))\nprint(solution(\"NOV 12\"))\nprint(solution(\"DEC 24\"))\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"OCT 31\"\n) == \"yup\"\nassert solution(\n    \"SEP 1\"\n) == \"nope\"\n\nimport re"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\nThe solution is correct.\n\"\"\"\n\n\nfrom datetime import datetime"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"JAN 13\") == \"nope\"\nassert solution(\"MAR 9\") == \"nope\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 9\") == \"nope\"\n\nprint(solution(\"SEP 9\"))"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#############\\n#############\\n#.honi#.###\\n#.oker#.###\\n#.nera#.###\\n#.irak###.\\n#############\\n#############\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n\"#.#.#.#.\\n#.#.#.#\\n#.honi#\\n#oker.#\\n#.nera#\\n#irak.#\\n#.#.#.#\\n#.#.#.#\"\n\"\"\"\n\nimport numpy as np\n\nM, N = [int(n) for n in stdin.strip().split(' ')]\nU, L, R, D = [int(n) for n in stdin.strip().split(' ')]\nmatrix = np.array([[str(n) for n in stdin.strip().split('\\n')[1:][i]] for i in range(M)])\n\nfor i in range(U):\n    print('#' * (len(matrix[0]) + 2 * U - 2))\nfor i in range(M):\n    print('#' + '.' * (len(matrix[0]) + 2 * U - 2) + '#')\n    for j in range(L):\n        print('#' + matrix[i][j] + '#', end=' ')\n    for j in range(len(matrix[i]) - R):\n        print(matrix[i][j + R] + '#', end=' ')\n    for j in range(R):\n        print('#' + matrix[i][len(matrix[i]) - 1 - j] + '#', end=' ')\n    for j in range(D):\n        print('#' + '.' * (len(matrix[0]) + 2 * U - 2) + '#')\nfor i in range(U):\n    print('#' * (len(matrix[0]) + 2 * U - 2))\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#####\\n#.honi#\\n#####\\n#.nera#\\n#####\\n#.irak#\\n#####\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#') == '#.#.#.#.\\n#.#.#.#.#\\n#.honi#.\\n#.nera#.\\n#.#irak#\\n#.#.#.#.\\n#.#.#.#.#'\nassert solution('.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#') == '#.#.#.#.#\\n#.#.#.#.#\\n#.honi#.\\n#.nera#.\\n#.#irak#\\n#.#.#.#.#\\n#.#.#.#.#'\nassert solution('.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n#oker#.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#') == '#.#.#.#.#\\n#.#.#.#.#\\n#.honi#.\\n#.nera#.\\n#.#irak#\\n#.#.#.#.#\\n#.#.#.#.#'\n\"\"\"\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nmatrix = []\nfor _ in range(m):\n    matrix.append(input())\n\nstring = ''\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            if j == 0:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '.' * (r + 1) + '#' * (d + 1) + '\\n'\n            elif j == m - 1:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '.' * (r + 1) + '#' * (d + 1) + '\\n'\n            else:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '.' * (r + 1) + '#' + '\\n'\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '.' * (r + 1) + '#' + '\\n'\n        elif i == n - 1:\n            if j == 0:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' * (d + 1) + '\\n'\n            elif j == m - 1:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' * (d + 1) + '\\n'\n            else:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n        else:\n            if j == 0:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n            elif j == m - 1:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n            else:\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n                string += '#' * (u + 1) + '.' * (l + 1) + '\\n'\n                string += matrix[j][i] + '#' * (r + 1) + '.' + '\\n'\n\nprint(string)\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n    \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n\"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \"\\n#.#.#.#\\n#.#.#.#\\n#.honi#\\n#oker#.\\n#.nera#\\n#irak#.\\n#.#.#.#\\n#.#.#.#\\n\"\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'a b'\nassert solution('a b c') == 'a b c'\nassert solution('a b c d') == 'a b c d'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0431\u0430\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0446\u0438\u043a\u043b\u043e\u0432\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\\w denotes word character\nNo slashes are present\n\nSample Output:\n\\w denotes word character\n\"\"\"\n\n\"\"\"\n\u041d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0430\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0439 \u0438\u0433\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0432\u0438\u0448\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u044b\u0447\u043d\u044b\u0445, \u0447\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043d\u0438\u0445.\n\u0415\u0441\u043b\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0432\u0438\u0448\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0435 (\u043d\u0430\u0436\u0430\u0442\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043b\u0430\u0432\u0438\u0448\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0434\u043b\u0438\u043d\u043d\u0435\u0435), \u0442\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0432\u044b\u0434\u0430\u0451\u0442 \u043e\u0448\u0438\u0431\u043a\u0443.\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0435\u0441\u044f\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0432\u0438\u0448\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 True, \u0435\u0441\u043b\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0432\u0438\u0448\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f, \u0438 False - \u0435\u0441\u043b\u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f.\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043a\u043e\u0431\u043e\u043a \u00ab( ) [ ] { }\u00bb.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439.\n\nSample Input:\n(()[{}])\nSample Output:\n6\n\"\"\"\n\n\"\"\"\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u043e\u043d:\n\n\u0417\u0430\u043c\u0435\u043d\u0438\u043b \u0432\u0442\u043e\u0440\u043e\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 g \u043d\u0430 f;\n\u0412\u044b\u0432\u0435\u043b \u043f\u0435\u0440\u0432\u0443\u044e \u0431\u0443\u043a\u0432\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430;\n\u0412\u044b\u0432\u0435\u043b \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0431\u0443\u043a\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435;\n\u0412\u044b\u0432\u0435\u043b \u043f\u0435\u0440\u0432\u044b\u0435 5 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\u0438;\n\u0412\u044b\u0432\u0435\u043b True, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c, \u0438 False - \u0435\u0441\u043b\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f.\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c. \u041f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c \u2014 \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e \u0438\u043b\u0438 \u0444\u0440\u0430\u0437\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e \u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0432"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n\n\"\"\""
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n\"\"\"\n\nimport unittest\n\n\nclass TestGameBoard(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'), 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4')\n        self."
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \".r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White:Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \\\n\"Black:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\n+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\") == \"+---+---+---+---+---+---+---+---+\"\n\"\"\"\n---Task 2:\nWrite a function solution(rows, cols, array) that, given a 3x3 array with the characters \".\", \"r\", \"g\", \"b\", \"y\", returns the rows, cols and array (a string of 9 characters) with the upper-left corner of the array \"y\" replaced by the given rows, cols and array. If given a valid rows, cols and array, the function should return the original rows, cols and array with the upper-left corner of the array \"y\" replaced by the given rows, cols and array.\n\n-----Solution-----\nThe solution is as follows:"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\n\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|...|:::|.n.|:::|...|:::|...|:p:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:::|...|:::|...|:::|...|:::|...|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|...|:::|...|:::|.P.|:::|...|:::|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:P:|...|:::|...|:::|...|:::|...|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n'\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.000000 1.000000') == 'Need more materials!'\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('1.0 3.0') == 'Need more materials!'\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"10.000000 10.000000\") == \"Need more materials!\"\nassert solution(\"3.000000 3.000000\") == \"Diablo is happy!\"\nassert solution(\"5.000000 5.000000\") == \"Need more materials!\"\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('0.000000 4.000000') == 'Need more materials!'\nassert solution('0.000000 4.000000') == 'Need more materials!'\nassert solution('0.000000 0.000000') == 'Diablo is happy!'"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.1234567 1.3456789\") == \"Need more materials!\"\n\n\"\"\"\nimport math\n\nA, N = map(float, input().split())"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"0.5 4.5\") == \"Need more materials!\"\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">1.0 1.0\") == \"Need more materials!\"\nassert solution(\">1.0 0.0\") == \"Diablo is happy!\"\n\"\"\"\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.250000 5.000000\") == \"Need more materials!\"\nassert solution(\"0.2 1.7\") == \"Need more materials!\"\nassert solution(\"0.1 1.1\") == \"Need more materials!\"\n\nSample Input:\n2.000000 5.000000\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.900000 5.100000\nSample Output:\nNeed more materials!\n\nSample Input:\n2.599998 5.499997\nSample Output:\nNeed more materials!\n\nSample Input:\n2.800000 5.100000\nSample Output:\nNeed more materials!\n\nSample Input:\n2.100000 5.9998\nSample Output:\nNeed more materials!\n\nSample Input:\n2.099998 5.9998\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.100000 5.099998\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.499998 5.499998\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899998 5.899998\nSample Output:\nNeed more materials!\n\nSample Input:\n2.699998 5.899998\nSample Output:\nNeed more materials!\n\nSample Input:\n2.900001 5.899998\nSample Output:\nNeed more materials!\n\nSample Input:\n2.900001 5.799998\nSample Output:\nNeed more materials!\n\nSample Input:\n2.900001 5.899996\nSample Output:\nNeed more materials!\n\nSample Input:\n2.900001 5.899995\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.899996\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.799997 5.899996\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899997 5.899996\nSample Output:\nNeed more materials!\n\nSample Input:\n2.799997 5.899996\nSample Output:\nNeed more materials!\n\nSample Input:\n2.900001 5.899996\nSample Output:\nNeed more materials!\n\nSample Input:\n2.799997 5.899995\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.900001 5.799998\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899997 5.799998\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.799997 5.799997\nSample Output:\nNeed more materials!\n\nSample Input:\n2.900001 5.799997\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899997 5.799997\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.799997 5.899996\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899997 5.899996\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899997 5.899995\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899995\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899995\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.899994\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899994\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.899994\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899993\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899993\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.899993\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899992\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899992\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.899992\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899992\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899991\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899991\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.899991\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.899991\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nDiablo is happy!\n\nSample Input:\n2.899996 5.89999\nSample Output:\nNeed more materials!\n\nSample Input:\n2.89999"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 1 10 2 1') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"100 1 100 2 1\") == \"use the stairs\"\nassert solution(\"100 1 1000 2 1\") == \"use the stairs\"\nassert solution(\"100 1 1000 2 1\") == \"use the stairs\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"10 1 10 2 1\"\n) == \"6\"\nassert solution(\n    \"10 1 10 1 1\"\n) == \"use the stairs\"\n\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 10 2 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"use the stairs\"\nassert solution(\"6 8 9 13 14 15\") == \"3\"\nassert solution(\"3 5 2 9 6 1 1\") == \"use the stairs\"\nassert solution(\"2 3 7 5 2\") == \"10\"\nassert solution(\"4 4 4 4 1\") == \"2\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"1 1 2 1 1\") == \"use the stairs\"\nassert solution(\"1 1 10 1 1\") == \"use the stairs\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"1 10 1 1 1\") == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('4 3 4 1 2') == 'use the stairs'\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10 1 10 2 1) == 6\n\"\"\"\n\nf, s, g, u, d = [int(num) for num in input().split(' ')]\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 1 10 2 1''') == '6'\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\nassert solution('''3\n500\n120\n75''') == '89.06666666666666'\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8\\n89.06666666666666'\n\nassert solution(\"3\\n499\\n120\\n75\") == '128.8\\n89.06666666666666'\n\nassert solution(\"3\\n500\\n120\\n75\\n500\\n120\\n75\") == '128.8\\n89.06666666666666'\n\nassert solution(\"3\\n499\\n120\\n75\\n500\\n120\\n75\") == '128.8\\n89.06666666666666'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\n\nassert solution('''5\n1500\n500\n150\n100\n200\n''') == '0.72'\n\nassert solution('''7\n1000\n2000\n3000\n5000\n7000\n10000\n11000''') == '0.46'\n\nassert solution('''6\n5\n1\n1\n2\n3\n2\n3\n3\n4\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n6\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"2\\n125\\n125\") == \"128.0\"\nassert solution(\"3\\n125\\n125\\n125\") == \"128.0\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8\\n89.06666666666666'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n500\n120\n75\"\"\") == \"128.8\"\nassert solution(\"\"\"1\n10\"\"\") == \"10.0\"\nassert solution(\"\"\"2\n10\n10\"\"\") == \"10.0\"\nassert solution(\"\"\"3\n10\n10\n10\"\"\") == \"10.0\"\nassert solution(\"\"\"6\n10\n10\n10\n10\n10\n10\"\"\") == \"10.0\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"2\\n120\\n75\") == \"89.0\"\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\\n5 7 1\\n3 4 8\\n5 1 5\\n7 8 6\\n3 8 9\") == \"33.0\"\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"5\\n333\\n711\\n832\\n335\\n8\") == \"132.3\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"5\\n100\\n100\\n50\\n50\\n20\") == \"41.6\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0.0\"\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\n----------------\nSample Input:\n6\n50 45 70 94 86 136\nSample Output:\n0\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n----------------\n5\n1 45 65 84 346\nSample Output:\n4\n----------------\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 45 65 84 346') == 4\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == 4\nassert solution(\"5\\n20 40 10 20\") == 0\nassert solution(\"5\\n0 4 6 8 10\") == 2\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Iterator\n\n@dataclass\nclass Push:\n    day: int\n    days_since_last: int = field(default=0)\n\n    def update(self, day: int, days_since_last: int):\n        self.day = day\n        self.days_since_last = days_since_last"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5\\n1 45 65 84 346'\n) == '4'"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_1) == answer_1\nassert solution(input_2) == answer_2\nassert solution(input_3) == answer_3\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\nsolution([line.strip() for line in fileinput.input()])\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == 4\n\n\"\"\"\n\nn = int(input())\nd = [int(input()) for _ in range(n)]\n\ncnt = 0\nfor i in range(n):\n    if d[i] % 365 == 0:\n        cnt += d[i] // 365\n    else:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 45 65 84 346') == 4\n\"\"\"\n\nimport os\n\nfrom helpers import solution\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n\"\"\"\nimport unittest\n\nfrom collections import defaultdict"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nprint(solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\")\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('6 5\\n######\\n#P.T#\\n#..G#\\n######') == '0'\nassert solution('8 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '2'\n\n\"\"\""
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n\nprint(solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\"))\n\nassert solution(\"5 5\\n#####\\n#..#\\n#..#\\n#..#\\n#####\") == \"1\"\n\nprint(solution(\"5 5\\n#####\\n#..#\\n#..#\\n#..#\\n#####\"))\n\nassert solution(\"5 5\\n#####\\n#G.#\\n#..#\\n#..#\\n#..#\\n#####\") == \"1\"\n\nprint(solution(\"5 5\\n#####\\n#G.#\\n#..#\\n#..#\\n#..#\\n#####\"))\n\nassert solution(\"7 10\\n#############\\n#G.T#.#.#.#.#\\n#.##T.#.#.#.#\\n#.#.##.#.#.#\\n#.##.#.T.#.#\\n#.#.##.##.#\\n#.#.##.#.#.#\\n#.#.######.#\\n#.#####.##.\\n#.....#.#.#\\n#.....#...#\\n#...#.#####\\n#############\") == \"1\"\n\nprint(solution(\"7 10\\n#############\\n#G.T#.#.#.#.#\\n#.##T.#.#.#.#\\n#.#.##.#.#.#\\n#.##.#.T.#.#\\n#.#.##.##.#\\n#.#.##.#.#.#\\n#.#.######.#\\n#.#####.##.\\n#.....#.#.#\\n#.....#...#\\n#...#.#####\\n#############\"))\n\nassert solution(\"8 9\\n#####G####\\n#.....#.#.\\n#.....#.#.\\n#.....#.#.\\n#..#T.#.#.\\n#.....#.#.\\n#.....#.#.\\n#.....#.#.\\n#..#.#.#.#\\n#####...#.\\n#######G#G\\n#######...\\n#######G#G\\n#######G#G\") == \"3\"\n\nprint(solution(\"8 9\\n#####G####\\n#.....#.#.\\n#.....#.#.\\n#.....#.#.\\n#..#T.#.#.\\n#.....#.#.\\n#.....#.#.\\n#.....#.#.\\n#..#.#.#.#\\n#####...#.\\n#######G#G\\n#######...\\n#######G#G\\n#######G#G\"))"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == 1\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n#P\\n.G\\n..\") == 2\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == 5\n\nSolution\nA variation of the Chinese puzzle \"Dancing Monkey\" (https://www.youtube.com/watch?v=5BzvjYRgCiE)\n\nRating\n1 star:  1\n2 stars: 5\n3 stars: 10\n4 stars: 15\n5 stars: 20\n6 stars: 25\n\nThe rating of a dance is the number of moves performed in the sequence.\n\nThe dance is described by a grid with $N$ rows and $M$ columns. Each character in the grid is either a \u2018$\u2019, denoting the dancer is seen in this position, or a \u2018_\u2019, denoting the dancer is not seen in this position. When there is a single blank column, that denotes a frame is completed and the dancer has completed one move, where a blank column is defined to contain only \u2018_\u2019.\n\n-----Input-----\nThe first line contains two integers $N$ and $M$. It is guaranteed that $1\\leq N, M\\leq 2000$.\n\nThe next $N$ lines contains $M$ characters each. It is guaranteed that each character is either \u2018_\u2019or \u2018$\u2019. It is also guaranteed that both the first and last columns are non-blank, and no two consecutive columns are both blank.\n-----Output-----\nOutput a single integer $T$, the rating of the dance, i.e. number of dance moves in the recording.\n\n-----Examples-----\nSample Input:\n5 50\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$_$$\n_$$_$$_$$_$$_$$_$$_$$_"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\") == 5\n\nassert solution(\"13 50\\n____$___$______$___$___$_$_____$____$___$_$___$_____$____\\n___$___$______$___$___$_$___$_$___$_____$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___$___$___$___$____\\n___$___$______$___$___$_$___$_$___$_$___"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == 5\n\nassert solution('13 50\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$___$$___$$$____$$___$$$\\n__$$$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\n---- Problem ----\nIn this challenge, you will learn how to solve problems on HackerRank in Python.\n\nYou will need to complete different parts of the provided code.\n\nYour code will be run on our unseen and unseen tests.\n\nPlease save regularly\n\n---- Part 1 ----\nYou have been given a String S.\n\nYour task is to print the string in a zig zag pattern.\n\nYou will be given a number N.\n\nThis will correspond to the number of rows you need to print.\n\nNote: There will be no space in between words.\n\nInput Format\n\nThe first line contains a string, S.\nThe second line contains an integer, N.\n\nConstraints\n\n1<= |S| <= 10^6\n1 <= N <= 10^6\n\nOutput Format\n\nPrint the string in a zig zag pattern.\n\nSample Input 0\n\nHacker\n3\nSample Output 0\n\nH   a   c\n k   e   r\n\"\"\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\nprint(\"Test Completed\")\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$_\\n___$____$___$_____$___$____$____$_____$___$____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == '5'\n\n\"\"\"\n\nimport numpy as np\n\nwith open(\"input.txt\", \"r\") as f:\n    grid = np.array([[letter for letter in line] for line in f.read().strip().split(\"\\n\")])\n\nprint(grid)\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == answer, f'Your answer: {answer}, should be: {solution(stdin)}'"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n') == 5\n\n'''\n\nimport re"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$__$___$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n') == 5\n\n-----Notes-----\nIf you like the code and want to use it, you can download it and use it however you want.\n\nIf you like the code, feel free to star it on GitHub and I'll add your name to the CodeSnakeREADME.md as a contributor.\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n\"\"\"\n) == \"5\"\n\n\"\"\"\n6 4\n$$___$$___$$\n$$___$$___$$\n$$___$$___$$\n$$___$$___$$\n\"\"\"\n\nassert solution(\n\"\"\"\n6 4\n_$$___$$___$$\n___$$___$$___\n__$$___$$___$$\n___$$___$$___$$\n\"\"\"\n) == \"0\"\n\n\"\"\"\n3 3\n_$$___$$___$$\n___$$___$$___\n__$$___$$___$$\n\"\"\"\n\nassert solution(\n\"\"\"\n3 3\n_$$___$$___$$\n___$$___$$___\n__$$___$$___$$\n\"\"\"\n) == \"3\"\n\n\"\"\"\n3 3\n_$$___$$___$$\n___$$___$$___\n__$$___$$___$$\n\"\"\"\n\nassert solution(\n\"\"\"\n3 3\n_$$___$$___$$\n___$$___$$___\n__$$___$$___$$\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('i can\\'t speak pig latin') == 'iay ayay naytay sokay ufay canyay ayay olmayay otay ayay indlay'\nassert solution('i cant speak pig latin') == 'iay ayay naytay sokay ufay canyay ayay olmayay otay ayay indlay'\nassert solution('i can\\'t speak') == 'iay ayay naytay sokay ufay canyay ayay olmayay otay ayay indlay'\nassert solution('i can speak') == 'iay ayay naytay sokay ufay canyay ayay olmayay otay ayay indlay'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i cant speak\") == \"iay ay cant speak\"\nassert solution(\"you can speak pig latin\") == \"uyay oay cansyay ogpay igpay atinlay\"\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\"\n\nvowels = set('aeiou')\nconsonants = set('bcdfghjklmnpqrstvwxyz')"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i dont speak pig latin\") == \"iyay antdway eadnay oodspay igpay atinlay\"\nassert solution(\"i dont speak much pig latin\") == \"iyay antdway eadnay oodspay igpay atinlay\"\nassert solution(\"i cant speak much pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i can speak pig latin\") == \"iyay ayspay ayay igpay atinlay\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\nsolution.__annotations__ == {'stdin': str}\n\n-----Notes-----\nThe input is not case sensitive.\nDo not translate the word, \"pig\", or \"ig\" or \"ing\" to \"igpay\".\nA word may not be split in more than one step.\nAssume that every word has a vowel.\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('d') == 'd'\nassert solution('ki') == 'kiay'\nassert solution('i cant') == 'iayay anctay'\nassert solution('i cant speak') == 'iayay anctsay otay sayay-speak'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\"\"\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"4\\n4\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\nassert solution(\"4\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\nassert solution(\"5\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\n\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nprint(\"All tests passed.\")\n-----"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n1\nlalal\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\nassert solution(\"\"\"\n1\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"\n1\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\nassert solution(\"\"\"\n1\n1\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\"\"\"\n\nfrom collections import OrderedDict\nfrom typing import List\nimport sys\n\nclass Solution:\n\n    def __init__(self):\n        self.menus = OrderedDict()\n\n    def solution(self, stdin: str) -> str:\n        if stdin.strip() == '':\n            return 'Anywhere is fine I guess'\n        for i in range(int(stdin.split('\\n')[0])):\n            self.menus[i+1] = []\n        for i in range(int(stdin.split('\\n')[0])+1, len(stdin.split('\\n'))):\n            self.menus[int(stdin.split('\\n')[i].split('\\t')[0])] = stdin.split('\\n')[i].split('\\t')[1:]\n        return self.find_combination()\n\n    def find_combination(self):\n        for menu_key, menu_items in self.menus.items():\n            if 'pea soup' in menu_items and 'pancakes' in menu_items:\n                return menu_key\n        return 'Anywhere is fine I guess'"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\nq\\npotatoes\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('3 0 6') == '1'\nassert solution('1 5 10') == '1'\nassert solution('0 1 2') == '0'"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"1 0 100\") == \"100\"\nassert solution(\"5 0 1\") == \"0\"\nassert solution(\"5 0 5\") == \"1\"\nassert solution(\"1 0 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 0 15') == '3'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('5 1 15') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 0 15') == '3'\nprint(solution(input()))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\n\nimport math\n\na, b, h = map(int, stdin.split())\nprint(math.ceil(h / (a - b)) - 1)\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('10 0 20') == '4'\nassert solution('15 0 30') == '1'\nassert solution('2 3 2') == '0'\nassert solution('10 0 20') == '4'\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 0 15') == 3\n\"\"\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 2\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n\na, b, h = stdin.readline().split(' ')\na, b, h = int(a), int(b), int(h)\n\ntot_dur = 0\nwhile h > tot_dur:\n    tot_dur += a\n    h -= b\n    tot_dur += b\n\nprint(tot_dur)\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 15') == '19'\n\"\"\"\n\na,b = map(int, input().split())\nprint(int((a+b)/2))\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 15') == '19'\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 15') == '19'\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 15') == '19'\n\"\"\"\n\n\"\"\"\nThe Birthday Dilemma\nA group of N people wants to meet and each person has a unique number. Since some people are late, the meeting is not held for that person. The solution is to meet N - 1 people. The problem is to find the number of ways in which the N-1 people can meet. For example, given N = 5, and given that each person has a unique number, the 5 people can meet in 12 ways:\n\n1 2 3 4 5\n1 2 4 5\n1 3 4 5\n1 4 5\n2 3 4 5\n2 4 5\n3 4 5\n4 5\nThere is a function, solution(N, M) which returns the number of ways in which the N people can meet who are not late. For example, solution(5, 15) returns 12.\n\nYour task is to determine the number of ways in which N people can meet, who are not late, given that each person has a unique number.\n\n-----Input-----\nThe first and only line of input contains two integers N and M separated by a space. N represents the number of people, and M represents the number of people who are late.\n\n-----Output-----\nPrint the number of ways in which N people can meet who are not late.\n\n-----Examples-----\nSample Input:\n5 15\nSample Output:\n12\nSolution(5, 15) -> 12\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 15') == '19'\nprint(solution(\"11 15\"))\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n\nR1, S = input().split()\n\nR2 = (int(R1) + int(S)) // 2\nprint(R2)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"Yes\"\nassert solution(\"East West South\") == \"Yes\"\nassert solution(\"East North West\") == \"Yes\"\nassert solution(\"North West East\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"South West East\"\n) == \"Yes\"\n\nassert solution(\n    \"South East West\"\n) == \"No\"\n\nassert solution(\n    \"North East West\"\n) == \"No\"\n\nassert solution(\n    \"North West East\"\n) == \"Yes\"\n\nassert solution(\n    \"South West West\"\n) == \"Yes\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('South West East') == 'Yes'\n\nassert solution('South East West') == 'No'\n\nassert solution('South West West') == 'No'\n\nassert solution('South East East') == 'Yes'\n\nassert solution('North West East') == 'No'"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"Yes\"\nassert solution(\"East West South\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('South West East') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West South East\") == \"No\"\n\nassert solution(\"South West East\") == \"Yes\"\nassert solution(\"West South East\") == \"No\"\n\nassert solution(\"South West East\") == \"Yes\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North West South\") == \"No\"\n\"\"\"\n\na, b, c = (input().split())"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"North West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\nprint(\"All tests passed.\")\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"East North East\") == \"No\"\nassert solution(\"West East North\") == \"Yes\"\n\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfrom typing import List\n\nclass T:\n    def __init__(self,line: str):\n        self.s = line\n        self.splitted = self.s.split(\" \")\n\n    def __str__(self) -> str:\n        return self.s\n\n    def __repr__(self) -> str:\n        return self.s\n\nclass Solution(ABC):\n\n    @abstractmethod\n    def is_possible(self, t: T) -> bool:\n        pass\n\nclass Solution1(Solution):\n\n    def is_possible(self, t: T) -> bool:\n        if self.is_possible_for_north(t):\n            return True\n        if self.is_possible_for_south(t):\n            return True\n        if self.is_possible_for_east(t):\n            return True\n        if self.is_possible_for_west(t):\n            return True\n        return False\n\n    def is_possible_for_north(self, t: T) -> bool:\n        if t.splitted[0] == \"South\" and t.splitted[2] == \"East\":\n            return False\n        return True\n\n    def is_possible_for_south(self, t: T) -> bool:\n        if t.splitted[0] == \"North\" and t.splitted[2] == \"West\":\n            return False\n        return True\n\n    def is_possible_for_east(self, t: T) -> bool:\n        if t.splitted[0] == \"West\" and t.splitted[2] == \"South\":\n            return False\n        return True\n\n    def is_possible_for_west(self, t: T) -> bool:\n        if t.splitted[0] == \"East\" and t.splitted[2] == \"North\":\n            return False\n        return True\n\n\nclass Solution2(Solution):\n\n    def is_possible(self, t: T) -> bool:\n        if self.is_possible_for_north(t):\n            return True\n        if self.is_possible_for_south(t):\n            return True\n        if self.is_possible_for_east(t):\n            return True\n        if self.is_possible_for_west(t):\n            return True\n        return False\n\n    def is_possible_for_north(self, t: T) -> bool:\n        if t.splitted[0] == \"South\" and t.splitted[2] == \"East\":\n            return False\n        return True\n\n    def is_possible_for_south(self, t: T) -> bool:\n        if t.splitted[0] == \"North\" and t.splitted[2] == \"West\":\n            return False\n        return True\n\n    def is_possible_for_east(self, t: T) -> bool:\n        if t.splitted[0] == \"West\" and t.splitted[2] == \"South\":\n            return False\n        return True\n\n    def is_possible_for_west(self, t: T) -> bool:\n        if t.splitted[0] == \"East\" and t.splitted[2] == \"North\":\n            return False\n        return True\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('South West East') == 'Yes'\n\nSample Input:\nSouth West South\nSample Output:\nYes\n\nSample Input:\nSouth West East\nSample Output:\nNo\n\nSample Input:\nWest East South\nSample Output:\nNo\n\n'''\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\nabcde\\nfghij\") == \"ghij\"\nassert solution(\"4 5\\nabcde\\nfghij\") == \"jklm\"\nassert solution(\"5 8\\nabcde\\nfghij\") == \"jklnop\"\n\"\"\"\n\n\n\nn, m = map(int, stdin.readline().split())\nciphertext = list(stdin.readline().strip())\nplaintext = list(stdin.readline().strip())\n\nfor i in range(m - n):\n    if plaintext[i] == ciphertext[i]:\n        continue\n    else:\n        plaintext[i] = chr((ord(plaintext[i]) - ord(ciphertext[i]) + 26) % 26 + ord('a'))\n\nprint(''.join(plaintext))"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 16\\nagain\\npirpumsemoystoal\\n\") == \"marywasnosyagain\"\nassert solution(\"5 16\\nbanana\\npirpumsemoystoal\") == \"marywasnosybanana\"\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nprint(solution(\"5 16\\nagain\\npirpumsemoystoal\"))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5 16\\n'\n    'again\\n'\n    'pirpumsemoystoal'\n) =='marywasnosyagain'\n\"\"\"\n\nimport string"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\nprint(solution(\"4 16\\nagain\\npirpumsemoystoal\"))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''5 16\nagain\npirpumsemoystoal''') =='marywasnosyagain'\nprint('Test passed')\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 16\\n again\\n pirpumsemoystoal') =='marywasnosyagain'\nprint(solution(stdin))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(12345) == 'Either'\nassert solution(5959) == 'Odd'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 'Odd'\n\n-----Hint-----\nUse a for loop and the modulo operator % to solve this problem.\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('4') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"2\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"9\") == \"Even\"\nassert solution(\"10\") == \"Odd\"\nassert solution(\"12\") == \"Even\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Even'\nassert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\n\nassert solution('') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == 'Odd'\nassert solution('12') == 'Even'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Either'\nassert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nn = int(input())\nfor _ in range(n):\n    x = int(input())\n    c = 0\n    while x:\n        c += 1\n        x //= 10\n    print(c)\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n314\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"314\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5926\") == \"5\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint(solution(stdin))\n\n---Problem---\nWalking through a forest, there is a magical fairy who can help you if you fall into some trouble. Unfortunately, the fairies have something to eat, which makes them more hungry than usual, so they will only help you if you can satisfy their appetite.\n\nTo help you, the fairy provides you with a map of the forest. On the map, each cell can be either \"empty\" (denoted by \".\"), \"tree\" (denoted by \"#\"), or \"rock\" (denoted by \"X\"). A cell containing a tree (#) can be walked through while a cell containing a rock (X) can\u2019t.\n\nThe map of the forest is represented as a matrix of characters. To walk through the matrix, you must start at the top left cell and go left, down, and then right until you reach the bottom right cell.\n\nYour task is to find the shortest route through the forest map that allows you to eat the maximum number of fairies. To eat a fairy, you must travel through a cell containing a tree (#). You must choose the route that walks through the fewest such trees. If multiple routes lead to the same number of trees, choose the route with the highest score.\n\nThe score of a route is the number of trees (counting only those cells containing a tree (#)) multiplied by the number of rocks (counting only those cells containing a rock (X)).\n\nNote that rocks have no effect on the route score, but walking through a cell containing a rock does not count as walking through a tree.\n\nThe top left cell is always a rock, the bottom right cell is always empty, and there is exactly one tree in the forest.\n\nInput Format\nThe first line contains an integer $t$, the number of test cases.\n\nEach of the $t$ subsequent lines contains an integer $n$, the number of rows and columns of the forest map.\n\nConstraints\n1 <= t <= 10\n1 <= n <= 10\n\nOutput Format\nFor each test case, output the shortest route through the forest, or \"impossible\" if no such route is possible.\n\nSample Input\n2\n3\n3\n4\n2\n\nSample Output\n1\nimpossible\nExplanation\nIn the first test case, you can go only left or down to reach the bottom right cell. That's it!\n\nIn the second test case, there are no ways to reach the bottom right cell.\n\n---Problem---\nCompass points can be used to represent a coordinate in a two-dimensional Euclidean space. The points are represented as a sequence of $x$ and $y$ coordinates, where $x$ is the distance from the origin, and $y$ is the distance from the $x$-axis.\n\nThe most common way to represent a point in a two-dimensional space is a tuple of the form $(x, y)$ where $x$ is the distance from the origin, and $y$ is the distance from the $x$-axis. This notation is called the standard coordinate notation.\n\nAnother common way to represent points in a two-dimensional space is the pair of the form $x, y$ where $x$ is the distance from the origin, and $y$ is the distance from the $x$-axis. This notation is called the Cartesian coordinate notation.\n\nYou are given the coordinates of a point on the plane. Your task is to find the shortest distance between this point and the origin.\n\nInput Format\nThe first line contains an integer $t$, the number of test cases.\n\nEach of the next $t$ lines contains a string $s$ containing a sequence of characters that represent the coordinates of a point in the plane. Each character can be either a space or a comma.\n\nConstraints\n1 <= t <= 100\nThe length of each string in the input is between $1$ and $50$, inclusive.\n\nOutput Format\nFor each test case, output the shortest distance from the origin to the point represented by $s$.\n\nSample Input\n2\n,,\n1,1\n\nSample Output\n0.7071067811865475\n1.4142135623730951\n\n---Problem---\nThe area of a circle is defined as $\\pi r^2$. It can be shown that $\\pi = 6$ exactly.\n\nWrite a program that takes the radius of a circle as input and outputs the area.\n\nInput Format\nThe input consists of a single line that contains the radius of the circle.\n\nConstraints\n1 <= radius <= 1000\n\nOutput Format\nOutput the area of the circle. You should output the value of the area with three digits after the decimal point.\n\nSample Input\n5\nSample Output\n78.539\n\n---Problem---\nWe can read a file by passing the file name to the built-in function open() in the following way:\n\nf = open(\"demofile.txt\", \"r\")\nAs you can see, there is no need to close the file at the end. You can do even this:\n\nwith open(\"demofile.txt\", \"r\") as f:\n    f.read()\nThis is because when the block of code is executed, Python will close the file for you automatically.\n\nIf you need to read or write a file, you should always open it with the \"with\" keyword.\n\nAs we will see later, this is the preferred way to open files.\n\nThe argument for the open() function is the file name. A second argument, \"r\", means \"read\". \"w\" would mean \"write\", and so on.\n\n---Problem---\nThe Python language has built-in string classes for many operations, but it is also possible to use the method format() to create formatted strings.\n\nThe method format() takes the passed arguments, formats them, and places them in the string where the placeholders {} are:\n\n>>> '{} can be {}'.format('Strings', 'interpolated')\n'Strings can be interpolated'\n>>> '{0} and {1}'.format('Strings', 'interpolated')\n'Strings and interpolated'\n>>> '{1} and {0}'.format('Strings', 'interpolated')\n'interpolated and Strings'\n>>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', longitude='-115.81W')\n'Coordinates: 37.24N, -115.81W'\n>>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}\n>>> 'Coordinates: {latitude}, {longitude}'.format(**coord)\n'Coordinates: 37.24N, -115.81W'\n>>> 'X: {0[0]};  Y: {0[1]}'.format([3, 4])\n'X: 3;  Y: 4'\n>>>\n\nNote: The ** before the value of a dictionary is used to unpack a dictionary. In the above example, **coord means that the contents of the dictionary coord should be unpacked into keyword arguments.\n\n---Problem---\nYou are given a DNA sequence: a string consisting of characters A, C, G, and T. Your task is to find the longest repetition in the sequence. This is a maximum-length substring containing only one type of character.\n\nInput Format\nThe only argument given is the string sequence, s.\n\nOutput Format\nReturn the length of"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nn = int(input())\nfor _ in range(n):\n    print(len(str(int(input()))))"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n314\n1\n5926\n5\n35897\n\"\"\") == \"\"\"3\n1\n4\n1\n5\"\"\"\n\nprint(solution(\"\"\"5\n314\n1\n5926\n5\n35897\n\"\"\"))"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 5\\n\"\n                \"c t\\n\"\n                \"i r\\n\"\n                \"k p\\n\"\n                \"o c\\n\"\n                \"r o\\n\"\n                \"t e\\n\"\n                \"t f\\n\"\n                \"u h\\n\"\n                \"w p\\n\"\n                \"we we\\n\"\n                \"can the\\n\"\n                \"work people\\n\"\n                \"it of\\n\"\n                \"out the\") == \"yes\"\nassert solution(\"9 5\\n\"\n                \"c t\\n\"\n                \"i r\\n\"\n                \"k p\\n\"\n                \"o c\\n\"\n                \"r o\\n\"\n                \"t e\\n\"\n                \"t f\\n\"\n                \"u h\\n\"\n                \"w p\\n\"\n                \"we we\\n\"\n                \"can the\\n\"\n                \"work people\\n\"\n                \"it of\\n\"\n                \"out the\") == \"no\"\nassert solution(\"9 5\\n\"\n                \"c t\\n\"\n                \"i r\\n\"\n                \"k p\\n\"\n                \"o c\\n\"\n                \"r o\\n\"\n                \"t e\\n\"\n                \"t f\\n\"\n                \"u h\\n\"\n                \"w p\\n\"\n                \"we we\\n\"\n                \"can the\\n\"\n                \"work people\\n\"\n                \"it of\\n\"\n                \"out the\") == \"no\"\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\ntranslations = []\nfor _ in range(N):\n    translations.append(tuple(sys.stdin.readline().strip().split()))\n\nfor line in sys.stdin:\n    a, b = line.strip().split()\n    # print(a, b)\n    print('yes' if len(a) == len(b) and len(set(a) & set(b)) == len(set(a)) and len(set(b) & set(a)) == len(set(b)) else 'no')"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\nc t\\ni r\\nk p\\no c\\n r o\\nt e\\nt f\\n u h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes'\n\nassert solution('5 2\\nc t\\ni r\\nk p\\no c\\n r o\\nt e\\nt f\\n u h\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'no'\n\nassert solution('5 1\\nc t\\ni r\\nk p\\nnot c\\n r o\\nt e\\nt f\\n u h\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes'\n\nassert solution('5 1\\nc t\\ni r\\nk p\\nnot c\\n r o\\nt e\\nt f\\n u h\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5\\n'\n    'c t\\n'\n    'i r\\n'\n    'k p\\n'\n    'o c\\n'\n    'r o\\n'\n    't e\\n'\n    't f\\n'\n    'u h\\n'\n    'w p\\n'\n    'we we\\n'\n    'can the\\n'\n    'work people\\n'\n    'it of\\n'\n    'out the') == 'yes'\nassert solution('9 5\\n'\n    'c t\\n'\n    'i r\\n'\n    'k p\\n'\n    'o c\\n'\n    'r o\\n'\n    't e\\n'\n    't f\\n'\n    'u h\\n'\n    'w p\\n'\n    'we we\\n'\n    'can the\\n'\n    'work people\\n'\n    'it of\\n'\n    'out the') == 'yes'\nassert solution('9 5\\n'\n    'c t\\n'\n    'i r\\n'\n    'k p\\n'\n    'o c\\n'\n    'r o\\n'\n    't e\\n'\n    't f\\n'\n    'u h\\n'\n    'w p\\n'\n    'we we\\n'\n    'can the\\n'\n    'work people\\n'\n    'it of\\n'\n    'out the') == 'no'\nassert solution('9 5\\n'\n    'c t\\n'\n    'i r\\n'\n    'k p\\n'\n    'o c\\n'\n    'r o\\n'\n    't e\\n'\n    't f\\n'\n    'u h\\n'\n    'w p\\n'\n    'we we\\n'\n    'can the\\n'\n    'work people\\n'\n    'it of\\n'\n    'out the') == 'no'\nassert solution('9 5\\n'\n    'c t\\n'\n    'i r\\n'\n    'k p\\n'\n    'o c\\n'\n    'r o\\n'\n    't e\\n'\n    't f\\n'\n    'u h\\n'\n    'w p\\n'\n    'we we\\n'\n    'can the\\n'\n    'work people\\n'\n    'it of\\n'\n    'out the') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\n\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nsolution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nprint(solution('abcd\\nefgh\\nijkl\\nmnop\\nqrst\\nuvw\\nxyz'))\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == '''yes\nno\nno\nyes\nyes\n'''\nprint(solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n'''))"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(None) == None\n\"\"\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 5\\nt c\\ni r\\nk p\\no c\\nor t\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n\") == \"yes\\nno\\nno\\nyes\\nyes\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\n\n\"\"\"\nSolution Approach\n\nFor each pair of words, get the set of translations for each word, and check if they match.\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\r o\\n\\tt e\\n\\tt f\\n\\tu h\\n\\tw p\\n\\twe we\\n\\tcan the\\n\\twork people\\n\\tit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(example1) == \"bunnies\"\nassert solution(example2) == \"5\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\nassert solution(\"1 1\\ncarrots?\\nbunnies\") == 0\nassert solution(\"1 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\") == 2\n\nSample Case #1\nThe first contestant says that he's never won a contest and that he's always won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #2\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #3\nThe first contestant says that he's never won a contest and that he's always won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 1 carrot in this contest.\n\nSample Case #4\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #5\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #6\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #7\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 1 carrot in this contest.\n\nSample Case #8\nThe first contestant says that he's never won a contest and that he's always won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 0 carrots in this contest.\n\nSample Case #9\nThe first contestant says that he's never won a contest and that he's always won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 1 carrot in this contest.\n\nSample Case #10\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #11\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #12\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #13\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #14\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #15\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #16\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #17\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #18\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #19\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #20\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #21\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #22\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #23\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #24\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #25\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #26\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #27\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #28\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #29\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #30\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest.\n\nSample Case #31\nThe first contestant says that he's won a contest and has won a carrot.\n\nThe second contestant says that he's won a contest and has won a carrot.\n\nIn total there are 2 carrots in this contest"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == \"1\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == \"1\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"4 1\\nblondie\\nbunnies\\nholly\\ncarrots?\") == \"3\"\nassert solution(\"4 1\\nblondie\\nbunnies\\nholly\\ncarrots?\") == \"3\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('input.txt').read()) == '7'\n\nimport io\nprint(solution(io.StringIO(open('input.txt').read())))\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    +---+---+---+---+---+---+---+---+\n    |.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n    +---+---+---+---+---+---+---+---+\n    |:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|.n.|:::|...|:::|...|:p:|\n    +---+---+---+---+---+---+---+---+\n    |:::|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|...|:::|.P.|:::|...|:::|\n    +---+---+---+---+---+---+---+---+\n    |:P:|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n    +---+---+---+---+---+---+---+---+\n    |:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n    +---+---+---+---+---+---+---+---+\n    \"\"\"\n) == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\n\"\"\"\nDemo Input:\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|...|...|...|...|...|...|...|...|...|...|\n+----+----+----+----+----+----+----+----+----+----+\n|...|...|..."
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n\"\n                \"|:P:|:r:|:p:|:b:|:q:|:k:|:b:|:n:|\\n\"\n                \"|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n\"\n                \"|:p:|:p:|:P:|:p:|:P:|:P:|:p:|:p:|\\n\"\n                \"|:p:|:P:|:p:|:P:|:p:|:p:|:p:|:P:|\\n\"\n                \"|:P:|:p:|:p:|:p:|:P:|:P:|:p:|:P:|\\n\"\n                \"|:p:|:p:|:p:|:p:|:P:|:p:|:p:|:p:|\\n\"\n                \"|:p:|:p:|:P:|:P:|:p:|:P:|:P:|:p:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:p:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"+---+---+---+---+---+---+---+---+\\n\"\n                \"|r  |:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\n\"\n                \"|:P:|:P:|:P:|:P:|:P:|:P:|:P:|:P:|\\"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"Black: Ke8,Qd8"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|::p|::p|::p|::p|::p|::p|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Qe1,Ra1,Rh1,Bg1,Bf1,Nc1,a2,c2,d2,e2,f2,g2,h2,a3,e4,Black: Kd8,Qe8,Ra8,Rh8,Bg8,Bf8,Nf8,Ng7,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|::p|::p|::p|::p|::p|::p|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qe1,Ra1,Rh1,Bc1"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"Black: Ke8,Qd8"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Kd2,Kd3,Kd4,Kd5,Kd6,Kd7,Kd8,Qd1,Qd2,Qd3,Qd4,Qd5,Qd6,Qd7,Qd8,Ra1,Ra2,Ra3,Ra4,Ra5,Ra6,Ra7,Ra8,Rh1,Rh2,Rh3,Rh4,Rh5,Rh6,Rh7,Rh8,Bc1,Bc2,Bc3,Bc4,Bc5,Bc6,Bc7,Bc8,Bf1,Bf2,Bf3,Bf4,Bf5,Bf6,Bf7,Bf8,Nc1,Nc2,Nc3,Nc4,Nc5,Nc6,Nc7,Nc8,Ng1,Ng2,Ng3,Ng4,Ng5,Ng6,Ng7,Ng8,Nh1,Nh2,Nh3,Nh4,Nh5,Nh6,Nh7,Nh8,a1,b2,c3,d4,e5,f6,g7,h8\"\nassert solution(\"+---+---+---+---+---+---+---+---+\") == \"Black: Kd1,Kd2,Kd3,Kd4,Kd5,Kd6,Kd7,Kd8,Kd1,Kd2,Kd3,Kd4,Kd5,Kd6,Kd7,Kd8,Ra1,Ra2,Ra3,Ra4,Ra5,Ra6,Ra7,Ra8,Rh1,Rh2,Rh3,Rh4,Rh5,Rh6,Rh7,Rh8,Bc1,Bc2,Bc3,Bc4,Bc5,Bc6,Bc7,Bc8,Bf1,Bf2,Bf3,Bf4,Bf5,Bf6,Bf7,Bf8,Nc1,Nc2,Nc3,Nc4,Nc5,Nc6,Nc7,Nc8,Ng1,Ng2,Ng3,Ng4,Ng5,Ng6,Ng7,Ng8,Nh1,Nh2,Nh3,Nh4,Nh5,Nh6,Nh7,Nh8,a1,b2,c3,d4,e5,f6,g7,h8\"\nassert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Kd2,Kd3,Kd4,Kd5,Kd6,Kd7,Kd8,Kd1,Kd2,Kd3,Kd4,Kd5,Kd6,Kd7,Kd8,Ra1,Ra2,Ra3,Ra4,Ra5,Ra6,Ra7,Ra8,Rh1,Rh2,Rh3,Rh4,Rh5,Rh6,Rh7,Rh8,Bc1,Bc2,Bc3,Bc4,Bc5,Bc6,Bc7,Bc8,Bf1,Bf2,Bf3,Bf4,Bf5,Bf6,Bf7,Bf8,Nc1,Nc2,Nc3,Nc4,Nc5,Nc6,Nc7,Nc8,Ng1,Ng2,Ng3,Ng4,Ng5,Ng6,Ng7,Ng8,Nh1,Nh2,Nh3,Nh4,Nh5,Nh6,Nh7,Nh8"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|rR|:::|.bB|:qK|.rR|:::|.nN|:bB|\n+---+---+---+---+---+---+---+---+\n|:rP|.Pp|:rP|.Pp|:rP|.Pp|:::|.Pp|\n+---+---+---+---+---+---+---+---+\n|.Pp|:::|.Pp|:::|.Pp|:::|.Pp|:::|\n+---+---+---+---+---+---+---+---+\n|:.R|.nB|:bB|:qK|.bB|:::|.Rr|.kR|\n+---+---+---+---+---+---+---+---+\n|.rR|:::|.rR|:::|.rR|:::|.nN|:bB|\n+---+---+---+---+---+---+---+---+\n|:.R|.nB|:bB|:qK|.bB|:::|.Rr|.kR|\n+---+---+---+---+---+---+---+---+\n|.rR|:::|.rR|:::|.rR|:::|.nN|:bB|\n+---+---+---+---+---+---+---+---+\n|.kK|:::|.rR|:::|.rR|:::|.nN|:bB|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Kd7,Kf6,Kg5,Kh7"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 r+.|p:+|p::p|p::p|p::p|p::p|p::p|Pn.|Pn::P|.r:+|K:k|R:r|.r:+|B:b|.q:+|Q:q|.K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|.q:+|B:b|.q:+|K:k|.P:n|.r:+|P:p|.r:+|P:p|.P:P|P:p|.K:k|R:r|.P:p|.P:p|.r:+|.P:n|.q:+|.K:k|.r:+|R:r|"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|r.|-p|.q|K|-p|.k|.n|r|\\n+---+---+---+---+---+---+---+---+\\n|p.|p.|.p|p.|p.|.p|p.|p.|\\n+---+---+---+---+---+---+---+---+\\n|.n|.p|.P|.P|.P|.p|.P|.P|.p|\\n+---+---+---+---+---+---+---+---+\\n|.r|.q|.Q|.k|.q|.k|.r|.n|\\n+---+---+---+---+---+---+---+---+\\n|.P|.p|.P|.P|.p|.P|.P|.P|.P|\\n+---+---+---+---+---+---+---+---+\\n|.r|.K|.n|.b|.q|.Q|.B|.k|.R|.R|\\n+---+---+---+---+---+---+---+---+\\n|.k|.Q|.K|.Q|.B|.n|.R|.K|.B|.R|\\n+---+---+---+---+---+---+---+---+\\n|.K|.Q|.B|.k|.R|.B|.n|.R|.K|.B|\\n+---+---+---+---+---+---+---+---+\\n|.B|.k|.B|.Q|.K|.B|.n|.R|.K|.R|\\n+---+---+---+---+---+---+---+---+\\n|.n|.R|.K|.B|.n|.R|.K|.B|.R|.R|\\n+---+---+---+---+---+---+---+---+\\n|.P|.P|.P|.P|.P|.P|.P|.P|.P|\\n+---+---+---+---+---+---+---+---+\\n|r.|p.|.q|K|p.|.k|.n|r|\\n+---+---+---+---+---+---+---+---+\") == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|r.|-p|.q|K|-p|.k|.n|r|\\n+---+---+---+---+---+---+---+---+\\n|p.|p.|.p|p.|p.|.p|p.|p.|\\n+---+---+---+---+---+---+---+---+\\n|.n|.p|.P|.P|.P|.p|.P|.P|.p|\\n+---+---+---+---+---+---+---+---+\\n|.r|.q|.Q|.k|.q|.k|.r|.n|\\n+---+---+---+---+---+---+---+---+\\n|.P|.p|.P|.P|.p|.P"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n\nassert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3') == 'You will become a flying monkey'\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('7 5') == 'You will become a flying monkey!'\n\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"8 3\"\n) == \"Your wish is granted!\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 1') == 'You will become a flying monkey!'\nassert solution('2 5') == 'You will become a flying monkey!'\nassert solution('4 7') == 'You will become a flying monkey!'\nassert solution('7 7') == 'You will become a flying monkey!'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '8 3'\n) == 'Your wish is granted!'\n\nassert solution(\n    '3 3'\n) == 'You will become a flying monkey!'\n\nassert solution(\n    '10 5'\n) == 'Your wish is granted!'\n\nassert solution(\n    '3 1'\n) == 'You will become a flying monkey!'\n\nassert solution(\n    '10 6'\n) == 'You will become a flying monkey!'"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"6 1\") == \"You will become a flying monkey!\"\n\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 4') == 'You will become a flying monkey!'\nassert solution('8 5') == 'You will become a flying monkey!'\nassert solution('8 6') == 'You will become a flying monkey!'\nassert solution('8 7') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"7 3\"\n) == \"Your wish is granted!\"\n\nassert solution(\n    \"12 2\"\n) == \"You will become a flying monkey!\"\n\nassert solution(\n    \"10 1\"\n) == \"You will become a flying monkey!\"\n\n\"\"\"\n\n\"\"\"\nApproach:\n\nSimulate the game\n\nN - [0, N-1] - check if the input number is in the set\nK - [0, N-1] - we can ask at most K questions\n\nN - [1, N] - 1 is the secret number\n\nQ - N - question\n\n\"\"\"\n\n\"\"\"\nExample with N = 8 and K = 3\n\n* Question 1: is the secret number between 1 and 8? - \"true\"\n* Question 2: is the secret number even? - \"true\"\n* Question 3: is the secret number greater than 2? - \"false\"\n* Question 4: is the secret number between 3 and 6? - \"false\"\n* Question 5: is the secret number prime? - \"false\"\n* Question 6: is the secret number between 7 and 10? - \"true\"\n\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('7 5') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('1 1') == 'You will become a flying monkey!'\nassert solution('10 1') == 'You will become a flying monkey!'\nassert solution('10 10') == 'You will become a flying monkey!'\nassert solution('10 10') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == '16'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('16') == '16'\nassert solution('15') == '16'\nassert solution('13') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == '16'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '16'\nassert solution('18') == '24'\nassert solution('27') == '45'\nassert solution('27') == '45'\nassert solution('15') == '25'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '0.146674'\n\"\"\"\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"16\"\nprint(solution(stdin.readline()))\n\n---Problem 621B---\nThe following problem is a warm-up for the next problem.\n\nThe area of a given rectangular room is $a\\times b$, where $a$ and $b$ are positive integers. The number of tiles required to cover the entire area is $a\\times b$; these are the number of units of the first material on each of the $a$-by-$b$ tiles. The tiles are all square, and the total area of the room is also $a\\times b$.\n\nFor example, $a=2$ and $b=3$ are input parameters for the room with area $12\\times 15$. In this example, the number of tiles to cover the entire room is $25$: $2\\times 3=6$ units of the first material, which require $6$ tiles to cover the entire room. The room with area $2\\times 6$ requires $1$ tile to cover the first $2$ units, and $2$ tiles to cover the second $6$ units.\n\nGiven the two input parameters for the room, find the number of tiles required to cover the entire room. Your answer should be an integer.\n\n-----Input-----\nThe first line of the input contains a single integer $a$, the area of the room in square meters.\nThe second line of the input contains a single integer $b$, the area of the room in square meters.\n\n-----Output-----\nOutput a single integer, the number of tiles required to cover the entire room.\n\n-----Examples-----\nSample Input:\n12\n7\nSample Output:\n22\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5\\n1 2 3 4 5') == '4'\nassert solution('1 2 3 4 5\\n1 2 3 3 4 5') == '5'\nassert solution('1 2 3 4 5\\n1 2 3 3 3 4 5') == '5'\nassert solution('1 2 3 4 5\\n1 2 3 3 3 3 4 5') == '0'\nassert solution('1 2 3 4 5\\n1 2 3 3 3 3 3 4 5') == '0'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 180\\n1 1 1 1\") == \"4\"\nassert solution(\"6 180\\n1 1 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport math\n\nn, T = [int(x) for x in input().split(' ')]\ntask = [int(x) for x in input().split(' ')]\n\ntask.sort()\n\ni = 0\ncompleted = 0\nwhile i < len(task):\n    completed += 1\n    T -= task[i]\n    if T < 0:\n        break\n    i += 1\n\nprint(completed)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == 4\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 180\\n 45 30 55 20 80 20') == '4'\nassert solution('6 180\\n 45 30 55 20 80 20') == '4'\nassert solution('6 180\\n 45 5 30 55 20 80 20') == '4'\nassert solution('6 180\\n 55 20 80 20 45 30') == '4'\nassert solution('6 180\\n 55 20 80 20 45 30') == '4'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 180\\n1 2 3 4') == '4', 'wrong result'"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == e\n\"\"\"\n\n\"\"\"\n1. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 = \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u0447 * \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438 / \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0434\u0430\u0447.\n2. \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 = 0\n3. \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(1)\n\"\"\"\n\nn, t = map(int, input().split())\ntask_times = list(map(int, input().split()))\n\ntask_times_total_min = sum(task_times)\ntask_times_total_hours = sum(task_times) // 60\ntask_times_total_minutes = sum(task_times) % 60\n\ntask_times_executed_min = 0\ntask_times_executed_hours = 0\ntask_times_executed_minutes = 0\n\nfor time in task_times:\n    if task_times_executed_min + time <= t:\n        task_times_executed_min += time\n        task_times_executed_hours = task_times_executed_min // 60\n        task_times_executed_minutes = task_times_executed_min % 60\n    else:\n        task_times_executed_hours += 1\n        task_times_executed_min = task_times_executed_min + time - t\n        task_times_executed_minutes = task_times_executed_min\n\nprint(task_times_executed_hours, task_times_executed_minutes)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == 4\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('2 1') == '0'\nassert solution('2 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10\\n5 6') == '1'\nassert solution('3 10\\n3 1 3') == '0'\nassert solution('3 10\\n3 3 3') == '1'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nn, t = map(int, input[0].split(' '))\n\narr = list(map(int, input[1].split(' ')))\n\ntasks = 0\ntime = 0\nfor i in arr:\n    if time + i <= t:\n        time += i\n        tasks += 1\n\nprint(tasks)\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\n\"\"\"\n\nN = int(input())\nl = []\nfor _ in range(N):\n    l.append(int(input()))\n\nprint(sum(l) - min(l))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(solution(\"4\\n21\\n34\\n18\\n9\"))\n\n----\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\nsolution('4\\n21\\n34\\n18\\n9')\n\nassert solution('5\\n6\\n12\\n18\\n15') == '28'\n\nsolution('5\\n6\\n12\\n18\\n15')\n\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nprint(solution(input()))"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\n--------\nSample Input:\n5\n1\n10\n30\n90\n6\nSample Output:\n9\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n21\n34\n18\n9''') == '79'\nprint(solution(stdin))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(solution(\"4\\n21\\n34\\n18\\n9\"))"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(solution(\"4\\n21\\n34\\n18\\n9\"))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3 4\\\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\\\n1 0 4\") == \"impossible\"\nassert solution(\"5 3 3 4\\\\n0 1 4\\\\n0 0 4\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\\\n0 2 4\\\\n0 0 4\") == \"impossible\"\n\nSample Input:\n3 3 3 3\\\\n0 1 2\\\\n0 0 1\\\\n0 1 2\nSample Output:\n3 3 0\n\"\"\"\n\nfrom fractions import Fraction as Fr\nimport numpy as np\nimport random"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3 3 4\n0 1 4''') == '2 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nprint(solution(\"5 3 3 4\\n0 1 4\"))\nassert solution(\"5 3 3 4\\n3 3 4\") == \"impossible\"\nprint(solution(\"5 3 3 4\\n3 3 4\"))\nassert solution(\"5 3 3 4\\n5 4 4\") == \"impossible\"\nprint(solution(\"5 3 3 4\\n5 4 4\"))\nassert solution(\"5 3 3 4\\n3 2 4\") == \"impossible\"\nprint(solution(\"5 3 3 4\\n3 2 4\"))\nassert solution(\"5 3 3 4\\n3 2 3\") == \"2 3 0\"\nprint(solution(\"5 3 3 4\\n3 2 3\"))\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\n\"\"\"\n\n\"\"\"\nSolution:\n\nWe want to maximize the probability of getting a cold soda, so it is better to put the new bottles in the front of the fridge. \nLet's denote the probability of getting a cold soda by p_C(m, s, d) and the probability of not getting a cold soda by p_NC(m, s, d).\n\np_C(m, s, d) = (m / (m + s) * s / d)**s\np_NC(m, s, d) = (m / (m + s) * s / d)**(m - s)\n\nThe optimal refill schedule for the next m students will be\n\nd_C(m, s, d) = (m / (m + s) * s / d)**s * m / (m + s) * (s / d)\nd_NC(m, s, d) = (m / (m + s) * s / d)**(m - s) * m / (m + s) * (s / d)\n\nIf there is a chance of getting a cold soda, then we can find the optimal refill schedule for the next m students by using the max() function. \n\nIf there is no chance of getting a cold soda, then the optimal refill schedule for the next m students is impossible.\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nn, m, s, d = map(int, sys.stdin.readline().split())\nfridge = list(map(int, sys.stdin.readline().split()))\ncounter = Counter(fridge)\nprobability_of_cold = m / (m + s) * s / d\npossible = False\n\nfor key in fridge:\n    if key >= d:\n        continue\n\n    probability_of_cold *= key / (s + key)\n    if probability_of_cold >= 1:\n        possible = True\n        break"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('2 3 4 3\\n3 1 2') == 'impossible'\nassert solution('5 1 3 4\\n2 1 3') == '2 3 0'\nassert solution('5 3 3 3\\n2 1 4') == '2 1 2'\n\nassert solution('5 1 3 4\\n2 1 3') == 'impossible'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3 4\\\\n0 1 4\") == '2 3 0'\n\n------Solution------\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n0 2 5\") == \"impossible\"\nassert solution(\"5 3 3 4\\n0 1 2 3\") == \"5 0 3 1\"\nassert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n0 0 0\") == \"impossible\"\nassert solution(\"5 3 3 4\\n0 1 4\\n3 3 2\\n2 3 0\\n2 2 3\") == \"impossible\"\n\n-----Explanation-----\nThe solution to the above problem is [2, 3, 0] and [3, 2, 0]\n\"\"\"\n\n\n\nfrom itertools import combinations\nfrom random import randint\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3 3 4\n0 1 4''') == '''2 3 0'''\nassert solution('''5 3 3 4\n0 1 4\n2 2 3''') == '''impossible'''\nassert solution('''7 7 7 6\n0 2 2 2\n''') == '''7 7 7 0'''\nassert solution('''9 8 6 5\n0 1 1 1\n''') == '''8 0 6 0'''\n\n-----Explanation-----\nThe most optimal refill scheme is to put the new bottles in the front of the fridge in the order of 2, 1, 3, 0. This will give each of the next four students a cold soda.\n\nAs you can see from the example above, you may actually end up putting the new bottles in the front of the fridge in any order, and it will still always give each student a cold soda.\n\nThe following is the optimal refill scheme for the examples above:\n\nSample Input    Sample Output\n5 3 3 4    2 3 0\n0 1 4    2 3 0\n2 2 3    impossible\n\nYou can check whether this is the correct answer by simply running the code and trying out a few different input values.\n\n'''\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nprint(solution(\"0 1 2 2 2 7\"))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 8\") == \"0 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 9\") == \"1 0 0 0 0 0\"\nassert solution(\"0 1 2 2 2 10\") == \"0 0 0 0 0 0\"\nassert solution(\"0 1 2 2 2 11\") == \"1 0 0 0 0 0\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\"\"\"\n\nx = [int(i) for i in input().split()]\n\nprint(x[0] - 8 + x[1], x[2] - 2 + x[3], x[4] - 2 + x[5], x[0], x[1] - 2, x[2] - 2, x[3] - 2, x[4] - 2, x[5])\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('1 2 3 4 5 6') == '0 0 0 0 0 0'\nassert solution('2 2 2 0 0') == '0 0 0 1 0 0'\nassert solution('0 0 1 0 0 1') == '1 1 1 1 1 1'\nassert solution('1 2 3 4 5 6') == '0 0 0 0 0 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"2 1 2 1 5\") == \"-1 0 -1 0 0 -1\"\nassert solution(\"5 0 2 2 2 0\") == \"-1 0 -1 0 0 1\"\nassert solution(\"7 6 3 5 5 3\") == \"0 1 0 -1 0 1\"\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 0 2 2 1\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 1\") == \"0 1 0 0 0 1\"\nassert solution(\"0 1 1 1 2 2 1\") == \"0 0 0 0 1 1\"\nassert solution(\"0 0 0 0 0 0 0\") == \"0 0 0 0 0 0 0\"\n\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 1\") == \"1 0 0 0 0 1\"\nassert solution(\"3 1 1 1 1 1\") == \"4 0 0 0 0 0\"\nassert solution(\"0 1 2 2 2 3\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 1 1 1 1\") == \"4 0 0 0 0 0\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"1 0 0 0 0 0\") == \"1 0 0 0 0 0\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n123 456\\n1111') == '123'\nassert solution('3\\n123 456\\n1111\\n12345') == '12345'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n123456 0.6666\nqwerty 0.3334\n''') == '1.3334'\nprint('All tests passed.')\n-----Problem-----\nYou are given a list of N passwords and the probability that each password is the correct one, in the order of the list. You will try each password one at a time, and you are absolutely sure that the account you want to hack uses a password in the given list. What is the expected number of attempts to find the correct password?\n\n-----Tests-----\nSample test(s):\n\nNo tests.\n-----Solution-----\nYou can solve this problem using a brute force approach. We can try each password in the list. To find the probability that a password is the correct one, we can simply multiply the probability of the password by the number of passwords in the list. Then we can subtract the probability of the password from 1 to get the probability of the password being the correct one.\n\nComplexity: O(N^2)"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('1\\nqwerty 0.3334\\n123456 0.6666') == '1.3334'\n\n-----Explanation-----\nThe probability that the first password is the correct one is 0.6666, and the probability that the second password is the correct one is 0.3333.\n\nIn the optimal order, the first password is tried first, and the second password is tried second.\n\nThen, the probability that the first password is the correct one is 0.3333, and the probability that the second password is the correct one is 0.6666.\n\nSince the probabilities for the first password and the second password are equal, the expected number of attempts is the probability that the first password is the correct one, which is 0.3333.\n\nSince the problem specifies that the sum of the probabilities is 1, the expected number of attempts is also 1.3334.\n\nSo, in the optimal order, the first password is tried first, and the second password is tried second, which gives the expected number of attempts of 1.3334.\n\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\nn = int(input())\n\ns = \"\"\nfor i in range(n):\n    p, n = input().split()\n    s += n + \"\\n\"\n\nprint(s)\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.3334 2.3334\") == \"1.3334\"\nprint(\"Tests passed.\")\n\n-----Solution-----\nimport numpy as np\nN = int(stdin.readline())\npwds = np.empty(N, dtype=np.dtype(str))\nprobs = np.empty(N, dtype=np.dtype(float))\n\nfor i in range(N):\n    pwds[i] = stdin.readline().rstrip()\n    probs[i] = float(stdin.readline())\n\nnum_passwords = N\ntotal_probs = sum(probs)\n\nwhile num_passwords > 1:\n    if total_probs > 1.0001:\n        print(total_probs)\n        break\n    total_probs = total_probs * probs[num_passwords-1] / probs[0]\n    num_passwords = num_passwords - 1\n\"\"\"\n\nimport numpy as np\nimport re\n\nN = int(input())\npwds = []\nprobs = []\nfor i in range(N):\n    line = input().split(' ')\n    pwds.append(line[0])\n    probs.append(float(line[1]))\n\nnum_passwords = N\ntotal_probs = np.sum(probs)\n\nwhile num_passwords > 1:\n    if total_probs > 1.0001:\n        print(round(total_probs, 4))\n        break\n    total_probs = total_probs * probs[num_passwords-1] / probs[0]\n    num_passwords = num_passwords - 1"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n12345678 0.11\n123456789 0.09\n111111111 0.01\"\"\") == \"1.11\"\nassert solution(\"\"\"1\n12345678 0.11\n123456789 0.09\n111111111 0.01\"\"\") == \"1\"\nassert solution(\"\"\"2\n12345678 0.11\n123456789 0.09\n111111111 0.01\"\"\") == \"1.11\"\nassert solution(\"\"\"4\n12345678 0.11\n123456789 0.09\n111111111 0.01\n11111111 11.11\"\"\") == \"1.11\"\nassert solution(\"\"\"4\n111111111 0.01\n11111111 11.11\n11111111 11.11\n11111111 11.11\"\"\") == \"11.11\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\nassert solution('2 2\\n2 3') == '1'\nassert solution('3 10\\n5 3 2 1') == '1'\nassert solution('4 10\\n2 4 3 1') == '1'\nassert solution('3 10\\n4 2 5 3') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\"\"\"\n\nimport sys\n\nn, p = [int(i) for i in sys.stdin.readline().split()]\ndistances = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n1 2 4''') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\n2\n4''') == 1\n\n-----Problem-----\nYou have the task of maintaining a distance of p meters in front of you and, at the same time, passing many vehicles that may be stopping or going. The distance between you and the car in front is d meters. Implement the function car, which takes a string line with exactly 3 elements on it: the first is d, the second is p, and the third is the number of cars N that may be in front of you.\n\nIf there is no car in front of you, return 0. If there is a car in front of you and it is moving, return p. If there is a car in front of you and it is stopping, return min(p, d). If there are more than N cars in front of you, return the maximum d possible."
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str([\n    '1 2 4',\n    '4 3 6',\n    '8 7 9',\n])) == '1'\n\nassert solution(str([\n    '1 2 4',\n    '4 3 6',\n    '8 7 9',\n])) == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n4') == '1'\nassert solution('1\\n4\\n2') == '1'\n\n'''"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5 6') == '3'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \\\n    \"G:\\nF: -------------------------------------*--------------------\\nE:\\nD:\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2''') == '''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n\nassert solution('''48\nE E D E D C C C C D C D D E E E E E D D D D C D D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C C D D\nE E D E D C C C C D C D D E E E E E D D D D C"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                            \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"17\\n
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == expected_output\nprint(\n    '\\n'.join(\n        map(\n            lambda line: f'{line}\\n',\n            ...\n        )\n    )\n)\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                  *        \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \\\n\"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\"\"\"\nExplanation:\nThis song consists of 27 notes. The first staff shows the treble clef, middle c, and line with the top of the bass clef. The second staff shows the default duration for each note (1 beat), the asterisks on that staff, and the two additional lines to allow space between the note above the note below. The notes are then listed in ascending order of the letters:\n\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n\nEach note in this song is shown in its pitch, which is followed by the number of asterisks, and then its duration. In this example, the duration is shown as $1$, $2$, $3$, etc. The notes are shown in order, starting with middle c, then A, then g, and so on. The asterisk represents the default note duration (one beat), and the two asterisks represents notes that are twice as long. The pitch of the default note is represented by one asterisk (the middle c); the pitch of notes that are twice as long is represented by two asterisks. The pitch of notes that are three times as long is represented by three asterisks, and so on.\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('C C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:       \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\nprint(solution(stdin))\n-----\n\n\"\"\"\n\nimport unittest\nimport re\n\nimport re\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n3 4 5\") == \"possible\"\nassert solution(\"3\\n1 2 3\") == \"impossible\"\nassert solution(\"3\\n2 1 2\") == \"impossible\"\nassert solution(\"3\\n1 1 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n2 1 1') == 'impossible'\nassert solution('3\\n2 1 1\\n1 1 1') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\n\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1') == \"possible\"\nassert solution('5\\n13 19 23 34 11') == \"possible\"\nassert solution('8\\n13 19 23 33 34 11') == \"possible\"\nassert solution('7\\n23 33 34 11') == \"possible\"\nassert solution('4\\n13 19 22') == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\\n\") == \"possible\"\nassert solution(\"2 1 1\\n\") == \"impossible\"\nassert solution(\"3 1 1\\n\") == \"impossible\"\nassert solution(\"3 2 1\\n\") == \"possible\"\nassert solution(\"3 3 1\\n\") == \"possible\"\n\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 2 1') == 'possible'\nassert solution('3\\n1 3 1') == 'possible'\nassert solution('3\\n2 1 1') == 'possible'\nassert solution('3\\n2 1 2') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\n\n-----Problem-----\nYou have 3 sticks of lengths 1, 1 and 1, and want to make a triangle of them (i.e. having the sum of all the lengths equal to 3). You can arrange the sticks in any order, as long as they are non-degenerate (i.e. having strictly positive area).\n\nYou may perform the following operations:\n\nChoose two sticks and remove them from the pile.\nCreate a triangle from the remaining three sticks.\nFor this problem, any triangle of the form $a$ $b$ $c$ where $a+b+c=3$ is considered valid.\nWrite a program that determines whether or not it is possible to make a non-degenerate triangle from the given sticks.\n\n-----Constraints-----\n3 <= N <= 20000\n1 <= sticks[i] <= 2^60\n\n-----Test Case-----\nFor input:\n\n3\n1 1 1\nYour output should be:\npossible\nFor input:\n\n3\n2 1 1\nYour output should be:\nimpossible\n\n-----Solution-----\nThis problem can be solved using basic logic. In short, we can pick a stick, then create a new triangle using the rest of the sticks. If the new triangle is valid, then we have a solution. If not, then we can try the next stick.\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"possible\"\nassert solution(\"3 1\") == \"possible\"\nassert solution(\"5 1 1\") == \"possible\"\nassert solution(\"5 1\") == \"possible\"\nassert solution(\"3 2 1\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"4\\n1 2 3 4\") == \"possible\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"possible\"\nassert solution(\"3\\n1 1 1\") == \"impossible\"\nassert solution(\"1\\n1\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('2\\n1 1') == 'impossible'\nassert solution('2\\n3 3') == 'impossible'\nassert solution('1\\n3') == 'impossible'\nassert solution('3\\n6 9 12') == 'possible'\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('5 3 1 2 3 1') == 1\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 1 1 1 1 1') == ''\nassert solution('1 1 1 1 1 1 1 1 1 1 1') == ''\nassert solution
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"10\n4 3 3 2 1 2 2 1 1 3\") == 3\n\n\"\"\"\nimport math"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10\n4 3 3 2 1 2 2 1 1 3\n''') == 3\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n''') == 1\n\nassert solution('''10\n2 1 2 1 2 1 2 1 2 1\n''') == 5\n\nassert solution('''10\n2 2 1 1 1 2 1 1 2 2\n''') == 6\n\nassert solution('''10\n1 2 1 2 1 1 2 1 2 1\n''') == 9"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n1 1 1 1 1 1 1 1''') == 1\nassert solution('''8\n1 1 1 1 1 1 1 1\n''') == 2\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"4\", \"3\", \"3\", \"2\", \"1\", \"2\", \"2\", \"1\", \"1\", \"3\"]) == 3\n\"\"\"\n\n\"\"\"\nSolution:\n\nbuild a list of widths in order\nloop through the list of widths\n    if the next width is bigger than the top of the tower\n        push the current tower onto the stack and reset the current tower\n        push the new width onto the stack\n    else\n        add 1 to the current tower\n    \nreturn the number of towers\n\"\"\"\n\nimport math"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '10\\n4 3 3 2 1 2 2 1 1 3') == '3'"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\n\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\nassert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print())\nprint(solution(str(input())))"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\\n\") == '35.54\\nCARTER\\nBOLT\\nPOWELL'\n\n--------------------------------------------------------------------------------------------------------------------------------\n\nIn a race, the team of runners advances in the third, then the fourth and so on, until all have advanced. At that point, the team is said to have finished.\n\nIn a series of n races, the team which advances in the ith race is said to have won the series. If the team that has won the nth race has run, the team that has won the (n+1)th race will have run if and only if it has finished the nth race.\n\nYour task is to help your country's team determine whether they have already won the (n+1)th race.\n\n-----Input-----\nYou are given a single line containing the integer number n, the number of races in the series.\n\n-----Output-----\nOutput a single line containing the word 'YES', if the team has already won the (n+1)th race or a single line containing the word 'NO' otherwise.\n\n-----Examples-----\nSample Input:\n3\n\nSample Output:\nYES\n\nSample Input:\n4\n\nSample Output:\nNO\n\nSample Input:\n5\n\nSample Output:\nYES\n\n--------------------------------------------------------------------------------------------------------------------------------\n\nGiven a number n. You need to find the nth fibonacci number.\n\nThe nth fibonacci number can be defined as the sum of the first two numbers. More formally, the nth fibonacci number can be defined as the following.\n\nFor the first n = 1, the nth fibonacci number is 0\nFor the first n = 2, the nth fibonacci number is 1\nFor the first n = 3, the nth fibonacci number is 1\nFor the first n > 3, the nth fibonacci number is the sum of the previous two numbers.\n\n----Input----\nThe first line contains a single integer n, the number of fibonacci numbers to be printed.\n\n----Output-----\nPrint a single line containing n integers each separated by a single space. The nth fibonacci number should be on a separate line.\n\nSample Input:\n5\n\nSample Output:\n0 1 1 2 3\n\n--------------------------------------------------------------------------------------------------------------------------------\n\nYou are the coach of a national team. You have to select four players from a group of 20 players, such that you'll have 5 pairs of players who will play against each other in the tournament.\n\nYour task is to select the players who should represent your team, not choosing the same pair more than once. There are no other restrictions on the team you select.\n\nThe input contains the name and the result of four games between the players. The player with the highest score wins one point, the second highest score wins two points and so on.\n\nEach pair will score points in the following way:\n\nThe first player in the pair wins 2 points\nThe second player in the pair wins 3 points\nThe third player in the pair wins 5 points\nThe fourth player in the pair wins 7 points\nThe fifth player in the pair wins 9 points\nThe sixth player in the pair wins 11 points\nThe seventh player in the pair wins 13 points\nThe eighth player in the pair wins 15 points\nThe ninth player in the pair wins 17 points\nThe tenth player in the pair wins 19 points\n\nIf the same pair of players is selected again, the points earned will be the same, i.e. no points will be awarded for choosing the same pair of players.\n\n-----Input-----\nThe first line contains the number of test cases.\n\nEach test case is described as follows:\n\nThe first line contains the name of the player who played with the highest score.\n\nThe second line contains the name of the player who played with the second highest score.\n\nThe third line contains the name of the player who played with the third highest score.\n\nThe fourth line contains the name of the player who played with the fourth highest score.\n\nThe fifth line contains the name of the player who played with the fifth highest score.\n\nThe sixth line contains the name of the player who played with the sixth highest score.\n\nThe seventh line contains the name of the player who played with the seventh highest score.\n\nThe eighth line contains the name of the player who played with the eighth highest score.\n\nThe ninth line contains the name of the player who played with the ninth highest score.\n\nThe tenth line contains the name of the player who played with the tenth highest score.\n\n-----Output-----\nPrint the name of four players each on a separate line. The players should be listed in the same order as they were listed in the input.\n\nThere is no need to print the points earned by the players.\n\n-----Examples-----\nSample Input:\n3\nJACK\nJACK\nJACK\nJACK\nJACK\nJACK\nJACK\n\nSample Output:\nJACK\n\nSample Input:\n3\nJACK\nJACK\nJACK\nJACK\n\nSample Output:\nJACK\nJACK\n\nSample Input:\n5\nJACK\nJACK\nJACK\nJACK\nJACK\nJACK\nJACK\n\nSample Output:\nJACK\nJACK\nJACK\nJACK\nJACK\n\nSample Input:\n4\nJACK\nJACK\nJACK\nJACK\n\nSample Output:\nJACK\nJACK\n\n--------------------------------------------------------------------------------------------------------------------------------\n\nThere is an array of n integers. There are also 2 disjoint sets, A and B, each containing m integers. You like all the integers in set A and dislike all the integers in set B. Your initial happiness is 0. For each i integer in the array, if i E A, you add 1 to your happiness. If i E B, you add \u22121 to your happiness. Otherwise, your happiness does not change. Output your final happiness at the end.\n\nNote: Since A and B are sets, they have no repeated elements. However, the array might contain duplicate elements.\n\n----Input----\nThe first line contains integers n and m separated by a single space.\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\nassert solution('5\\nJOHNSON 9.84\\nDIEGO 9.34\\nTIMMY 9.65\\nSUE 9.27') == '9.02'\nassert solution('4\\nBELLO 9.09\\nISLAM 9.11\\nVAN DA ARCHER 9.19') == '9.35'"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1.0 8.0\\n2.0 4.0\") == \"7.0 4.0\"\nassert solution(\"3\\n1.0 8.0\\n2.0 4.0\\n1.5 10.5\") == \"10.5 2.5\"\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('A') == 'A'\nassert solution('1.5') == '1.5'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1.0 8.0\\n2.0 8.0\\n3.0 8.0\\n4.0 8.0') == '8.0'\nassert solution('6\\n9.90 8.85\\n9.69 8.72\\n9.58 8.43\\n9.78 8.93\\n9.88 8.92\\n9.72 8.61') == '35.54'\n\n\"\"\"\n\nimport math\nimport sys\n\nassert len(sys.argv) == 2\n_, times = sys.argv\ntimes = [list(map(float, times.split()[i::4])) for i in range(4)]\n\nr = sorted(times[0], reverse=True)[0]\nfor i in range(1, 4):\n    if r > sorted(times[i])[0]:\n        r = sorted(times[i])[0]\n\nprint(r)\n\nfor i in range(4):\n    if sorted(times[i])[0] == r:\n        for j in range(4):\n            print(sorted(times[j])[0]) if j!= i else print(sorted(times[i])[1])\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ASHMADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\nprint('Successfully passed all test cases!')\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\nashmeade 9.90 8.85\\nblake 9.69 8.72\\nbolt 9.58 8.43\\ncarter 9.78 8.93\\nfrater 9.88 8.92\\npowell 9.72 8.61') == '35.539\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('1\\nashmeade 9.90 8.85\\nblake 9.69 8.72\\nbolt 9.58 8.43\\ncarter 9.78 8.93\\nfrater 9.88 8.92\\npowell 9.72 8.61') == '9.929\\nASHMEADE'\n\"\"\"\n\nfrom collections import namedtuple, defaultdict\n\ndata = namedtuple('Data', 'leg1 leg2 leg3 leg4 name')\n\nstdin = [line.split() for line in open(\"input.txt\").readlines()]\nd = defaultdict(list)\nfor leg in range(4):\n    for line in stdin:\n        d[line[0]].append(data(*[float(i) for i in line[1:]]))\n\nfor line in stdin:\n    print(d[line[0]][0].name)\n    break\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2\n2 4\n5 6\n''') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nn = int(stdin.readline())\ndata = [list(map(int, stdin.readline().split(' '))) for _ in range(n)]\n\nrooms = set()\nfor i in range(n):\n    temp = max(data[i])\n    rooms.add(temp)\n\nprint(len(rooms))\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n'''\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n2 4\\n5 6\") == \"2\"\nassert solution(\"1 2\\n2 3\\n5 6\") == \"3\"\nassert solution(\"1 2\\n2 4\\n5 7\") == \"4\""
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n2 4\\n5 6\") == \"2\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 4\\n5 6\") == 2\nassert solution(\"1 2\\n2 4\\n5 6\\n7 8\") == 1\n\n------Notes------\n\n\n\"\"\"\n\nfrom operator import itemgetter\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\\n2 4\\n5 6\") == \"2\"\nprint(solution(\"3\\n1 2\\n2 4\\n5 6\"))\n\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\\n2 4\") == \"2\"\nassert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"yeye\") == \"heehee\"\nassert solution(\"yehe\") == \"heehee\"\n\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hey\") == \"hee\"\nassert solution(\"heeeeeeeeeeeeeeeee\") == \"hee\"\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hey\") == \"heey\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hey') == 'heey'\nassert solution('goddag') == 'goddag'\nassert solution('helloo') == 'helloo'\nassert solution('dear') == 'dear'\nassert solution('Hello') == 'Heeelllloo'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hi') == 'hee'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"Good day\") == \"Goodday\"\nassert solution(\"Alligator\") == \"Alligator\"\nassert solution(\"Later\") == \"Later\"\nassert solution(\"Alligator\") == \"Alligator\"\n\n----Constraints----\n    \u2022    $3 \\leq |s| \\leq 1000$\n\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('he') == 'hee'\nassert solution('hey') == 'heee'\nassert solution('h') == 'h'\nassert solution('heee') == 'heeheee'\nassert solution('hee') == 'hee'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hello\") == \"heeellooo\"\nassert solution(\"bye\") == \"beeeey\"\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"heey\") == \"hee\"\nassert solution(\"Hello\") == \"Hello\"\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hey') == 'heey'\nassert solution('heyy') == 'heehee'\nassert solution('hy') == 'hy'\nassert solution('Hey') == 'Heye'\nassert solution('hEeY') == 'hEeEey'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == '1 2\\n1 3\\n1 4'\nassert solution(\"5\\n0 1 1 2 3\\n1 0 2 3 4\\n1 2 0 3 4\\n2 3 0 4 5\\n3 4 3 0 5\") == '1 2\\n1 3\\n1 4\\n2 3\\n3 4'\nassert solution(\"9\\n0 1 1 2 2 3\\n1 0 2 3 4 5\\n1 2 0 3 5 6\\n2 3 0 4 6 7\\n3 4 0 5 7 8\\n4 5 0 6 8 9\\n5 6 0 7 9 10\\n6 7 0 8 10 11\\n7 8 0 9 11 12\\n8 9 0 10 12 13\\n9 10 0 11 13 14\\n10 11 0 12 14 15\\n11 12 0 13 15 16\\n12 13 0 14 16 17\\n13 14 0 15 17 18\\n14 15 0 16 18 19\\n15 16 0 17 19 20\\n16 17 0 18 20 21\\n17 18 0 19 21 22\\n18 19 0 20 22 23\\n19 20 0 21 23 24\\n20 21 0 22 24 25\\n21 22 0 23 24 26\\n22 23 0 24 25 27\\n23 24 0 25 27 28\\n24 25 0 26 28 29\\n25 26 0 27 29 30\\n26 27 0 28 30 31\\n27 28 0 29 31 32\\n28 29 0 30 32 33\\n29 30 0 31 33 34\\n30 31 0 32 34 35\\n31 32 0 33 35 36\\n32 33 0 34 36 37\\n33 34 0 35 37 38\\n33 35 0 36 38 39\\n34 36 0 37 39 40\\n35 37 0 38 40 41\\n36 38 0 39 41 42\\n37 39 0 40 42 43\\n38 40 0 41 43 44\\n39 40 0 42 44 45\\n40 41 0 43 45 46\\n41 42 0 44 46 47\\n42 43 0 45 47 48\\n43 44 0 46 48 49\\n44 45 0 47 49 50\\n45 46 0 48 50 51\\n46 47 0 49 51 52\\n47 48 0 50 52 53\\n48 49 0 51 53 54\\n49 50 0 52 54 55\\n50 51 0 53 55 56\\n51 52 0 54 56 57\\n52 53 0 55 57 58\\n53 54 0 56 58 59\\n54 55 0 57 59 60\\n55 56 0 58 60 61\\n56 57 0 59 61 62\\n57 58 0 60 62 63\\n58 59 0 61 63 64\\n59 60 0 62 64 65\\n60 61 0 63 65 66\\n61 62 0 64 66 67\\n62 63 0 65 67 68\\n63 64 0 66 68 69\\n64 65 0 67 69 70\\n65 66 0 68 70 71\\n66 67 0 69 71 72\\n67 68 0 70 72 73\\n68 69 0 71 73 74\\n69 70 0 72 74 75\\n70 71 0 73 75 76\\n71 72 0 74 76 77\\n72 73 0 75 77 78\\n73 74 0 76 78 79\\n74 75 0 77 79 80\\n75 76 0 78 80 81\\n76 77 0 79 81 82\\n77 78 0 80 82 83\\n78 79 0 81 83 84\\n79 80 0 82 84 85\\n80 81 0 83 85 86\\n81 82 0 84 86 87\\n82 83 0 85 87 88\\n83 84 0 86 88 89\\n84 85 0 87 89 90\\n85 86 0 88 90 91\\n86 87 0 89 91 92\\n87 88 0 90 92 93\\n88 89 0 91 93 94\\n89 90 0 92 94 95\\n90 91 0 93 95 96\\n91 92 0 94 96 97\\n92 93 0 95 97 98\\n93 94 0 96 98 99\\n94 95 0 97 99 100\\n95 96 0 98 100 101\\n96 97 0 99 101 102\\n97 98 0 100 102 103\\n98 99 0 101 103 104\\n99 100 0 102 104 105\\n100 101 0 103 105 106\\n101 102 0 104 106 107\\n102 103 0 105 107 108\\n103 104 0 106 108 109\\n104 105 0 107 109 110\\n105 106 0 108 110 111\\n106 107 0 109 111 112\\n107 108 0 110 112 113\\n108 109 0 111 113 114\\n109 110 0 112 114 115\\n110 111 0 113 115 116\\n111 112 0 114 116 117\\n112 113 0 115 117 118\\n113 114 0 116 118 119\\n114 115 0 117 119 120\\n115 116 0 118 120 121\\n116 117 0 119 121 122\\n117 118 0 120 122 123\\n118 119 0 121 123 124\\n119 120 0 122 124 125\\n120 121 0 123 125 126\\n121 122 0 124 126 127\\n122 123 0 125 127 128\\n123 124 0 126 128 129\\n124 125 0 127 129 130\\n125 126 0 128 130 131\\n126 127 0 129 131 132\\n127 128 0 130 132 133\\n128 129 0 131 133 134\\n129 130 0 132 134 135\\n130 131 0 133 135 136\\n131 132 0 134 136 137\\n132 133 0 135 136 138\\n133 134 0 136 138 139\\n134 135 0 137 139 140\\n135 136 0 138 140 141\\n136 137 0 139 140 142\\n137 138 0 140 142 143\\n138 139 0 141 143 144\\n139 140 0 142 143 145\\n140 141 0 143 145 146\\n141 142 0 144 145 147\\n142 143 0 145 147 148\\n143 144 0 146 147 149\\n144 145 0 147 149 150\\n145 146 0 148 149 151\\n146 147 0 149 151 152\\n147 148 0 150 151 153\\n148 149 0 151 153 154\\n149 150 0 152 153 155\\n150 151 0 153 155 156\\n151 152 0 154 155 157\\n152 153 0 155 157 158\\n153 154 0 156 157 159\\n154 155 0 157 159 160\\n155 156 0 158 159 161\\n156 157 0 159 161 162\\n157 158 0 160 161 163\\n158 159 0 161 163 164\\n159 160 0"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4\\n5 0 2 3\\n6 0 1 2\\n7 0 3 4\\n8 0 4 6') == '1 2\\n1 3\\n1 4\\n2 4'\nassert solution('1 2 3\\n4 0 2\\n5 0 3') == '1 2\\n1 3'\n'''"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_str) == test_result"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\nimport math\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n\nassert solution('''5\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n3 4 5 5\n''') == '1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5\\n3 4\\n3 5'\n\nassert solution('''6\n0 1 7\n1 0 2\n1 2 0\n2 0 3\n3 0 4\n4 0 5\n5 0 6\n''') == '1 2\\n1 3\\n1 4\\n1 5\\n1 6'\n\nassert solution('''9\n0 1 9\n1 0 3\n1 3 0\n2 3 0\n3 0 4\n4 0 5\n5 0 6\n6 0 7\n7 0 8\n8 0 9\n''') == '1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9'\n\nassert solution('''6\n0 4 7\n1 0 5\n1 5 0\n2 5 0\n3 5 0\n4 5 0\n''') == '1 2\\n1 3\\n1 4\\n1 5'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 4\"\n\n---Problem Description---\nSahil went to school. He is very fond of playing games. He was playing a game with his friends. They were playing a number of games, and Sahil is the only one who played any of them. He wants to play the game with maximum number of friends and he wants to play with maximum number of friends. Sahil is not too fond of it. Now, Sahil needs your help to help him out in a few steps.\n\nSahil needs you to take the total number of friends playing the game and the maximum number of friends he can play with. He needs you to find the maximum possible number of friends Sahil can play with. This is a typical problem of the type: for a given set of constraints, give the minimum number of values that satisfy the constraints.\n\nInput Format\nFirst line of input contains N, the number of test cases.\n\nNext N lines contain two space separated integers, denoting the number of friends playing the game and maximum number of friends Sahil can play with.\n\nOutput Format\nFor each test case, print the maximum number of friends Sahil can play with.\n\nConstraints\n1 <= N <= 100\n\n1 <= Friends playing game <= N\n\n1 <= Maximum number of friends Sahil can play with <= N\n\nSample Input\n1\n4 4\nSample Output\n2\n\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"5\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n3 0 4 5\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"3\\n0 1 1 2\\n1 0 2 2\\n2 2 2 0\") == \"1 2\\n1 2\"\nassert solution(\"4\\n0 1 1 1\\n1 0 2 3\\n1 1 0 3\\n2 3 3 0\") == \"1 2\\n1 3\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\nassert solution('3\\n0 1 1\\n1 0 2\\n1 2 0') == '1 2\\n1 3'\n\nassert solution('3\\n0 1 1\\n1 0 2\\n1 2 0') == '1 2\\n1 3'\n\nassert solution('2\\n0 1 1\\n1 0 2') == '1 2'\n\nassert solution('2\\n0 1 1') == '1 2'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\"\n\nimport sys\nimport random\nimport math\nfrom functools import reduce\nfrom pprint import pprint\n\nfrom helpers import print_assert\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"EKPC\") == \"ABCD\"\nassert solution(\"SADK\") == \"ABCD\"\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('WBWGWEBWBWB') == 'WEBWEB'\n\nprint(solution(stdin.readline().strip()))\n\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\"\n\nimport sys\n\nassert solution(sys.stdin.readline().rstrip()) == \"ABCD\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AWAGMYSTV\") == \"ABCD\"\nassert solution(\"XQZKHGFTB\") == \"MHYS\"\nassert solution(\"ZYXWVUTSRQ\") == \"ABCD\"\nassert solution(\"ZPXWVUTSRQ\") == \"ABCD\"\nassert solution(\"ZPXWVUTSRQABCD\") == \"ABCD\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"ZXPGALGZ\") == \"ZHPNICX\"\nassert solution(\"MECMGIVQ\") == \"RTHJZDU\"\n\n\"\"\"\n\n\n\"\"\"\nimport math\nDRM_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"EWPGAJRB\"\n) == \"ABCD\"\n\"\"\"\n\n\"\"\"\n--Challenge--\n\nThe challenge is to decrypt the string given as input and return the decrypted string.\n\n--Solution--\n\nRead the input:\n\nDRM\n\nSplit the input string in half:\n\nEWPG\n\nSum the rotation values for each half:\n\n4 + 22 + 15 + 6 = 47\n\nRotate each character in the first half to its final position:\n\nZRKB\n\nRotate each character in the second half to its final position:\n\nBKSC\n\nCombine the two halves to obtain the decrypted DRM message:\n\nZRKB\n\n--Notes--\n\nThis is a very simple decryption process. We\u2019ll have to keep in mind the following:\n\n    The input string contains uppercase letters only.\n    The string\u2019s length is even.\n    If the string length is $> 15000$, you\u2019ll have to deal with a custom input string\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(solution(\"EWPGAJRB\"))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('KMDSSJYIRB') == 'ABCD'\nassert solution('GJKTQS') == 'ABCD'\nassert solution('SJ') == 'ABCD'\nassert solution('M') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABEF\") == \"ABCD\"\nassert solution(\"ZWEA\") == \"ABCD\"\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\nprint(solution('EWPGAJRB'))"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 2\nassert solution('a') == 0\nassert solution('aaaa') == 0\nassert solution('aab') == 1\n\n-----Solution-----\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcdefg\") == 0\nassert solution(\"\") == 0\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcde\") == 0\nassert solution(\"tactcoa\") == 3\n\n-----Solution-----\nimport string\nimport re\n\ns = stdin\n\ns = s.lower()\n\nl = list(s)\n\nl = [x for x in l if x in string.ascii_lowercase]\n\nl = [x for x in l if not x in re.findall('(.)\\\\1', l)]\n\nprint(len(l))\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abc') == 2\nassert solution('a') == 0\nassert solution('ab') == 1\nassert solution('aba') == 0\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 2\nassert solution('aab') == 0\nassert solution('abdc') == 2\n\"\"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc') == 2\nassert solution('pqr') == 0\nassert solution('zyx') == 3"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == 0\nassert solution(\"aa\") == 0\nassert solution(\"aaa\") == 0\nassert solution(\"aab\") == 1\nassert solution(\"aabc\") == 2\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 2\nassert solution('xyx') == 0\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abc\") == 2\nassert solution(\"abcdef\") == 1\n\n-----Solution-----\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"aah\") == \"go\"\nassert solution(\"a\") == \"go\"\nassert solution(\"h\") == \"go\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaah') == 'no'\nassert solution('h') == 'go'\nassert solution('a') == 'no'\nassert solution('aaaaaah') == 'go'\n\nprint(solution(input()))"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaah\\naaaaah') == 'no'\nassert solution('aaaaaah') == 'go'\n\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"aaaaaaaah\") == \"no\"\nassert solution(\"hhhhh\") == \"no\"\n\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaah\") == \"go\"\n\n\"\"\"\n\nprint(\"go\" if (int(stdin.split()[0].count(\"a\")) * 3 + int(stdin.split()[1].count(\"h\"))) > (int(stdin.split()[0].count(\"h\")) * 2) else \"no\")\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''aaah\naaaaah''') == 'no'\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaah') == 'go'\nassert solution('h') == 'no'\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaah\") == \"no\"\n\"\"\"\n\na = stdin[0]\nh = stdin[1]"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaah') == 'go'\n\nassert solution('h') == 'no'\n\nassert solution('aaahhh') == 'no'\n\nassert solution('h') == 'go'\n\nassert solution('h'*100) == 'go'"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A1B1A1B1\") == \"A\"\nassert solution(\"A2B2A2B2\") == \"A\"\nassert solution(\"A1B2A2B1\") == \"B\"\nassert solution(\"A1A2B1B2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2B1A2B2A1A2A2A1\") == \"B\"\nassert solution(\"A2B1B2B1A2B2A1A1A2A2A2A2A1\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A1B2A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2B1B2A1B2\") == \"B\"\nassert solution(\"B2A1B2A2B1B2A1B2\") == \"B\"\nassert solution(\"A1A2B2A2B1A1A2A1A2\") == \"A\"\nassert solution(\"A2A1B2A2B1B2A1B2A1\") == \"A\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2A2A2\") == \"B\"\nassert solution(\"A2B1A2B2A1A2A2A2A2\") == \"A\"\n\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B2A1B2A2B1A2A2A2') == 'B'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B2A1A2A2A2A2\") == \"B\"\nassert solution(\"B2A1A2A2A2A2A2\") == \"A\"\nassert solution(\"B2A2A2A2A2A2A2\") == \"B\"\nassert solution(\"A2A2A2A2A2A2A2\") == \"T\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1A2B1A2B2') == 'B'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2A\") == \"B\"\nassert solution(\"A1A2B1A2B2A1A2A2A2\") == \"B\"\nassert solution(\"A2B1A2B2A1A2A2A1\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A1A\") == \"A\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == '9'\n\"\"\"\n\nfrom typing import List, Dict, Optional\n\n\nclass Intersection:\n    def __init__(self, name: int):\n        self.name = name\n        self.outgoing_streets: Dict[str, int] = {}\n\n\nclass Street:\n    def __init__(self, start: int, end: int, name: str, time: int):\n        self.start = start\n        self.end = end\n        self.name = name\n        self.time = time\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4\\n0 2\\n2 2\\n3 3') == '7'\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1') == '10'\n\nimport sys; print(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 10 20 4') == '10'\nassert solution('1 3 10 20 2') == '15'\nassert solution('1 2 30 20 4') == '40'\nassert solution('1 3 30 20 2') == '40'\nassert solution('1 3 30 20 5') == '80'"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2\\n1 2 2\\n1 2 3') == '5'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n\"\"\") == '21'\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\nassert solution('D HHHeellloWooorrrrlld!!') == 'HHHeellloWooorrrrlld!!'\n\n\"\"\"\n\nimport re\n\ntext = stdin.strip()\nwhile len(text) < 1:\n    text = input()"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D HHHeellloWooorrrrlld!!\") == \"HHHeellloooWorrrrlldd!!\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\nSolution:\n    message = stdin[2:].replace(\"!\", \"1\").replace(\"?\", \"2\").replace(\".\", \"3\")\n    return ''.join(message[i:i + int(digit)] + digit for i, digit in enumerate(message))[:-1]\n\"\"\"\n\nimport re"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\n\nprint(solution(stdin.readlines()[0]))"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(    '2') == 'Bob'\nassert solution(    '3') == 'Alice'\n\nassert solution(    '4') == 'Alice'\nassert solution(    '10') == 'Bob'\n\nassert solution(    '9') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"5\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Alice'\n\nassert solution('3') == 'Bob'\n\nassert solution('9') == 'Alice'\n\nassert solution('7') == 'Bob'\n\nassert solution('1') == 'Alice'"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('2\\n1') == 'Alice'\nassert solution('2\\n3') == 'Bob'\n\nimport sys"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('6') == 'Alice'\nassert solution('8') == 'Alice'\nassert solution('10') == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(2)) == 'Alice'\nassert solution(str(3)) == 'Bob'\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 'Alice'\nassert solution('9') == 'Bob'\nassert solution('8') == 'Alice'\nassert solution('4') == 'Alice'\nassert solution('3') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2''') == 'Bob'\nassert solution('''5''') == 'Alice'\nassert solution('''1''') == 'Alice'\n\nassert solution('''5''') == 'Alice'\nassert solution('''1''') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('1 2 3') == '1+2=3'\nassert solution('2 3 5') == '2+3=5'\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\nassert solution('1 2 3') == '1 + 2 = 3'\nassert solution('2 2 2') == '2 * 2 = 4'\nassert solution('2 3 5') == '2 + 3 = 5'\nassert solution('2 3 2') == '2 / 2 = 1'\n\"\"\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\nassert solution('8 3 5') == '8 - 3 = 5'\nassert solution('4 5 7') == '4 * 5 = 20'\nassert solution('1 1 1') == '1 / 1 = 1'\nassert solution('10 3 9') == '10 * 3 = 30'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"9 9 10\") == \"9+9=10\"\nassert solution(\"12 -8 -4\") == \"12-8-4\"\nassert solution(\"7 5 9\") == \"7+5=9\"\nassert solution(\"5 2 8\") == \"5-2=3\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 8\") == \"5-3=2\"\nassert solution(\"5 3 8\") == \"5*3=15\"\nassert solution(\"5 3 8\") == \"5/3=2\"\nassert solution(\"5 3 8\") == \"5-3-8=7\"\n\"\"\"\n\n\"\"\"\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b if, elif, else\n\"\"\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 8\") == \"5 + 3 = 8\"\n\nassert solution(\"8 3 5\") == \"8 - 3 = 5\"\n\nassert solution(\"12 4 6\") == \"12 / 4 = 2.5\"\n\nassert solution(\"6 5 4\") == \"6 * 4 = 24\"\n\nassert solution(\"10 3 7\") == \"10 - 3 = 7\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"6 8 8\") == \"6+8=8\"\nassert solution(\"4 3 7\") == \"4+3=7\"\nassert solution(\"5 3 3\") == \"5+3=3\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 8') == '5+3=8'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"1 1 1\") == \"1+1=1\"\nassert solution(\"2 4 7\") == \"2+4=6\"\nassert solution(\"12 15 18\") == \"12+15=18\"\nassert solution(\"0 1 5\") == \"0+1=1\"\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"6 3 3\") == \"6+3=9\"\nassert solution(\"1 2 3\") == \"1+2=3\"\nassert solution(\"9 9 9\") == \"9+9=18\"\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\nSample Input:\n9\n2 3 2 3 2 3 1 2 1\nSample Output:\nNO\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n3 2 2 1 1 3 1 1') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n8\n3 2 2 1 1 3 1 1\n'''.strip()) == 'YES'\n\nassert solution('''\n5\n1 2 1 3 1\n'''.strip()) == 'NO'\n\nassert solution('''\n10\n3 1 1 3 1 1 2 3 1\n'''.strip()) == 'YES'\n\nassert solution('''\n10\n3 1 1 3 1 1 2 3 1\n'''.strip()) == 'YES'\n\nassert solution('''\n7\n1 1 3 1 1 1 2\n'''.strip()) == 'NO'"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == 'YES'\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == 'NO'\nassert solution(\"8\\n3 2 2 1 3 1 1 1\") == 'NO'"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8 3 2 1 1 3 1 1') == 'YES'\nassert solution('8 2 3 1 1 3 1 1') == 'NO'\nassert solution('7 2 3 1 1 3 1 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\n\nimport math\nimport sys\nassert sys.version_info >= (3, 7)"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"12\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"mummy\"\nassert solution(\"16\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"witch\"\nassert solution(\"20\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"demon\"\nassert solution(\"30\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"demon\"\n\n------Hints------\n1. Think about the problem from a perspective of the test cases.\n2. What data structure do you need to maintain for the votes?\n3. Can you write your own test cases?\n4. Write a solution in the most efficient way you think of it.\n5. Don't assume that all test cases are valid.\n6. Think about the edge cases.\n7. You need to think in a way that will make your code readable and not bloated.\n8. You can assume that there is a valid answer.\n9. Assume that the answer is unique.\n10. Try to come up with test cases for other possible scenarios.\n11. Is there a pattern for the input string?\n12. Try to make use of the pattern.\n13. Think about the corner cases.\n14. Use the hint to complete the code.\n15. You don't need to write the code for the runtime test, but you can write the code for the correctness test.\n\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''\n5\na\na\na\na\na\n'''\n) == 'a'\n\nassert solution(\n'''\n5\nb\nb\nc\nd\nd\n'''\n) == 'b'\n\nassert solution(\n'''\n5\nc\nd\nd\ne\nf\n'''\n) == 'd'\n\nassert solution(\n'''\n5\nf\ng\nh\ni\n'''\n) == 'f'\n\nassert solution(\n'''\n5\nd\ne\ne\ne\ne\n'''\n) == 'e'"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\"\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\"\"\") == \"ghost\"\nassert solution(\"\"\"12\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\"\"\") == \"ghost\"\nassert solution(\"\"\"13\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\"\"\") == \"ghost\"\n\n-----Explanation-----\nThe costumes in the contest are categorized in the following categories:\n\n$D$ ghosts\n$D$ witches\n$D$ witches and ghosts\n$D$ mummies\n$D$ mummies and witches\n$D$ mummies and witches and ghosts\n$D$ mummies and ghosts\n$D$ mummies and ghosts and witches\n$D$ mummies and ghosts and witches and ghosts\n$D$ demons\n$D$ demons and witches\n$D$ demons and witches and ghosts\n$D$ demons and ghosts\n$D$ demons and ghosts and witches\n$D$ demons and ghosts and witches and ghosts\nNote that a costume is allowed only in one of the 6 categories.\n\nThe first line of input contains the number of colleagues you have polled.\nThe following lines contain the responses of your colleagues.\n\nAll the characters in the strings are lower case letters.\n\nIt is guaranteed that the number of characters in the string for each colleague will be at least 1 and at most 20.\n\nAll characters in each response will be distinct.\n\nEach response is guaranteed to be one of the 6 categories described above.\n\n-----Constraints-----\n1 <= N <= 1000\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\"\nassert solution(\"5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\"\nassert solution(\"6\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\\nmummy\\nwitch\\ndemon\"\nassert solution(\"7\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\\nmummy\\nwitch\\ndemon\"\nassert solution(\"8\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\\nmummy\\nwitch\\ndemon\\n\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ghost') == 'ghost'\nassert solution('mummy') =='mummy'\nassert solution('witch') == 'witch'\nassert solution('demon') == 'demon'\nassert solution('witch', 'ghost') == 'ghost'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\nmummy\\nghost\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"10\\nwitch\\ndemon\\nmummy\\nghost\\ndemon\\ndemon\\ndemon\") == \"witch\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\"\nassert solution(\"demon\\ndemon\\ndemon\\ndemon\\n\") == \"demon\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\\nmummy\\nwitch\"\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('5\\nmummy\\nghost\\ndemon\\ndemon') == 'ghost'\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"\n\n\"\"\"\nInput:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nOutput:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\"\"\"\nprint(\"Passed\")\n\n\"\"\"\nOperator    Meaning    Example\n+            Addition    a + b    \n-            Subtraction    a - b    \n*            Multiplication    a * b    \n/            Division    a / b    \n%            Modulus    a % b    \n**            Exponentiation    a ** b    \n//            Floor division    a // b    \n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nAlbum\\nArtist\\nSong_Title\\n\") == \"Album Artist Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n\"\n\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0412\u044b \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0435 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u043d\u044f\u0442\u0438\u0439 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435: \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0446\u0430 \u0437\u0430\u043d\u044f\u0442\u0438\u044f, \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0437\u0430\u043d\u044f\u0442\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0442\u0440\u043e\u043a \u0442\u0435\u043a\u0441\u0442\u0430 \u0437\u0430\u043d\u044f\u0442\u0438\u044f. \u0420\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u043e\u043c \u0432\u0430\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435, \u0442.\u0435. \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u0421\u0442\u0440\u043e\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432.\n\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0434\u043b\u044f \u0437\u0430\u043d\u044f\u0442\u0438\u0439 \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u0434\u0435\u0442\u0441\u0442\u0432\u0430 \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0430\u043a\u0438\u0445 \u043f\u0440\u0438\u0447\u0438\u043d, \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c (\u0447\u0442\u043e \u0431\u044b \u043d\u0435 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u0438\u0441\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043f\u043e \u0432\u0441\u0435\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c, \u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u0442\u0430\u043a\u0430\u044f \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u0442\u0430\u0440\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u043b\u0438 \u043d\u0435\u0442). \u0412 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u0448\u043a\u043e\u043b\u044c\u043d\u044b\u0435 \u043a\u043d\u0438\u0433\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u0435\u0442\u0435\u0439. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c parents \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439. \u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u043d\u0430"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"\\\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nAlbum\\nArtist\\nSong_Title\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nSong_Title\\nAlbum\\nArtist\") == \"\"\"Song_Title Album Artist\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nSong_Title\\nAlbum\\nArtist\\nLength_seconds\") == \"\"\"Length_seconds Song_Title Album Artist\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nLength_seconds\\nArtist\\nSong_Title\") == \"\"\"Length_seconds Artist Song_Title Album\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n') == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\n\n-----Problem-----\nThe Music Room has a list of songs (named 0 through $n - 1) and a list of priorities for each song. The priorities are $1$ to $100$ and are given in the order of the songs. The priorities are sorted, from least to greatest, within each priority.\n\nFor example, if the list of priorities for the first song was $6$, $5$, $10$, $7$, $20$, $9$ and $11$, the order would be, in numerical order:\n\n1 4 6 7 9 11\n\nand the songs could be ordered like this:\n\n0 1 2 3 4\n\nSo, the following is a valid song order:\n\n3 1 4 2 0\n\nThe first line contains an integer $n$, the number of songs. The next line contains $n$ integers, one per song, which is the priority for each song (using $1$ to $100$). The next line contains $n$ integers, one per song, which is $1$ if the song is being played, and $0$ otherwise. The song order can be printed in any order.\n\n-----Solution-----\nThe function solution takes a single argument, a string which represents the input for the song order. The function should return a string, which represents the output for the song order.\n\nThe first line of the input string is the number of songs ($n$), separated by a single space. The next line contains the priority for each song, separated by single spaces. The next line contains $n$ binary values, one for each song, where $1$ means that the song is being played, and $0$ means that the song is not being played. The song order can be printed in any order.\n\nExample:\n\nsolution('5\\n6 5 10 7 20 9 11\\n1 1 1 0 1 1 1')\n--> '3 1 4 2 0'\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\n\n\"\"\"\n\nimport unittest\nimport sys\nimport timeit\nimport json\nimport heapq\nimport math\n\nclass Node(object):\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\n    def __repr__(self):\n        return \"Node({}, {})\".format(self.key, self.value)\n\nclass DoubleLinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def __repr__(self):\n        return \"DoubleLinkedList({})\".format(self.to_list())\n\n    def to_list(self):\n        if not self.head:\n            return []\n        res = []\n        curr = self.head\n        while curr:\n            res.append(curr.key)\n            curr = curr.next\n        return res\n\n    def append(self, node):\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n\n    def prepend(self, node):\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            node.next = self.head\n            self.head.prev = node\n            self.head = node\n\n    def remove_node(self, node):\n        if node.prev:\n            node.prev.next = node.next\n        else:\n            self.head = node.next\n        if node.next:\n            node.next.prev = node.prev\n        else:\n            self.tail = node.prev\n\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        self.cache = dict()\n        self.lru = DoubleLinkedList()\n        self.capacity = capacity\n\n    def __repr__(self):\n        return \"LRUCache({})\".format(self.cache)\n\n    def get(self, key):\n        # if key not in self.cache:\n        #     return -1\n        # else:\n        #     self.lru.remove_node(self.cache[key])\n        #     self.lru.append(self.cache[key])\n        #     return self.cache[key].value\n        if key not in self.cache:\n            return -1\n        else:\n            curr = self.cache[key]\n            self.lru.remove_node(curr)\n            self.lru.append(curr)\n            return curr.value\n\n    def set(self, key, value):\n        if key in self.cache:\n            curr = self.cache[key]\n            curr.value = value\n            self.lru.remove_node(curr)\n            self.lru.append(curr)\n            return\n        if len(self.cache) == self.capacity:\n            self.cache.pop(self.lru.head.key)\n            self.lru.remove_node(self.lru.head)\n        curr = Node(key, value)\n        self.cache[key] = curr\n        self.lru.append(curr)\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2 10 7) == \"YES\"\nassert solution(5 10 7) == \"YES\"\nassert solution(7 10 7) == \"NO\"\nassert solution(7 2 7) == \"YES\"\nassert solution(7 2 3) == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 5\\n3 2 1 2 3\") == \"NO\"\n\nassert solution(\"6 10 5\\n3 1 1 3 1 1 3 1 1 3\") == \"YES\"\n\nassert solution(\"7 6 5\\n3 1 2 3 3 1 1 2 3\") == \"YES\"\n\nassert solution(\"7 10 5\\n3 2 3 3 2 3 3 3 2 3\") == \"NO\"\n\nassert solution(\"2 10 2\\n4 3 2 3\") == \"YES\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('1 10 10\\n5 5 5 5 5 5 5') == 'NO'\nassert solution('4 4 3\\n2 1 2 2') == 'YES'\nassert solution('2 2 3\\n1 2 1') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n5 5 5 5 5 5 5\\n\") == \"YES\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"1 10 7\\n5 5 5 5 5 5 5\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\n\n-----Explanation-----\nIn the first example, the bricks that are still available are of lengths 5, 5, 5, 5, 5, 5, 5. The optimal placement of these bricks can be seen in the last figure.\nIn the second example, the wall cannot be built because all bricks are used up.\n''')\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''3 10 9\n5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5''') == 'YES'\nassert solution('''3 10 9\n5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5''') == 'NO'\nassert solution('''1 10 9\n5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5''') == 'NO'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nNYYY\\nNYNN\\nYYNN\\nYYNY\") == \"Not Effective\"\nassert solution(\"9\\nNNNN\\nYYYY\\nYYNN\\nYYYY\\nYYNN\\nYYYY\\nYYNN\\nNNNN\") == \"66.666667\"\nassert solution(\"9\\nNNNN\\nYNYY\\nYYNN\\nYYYY\\nYYNN\\nYYYY\\nYYNN\\nNNNN\") == \"50.000000\"\n\"\"\"\n\nn = int(input())\ncount = 0\nstrain_A = 0\nstrain_B = 0\nstrain_C = 0\n\nfor i in range(n):\n    if \"Y\" in list(input()):\n        count += 1\n    if \"A\" in list(input()):\n        strain_A += 1\n    if \"B\" in list(input()):\n        strain_B += 1\n    if \"C\" in list(input()):\n        strain_C += 1"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY') == 'Not Effective'\n\"\"\"\n\n\"\"\"\nN = int(stdin.readline())\nfor i in range(0, N):\n    strain = stdin.readline().strip()\n    strain = strain[1:]\n    strain = strain[:len(strain) - 1]\n    print('Not Effective' if strain == 'YYNN' or strain == 'YYNY' or strain == 'YYYN' else strain)\n\"\"\"\n\nN = int(input())\nstrain = ['Not Effective' for i in range(0, 3)]\nfor i in range(0, N):\n    s = input().strip()\n    if s[0] == 'Y':\n        if s[1:].count('Y') == 3:\n            strain[0] = 'YYNN'\n        elif s[1:].count('Y') == 2:\n            strain[0] = 'YYNY'\n        elif s[1:].count('Y') == 1:\n            strain[0] = 'YYYN'\n    else:\n        if s[1:].count('Y') == 3:\n            strain[1] = 'YYNN'\n        elif s[1:].count('Y') == 2:\n            strain[1] = 'YYNY'\n        elif s[1:].count('Y') == 1:\n            strain[1] = 'YYYN'\n    if s[1:].count('N') == 3:\n        strain[2] = 'NNNN'\n    elif s[1:].count('N') == 2:\n        strain[2] = 'NNNY'\n    elif s[1:].count('N') == 1:\n        strain[2] = 'NNYN'\n\nfor i in range(0, 3):\n    print(strain[i])\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"6\\nYYNY\\nYYNN\\nYYYN\\nYYYN\\nYYYN\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"66.666667, 50.000000, 66.666667, 50.000000, 66.666667, 50.000000, 66.666667, 50.000000\"\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY''') == '66.666667, 50.000000, 66.666667, 66.666667, 50.000000, 66.666667, 50.000000, 66.666667, 50.000000'\nassert solution('''10\nYYNN\nYYNY\nYYYY\nYYYN\nYYYN\nYYYN\nYYYN\nYYNY\nYYYY\nYYYY\nYYYY''') == 'Not Effective, 66.666667, 66.666667, 50.000000, 66.666667, 66.666667, 50.000000, 66.666667, 66.666667, 50.000000'\n\n-----Problem-----\nYou will be given the number of participants in a vaccine trial. You will be given three strings of length 4 each of which contain either the letter \u2018Y\u2019 or the letter \u2018N\u2019, where \u2018Y\u2019 represents a participant is vaccinated and \u2018N\u2019 represents a participant is not vaccinated. You will also be given the number of participants who have been infected by each of the three strains (A, B, and C), in the control group. Your task is to calculate the vaccine efficacy against infection for each strain and to report the vaccine efficacy against infection for each strain in the order of A, B, and C.\n\nFor example, if the number of participants is 10, the first line of input will contain a string of length 4 which will contain the letter \u2018Y\u2019. The second line will contain the string \u2018NNYY\u2019. The third line will contain the string \u2018NNYY\u2019 and so on. Each string will represent a participant in the vaccine trial. If the participant is vaccinated, their fourth character will contain the letter \u2018Y\u2019 and if the participant is not vaccinated, their fourth character will contain the letter \u2018N\u2019. The last line will contain the number of participants infected by strain A, B, and C. If a particular strain is not present in the sample input, you will receive the message Not Effective.\n\nNote: The sample test case was solved by the author's own solution.\n\n-----Solution-----\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"NYNYNNYYNNYYN\") == \"66.666667\"\nassert solution(\"YYYYNNYYNNYYN\") == \"Not Effective\"\nassert solution(\"NNYYNNYYNNYYN\") == \"50.000000\"\nassert solution(\"NNNNNNNNNNNN\") == \"50.000000\"\nassert solution(\"YNNNNYYYNNNN\") == \"Not Effective\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN') == 'Not Effective\\n66.666667\\n50.000000'\nprint(solution(input()))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"66.666667\\n50.000000\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\nprint(solution(\"9\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\"))"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"AAABC\") == \"Adrian\"\nassert solution(\"CABAB\") == \"Goran\"\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BAACC') == 'B'\nassert solution('AAACC') == 'A'\nassert solution('ABBAC') == 'Goran'\nprint(solution('BAACC'))\nprint(solution('AAACC'))\nprint(solution('ABBAC'))\n'''"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDAB\") == \"Bruno\"\nassert solution(\"CABDAA\") == \"Bruno\"\nassert solution(\"ABCDBA\") == \"Goran\"\nassert solution(\"ABCDBAA\") == \"Adrian\"\nassert solution(\"ABCDBAB\") == \"Adrian\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BAACC') == '3 BRUNO'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BAACC') == '3'\nassert solution('AABBC') == '2'\nassert solution('BAABB') == '2'\nassert solution('ABBAC') == '3'\nassert solution('BBBAA') == '2'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BAACC') == '3'\nassert solution('BAABC') == 'Bruno'\nassert solution('AAACB') == 'Adrian'\nassert solution('CCBAA') == 'Adrian'\n\nassert solution('BABCA') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AAAB\") == \"Bruno\"\nassert solution(\"ABCB\") == \"Goran\"\nassert solution(\"CABA\") == \"Adrian\"\nassert solution(\"BAC\") == \"Adrian\"\nassert solution(\"ABBC\") == \"Goran\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCCBA\") == \"Bruno\"\nassert solution(\"AABBC\") == \"Bruno\"\nassert solution(\"AABACC\") == \"Adrian\"\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BAACC') == 'Bruno'\nassert solution('BAABC') == 'Bruno'\nassert solution('CBAAC') == 'Bruno'\nassert solution('CBAACBA') == 'Bruno'\nassert solution('CBABAA') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BBBACCCBA') == 'Bruno'\n\"\"\"\n\nimport string\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == '3 543'\nprint(solution(stdin))\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nprint(solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\n3 E right\n10 A wrong\n30"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == '3 543'\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\"\"\") == [3, 543]\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\") == \"4 502\"\n\n\"\"\"\n\n\nimport re\nimport sys\nimport collections\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\"\"\") == \"3 543\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n''') == '3 543'\nprint('Teste 1 OK')\nassert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n''') == '3 543'\nprint('Teste 2 OK')\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '4 502'\nprint('Teste 3 OK')\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '4 502'\nprint('Teste 4 OK')\n\nprint('Teste 5 OK')\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '4 502'\nprint('Teste 6 OK')\nprint('Teste 7 OK')\nprint('Teste 8 OK')\nprint('Teste 9 OK')\nprint('Teste 10 OK')\nprint('Teste 11 OK')\nprint('Teste 12 OK')\nprint('Teste 13 OK')\nprint('Teste 14 OK')\nprint('Teste 15 OK')\nprint('Teste 16 OK')\nprint('Teste 17 OK')\nprint('Teste 18 OK')\nprint('Teste 19 OK')\nprint('Teste 20 OK')\nprint('Teste 21 OK')\nprint('Teste 22 OK')\nprint('Teste 23 OK')\nprint('Teste 24 OK')\nprint('Teste 25 OK')\nprint('Teste 26 OK')\nprint('Teste 27 OK')\nprint('Teste 28 OK')\nprint('Teste 29 OK')\nprint('Teste 30 OK')\nprint('Teste 31 OK')\nprint('Teste 32 OK')\nprint('Teste 33 OK')\nprint('Teste 34 OK')\nprint('Teste 35 OK')\nprint('Teste 36 OK')\nprint('Teste 37 OK')\nprint('Teste 38 OK')\nprint('Teste 39 OK')\nprint('Teste 40 OK')\nprint('Teste 41 OK')\nprint('Teste 42 OK')\nprint('Teste 43 OK')\nprint('Teste 44 OK')\nprint('Teste 45 OK')\nprint('Teste 46 OK')\nprint('Teste 47 OK')\nprint('Teste 48 OK')\nprint('Teste 49 OK')\nprint('Teste 50 OK')\nprint('Teste 51 OK')\nprint('Teste 52 OK')\nprint('Teste 53 OK')\nprint('Teste 54 OK')\nprint('Teste 55 OK')\nprint('Teste 56 OK')\nprint('Teste 57 OK')\nprint('Teste 58 OK')\nprint('Teste 59 OK')\nprint('Teste 60 OK')\nprint('Teste 61 OK')\nprint('Teste 62 OK')\nprint('Teste 63 OK')\nprint('Teste 64 OK')\nprint('Teste 65 OK')\nprint('Teste 66 OK')\nprint('Teste 67 OK')\nprint('Teste 68 OK')\nprint('Teste 69 OK')\nprint('Teste 70 OK')\nprint('Teste 71 OK')\nprint('Teste 72 OK')\nprint('Teste 73 OK')\nprint('Teste 74 OK')\nprint('Teste 75 OK')\nprint('Teste 76 OK')\nprint('Teste 77 OK')\nprint('Teste 78 OK')\nprint('Teste 79 OK')\nprint('Teste 80 OK')\nprint('Teste 81 OK')\nprint('Teste 82 OK')\nprint('Teste 83 OK')\nprint('Teste 84 OK')\nprint('Teste 85 OK')\nprint('Teste 86 OK')\nprint('Teste 87 OK')\nprint('Teste 88 OK')\nprint('Teste 89 OK')\nprint('Teste 90 OK')\nprint('Teste 91 OK')\nprint('Teste 92 OK')\nprint('Teste 93 OK')\nprint('Teste 94 OK')\nprint('Teste 95 OK')\nprint('Teste 96 OK')\nprint('Teste 97 OK')\nprint('Teste 98 OK')\nprint('Teste 99 OK')\nprint('Teste 100 OK')\nprint('Teste 101 OK')\nprint('Teste 102 OK')\nprint('Teste 103 OK')\nprint('Teste 104 OK')\nprint('Teste 105 OK')\nprint('Teste 106 OK')\nprint('Teste 107 OK')\nprint('Teste 108 OK')\nprint('Teste 109 OK')\nprint('Teste 110 OK')\nprint('Teste 111 OK')\nprint('Teste 112 OK')\nprint('Teste 113 OK')\nprint('Teste 114 OK')\nprint('Teste 115 OK')\nprint('Teste 116 OK')\nprint('Teste 117 OK')\nprint('Teste 118 OK')\nprint('Teste 119 OK')\nprint('Teste 120 OK')\nprint('Teste 121 OK')\nprint('Teste 122 OK')\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n''') == [3, 543]\n\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == [4, 502]\n\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == [4, 502]\n\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == [4, 502]\n\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == [4, 502]"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"sample_input.txt\")) == \"3 543\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\"\n\nassert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\nassert solution('10 10\\n
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\"\"\"\n\n\"\"\"\nTime limit: 20 seconds\nMemory limit: 512 MB\n\nLet's learn how to create the minimum hop distance between the tiles\n\nProblem Statement\n\nYou are given a matrix of integers A of size n x n.\n\nA hop between two cells (x1, y1) and (x2, y2) is defined as the following:\n\n* Choose a cell (x, y) with x >= x1 and y >= y1.\n* If x2 - x1 = y2 - y1, then hop (x1, y1) and (x2, y2) is defined as the number of steps required for a frog to jump from (x1, y1) to (x2, y2).\n* Otherwise, hop (x1, y1) and (x2, y2) is defined as the minimum of the following two numbers:\n    * The smallest integer k > 0 such that x2 - x1 = k * y1.\n    * The smallest integer k > 0 such that x2 - x1 = -k * y1.\n    \nNote: A hop between two cells (x1, y1) and (x2, y2) is defined as (x1 - x2) + (y1 - y2) if they are not equal.\n\nYou have to answer q queries of the form:\n\nwhat is the minimum hop distance between (x1, y1) and (x2, y2)?\n\nInput\n\nThe first line of input contains two space-separated integers n and q (1 \u2264 n \u2264 50 and 1 \u2264 q \u2264 500). The next line contains n space-separated integers a_i (1 \u2264 a_i \u2264 k).\n\nOutput\n\nPrint the answer to each query of type 3 in a separate line.\n\nExample\n\nInput:\n4 3\n1 1 1 2 2\n\nOutput:\n1\n3\n1\n1\n\nExplanation:\nQuery 1 is (1, 1), (2, 2). Since x1 = x2 = 1, the answer is 1.\nQuery 2 is (1, 1), (2, 3), (3, 4) and (4, 5). Since x1 = x2 = 1 and x3 = x4 = x5 = 2, the answer is 3.\nQuery 3 is (1, 1), (2, 2), (3, 3) and (4, 4). Since x1 = x2 = 1 and x3 = x4 = 3, the answer is 1.\nQuery 4 is (1, 1), (2, 2), (3, 3), (4, 5) and (5, 6). Since x1 = x2 = 1 and x3 = x4 = x5 = 1, the answer is 1.\n\"\"\"\n\nfrom typing import List\n\n\nclass Hop(object):\n    def __init__(self, n: int, k: int, a: List[int]):\n        self.n, self.k, self.a = n, k, a\n\n    def process_query(self, x1: int, y1: int, x2: int, y2: int) -> int:\n        res = 0\n        if x1 == x2 and y1 == y2:\n            return res\n\n        if (x2 - x1) % y1 == 0:\n            res = x2 - x1 + y2 - y1\n        else:\n            k = (x2 - x1) // y1\n            if k >= 0:\n                res = k * y1\n            else:\n                res = -k * y1\n\n        return res\n\n    def process_query2(self, x1: int, y1: int, x2: int, y2: int) -> int:\n        if x1 == x2 and y1 == y2:\n            return 0\n\n        return min(abs(x1 - x2) + abs(y1 - y2), abs(x1 - x2) + abs(self.k * y1 - y2), abs(x1 - x2) + abs(y1 - self.k * y2))\n\n    def solve(self) -> None:\n        for query in range(self.q):\n            x1, y1, x2, y2 = map(int, self.stdin.readline().split())\n\n            self.stdout.write(str(self.process_query2(x1, y1, x2, y2)))\n            self.stdout.write('\\n')\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n') == '5'\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4\\n5 6') == '1 2\\n3 4\\n5 6'\nassert solution('1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n21 22\\n23 24\\n25 26\\n27 28\\n29 30\\n31 32\\n33 34\\n35 36\\n37 38\\n39 40\\n41 42\\n43 44\\n45 46\\n47 48\\n49 50') == '1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n21 22\\n23 24\\n25 26\\n27 28\\n29 30\\n31 32\\n33 34\\n35 36\\n37 38\\n39 40\\n41 42\\n43 44\\n45 46\\n47 48\\n49 50'\n'''\n\nimport sys\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '5')\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '-1')\n\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '5')\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '-1')\n\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '5')\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '-1')\n\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '5')\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '-1')\n\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '5')\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '-1')\n\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1'), '5')\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\n----Problem-----\n\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n1 5 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(2)) == \"edward is right\"\nprint(solution(str(0)))\nassert solution(str(0)) == \"edward is right\"\nprint(solution(str(0)))\n\n-----Explanation-----\nThe first line of input contains two integers that describe the number of boiling and total seconds of watching. The second line contains $N$ descriptions of boiling, i.e. pairs of integers that describe the range of seconds when Edward looked away from the pot.\n\nThis means that there is a point in time where all the pots started boiling at the same time.\n\nIf all the pots started boiling at the same time, then the second line should contain all the same values, and the value of the first element of the line will be the earliest time the pots started boiling.\n\nSince there is only one point in time when all the pots started boiling, the answer is edward is right, as the point in time is the same for all the pairs of integers in the line, and edward is right because he looked away from the pot during seconds from the earliest time to the earliest time.\n\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 7\") == \"edward is right\"\nassert solution(\"2\\n5 5\") == \"gunilla has a point\"\n\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nn = int(input())\nc = 0\nfor i in range(n):\n    a, b = map(int, input().split())\n    if a > c or b < c:\n        print(\"edward is right\")\n        break\n    else:\n        c = b\nelse:\n    print(\"gunilla has a point\")\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 7\\n5 5') == 'edward is right'\n\nSample Input:\n2\n1 7\n5 5\nSample Output:\nedward is right\n\nSample Input:\n3\n0 1\n5 5\n6 6\nSample Output:\nedward is right\n\nSample Input:\n3\n1 7\n5 5\n1 7\nSample Output:\nedward is right\n'''"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('3\\n5 10\\n7 9\\n7 9') == 'edward is wrong'\nassert solution('3\\n2 9\\n1 3\\n1 3') == 'gunilla has a point'\n\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n7') == 'edward is right'\nassert solution('2\\n5\\n5') == 'gunilla has a point'\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('2\\n1 7\\n5 5') == 'edward is right'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('2\\n1 7\\n5 5') == 'edward is right'"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 7\\n5 5\") == \"gunilla has a point\"\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 11\\n'\n                 't 1 10\\n'\n                 't 1 2\\n'\n                 't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                 't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n'\n\nassert solution('10 10\\n'\n                 't 1 2\\n'\n                 't 1 3\\n'\n                 't 1 4\\n'\n                 't 1 5\\n'\n                 't 1 6\\n'\n                's 1\\n'\n                's 1\\n'\n                's 1\\n'\n                's 1\\n') == '1\\n'\n\nassert solution('10 11\\n'\n                 't 1 10\\n'\n                 't 1 2\\n'\n                 't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                 't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '2\\n'\n\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''4\n4\n4\n1\n2\n2\n4\n'''\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 11\\n\\nt 1 10\\n\\nt 1 2\\n\\nt 1 3\\n\\ns 1\\n\\ns 2\\n\\ns 3\\n\\n\\ns 4\\n\\n\\nt 5 6\\n\\ns 5\\n\\ns 6\\n\\n\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('10\\n11') == '11'\nassert solution('1\\n2\\n3\\n4') == '4'\nassert solution('10\\n11\\n1\\n2\\n3\\n4') == '4'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n-----Test Cases-----\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\" == 4,4,4,1,2,2,4\n\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''4\n4\n4\n1\n2\n2\n4\n'''\n\nassert solution('''9 9\nt 1 3\nt 2 3\ns 1\ns 1\ns 1\nt 4 6\nt 5 6\nt 6 8\ns 2\nt 7 9\ns 4\ns 7\ns 7\nt 10 11\ns 10\nt 10 12\ns 11\nt 12 14\ns 12\nt 12 16\ns 13\ns 14\ns 15\nt 17 18\ns 16\nt 18 19\ns 18\ns 19\ns 20\nt 20 21\ns 21\nt 21 22\ns 22\nt 22 23\ns 23\nt 23 24\ns 24\nt 24 25\ns 25\nt 25 26\ns 26\nt 26 27\ns 27\nt 27 28\ns 28\nt 28 29\ns 29\nt 29 30\ns 30\nt 30 31\ns 31\nt 31 32\ns 32\nt 32 33\ns 33\nt 33 34\ns 34\nt 34 35\ns 35\nt 35 36\ns 36\nt 36 37\ns 37\nt 37 38\ns 38\nt 38 39\ns 39\nt 39 40\ns 40\nt 40 41\ns 41\nt 41 42\ns 42\nt 42 43\ns 43\nt 43 44\ns 44\nt 44 45\ns 45\nt 45 46\ns 46\nt 46 47\ns 47\nt 47 48\ns 48\nt 48 49\ns 49\nt 49 50\ns 50\nt 50 51\ns 51\nt 51 52\ns 52\nt 52 53\ns 53\nt 53 54\ns 54\nt 54 55\ns 55\nt 55 56\ns 56\nt 56 57\ns 57\nt 57 58\ns 58\nt 58 59\ns 59\nt 59 60\ns 60\nt 60 61\ns 61\nt 61 62\ns 62\nt 62 63\ns 63\nt 63 64\ns 64\nt 64 65\ns 65\nt 65 66\ns 66\nt 66 67\ns 67\nt 67 68\ns 68\nt 68 69\ns 69\nt 69 70\ns 70\nt 70 71\ns 71\nt 71 72\ns 72\nt 72 73\ns 73\nt 73 74\ns 74\nt 74 75\ns 75\nt 75 76\ns 76\nt 76 77\ns 77\nt 77 78\ns 78\nt 78 79\ns 79\nt 79 80\ns 80\nt 80 81\ns 81\nt 81 82\ns 82\nt 82 83\ns 83\nt 83 84\ns 84\nt 84 85\ns 85\nt 85 86\ns 86\nt 86 87\ns 87\nt 87 88\ns 88\nt 88 89\ns 89\nt 89 90\ns 90\nt 90 91\ns 91\nt 91 92\ns 92\nt 92 93\ns 93\nt 93 94\ns 94\nt 94 95\ns 95\nt 95 96\ns 96\nt 96 97\ns 97\nt 97 98\ns 98\nt 98 99\ns 99\nt 99 100\ns 100\nt 100 101\ns 101\nt 101 102\ns 102\nt 102 103\ns 103\nt 103 104\ns 104\nt 104 105\ns 105\nt 105 106\ns 106\nt 106 107\ns 107\nt 107 108\ns 108\nt 108 109\ns 109\nt 109 110\ns 110\nt 110 111\ns 111\nt 111 112\ns 112\nt 112 113\ns 113\nt 113 114\ns 114\nt 114 115\ns 115\nt 115 116\ns 116\nt 116 117\ns 117\nt 116 118\ns 118\nt 118 119\ns 119\nt 119 120\ns 120\nt 119 121\ns 121\nt 119 122\ns 122\nt 119 123\ns 123\nt 119 124\ns 124\nt 119 125\ns 125\nt 119 126\ns 126\nt 119 127\ns 127\nt 119 128\ns 128\nt 119 129\ns 129\nt 119 130\ns 130\nt 119 131\ns 131\nt 119 132\ns 132\nt 119 133\ns 133\nt 119 134\ns 134\nt 119 135\ns 135\nt 119 136\ns 136\nt 119 137\ns 137\nt 119 138\ns 138\nt 119 139\ns 139\nt 119 140\ns 140\nt 119 141\ns 141\nt 119 142\ns 142\nt 119 143\ns 143\nt 119 144\ns 144\nt 119 145\ns 145\nt 119 146\ns 146\nt 119 147\ns 147\nt 119 148\ns 148\nt 119 149\ns 149\nt 119 150\ns 150\nt 119 151\ns 151\nt 119 152\ns 152\nt 119 153\ns 153\nt 119 154\ns 154\nt 119 155\ns 155\nt 119 156\ns 156\nt 119 157\ns 157\nt 119 158\ns 158\nt 119 159\ns 159\nt 119 160\ns 160\nt 119 161\ns 161\nt 119 162\ns 162\nt 119 163\ns 163\nt 119 164\ns 164\nt 119 165\ns 165\nt 119 166\ns 166\nt 119 167\ns 167\nt 119 168\ns 168\nt 119 169\ns 169\nt 119 170\ns 170\nt 119 171\ns 171\nt 119 172\ns 172\nt 119 173\ns 173\nt 119 174\ns 174\nt 119 175\ns 175\nt 119 176\ns 176\nt 119 177\ns 177\nt 119 178\ns 178\nt 119 179\ns 179\nt 119 180\ns 180\nt 119 181\ns 181\nt 119 182\ns 182\nt 119 183\ns 183\nt 119 184\ns 184\nt 119 185\ns 185\nt 119 186\ns 186\nt 119 187\ns 187\nt 119 188\ns 188\nt 119 189\ns 189\nt 119 190\ns 190\nt 119 191\ns 191\nt 119 192\ns 192\nt 119 193\ns 193\nt 119 194\ns 194\nt 119 195\ns 195\nt 119 196\ns 196\nt 119 197\ns 197\nt 119 198\ns 198\nt 119 199\ns 199\nt 119 200\ns 200\nt 119 201\ns 201\nt 119 202\ns 202\nt 119 203\ns 203\nt 119 204\ns 204\nt 119 205\ns 205\nt 119 206\ns 206\nt 119 207\ns 207\nt 119 208\ns 208\nt 119 209\ns 209\nt 119 210\ns 210\nt 119 211\ns 211\nt 119 212"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n\"\n\nassert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n\"\n\nassert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"1\\n\"\n\nassert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"2\\n\"\n\nassert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    10 11\n    t 1 10\n    t 1 2\n    t 1 3\n    s 1\n    s 2\n    s 3\n    s 4\n    t 5 6\n    s 5\n    s 6\n    s 10\n    \"\"\"\n) == \"\"\"\n4\n4\n4\n1\n2\n2\n4\n\"\"\"\nassert solution(\n    \"\"\"\n    10 10\n    t 1 10\n    t 1 2\n    t 1 3\n    s 1\n    s 2\n    s 3\n    s 4\n    t 5 6\n    s 5\n    s 6\n    s 10\n    \"\"\"\n) == \"\"\"\n4\n4\n4\n1\n2\n2\n4\n\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n\" * 2\n\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2016\\n1982\\n2016'\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\nprint(solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\"))\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\nprint(solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\"))"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2015\\n1982\\n2016\\n\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\nassert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n2016\\n2016\"\n\nSample Input:\n3\nIceland 2016\nSweden 2015\nIceland 1982\n1\nSweden 2\nSample Output:\n2016\n2016\nSample Input:\n2\nIceland 2016\nIceland 2018\n3\nSweden 2018\nSweden 2019\nIceland 2019\n1\nSweden 2016\nSample Output:\n2016\n2018\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\nprint(\"Exercise 0 is correct.\")\n\n-----Solution-----\n\nimport re"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999''') == '''2015\n1982\n2016\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n'\n    'Iceland 2016\\n'\n    'Sweden 2015\\n'\n    'Iceland 1982\\n'\n    'Norway 1999\\n'\n    '3\\n'\n    'Sweden 1\\n'\n    'Iceland 1\\n'\n    'Iceland 2\\n'\n) == '2015\\n'\n\nprint('Hooray!')\n\nSample Input:\n4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n2\nNorway 1\nIceland 2\nSample Output:\n1982\n2016\nHooray!\n\nprint(solution(input()))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016'\n\nSolution\n1. Read in the number of trips that Grandpa Bernie went on.\n2. Read in all of Grandpa Bernie\u2019s trips: name of the country and the year in which Grandpa Bernie went to that country.\n3. Read in the number of queries.\n4. For each query, read in the country name and the query number.\n5. Output the year in which Grandpa Bernie went to the country corresponding to the query number in the query.\n\nSOLUTION\n1. Read in the number of trips that Grandpa Bernie went on.\n\nn = int(stdin.readline())\n\n2. Read in all of Grandpa Bernie\u2019s trips: name of the country and the year in which Grandpa Bernie went to that country.\n\nvisits = []\nfor i in range(n):\n    country, year = stdin.readline().split()\n    year = int(year)\n    visits.append((country, year))\n\n3. Read in the number of queries.\n\nq = int(stdin.readline())\n\n4. For each query, read in the country name and the query number.\n\nfor i in range(q):\n    country, query_number = stdin.readline().split()\n    query_number = int(query_number)\n\n5. Output the year in which Grandpa Bernie went to the country corresponding to the query number in the query.\n\nfor (country, year) in visits:\n    if query_number == 1:\n        print(year)\n        break\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aa') == 0\nassert solution('ab') == 0\nassert solution('abc') == 0\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"aa\") == 1\nassert solution(\"aab\") == 2\nassert solution(\"ab\") == 2\nassert solution(\"abca\") == 3\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbcccddddeeeee') == 10"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abbcccddddeeeee') == 10\nassert solution('a') == 1\nassert solution('aabbccddddeeeee') == 4\nassert solution('aaabbbbccddddeeeee') == 5\nassert solution('aaabbbbccddddeeeee') == 5\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\n\nimport unittest\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\"\n\nimport sys\nimport re\nfrom collections import OrderedDict\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\nDuplicated words will consume money\\nDuplicated words are duplicated work\\n.. wastes money') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\nDuplicated words will consume money\\n.. wastes money'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, lines: str) -> str:\n        words: List[str] = lines.split(\"\\n\")\n        result: List[str] = []\n        for word in words:\n            if result and result[-1] == word:\n                result[-1] = '.'\n            else:\n                result.append(word)\n        return \"\\n\".join(result)\n\nsolution = Solution().solution\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\nDuplicated words will consume money\\nDuplicated words are duplicated work\\n.. wastes money\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\nDuplicated words will consume money\\n.. wastes money\"\n\nprint(\"Successfully tested\")"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Inefficiency is a blight on the world and its humanity\") == \"Inefficiency is a blight on the world and its humanity\"\n\nassert solution(\"Engineering will save the world from inefficiency, inefficiency is a blight on the world and its humanity\") == \"Engineering will save the world from inefficiency,. is a blight on.. and its humanity\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(example_input) == example_output\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nSample Input:\nOlympics are not the only way to save the world\nThe quick brown fox jumps over the lazy dog\nSample Output:\nOlympics are not the only way to save the world\nThe quick brown.. jumps over the lazy dog\n\n-----Constraints-----\n0 <= lines < 2000\n0 <= characters < 100\n1 <= words < 20000\n1 <= word length < 20\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\n\"\"\"\nimport re\nfrom itertools import product"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\n\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\n\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\n\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\n\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"4 3\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"4 3\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3\") == \"satisfactory\"\nassert solution(\"4 3\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3\\n-1 -2 3\") == \"satisfactory\"\nassert solution(\"4 3\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3\\n-1 -2 3\") == \"unsatisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nfor line in sys.stdin:\n    if \"\".join(map(lambda x: str(1 if x > 0 else -1), map(int, line.split()))).count(\"0\") == m:\n        print(\"satisfactory\")\n        sys.exit(0)\nprint(\"unsatisfactory\")\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') == 'unsatisfactory'\nassert solution('4 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') =='satisfactory'\nassert solution('4 3\\n-1 2 -3\\n-1 2 3\\n1 2 -3\\n1 2 3\\n') =='satisfactory'\nassert solution('4 3\\n-1 2 3\\n-1 2 -3\\n1 2 3\\n1 2 -3\\n') =='satisfactory'\nassert solution('4 3\\n-1 2 3\\n-1 2 -3\\n1 2 3\\n1 2 -3\\n') =='satisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"4 3\\n-1 2 3\\n1 2 3\\n1 2 -3\") == \"satisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(    \"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(    \"6 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 2 3\\n1 2 -3\\n1 2 -3\") == \"satisfactory\"\nassert solution(    \"8 3\\n-1 -3 0\\n1 -3 0\\n-1 3 -2\\n-1 -3 2\\n-1 3 2\\n1 -3 2\\n1 -3 -2\\n1 3 -2\\n1 -3 -2\") == \"satisfactory\"\nassert solution(    \"8 3\\n1 1 1\\n1 1 -1\\n1 1 1\\n1 -1 -1\\n1 -1 1\\n1 1 -1\\n1 1 -1\\n1 -1 1\\n1 -1 -1\") == \"unsatisfactory\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n2 2 2 6 6') == 'none'\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 5 3 4 6 6\\n') == '4'\nassert solution('8\\n1 1 1 5 3 4 6 6\\n') == 'none'"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'none'\nassert solution('1') == 'none'\nassert solution('1 1 1') == 'none'\nassert solution('1 2 4 6') == 'none'\nassert solution('1 1 1 1 1 1 1 1') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"8\\n6 6 5 3 1 1 1\") == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0444\u0438\u043d\u0438\u0448\u0430 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435\n\n\u0412 \u043a\u043b\u0430\u0441\u0441\u0435 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0435 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043e\u0434\u0438\u043d \u0444\u0438\u043d\u0438\u0448. \u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043b\u0441\u044f \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0430\u0442\u043e\u0440, \u0438 \u0432\u044b\u0431\u0440\u0430\u043b\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u0432\u044b\u0447\u0435\u0442\u0430 \u043f\u043e \u0431\u0430\u043b\u043b\u0430\u043c. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0434\u0435\u043d\u044c \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0438\u043b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0444\u0438\u043d\u0438\u0448 \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0444\u0438\u043d\u0438\u0448 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0438\u0448\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u043e\u043d \u0434\u0435\u043b\u0430\u0435\u0442 \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u0448\u0430\u0433\u0430:\n\n\u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432;\n\n\u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0434\u043b\u0438\u043d\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 (\u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430);\n\u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 (\u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043e\u0434\u0438\u043d \u0437\u0430 \u0434\u0440\u0443\u0433\u0438\u043c), \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u043b\u0438\u043d\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f;\n\u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043f\u0435\u0447\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u043b\u0438\u043d\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f;\n\u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 (\u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438, \u0447\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432\u044b\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b);\n\u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043f\u0435\u0447\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u0448\u0435\u0441\u0442\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0444\u0438\u043d\u0438\u0448\u0430 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0435 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0430\u0442\u043e\u0440 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u0433\u0440\u0430\u0442\u044c \u0440\u043e\u043b\u0438 \u0444\u0438\u043d\u0438\u0448\u0435\u0440\u0430 \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043d\u0430 \u0444\u0438\u043d\u0438\u0448.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 N \u0438 \u0434\u043b\u0438\u043d\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 S (1 \u2264 N \u2264 1000, 1 \u2264 S \u2264 100) \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0435, \u0438 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e M (1 \u2264 M \u2264 1000) \u2013 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 3 6 5\\n') == 'none'\nassert solution('6\\n1 1 3 6 5 4\\n') == 'none'\nassert solution('8\\n1 1 3 6 5 4 6\\n') == 'none'\nassert solution('6\\n1 3 3 6 5 4\\n') == '2'\nassert solution('8\\n1 1 3 6 5 4 6\\n') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '2'\nassert solution('2\\n1 1\\n') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"1 1 1 2 3 4 6 6\") == \"none\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"none\"\nassert solution(\"1 2 2 3 3 4 4 4\") == \"none\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 1 1 5 3 4 6 6') == 'none'\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"23:59:59\") == \"00:00:00\"\n\"\"\"\n\nfrom datetime import datetime\nimport sys\n\nstdin = sys.stdin.readline().split()\nstdin = [int(x) for x in stdin]\ns, e = datetime(*stdin), datetime(*[stdin[0], stdin[1], stdin[2] + 1])\nprint(s - e)\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\nassert solution(\"23:59:59\", \"00:05:00\") == \"23:58:59\"\nassert solution(\"23:59:59\", \"24:00:00\") == \"00:00:00\"\n\n\"\"\"\n\nfrom datetime import datetime, timedelta"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nassert solution('03:00:00', '23:59:59') == '05:00:00'\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"20:00:00\"\n) == \"08:00:00\"\nassert solution(\n\"04:00:00\"\n) == \"04:00:00\"\nassert solution(\n\"07:12:10\"\n) == \"12:12:10\"\n\"\"\"\n\n\nimport datetime"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"06:00:00\") == \"06:00:00\"\nassert solution(\"02:00:00\") == \"02:00:00\"\nassert solution(\"01:00:00\") == \"01:00:00\"\nassert solution(\"23:59:59\") == \"23:59:59\"\n\"\"\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('04:00:00') == '12:00:00'\nassert solution('01:02:03') == '02:03:01'\n\n\"\"\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"22:10:10\") == \"16:10:10\"\nassert solution(\"24:10:10\") == \"00:10:10\"\n\n\"\"\"\n\nimport math\nimport time"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('07:25:05') == '12:25:05'\nassert solution('22:22:33') == '00:22:33'\nprint('Success')\n\"\"\"\n\nimport datetime\nimport re"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('31 6') == 4\n\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd\nfrom itertools import count"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 1\") == \"1\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"11 1\") == \"1\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    31 6\n    \"\"\"\n) == \"4\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'\n\n-----Constraints-----\n$1 \\leq \\ell \\leq 10^{10}$\n$1 \\leq n \\leq \\ell$\n'''\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"3 6\") == \"3\"\nassert solution(\"11 5\") == \"4\"\nassert solution(\"10 1\") == \"1\"\nassert solution(\"20 2\") == \"2\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"31 6\") == 4\nassert solution(\"10 1\") == 1"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"31 6\") == 4\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == \"4\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('4') == '3.162277660168379'\nassert solution('10000') == '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277894832927870699618528233277216673586196684544458137533642995618882165610107486631'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('5') == '2.984375'\n\n'''\n\nimport sys"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 2.6666666666666665\nassert solution('4') == 2.833333333333333\nassert solution('5') == 2.933333333333333\nassert solution('6') == 2.933333333333333\nassert solution('7') == 3.0\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1.0'\nassert solution('1\\n') == '1.0'\nassert solution('1\\n2') == '1.5'\nassert solution('2\\n1') == '1.25'\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '2.7183'\nassert solution('4') == '2.71828'\nassert solution('3') == '2.70318'\nassert solution('2') == '2.7038'\nassert solution('1') == '2.70389'\n\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('0') == '2.71828182845905'\nassert solution('10000') == '8.8817841970012523'\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('0') == '2.718281828459045'\n\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"10 7 10\") == \"opponent\"\nassert solution(\"10 0 10\") == \"paul\"\nassert solution(\"3 3 3\") == \"paul\"\nassert solution(\"10 10 10\") == \"opponent\"\n\"\"\"\n\nn, p, q = map(int, input().split())\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"1 1 1\") == \"opponent\"\nassert solution(\"1 0 1\") == \"paul\"\nassert solution(\"1 0 2\") == \"opponent\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"2 5 8\") == \"opponent\"\nassert solution(\"0 1 1\") == \"paul\"\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 5\") == \"opponent\"\nassert solution(\"10 0 10\") == \"paul\"\nassert solution(\"0 10 0\") == \"opponent\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 0\") == \"opponent\"\nassert solution(\"1 1 1\") == \"paul\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 3 7\\n') == 'opponent'\n\nassert solution('6 3 8\\n') == 'paul'\nassert solution('6 3 8\\n') == 'opponent'\n\nassert solution('5 3 1\\n') == 'opponent'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"3 4 5\") == \"opponent\"\nassert solution(\"6 3 3\") == \"paul\"\nassert solution(\"1 2 3\") == \"opponent\"\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3 7''') == 'paul'\nassert solution('''6 2 5''') == 'opponent'\nassert solution('''4 3 1''') == 'paul'\nassert solution('''10 2 3''') == 'opponent'\nassert solution('''1 1 1''') == 'opponent'\n'''\n\n'''"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"4 1 6\") == \"opponent\"\nassert solution(\"8 8 8\") == \"paul\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"1 7 9\") == \"opponent\"\nassert solution(\"7 9 3\") == \"paul\"\nassert solution(\"7 9 0\") == \"opponent\"\nassert solution(\"7 0 3\") == \"opponent\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 4\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '2'\nassert solution('5\\n') == '9'\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n''') == 2\nassert solution('''3\n''') == 1\nassert solution('''6\n''') == 2\nassert solution('''1\n''') == 1\nassert solution('''6\n''') == 2\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 2\nassert solution('2') == 3\nassert solution('3') == 4\nassert solution('4') == 5\nassert solution('5') == 6\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n5\") == \"3\"\nassert solution(\"2\\n7\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '2'\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 2\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123', '123') == 'Yes'\nassert solution('123', '122') == 'No'\nassert solution('123', '13') == 'Yes'\nassert solution('123', '12') == 'Yes'\nassert solution('123', '11') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"12b\") == \"Yes\"\nassert solution(\"12ab\") == \"Yes\"\nassert solution(\"12bb\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\", \"123\") == \"Yes\"\nassert solution(\"123\", \"123a\") == \"Yes\"\nassert solution(\"123\", \"1234\") == \"No\"\nassert solution(\"123\", \"abc\") == \"No\"\nassert solution(\"123\", \"123a\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123', '123') == 'Yes'\nassert solution('123', '1234') == 'No'\nassert solution('123', '1234') == 'No'\nassert solution('123', '1234') == 'No'\nassert solution('1234', '1234') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"c0deninja5\") == \"Yes\"\n\"\"\"\n\nS, P = input(), input()"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('0a') == 'Yes'\nassert solution('abcde') == 'No'\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"123c\") == \"No\"\nassert solution(\"12345\") == \"Yes\"\nassert solution(\"12345a\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123\\n123a') == 'No'\n\n---Problem---\nInput:\n123\n123a\nOutput:\nYes\n\n---Test Cases---\nTest Case 1\nInput:\n123\n123a\nOutput:\nNo\n\nTest Case 2\nInput:\n123\n321\nOutput:\nNo\n\nTest Case 3\nInput:\n1234\n1234a\nOutput:\nNo\n\nTest Case 4\nInput:\n1234\n4321\nOutput:\nNo\n\nTest Case 5\nInput:\n1234\n4321\nOutput:\nYes\n\nTest Case 6\nInput:\n1234\n4321\nOutput:\nYes\n\nTest Case 7\nInput:\n1234\n4321a\nOutput:\nNo\n\nTest Case 8\nInput:\n1234\n4321a\nOutput:\nNo\n\nTest Case 9\nInput:\n1234\n4321b\nOutput:\nYes\n\nTest Case 10\nInput:\n1234\n4321c\nOutput:\nNo\n\nTest Case 11\nInput:\n1234\n4321d\nOutput:\nNo\n\nTest Case 12\nInput:\n1234\n4321e\nOutput:\nNo\n\nTest Case 13\nInput:\n1234\n4321f\nOutput:\nYes\n\nTest Case 14\nInput:\n1234\n4321g\nOutput:\nNo\n\nTest Case 15\nInput:\n1234\n4321h\nOutput:\nNo\n\nTest Case 16\nInput:\n1234\n4321i\nOutput:\nYes\n\nTest Case 17\nInput:\n1234\n4321j\nOutput:\nNo\n\nTest Case 18\nInput:\n1234\n4321k\nOutput:\nNo\n\nTest Case 19\nInput:\n1234\n4321l\nOutput:\nNo\n\nTest Case 20\nInput:\n1234\n4321m\nOutput:\nNo\n\nTest Case 21\nInput:\n1234\n4321n\nOutput:\nYes\n\nTest Case 22\nInput:\n1234\n4321o\nOutput:\nNo\n\nTest Case 23\nInput:\n1234\n4321p\nOutput:\nNo\n\nTest Case 24\nInput:\n1234\n4321q\nOutput:\nNo\n\nTest Case 25\nInput:\n1234\n4321r\nOutput:\nNo\n\nTest Case 26\nInput:\n1234\n4321s\nOutput:\nNo\n\nTest Case 27\nInput:\n1234\n4321t\nOutput:\nNo\n\nTest Case 28\nInput:\n1234\n4321u\nOutput:\nNo\n\nTest Case 29\nInput:\n1234\n4321v\nOutput:\nNo\n\nTest Case 30\nInput:\n1234\n4321w\nOutput:\nNo\n\nTest Case 31\nInput:\n1234\n4321x\nOutput:\nNo\n\nTest Case 32\nInput:\n1234\n4321y\nOutput:\nNo\n\nTest Case 33\nInput:\n1234\n4321z\nOutput:\nNo\n\nTest Case 34\nInput:\n1234\n43219\nOutput:\nNo\n\nTest Case 35\nInput:\n1234\n4321a\nOutput:\nNo\n\nTest Case 36\nInput:\n1234\n43219\nOutput:\nYes\n\nTest Case 37\nInput:\n1234\n4321b\nOutput:\nNo\n\nTest Case 38\nInput:\n1234\n43219\nOutput:\nYes\n\nTest Case 39\nInput:\n1234\n4321c\nOutput:\nYes\n\nTest Case 40\nInput:\n1234\n4321d\nOutput:\nNo\n\nTest Case 41\nInput:\n1234\n4321e\nOutput:\nNo\n\nTest Case 42\nInput:\n1234\n4321f\nOutput:\nNo\n\nTest Case 43\nInput:\n1234\n4321g\nOutput:\nNo\n\nTest Case 44\nInput:\n1234\n4321h\nOutput:\nNo\n\nTest Case 45\nInput:\n1234\n4321i\nOutput:\nNo\n\nTest Case 46\nInput:\n1234\n4321j\nOutput:\nYes\n\nTest Case 47\nInput:\n1234\n4321k\nOutput:\nNo\n\nTest Case 48\nInput:\n1234\n4321l\nOutput:\nNo\n\nTest Case 49\nInput:\n1234\n4321m\nOutput:\nNo\n\nTest Case 50\nInput:\n1234\n4321n\nOutput:\nNo\n\nTest Case 51\nInput:\n1234\n4321o\nOutput:\nNo\n\nTest Case 52\nInput:\n1234\n4321p\nOutput:\nNo\n\nTest Case 53\nInput:\n1234\n4321q\nOutput:\nNo\n\nTest Case 54\nInput:\n1234\n4321r\nOutput:\nNo\n\nTest Case 55\nInput:\n1234\n4321s\nOutput:\nNo\n\nTest Case 56\nInput:\n1234\n4321t\nOutput:\nNo\n\nTest Case 57\nInput:\n1234\n4321u\nOutput:\nNo\n\nTest Case 58\nInput:\n1234\n4321v\nOutput:\nNo\n\nTest Case 59\nInput:\n1234\n4321w\nOutput:\nNo\n\nTest Case 60\nInput:\n1234\n4321x\nOutput:\nNo\n\nTest Case 61\nInput:\n1234\n4321y\nOutput:\nNo\n\nTest Case 62\nInput:\n1234\n4321z\nOutput:\nNo\n\nTest Case 63\nInput:\n1234\n43219\nOutput:\nNo\n\nTest Case 64\nInput:\n1234\n4321a\nOutput:\nNo\n\nTest Case 65\nInput:\n1234\n43219\nOutput:\nYes\n\nTest Case 66\nInput:\n1234\n4321b\nOutput:\nNo\n\nTest Case 67\nInput:\n1234\n43219\nOutput:\nYes\n\nTest Case 68\nInput:\n1234\n4321c\nOutput:\nNo\n\nTest Case 69\nInput:\n1234\n4321d\nOutput:\nNo\n\nTest Case 70\nInput:\n1234\n4321e\nOutput:\nNo\n\nTest Case 71\nInput:\n1234\n4321f\nOutput:\nNo\n\nTest Case 72\nInput:\n1234\n4321g\nOutput:\nNo\n\nTest Case 73\nInput:\n1234\n4321h\nOutput:\nNo\n\nTest Case 74\nInput:\n1234\n4321i\nOutput:\nNo\n\nTest Case 75\nInput:\n1234\n4321j\nOutput:\nNo\n\nTest Case 76\nInput:\n1234\n4321k\nOutput:\nNo\n\nTest Case 77\nInput:\n1234\n4321l\nOutput:\nNo\n\nTest Case 78\nInput:\n1234\n4321m\nOutput:\nNo\n\nTest Case 79\nInput"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123', '123a') == 'Yes'"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123\\n123a') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('pepekrapac kropacka') == 'pikselej ucapac kropa'\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"kemija\") == \"kepemipijapa\"\nassert solution(\"paprika\") == \"papapripikapa\"\nassert solution(\"konpelepa\") == \"konpelepa\"\nassert solution(\"kobija\") == \"kobija\"\nassert solution(\"kobekopa\") == \"kobekopa\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"a kemija\") == \"apipipikapa\"\nassert solution(\"ludia paprika\") == \"ludipipipipikapa\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\nstdin = \"zepelepenapa papapripikapa\"\nstdout = \"zelena paprika\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"ipakopaizema vaihcamatai\") == \"ipaka vaihcamata\"\nassert solution(\"lopapupipipi\") == \"lopa pupipi\"\nassert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nprint(solution('zepelepenapa papapripikapa'))\n\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 2\") == \"IMPOSSIBLE\"\nassert solution(\"28 4\") == \"-24\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 4\") == \"ALL GOOD\"\n\"\"\"\n\nimport math\n\nx, y = [int(i) for i in input().split()]"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''32 2\n''') == '-32'\nassert solution('''-32 2\n''') == 'IMPOSSIBLE'\nassert solution('''32 1\n''') == 'IMPOSSIBLE'\nassert solution('''-32 -2\n''') == 'IMPOSSIBLE'\nassert solution('''1 -32\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32 2') == '-32'\nassert solution('32 1') == 'IMPOSSIBLE'\nassert solution('25 2') == 'ALL GOOD'\nassert solution('100 2') == 'IMPOSSIBLE'\nassert solution('0 2') == 'IMPOSSIBLE'\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u044c\u0446\u0435\u0432\u0430\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043c\u044b \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u043e\u0432, \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043e\u0431\u044a\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439.\n\n\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u0440\u0430\u0432\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0443 \u043c\u0435\u0436\u0434\u0443 \u043c\u0435\u0442\u043a\u0430\u043c\u0438 \u0441 \u043e\u0442\u0441\u0447\u0451\u0442\u0430\u043c\u0438 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f, \u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0440\u0430\u0432\u0435\u043d \u043e\u0442\u0440\u0435\u0437\u043a\u0443 \u043c\u0435\u0436\u0434\u0443 \u043c\u0435\u0442\u043a\u0430\u043c\u0438 \u0441 \u043e\u0442\u0441\u0447\u0451\u0442\u0430\u043c\u0438 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u043c\u043e\u0447\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043e\u0431\u044a\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439.\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0430\u043c\u0438\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043e\u0442\u0441\u0447\u0451\u0442\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439:\n\n\u041e\u0442\u0441\u0447\u0451\u0442\u044b 1, 2, 3, 4, 5 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0442\u0441\u0447\u0451\u0442\u0443 1, \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0444\u0430\u0439\u043b\u0430\u0445: \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f 1 \u0438 2 \u043e\u0442\u0441\u0447\u0451\u0442 1, \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f 2 \u0438 3 \u043e\u0442\u0441\u0447\u0451\u0442 1, \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f 3 \u0438 4 \u043e\u0442\u0441\u0447\u0451\u0442 1.\n\u041f\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u043e\u0442\u0441\u0447\u0451\u0442\u044b \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0434\u043d\u043e\u043c\u0443 \u0438 \u0442\u043e\u043c\u0443 \u0436\u0435 \u043e\u0431\u044a\u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.\n\u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0434\u043d\u043e\u043c\u0443 \u0438 \u0442\u043e\u043c\u0443 \u0436\u0435 \u043e\u0431\u044a\u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0445: \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u044b \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 2, 3 \u0438 4.\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0442\u0432\u0435\u0442\u0430:\n\n3 3\n\n\u041f\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u043e\u0442\u0441\u0447\u0451\u0442\u043e\u0432 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u043e\u0442\u0441\u0447\u0451\u0442\u044b \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0434\u043d\u043e\u043c\u0443 \u0438 "
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\nx, y = list(map(int, input().split()))\nprint(-x * y)\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('32 2') == '-32', 'error'\nassert solution('0 2') == 'IMPOSSIBLE', 'error'\nassert solution('2 2') == 'IMPOSSIBLE', 'error'\nassert solution('100 0') == 'IMPOSSIBLE', 'error'\nassert solution('32 16') == 'ALL GOOD', 'error'\n\nSample Input:\n0 2\nSample Output:\n0\n\n\"\"\"\n\nx, y = map(int, input().split())"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('32 2') == '-32'\nassert solution('2 2') == 'IMPOSSIBLE'\n\n-----Hint-----\nYou could use recursion.\n\n\"\"\"\n\nx, y = input().split()\nx, y = int(x), int(y)\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"50 4\") == \"IMPOSSIBLE\"\n\nprint(\"All tests passed.\")\n\n-----Solution-----\nimport math\nx, y = map(int, stdin.split())\nprint(math.floor(-math.log(x, 10) / math.log(y, 10)) * -1)"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''32 2''') == '-32'\n\nassert solution(\n'''2 1''') == 'IMPOSSIBLE'\n\nassert solution(\n'''0 1''') == 'ALL GOOD'\n\nassert solution(\n'''100 100''') == 'IMPOSSIBLE'\n\nassert solution(\n'''2 0''') == '32'"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32 2') == '-32'\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('1 3 2') == 'none'"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 2 3 4\") == \"none\"\nassert solution(\"3 3 3 3\") == \"both\"\nassert solution(\"3 3 3 3 3\") == \"both\"\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">1 5 4 2\\n>4\\n>2\\n>2\\n\") == \"both\"\nassert solution(\">1 5 4 2\\n>4\\n>2\\n>2\\n\") == \"one\"\nassert solution(\">1 5 4 2\\n>4\\n>2\\n>2\\n\") == \"none\"\n\n\"\"\"\n\nimport sys\n\na, b, c, d = [int(x) for x in sys.stdin.readline().strip().split()]\np, m, g = [int(x) for x in sys.stdin.readline().strip().split()]\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"both\"\nassert solution(\"1 3 4 2\") == \"one\"\nassert solution(\"1 4 3 2\") == \"none\"\nassert solution(\"2 4 1 3\") == \"both\"\n\nassert solution(\"1 2 3 3\") == \"both\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\nassert solution(\"2 2 3 3\") == \"both\"\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2 3 3''') == 'both'\nassert solution('''1 3 4''') == 'one'\nassert solution('''0 0 0 0''') == 'none'\n'''\n\nA dog is on an angry patrol of a certain house. The dog is aggressive for A minutes, then is calm for B minutes and after that is aggressive for C minutes, then is calm for D minutes. Given the arrival time of the postman, the milkman and the garbage man, determine how many dogs attack each of them.\n\nInput\n\nThe first line of input contains three integers A, B, C, the time it takes for the dogs to become aggressive in the following order: the postman, the milkman, and the garbage man.\n\nThe second line of input contains three integers P, M, G, the arrival times of the postman, the milkman and the garbage man respectively.\n\nOutput\n\nThere should be three lines of output, each containing \"both\", \"one\" or \"none\".\n\nExample\n\nInput:\n2 3 3 2\n1 4 2\n\nOutput:\nboth\nnone\nboth\n\nInput:\n1 3 4\n1 4 2\n\nOutput:\nnone\n\n'''\n\n'''\n2 3 3 2\n1 4 2\n'''\nimport sys\na, b, c, d = map(int, input().split())\np, m, g = map(int, input().split())"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\n\"\"\"\n\nA, B, C, D = [int(x) for x in stdin.split()]\n\nnum_days = int(input())"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'both'\nassert solution('0 0 0 0') == 'none'\nassert solution('1 1 1 1') == 'none'\nassert solution
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 3 1\") == \"one\"\nassert solution(\"2 2 3 3\\n1 3 3\") == \"none\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1\") == \"both\"\nassert solution(\"1 1 1 3\") == \"none\"\nassert solution(\"1 1 3 3\") == \"one\"\n\"\"\"\nimport math"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '10'\nassert solution('-10 -2 -8') == '0'\nassert solution('0 -2 -8') == '0'\nassert solution('1 10 -10') == '5'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('0 0 0') == '0'\nassert solution('-100 0 100') == '0'\n\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 7') == 10\nassert solution('7 3 4') == 10\nassert solution('-4 3 -1') == -1\nassert solution('2 2 3') == 1\nassert solution('1 1 1') == 2\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"4 -2 -2\") == \"6\"\nassert solution(\"2 -4 0\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\"\n\na, b, c, d = sorted([int(n) for n in stdin.split()])\nprint(a + b - d)\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('1 2 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 8') == 10\nassert solution('10 9 1') == 2\n\"\"\"\n\ninput_ = [int(num) for num in stdin.split()]"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8 4\") == \"10\"\n\n---"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 70') == '533'"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('500 70') == 533\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nimport math\n\nh, v = map(int, stdin.split())\nprint(math.ceil(h / math.cos(math.pi / 180 * v)))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('500 70') == '533'\nprint(solution(stdin))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('500 70') == '533'\nassert solution('123 89') == '89'\nassert solution('1 1') == '0'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 70\") == \"133\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('500 70') == '533'\nprint(solution('500 70'))\n\nimport math"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('500 70') == '533'\nassert solution('500 51') == '471'\nassert solution('500 2') == '500'\nassert solution('20 20') == '20'\nassert solution('500 51') == '471'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 9\n69 60\n100 60''') == '''39.0\n30.0'''"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\nprint(solution(stdin_lines))\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\""
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2 9\n69 60\n100 60\n''') == \"39.0\\n30.0\"\nprint(solution(input()))\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\nprint(solution(\"2 9\\n69 60\\n100 60\"))\n\nHow to submit\n\nReplace this comment with a description of your code that you are submitting.\nIf you would like to upload your code to a pastebin, this is the link: https://pastebin.com/<your key here>\n'''"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\n\"\"\""
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 9\n69 60\n100 60''') == '''39.0\n30.0'''\n\nassert solution('''1 4\n0 0\n10 10''') == '''10.0'''\n\nassert solution('''3 8\n7 0\n4 -60\n-5 -60''') == '''4.0\n3.0\n2.0'''\n\nassert solution('''1 3\n0 0\n10 10''') == '''10.0'''\n\nassert solution('''1 2\n0 0\n10 10''') == '''0.0'''"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('6\\n23 27 22 29 17 25') == '2 17'\nassert solution('8\\n17 13 17 19 22 17 21') == '0 13'\nassert solution('10\\n17 13 17 19 22 17 21 17') == '5 11'\nassert solution('12\\n17 13 17 19 22 17 21 17 17') == '4 10'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == '2 28'\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"3\\n22 22 22\") == \"1 1\"\nassert solution(\"1\\n1\") == \"1 1\"\nassert solution(\"0\\n3 3 3\") == \"0 0\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\"\n\ndays = int(stdin.readline())\nday_temp = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1\\n1'\nassert solution('1\\n2') == '1\\n2'\nassert solution('1\\n2\\n3') == '1\\n2\\n3'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('9\\n13 3 19 -3 20 19 -7 21 -5 10 -4 3 10') == '0 9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('7\\n20 22 33 21 34 21') == '0 33'\n\n----Problem----\nYou are planning a vacation to a tropical island. You have learned that on this island there are many people who are friendly and want to help you. Each of them has a unique ID which is an integer between 1 and $n$ (inclusive). There is also a boat which can carry at most one person at a time. Your task is to choose the best day to start your vacation, and you will then have exactly one trip.\n\n-----Solution----\n\n-----\nfrom typing import List, Tuple\n\n\nclass Person:\n    def __init__(self, id_: int):\n        self.id = id_\n\n    def __repr__(self):\n        return 'Person(' + str(self.id) + ')'\n\n\nclass Boat:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.boat = []\n\n    def __repr__(self):\n        return 'Boat(' + str(self.boat) + ')'\n\n    def load(self, person: Person) -> bool:\n        if len(self.boat) == self.capacity:\n            return False\n\n        self.boat.append(person)\n        return True\n\n    def unload(self) -> Person:\n        if not len(self.boat):\n            return None\n\n        return self.boat.pop()\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\nprint(solution(stdin))\n\n------Hints------\n- Try to solve this using a greedy approach.\n- Hint: $e_i$ indicates $e_i$ ships that Atli can send to the $i$th solar system.\n- Hint: $a$ indicates the total number of ships that Atli has at his disposal.\n- Hint: $n$ indicates the number of solar systems.\n\n'''"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\nprint(solution(stdin))\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n\"\"\"\n\nstdin = input()\nn, a = [int(i) for i in stdin.split()]\ne = [int(i) for i in input().split()]\n\nwin = 0\n\nfor i in range(n):\n    if a - e[i] > 0:\n        win += 1\n\nprint(win)\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\n1 2 3''') == '2'\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution_runner(input()))\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('7 5\\n1 2 3 4 5 6 7') == '0'\nassert solution('7 6\\n1 3 5 7 10 11 12') == '1'\n\nprint(solution(input()))"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"1WWWWMMMMM\") == \"9\"\nassert solution(\"1WWWWMMMMMWWWMMMM\") == \"7\"\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('WWW') == '1'\nassert solution('MWMWMWMW') == '3'\nassert solution('MWWMMWMW') == '5'\nassert solution('MMWMMWMW') == '5'\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWMMMWWMWW\") == 9\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n1\nMWWMWMMMM\n''') == '9'\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\nq = deque(input().strip())\n\nw = 0\nm = 0\n\nfor i in q:\n    if i == 'W':\n        w += 1\n    else:\n        m += 1\n\nprint(w - m)\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWMWM\") == 4\nassert solution(\"MWMWM\") == 3\nassert solution(\"MWMWMWM\") == 3\nassert solution(\"WWMWMWMWMW\") == 4\nassert solution(\"MWMWMWMWMWM\") == 5\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('MWWMWMMWM') == 9\n'''"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\nWWMM''') == '3'\nassert solution('''10\nWWMMMWWWWMMMMMWMMMW''') == '10'\nassert solution('''4\nWMMMM''') == '4'\n'''\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('M') == 1\nassert solution('MWM') == 1\nassert solution('MM') == 1\nassert solution('MWWM') == 3\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n8 -2 3 undo 2\") == \"3\"\nassert solution(\"3 4\\n-2 3 undo 2\") == \"0\"\nassert solution(\"4 2\\n2 -3 undo\") == \"0\"\nassert solution(\"4 6\\n1 2 3 undo\") == \"0\"\nassert solution(\"4 8\\n-2 3 undo 2\") == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"5 4\") == \"3\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\nL = list(map(int, input().split()))\n\nstart = 0\n\nfor i in range(m):\n    if L[i] < 0:\n        start -= L[i]\n    else:\n        start += L[i]\n\nstart %= n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\\\n8 -2 3 undo 2\\\\n\") == \"3\"\n\n\"\"\"\n\nfrom itertools import cycle\n\nfrom sys import stdin\n\nn, k = [int(i) for i in stdin.readline().split()]\n\ncommands = [int(i) for i in stdin.readline().split()]\n\nchildren = [i for i in range(n)]\n\nthrows = 0\nfor command in cycle(commands):\n    if command < 0:\n        throws += 1\n        continue\n\n    if throws:\n        child = children.index(command - 1)\n        children = children[child:] + children[:child]\n        throws -= 1\n        continue\n\n    children.append(children.pop(0))\n\nprint(children.index(0))"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4\n8 -2 3 undo 2''') == '3'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0 2\\n1 2\\n3 2\\n0 -1\\n3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\\n\") == \"6 7\"\n\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 1 5 2\\n2 1 2\\n\") == \"5 4\"\nassert solution(\"3 1\\n2 5 1\\n\") == \"2\"\nassert solution(\"6 3\\n2 2 2 2 2 2 2\\n1 1 2 2 3\\n\") == \"6 5 6\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n3 2 1\") == \"3 7\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1 2 3\n3 2 1\n''') == '6 7'\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 2 3\") == \"6 7\"\n\"\"\"\n\nN, M = list(map(int, input().split()))\nprocess_times = [list(map(int, input().split())) for _ in range(N)]"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\n\"\"\"\nImplementation of the first solution\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n2 1 4 1\") == \"2 1 4 3\"\nassert solution(\"5 2\\n3 3 3 4 5\") == \"3 3 4 5 5\"\nassert solution(\"4 4\\n1 3 2 3 1\") == \"1 2 3 3 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"4\"\nassert solution(\"1 1\\n1 1\") == \"4\"\n\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\nimport itertools\nfrom collections import Counter\nfrom itertools import product"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64\\n665'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nals destroy correct\\nmollen mills incorrect') == '64\\n0'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nals destroy correct\\nals mills incorrect') == '0\\n0'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nals destroy correct\\nals mills incorrect') == '0\\n0'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nals destroy correct\\nals mills incorrect\\nals mollen mollen mollensmollen mollensmollen') == '0\\n0\\n0'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64\\n665'\nprint(solution(stdin), end='')\n\"\"\"\n\nn = int(input())\ns = input()\nm = int(input())\nd = {input().split()[0]: input().split()[1] for _ in range(m)}\nans = ['correct' if s.count(w) == 1 else 'incorrect' for w in s.split()]\n\nprint(n)\nprint(' '.join(ans))\nprint(m)\nfor w in d:\n    print(w, d[w])\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollens mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollens mollen mollens mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollens mollen mollens mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollens mollen mollens mollens mollen mollens\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n\"\"\"\n) == \"\"\"\n64 correct\n665 incorrect\n\"\"\"\n\nassert solution(\n\"\"\"\n7\nals mollen mollen mollen mollen mollen mollen\n4\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n\"\"\"\n) == \"\"\"\n64 correct\n665 incorrect\n\"\"\"\n\nassert solution(\n\"\"\"\n7\nmollen mollen mollen mollen mollen mollen mollen\n4\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n\"\"\"\n) == \"\"\"\n64 correct\n665 incorrect\n\"\"\"\n\nassert solution(\n\"\"\"\n7\nmollen mollen mollen mollen mollen mollen mollen\n4\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nmollen mills incorrect\n\"\"\"\n) == \"\"\"\n64 correct\n665 incorrect\n\"\"\"\n\nassert solution(\n\"\"\"\n7\nmollen mollen mollen mollen mollen mollen mollen\n4\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nmollen mills correct\n\"\"\"\n) == \"\"\"\n64 correct\n665 incorrect\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n') == '665 incorrect\\n64 correct'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nmollen moles correct\\ndestroy correct\\nmollen mills incorrect\\n') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nmollen moles correct\\ndestroy correct\\nmollens destroy correct\\nmollen mills incorrect\\n') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nmollen moles correct\\ndestroy correct\\n') == '64 correct\\n0 incorrect'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\nmollen\nmollen\nmollen\nmollen\nmollen\n''') == '64 correct'\nassert solution('''6\nmollen\nmolen\nmollen\nmollen\nmollen\nmollens\n''') == '65 incorrect'\n\n'''\nSolution:\nWe can group the input words into two sets:\n\n1. The set of all words in the English translation, \"correct\" words.\n2. The set of all words in the English translation, \"incorrect\" words.\n\nNow for each of the \"correct\" words, we can determine what \"incorrect\" word in our set of \"incorrect\" words we should replace with in order to get the \"correct\" word.\n\nWhen we have \"correct\" words, we can calculate the total number of \"correct\" words by counting the number of \"correct\" words and adding 1.\n\nWhen we have \"incorrect\" words, we can count how many \"correct\" words would be possible if we replaced each \"incorrect\" word with any \"correct\" word and then add 1.\n\nThen we can just output the sum of the two numbers.\n'''"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64\\n665\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when incorrect\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 incorrect\\n665 correct\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles incorrect\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy incorrect\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy incorrect\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\"\"\"\n\n\"\"\"\n\u6700\u5c0f\u7684\u5e73\u5747\u6570 - C++\n\nSolution1:\n\nint minavg(int n)\n{\n    int tot = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n    }\n\n    return tot / n;\n}\n\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        ++cnt;\n    }\n\n    return tot / cnt;\n}\n\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        cnt++;\n    }\n\n    return tot / cnt;\n}\n\n\nSolution2:\n\nusing namespace std;\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        ++cnt;\n    }\n\n    return tot / cnt;\n}\n\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        cnt++;\n    }\n\n    return tot / cnt;\n}\n\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        cnt++;\n    }\n\n    return tot / cnt;\n}\n\n\nSolution3:\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        ++cnt;\n    }\n\n    return tot / cnt;\n}\n\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        cnt++;\n    }\n\n    return tot / cnt;\n}\n\n\nint minavg(int n)\n{\n    int tot = 0, cnt = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        tot += i;\n        cnt++;\n    }\n\n    return tot / cnt;\n}\n\"\"\"\n\nimport unittest\nimport math\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('4\\n2 3 4 3'), '7')\n        self.assertEqual(solution('5\\n2 2 1 1 1'), '6')\n        self.assertEqual(solution('1\\n1'), '1')\n        self.assertEqual(solution('2\\n1 1'), '1')\n        self."
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n2 3 4 3''') == '7'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\nSample Case:\nIn the example above, Jon can plant the tree with index 2 on day 3.\n\nSample Input:\n8\n1 1 1 1 1 1 1 1\nSample Output:\n1\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\n-----Explanation-----\nAfter the first day, we can plant 1 tree.\nAfter the second day, we can plant 2 trees.\nAfter the third day, we can plant 3 trees.\nAfter the fourth day, we can plant all the trees.\n\nFarmer Jon has sold 10 trees. After the seventh day, Jon has to wait for the trees to grow for 7 days.\n\nSample Input:\n9\n1 1 1 1 1 1 1 1 1\nSample Output:\n1\nassert solution(a) == 1\n\nHint:\nOnce we find the earliest day, we can stop the search.\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n'''\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nprint(solution(stdin))\n'''\n\nimport sys\n\nn = int(sys.stdin.readline())\nlst = [int(i) for i in sys.stdin.readline().strip().split()]\nlst.sort()\nday = 1\nans = lst[0]\nfor i in range(1, len(lst)):\n    if ans < day:\n        break\n    ans += lst[i]\n    day += 1\nprint(ans)"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\nassert solution(\"3\\n1 1 1\") == 1\nassert solution(\"3\\n1 2 3\") == 3\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nprint(solution(\"4\\n2 3 4 3\"), \"7\")\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"4\\n3.5 1.5\\n4.1 3.2\\n2.9 5.1\\n0.3 1.4\") == \"0.3 1.4\\n0.0 1.5\\n0.3 3.2\"\n\n-----Notes-----\nThe test cases will contain at most 200 polygons with $3 \\le N \\le 50$ vertices.\nEach vertex will be a pair of floating point numbers $X, Y \\in [-500, 500]$.\nEach line will contain $3 \\le A \\le 10^7$.\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution(\"3\\n0.0 0.0\\n1.1 1.1\\n0.2 2.0\\n4.0 4.0\") == '0.0 0.0\\n2.1 2.1\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0.0 0.0\\n1.1 1.1\\n0.2 2.2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nprint(solution(\"1\\n-1\"))\nassert solution(\"1\\n0\\n0\") == '0.0 0.0'\nprint(solution(\"1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"))\nassert solution(\"1\\n-1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == '0.0 0.0'\nprint(solution(\"1\\n-1\\n-1\\n0\\n0\\n0\\n0\\n0\\n0\"))\nassert solution(\"1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n0\") == '4.0 4.0'\nprint(solution(\"1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n0\"))\nassert solution(\"1\\n-1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == '0.0 4.0'\nprint(solution(\"1\\n-1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"))\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(    \"\"\"3\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\nprint(solution(    \"\"\"3\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\")\n\n\"\"\"\nNote: \nIn the first test case, the given polygon is a triangle.\nIn the second test case, the given polygon is a square.\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('4\\n0 0\\n1 1\\n0 2\\n3 3') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n4.0 4.0'\nassert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('3\\n0 0\\n1 1\\n0 2\\n3 3') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n4.0 4.0'\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0.0 0.0\\n1.1 1.1\\n0.2 2.0\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 3\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n\nn = int(input())\nprint(n)\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1''') == 1\nassert solution('''0''') == 0\nassert solution('''7''') == 1\nassert solution('''8''') == 2\nassert solution('''11''') == 2\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\n\"\"\"\n\nimport math\nimport time\nfrom datetime import datetime, timedelta"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '3'\n\nSample Input:\n10000000\nSample Output:\n29\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 1\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 2\nassert solution('4') == 3\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 1\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 2\n\nassert solution('4') == 3\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n12 16\n''') == '34'\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n12 16') == 34\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n12 16\\n') == '34'\nassert solution('3 2\\n12 16\\n') == '34'\nassert solution('3 3\\n12 16\\n') == '54'\nassert solution('3 4\\n12 16\\n') == '86'\nassert solution('3 5\\n12 16\\n') == '104'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n3 4\\n') == '4'\nassert solution('10 9\\n5 5\\n') == '21'\nassert solution('10 10\\n1 1\\n') == '11'\nassert solution('10 10\\n0 0\\n') == '10'\nassert solution('1 1\\n0 0\\n') == '1'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n12 16') == '34'\nassert solution('4 8\\n36 1105 0') == '35'\nassert solution('5 7\\n4 5 830 7') == '60'\nassert solution('6 5\\n6 5 616 0') == '80'\n\n-----Explanation-----\nIn this test case, Yan and Fen want to find the highest possible rent for an apartment, subject to the constraints:\n\n1. The apartment must have a square footage of at least 1\n2. The apartment must have a number of smartbulbs of at least 1\n3. The apartment must have a square footage of at most 10,000\n4. The apartment must have a number of smartbulbs of at most 100\n5. The apartment must have a number of smartbulbs of at least 1\n6. The apartment must have a square footage of at most 50,000\n\nIn this case, the maximum rent is 34\n'''\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 1\\n12 16\") == '34'\n\nassert solution(\n    \"8 1\\n60 70\") == '39'\n\nassert solution(\n    \"3 1\\n3 4\") == '6'\n\nassert solution(\n    \"5 1\\n4 5\") == '6'\n\nassert solution(\n    \"4 1\\n10 10\") == '10'"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 1') == 3\nassert solution('6\\n1 2 3 1 3 4 2') == 5\nassert solution('4\\n1 3 2 1') == 2\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\n\"\"\"\n\nn = int(input())\nlang = [int(x) for x in input().split()]\n\nl = []\n\nfor i in range(n):\n    if i+1!= lang[i]:\n        l.append(lang[i])\n        \nprint(len(l))"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n'''"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n'''"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\n-----Problem-----\nWhen deciding the seating arrangement, Martin\u2019s mother Margarethe have decided that all the guests should be seated with maximum awkwardness; this is to ensure that nobody has anything meaningful to discuss during dinner, and everyone would instead silently enjoy her rather tasty coriander soup (as the saying goes; \u201cwhen the food is good, conversation dies\u201d).\n\nWhen deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language.\n\nWhen deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. When deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language.\n\n-----Samples-----\nInput:\n4\n1 2 3 1\nOutput:\n3\nInput:\n4\n3 2 1 1\nOutput:\n4\nInput:\n4\n1 2 3 2\nOutput:\n2\n-----Explanation-----\nWhen deciding the seating arrangement, Margarethe have decided that all the guests should be seated with maximum awkwardness; this is to ensure that nobody has anything meaningful to discuss during dinner, and everyone would instead silently enjoy her rather tasty coriander soup (as the saying goes; \u201cwhen the food is good, conversation dies\u201d).\n\nWhen deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language.\n\nFor example, with the input:\n\n4\n1 2 3 1\n\nMargarethe would define the awkwardness level to be $3$:\n\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n\n2 3 1\n2 3 1\n1 2 3\n\n3 1 2\n3 1 2\n3 1 2\n\n4 1 2\n1 2 3\n2 3 1\n\n4 1 2\n1 2 3\n2 3 1\n\n4 1 2\n1 2 3\n2 3 1\n\n4 1 2\n1 2 3\n2 3 1\n\n4 1 2\n1 2 3\n2 3 1\n\n4 1 2\n1 2 3\n2 3 1\n\nWhen deciding the seating arrangement, Margarethe has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. The two options here, that have the smallest awkwardness level are:\n\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n\nand\n\n1 2 3\n1 2 3\n1 2 3\n\nMargarethe has chosen the option with fewer seats to be the best option.\n\n-----Constraints----\n1 <= n <= 100000\n1 <= x_i <= 10^9\n\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\nprint(solution(\"4\\n1 2 3 1\"))\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.0') == '1088'\nassert solution('2.1') == '2240'\nassert solution('2.5') == '2480'\nassert solution('3.14') == '3598'\nassert solution('3.99') == '3888'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0.14') == '14'\nassert solution('1.1') == '14'\nassert solution('4.9') == '49'\nassert solution('0.44') == '4'\nassert solution('0.25') == '1'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0') == '1088'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"1.1\") == \"1089\"\nassert solution(\"1.49\") == \"1089\"\nassert solution(\"1.49\") == \"1089\"\nassert solution(\"1.5\") == \"1090\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.0') == 1088\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0.1\") == \"1088\"\nassert solution(\"0.5\") == \"575\"\nassert solution(\"1.0\") == \"1000\"\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0') == '1000'\nassert solution('4.9') == '431'\nassert solution('45.0') == '4605'\nassert solution('4.5') == '4980'\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"0.75\") == \"1280\"\nassert solution(\"2.0\") == \"2288\"\nassert solution(\"3.0\") == \"3280\"\nassert solution(\"4.0\") == \"4488\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0\") == \"1088\"\nprint(solution(\"1.0\"))\n'''\n\nfrom decimal import *"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 4\\n5 1 1 1\\n9 1 1 1\") == \"25.000000000\"\n\"\"\"\n\nfrom decimal import Decimal\nfrom typing import Dict, List"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"4.00\"\nassert solution(\"1 0\") == \"0.00\"\nassert solution(\"2 1\") == \"50.00\"\nassert solution(\"4 1\") == \"100.00\"\nassert solution(\"4 0\") == \"50.00\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 1 1\\n0 0 1 1\\n1 1 1 1\\n3 1 1 1\\n3 1 1 1') == '25.000000000'\nassert solution('4\\n2 1 1 1\\n1 0 1 1\\n0 1 1 1\\n0 1 1 1') == '25.000000000'\nassert solution('3\\n2 1 1 1') == '25.000000000'\nassert solution('2\\n2 1 1 1') == '25.000000000'\nassert solution('1\\n2 1 1 1') == '25.000000000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 4\\n2 0 10 0 50\\n2 10 10 10 50\\n2 20 20 20 50\\n2 30 30 30 50') == '50.0\\n50.0\\n50.0\\n50.0'\n\n---\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 4\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0 0 100\\n0 0 0 100') == '100.0'\n\"\"\"\n\n\"\"\"\nSolution:\n\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2\\n1 2 3\\n0 2\") == \"5.000000\\n5.000000\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4\\n') == '4.0'\n\"\"\"\n\nn,s = [int(x) for x in input().split()]\n\nr,x,y,z = [], [], [], []\n\nfor _ in range(n):\n    x,y,z,r = [int(x) for x in input().split()]\n\nz.sort()\nd = (z[-1] - z[0]) / (s - 1)\n\nfor i in range(s):\n    r.append((r[i] - z[0]) / d)\n\nz.append(r[-1])\nz.sort()"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 4\\n50.0 0.0 0.0 50.0 50.0 50.0') == '25.000000'\nassert solution('0 2\\n30.0 0.0 0.0 30.0 30.0 30.0') == '25.000000'"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2 2 2 1\\n1 2 2 3\\n1 1 1 2\\n3 2 2 1\\n') == '1.0\\n0.5\\n0.5\\n0.5\\n'\n    \n\n\"\"\"\nimport sys\nfrom typing import List, Dict\nimport math"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\nassert solution(\"5 1 4\\n4\\n2\\n8\\n6\\n7\") == \"DA\\nDA\\nDA\\nDA\\nDA\"\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"DA\"\nassert solution(\"3 3\") == \"NE\"\nassert solution(\"5 5\") == \"NE\"\n\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 5\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\\n\"\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 4\\n3\\n4\\n5\\n6\\n\") == \"DA\"\nassert solution(\"2 3 4\\n3\\n4\\n5\\n6\\n\") == \"DA\"\nassert solution(\"2 3 4\\n3\\n4\\n5\\n6\\n\") == \"DA\"\nassert solution(\"2 3 4\\n3\\n4\\n5\\n6\\n\") == \"DA\"\nassert solution(\"2 3 4\\n3\\n4\\n5\\n6\\n\") == \"DA\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA DA DA NE NE\"\n\n-----Explanation-----\nThe five matches are given in the order: 3, 4, 5, 6, 7.\n\nThe first match 3 fits on the bottom of the box, so the output is \"DA\".\n\nThe second match 4 fits on the bottom of the box, so the output is \"DA\".\n\nThe third match 5 does not fit on the bottom of the box, so the output is \"NE\".\n\nThe fourth match 6 fits on the bottom of the box, so the output is \"DA\".\n\nThe fifth match 7 does not fit on the bottom of the box, so the output is \"NE\".\n\nSample Input:\n4 5 6\n1\n2\n3\n4\n5\n6\nSample Output:\nDA NE NE NE\n\n\"\"\"\n\nfrom math import sqrt\n\nN, W, H = map(int, input().split())\nmatches = list(map(int, input().split()))\n\ncount = 0\nfor match in matches:\n    if match >= sqrt(W**2 + H**2):\n        count += 1\n\nprint(\"DA\" * count + \" NE\" * (len(matches) - count))\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n4\\n2\\n3\\n5\\n6\\n4\\n') == 'DA'\nassert solution('1 10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == 'DA'\nassert solution('1 10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == 'DA'\nassert solution('1 10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == 'DA'\nassert solution('1 10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == 'DA'\n\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\\n\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\nprint(solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\"))\n\nprint(\"Hello, World!\")"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n7 42\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 10\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom typing import List, NamedTuple, Iterator\n\n\nclass Car(NamedTuple):\n    time: int\n    distance: int\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n0 0\n7 42\n''') == '6'\n\nimport sys; sys.path.append('../..'); import helpers\n\nhelpers.submit(5, solution)\n'''\n5\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\n0 0\n7 42\n''') == '6'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n'''\n\nimport math\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0\n0 1\n0 2''') == '1'\nassert solution('''4\n0 0\n1 0\n0 1\n0 2''') == '1'\nassert solution('''5\n0 0\n1 0\n0 1\n0 2\n0 3''') == '2'\n\n------------------------------------------------------------------------------------------------------------------------\n\nGiven a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16,...) which sum to n.\n\nFor example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.\n\n-----Input-----\nThe only line of input contains a single integer n.\n\n-----Output-----\nPrint a single integer denoting the least number of perfect square numbers which sum to n.\n\n-----Examples-----\nSample Input:\n12\nSample Output:\n3\n\nSample Input:\n13\nSample Output:\n2"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 42\") == \"6\"\nprint(solution(stdin))\n\n-----------------------------"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'correct'\nassert solution('ABCDEFG') == '3'\nassert solution('ABCDEFGH') == '5'\nassert solution('ABCDEFGHIJKL') == '10'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == '25'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'correct'\nassert solution('ALICE BOB -> CARL') == '1'\nassert solution('ALICE BOB -> BOB -> CARL') == '2'\nassert solution('ALICE BOB -> BOB -> ALICE -> CARL') == '3'\nassert solution('ALICE BOB -> ALICE -> CARL') == '4'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n -> ALICE\\n -> BOB\\n ALICE BOB -> CARL\\n -> BOB\\n -> ALICE\") == \"correct\"\nassert solution(\"4\\n -> ALICE\\n -> BOB\\n ALICE BOB -> CARL\\n -> BOB\\n -> ALICE\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"correct\"\nassert solution(\"ALICE -> BOB\") == \"correct\"\nassert solution(\"ALICE -> BOB -> CARL\") == \"3\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == 'correct'\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == '2'\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\"\n\n\"\"\"\nYou are teaching discrete math. You have done your best to teach your students about axioms and inference rules, proofs and theorems. Sometimes the students write beautiful proofs that Fermat would be proud of but sometimes, also like Fermat, their proofs are not quite right. You are getting a little tired of hunting through some of these so-called \u201cproofs\u201d for the magic tricks that let them prove $1 = 2$ and had the great idea to write a computer program to speed things up!\n\nBecause this is the first class in proof-based mathematics, you have started your students off with a simple proof system. All proof lines consist of a list of assumptions, an arrow, and a conclusion. If there are no assumptions, the conclusion is an axiom. A line of the proof is valid if and only if all assumptions were conclusions of previous lines. Sometimes the students derive a conclusion more than once just to be extra sure it is true, and that is perfectly all right!\n\n-----Input-----\nThe first line of input consists of an integer $1 \\le n \\le 400000$, the number of lines in the \u201cproof\u201d. Then follow the $n$ lines of the \u201cproof\u201d. Each line has $0 \\le a \\le 5$ assumptions, followed by an arrow (the string \u201c->\u201d), followed by one conclusion. All assumptions and conclusions consist of $1 \\le c \\le 5$ uppercase alphabetic characters. The assumptions, arrow, and conclusion are all separated by single spaces.\n\n-----Output-----\nIf every line is correct output \u201ccorrect\u201d. Otherwise, output the number of the first line with an error (line numbers start at $1$).\n\n-----Examples-----\nSample Input:\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nSample Output:\ncorrect\n\"\"\"\n\n\"\"\"\nYou are teaching discrete math. You have done your best to teach your students about axioms and inference rules, proofs and theorems. Sometimes the students write beautiful proofs that Fermat would be proud of but sometimes, also like Fermat, their proofs are not quite right. You are getting a little tired of hunting through some of these so-called \u201cproofs\u201d for the magic tricks that let them prove $1 = 2$ and had the great idea to write a computer program to speed things up!\n\nBecause this is the first class in proof-based mathematics, you have started your students off with a simple proof system. All proof lines consist of a list of assumptions, an arrow, and a conclusion. If there are no assumptions, the conclusion is an axiom. A line of the proof is valid if and only if all assumptions were conclusions of previous lines. Sometimes the students derive a conclusion more than once just to be extra sure it is true, and that is perfectly all right!\n\n-----Input-----\nThe first line of input consists of an integer $1 \\le n \\le 400000$, the number of lines in the \u201cproof\u201d. Then follow the $n$ lines of the \u201cproof\u201d. Each line has $0 \\le a \\le 5$ assumptions, followed by an arrow (the string \u201c->\u201d), followed by one conclusion. All assumptions and conclusions consist of $1 \\le c \\le 5$ uppercase alphabetic characters. The assumptions, arrow, and conclusion are all separated by single spaces.\n\n-----Output-----\nIf every line is correct output \u201ccorrect\u201d. Otherwise, output the number of the first line with an error (line numbers start at $1$).\n\n-----Examples-----\nSample Input:\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nSample Output:\ncorrect\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nALICE -> BOB\\nALICE BOB -> CARL\\nALICE CARL -> BOB\") == 'correct'\n\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\n\nfor _ in range(a):\n    data = sys.stdin.readline().split()\n    flag = True\n    for i in range(1, len(data)):\n        if data[i - 1]!= data[i] and data[i] not in data[:i]:\n            print(i + 1)\n            flag = False\n            break\n    if flag:\n        print('correct')"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\n-----Solution-----\nlines = int(stdin.readline().strip())\n\nfor _ in range(lines):\n    assumptions = set(stdin.readline().strip()[:-2].split(\" \"))\n    arrow = stdin.readline().strip()\n    conclusion = stdin.readline().strip()\n\n    if assumptions:\n        if (arrow == \"->\" and conclusion in assumptions) or (arrow == \"<-\" and conclusion not in assumptions):\n            print(\"correct\")\n        else:\n            print(1)\n            break\n    else:\n        if conclusion in assumptions:\n            print(\"correct\")\n        else:\n            print(1)\n            break\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"Penny Franklin\\n\"\n    \"Marti Graham\\n\"\n    \"Connie Froggatt\\n\"\n    \"Joseph Ivers\\n\"\n    \"Connie Froggatt\\n\"\n    \"Penny Franklin\\n\"\n    \"Connie Froggatt\\n\"\n    \"Bruce Stanger\\n\"\n    \"Connie Froggatt\\n\"\n    \"Barbara Skinner\\n\"\n    \"Barbara Skinner\\n\"\n    ) == \"Connie Froggatt\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Runoff!\"\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Penny Franklin\"\n'''\n\n'''"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Connie Froggatt'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\n\"\"\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == \"Runoff!\"\nassert solution('Penny Franklin') == \"Connie Froggatt\"\nassert solution('Marti Graham') == \"Connie Froggatt\"\nassert solution('Connie Froggatt') == \"Connie Froggatt\"\nassert solution('Penny Franklin') == \"Connie Froggatt\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"6\\nBib-Fortuna Huttese Basic\\nChewbacca Shyriiwook Basic\\nGrakchawwaa Shyriiwook Basic\\nR2D2 Binary Basic\") == \"4\"\nassert solution(\"10\\nDarth-Vader Huttese Basic\\nJawaese Jawaese Basic\\nJawaese Jawaese Basic\\nJawaese Jawaese Basic\\nJawaese Jawaese Basic\\nJawaese Jawaese Basic\\nJawaese Jawaese Basic\\nDarth-Vader Huttese Basic\\nR2D2 Basic\\nR2D2 Basic\") == \"5\"\nassert solution(\"6\\nBib-Fortuna Huttese Basic\\nChewbacca Shyriiwook Basic\\nGrakchawwaa Shyriiwook Basic\\nR2D2 Binary Basic\") == \"4\"\nassert solution(\"6\\nBib-Fortuna Huttese Basic\\nChewbacca Shyriiwook Basic\\nGrakchawwaa Shyriiwook Basic\\nR2D2 Binary Basic\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('3\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '3'\nassert solution('8\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nGreedo Jawaese Jawaese') == '0'\n'''\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\"\"\") == '2'\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n' + \\\n'Abominable-Devil-Cricket Huttese\\n' + \\\n'Bib-Fortuna Huttese Basic\\n' + \\\n'Boba-Fett Basic Huttese\\n' + \\\n'Chewbacca Shyriiwook Basic\\n' + \\\n'Luke Basic Jawaese Binary\\n' + \\\n'Grakchawwaa Shyriiwook Basic Jawaese\\n' + \\\n'R2D2 Binary Basic\\n'\n) == '2'\n\nassert solution('6\\n' + \\\n'The-Death-Of-Hilbert Huttese\\n' + \\\n'Chewbacca Basic Huttese\\n' + \\\n'Bib-Fortuna Huttese Basic\\n' + \\\n'Boba-Fett Basic Huttese\\n' + \\\n'Jabba-the-Hutt Huttese\\n' + \\\n'Grakchawwaa Basic Jawaese\\n' + \\\n'R2D2 Basic Jawaese Binary\\n'\n) == '4'\n\n-----Problem-----\nYou\u2019re working on a translator for a class of 40 students, and each student is going to the school to learn the alphabet of the class. The class teacher wants to minimize the number of unnecessary phone calls to give to the students.\n\nTo do this, she wants to create a dictionary that maps each letter of the alphabet to the student(s) who can learn that letter. You\u2019re given a list of $N$ students and a list of $N$ strings, where the string for each student represents the letters of the alphabet that the student knows. To illustrate:\n\nA string, Alice, for example, might look like this: \u201cabcde fghij klmnop qrstu vwxyz\u201d.\n\nAfter mapping each letter to the set of students who can learn it, the dictionary would look like this:\n\n{\u201ca\u201d: {\u201cAlice\u201d}, \u201cb\u201d: {\u201cAlice\u201d}, \u201cc\u201d: {\u201cAlice\u201d}, \u2026 }\nA character, \u2018a\u2019, for example, could be mapped to the set of students who can learn it.\n\nYour task is to help the teacher find the smallest set of characters that contains all of the letters.\n\n-----Solution-----\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == 2\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"6\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"1\"\nassert solution(\"5\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"1\"\nassert solution(\"3\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nR2D2 Binary Basic\") == \"1\"\nassert solution(\"3\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nR2D2 Binary Basic\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '2'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('1 100 1 1\\n100') == '100'\nassert solution('2 1000 2 3\\n100\\n100\\n100') == '100'\n\nprint(solution(input()))\n\n---"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == 900\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == '900'\nprint(solution(stdin))"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\nprint(\"Tests passed.\")\n\n'''\n\n\nfrom math import ceil\nfrom functools import reduce"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n'''\n\nimport sys\n\nN, B, H, W = map(int, sys.stdin.readline().split())\nprice = [0] + list(map(int, sys.stdin.readline().split()))\nbeds = [0] + list(map(int, sys.stdin.readline().split()))\ncost = 0\n\nfor i in range(1, H + 1):\n    for j in range(1, W + 1):\n        cost = max(cost, price[i] * beds[i])\n\nprint(cost if cost <= B else \"stay home\")\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == 900\nassert solution('3 1000 2 3\\n200\\n27 3 20\\n300\\n27 3 20') == 2700\n\"\"\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"10\\nC D E F G A B C\") == \"none\"\nassert solution(\"10\\nC D E F G A B C D E E C\") == \"D E F G A B C\"\n\"\"\"\n\n\"\"\"\nSTART\nimport re\n\nclass MusicScale:\n    def __init__(self, notes):\n        self.notes = notes\n        self.scale = {}\n        self.generateScale()\n        self.scale.pop(0)\n        self.notes.pop(0)\n    def generateScale(self):\n        for i, x in enumerate(self.notes):\n            if i == 0:\n                self.scale[x] = self.notes[1:]\n                self.scale[x].insert(0, x)\n            else:\n                self.scale[x] = self.notes[i+1:]\n                self.scale[x].insert(0, x)\n    def generateScaleDict(self):\n        scaleDict = {}\n        for key in self.scale:\n            for note in self.scale[key]:\n                scaleDict[note] = key\n        return scaleDict"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"A# C D# F G# A#\"\n\"\"\"\n\nnotes = [i for i in stdin.split()]"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('C D F D C D F F F C') == 'A# C D# F'\nassert solution('C D F D C D F F F C') == 'A# C D# F'\nassert solution('C D F D C D F F F C') == 'A# C D# F'\nassert solution('C D F D C D F F F C') == 'A# C D# F'\nassert solution('C D F D C D F F F C') == 'A# C D# F'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"10\\nC D F C D C D F F F C\") == \"none\"\nassert solution(\"10\\n
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('C D F D C D F F F C ') == 'A# C D# F'\nassert solution('C D F D C D F F F G ') == 'none'\nassert solution('C D F D C D F F F C A ') == 'A# C D# F'\nassert solution('C D F D C D F F F C B ') == 'A# C D# F#'\nassert solution('C D F D C D F F F C C ') == 'A# C D# F#'\n\n\"\"\"\n\nimport sys\n\nfrom itertools import permutations\n\nCHROMATIC_NOTES = {\n    \"C\": 0,\n    \"C#\": 1,\n    \"D\": 2,\n    \"D#\": 3,\n    \"E\": 4,\n    \"F\": 5,\n    \"F#\": 6,\n    \"G\": 7,\n    \"G#\": 8,\n    \"A\": 9,\n    \"A#\": 10,\n    \"B\": 11\n}"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 1 7 0\") == \"A# C D# F#\"\nassert solution(\"7 2 4 0\") == \"A C D F\"\n\"\"\"\n\nfrom collections import OrderedDict\n\nfrom data_structures.trie.trie import Trie\nfrom data_structures.trie.trie_node import TrieNode\nfrom data_structures.trie.trie_node_data_structure import TrieNodeDataStructure\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nA B C D E\n''') == 'A# C D# E'\nassert solution('''2\nA B\n''') == 'none'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10\nC D F D C D F F F C''') == 'A# C D# F'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ju traeligt va') == 'dae ju traeligt va'\n\nprint(solution(stdin))\n\nimport codewars_test as test\n\nfrom solution import solution\n\ntest.it(\"Basic tests\")\ntest.assert_equals(solution('dae ae ju traeligt va'), 'dae ae ju traeligt va')\ntest.assert_equals(solution('haer talar vi rikssvenska'), 'haer talar vi rikssvenska')\ntest."
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('hagl ym en uttr\u00e5g') == 'haer talar vi rikssvenska'\nassert solution('dag och kl\u00f6m') == 'dag och kl\u00f6m'\nassert solution('nohel rikssvenska') == 'nohel rikssvenska'\nassert solution('rikssvenska is the language of the world') == 'rikssvenska is the language of the world'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"haer oss traeligt rikssvenska\") == \"haer oss traeligt rikssvenska\"\nassert solution(\"haer oss vi rikssvenska\") == \"haer oss vi rikssvenska\"\nassert solution(\"haer v\u00e5r vi rikssvenska\") == \"haer v\u00e5r vi rikssvenska\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"aa ae ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"ae ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"ae ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju ju"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"hj\u00e4rter jag klar och blir rikst\u00e4lld\") == \"hj\u00e4rter jag klar och blir rikst\u00e4lld\"\nassert solution(\"\u00e4gar den \u00e4garnas hemma\") == \"\u00e4gar den \u00e4garnas hemma\"\nassert solution(\"hj\u00e4rter jag klar och blir rikst\u00e4lld\") == \"hj\u00e4rter jag klar och blir rikst\u00e4lld\"\nassert solution(\"\u00e4gar den \u00e4garnas hemma\") == \"\u00e4gar den \u00e4garnas hemma\"\n\nimport collections\nimport re"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt vaee\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt vaest \u00e4\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt vaest \u00e4e\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt vaest \u00e4est\") == \"haer talar vi rikssvenska\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt\") == \"haer talar vi rikssvenska\"\nassert solution(\"je jag \u00e4r sjuk\") == \"haer talar vi rikssvenska\"\nassert solution(\"\u00e4tt \u00e4tt ja\") == \"dae ae ju traeligt va\"\nassert solution(\"a b c d a b c \u00e4 \u00f6 c d e f g\") == \"dae ae ju traeligt va\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"hj\u00e4rter blev ju talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"hj\u00e4rter ju va\") == \"haer talar vi rikssvenska\"\nassert solution(\"juva\") == \"haer talar vi rikssvenska\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ea ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt v\u00e4\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va ju') == 'dae ae ju traeligt va ju'\nassert solution('dae ae ju traeligt va je') == 'dae ae ju traeligt va je'\nassert solution('dae ae ju traeligt va ji') == 'dae ae ju traeligt va ji'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nprint(solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\"))\n\"\"\"\nimport sys\nfrom collections import deque\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\ngrid = [list(sys.stdin.readline().rstrip()) for _ in range(n)]"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"....#\\n....#\\n#.....\\n......\\n##...#\\n\") == \"E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"\n\nfrom typing import List, Set\nfrom itertools import permutations\n\n\nclass InvalidMapError(Exception):\n    pass\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.#..') == '#..'\nassert solution('#.#.#') == '#.#.#'\nassert solution('##.#.') == '##.#.'\nassert solution('.#...') == '.#...'\nassert solution('.#.#E') == '.#.#E'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....#.#\", 5) == \"...E.E...\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\".join(stdin.splitlines())) == \"E.E.#E\"\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#..\") == \"..E.\"\nassert solution(\"..##\") == \"..E.\"\nassert solution(\"###..\") == \"..E.\"\nassert solution(\"..#.#\") == \"..E.\"\nassert solution(\"##.#.\") == \"E.#E.\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '''12 10 3 8 4 2'''\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '''12 10 3 8 4 2'''\nprint(solution(stdin))\n\n----\nSample Input:\n20 27 14 21 3 6 5 10 19 23\nSample Output:\n20 21 3 6 10 19 23 14 21 6\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('0 0 0') == '0'\n\"\"\"\n\nfrom collections import deque\n\ne, f, c = map(int, input().split())\n\nq = deque([(f, e)])\nans = 0\nwhile q:\n    n, cnt = q.popleft()\n    q.extend([(n - 1, cnt + 1), (n * c, cnt + 1)])\n    if cnt + 1 == c:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 0 3') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''9 0 3''') == 4\n\"\"\"\n\n\nimport sys\n\ne, f, c = list(map(int, sys.stdin.readline().split()))\nprint(e + f + c - f - c + 2)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 0') == '2'\nassert solution('1 0 3') == '2'\nassert solution('1 0 2') == '1'\n'''\n\nimport math\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('9 2 3') == '7'\nassert solution('9 10 3') == '5'\nassert solution('9 1 3') == '4'\nassert solution('0 0 3') == '0'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"9 0 3\") == \"4\"\nassert solution(\"8 0 2\") == \"3\"\nassert solution(\"7 0 1\") == \"2\"\nassert solution(\"6 0 0\") == \"0\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('1 0 2') == '4'\nassert solution('0 0 2') == '4'\nassert solution('1 1 2') == '0'\nassert solution('1 1 0') == '0'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\ne, f, c = map(int, input().split())\nprint(e + (f // c))\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9 0 3''') == '4'\nassert solution('''9 0 3''') == '4'\nassert solution('''9 0 3''') == '4'\nassert solution('''9 0 3''') == '4'\nassert solution('''9 0 3''') == '4'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(bin(1)) == \"1\"\nassert solution(bin(2)) == \"10\"\nassert solution(bin(3)) == \"11\"\nassert solution(bin(4)) == \"100\"\nassert solution(bin(5)) == \"101\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"1010101010\") == \"132\"\n\n\"\"\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\") == \"12\"\n\nassert solution(\"111111\") == \"17\"\n\nassert solution(\"101010\") == \"12\"\n\nassert solution(\"101110\") == \"14\"\n\nassert solution(\"1110110\") == \"18\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"10010\") == \"13\"\nassert solution(\"10101\") == \"15\"\nassert solution(\"10011\") == \"16\"\nassert solution(\"11101010\") == \"80\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"1010\"), \"12\")"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"10101010\") == \"214\"\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n\n\"\"\"\n3.4\nA long-term motif in the world of formal languages is the concept of the \u201clexicographic order\u201d (or \u201clexicographical order\u201d for short). The lexicographic order is used for ordering words. For example, the word \u201cab\u201d is lexicographically smaller than the word \u201cabcd\u201d.\n\nThe order of sentences is the lexicographic order of the words. For example, in the sentence \u201cMy name is Ivan\u201d the words are ordered as \u201cMy, name, is, Ivan\u201d.\n\nThe order of sentences is the lexicographic order of the words. For example, in the sentence \u201cMy name is Ivan\u201d the words are ordered as \u201cMy, name, is, Ivan\u201d.\n\nIn this task, you have to write a program to find the lexicographic order of a sentence.\n\n-----Input-----\nThe first line of input contains a sentence, a string of lowercase letters of at least one letter.\n\n-----Output-----\nThe only line of output should contain the lexicographic order of the given sentence.\n\n-----Examples-----\nSample Input:\nhi my name is ivan\nSample Output:\nahimn seifn ivan\n\"\"\"\n\n\n\"\"\"\n3.5\nIn this task, you have to write a program to encode a string. The program should read the input string and then create the coded string. The program should encode the input string in the following way:\n\n- the first character should be copied unchanged;\n- the second character should be one character ahead of it;\n- the third character should be two characters ahead of it;\n- etc.\n\nIn fact, the first three characters should be encoded as \u201c1\u201d, the next three as \u201c2\u201d, etc.\n\nFor example, the program should decode the input string \u201chi my name is ivan\u201d into the coded string \u201c111111111 111111 1111 1111 1111 11111 11111 11111 11111 11111 11111 11110\u201d.\n\n-----Input-----\nThe first line of input contains a string of lowercase English letters, a string of at least three characters.\n\n-----Output-----\nThe only line of output should contain the encoded string.\n\n-----Examples-----\nSample Input:\nhi my name is ivan\nSample Output:\n111111111 111111 1111 1111 1111 11111 11111 11111 11111 11111 11111 11110\n\"\"\"\n\n\n\"\"\"\n3.6\nIn this task, you have to write a program to decode the coded string.\n\nIf the input string is the encoded string of the string \u201chi my name is ivan\u201d, the program should decode it to the string \u201chi my name is ivan\u201d.\n\n-----Input-----\nThe first line of input contains a string of encoded characters of the input string.\n\n-----Output-----\nThe only line of output should contain the decoded string.\n\n-----Examples-----\nSample Input:\n111111111 111111 1111 1111 1111 11111 11111 11111 11111 11111 11111 11110\nSample Output:\nhi my name is ivan\n\"\"\"\n\n\n\"\"\"\n3.7\nIn this task, you have to write a program to decrypt the message.\n\nThe input string consists of English lowercase letters and symbols.\n\n-----Input-----\nThe first line of input contains a string of lowercase English letters and symbols.\n\n-----Output-----\nThe only line of output should contain the decrypted message.\n\n-----Examples-----\nSample Input:\nabcdefghijklmnopqrstuvwxyz0123456789\nSample Output:\nThe meaning of life is 42\n\"\"\"\n\n\n\"\"\"\n3.8\nIn this task, you have to write a program to encrypt the message.\n\nThe input string consists of English lowercase letters and symbols.\n\n-----Input-----\nThe first line of input contains a string of lowercase English letters and symbols.\n\n-----Output-----\nThe only line of output should contain the encrypted message.\n\n-----Examples-----\nSample Input:\nabcdefghijklmnopqrstuvwxyz0123456789\nSample Output:\njgnnqdrtdugfbahlcrneiippooauiipplnojirnqdrdfgvfrfgjdnfjnrgjdf\n\"\"\"\n\n\n\"\"\"\n3.9\nIn this task, you have to write a program to encode the message by shifting each character to its adjacent character.\n\nIn the output, the letters will be replaced by two characters, one after the other.\n\nFor example, if the input string is \u201cI love Python\u201d, then the output should be \u201cUqdg dpyrfn\u201d.\n\n-----Input-----\nThe only line of input contains a string of lowercase English letters.\n\n-----Output-----\nThe only line of output should contain the encoded message.\n\n-----Examples-----\nSample Input:\nhi my name is ivan\nSample Output:\nuhhh ivvv eevn iam ivan\n\"\"\"\n\n\n\"\"\"\n3.10\nIn this task, you have to write a program to decrypt the message.\n\nThe input string consists of English lowercase letters and symbols.\n\n-----Input-----\nThe first line of input contains a string of lowercase English letters and symbols.\n\n-----Output-----\nThe only line of output should contain the decrypted message.\n\n-----Examples-----\nSample Input:\nabcdefghijklmnopqrstuvwxyz0123456789\nSample Output:\nThe meaning of life is 42\n\"\"\"\n\n\n\"\"\"\n3.11\nIn this task, you have to write a program to encrypt the message.\n\nThe input string consists of English lowercase letters and symbols.\n\n-----Input-----\nThe first line of input contains a string of lowercase English letters and symbols.\n\n-----Output-----\nThe only line of output should contain the encrypted message.\n\n-----Examples-----\nSample Input:\nabcdefghijklmnopqrstuvwxyz0123456789\nSample Output:\njgnnqdrtdugfbahlcrneiippooauiipplnojirnqdrdfgvfrfgjdnfjnrgjdf\n\"\"\"\n\n\n\"\"\"\n3.12\nIn this task, you have to write a program to count the number of characters in a sentence.\n\n-----Input-----\nThe first line of input contains a string of characters.\n\n-----Output-----\nThe only line of output should contain the number of characters in the given string.\n\n-----Examples-----\nSample Input:\nWelcome\nSample Output:\n12\n\"\"\"\n\n\n\"\"\"\n3.13\nIn this task, you have to write a program to find the index of a character in a string.\n\nThe input string consists of English lowercase letters and symbols.\n\n-----Input-----\nThe first line of input contains a string of lowercase English letters and symbols.\n\n-----Output-----\nThe only line of output should contain the index of the given character in the given string.\n\n-----Examples-----\nSample Input:\nabcdefghijklmnopqrstuvwxyz0123456789\nSample Output:\n0\n1\n2\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\n\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n..o\\no..\\n') == 2\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n..o\\no..\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution for exercise number 3 in the course\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\nprint(solution(\"2 3\\n..o\\no..\"))"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\no\\no\\no\\noo') == 2\nassert solution('2 3\\no\\no\\noo') == 2\nassert solution('2 3\\noooo\\noo') == 0\nassert solution('2 3\\no\\noo') == 2\nassert solution('2 3\\noo') == 2\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\nassert solution(\"2 5\\n.o.o\\no.o\\no.o\\n..o\\no.o\") == 7\nassert solution(\"1 5\\n..o\") == 0\nassert solution(\"5 1\\no.o\\no.o\\no.o\\no.o\\no.o\") == 0\nassert solution(\"5 50\\n..o..o..o..o..o..o..o..o..o..o\\no.o\") == 49\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''..o\no..''') == 2\nassert solution('''...o\no.o.\n.o..\n..oo\n...o\no.o.\n.o..\n...o\no.o.\n.o..\no.o.\n..oo\n...o\no.o.\n.o..''') == 5"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"SMECE\"\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\n---\n>>> \n=== RESTART: /Users/fa/Desktop/PJ/CI/CI/a2.py ===\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nLADICA\nLADICA\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution('5 4\\n1 2\\n1 3\\n1 4\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nLADICA\\nSMECE'\nassert solution('5 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nSMECE'\nassert solution('5 6\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nSMECE'\n\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n---\nLOL\nYou are looking for the smallest/highest number that works in every case.\n\nTo check that, it is enough to just iterate and check what happens with each number.\n\nThe smallest/highest number is:\n\n- The smallest number is 1, so:\n1 2 3 4 5 6 7 8 9 10 11\n\n- The highest number is:\n292929292929292930\n\nSo the answer is:\n292929292929292930\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\n\"\"\"\n\nN, L = [int(i) for i in stdin.split()]\n\ndrawers = []\nfor i in range(N):\n    A, B = [int(j) for j in stdin.split()][1:]\n    drawers.append((A, B))\n\ndrawers.sort(key=lambda x: x[0])\n\nout = []\nfor i, (A, B) in enumerate(drawers):\n    if A == B:\n        out.append('LADICA')\n        continue\n\n    if A > B:\n        out.append('SMECE')\n        continue\n\n    out.append('LADICA')\n    out.append('LADICA')\n    out.append('LADICA')\n    out.append('SMECE')\n    out.append('SMECE')\n\nprint('\\n'.join(out))\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2\\n1 3\\n2 3\\n2 4') == 'LADICA\\nLADICA\\nLADICA\\nSMECE'\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0') == '1 2'\n\"\"\"\n\nn = int(stdin.readline())\nd = list(map(int, stdin.readline().split()))\ncnt = 1\nfor i in range(n - 1):\n    cnt += d[i]\n    d[i] = cnt\nprint(' '.join(map(str, d)))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('\\n2\\n0') == '1 2'\nassert solution('\\n3\\n1 2') == '2 1 3'\nassert solution('\\n5\\n2 1 4 3') == '4 3 2 5 1'\n\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\") == \"2\"\nassert solution(\"1\\n0\") == \"1\"\nassert solution(\"2\\n1 1\") == \"2 1 3\"\nassert solution(\"2\\n1 0\") == \"1 2\"\nassert solution(\"3\\n1 2 2\") == \"3 1 4\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\nprint(solution(\"4\\n2 3 2 1\"))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0') == '1 2'\nassert solution('3') == '1 2 4'\nassert solution('5') == '1 2 4 6 8'\nassert solution('7') == '1 2 4 6 8 10'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0') == '1 2'\nassert solution('1\\n0') == '1'\nassert solution('3\\n1 1') == '2 1 3'\nassert solution('5\\n2 3 3 3 3') == '1 2 4 5'\nassert solution('6\\n2 2 3 4 5 5') == '1 2 3 4 5 6'\n\n---Problem---\n\nJimmy is standing in the lineup of ice cream for a competition. His friend wants to know what the order of the people in the line is. They are going to put the numbers on each of the people's arms and then start counting from 1, left to right. The person with the highest number on their arm goes first, the person with the next highest goes second, and so on. If two people have the same highest number, they go in the order from left to right.\n\nWhen Jimmy's friend gives the numbers, he remembers the numbers on each of the people's arms but doesn't know the order. Can you help Jimmy figure out the order?\n\n---Input---\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 100$), the number of people in the line.\n\nThe second line contains $n-1$ space separated integers, where $d_ i$ ($0 \\leq d_ i \\leq n-2$) is the number of people between the $(i+1)^\\textrm {th}$ person and Jimmy.\n\nJimmy is always first in the lineup.\n\n---Output---\nPrint a single line with $n$ integers, the people in the order of the original lineup. It is guaranteed that there is always a unique solution.\n\n---Sample Input---\n5\n2 1 1 3 1\n---Sample Output---\n1 2 3 4 5\n\nExplanation:\nJimmy is standing in the line of people with 5 people, and his friend gave him the numbers 1, 1, 3, 1.\n\nThe people in the order of the original lineup is 1, 2, 3, 4, 5.\n\nSo we print the numbers in the order 1, 2, 3, 4, 5.\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n0\\n1') == '1 2'\nassert solution('3\\n0\\n1\\n2') == '1 2 3'\nassert solution('3\\n0\\n0\\n1') == '1 3 2'\nassert solution('4\\n0\\n0\\n1\\n2') == '1 4 3'\nassert solution('5\\n0\\n0\\n0\\n2\\n3') == '1 5 4'\n\nSample Input:\n3\n1\n0\nSample Output:\n1 2 3\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0') == '1 2'\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 2'\nassert solution('2 1') == '1 2'\nassert solution('2 2') == '2 1'\nassert solution('3 2') == '2 1'\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2 1\\n1 1\\n0 1\\n1 2\\n2 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\"\"\"\n\nn, h, l = [int(n) for n in stdin.split()]\ns = set(int(n) for n in stdin.split()[1::2])\n\nh_list = {n: 0 for n in range(n)}\nfor _ in range(h):\n    x = int(stdin.split()[h + 1])\n    h_list[x] = float('inf')\n    for y in range(n):\n        if x in s:\n            if h_list[y] < h_list[x] + 1:\n                h_list[y] = h_list[x] + 1"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\"\"\"\n\n_, x, _, *mat = [int(s) for s in stdin.split()]\nmat = sorted(sorted(map(int, s.split())) for s in stdin.split('\\n')[3:])\n\nfor a, b in mat:\n    if x < b:\n        break\n    x += 1\n\nprint(a)\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"1\"\nassert solution(\"6 2 4\\n0 5 1\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"3\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"0\"\n\"\"\"\n\nn, h, l = (int(x) for x in input().split())\nhorror = set(int(x) for x in input().split())\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\nassert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '0'\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 6\\n0 3\\n0 1\\n2 3\\n3 5\\n3 1\") == \"2\"\nassert solution(\"4 3 6\\n0 3\\n0 1\\n1 2\\n3 5\\n3 1\") == \"1\"\nassert solution(\"4 3 6\\n0 3\\n0 1\\n2 3\\n3 5\\n3 1\") == \"3\"\nassert solution(\"4 3 6\\n0 3\\n0 1\\n2 3\\n3 5\\n3 1\") == \"3\"\nassert solution(\"4 3 6\\n0 3\\n0 1\\n3 5\\n3 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 5\\n0 1\\n1 2\\n4 5\\n3 5\") == '2'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 6 3\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"7 6 3\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"3\"\n\"\"\"\n\nfrom math import inf\nfrom collections import defaultdict\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 1 0\n0 1\n0 1\n0 2\n0 3\n0 4''') == '0'\nassert solution('''3 1 0\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n0 2\n0 3\n0 4\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3''') == '3'\nassert solution('''6 0 0\n0 1\n0 1\n0 1\n0 1\n0 2\n0 3\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7''') == '1'\n\nassert solution('''3 1 0\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3\n0 1\n1 2\n1 3''') == '0'\nassert solution('''6 0 0\n0 1\n0 1\n0 1\n0 1\n0 2\n0 3\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n0 1\n1 2\n1 3\n1 4"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'impossible'\nassert solution('7\\n1 2 4 5 3 3 4\\n') == 'impossible'\nassert solution('7\\n1 2 3 4 5 3 3 4\\n') == '1 3 4 2 5 3 4'\n\nassert solution('3\\n1 4 2\\n') == 'impossible'\nassert solution('3\\n1 2 4\\n') == 'impossible'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"3\\n1 4 3\") == \"impossible\"\nassert solution(\"3\\n2 1 3\") == \"impossible\"\nassert solution(\"2\\n2 1\") == \"impossible\"\n\n------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n1 3 4\n\"\"\"\n) == \"\"\"\n4 3 1\n\"\"\"\nassert solution(\n\"\"\"\n4\n1 3 4\n\"\"\"\n) == \"\"\"\nimpossible\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 4 3\n\"\"\"\n) == \"\"\"\nimpossible\n\"\"\"\nassert solution(\n\"\"\"\n3\n2 3 4\n\"\"\"\n) == \"\"\"\n2 1 3\n\"\"\"\nassert solution(\n\"\"\"\n4\n2 3 4 1\n\"\"\"\n) == \"\"\"\n2 4 3 1\n\"\"\"\n\nprint(solution(input()))\n\n\"\"\"\n[iteration=1: time=0.15s]\nFirst, I did some calculations on my PC:\n\n3\n1 3 4\n4\n1 3 4\n4\n2 3 4 1\n5\n2 3 4 1 5\nImpossible\n3\n1 4 3\n4\n1 4 3\n4\n1 4 3\n4\nImpossible\n4\n1 4 3\n4\n1 4 3\n4\n1 4 3\n4\n1 4 3\n4\n\n[iteration=2: time=0.05s]\n1 4 3\n2\n1 4 3\n1\n4 3 1\n3\n2 1 3\n1\n4 3 2\n1\n4 3 2\n1\n4 3 2\n1\n4 3 2\n2\n4 3 1\n1\n4 3 1\n1\n4 3 1\n1\n4 3 1\n1\n4 3 1\nImpossible\n2\n4 3 1\n1\n4 3 1\n1\n4 3 1\nImpossible\n3\n4 3 1\n1\n4 3 1\n1\n4 3 1\n1\n4 3 1\n2\n4 3 1\n1\n4 3 1\n2\n4 3 1\n1\n4 3 1\nImpossible\n\"\"\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"3\\n1 3 4\\n0 -1 1\") == \"impossible\"\nassert solution(\"3\\n1 3 4\\n1 2 -1\") == \"impossible\"\nassert solution(\"3\\n1 3 4\\n1 2 -1\\n1 3 0\") == \"3 1 2\"\nassert solution(\"3\\n1 3 4\\n0 -1 1\\n1 2 0\") == \"impossible\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('2\\n2 2') == 'impossible'\n\"\"\"\n\nimport unittest\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('4\\n1 3 4') == 'impossible'\nassert solution('2\\n1 2') == 'impossible'\n\nfrom typing import Tuple, List"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 3\") == \"3 1\"\nassert solution(\"4\\n4 3 1 2\") == \"impossible\"\nassert solution(\"4\\n1 2 3 4\") == \"4 3 1 2\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\n-------------"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3 4 1 5\") == \"3 4 1 2 5\"\n\n################################################################################\n\nimport sys\nimport string\nimport math\nimport copy"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 20 15''') == '18.400'"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\n\nassert solution('''2 20 15\n3 10\n7 10\n14 10\n21 10\n28 10\n35 10\n42 10\n49 10\n56 10\n63 10\n70 10\n77 10\n84 10\n91 10\n98 10''') == '77.300'\n\nassert solution('''2 20 15\n3 10\n7 10\n14 10\n21 10\n28 10\n35 10\n42 10\n49 10\n56 10\n63 10\n70 10\n77 10\n84 10\n91 10\n98 10''') == '77.300'\n\nassert solution('''2 20 15\n3 10\n7 10\n14 10\n21 10\n28 10\n35 10\n42 10\n49 10\n56 10\n63 10\n70 10\n77 10\n84 10\n91 10\n98 10''') == '77.300'\n\nassert solution('''2 20 15\n3 10\n7 10\n14 10\n21 10\n28 10\n35 10\n42 10\n49 10\n56 10\n63 10\n70 10\n77 10\n84 10\n91 10\n98 10''') == '77.300'"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nimport math\n\nn, p, k = [int(x) for x in input().split()]\n\nt = [int(x) for x in input().split()]\n\ntotal_time = 0\n\nfor i in range(n):\n    total_time += k - t[i]\n\ntotal_time += k\n\nprint(math.ceil(total_time * (100 + p) / 100))\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 20 15') == '18.400'\nassert solution('3 10') == '12.800'\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '5'\nassert solution('2 3 4 5') == '9'\nassert solution('3 4 5') == '13'\nassert solution('4 5') == '17'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 20 15\\n3 10\\n') == '18.400'\n\"\"\"\n\nn, p, k = map(int, stdin.readline().split())\ntimes = list(map(int, stdin.readline().split()))\n\noriginal_len = sum(times)\n\nnum_speedups = 0\n\nfor i in range(n):\n    if i == 0:\n        num_speedups += 1\n    else:\n        num_speedups += int(k / times[i])\n\nprint(original_len * (100 + p) ** num_speedups / 100 ** num_speedups)"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 2 1\n5 1\n8 3\"\"\") == '1.8'\n\"\"\""
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\nprint(solution(stdin))\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n....H\n.....\nS....\n....H\n.....\n''') == '5'\n\n-----Solution-----\n'''\nThis problem can be solved by using a depth first search. We start by finding the nearest safe house and moving one step at a time until we reach the nearest safe house. We keep track of the distance traveled at any given point.\n'''"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == 5\n\n\"\"\"\n\nclass Solution:\n    def solve(self, N, grid):\n        # naive O(N^3) solution, as every block can be visited\n        # for each block, find all safe houses, then find the min\n        # since this is a toy problem, can do this in O(N^2)\n        min_dist = float('inf')\n        for y in range(N):\n            for x in range(N):\n                if grid[y][x] == 'S':\n                    for y1 in range(N):\n                        for x1 in range(N):\n                            if grid[y1][x1] == 'H':\n                                dist = abs(x1-x) + abs(y1-y)\n                                min_dist = min(min_dist, dist)\n        return min_dist\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"....H\\n.....\\nS....\\n....H\\n.....\") == 5\nassert solution(\"....H\\n.....\\nS....\\n....H\\n.....\") == 5\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == '5'\nprint('Test passes.')"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == 5\nassert solution('5\\n....H\\n.....\\n....S\\n....H\\n.....') == 6\nassert solution('5\\n....S\\n....H\\n.....\\n....S\\n....H\\n.....') == 6\nassert solution('5\\n....S\\n....H\\n.....\\n....H\\n....S\\n.....') == 4\nassert solution('5\\n....H\\n....S\\n....S\\n....H\\n.....') == 4"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == 5\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nS....\\n....H\\n....H\\n....H\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nS....\\n....H\\n.....\\n....H\\n.....\") == 5\n\"\"\"\n\nn = int(input())\nmapp = []\nfor _ in range(n):\n    mapp.append(list(input()))\n\nresult = 0"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n.H.S\\n....\\n.....\\n....\\n.H.') == 5\nassert solution('5\\n..S\\n....\\n....\\n.H.') == 3\nassert solution('5\\n.H.S\\n....\\n....\\n.H.') == 5\nassert solution('5\\n.H.S\\n..S\\n....\\n....\\n.H.') == 3\nassert solution('5\\n.H.S\\n.H.S\\n....\\n....\\n.H.') == 3"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\nassert solution('5 4 2\\n1 3 5\\n2 4\\n3 4') == '0'\n\nassert solution('5 4 2\\n2 4\\n1 3 5\\n3 4') == '2'\n\nassert solution('5 5 2\\n1 2 3 4 5\\n2 4\\n3 4') == '2'\n\nassert solution('5 5 3\\n2 4 5\\n2 3 4\\n3 4') == '3'"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('1 1') == '0'\n\nassert solution('1 1 2 2 2 2 2') == '1'\n\nassert solution('1 1 2 2 2 2') == '0'\n\nassert solution('1 1 2 2 2 2 3 3') == '2'"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1') == ''\nassert solution('1\\n2\\n3') == ''\nassert solution('3\\n2\\n1') == '1'\nassert solution('3\\n2\\n3') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 2\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 2 3\\n2 4\\n3 4') == '2'\nassert solution('5 2 3\\n2 4\\n3 4') == '2'\n'''"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 3 1\\n2 4\\n1 3 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == '0'\n\nassert solution(\"5 2 3\\n2 4\\n1 3 5\\n4\\n1 3 5\") == '2'\n\nassert solution(\"5 2 3\\n2 4\\n1 3 5\\n4\\n1 3 5\\n4\") == '1'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e X. \n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0433\u043e \u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u042d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 if... elif... else.\n\"\"\"\n\nx = float(input())\nprint(x % 1)\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\nassert solution(\"1 3\") == \"0.6666667\"\nassert solution(\"3 3\") == \"0.66666666\"\nassert solution(\"3 20\") == \"0.5\"\nassert solution(\"3 200\") == \"0.5\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\nassert solution(\"2 3\") == \"0.11111111\"\n\"\"\"\n\nr, c = [int(i) for i in input().split()]\n\nprint(\"0.000000000\")\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '0.000000'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '0.000000000'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1 1) == 0\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('1 2\\n') == '0.500000'\nassert solution('5 1\\n') == '0.250000'\nassert solution('10 1\\n') == '0.1000000'\nassert solution('2 10\\n') == '0.010000'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('2 1') == '0.33333333'\nassert solution('2 2') == '0.500000'\nassert solution('2 3') == '0.66666667'\nassert solution('3 1') == '0.66666667'\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2 3 5 4\") == \"1\"\nassert solution(\"1\\n1 2 3 4 5\\n1 2 3 5 4\") == \"2\"\nassert solution(\"2\\n1 2 3 4 5\\n1 2 3 5 4\") == \"0\"\nassert solution(\"3\\n1 2 3 4 5\\n1 2 3 5 4\\n1 2 3 4 5\") == \"0\"\n\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nlines = stdin.split('\\n')"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n100 101 102 103 488') == '2'\n\"\"\"\nimport sys\nimport functools"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 3 1 1\") == \"1\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"3\\n100 100 200 300 100 200\") == \"2\"\nassert solution(\"3\\n100 200 300 100 200 100\") == \"2\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(int(input()))\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n') == '2'\nprint(solution(stdin=input()))\n\nimport itertools\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        courses = stdin.split('\\n')\n        courses_set = set()\n        for course_nums in courses:\n            courses_set.update(course_nums.split(' '))\n\n        result = 0\n        for nums in itertools.combinations(courses_set, 5):\n            if len(set(nums)) == 5:\n                result += 1\n\n        return str(result)\n\n\n\nimport itertools\n\nclass Solution:\n    def solution(self, courses):\n        courses = set(courses)\n        return sum(1 for nums in itertools.combinations(courses, 5) if len(set(nums)) == 5)\n\n\n\nimport collections\n\nclass Solution:\n    def solution(self, stdin):\n        courses = collections.Counter(stdin.split('\\n')).most_common()\n        return sum(1 for nums in itertools.combinations(courses, 5) if len(set(nums)) == 5)\n\nimport collections\n\nclass Solution:\n    def solution(self, courses):\n        return sum(1 for nums in itertools.combinations(collections.Counter(courses).most_common(), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x.split(' ')))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x.split(' ')))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nimport itertools\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nimport itertools\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nimport itertools\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\n\n\nimport itertools\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nimport itertools\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nimport itertools\n\nclass Solution:\n    def solution(self, stdin):\n        courses = stdin.split('\\n')\n        courses = [i.split(' ') for i in courses]\n        return sum(1 for nums in itertools.combinations(sorted(courses, key=lambda x: len(set(x))), 5) if len(set(nums)) == 5)\n\nclass Solution:\n    def solution"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"5\\n100 101 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"5\"\n\"\"\"\n\nstdin = \"\"\"4\n100 101 101 102 103\n100 200 300 101 102\n103 102 101 488 100\n100 200 300 101 102\n\n7\n100 100 100 101 101 101\n100 101 101 100 101 101\n100 101 101 101 101 101\n100 100 100 101 101 101\n100 100 100 101 101 101\n100 100 100 101 101 101\n100 100 100 101 101 101\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import deque"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n'''"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n101\\n200\\n300\\n101\\n102\\n') == '2'\nassert solution('1\\n100\\n101\\n102\\n103\\n') == '0'\nassert solution('1\\n100\\n101\\n102\\n103\\n100\\n') == '1'\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 101 102 103 488') == 2\nassert solution('100 200 300 101 102') == 1\nassert solution('103 102 101 488 100') == 2\n'''\n\nn = int(input())"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1730') == '1729'"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1730') == '1729'\nassert solution('3') == 'None'\nassert solution('18') == 'None'\nassert solution('42') == 'None'\n\nimport sys; test = sys.stdin.readlines()\nprint(solution(test[0]))\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1730\") == \"1729\"\n\nassert solution(\"1\") == \"none\"\n\nassert solution(\"2000000000\") == \"1905690779\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1730') == '1729'\nassert solution('1731') == '1731'\nassert solution('1732') == '1732'\nassert solution('1733') == '1733'\nassert solution('1734') == '1734'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('5') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1730') == '1729'\nassert solution('40000') == '40000'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"80\") == \"79\"\nassert solution(\"1\") == \"none\"\nassert solution(\"-1\") == \"none\"\nassert solution(\"400000\") == \"400000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n\"\"\") == \"none\"\n\n\"\"\"\nA single bus can be composed from two buses, where every bus has n cities (here n is a power of three). Each bus can have some number of people on it.\n\nAs there is one bus for every city, we can group cities in groups of three, or in other words:\n\n - the first city is the departure city,\n - the second city is the destination city,\n - the third city is the stop in between, and\n\nThe people on the bus can follow two different patterns. In this pattern, the bus goes from city 1 to city 2, then from city 2 to city 3, and then from city 3 back to city 1.\n\nIn the other pattern, the bus goes from city 1 to city 2, then from city 2 to city 3, and then from city 3 to city 1.\n\nA bus is called \"monotone\" if, for every two successive cities, there is a unique path between them. If the bus is not monotone, then for each two successive cities there is at least one other city on the bus between them.\n\nA bus is called \"non-strictly increasing\" if the three cities in the pattern go in increasing order (so that city 1 < city 2 < city 3).\n\nA bus is called \"strictly increasing\" if the three cities in the pattern go in strictly increasing order (so that city 1 < city 2 < city 3 < city 4).\n\nThere are three different patterns for a bus:\n\n - the first pattern is called \"up\"\n - the second pattern is called \"down\"\n - the third pattern is called \"monotone\"\n\nGiven the number of people on the bus n (0 \\le n \\le 100), your program should calculate and print:\n\n- the bus number which is the largest such bus that is strictly increasing,\n- the bus number which is the largest such bus that is monotone,\n- the number of ways to go from city 1 to city 2 using up and down buses.\n\nFor example, if n = 5, the output should be:\n\nThe bus number which is the largest such bus that is strictly increasing: 1729\nThe bus number which is the largest such bus that is monotone: 1730\nThe number of ways to go from city 1 to city 2 using up and down buses: 3\n\nInput\nThe input consists of one line with the number n of people on the bus (0 \\le n \\le 100).\n\nOutput\nPrint three lines:\n\n- the bus number which is the largest such bus that is strictly increasing,\n- the bus number which is the largest such bus that is monotone,\n- the number of ways to go from city 1 to city 2 using up and down buses.\n\nNote that the bus numbers are printed in the same format as the examples above.\n\nExamples\ninputCopy\n1730\noutputCopy\n1729\n3\n1729\n1730\n1729\n3\n\"\"\"\n\n\"\"\"\nI think there's some clever way of getting a bus number from the people on the bus.  It's like there's a distribution of people on the bus, and there's a pattern of the distribution, with a particular pattern of numbers in the pattern.  That pattern is the buses.  But then there's another pattern of the distribution, which is the stops in between.  So that's the bus number.  It's like the two bus patterns are superimposed on top of each other, in a way.\n\nThere's probably some way of calculating the stop distribution, and then getting the bus number from that.  But I can't find it.\n\"\"\"\n\n\"\"\"\nThis is the best way to think of it:\n\nSo we have a bus that goes from city 1 to city 2, then from city 2 to city 3, and then back to city 1.  We have an array of people on the bus.\n\nWe have the two bus patterns going in each direction: the first and second.\n\nEvery city has a number of people on it.  In order to get from city 1 to city 2, we have to go from city 1 to city 2, then from city 2 to city 3, then back to city 1.\n\nTo get from city 1 to city 2, we could go from city 1 to city 2, then from city 2 to city 3, then back to city 1.\n\nIn order to get from city 1 to city 2, we could go from city 1 to city 2, then from city 2 to city 3, then back to city 1.\n\nWe have a bunch of people.  For every two successive cities, there is a number of people on it.  In other words, city 1 has a number of people on it, city 2 has a number of people on it, city 3 has a number of people on it, and so on.\n\nIn order to go from city 1 to city 2, we have to go from city 1 to city 2, then from city 2 to city 3, and then back to city 1.\n\nTo go from city 1 to city 2, we have to go from city 1 to city 2, then from city 2 to city 3, and then back to city 1.\n\nSo for each bus pattern, there's a number of ways to go from city 1 to city 2.  For example, if the bus pattern is [1, 2, 3, 1], then the number of ways to go from city 1 to city 2 is 3.  \n\nIf the bus pattern is [1, 1, 1, 1], then the number of ways to go from city 1 to city 2 is 1.\n\nThe idea is to get all the possible combinations of people on the bus.  Then we have to calculate the number of ways to go from city 1 to city 2 using each combination of people on the bus.  \n\nHow do we calculate the number of ways to go from city 1 to city 2?\n\nWe have to go from city 1 to city 2, then from city 2 to city 3, and then back to city 1.  So, we have to calculate the number of ways to go from city 1 to city 2, then calculate the number of ways to go from city 2 to city 3, then do the same for city 3, and then calculate the number of ways to go from city 4 to city 1.\n\nTo get the number of ways to go from city 1 to city 2, we use the number of ways to go from city 1 to city 2, the number of ways to go from city 2 to city 3, and the number of ways to go from city 3 to city 1.\n\nSo, we have a pattern of three numbers.  And these numbers need to go in a certain order:\n\ncity 1 -> city 2 -> city 3 -> city 1\n\ncity 1 -> city 2 -> city 3 -> city 4 -> city 1\n\ncity 1 -> city 2 -> city 3 -> city 4 -> city 5 -> city 1\n\ncity 1 -> city 2 -> city 3 -> city 4 -> city 5 -> city 6 -> city 1\n\nSo, the order of the three numbers is:\n\nn1, n2, n3\n\nAnd the number of ways to go from city 1 to city 2 is the number of ways to go from city 1 to city 2, the number of ways to go from city 2 to city 3, and the number of ways to go from city 3 to city 1.\n\nSo, the number of ways to go from city 1 to city 2 is n1 * n2"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1730\") == \"1729\"\nprint(\"Tests passed\")"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1730') == '1729'\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"65536\") == \"16\"\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('65536') == 16\nprint(solution(input()))"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"65536\"\n) == \"16\"\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nvalue = int(sys.argv[1])\nprint(sum([value // (i + 1) for i in range(value)]))\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('65536') == '16'\nassert solution('808') == '6'\nassert solution('72') == '3'\nassert solution('5555') == '0'\nassert solution('977') == '7'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"65536\") == 16\nprint(solution(\"65536\"))\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65536') == '16'\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(123) == '3'\nassert solution(1) == '1'\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65536') == '16'\n\"\"\"\n\nfrom math import ceil, log10"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"65536\") == 16\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('3\\n#.#\\n#.#\\nK') == '-1'\nassert solution('3\\n.#\\n.#\\nK') == '-1'\nassert solution('3\\n.K\\n.#\\n.#') == '-1'\nassert solution('3\\n..#\\n.#\\nK') == '1'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('....\\n....\\n....\\n...K') == '2'\nassert solution('....\\n....\\n....\\n....') == '-1'\nassert solution('...\\n...\\n...\\n...') == '-1'\nassert solution('...\\n....\\n....\\n...K') == '2'\n\"\"\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == 2\nassert solution(\"...#\\n....\\n....\\n...#\") == -1\nassert solution(\"####\\n....\\n....\\n....\") == 3\nassert solution(\"####\\n....\\n....\\nK...\") == 4\nassert solution(\"####\\n....\\n....\\nK....\") == -1\n\"\"\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\n\n-----Explanation-----\nGiven the initial position of the Knight in the chess board, it can reach the following positions, but one of them is blocked by the obstacles:\n\n1. $(r + 2, c + 1)$\n2. $(r + 2, c - 1)$\n3. $(r - 2, c + 1)$\n4. $(r - 2, c - 1)$\n5. $(r + 1, c + 2)$\n6. $(r + 1, c - 2)$\n7. $(r - 1, c + 2)$\n8. $(r - 1, c - 2)$\n\nHowever, the final position of the Knight will be at $(1, 1)$ which is the starting position of the knight. So, we should print 2.\n\nSolution\n-----"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('4\\n......\\n....#\\n....K') == '-1'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"........\\n........\\n........\\n........\") == \"8\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == 2\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"3\\n.##\\n...K\") == \"2\"\nassert solution(\"3\\n.##\\n.##\") == \"3\"\nassert solution(\"3\\n.##\\n.##\\n....\") == \"4\"\n\n------Hints------\nThe chessboard is a $N \\times N$ grid. Each cell on this grid has a value of \u2018#\u2019 or \u2018.\u2019, denoting a blocked or unblocked cell.\n\nIf a Knight is at (r, c), it can move to any of the cells in the following set:\n\n$\\{ (r + 2, c + 1)$, (r + 2, c - 1)$, (r - 2, c + 1)$, (r - 2, c - 1)$, (r + 1, c + 2)$, (r + 1, c - 2)$, (r - 1, c + 2)$, (r - 1, c - 2) \\} $.\n\nThe result is the minimum number of steps required for the Knight to reach cell $(1, 1)$ without visiting a blocked cell.\n\nIf $(1, 1)$ is not reachable, then return $-1$.\n\nConstraints:\n\n$1 \\leq N \\leq 2 \\cdot 10^4$\n\n$K$ is guaranteed to be present in the grid.\n\n$(1, 1)$ is not a blocked cell.\n\n$(1, 1)$ is reachable if and only if the grid is a valid chessboard.\n\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\nprint('Test passed')\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\nassert solution('20 10\\n5\\n5\\n6\\n5\\n5\\n') == 'too late'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\n\"\"\"\n\nfrom collections import Counter\n\nrooms = Counter(map(int, input().split()))"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('100 4\\n21\\n13\\n35\\n54') == 'too late'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(['100 5', '42', '3', '2', '99', '1']) == '23'\nassert solution(['100 5', '42', '3', '2', '99', '1', '100']) == 'too late'\nassert solution(['100 5', '42', '3', '2', '99', '1', '100', '0']) == 'too late'\nassert solution(['100 5', '42', '3', '2', '99', '1', '100', '99']) == 'too late'\nassert solution(['100 5', '42', '3', '2', '99', '1', '100', '99', '0']) == 'too late'\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNXRPZBIM\"\nassert solution(\"hide the gold in the tree stump\") == \"HJIKLPQSVBLM\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BJXKXPHQSIVUXIMMLNUJKYB\"\n\n\"\"\"\n\nfrom string import ascii_lowercase, ascii_uppercase\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BADJEDZNADILMURZHGRQSBEHDFJXKBMVTJIK\"\nassert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\n\"\"\"\n\nfrom string import ascii_lowercase, ascii_uppercase\n\ntable = {'A': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'B': ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'C': ['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'D': ['D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'E': ['E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'F': ['F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'G': ['G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'H': ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'I': ['I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'J': ['J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'K': ['K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'L': ['L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'M': ['M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'N': ['N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'O': ['O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'P': ['P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'Q': ['Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        'R': ['R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"playfair example\nhide the gold in the tree stump\"\"\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('playfair example') == 'BADGCZSVBPJXKMPQWYVRMLD'\nassert solution('hide the gold in the tree stump') == 'DEKLGRZSJHBVXQNUVJLKPZYWQBM'\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"playfair example\") == \"BMNXDKYBEJVDMIUIMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BXDKYBEJVDMIUIUXMMNUVIF\"\nassert solution(\"playfair example\") == \"BMNXDKYBEJVDMIUIMMNUVIF\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'RSQHZNXLEOWBRCNFRTQDUHISLAYKJDE'\n\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"BMNXFVDMSUZIYBZKJHXQNC\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.5 1.5\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.5 0.5\") == \"The gopher can escape through the hole at (1.0, 0.5).\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.010 1.010 1.010 1.010\") == \"The gopher can escape through the hole at (-0.010, -0.010).\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.010 1.010 1.010 1.010\\n1.010 1.010 1.010 1.010\\n1.010 1.010 1.010 1.010\") == \"The gopher can escape through the hole at (0.010, -0.010).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.510 1.510\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.510 1.510\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(r\"C:\\Users\\user\\Desktop\\data\\2.txt\")) == \"The gopher can escape through the hole at (-500, -500).\"\n'''\nfrom unittest import TestCase, main\nfrom math import sqrt\nfrom decimal import Decimal\nfrom fractions import Fraction\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.000 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.500"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == 'The gopher cannot escape.'\nassert solution(\"1.000 1.000 2.000 2.000\\n1.000 1.500\") == 'The gopher can escape through the hole at (1.0, 1.5).'\nassert solution(\"1.000 1.000 2.000 2.000\\n1.000 1.500\\n1.500 1.500\") == 'The gopher can escape through the hole at (1.0, 1.5).'\nassert solution(\"1.000 1.000 2.000 2.000\\n1.000 1.500\\n2.010 2.010\") == 'The gopher cannot escape.'\nassert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.500 1.500\") == 'The gopher can escape through the hole at (1.0, 1.5).'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher can escape through the hole at (2.0, 2.0).\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (2.0, 2.0).\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.099 1.099\") == \"The gopher cannot escape.\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.400 1.400\") == \"The gopher can escape through the hole at (2.0, 2.0).\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.099 1.099\") == \"The gopher cannot escape.\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1.000 1.000 2.000 2.000\n1.500 1.500''') == 'The gopher cannot escape.'\nassert solution('''1.010 1.010 2.010 2.010\n1.500 1.500''') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('''0.010 0.010 2.010 2.010\n1.500 1.500''') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('''0.010 0.010 2.010 2.010\n0.100 0.100''') == 'The gopher can escape through the hole at (0.0, 0.0).'\nassert solution('''0.010 0.010 2.010 2.010\n1.000 1.000''') == 'The gopher cannot escape.'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\"\n                \"1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.500 2.000 2.500\"\n                \"1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher can escape through the hole at (1, 1).\"\nassert solution(\"0.000 0.000 1.000 1.000\\n0.500 0.500\") == \"The gopher can escape through the hole at (0, 0).\"\nassert solution(\"0.000 0.000 0.000 0.000\\n0.500 0.500\") == \"The gopher can escape through the hole at (0, 0).\"\nassert solution(\"0.010 0.010 0.010 0.010\\n0.505 0.505\") == \"The gopher cannot escape.\"\nassert solution(\"0.010 0.010 0.010 0.010\\n0.500 0.500\") == \"The gopher can escape through the hole at (0, 0).\"\n\"\"\"\nimport math\nimport sys\n\ngopher_position = tuple(map(float, sys.stdin.readline().split()))\ndog_position = tuple(map(float, sys.stdin.readline().split()))\n\ngopher_holes = [tuple(map(float, sys.stdin.readline().split())) for i in range(int(sys.stdin.readline()))]\n\nfor i in gopher_holes:\n    gopher_position_to_hole = math.sqrt(\n        (i[0] - gopher_position[0]) ** 2 + (i[1] - gopher_position[1]) ** 2\n    )\n    dog_position_to_hole = math.sqrt(\n        (i[0] - dog_position[0]) ** 2 + (i[1] - dog_position[1]) ** 2\n    )\n\n    if gopher_position_to_hole > dog_position_to_hole:\n        print('The gopher can escape through the hole at ({:.3f}, {:.3f})'.format(i[0], i[1]))\n        break\nelse:\n    print('The gopher cannot escape.')\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == 'Y'\nassert solution(\"7 1\\n7 7\\n10000\") == 'N'\nassert solution(\"3 4\\n3 3\\n5\") == 'N'\nassert solution(\"7 1\\n7 7\\n6\") == 'Y'"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4\n3 3\n3\n''') == 'Y'\n\nassert solution('''3 4\n3 3\n4\n''') == 'N'\n\nassert solution('''-1000 -1000\n1000 1000\n10\n''') == 'N'\n\nassert solution('''-1000 -1000\n-1000 1000\n10\n''') == 'N'\n\nassert solution('''-1000 -1000\n-1000 1000\n1000\n''') == 'Y'"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n1 1\\n1') == 'Y'\nassert solution('3 4\\n1 1\\n4') == 'N'\nassert solution('3 4\\n3 1\\n4') == 'N'\nassert solution('3 4\\n3 3\\n1') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('2 2\\n4 1\\n4') == 'N'\nassert solution('-3 1\\n-4 4\\n4') == 'Y'\nassert solution('-5 4\\n-5 4\\n0') == 'Y'\nassert solution('3 4\\n1 1\\n3') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n0') == 'N'\nassert solution('3 4\\n3 3\\n9') == 'N'\nassert solution('3 4\\n3 3\\n5') == 'N'\nassert solution('3 4\\n3 3\\n10') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == 'Y'\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n8') == 'N'\nassert solution('3 4\\n2 2\\n10') == 'N'\nassert solution('3 4\\n3 3\\n9') == 'N'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nc, d = map(int, stdin.readline().split())\nt = int(stdin.readline())"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 4\n3 3\n3''') == 'Y'\n\nassert solution('''3 4\n4 3\n2''') == 'N'\n\nassert solution('''3 4\n3 3\n5''') == 'N'\n\nassert solution('''3 4\n3 4\n0''') == 'N'\n\nassert solution('''3 4\n3 3\n3''') == 'Y'"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"-1 0\\n-2 1\\n2\") == \"Y\"\nassert solution(\"-1 -1\\n2 0\\n3\") == \"N\"\n\nprint('Test pass.')"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7\\n.V.VV.#\\n......\\n.....\\n..#..\\n.#.#.\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\n.VV#VVV#\\n..VVVVV.\\n.#V#.V#.\\n.V.#.#.#\\n......\\n.V.#.#.\") == \"...V...\\n...V...\\n..VVV..\\n.V#V#V#.\\n.V#V#V#.\\n.V#V#V#.\\n......\\n.V#V#.\"\n\n\"\"\"\n\nimport os\nimport sys\nimport numpy as np\nimport string\nimport pprint\n\nsys.stdin = open(os.path.join(sys.path[0], \"input.in\"), \"r\")\nsys.stdout = open(os.path.join(sys.path[0], \"output.out\"), \"w\")\n\nrows, columns = map(int, input().split())\n\ngrid = []\nfor _ in range(rows):\n    grid.append(list(input()))\n\nfor row in range(rows):\n    for col in range(columns):\n        if grid[row][col] == \"V\":\n            grid[row][col] = \".\"\n            for dr in range(-1,2):\n                for dc in range(-1,2):\n                    r,c = row + dr, col + dc\n                    if 0 <= r < rows and 0 <= c < columns and grid[r][c] == \"V\":\n                        grid[r][c] = \".\"\n\nprint(*grid, sep='\\n')\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n.V#\\n#..\\n..#') == '#.\\n#.\\n..'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n----------------------------------------------------------------------------------------------------------------------------------------------\nIf you've completed the level 1 exercises, you'll have a basic understanding of how the game works. But let's move on to the 2nd level and explore the game a bit more.\n\nLevel 2\n\nThe next step is to build your first strategy for the game. For this level, you'll try to implement one of the most basic strategies that works for the game.\n\nFor each second, you'll need to track the following:\n\n1. The water positions\n2. The stone positions\n3. The positions of the air cells, which will be helpful when the game is over\n\nNext, you'll be able to play the game and see if your strategy is working.\n\nAfter you finish this level, you will be able to implement a strategy that ends the game as soon as possible, effectively destroying the stones while ensuring that the water always flows.\n\n-----Input-----\nThe first line of input contains two integers $N$ and $M$ (2 \\leq N,M \\leq 50$), the number of rows and columns in the game board.\n\nEach of the following $N$ lines contains a string of length $M$ consisting of the symbols \".\", \"#\", \"v\", and \"o\" (all lowercase)\n\n-----Output-----\nThe output should consist of a single line of $N$ strings, each of length $M$ (again, all lowercase) that represents the game board.\n\n-----Examples-----\nSample Input\n3 5\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"\"\"\n...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\nassert solution('5 7\\n.V...\\n...V\\n..#V\\nV.VV\\n.......') == '..VVV..\\n.VV#VV.\\n.V###V.'\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n.V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\n.V...\\n.......\\n.......\\n...#...\\n..##..\") == \"...V...\\n...V...\\n..VVV..\\n.V##VV.\\n.V##VV.\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\nassert solution('1 5\\n.VVVVV') == '..VVVVV'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n' +\n                 '.##.\\n' +\n                 '.V.#\\n' +\n                 '..##\\n' +\n                 '.#.#\\n' +\n                 '###.') == '##.#\\n##.#\\n.#V#\\n.#V#\\n#V#'\n\nassert solution('7 8\\n' +\n                 '...V..\\n' +\n                 '.....#\\n' +\n                 '.....#\\n' +\n                 '....#.#\\n' +\n                 '....#.#\\n' +\n                 '#.#.#.#\\n' +\n                 '#.#.#.#') == '.....#\\n.....#\\n.....#\\n....#.#\\n....#.#\\n...#V#\\n...#V#\\n..#V#.'\n\nassert solution('2 2\\n' +\n                 '.#\\n' +\n                 'V') == '##'\n\nassert solution('5 5\\n' +\n                 '.##.\\n' +\n                 '##.#\\n' +\n                 '..V.\\n' +\n                 '.....\\n' +\n                 '####') == '##.#\\n##.#\\n#V#V\\n#V#V\\n#V#V'\n\nassert solution('4 8\\n' +\n                 '..#.\\n' +\n                 '.###\\n' +\n                 '#V.\\n' +\n                 '...#\\n' +\n                 '.#.#\\n' +\n                 '.V.#') == '..V.\\n..#V\\n..#V\\n..#V\\n..V#\\n...#\\n.V#V\\n.V#V'\n\n-----Note-----\n- In the first sample, the water started spreading in the first row, so that there was no stopping point.\n- In the second sample, the water started spreading in the second row, and so there was no stopping point.\n- In the third sample, the water started spreading in the first row, so that there was no stopping point.\n- In the fourth sample, the water started spreading in the second row, and so there was no stopping point.\n- In the fifth sample, the water started spreading in the first row, so there was no stopping point.\n\n-----Hints-----\n- You can use two grids of size $N \\times M$ to keep track of the water spreading.\n\"\"\"\nimport io\nimport itertools\n\nfrom collections import deque"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1101') == '1011'\n\nassert solution('1100') == '1110'\n\nassert solution('1111') == '1101'\n\nassert solution('1011') == '1010'\n\nassert solution('1111') == '1011'"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1101') == '1011'\nassert solution('1110') == '1010'\nassert solution('1010') == '1011'\nassert solution('1111') == '1100'\nassert solution('1111') == '1100'\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"11\"\n\n\"\"\"\n\nimport sys\nfrom typing import List, Union\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == '11'\n\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '11'\nassert solution('100') == '10'\nassert solution('101') == '11'\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(sys.stdin.readlines()[0])) == \"11\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '11'\nassert solution('9') == '1001'\nassert solution('0') == '0'\nassert solution('1') == '1'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"12\") == \"10\"\nassert solution(\"14\") == \"100\"\nassert solution(\"12345\") == \"10110\"\nassert solution(\"10010\") == \"101010\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12\\n'\n'pink\\n'\n'tequilaSunrose\\n'\n'mExicanPInK\\n'\n'Coquelicot\\n'\n'turqrose\\n'\n'roSee\\n'\n'JETblack\\n'\n'pink\\n'\n'babypink\\n'\n'pInKpinkPinK\\n'\n'PInkrose\\n'\n'lazerlemon') == '9'\nassert solution('10\\n'\n'pink\\n'\n'tequilaSunrose\\n'\n'mExicanPInK\\n'\n'Coquelicot\\n'\n'turqrose\\n'\n'roSee\\n'\n'JETblack\\n'\n'pink\\n'\n'babypink\\n'\n'pInKpinkPinK\\n'\n'PInkrose\\n'\n'lazerlemon') == '8'\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon') == '9'\nprint(solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon'))"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrOse\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\nassert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\nassert solution(\"12\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\nassert solution(\"12\\nJETblack\\nCoquelicot\\nroSee\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\nassert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrOse\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n') == '9'\n\"\"\"\n\n\"\"\"\nSolution:\n\nGiven N packages, the combinations of N packages can be written as the power set of all possible N packages.\nThe power set of a set is the set of all possible subsets of that set. The power set of an empty set has one empty set in it.\nThus the total number of possible combinations of N packages is equal to 2 ^ N, which is a binomial coefficient.\n\n1. Iterate over all possible combinations of N packages. For each one, check if any of the packages have \"pink\" in them.\n   If so, the combination is not possible.\n2. If the combination is possible, then check if any of the packages have \"rose\" in them. If so, the combination is not possible.\n3. If the combination is possible, then check if any of the packages have \"rose\" in them. If so, the combination is not possible.\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"2 1 3\") == \"2 1 3\"\nassert solution(\"3 2 1\") == \"3 2 1\"\nassert solution(\"1 2 5\") == \"1 2 5\"\nassert solution(\"5 1 2\") == \"5 1 2\"\n\n----\nimport sys\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"4 7 3\") == \"3 4 7\"\nassert solution(\"4 7 3\") == \"3 4 7\"\nassert solution(\"1 5 3\") == \"1 3 5\"\n\"\"\"\n\nA, B, C = input().split()"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\n\n\"\"\"\n\n\"\"\"\n    Pseudocode:\n    1. Declare and initialize three integer variables to store the inputted values.\n    2. Read in the inputted values.\n    3. Set the variables to ascending order.\n    4. Return the values in the order.\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"5 1 3\") == \"1 3 5\"\nassert solution(\"3 1 5\") == \"1 3 5\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"1 3 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"5 1 3\") == \"5 1 3\"\nassert solution(\"3 5 1\") == \"3 5 1\"\nassert solution(\"3 1 5\") == \"3 1 5\"\nassert solution(\"1 5 3\") == \"1 3 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nprint(solution(\"1 5 3\"))\nprint(solution(\"1 3 5\"))"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 3\\nABC\") == \"1 3 5\"\n\"\"\"\n\nimport sys\nimport os\nimport ast"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nprint(solution(\"1 5 3\"))\n\n\"\"\"\n\n\"\"\"\n\u041a\u0430\u043a \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u043d\u0430 \u0442\u0440\u043e\u0439\u043a\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 a + b + c = 1000.\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 abc.\n\n-----Input-----\n\u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a, b, c, \u043a\u0430\u0436\u0434\u043e\u0435 \u0432 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2013 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 abc.\n\n-----Examples-----\nSample Input:\n2\n3\n4\nSample Output:\n24\n\n\"\"\"\n\n\"\"\"\n\u0423\u043b\u0438\u0442\u043a\u0430 \u043f\u043e\u043b\u0437\u0435\u0442 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0448\u0435\u0441\u0442\u0443 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 h \u043c\u0435\u0442\u0440\u043e\u0432, \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u044f\u0441\u044c \u0437\u0430 \u0434\u0435\u043d\u044c \u043d\u0430 a \u043c\u0435\u0442\u0440\u043e\u0432, \u0430 \u0437\u0430 \u043d\u043e\u0447\u044c \u0441\u043f\u0443\u0441\u043a\u0430\u044f\u0441\u044c \u043d\u0430 b \u043c\u0435\u0442\u0440\u043e\u0432.\n\u041d\u0430 \u043a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c \u0443\u043b\u0438\u0442\u043a\u0430 \u0434\u043e\u043f\u043e\u043b\u0437\u0435\u0442 \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0448\u0435\u0441\u0442\u0430?\n\n-----Input-----\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a, b, h (0\u2009\u2264\u2009a,\u2009b,\u2009h\u2009\u2264\u20091000) \u2014 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0430 \u043e\u043f\u0443\u0449\u0435\u043d\u0430, \u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a\u2009+\u2009b, b\u2009+\u2009c, c\u2009+\u2009a (0\u2009\u2264\u2009a\u2009+\u2009b,\u2009b\u2009+\u2009c,\u2009c\u2009+\u2009a\u2009\u2264\u20091000) \u2014 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0434\u0451\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435.\n\n-----Output-----\n\u041e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043b\u0438\u0442\u043a\u0430 \u0434\u043e\u043f\u043e\u043b\u0437\u0435\u0442 \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0448\u0435\u0441\u0442\u0430.\n\n-----Examples-----\nSample Input:\n1\n1\n1\n1\nSample Output:\n1\n\n\"\"\"\n\n\"\"\"\n\u0423\u043b\u0438\u0442\u043a\u0430 \u043f\u043e\u043b\u0437\u0435\u0442 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0448\u0435\u0441\u0442\u0443 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 h \u043c\u0435\u0442\u0440\u043e\u0432, \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u044f\u0441\u044c \u0437\u0430 \u0434\u0435\u043d\u044c \u043d\u0430 a \u043c\u0435\u0442\u0440\u043e\u0432, \u0430 \u0437\u0430 \u043d\u043e\u0447\u044c \u0441\u043f\u0443\u0441\u043a\u0430\u044f\u0441\u044c \u043d\u0430 b \u043c\u0435\u0442\u0440\u043e\u0432.\n\u041d\u0430 \u043a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c \u0443\u043b\u0438\u0442\u043a\u0430 \u0434\u043e\u043f\u043e\u043b\u0437\u0435\u0442 \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0448\u0435\u0441\u0442\u0430?\n\n-----Input-----\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a, b, h (0\u2009\u2264\u2009a,\u2009b,\u2009h\u2009\u2264\u20091000) \u2014 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0430 \u043e\u043f\u0443\u0449\u0435\u043d\u0430, \u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a\u2009+\u2009b, b\u2009+\u2009c, c\u2009+\u2009a (0\u2009\u2264\u2009a\u2009+\u2009b,\u2009b\u2009+\u2009c,\u2009c\u2009+\u2009a\u2009\u2264\u20091000) \u2014 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0434\u0451\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435.\n\n-----Output-----\n\u041e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043b\u0438\u0442\u043a\u0430 \u0434\u043e\u043f\u043e\u043b\u0437\u0435\u0442 \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0448\u0435\u0441\u0442\u0430.\n\n-----Examples-----\nSample Input:\n1\n1\n1\n1\nSample Output:\n1\n\n\"\"\"\n\n\"\"\"\n\u0423\u043b\u0438\u0442\u043a\u0430 \u043f\u043e\u043b\u0437\u0435\u0442 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0448\u0435\u0441\u0442\u0443 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 h \u043c\u0435\u0442\u0440\u043e\u0432, \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u044f\u0441\u044c \u0437\u0430 \u0434\u0435\u043d\u044c \u043d\u0430 a \u043c\u0435\u0442\u0440\u043e\u0432, \u0430 \u0437\u0430 \u043d\u043e\u0447\u044c \u0441\u043f\u0443\u0441\u043a\u0430\u044f\u0441\u044c \u043d\u0430 b \u043c\u0435\u0442\u0440\u043e\u0432.\n\u041d\u0430 \u043a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c \u0443\u043b\u0438\u0442\u043a\u0430 \u0434\u043e\u043f\u043e\u043b\u0437\u0435\u0442 \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0448\u0435\u0441\u0442\u0430?\n\n-----Input-----\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a, b, h (0\u2009\u2264\u2009a,\u2009b,\u2009h\u2009\u2264\u20091000) \u2014 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0430 \u043e\u043f\u0443\u0449\u0435\u043d\u0430, \u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a\u2009+\u2009b, b\u2009+\u2009c, c\u2009+\u2009a (0\u2009\u2264\u2009a\u2009+\u2009b,\u2009b\u2009+\u2009c,\u2009c\u2009+\u2009a\u2009\u2264\u20091000) \u2014 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \ufffd"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\ndie 4\\\\n\") == \"8.0\"\n\"\"\"\n\nimport re\n\nclass Event:\n    def __init__(self, event_string: str) -> None:\n        match = re.match(r\"^(?:buy|sell|split|merge)\\s+([0-9]+)\\s+(?:[0-9]+)\\s*(?:\\\\n)?$\", event_string)\n        if match is None:\n            raise RuntimeError(\"Invalid event: \" + event_string)\n        self.event_type = match.group(1)\n        self.quantity = int(match.group(2))\n\nevents = [Event(line) for line in stdin.splitlines()]\n\nstock_shares = 0\ncrowns_before_death = 0\n\nfor event in events:\n    if event.event_type == \"buy\":\n        stock_shares += event.quantity\n        crowns_before_death += event.quantity * 1000\n    elif event.event_type == \"split\":\n        crowns_before_death += event.quantity * 1000\n        stock_shares += event.quantity\n    elif event.event_type == \"merge\":\n        crowns_before_death += event.quantity * stock_shares * 1000\n        stock_shares = stock_shares // event.quantity\n    elif event.event_type == \"sell\":\n        crowns_before_death -= event.quantity * 1000\n        stock_shares -= event.quantity\n    else:\n        raise RuntimeError(\"Unknown event: \" + event.event_type)\n\nprint(crowns_before_death)\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"buy 1 15\\\\n split 3\\\\nsell 1 5\\\\ndie 4\") == \"8.0\"\n\"\"\"\n\nfrom typing import List\n\nimport sys\nimport math\n\nclass Solution:\n    # @param A : str\n    # @return an integer\n    def solve(self, A):\n        history = []\n        for a in A.splitlines():\n            if a == \"buy 1 15\":\n                history.append([1, 15])\n            elif a == \"split 3\":\n                history.append([3])\n            elif a == \"sell 1 5\":\n                history.append([-1, 5])\n            elif a == \"die 4\":\n                history.append([-1, 4])\n        res = 0\n        average_cost = 0\n        for t in history:\n            res += t[0] * (average_cost - t[1])\n            average_cost = average_cost + (t[0] * (t[1] / 2))\n        return res"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"buy 1 15\\n\" + \"split 3\\n\" + \"sell 1 5\\n\" + \"die 4\") == \"8.0\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"buy 1 15\\n\"\n\"split 3\\n\"\n\"sell 1 5\\n\"\n\"die 4\") == '8.0'\n\nassert solution(\"buy 1 15\\n\"\n\"split 3\\n\"\n\"sell 1 5\\n\"\n\"die 4\\n\"\n\"buy 2 16\\n\"\n\"buy 4 16\\n\"\n\"buy 2 16\\n\"\n\"buy 4 16\\n\"\n\"buy 1 16\\n\"\n\"buy 2 16\\n\"\n\"sell 4 16\\n\"\n\"die 2\") == '32.0'\n\nassert solution(\"buy 1 15\\n\"\n\"split 3\\n\"\n\"sell 1 5\\n\"\n\"die 4\\n\"\n\"buy 2 16\\n\"\n\"buy 4 16\\n\"\n\"buy 2 16\\n\"\n\"buy 4 16\\n\"\n\"buy 1 16\\n\"\n\"buy 2 16\\n\"\n\"sell 4 16\\n\"\n\"die 2\") == '32.0'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''buy 2 10\nbuy 1 10\nsell 1 10\nbuy 3 10\nsell 1 5\nsell 2 5\nbuy 2 10\nsell 3 10\nbuy 2 10\nsell 1 10\nsell 2 5\nsell 3 5\nsell 1 5\nbuy 1 5\nsell 1 10\nbuy 1 10\nbuy 2 5\nbuy 1 5\nsell 2 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nbuy 3 10\nsell 3 5\nsell 1 10\nbuy 1 10\nsell 1 10\nsell 2 10\nbuy 3 10\nbuy 1 10\nsell 2 10\nsell 1 10\nbuy 2 10\nsell 3 5\nsell 1 5\nsell 1 10\nsell 3 5\nsell 1 5\nsell 1 10\nbuy 1 10\nbuy 2 10\nbuy 2 5\nbuy 1 5\nsell 1 10\nbuy 1 10\nbuy 3 10\nbuy 1 10\nbuy 3 10\nsell 2 10\nbuy 1 10\nbuy 2 10\nbuy 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 3 10\nbuy 1 10\nsell 1 10\nsell 2 10\nbuy 2 10\nsell 3 10\nbuy 1 10\nsell 2 10\nsell 1 10\nsell 3 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 3 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 3 10\nsell 1 10\nsell 1 10\nsell 3 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 3 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nbuy 1 10\nbuy 1 10\nbuy 3 10\nsell 1 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 3 10\nsell 2 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 2 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 2 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 2 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 2 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\nassert solution(\"buy 1 15\\nbuy 2 5\\nsplit 3\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nsell 1 5\\nbuy 1 5\\nbuy 4 5\\nsplit 3\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nbuy 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nbuy 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nbuy 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nbuy 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nbuy 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nbuy 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\nbuy 4 5\\nsell 1 5\\nbuy 1 5\\nbuy 3 5\\nbuy 2 5\\nbuy 1 5\\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\n\"\"\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.00000000'\n\nassert solution('''buy 10 50\nsplit 3\nsplit 5\nsell 1 5\ndie 4\nbuy 1 10\nsplit 2\nmerge 2\nsell 1 10\ndie 2\nbuy 1 10\nsplit 3\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit 4\nsplit 5\nmerge 2\nsell 1 5\nmerge 2\nsell 1 5\ndie 2\nbuy 1 10\nsplit"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"buy 1 15\\\\n\" + \\\n\"split 3\\\\n\" + \\\n\"sell 1 5\\\\n\" + \\\n\"die 4\\\\n\") == \"8.0\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach:\nThis problem is a simple stochastic dynamic programming problem.\n\nActions:\n* Buy: purchase shares for money\n* Sell: sell shares for money\n* Split: split shares into multiple shares\n* Merge: merge multiple shares into one share\n* Die: sell remaining shares for money\n\nStates:\n* Number of shares owned\n* Average cost of shares\n\nBase Cases:\n* If the number of shares owned is 0, the optimal expected profit is 0.\n* If the number of shares owned is 1, the optimal expected profit is the cost.\n* If the number of shares owned is >= 2, the optimal expected profit is 0.\n\nTransition Rules:\n* If the number of shares is < 10, the only actions available are buy and sell. Buy: buy shares for money. Sell: sell shares for money.\n* If the number of shares is >= 10, the only action available is split. Split: split shares into multiple shares.\n* If the number of shares is > 1, the only action available is merge. Merge: merge multiple shares into one share.\n* If the number of shares is > 1 and the number of shares is divisible by 2, the only action available is die. Die: sell remaining shares for money.\n\"\"\"\n\nimport collections\nimport functools\n\nTEST_INPUT_1 = \"buy 1 15\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"sell 1 5\\\\n\" + \\\n               \"die 4\\\\n\"\n\nTEST_INPUT_2 = \"buy 1 15\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"sell 1 5\\\\n\" + \\\n               \"split 6\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"merge 6\\\\n\" + \\\n               \"die 4\\\\n\"\n\nTEST_INPUT_3 = \"buy 1 15\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"sell 1 5\\\\n\" + \\\n               \"split 6\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"merge 6\\\\n\" + \\\n               \"split 5\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"merge 5\\\\n\" + \\\n               \"die 4\\\\n\"\n\nTEST_INPUT_4 = \"buy 1 15\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"sell 1 5\\\\n\" + \\\n               \"split 6\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"merge 6\\\\n\" + \\\n               \"split 5\\\\n\" + \\\n               \"split 4\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"merge 4\\\\n\" + \\\n               \"split 4\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"merge 4\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"die 4\\\\n\"\n\nTEST_INPUT_5 = \"buy 1 15\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"sell 1 5\\\\n\" + \\\n               \"split 6\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"merge 6\\\\n\" + \\\n               \"split 5\\\\n\" + \\\n               \"split 4\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"merge 4\\\\n\" + \\\n               \"split 4\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"merge 4\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"split 4\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"merge 4\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"split 4\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"merge 4\\\\n\" + \\\n               \"merge 3\\\\n\" + \\\n               \"split 4\\\\n\" + \\\n               \"split 3\\\\n\" + \\\n               \"merge"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1234\") == \"1\"\nassert solution(\"8\") == \"8\"\n\n:param stdin:\n:return:\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('808') == '8'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(808) == 8\nprint(solution(808))\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('808') == '8'\nassert solution('999') == '9'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"999\") == \"9\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''808''') == '8'\nassert solution('''908''') == '8'\n'''\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"808\") == \"8\"\nprint(solution(\"808\"))\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('808') == '8'\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 3\\n\"\n\"WCC\\n\"\n\"CWC\\n\"\n\"WCC\\n\") == 1\nassert solution(\n\"3 3\\n\"\n\"CCCC\\n\"\n\"CCCC\\n\"\n\"CCCC\\n\"\n) == 2\nassert solution(\n\"3 3\\n\"\n\"CCCC\\n\"\n\"CCCC\\n\"\n\"CWC\\n\") == 1\nassert solution(\n\"3 3\\n\"\n\"CCCC\\n\"\n\"CWC\\n\"\n\"WCC\\n\") == 0\nassert solution(\n\"3 3\\n\"\n\"CWC\\n\"\n\"CCCC\\n\"\n\"CCCC\\n\") == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n3') == ''\nassert solution('1\\n2\\n3\\n1') == ''"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nprint(solution(''))\n\nassert solution('') == ''\nprint(solution(''))\n\nassert solution('') == ''\nprint(solution(''))\n\nassert solution('') == ''\nprint(solution(''))\n\nassert solution('') == ''\nprint(solution(''))"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == \"0\"\nprint(solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\"))\n\n-----Explanation-----\nIn the image, there are two islands.\n\nFor example, in the first test case, there are no clouds between two islands."
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n''') == 0\n\nassert solution('''\n2 2\nWL\nWW\n''') == 1\n\nassert solution('''\n4 4\nWLW\nWLW\nWLW\nWLW\n''') == 4\n\nassert solution('''\n4 4\nWLL\nWLL\nWLL\nWLL\n''') == 4\n\nassert solution('''\n4 4\nLWL\nWLW\nWLL\nWLL\n''') == 4"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\nSample Input:\n4 4\nWWWW\nWWWW\nWWWW\nWWWW\nSample Output:\n2\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2 S\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"24\"\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 C\") == \"21\"\nassert solution(\"5 D\") == \"50\"\nassert solution(\"9 S\") == \"39\"\nassert solution(\"5 S\") == \"15\"\nassert solution(\"3 S\") == \"15\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nprint('\\n#print \"Printed value\" for each number in the following list: ', numbers_to_check)\nfor number in numbers_to_check:\n    print(number)\n    \"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"1 S\\n9S\\n9D\\n9H\\n9C\\n9S\\n9D\\n9H\\n9C\\n9S\\n9D\\n9H\\n9S\\n9D\\n9H\\n9S\\n9D\\n9H\\n9S\\n9D\\n9H\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\"\"\") == \"60\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == '60'\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('this is very annoying') =='se'\n\nSample Input:\nthat is disgusting\nthat is so disgusting\nSample Output:\nt\nThat is so disgusting\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"whoever is there will get the job\") == \"woe\"\nassert solution(\"d'oh this is not scary at all\") == \"d'oh tis\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Input:\nthe sky is blue\nblue blue blue blue blue blue blue\nSample Output:\nb\n\nSample Input:\nhello world\nh e l l o  w o r l  d\nSample Output:\nl\n\nSample Input:\n  the sky is blue\n   sky blue sky blue sky blue sky blue sky blue\nSample Output:\n  b\n\nSample Input:\n  this is very annoying\n   this is very  annoying\nSample Output:\n  s\n\n----\n\nimport re"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('this is very annoying') =='se'\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('e eeee ee e e') == 'e e'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"this is very annoying\") =='se'\nprint(solution(\"this is very annoying\"))\nassert solution(\"thiss iss veery annoying\") =='se'\nprint(solution(\"thiss iss veery annoying\"))\nassert solution(\"thiss isn't very annoying\") == 'it'\nprint(solution(\"thiss isn't very annoying\"))\n\n\"\"\"\n\nimport time\nimport itertools\nimport functools\nimport operator\n\nimport numpy as np\n\nimport collections"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\nSolution:\npass\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Input:\nsupercalifragilisticexpialidocious\nhohohoohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohoh"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\nSample Input:\na b c\naa aa\nSample Output:\na\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n1 1') == 1\n\"\"\"\n\nimport math\n\nS, C, K = [int(x) for x in input().split(' ')]\nD = [int(x) for x in input().split(' ')]\n\nm = 0\nd = 0\nfor i in range(len(D)):\n    if abs(D[i] - d) > K:\n        m += 1\n        d = D[i]\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\nS, C, K = [int(x) for x in input().split()]\nD = [int(x) for x in input().split()]\nd_dif = [abs(D[i] - D[j]) for i in range(S) for j in range(i+1, S)]\ncnt = 0\nwhile d_dif:\n    if min(d_dif) <= K:\n        d_dif.remove(min(d_dif))\n        cnt += 1\n    else:\n        break\n\nprint(cnt)"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n'''\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\n'''"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\nassert solution('3 1 2\\n2 1 2') == '2'\nassert solution('1 2 0\\n1 2') == '0'\nassert solution('10 3 5\\n4 1 2 3 4 5') == '2'\nassert solution('10 3 3\\n4 1 2 3 4 5') == '0'\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n\nS, C, K = map(int, input().split())\nD = list(map(int, input().split()))"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\\n5\") == \"6\"\nassert solution(\"1\\n10\") == \"1\"\nassert solution(\"1\\n100\") == \"2\"\nassert solution(\"1\\n1000\") == \"6\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == 6\nassert solution('5\\n10') == 10\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n') == '6'\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n2\\n3\\n') == \"6\"\n\"\"\"\n\nimport sys\n\nfor i in range(int(sys.stdin.readline())):\n    print(eval('1' * int(sys.stdin.readline())) % 10)"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n3\") == \"6\"\nassert solution(\"2\\n10\") == \"6\"\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n') == '6'"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 6\nassert solution('4') == 6\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2\\n1') == '6'\nassert solution('10\\n9\\n8') == '6'\nassert solution('100\\n99\\n98') == '6'\nassert solution('1001\\n999\\n998') == '6'\nassert solution('1000\\n999\\n998') == '6'\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\") == \"6\"\nassert solution(\"3\\n3\") == \"6\"\nassert solution(\"5\") == \"1\"\n\n##########################################################################################################################################################################\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n') == '4 2'\nassert solution('3 1 2\\n') == '4 2'\nassert solution('3 1 2\\n') == '4 2'\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '4 2'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\n_str = sys.stdin.readline().split()\nalice = sum(int(i) for i in _str if int(i) >= 1)\n\n_str = sys.stdin.readline().split()\nbob = sum(int(i) for i in _str if int(i) >= 1)\n\nprint(alice, bob)\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2') == '4 2'\nassert solution('3\\n3 1 2') == '5 5'\nassert solution('2\\n1 1') == '2 1'\n\n-----\n\n'''\n\nimport math"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"6 2\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3 1 2') == '4 2'"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\") == \"3 3\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3''') == '4 2'\n\nassert solution('''3\n1 2 3''') == '4 2'\n\nassert solution('''5\n1 3 3 3 1''') == '8 6'\n\nassert solution('''6\n1 2 3 4 5 6''') == '15 10'\n\nassert solution('''7\n1 1 1 1 1 1''') == '6 6'"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == '4 2'\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 1 1\") == \"1\"\n\nprint(solution(input()))\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1') == '2'\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('3 1 2') == '1'\nassert solution('9 1 1') == '0'\n\nprint(solution(input()))"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"5 2 2\") == \"1\"\nassert solution(\"8 5 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n-----Solution-----\n\"\"\"\n\nb, k, g = [int(x) for x in stdin.split()]\ncount = (k - 1) // g + 1\nprint(count)\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('5 2 1\\n') == '2'\n\"\"\"\n\nb, k, g = map(int, input().split())\nprint(k-g)\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n') == '2'\n\n---Problem: https://www.hackerrank.com/challenges/trolls-bridge/problem\n\n'''\n\nimport math"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n') == '2'\nassert solution('2 4 3\\n') == '1'"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\n\"\"\"\n\nb, k, g = [int(x) for x in stdin.split(\" \")]\n\nprint((k * g) - b)\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n') == 36\nassert solution('7\\n') == 288\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 36\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"36\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == 36\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == '288'\nassert solution('5') == '36'\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '36'\n\n\"\"\"\n\nfrom itertools import count"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"36\"\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nn = int(input())\nstudents = list(map(int, input().split()))\nstudents.sort(reverse=True)\n\nwhile students[-1] > 1:\n    if len(students) == 1:\n        print(\"impossible\")\n        break\n    \n    s = students.pop()\n    students[-1] -= 1\n    students.append(s)\n    students.sort(reverse=True)\nelse:\n    print(*students)\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Hints-----\n- The problem can be solved by following the following steps:\n1. If there are $n$ rooms and $n$ students, then the number of possible permutations is $n!$.\n2. We can convert the problem into a graph problem, where each room is a vertex and each pair of students is an edge.\n3. Use Depth-First Search (or a variation) to try all possible orderings of visiting the rooms.\n\n- To solve the graph problem, it is possible to use a BFS algorithm. The algorithm is similar to the one in the first solution, but with some minor adjustments.\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\")!= \"2 1 4 3\"\nassert solution(\"4\\n2 3 3 1\")!= \"1 2 4 3\"\nassert solution(\"4\\n2 3 3 1\")!= \"1 4 2 3\"\nassert solution(\"4\\n2 3 3 1\")!= \"4 1 2 3\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('4\\n1 1 1 1') == 'impossible'\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"5\\n5 3 3 2 1\") == \"1 2 5 3 4\"\nassert solution(\"8\\n7 2 1 1 3 1 5 1 7\") == \"4 5 2 3 7 1 6\"\nassert solution(\"7\\n5 4 1 2 3 1 5\") == \"1 2 3 4 5\"\nassert solution(\"9\\n7 3 1 2 1 3 1 5 1 7\") == \"2 3 4 1 6 7 5\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\"\"\"\n\nnum_rooms = int(stdin.readline())\nnum_students = tuple(int(stdin.readline()) for _ in range(num_rooms))\n\n\"\"\"\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f $n$ \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 $n$, \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0432\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f:\n1. \u0421\u0443\u043c\u043c\u0430 \u043f\u0430\u0440\u044b \u0440\u0430\u0432\u043d\u0430 $n$\n2. \u0421\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0430\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 $n$, \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b $n$.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0435\u0442 $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 $n$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 $n$, \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440.\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n6\n5\n2\n3\n4\n5\n6\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n5\n4\n3\n6\n2\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n1 2 3 4\") == \"impossible\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('3\\n1 2 3') == '1 2 3'\nassert solution('2\\n1 3') == 'impossible'\nassert solution('2\\n2 1') == '1 2'\nassert solution('3\\n1 2 3') == '1 2 3'\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('4 2 2 1') == '2 3 4 1'\nassert solution('3 2 2 1') == '3 2 1 2'\nassert solution('5 1 1 1 1') == 'impossible'\n\nimport sys"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\nprint(solution(stdin.strip()))\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('left_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == 4\nassert solution('2 3\\nhull\\nhull') == 1\nassert solution('1 1\\nhull') == 1\nassert solution('1 1\\nhull\\nhull') == 2\n'''\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('10 20\\n9 21\\n9 20') == '20 20'\nassert solution('0 0\\n10 10') == '10 10'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n3 3\\n3 7\\n3 4\\n4 4') == '7 7'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 5\n5 7\n7 5''') == '7 7'\nprint(solution(stdin))\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7\\n'\nassert solution('5 4\\n5 7\\n7 4') == '4\\n4\\n'\nassert solution('5 3\\n5 7\\n7 4') == '5\\n5\\n5\\n'\nassert solution('5 5\\n5 7\\n4 4') == '4\\n4\\n'\nassert solution('5 4\\n4 4\\n5 5') == '4\\n4\\n'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n5 4\\n7 6\\n7 7\\n8 7\") == \"8 8\"\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input())"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"1 1\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"1 1\\n7 5\\n7 5\") == \"7 7\"\nassert solution(\"1 1\\n7 1\\n7 5\") == \"7 7\"\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\\n5 6\") == \"5 5\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('1 1\\n1 3\\n3 1') == '1 1'\nassert solution('3 5\\n5 1\\n1 1') == '1 1'\nassert solution('7 7\\n7 3\\n3 7') == '7 7'\n\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') =='measurement error'\nassert solution('1 1\\n1 1') == '1.016666667'\nassert solution('1 61\\n1 61') == '1.016666667'\nassert solution('1 60\\n1 60') =='measurement error'\nassert solution('1 60\\n1 1') =='measurement error'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n61') == '1.016666667'\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1 61\") == \"1.016666667\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1 61\\n\") == \"measurement error\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1 61') == 1.016666667\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n61') == '1.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n61') == '1.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1\n1 61''') == '1.016666667'\n\nassert solution('''3\n10 59\n20 36\n30 32''') =='measurement error'\n\nassert solution('''3\n10 60\n20 36\n30 33''') == '1.016666667'\n\nassert solution('''2\n20 60\n30 60''') =='measurement error'\n\nassert solution('''1\n10 60\n20 61''') =='measurement error'"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('KPMPIGY') == 'LONDON'"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CYLCPS\") == \"CALGARY\"\nassert solution(\"YECYRM\") == \"CALGARY\"\nassert solution(\"YQQEL\") == \"CALGARY\"\nassert solution(\"WQWYRA\") == \"CALGARY\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"PAQCYAD\") == \"PACQYAD\"\n\"\"\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\nassert solution(\"QPONLPAO\", \"MOLYSSIG\") == \"MEOWMEOWMEOW\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\nassert solution(\"CJQHCXE\", \"WLDTSTQ\") == \"WHOWLEDOFLOL\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CQEHRR\") == \"KGIQW\"\n\"\"\"\n\nimport sys\nimport string\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"VWRKPSM\") == \"MORAVEC\"\nassert solution(\"VWRKPSX\") == \"MORAVEC\"\nassert solution(\"WPKEWKS\") == \"NKRVVRC\"\nassert solution(\"LPKMPSM\") == \"NKRVVRC\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CPMCRYY\") == \"ALBERTA\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"BABC\") == \"2\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == '3'\nassert solution('BA') == '2'\nassert solution('AB') == '1'\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AB\") == \"3\"\n\nSample Input:\nABC\nSample Output:\n1\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"CBA\") == \"1\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AB') == '3'\nassert solution('ABC') == '2'\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AB') == '3'\nassert solution('ABBA') == '1'\nassert solution('BAAA') == '1'\nassert solution('CC') == '1'\nassert solution('BA') == '2'\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"BABC\") == \"2\"\nassert solution(\"CABABC\") == \"3\"\nassert solution(\"BCCABAB\") == \"1\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AB\") == \"3\"\n\nassert solution(\"AAB\") == \"1\"\n\nassert solution(\"ABBC\") == \"2\"\n\nassert solution(\"ABC\") == \"2\"\n\nassert solution(\"ABCD\") == \"3\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"1\"\nassert solution(\"BC\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == '3'\nassert solution('AB') == '2'\nassert solution('ABB') == '1'\nassert solution('BBB') == '1'\nassert solution('ABBC') == '3'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '3'\n\nprint(solution('1 2 3 4'))\nassert solution('4 2 3 1') == '3'\n\nprint(solution('4 2 3 1'))\n\nassert solution('1 2 1 4') == '2'\n\nprint(solution('1 2 1 4'))\n\nassert solution('1 2 4 3') == '4'\n\nprint(solution('1 2 4 3'))\n\nassert solution('1 4 2 3') == '3'\n\nprint(solution('1 4 2 3'))"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == '3'\n\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5 6 7') == '10'\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n\n\n\"\"\"\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u043a\u0440\u0443\u0433 \u044d\u0442\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442\u0441\u044f \u0441 \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\u044e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0414\u0430\u043d\u044b 4 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A, B, C \u0438 D (0 < A, B, C, D < 100) \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0443\u0433\u043b\u043e\u0432 \u0443\u0433\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u0432\u043e\u043a\u0440\u0443\u0433 \u0438\u043c\u0435\u0435\u0442 (\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u043c \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0435).\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u044b\u043c (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0432\u043e\u0434 \u043e\u0431\u0449\u0435\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u0432\u043e\u043a\u0440\u0443\u0433 \u0438\u043c\u0435\u0435\u0442). \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0433\u0440\u0430\u043d\u044f\u043c\u0438 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0433\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u044d\u0442\u043e \u0434\u0435\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0439\u0442\u0438. \u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0433\u043e\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432 \u0432\u0438\u0434\u0435 \u043f\u0430\u0440\u044b \u0447\u0438\u0441\u0435\u043b a, b, \u0433\u0434\u0435 a \u2014 \u044d\u0442\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430 x \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430, \u0430 b \u2014 \u044d\u0442\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430 y \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f:\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0433\u043e \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430:\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 1\n>>> 1\n>>> 2\n>>> 3\n>>> 4\n0 \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('0 2 3 1') == '1'\nassert solution('0 1 1 1') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('1 2 3 4') == '3'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nprint(solution(\"1 2 3 4\"))\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == 3\nassert solution(\"1 2 1 1\") == 3\nassert solution(\"1 2 3 2\") == 2\nassert solution(\"1 2 3 4\") == 3\nassert solution(\"1 2 1 3\") == 3\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n\nfrom functools import reduce\n\nA, B, C, D = [int(i) for i in stdin.split()]\n\nlargest_area = 0\n\nfor a in range(1, A + 1):\n    for b in range(1, B + 1):\n        for c in range(1, C + 1):\n            for d in range(1, D + 1):\n                area = a * b + c * d\n                if area > largest_area:\n                    largest_area = area\n\nprint(largest_area)\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nprint(solution(\"1 2 3 4\"))\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 3 3 2\") == \"1\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"7\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('103 27') == '4'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('103 27') == 4\n'''\n\nimport sys\n\na, b = sys.stdin.readline().split()\na = int(a)\nb = int(b)"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('103 27') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('103 27') == 4\nassert solution('4 3') == 2\nassert solution('7 6') == 0\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('103 27') == 4\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103 27') == 4\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 3') == '3'\nassert solution('1 4') == '3'\nassert solution('1 5') == '5'\nassert solution('9 34') == '5'\n\nassert solution('10 20') == '1'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103 27') == '4'\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(int(a * b / 2) + int((a % 2 == 0)))"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"103 27\") == 4\n\"\"\"\n\n\"\"\"\nThe solution is quite simple, the key is the observation that if the difference between the two numbers is odd, the minimum operations we need to make the first number even must be exactly one more than the minimum operations to make the second number even.\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103 27') == '4'\n\"\"\"\n\nfrom sys import stdin\n\na, b = map(int, stdin.readline().split())"
    }
]