[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1\\n1 3\\n1 2\") == \"3\"\nassert solution(\"4\\n2 1\\n1 3\\n1 2\") == \"1 3 2\"\n\n\"\"\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == '5\\n1 8 6'\n\"\"\"\n\n\nfrom typing import Set, Optional, List\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nedges = []\n\nfor _ in range(N - 1):\n    edges.append(stdin.readline().split())\n\nedges.sort(key=lambda x: int(x[0]), reverse=False)\n\nedges = [int(edge) for edge in edges]\n\nans = [0, 0, 0]\n\nfor edge in edges:\n    if ans[0] < edge[0]:\n        ans[0] = edge[0]\n        ans[1] = edge[1]\n        ans[2] = edge[2]\n\nprint(ans[0], ans[1], ans[2], sep='\\n')\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\nimport sys\nimport heapq\n\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 4 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5 1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport collections\nimport unittest"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''3\n1 2 3''') == '1 2 3'\nassert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''6\n1 2 3 4 5 6''') == '1 6'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nfrom collections import Counter\nfrom math import gcd\n\nn = int(input())\nl = list(map(int, input().split()))\nd = Counter(l)\n\nfor k in d:\n    d[k] //= 2\n\nx, y = 1, 1\nfor k in d:\n    x *= k**d[k]\n    y *= k**d[k]\n\ng = gcd(x, y)\nx, y = x // g, y // g\nprint(x, y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10 12\\n8 2 4 1 2 3 6') == '20 8'\nassert solution('2 4 8 10 12\\n8 2 4 1 2 3 6') == '20 8'\nassert solution('2 4 8 10 12\\n8 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '7 8 9'\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split(' ')))\nassert len(set(s)) == n\n\ns1, s2 = set(), set()\nfor x in s:\n    for y in range(1, x+1):\n        if x % y == 0:\n            s1.add(y)\n            s2.add(x//y)\nassert len(s1) == n\nassert len(s2) == n\n\nx, y = 1, 1\n\nfor i in sorted(s2):\n    if i not in s1:\n        x *= i\n\nfor i in sorted(s1):\n    if i not in s2:\n        y *= i\n\nprint(x, y)"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 9\") == \"20 8\"\nassert solution(\"6 12\") == \"20 12\"\nassert solution(\"10 9 10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 12 10 2 8 1 2 4 1 20 4 5\") == \"20 12\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n') == '24'\n\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n') == '56'"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 2\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4''') == '24'\nassert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == '56'\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == '24'\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\n\n\n\n\n>>> from typing import List\n>>> from collections import defaultdict\n>>>\n>>> def solution(stdin: List[int]) -> int:\n...     N, M, K = stdin\n...\n...     # dp[i][j]: \ud569\uc774 j\uc778 \ubd80\ubd84\uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\n...     dp = [[0] * (j+1) for j in range(M+1)]\n...\n...     # \ucd08\uae30\ud654\n...     dp[0] = [1] * (j+1)\n...\n...     for i in range(N):\n...         for j in range(M):\n...             dp[i+1][j+1] = dp[i][j+1]\n...             if j >= stdin[i] and dp[i][j] + dp[i+1][j-stdin[i]] > dp[i][j]:\n...                 dp[i+1][j+1] = dp[i][j] + dp[i+1][j-stdin[i]]\n...\n...     return dp[N][M]\n>>> solution([3,4,3,1,2,4,2,1])\n24\n\n>>> solution([5,5,4,1,2,4,2,1])\n56\n\"\"\"\n\nimport unittest\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def solution(self, stdin: List[int]) -> int:\n        \"\"\"\n        dp[i][j]: \ud569\uc774 j\uc778 \ubd80\ubd84\uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\n        \"\"\"\n        N, M, K = stdin\n        dp = [[0] * (K + 1) for _ in range(M + 1)]\n\n        # \ucd08\uae30\ud654\n        dp[0] = [1] * (K + 1)\n\n        for i in range(N):\n            for j in range(M):\n                dp[i + 1][j + 1] = dp[i][j + 1]\n                if j >= stdin[i] and dp[i][j] + dp[i + 1][j - stdin[i]] > dp[i][j]:\n                    dp[i + 1][j + 1] = dp[i][j] + dp[i + 1][j - stdin[i]]\n\n        return dp[M][K]\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        assert self.solution([3, 4, 3, 1, 2, 4, 2, 1]) == 24\n        assert self.solution([5, 5, 4, 1, 2, 4, 2, 1]) == 56\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n') == '3'\nassert solution('1 2 2\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 3 2\") == \"4\"\nassert solution(\"1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"1 2 4 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 3 2\") == \"4\"\nassert solution(\"1 2 4 3 5 2\") == \"6\"\n\nassert solution(\"1 2 4 3 5 6 5 4 2\") == \"6\"\n\nassert solution(\"1 2 4 3 5 6 5 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\nassert solution(\"2\\n2 2\") == \"1\\nR\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\\n\"\n\n-----Template-----\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 2 3 2') == '3'\nassert solution('1 2 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\", \"Wrong solution\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\n\"\"\"\n\nimport sys\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a1) == ans1\nassert solution(a2) == ans2\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 7 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"5 3 4 7 7\") == \"-1\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == '3'\nassert solution(\"5\\n2 2 5 2 5\") == '3'\nassert solution(\"4\\n1 3 3 7\") == '-1'\nassert solution(\"2\\n2 8\") == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 8\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 5 2\") == 3\n\"\"\"\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndiff = sys.maxsize\nfor x in arr:\n    for y in arr:\n        if (y + x)!= y and (y - x)!= y:\n            diff = min(diff, abs(x - y))"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 2 3 4') == '5'\nassert solution('1 2 4 7') == '3'\nassert solution('1 2 3 5') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('4\\n1 3 3 7') == '-1'\nassert solution('2\\n2 8') == '3'\nprint('The local tests are done. Try Solution II online.')\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == 3\nassert solution(\"5\\n2 2 5 2 5\") == 3\nassert solution(\"4\\n1 3 3 7\") == -1\nassert solution(\"2\\n2 8\") == 3"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"6\\n2 2 5 2 5 1\") == \"3\"\nassert solution(\"7\\n2 2 5 2 5 1\") == \"3\"\nassert solution(\"6\\n1 3 3 7\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"5\\n1 4 7 7\") == \"3\"\nassert solution(\"5\\n4 1 3 7 7\") == \"-1\"\n"
    }
]