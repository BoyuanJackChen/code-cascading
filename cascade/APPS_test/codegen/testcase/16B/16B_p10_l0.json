[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1\\n1 3\\n1 2\") == \"3\"\nassert solution(\"4\\n2 1\\n1 3\\n1 2\") == \"1 3 2\"\n\n\"\"\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == '5\\n1 8 6'\n\"\"\"\n\n\nfrom typing import Set, Optional, List\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nedges = []\n\nfor _ in range(N - 1):\n    edges.append(stdin.readline().split())\n\nedges.sort(key=lambda x: int(x[0]), reverse=False)\n\nedges = [int(edge) for edge in edges]\n\nans = [0, 0, 0]\n\nfor edge in edges:\n    if ans[0] < edge[0]:\n        ans[0] = edge[0]\n        ans[1] = edge[1]\n        ans[2] = edge[2]\n\nprint(ans[0], ans[1], ans[2], sep='\\n')\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\nimport sys\nimport heapq\n\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 4 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5 1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport collections\nimport unittest"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''3\n1 2 3''') == '1 2 3'\nassert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''6\n1 2 3 4 5 6''') == '1 6'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nfrom collections import Counter\nfrom math import gcd\n\nn = int(input())\nl = list(map(int, input().split()))\nd = Counter(l)\n\nfor k in d:\n    d[k] //= 2\n\nx, y = 1, 1\nfor k in d:\n    x *= k**d[k]\n    y *= k**d[k]\n\ng = gcd(x, y)\nx, y = x // g, y // g\nprint(x, y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10 12\\n8 2 4 1 2 3 6') == '20 8'\nassert solution('2 4 8 10 12\\n8 2 4 1 2 3 6') == '20 8'\nassert solution('2 4 8 10 12\\n8 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '7 8 9'\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split(' ')))\nassert len(set(s)) == n\n\ns1, s2 = set(), set()\nfor x in s:\n    for y in range(1, x+1):\n        if x % y == 0:\n            s1.add(y)\n            s2.add(x//y)\nassert len(s1) == n\nassert len(s2) == n\n\nx, y = 1, 1\n\nfor i in sorted(s2):\n    if i not in s1:\n        x *= i\n\nfor i in sorted(s1):\n    if i not in s2:\n        y *= i\n\nprint(x, y)"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 9\") == \"20 8\"\nassert solution(\"6 12\") == \"20 12\"\nassert solution(\"10 9 10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 12 10 2 8 1 2 4 1 20 4 5\") == \"20 12\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n') == '24'\n\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n') == '56'"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 2\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4''') == '24'\nassert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == '56'\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == '24'\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\n\n\n\n\n>>> from typing import List\n>>> from collections import defaultdict\n>>>\n>>> def solution(stdin: List[int]) -> int:\n...     N, M, K = stdin\n...\n...     # dp[i][j]: \ud569\uc774 j\uc778 \ubd80\ubd84\uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\n...     dp = [[0] * (j+1) for j in range(M+1)]\n...\n...     # \ucd08\uae30\ud654\n...     dp[0] = [1] * (j+1)\n...\n...     for i in range(N):\n...         for j in range(M):\n...             dp[i+1][j+1] = dp[i][j+1]\n...             if j >= stdin[i] and dp[i][j] + dp[i+1][j-stdin[i]] > dp[i][j]:\n...                 dp[i+1][j+1] = dp[i][j] + dp[i+1][j-stdin[i]]\n...\n...     return dp[N][M]\n>>> solution([3,4,3,1,2,4,2,1])\n24\n\n>>> solution([5,5,4,1,2,4,2,1])\n56\n\"\"\"\n\nimport unittest\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def solution(self, stdin: List[int]) -> int:\n        \"\"\"\n        dp[i][j]: \ud569\uc774 j\uc778 \ubd80\ubd84\uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\n        \"\"\"\n        N, M, K = stdin\n        dp = [[0] * (K + 1) for _ in range(M + 1)]\n\n        # \ucd08\uae30\ud654\n        dp[0] = [1] * (K + 1)\n\n        for i in range(N):\n            for j in range(M):\n                dp[i + 1][j + 1] = dp[i][j + 1]\n                if j >= stdin[i] and dp[i][j] + dp[i + 1][j - stdin[i]] > dp[i][j]:\n                    dp[i + 1][j + 1] = dp[i][j] + dp[i + 1][j - stdin[i]]\n\n        return dp[M][K]\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        assert self.solution([3, 4, 3, 1, 2, 4, 2, 1]) == 24\n        assert self.solution([5, 5, 4, 1, 2, 4, 2, 1]) == 56\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n') == '3'\nassert solution('1 2 2\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 3 2\") == \"4\"\nassert solution(\"1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"1 2 4 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 3 2\") == \"4\"\nassert solution(\"1 2 4 3 5 2\") == \"6\"\n\nassert solution(\"1 2 4 3 5 6 5 4 2\") == \"6\"\n\nassert solution(\"1 2 4 3 5 6 5 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\nassert solution(\"2\\n2 2\") == \"1\\nR\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\\n\"\n\n-----Template-----\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 2 3 2') == '3'\nassert solution('1 2 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\", \"Wrong solution\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\n\"\"\"\n\nimport sys\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a1) == ans1\nassert solution(a2) == ans2\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 7 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"5 3 4 7 7\") == \"-1\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == '3'\nassert solution(\"5\\n2 2 5 2 5\") == '3'\nassert solution(\"4\\n1 3 3 7\") == '-1'\nassert solution(\"2\\n2 8\") == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 8\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 5 2\") == 3\n\"\"\"\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndiff = sys.maxsize\nfor x in arr:\n    for y in arr:\n        if (y + x)!= y and (y - x)!= y:\n            diff = min(diff, abs(x - y))"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 2 3 4') == '5'\nassert solution('1 2 4 7') == '3'\nassert solution('1 2 3 5') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('4\\n1 3 3 7') == '-1'\nassert solution('2\\n2 8') == '3'\nprint('The local tests are done. Try Solution II online.')\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == 3\nassert solution(\"5\\n2 2 5 2 5\") == 3\nassert solution(\"4\\n1 3 3 7\") == -1\nassert solution(\"2\\n2 8\") == 3"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"6\\n2 2 5 2 5 1\") == \"3\"\nassert solution(\"7\\n2 2 5 2 5 1\") == \"3\"\nassert solution(\"6\\n1 3 3 7\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"5\\n1 4 7 7\") == \"3\"\nassert solution(\"5\\n4 1 3 7 7\") == \"-1\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"100000 0 1000000 1000000\\n0 0 499999 1000000\\n0 0 7 4\") == \"NO\"\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"2 2 4 4\\n0 0 3 5\\n0 0 7 4\") == \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6\\n0 0 7 4\") == 'NO'\nassert solution(\"3 1 7 6\\n8 1 11 7\") == 'YES'\nassert solution(\"5 2 10 5\\n3 1 7 6\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\n\"\"\"\n\nn = int(stdin.readline())\ns = set()\ns.add(0)\nfor i in range(n):\n    s.add(i+1)\nfor i in range(n):\n    for j in range(i+1):\n        s.add(i+1+j+1)\nprint(len(s))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\n\nassert solution(\"10\") == 19\n\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\nprint(solution(input()))\n\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\nassert solution('10099') == '20'\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any, List, Optional, Tuple, Union\n\n\nclass Node:\n    def __init__(self, value: Any, left: Optional[Node] = None, right: Optional[Node] = None):\n        self.value = value\n        self.left: Optional[Node] = left\n        self.right: Optional[Node] = right\n\n    def __str__(self) -> str:\n        return str(self.value)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 0 0 2 4\\n') == '5 3 1 2 4'\nassert solution('7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6'\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n5 0 0 2 4\n''') == '5 3 1 2 4'\n\nassert solution('''\n7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\n\nassert solution('''\n7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'\n\nassert solution('''\n5\n2 1 0 0 0\n''') == '2 1 4 5 3'"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == \"NO\"\nassert solution('1 1 2 2') == \"YES\"\nassert solution('1 2 1 2') == \"YES\"\nassert solution('1 2 2 2') == \"YES\"\nassert solution('1 2 2 1') == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1 1 2 1') == 'NO'\nassert solution('3 2 1 2 1') == 'NO'\nassert solution('3 2 1 2 2') == 'NO'\nassert solution('3 2 1 2 3') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\nassert solution('5 2\\n2 1 1 2 2') == 'NO'\nassert solution('5 2\\n2 1 2 1 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 2 1\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\") == \"YES\\n2 1 1 2 1\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\nimport re"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\") == '1'\nassert solution(\"11 5 1\") == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\n\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('111 5 2') == '2'\n\nimport sys\nimport collections"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 5 2') == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('2') == 'YES'\nassert solution('1 2 1') == 'YES'\nassert solution('5') == 'YES'\nassert solution('1 2 2 3 2') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n\"\"\"\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().strip().split(' ')))\n\n    if n < 3:\n        print('NO')\n        continue\n\n    for i in range(n - 2):\n        if arr[i] == arr[i + 1] and arr[i + 1] == arr[i + 2]:\n            print('YES')\n            break\n        elif arr[i] == arr[n - 1 - i] and arr[n - 1 - i] == arr[n - 2 - i]:\n            print('YES')\n            break\n        elif i == n - 3:\n            print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\\nYES\\nNO\"\nassert solution(\"2\\n1\\n1 1\") == \"YES\"\nassert solution(\"1\\n1\\n1\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"NO\\nNO\\nNO\\nYES\\nNO\"\n\n-----"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n1\\n2 1 2\\n3\\n4\\n5 1 2 3 2 1\\n3\\n3 2 2 2 1\\n2\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nNO\\nYES\\nNO\"\nassert solution(\"1\\n2\\n2\\n2\\n2\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1337\") == \"1553\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\nassert solution('2\\n33') == '33'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\n\"\"\"\n\nn = int(input())\na = input()\nf = list(map(int, input().split()))\n\nmax_possible = 10 ** n\n\ncurr_max = 0\nfor i in range(n):\n    curr_max = curr_max * 10 + f[a[i] - 1]\n\nfor i in range(n):\n    curr_max = max(curr_max, curr_max * 10 + f[a[i] - 1])\n\nprint(curr_max)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1337''') == '1557'\nassert solution('''5\n11111''') == '99999'\nassert solution('''2\n33''') == '33'\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"84519\") == \"84519\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 1\") == \"3932\"\nassert solution(\"5 5 4 3 2 1\") == \"9950\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\nprint('Test pass.')\n\n-----Problem-----\n\n*Brianna is a very clever girl. She has learned to count. Her teacher gave her a task to count the numbers from 1 to n. She does not know how to count. So she goes to the internet to find some information.\n\nThere are n integers a_1, a_2,..., a_n.\n\nShe can count the number of pairs (i, j) such that 1 \u2264 i, j \u2264 n, a_i > a_j. The pairs (i, j) and (j, i) are considered the same.\n\nShe wants to find the maximum number of such pairs.\n\nHelp her.\n\nInput\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in array.\n\nThe second line contains n space-separated integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 10000) \u2014 the elements of array.\n\nOutput\nPrint a single integer \u2014 the maximum number of pairs (i, j) such that 1 \u2264 i, j \u2264 n, a_i > a_j.\n\nExamples\nInput\n5\n1 3 2 1\n\nOutput\n3\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n2\n\n-----Tests-----\n\nInput\n4\n1 1 1\n2 2 2\n3 3 3\n4 4 4\nOutput\n2\n\nInput\n5\n1 2 3 4 5\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5\nOutput\n0\n\nInput\n6\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\nOutput\n4\n\nInput\n4\n1 1 1\n1 1 1\n2 2 2\n3 3 3\nOutput\n3\n\nInput\n5\n1 1 1\n1 1 1\n2 2 2\n3 3 3\n4 4 4\nOutput\n3\n\nInput\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\nOutput\n10\n\nInput\n7\n1 2 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\nOutput\n4\n\nInput\n10\n1 2 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\nOutput\n8\n\nInput\n5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\nOutput\n0\n\n-----Solution-----\n\nn=int(input())\nl=[]\nfor i in range(n):\n    l.append(int(input()))\nl.sort()\nm=[]\nfor i in range(len(l)-1):\n    for j in range(i+1,len(l)):\n        if l[j]%l[i]==0:\n            m.append(l[i]+l[j])\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n2 3 4\\n4 5 6') == '1\\n1 1 3\\n2\\n2 3 4\\n2 3 4\\n2 3 4\\n4\\n4 8 16\\n4 8 16'\nassert solution('2\\n2 3 4\\n4 5 6') == '1\\n1 1 3\\n4\\n4 8 16\\n4 8 16'\nassert solution('1\\n1 2 3') == '1\\n1 1 3'\nassert solution('1\\n1 2 3') == '1\\n1 1 3'\nassert solution('1\\n1 2 3') == '1\\n1 1 3'\n\"\"\"\n\nfrom typing import List, Dict\nimport sys\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1\\n1 1 3'\nassert solution('123 321 456') == '1\\n1 1 3'\nassert solution('5 10 15') == '3\\n2 2 5'\nassert solution('15 18 21') == '1\\n1 1 3'\nassert solution('100 100 101') == '1\\n1 100 101'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 4\") == \"1\\n1 3\\n1 3 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 3\\n1 2 3') == '3\\n1 1 2\\n1 2 3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"\"\"\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\n\"\"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3, 4, 5\") == \"3\"\nassert solution(\"1, 2, 3\") == \"2\"\nassert solution(\"9, 9, 9\") == \"9\"\nassert solution(\"10, 15, 30\") == \"10\"\nassert solution(\"2, 6, 8\") == \"3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"1\\n1 1 3\"\nassert solution(\"123 321 456\") == \"3\\n3 3 6\"\nassert solution(\"5 10 15\") == \"2\\n5 5 10\"\nassert solution(\"15 18 21\") == \"2\\n15 15 18\"\nassert solution(\"100 100 101\") == \"1\\n100 101 101\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('3\\n1 3 3') == '0'\nassert solution('2\\n1 100') == '0'"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 7\") == \"2\"\nassert solution(\"2 1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\nassert solution(\"2\\n100 100\") == 1\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('2\\n1 100') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().strip().split()))\n\ndp = [0] * n\ndp[0] = a[0]\ndp[1] = a[1] - a[0]\n\nfor i in range(2, n):\n    dp[i] = max(a[i] - min(a[:i]), dp[i - 1])\n\nprint(dp[n - 1])\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('10 3\\n4 7 2\\n1 2 1\\n8 9 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 3 0 3\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5 2\\n'\n    '1 3 1\\n'\n    '1 5 1\\n'\n) == '1 2 3 0 3'\n\nassert solution(\n    '3 2\\n'\n    '1 3 1\\n'\n    '1 2 1\\n'\n) == '-1'\n\nassert solution(\n    '10 3\\n'\n    '4 7 2\\n'\n    '1 10 3\\n'\n    '8 9 1\\n'\n) == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3'\nassert solution('''3 2\n1 3 1\n1 2 1\n''') == '-1'\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1\n''') == '2 2 2 1 1 0 4 3 4 4'\nprint('The local tests are done.')"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5 2\n1 3 1\n1 5 1\n''') == \"1 2 3 0 3\"\nassert solution('''\n3 2\n1 3 1\n1 2 1\n''') == \"-\"\nassert solution('''\n10 3\n4 7 2\n1 10 3\n8 9 1\n''') == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n\nimport itertools\nimport numpy as np"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 2 1 1 0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0\"\n\"\"\"\n\nfrom typing import Dict, List"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\n\"\"\"\n\nimport sys\nimport re\n\nn, m = map(int, sys.stdin.readline().strip().split())\n\ns, d, c = [], [], []\nfor _ in range(m):\n    s_, d_, c_ = map(int, re.findall(r'\\d+', sys.stdin.readline().strip()))\n    s.append(s_)\n    d.append(d_)\n    c.append(c_)\n\ndp = [[0] * (n + 1) for _ in range(m + 1)]\nfor i in range(1, m + 1):\n    dp[i][0] = i\nfor i in range(1, n + 1):\n    dp[0][i] = i\n\nfor i in range(1, m + 1):\n    for j in range(1, n + 1):\n        if dp[i - 1][j] + c[i - 1] <= n:\n            dp[i][j] = dp[i - 1][j]\n        else:\n            dp[i][j] = dp[i][j - 1]"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\"\"\"\nimport sys\nimport math\n\nn, m = [int(x) for x in sys.stdin.readline().strip().split(' ')]"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''120 51840''') == '7'\nassert solution('''42 42''') == '0'\nassert solution('''48 72''') == '-1'\n\n\n'''\nFrom Wikipedia: \"The game of Sudoku is a two-player puzzle where the goal is to create a \nsudoku puzzle grid (also known as a sodoku puzzle or a digitized sudoku puzzle) \nconsisting of a 9x9 grid of digits where each cell may contain the digits 1, 2, 3, 4, 5, 6, 7, 8, 9. \nThe puzzle grid contains a special square in the top-left corner of the grid, called the \nnumbers place. The number place contains a number 1 through 9. The remaining squares of the \ngrid contain a fixed number of empty squares, known as the blanks. The number of \nblanks in any given row, column, or sub-grid is always the same and is always equal to \nthe number which appears in the top-left corner of that sub-grid. In Sudoku puzzles, \nthe number which appears in the number place is known as the solution.\"\n\nIn the field of Sudoku the solution is a list of lists of lists of integers.\nEach list of lists corresponds to one of the 9 sub-grids and each integer of that sub-grid\ncorresponds to a digit on that sub-grid.\n\nThe list of lists corresponds to the rows. Each list within the list corresponds to a \nrow. A list of length 9 corresponds to a row. The sub-lists within the list correspond\nto the columns. For each sub-list, the integers correspond to the digits on that column.\n\nThe list of lists corresponds to the columns. Each list within the list corresponds to a \ncolumn. A list of length 9 corresponds to a column. The sub-lists within the list correspond\nto the rows. For each sub-list, the integers correspond to the digits on that row.\n\nThe list of lists corresponds to the sub-grids. Each list within the list corresponds to a \nsub-grid. Each list of length 9 corresponds to a sub-grid. The sub-lists within the list\ncorrespond to the columns. For each sub-list, the integers correspond to the digits on that\nsub-grid."
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\nassert solution(\"13 14\") == \"3\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == '7'\nassert solution(\"42 42\") == '0'\nassert solution(\"48 72\") == '-1'\n\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline().strip()\nm = sys.stdin.readline().strip()"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaaa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catcat\") == \"catcat\"\nassert solution(\"abc\") == \"abcabc\"\nassert solution(\"cccc\") == \"cccccc\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaaa'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\nprint(solution(\"aba\", 3))\nprint(solution(\"cat\", 2))"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('cat') == 'cat'\nassert solution('acat') == 'acat'\nassert solution('acatacat') == 'acatacat'\nassert solution('acatacatcat') == 'acatacatcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'abababa'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaaa') == 'aaaa'\nassert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\n\nInput\n3 2\nabc\n\nOutput\nabcabc\n\nassert solution('') == ''\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catcat\") == \"catcatcatcat\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 6 5 6\") == \"2 1 4\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"3 4 5 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 2, 1, 2, 2) == '3 4 1 5'\nassert solution(4, 8, 3, 5, 2) == '0'\nassert solution(5, 2, 1, 2, 2) == '3 4 1 5'\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0\\n'\nassert solution('1\\n') == '0\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('3\\n') == '0\\n'\nassert solution('4\\n') == '2\\n'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 2 4 3') == '0'\nassert solution('5\\n2 1 2 4') == '4 1 5'\nassert solution('4\\n8 3 5 2') == '2'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\"\nassert solution(\"5\\n8 3 5 2\\n\") == \"2\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"0\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\ngood = sum(a)\n\nsum_to_good = {a[0]}\nfor i in range(1, n):\n    sum_to_good.add(good - sum(a[:i] + a[i + 1:]))\n\nprint(len(sum_to_good))\nprint(' '.join(str(x) for x in sum_to_good))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 5 1 2 2''') == '3\nassert solution('''4\n8 3 5 2''') == '2\nassert solution('''5\n2 1 2 4 3''') == '0'''\n\n\n\n\nclass SumArray(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''5\n2 5 1 2 2'''), '3')\n        self.assertEqual(solution('''4\n8 3 5 2'''), '2')\n        self."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 2 4 3') == '0'\nassert solution('5\\n2 1 2 4 3') == '3'\nassert solution('5\\n8 3 5 2') == '2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nres = 0\n\nfor j in range(n):\n    temp = sum(a) - a[j]\n    for i in range(j+1, n):\n        if a[i] == temp:\n            res += 1\n            break\n\nprint(res)\nfor i in range(res):\n    print(i+1, end=' ')"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n2 1 2 2\\n\"\n) == \"3\\n4 1 5\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 5 2\\n\") == '0'\nassert solution(\"8 3 5 2\\n\") == '2 1 4'\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n\n\"\"\"\n\nfrom itertools import combinations\n\nfrom sys import stdin\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('asdf') == 4\nassert solution('aaaaa') == 15\nassert solution('ajihiushda') == -1\n\n----\n\nHere is some useful info for more complex solutions.\n\nSo, let's look at the task again.\nWe want to find the minimum possible cost of obtaining a set $S$ of size $k$ from the string $s$:\n\nFirst, we check if there are at least $k$ elements in the string.\nIf there are, we make two steps.\n\nFirst, we take all the elements with indices in the range [0; k - 1].\nThen we add all the elements with indices in the range [k; n - 1].\n\nThese steps can be written in the code as follows:\n\n'''"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 asdf\") == \"15\"\nassert solution(\"5 7 asdf\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == expected_result\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\nimport sys\n\na = sys.stdin.readline().split()\nn = int(a[0])\nk = int(a[1])\n\ns = sys.stdin.readline().strip()\n\nt = set()\ncount = 0\n\nfor i in range(n):\n    if s[i] not in t:\n        count += n - i\n        t.add(s[i])\n    else:\n        count += 1"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == -1\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\nassert solution('10 100\\najihiushda') == '233'\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n2 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'NO'\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = defaultdict(list)\n        self.neighbours = [[] for _ in range(n)]\n\n    def add_edge(self, x, y):\n        self.edges[x].append(y)\n        self.edges[y].append(x)\n        self.neighbours[x].append(y)\n        self.neighbours[y].append(x)\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\nfrom typing import Dict, List, Set, Tuple\nfrom collections import defaultdict\nimport queue\nimport itertools\n\n\nclass Graph:\n    def __init__(self, vertices: List[str]) -> None:\n        self.v = len(vertices)\n        self.adjacency_list = defaultdict(set)\n        self.edge_list = set()\n        for edge in vertices:\n            edge = edge.split(\" \")\n            v, u = int(edge[0]), int(edge[1])\n            self.edge_list.add((v, u))\n            self.adjacency_list[v].add(u)\n\n    def find_all_edges(self) -> Set[Tuple[int, int]]:\n        return self.edge_list\n\n    def find_all_vertices(self) -> Set[int]:\n        return set(itertools.chain(*self.adjacency_list.values()))\n\n    def find_all_edges_of_vertex(self, vertex: int) -> Set[Tuple[int, int]]:\n        return set(\n            (u, v)\n            for u, v in self.edge_list\n            if u == vertex or v == vertex\n        )\n\n    def find_all_edges_of_vertices(self, vertices: Set[int]) -> Set[Tuple[int, int]]:\n        return set(\n            edge\n            for vertex in vertices\n            for edge in self.find_all_edges_of_vertex(vertex)\n        )\n\n    def find_all_neighbours(self, vertex: int) -> Set[int]:\n        return self.adjacency_list[vertex]\n\n    def find_all_neighbours_of_vertex(self, vertex: int) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_neighbours(v) for v in self.adjacency_list[vertex])\n        ))\n\n    def find_all_neighbours_of_vertices(self, vertices: Set[int]) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_neighbours_of_vertex(v) for v in vertices)\n        ))\n\n    def find_all_vertices_of_neighbourhood(self, vertex: int) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_vertices_of_neighbourhood(v) for v in self.find_all_neighbours(vertex))\n        ))\n\n    def find_all_vertices_of_neighbourhood_of_vertex(self, vertex: int) -> Set[int]:\n        return self.adjacency_list[vertex]\n\n    def find_all_vertices_of_neighbourhood_of_vertices(self, vertices: Set[int]) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_vertices_of_neighbourhood_of_vertex(v) for v in vertices)\n        ))\n\n    def find_all_neighbourhoods(self) -> Set[Set[int]]:\n        return set(\n            self.find_all_vertices_of_neighbourhood(vertex)\n            for vertex in self.adjacency_list\n        )\n\n    def find_all_neighbourhoods_of_vertex(self, vertex: int) -> Set[Set[int]]:\n        return self.find_all_neighbourhoods_of_vertices({vertex})\n\n    def find_all_neighbourhoods_of_vertices(self, vertices: Set[int]) -> Set[Set[int]]:\n        return set(\n            self.find_all_vertices_of_neighbourhood_of_vertex(vertex)\n            for vertex in vertices\n        )\n\n    def find_all_edges_of_neighbourhood(self, vertex: int) -> Set[Tuple[int, int]]:\n        return set(itertools.chain(\n            *(self.find_all_edges_of_neighbourhood_of_vertex(v) for v in self.find_all_neighbours(vertex))\n        ))\n\n    def find_all_edges_of_neighbourhood_of_vertex(self, vertex: int) -> Set[Tuple[int, int]]:\n        return self.find_all_edges_of_vertices(self.find_all_vertices_of_neighbourhood_of_vertex(vertex))\n\n    def find_all_edges_of_neighbourhood_of_vertices(self, vertices: Set[int]) -> Set[Tuple[int, int]]:\n        return set(itertools.chain(\n            *(self.find_all_edges_of_neighbourhood_of_vertex(v) for v in vertices)\n        ))\n\n    def find_all_neighbourhood_of_neighbourhoods(self, vertex: int) -> Set[Set[int]"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\n'''\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\nassert solution(\n'''\n4 4 3\n1 2\n1 4\n2 3\n3 4\n''') == 'NO'\nassert solution(\n'''\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n1 2\\n1 3\\n1 4\\n3 1\\n3 4'\nassert solution(\n'''\n3 4 2\n1 2\n2 3\n1 3\n''') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n3 2\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport random\n\nsys.setrecursionlimit(1500)\n\n\nclass Node:\n    def __init__(self, num_of_vertices):\n        self.adj_list = [[] for _ in range(num_of_vertices)]\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 2\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\nassert solution('11:10 11:12') == '11:11 11:12'\nassert solution('01:02 03:02') == '02:02 03:02'\n\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11:10 11:12\") == \"11:11\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"10:00 11:00\") == \"10:30\"\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\nprint('Success')\n\n\"\"\"\n\nimport os\nfrom io import StringIO\n\nstdin = \"\"\"\n10:00\n11:00\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\nassert solution(\"10:00\") == \"10:30\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nassert solution('64') == '8'\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"42\") == 6\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 2\nprint('Test 1 OK')\nassert solution(\"2\") == 1\nprint('Test 2 OK')\nassert solution(\"27\") == 5\nprint('Test 3 OK')\nassert solution(\"42\") == 6\nprint('Test 4 OK')"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"3\") == 2\nassert solution(\"6\") == 5\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(1)) == '1'\nassert solution(str(2)) == '2'\nassert solution(str(3)) == '2'\nassert solution(str(4)) == '3'\nassert solution(str(5)) == '3'\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 1\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1\\n'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2\\n'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0\\n'\nassert solution('2\\n3 10\\n1 5\\n') == '7\\n'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 5\\n\") == \"1\"\nassert solution(\"1 3\\n2 6\\n\") == \"1\"\nassert solution(\"1 3\\n0 4\\n\") == \"0\"\nassert solution(\"1 3\\n1 20\\n0 4\\n\") == \"2\"\nassert solution(\"3 10\\n1 5\\n0 4\\n1 20\\n0 4\\n\") == \"7\"\n\n\n'''"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\n\nimport numpy as np"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 3') == '1'\nassert solution('2 6') == '2'\nassert solution('0 4') == '2'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == '0'\nassert solution('2\\n3\\n4\\n5') == '2'\nassert solution('1\\n2\\n3\\n4\\n5') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '1'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n1 3\n2 6\n0 4\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == \"2\"\nassert solution(\"\"\"3\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\nassert solution(\"\"\"2\n3 10\n1 5\n\"\"\") == \"7\"\nassert solution(\"\"\"1\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"4 5 3\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"2 4 1 5\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\n-----UPDATING THE SIZE OF THE WALL-----"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'NO'\nassert solution('''2\n10 10''') == 'YES'\nassert solution('''2\n10 10\n''') == 'NO'\nassert solution('''4\n1 1 2 2\n''') == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('1\\n10') == 'NO'\n\nimport re"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 1 2 5\\n') == 'YES'\nassert solution('3\\n4 5 3\\n') == 'NO'\nassert solution('2\\n10 10\\n') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n4 5 3\\n\") == \"NO\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\n\n'''\nfrom collections import Counter\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 asdf') == '4'\nassert solution('5 6 aaaaa') == '15'\nassert solution('5 7 aaaaa') == '-1'\nassert solution('10 100 ajihiushda') == '233'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == ''\nassert solution('aba') == 'a'\nassert solution('abaca') == 'abaca'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\n\nassert solution(\"5 6\\naaaaa\") == \"15\"\n\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\nassert solution(\"1 1\\n1\") == \"0\"\n\"\"\"\n\n\nfrom typing import Dict\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaaa') == 15\nassert solution('asdf') == 4\nassert solution('ajihiushda') == 233\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaca\") == \"aba\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"aaaaa\") == \"aaa\"\nassert solution(\"aaaaaaaaaaa\") == \"aaaaaaaaaaa\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(111111)\n\nn, k = map(int, input().split())\ns = input()\n\ncosts = []\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"233\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 ajihiushda\") == 15\nassert solution(\"5 7 ajihiushda\") == -1\nassert solution(\"10 100 ajihiushda\") == 233\n\n\n-----Challenge-----\n\nCan you solve it by a faster algorithm?\n\n\"\"\"\n\n\nfrom typing import Dict, List\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ajihiushda\") == 233\nassert solution(\"aaaaa\") == 15\nassert solution(\"\") == 0\nassert solution(\"aaaa\") == 4\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"\n\nimport collections\n\na, b, c = [int(x) for x in input().split()]\n\ndays = collections.defaultdict(int)\nday = 0\n\nfor i in range(7):\n    day = (day + a + b + c) % 7\n    days[day] += 1\n\nprint(max(days.values()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 1 1'\n) == 4\nassert solution(\n    '3 2 2'\n) == 7\nassert solution(\n    '1 100 1'\n) == 3\nassert solution(\n    '30 20 10'\n) == 39\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 100 1') == '3'\nassert solution('3 2 2') == '7'\nassert solution('30 20 10') == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 100 1\"\n) == \"4\"\n\nassert solution(\n    \"3 2 2\"\n) == \"7\"\n\nassert solution(\n    \"30 20 10\"\n) == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 100 1\") == 3\nassert solution(\"2 1 1\") == 4\nassert solution(\"3 2 2\") == 7\nassert solution(\"30 20 10\") == 39\n\"\"\"\n\nfrom collections import deque\n\nfrom collections import deque\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"NO\"\n\n\n-----Test 2-----\nInput\n1\n3 4\n1 2\n3 4\n1 2\n1 2\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n3 4\\n5 6\\n3 4\") == 'YES'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'NO'\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'YES'\nassert solution('1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'NO'\nassert solution('1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4\") == \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n1 1\") == 'NO'\nassert solution(\"2 2\\n1 1\\n2 2\") == 'YES'\nassert solution(\"2 2\\n1 1\\n1 2\") == 'NO'\nassert solution(\"1 100\\n10 10\") == 'YES'\nassert solution(\"1 1\\n1 1\") == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n3 4') == \"YES\"\nassert solution('6\\n3 4') == \"YES\"\nassert solution('6\\n3 4') == \"YES\"\nassert solution('6\\n3 4') == \"NO\"\nassert solution('6\\n3 4') == \"NO\"\n\n-----Time limit-----\n\n10 seconds.\n-----Memory limit-----\n\n64 MB.\n-----Subtasks-----\n\nSubtask #1: 100 points\n\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n * 2):\n        matrix.append([int(x) for x in input().split()])\n    \n    # print(matrix)\n    \n    # s = [[0] * n] * n\n    \n    # for i in range(n):\n    #     for j in range(n):\n    #         s[i][j] = matrix[i][j]\n    \n    # print(s)\n    \n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                continue\n            elif j > i:\n                continue\n            \n            elif matrix[i][j]!= matrix[j][i]:\n                print(\"NO\")\n                break\n    else:\n        print(\"YES\")"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 7\\n\"\n    \"8 4\\n\"\n    \"9 8\\n\"\n    \"5 6\\n\"\n    \"7 2\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"2 2\\n\"\n    \"2 1\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"2 2\\n\"\n    \"2 1\\n\"\n    \"1 1\\n\"\n) == \"YES\"\n\n\n\n-----Masha-----\nYou are given a positive integer $n$. You have to construct a square matrix of size $n \\times n$ by following the steps:\n\nWrite a positive integer $m$ and a matrix $A$ of size $m \\times m$ with integers from 1 to $m^2$.\nChoose $n - m$ nonnegative integers $a_1, \\ldots, a_{n - m}$ such that $a_i \\geq 2a_{i + m}$, where $i$ is a number from $1 \\ldots n - m$, and write $A$ in the following way:\n1. $A$ is the unit matrix of size $m \\times m$: $A[i][j] = 0$, for all $i, j \\in [1 \\ldots m]$, and\n2. $A$ is written so that:\n3. $A$ is symmetric: $A[i][j] = A[j][i]$ for all $i, j \\in [1 \\ldots m]$.\n4. $A$ is constructed such that its main diagonal contains $a_1, \\ldots, a_{n - m}$, and\n5. $A$ is constructed so that each row contains exactly one of the numbers $1, \\ldots, m^2$ with no repeats.\nYou can choose any strategy.\n\nFor example, if $n = 10$, then the following matrix is given:\n\n\n1 1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9\n10 10 10 10 10 10 10 10 10 10\nYou can choose $n = 10$, $m = 3$, and the numbers $a_1, \\ldots, a_{10 - 3}$ such that $a_i \\geq 2a_{i + 3}$ are $2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2,"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\n\nprint(\"The local tests are done. Click on 'Check' to review your solution and earn cool rewards!\")"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == 0\nassert solution('5\\n') == 1\nassert solution('6\\n') == 1\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(()))()\") == \"5\"\nassert solution(\"(()))\") == \"4\"\nassert solution(\"(((()))())\") == \"5\"\nassert solution(\"(()(()))()\") == \"4\"\nassert solution(\"((((((((((((((((((())))))))))))))))))))\") == \"0\"\n\"\"\"\n\n\n\n\"\"\"\n16. Ugly numbers\nUgly numbers are numbers whose only prime factors are 2, 3 or 5. The sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, \u2026 shows the first 11 ugly numbers. By convention, 1 is included.\n\nGiven a number n, the task is to find n\u2019th Ugly number.\n\nUgly numbers are numbers whose only prime factors are 2, 3 or 5.\n\nThe sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, \u2026 shows the first 11 ugly numbers.\n\nBy convention, 1 is included.\n\nInput Format:\nThe first line contains a single integer n.\n\nOutput Format:\nPrint a single line denoting the n\u2019th ugly number.\n\nSample Input:\n6\n\nSample Output:\n8\n\nExplanation:\nThe 6th ugly number is 8.\n\"\"\"\n\n\n\n\"\"\"\n14. Division\nA number d is called divisible by another number n if d % n = 0.\n\nGiven two integers a and b, the task is to count the number of divisors of a in the range [a, b].\n\nInput Format:\nThe first line contains an integer T, number of test cases.\nFor each test case, there are 2 lines. The first line contains an integer a and the second line contains an integer b.\n\nOutput Format:\nFor each test case, print the number of divisors of a in the range [a, b] modulo 10^9+7.\n\nSample Input:\n3\n2 5\n3 10\n1 100\n\nSample Output:\n2\n2\n2\n\nExplanation:\nTest Case 1: The divisors of 2 in the range [2, 5] are 2, 4, and 5, so the number of divisors is 2+2+2 = 6.\n\nTest Case 2: The divisors of 3 in the range [3, 10] are 3, 6, 9, and 10, so the number of divisors is 3+3+3+3 = 12.\n\nTest Case 3: The divisors of 1 in the range [1, 100] are 1, 2, 4, 5, 10, 20, 25, 50, and 100, so the number of divisors is 1+1+1+1+1+1+1+1+1+1 = 9.\n\"\"\"\n\n\n\n\"\"\"\n12. Fancy Sequence\nA sequence is called fancy if there are no two adjacent elements whose difference is 1. The difference of 2 and 1 is 1, the difference of 4 and 2 is 3 and so on. If there is some element which is part of the sequence then it will be marked as fancy. The problem is to count the number of fancy subsequences of length n.\n\nExample: Let the input be {4, 2, 1, 3, 5}. The output should be 3. Let the input be {2, 1, 4, 3, 5}. The output should be 3. Let the input be {1, 3, 5}. The output should be 0.\n\nInput Format:\nThe first line of the input contains an integer N (1 \u2264 N \u2264 100) \u2014 the length of the sequence.\nThe second line of the input contains N distinct integers from 1 to 100, each separated by a space.\n\nOutput Format:\nPrint the number of fancy subsequences of length N.\n\nSample Input:\n5\n4 2 1 3 5\n\nSample Output:\n3\n\nSample Input:\n5\n2 1 4 3 5\n\nSample Output:\n3\n\nSample Input:\n5\n1 3 5 2 4\n\nSample Output:\n0\n\nExplanation:\nThere are 3 subsequences of length 5: {1, 2, 3, 4, 5} {1, 3, 4, 5} and {3, 4, 5}. But none of them is fancy.\n\"\"\"\n\n\n\n\"\"\"\n10. Sorting\nGiven a sequence, find the length of the longest increasing subsequence (also called longest increasing sub-sequence) in it.\n\nExample:\n\nThe longest increasing subsequence of {5, 4, 3, 2, 1} is {1, 2, 3, 4, 5}.\nThe longest increasing subsequence of {5, 1, 3, 2, 4} is {1, 2, 3, 4, 5}.\nThe longest increasing subsequence of {1, 3, 2, 4, 5} is {1, 2, 3, 4, 5}.\nThe longest increasing subsequence of {1, 2, 3, 4, 5} is {1, 2, 3, 4, 5}.\n\nNote that the last answer is unordered.\n\nInput Format:\nThe first line of input contains an integer T denoting the number of test cases.\nThe first line of each test case contains an integer N.\nThe second line of each test case contains N space-separated integers.\n\nOutput Format:\nFor each test case, print the length of the longest increasing subsequence in the given sequence.\n\nSample Input:\n1\n7\n2 4 3 9 5 6 1\n\nSample Output:\n5\n\"\"\"\n\n\n\n\"\"\"\n11. String Transforms Into Another String\nGiven a string s and a string t, transform string t into string s by deleting and inserting characters. You can transform t into s in any way that maximizes the number of equal substrings of the string t in string s.\n\nAn equal substring of a string is a substring that remains the same after any number of deletions and insertions.\n\nReturn the maximum possible number of equal substrings of string t in string s after performing the above operations.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/subdomain-visit-count/\n\nExample 1:\n\nInput: s = \"abacb\", t = \"cba\"\nOutput: 3\nExplanation: The substrings of t that appear in s are \"c\", \"b\" and \"c\".\nAfter deleting \"c\" and inserting \"c\" in \"abacb\", we have \"aba\" in s, so the number of equal substrings is 3.\n\nExample 2:\n\nInput: s = \"abacb\", t = \"b\"\nOutput: 1\nExplanation: The substrings of t that appear in s are \"b\", \"c\", \"b\", \"a\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((())))\" == 4\nassert solution(\"((()))()\") == 4\nassert solution(\"((())())\" == 4\nassert solution(\"((()))()\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(()((()))())\") == 4\nassert solution(\"()((()())())\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('()))()') == '5'\nassert solution('(((()))())') == '4'\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\")(\") == \"0\"\nassert solution(\")()(\") == \"4\"\nassert solution(\"())(\") == \"0\"\nassert solution(\"((()))(\") == \"4\"\nassert solution(\"((())))(\") == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 0\nassert solution(\"(()())()\") == 0\nassert solution(\"(()()())()\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((((((((((((())))))))))))))\") == 5\nassert solution(\"()))())\") == 4\nassert solution(\"(((((((((((((())))))))))))))))\") == 0\nassert solution(\"(((((((((((((())))))))))))))\") == 4\n\nassert solution(\"((())((()())())())\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(((()))())\") == \"4\"\nassert solution(\"((()()))()\") == \"0\"\nassert solution(\"(((()))())\") == \"4\"\nassert solution(\"((()()))()\") == \"4\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(()()))()\") == 4\nassert solution(\"(((()))())\") == 4\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\",(((\") == 4\nassert solution(\"(((\") == 4\nassert solution(\"))()()((((((\") == 0\n\"\"\"\n\n\nfrom itertools import chain\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\nassert solution('100100100100100100100') == 9\nassert solution('152657') == 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == 4\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5678\") == 1\nassert solution(\"567\") == 1\nassert solution(\"678\") == 1\nassert solution(\"6\") == -1\nassert solution(\"7\") == 0\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5071') == 4\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\n\n-----\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"705\") == 1\nassert solution(\"5071\") == 4\nassert solution(\"1241367\") == -1\n\"\"\"\n\nimport math"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdedc\") == \"1 1 2 1 2 1 2 1\"\nassert solution(\"aaabbcbb\") == \"1 2 1 2 1 2 1 2 1\"\nassert solution(\"abcde\") == \"1 1 1 1 1 2 3\"\nassert solution(\"aaaaaaaaaaaaa\") == \"1 1 1 1 1 1 1 1 1 1 1\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aba') == 'aba'\nassert solution('abacbacba') == 'abacbacba'\nassert solution('abacbacbc') == 'abacbacba'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == '2', 'error in solution'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"eeeeee\") == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcdedc') == '1 1 1 1 1 2 3'\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1'\nassert solution('abcde') == '1 1 1 1 1'\nassert solution('aba') == '1 2 1 2'\nassert solution('bb') == '1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\n\na = \"abacbecfd\"\nb = \"aaabbcbb\"\nc = \"abcdedc\"\nd = \"abcde\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"1 1 1 1 2 3\"\nassert solution(\"abacd\") == \"1 1 2 1 1 2 3\"\nassert solution(\"abacbe\") == \"1 1 2 1 2 2 3\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\naaa''') == '1 1 1 1 1'\nassert solution('''6\naabcd''') == '1 1 1 2 1'\nassert solution('''10\nabacbeefd''') == '2 1 1 1 1 1 1 2 3 1'\n\"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == 2, \"WA\"\nassert solution(\"aaabbcbb\") == 2, \"WA\"\nassert solution(\"abcdedc\") == 3, \"WA\"\nassert solution(\"abcde\") == 1, \"WA\"\nassert solution(\"abcdef\") == 1, \"WA\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9\nabacbecfd''') == '2\nassert solution('''8\naaabbcbb''') == '2\nassert solution('''7\nabcdedc''') == '3\nassert solution('''5\nabcde''') == '1\nassert solution('''6\nabcdef''') == '1\n\nsolution(stdin.readlines())\n\n\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd') == 'NO'\nassert solution('abacaba') == 'YES'\nassert solution('qwerty') == 'YES'\nassert solution('qwerty') == 'YES'\nassert solution('qwerty') == 'YES'"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abba\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcda\") == \"YES\"\nassert solution(\"abcdba\") == \"YES\"\nassert solution(\"abacba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n\nassert solution(\"q\\nq\\nq\\n\") == \"YES\\nq\\nq\\nq\\n\"\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"abba\") == \"NO\"\nassert solution(\"abbacaba\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"a\") == \"NO\"\nassert solution(\"abacaba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nq"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('qwerty') == 'YES'\nassert solution('qwerty') == 'qwerty'\nassert solution('qwerty') == 'NO'\nassert solution('qwerty') == 'NO'\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\na\\naba\\nabacaba\\nba\\naba\\n') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\nassert solution('3\\nqwerty\\nqwerty\\nqwerty\\n') == 'YES\\nqwerty\\nqwerty\\nqwerty\\n'\nassert solution('2\\nqwerty\\nqwerty\\n') == 'NO\\n'\nassert solution('5\\na\\naba\\nabacaba\\nba\\naba\\n') == 'NO\\n'\nassert solution('5\\na\\naba\\nabacaba\\nba\\naba\\n') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"0\"\nassert solution(\"7 2\") == \"5\"\nassert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == '0'\nassert solution(\"5 100\\n12 34 55 43 21\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == '5'\nassert solution('3 1 2 1 3') == '0'\nassert solution('5 100') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"8 4\"\n) == \"5\"\nassert solution(\n    \"5 2\"\n) == \"0\"\nassert solution(\n    \"5 100\"\n) == \"5\"\nassert solution(\n    \"12 34 55 43 21\"\n) == \"5\"\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 1 3 1 2\") == \"0\"\nassert solution(\"5 100 12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\n\"\"\"\n\nimport sys\n\n_ = input()\narr = list(map(int, sys.stdin.readline().split()))\n_ = input()\nk = int(input())\n\nleft, right = 0, len(arr) - 1\nres = 0\nwhile left <= right:\n    if arr[left] <= k:\n        res += 1\n        left += 1\n    if arr[right] <= k:\n        res += 1\n        right -= 1\nprint(res)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == 5\nassert solution(\"5 2\\n3 1 2 1 3\") == 0\n\"\"\"\n\na = input().split()\nb = input().split()\na = [int(i) for i in a]\nc = a[0]\nc = int(a[1])\ni = 0\ncount = 0\nwhile i <= len(a) - 1:\n    if b[i] <= c:\n        c -= b[i]\n        count += 1\n    else:\n        break\nprint(count)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n2 3 4 1 2 5') == '5'\nassert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '7'\nassert solution('1 1') == '0'\nassert solution('4 4') == '12'\nassert solution('3 9') == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 0') == '1'\nassert solution('0 2') == '0'\nassert solution('4 4') == '12'\nassert solution('3 9') == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3', 'Wrong answer'\nassert solution('1 1') == '0', 'Wrong answer'\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcdef\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"YES\\n01010\"\nassert solution(\"bcaa\") == \"YES\\n10010\"\nassert solution(\"abcb\") == \"NO\"\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"YES\"\nassert solution(\"aabbccdd\") == \"YES\"\nassert solution(\"aabbccdda\") == \"YES\"\nassert solution(\"aabbccdca\") == \"NO\"\nassert solution(\"aabbccdcaa\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"abcdedc\") == \"YES\\n01011011\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcde\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"abcdedc\") == \"YES\\n01011011\"\nassert solution(\"abcde\") == \"NO\"\n\n\n-----"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n\"\"\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('abcef') == 'abcef'\nassert solution('abd') == 'abd'\nassert solution('abcdef') == 'abcdef'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"YES\"\nassert solution(\"aabbcc\") == \"YES\"\nassert solution(\"aabb\") == \"YES\"\nassert solution(\"aaabbb\") == \"NO\"\nassert solution(\"a\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('abac') == 'YES'\nassert solution('bb') == 'YES'\nassert solution('aaabbbb') == 'YES'\nassert solution('bbc') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\n\"\"\"\nimport sys\nimport re\nimport math\nimport collections\nfrom typing import DefaultDict, List, Set, Dict, Tuple, Optional\n\nDEBUG = False\ndata = sys.stdin.read().splitlines()"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('A 0') == -1\nassert solution('A A') == -1\nassert solution('A 1') == -1\nassert solution('A -1') == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '25'\nprint(solution('2 2'))\n\nassert solution('2 10') == '-1'\nprint(solution('2 10'))\n\nassert solution('20 20') == '-1'\nprint(solution('20 20'))\n\nassert solution('100 1000') == '-1'\nprint(solution('100 1000'))\n\nassert solution('10 10') == '25'\nprint(solution('10 10'))"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1) == 1\nassert solution(1, 2) == 2\nassert solution(2, 2) == 4\nassert solution(1, 5) == 5\nassert solution(2, 5) == 5\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 0\") == \"-1\"\nassert solution(\"0 1\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 3') == '-1'\nassert solution('1 1') == '-1'\nassert solution('2 6') == '-1'\nassert solution('3 2') == '10'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"6 1\") == 10\nassert solution(\"1 1\") == -1\nassert solution(\"4 3\") == -1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\nassert solution('5 15') == '-1'\nassert solution('10 100') == '100'\nassert solution('100 100') == '-1'\nassert solution('5 10') == '10'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2\\n1 1\") == \"YES\\n1 1\"\nassert solution(\"1 2\\n2 2\") == \"YES\\n1 1\"\nassert solution(\"1 2\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"26 6\\n\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\\n\") == \"NO\\n\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"9 4\\n\") == \"NO\\n\"\n\nprint(solution(\"8 3\\n\"))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n\") == \"NO\"\nassert solution(\"10 9\\n\") == \"YES\\n1 2 3 5 7 8 10\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"1 10\\n\") == \"NO\"\nassert solution(\"2 8\\n\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES\\n1'\nassert solution('1\\n1') == 'YES\\n1'\nassert solution('1\\n2') == 'NO'\n\nassert solution('3\\n3') == 'NO'\nassert solution('3\\n4') == 'YES\\n3'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\nprint(solution(\"26 6\"))\nprint(solution(\"8 3\"))\nprint(solution(\"1 1\"))\nprint(solution(\"9 4\"))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1\\n') == 'YES\\n1\\n', solution('1 1\\n1\\n')\nassert solution('9 4\\n1 2 3 4 5 6 7 8\\n') == 'NO\\n', solution('9 4\\n1 2 3 4 5 6 7 8\\n')\nassert solution('9 4\\n2 3 4 5 6 7 8\\n') == 'YES\\n1 1\\n', solution('9 4\\n2 3 4 5 6 7 8\\n')\nassert solution('9 4\\n2 1 5 4 3 6 7 8\\n') == 'NO\\n', solution('9 4\\n2 1 5 4 3 6 7 8\\n')\nassert solution('9 4\\n2 1 4 3 6 7 8\\n') == 'YES\\n1 1\\n', solution('9 4\\n2 1 4 3 6 7 8\\n')\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == 'YES\\n1 2 3'\nassert solution(\"3 1\") == 'YES\\n1'\nassert solution(\"7 9\") == 'NO'\n\"\"\"\n\nfrom collections import Counter\n\nn, k = [int(x) for x in input().split()]\nans = []\nc = Counter(list(range(1, n + 1)))\nfor i in range(k):\n    ans.append(sum(x for x in c.values() if x > 0))\n    c[ans[-1]] -= 1\nprint('NO' if sum(ans)!= n else 'YES' + '\\n' + '\\n'.join([str(x) for x in ans]))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\\n\"\nassert solution(\"3 5\") == \"NO\\n\"\nassert solution(\"100 200\") == \"NO\\n\"\nassert solution(\"7 3\") == \"NO\\n\"\nassert solution(\"9 9\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n6 5\n\"\"\") == 'YES'\nassert solution(\n    \"\"\"\n26 6\n\"\"\") == 'YES'\nassert solution(\n    \"\"\"\n9 4\n\"\"\") == 'NO'\nassert solution(\n    \"\"\"\n1 1\n\"\"\") == 'YES'\nassert solution(\n    \"\"\"\n1 2\n\"\"\") == 'NO'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 5\n\nprint(\"Successfully passed all test cases!\")"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == 3\n\nassert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == 5\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5') == '5'\nassert solution('1\\n10\\n-1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\n\n\"\"\"\n\nn, r = [int(i) for i in input().split(' ')]\nt = []\nfor i in range(n):\n    t.append([int(j) for j in input().split(' ')])\nd = dict(zip([i for i in range(n)], t))\n\nres = 0\nfor i in range(n):\n    res = max(res, (r - sum(d[i]) if sum(d[i]) > r else r - sum(d[i]) + len(d[i])))\n\nprint(res)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 4\n4 6\n10 -2\n8 -1\n\"\"\") == 3\nassert solution(\"\"\"5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n\"\"\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == 3\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == '3'\n\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1 3 3 3 3\") == \"YES\"\nassert solution(\"1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n\n\"\"\"\n\n\nclass Solution:\n    def is_palidromic(self, mat, n):\n        if len(set(mat))!= n:\n            return False\n        for i in range(n):\n            if mat[i][:]!= mat[i][::-1]:\n                return False\n        for j in range(n):\n            col = [mat[i][j] for i in range(n)]\n            if col!= col[::-1]:\n                return False\n        return True\n\n    def solution(self, stdin):\n        n = int(stdin.strip())\n        mat = [list(map(int, stdin.strip().split(' '))) for i in range(n)]\n        if self.is_palidromic(mat, n):\n            for i in range(n):\n                for j in range(n):\n                    print(mat[i][j], end=\" \")\n                print()\n            return\n        return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1 1\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"NO\\n\"\n\n-----Debug-----\n\npdb.set_trace()\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\\n\") == \"YES\\n10\"\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\") == \"NO\"\n\n\"\"\"\n\nn = int(stdin.readline())\n\nnumbers = sorted(list(map(int, stdin.readline().split())))\n\nresult = \"NO\"\n\nnums = []\nnums_unique = []\nfor n in numbers:\n    if n not in nums_unique:\n        nums_unique.append(n)\n        nums.append(n)"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n'\nassert solution('3 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n'\nassert solution('4 1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO\\n'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n'\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1 1 3 3 3 3\\n') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3\\n') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n') == 'NO'\nassert solution('1\\n10\\n') == 'YES\\n10'\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'YES'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('5 2') == 'NO'\nassert solution('10 -5') == 'YES'\nassert solution('10 -2') == 'YES'\nassert solution('10 0') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'YES'\nassert solution('4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('4 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\n\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\n\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n5 -2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"3 4\\n4 6\\n4 -2\\n1 3\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\") == \"YES\"\n\n'''\n\nimport sys\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\nassert solution('10 1 2\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\n\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\n\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nassert solution(\"7 1 5\\n3\") == \"NO\"\n\nassert solution(\"7 1 5\\n6\") == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nstdin = open(0)"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\n\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\n\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\n\nimport numpy as np"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result\nprint('Test Completed')\n\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 0\nassert solution(\"se\") == 1\n\"\"\"\n\ns = input()\nt = input()\n\nd = {}\nfor i in range(len(s)):\n    d[s[i]] = i\nfor i in range(len(t)):\n    try:\n        index = d[t[i]]\n    except KeyError:\n        print(0)\n        exit()\n    for j in range(index, len(s)):\n        d[s[j]] = j\n        if len(s[index:j+1]) == len(t):\n            print(len(s[index:j+1]))\n            exit()\nprint(len(s[index:j+1]))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 3\nassert solution(\"se\") == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('test') == 3\nassert solution('tst') == 3\nassert solution('tt') == 2\nassert solution('et') == 3\nassert solution('') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 3\nassert solution(\"\") == 0"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"e\") == 0\nassert solution(\"tt\") == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"aaaaa\") == 1\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('sdfasd') == 3\nassert solution('abcde') == 0\nassert solution('12345') == 0\n\"\"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('aa') == 0\nassert solution('aaab') == 1\nassert solution('abab') == 1\nassert solution('abab') == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"asdfasdf\") == 3\nassert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 2\n\"\"\"\n\ns, t = input().strip(), input().strip()\nd = {}\n\nfor i, c in enumerate(s):\n    d[c] = i\n\nfor c in t:\n    if c in d:\n        d.pop(c)\n\nprint(max(d.values()) + 1)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 3\nassert solution(\"ab\") == 1\nassert solution(\"sdfsf\") == 0\nassert solution(\"sdfsfasdf\") == 3\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"1.200000\"\n) == \"3 2\"\nassert solution(\n\"2.572479\"\n) == \"10 3\"\nassert solution(\n\"4.024922\"\n) == \"9 9\"\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n\nfrom math import floor, log10\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.2') == '1 9'\nassert solution('2.00') == '2 8'\nassert solution('2.03') == '2 9'\nassert solution('2.07') == '3 9'\nassert solution('3.4') == '5 5'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4.024922') == '9 9'\nassert solution('1.200000') == '3 2'\n\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3\\n\") == \"YES\"\nassert solution(\"6 3 3\\n\") == \"NO\"\nassert solution(\"10 4 3\\n\") == \"YES\"\nassert solution(\"8 5 3\\n\") == \"YES\"\n\n'''\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 3\\n1 2\\n4 1\\n1 3\") == \"YES\"\nassert solution(\"6 3 3\\n1 2\\n4 1\\n1 3\\n5 2\\n2 6\") == \"NO\"\nassert solution(\"6 2 3\\n1 2\\n4 1\\n1 3\\n5 2\\n2 6\") == \"YES\"\nassert solution(\"8 5 3\\n1 2\\n4 1\\n1 3\\n5 6\\n2 7\\n3 8\\n6 7\\n8 2\\n4 3\") == \"YES\"\nassert solution(\"10 4 3\\n1 2\\n4 1\\n1 3\\n5 6\\n2 7\\n3 8\\n6 7\\n8 2\\n4 3\\n5 10\\n3 9\\n7 10\\n9 1\") == \"NO\"\n\nimport re"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 3\\n') == 'YES\\n1 2\\n3 4'\nassert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nn, d, k = map(int, input().strip().split())\n\ng = [[] for i in range(n)]\n\nfor i in range(n - 1):\n    a, b = map(int, input().strip().split())\n    a, b = a - 1, b - 1\n    g[a].append(b)\n    g[b].append(a)\n\nimport collections\n\nq = collections.deque([[0, 0]])\nd = [None] * n\nwhile q:\n    p, dp = q.popleft()\n    for np in g[p]:\n        if d[np] is not None:\n            continue\n        ndp = dp + 1\n        if dp > d[np]:\n            continue\n        if ndp >= k:\n            continue\n        d[np] = ndp\n        q.append([np, ndp])"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"5 5 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 2\") == \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1100\") == \"1100\"\nassert solution(\"0011\") == \"1100\"\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"11101\") == \"110010\"\nassert solution(\"11110\") == \"100110\"\nassert solution(\"111110\") == \"011001\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100110\") == \"110010\"\n\"\"\"\n\n\nimport sys\nimport itertools\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11101') == '101010'\nassert solution('111001') == '101100'\nassert solution('101101') == '101110'\nassert solution('111010') == '101110'\nassert solution('111111') == '111010'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 6') == '101100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\nassert solution('5 3 6') == '01010100'"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 1') == '1100'\n\nassert solution('3 3 3') == '101100'\n\nassert solution('5 3 6') == '01010100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ba\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ac\") == \"abc\"\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom collections import Counter\n\nn = int(input())\ns = input()\nt = input()\n\ncount = Counter(s)"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"cb\"\nassert solution(\"ca\") == \"cac\"\nassert solution(\"bb\") == \"cbb\"\nassert solution(\"abcc\") == \"acbac\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"cb\") == \"cacbacb\"\nassert solution(\"aa\") == \"cacbacb\"\nassert solution(\"bc\") == \"abc\"\nassert solution(\"ca\") == \"acb\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"acb\"\n\nassert solution(\"bc\") == \"cba\"\n\nassert solution(\"ca\") == \"cab\"\n\nassert solution(\"cb\") == \"cab\"\n\nassert solution(\"cc\") == \"ccb\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"NO\"\nassert solution(\"bc\") == \"NO\"\nassert solution(\"ca\") == \"bb\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"acbbac\"\nassert solution(\"bb\") == \"acbbacb\"\nassert solution(\"\") == \"abc\"\nassert solution(\"a\") == \"ab\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"cab\"\nassert solution(\"aa\") == \"cac\"\nassert solution(\"ac\") == \"acbac\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"bbac\"\nassert solution(\"bb\") == \"cba\"\nassert solution(\"cc\") == \"cba\"\nassert solution(\"bc\") == \"bbac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cab\"\nassert solution(\"bb\") == \"acb\"\nassert solution(\"ac\") == \"cab\"\n\n-----Input-----\n4\na\nbc\n\n-----Output-----\nYES\nbacb\n\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3 1 2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\nassert solution('4 1 2') == '4 1 2'\nassert solution('5 1 -1') == '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n\") == '3 1 2'\nassert solution(\"5\\n1 1 1 1\\n\") == '1 2 3 4 5'\nassert solution(\"4\\n-1 2 2\\n\") == '-1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"1 2 3 4\"\nassert solution(\"7 3 2\") == \"3 1 4 2 7\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 -1 2\") == \"5 1 2 3 4\"\nassert solution(\"4 1 -1\") == \"1 2 3 4\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n-1 1\") == \"1 2\"\nassert solution(\"4\\n1 1 1 1\") == \"1 2 3 4\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1 2 3 4 5 6\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"-1\"\nassert solution(\"4\\n-1 2 2\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 -2 1') == '3 1 2'\nassert solution('5 -1 2') == '-1'\nassert solution('4 1 2') == '1 2 3 4'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 2\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 -1 2\") == \"4 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\n\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n\"\"\"\nimport sys\nimport logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s : %(levelname)s : %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S',\n    handlers=[logging.FileHandler('../log.txt'), logging.StreamHandler(sys.stdout)])"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"2\\n1 2\") == \"1\"\n\"\"\"\n\nn = int(input())\n\nlst = [int(i) for i in input().split()]\n\ndp = [0 for i in range(n)]\ndp[0] = abs(lst[0] - lst[1])\n\nfor i in range(1, n):\n    dp[i] = dp[i - 1] + abs(lst[i] - lst[i - 1])\n\nprint(dp[n - 1])\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 2 3 3\") == \"2\"\nassert solution(\"5\\n1 2 2 3 3\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == 5\nassert solution('4') == 0\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('0') == 0\n\"\"\"\n\nfrom sys import stdin\nimport math\nimport pdb"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"5\"\nprint(solution(\"10\"))\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('3') == '3'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5') == '5'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2\\n0 1 1\\n1 1 0'\n) == '0 1'\nassert solution(\n    '3\\n0 0 3\\n3 0 0'\n) == '3 3'\nassert solution(\n    '686\\n479 178 29\\n11 145 530'\n) == '22 334'\nassert solution(\n    '319\\n10 53 256\\n182 103 34'\n) == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\") == \"1 2\"\nassert solution(\"3 2 1\") == \"1 2\"\nassert solution(\"1 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"1 0 0\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1\\n1 1 0\") == \"0 1\"\nassert solution(\"1\\n0 0 3\") == \"0 1\"\nassert solution(\"3\\n0 0 3\") == \"0 3\"\nassert solution(\"3\\n5 5 5\") == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"0 22\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"1 119\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == (\"0 0\", \"0 0\")\nassert solution(\"1 1 1\") == (\"0 0\", \"0 0\")\nassert solution(\"3 0 3\") == (\"1 2\", \"2 1\")\nassert solution(\"3 1 1\") == (\"1 1\", \"1 1\")\nassert solution(\"3 1 2\") == (\"2 2\", \"0 0\")\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\nimport sys\nfrom collections import defaultdict, deque\nfrom typing import Deque, List, DefaultDict, Tuple\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 3\\n2 0 0\") == \"0 1\"\nassert solution(\"3\\n1 1 3\\n0 1 0\") == \"0 2\"\nassert solution(\"3\\n1 2 3\\n0 1 0\") == \"0 1\"\nassert solution(\"3\\n1 2 3\\n1 0 0\") == \"0 2\"\nassert solution(\"3\\n1 2 3\\n2 0 0\") == \"0 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n4 1 2 2 1 5 3\n''') == '3'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\n\nassert solution('''5\n4 1 2 2 1 5 3\n''') == '3'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"1 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 2 1 5 3') == \"3\"\nassert solution('7 1 2 2 1 5 3') == \"3\"\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == \"2\"\nassert solution('4 1 1 1') == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('7 5 4 3 2 1') == '2'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4 1 1 1') == '4'\nassert solution('1 1 1 1') == '4'\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 1 1 1\n''') == '4\\n4\\n1 1\\n2 2\\n3 3\\n'\n\n\"\"\"\n\nfrom collections import Counter\n\na = Counter(map(int, stdin.split('\\n')[1].split()))\nprint(a.most_common(1)[0][1])\nprint(*map(lambda x:''.join(map(str, x)), a.most_common(1)[0][0]))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"7\\n4 1 2 2 1 5 3\"\n) == \"3\\n7 7\"\nassert solution(\n\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\n) == \"2\\n3 4\"\nassert solution(\n\"4\\n1 1 1 1\"\n) == \"4\\n4 4\"\nassert solution(\n\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\n) == \"2\\n3 4\"\nassert solution(\n\"4\\n1 1 1 1\"\n) == \"4\\n4 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('4\\n0 0 0 0') == '4\\n4 4'\nassert solution('4\\n-1 -2 -3 -4') == '4\\n1 1'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\n\"\"\"\n\n\"\"\"\nThe idea is to sort the numbers first, then to merge them into one list.\nThe idea of the solution is to work through a matrix with the last row being the sorted list and to drop out the lowest number of the row in each step."
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"2 2 2\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 1 2\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n3 1 2') == 'NO'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nassert solution(\"4 1 5 3\") == \"YES\"\nassert solution(\"6 6 6 6 6 6\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 3 1 2') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"acbd\") == \"abdc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aaaa\") == \"aaaa\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"abdfec\") == 4\nassert solution(\"abcdef\") == 3\n\nstdin = input().splitlines()\nassert len(stdin) == 2\nassert len(stdin[0]) == 5\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"acd\") == -1\nassert solution(\"abdcef\") == 4\n\n\"\"\"\n\nimport sys\nimport unittest\nfrom collections import deque\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcde\") == \"abcdec\"\nassert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"accd\") == \"accd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(data) == expected\n\nprint('Hooray!')\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcd') == '0'\nassert solution('accd') == '-1'\nassert solution('abccd') == '4'\nassert solution('abcde') == '5'\nassert solution('abcdee') == '3 5 4 5'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"accd\") == -1\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abdcef') == 'abdcef'\nassert solution('abcdef') == 'abdcef'\nassert solution('abdcfe') == 'abdcef'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"S\"\nassert solution(\"ab\") == \"P\"\nassert solution(\"ac\") == \"S\"\nassert solution(\"abc\") == \"S\"\n\nassert solution(\"aaa\") == \"PPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nba\\n\\na\\n\\nabab\\n\\na\\n\\nab\\n\\naba\\n\\n\") == 'SPPSPSPS'\nassert solution(\"3\\n\\n\\na\\n\\n\\naa\\n\\n\\n\\n\\naa\\n\\n\\n\\na\") == 'PPSS'\nassert solution(\"2\\n\\n\\na\\n\\n\\n\\n\\naa\\n\\n\\n\\n\\naa\\n\\n\\n\\na\") == 'PS'\nassert solution(\"2\\n\\na\\n\\n\\naa\\n\\n\\n\\n\\n\\naa\\n\\n\\n\\na\") == 'PS'\nassert solution(\"5\\nba\\n\\na\\n\\nabab\\n\\na\\n\\nab\\n\\naba\\n\\n\") == 'SPSPSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"S\"\nassert solution(\"ababa\") == \"PPSS\"\nassert solution(\"aaaa\") == \"PS\"\nassert solution(\"ac\") == \"SP\"\nassert solution(\"abacab\") == \"SPSP\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"c\") == \"PS\"\nassert solution(\"abac\") == \"PPS\"\nassert solution(\"bc\") == \"PPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ba\") == \"SPPS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PPS\"\n\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"abc\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPS\"\nassert solution(\"abc\") == \"PS\"\n\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ababa\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPS\"\nassert solution(\"aa\") == \"PS\"\nassert solution(\"ac\") == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba') == 'PSPSPSPS'\nassert solution('3\\na\\naa\\naa\\na\\n') == 'PS'\nassert solution('2\\na\\nc\\n') == 'PS'\n\n\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPSS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPSS\"\nassert solution(\"aba\") == \"PPSS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\n\nassert solution(\"aba\") == \"PPS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in a:\n    if i >= 2 and i <= 4:\n        cnt += 1\nprint(cnt)"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '2'\n\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n-----\n\n\n'''\na = [2, 4, 6, 8, 10]\n\nfrom itertools import combinations\n\nfor i in range(1, len(a) + 1):\n    for j in list(combinations(a, i)):\n        print(j)\n\n\nprint(list(combinations(a, 3)))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''\n2 4 6 8 10\n'''\n) == '1'\n\nassert solution(\n'''\n2 6 8 10\n'''\n) == '0'\n\nassert solution(\n'''\n9 5 1 1 1\n'''\n) == '0'\n\nassert solution(\n'''\n3 5 5 5\n'''\n) == '2'\n\nassert solution(\n'''\n1 1 1 1\n'''\n) == '0'\n\nprint('Example 1:')\nprint('Output:', solution(\n'''\n2 4 6 8 10\n'''\n))\n\nprint('Example 2:')\nprint('Output:', solution(\n'''\n1 1 1 1\n'''\n))\n\nprint('Example 3:')\nprint('Output:', solution(\n'''\n1 1 1 1\n'''\n))\n\nprint('Example 4:')\nprint('Output:', solution(\n'''\n9 5 1 1 1\n'''\n))\n\nprint('Example 5:')\nprint('Output:', solution(\n'''\n3 5 5 5\n'''\n))\n\nprint('Example 6:')\nprint('Output:', solution(\n'''\n1 1 1 1\n'''\n))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nprint(solution(\"2 4 6 8 10\"))\n\"\"\"\n\nnums = [int(num) for num in stdin.split()]\nmin_num = min(nums)\nmax_num = max(nums)"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 8 10\") == '1'\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\") == '0'\nassert solution(\"5\\n1 1 1 1\") == '0'\nassert solution(\"4\\n1 1 1 1\") == '0'\nassert solution(\"5\\n1 1 1 1\") == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 1 0') == '0'\nassert solution('5\\n0 1 1 1') == '0'\nassert solution('5\\n0 1 1 1') == '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5 1 1 0 0 0') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5 1 1 0 0 0\") == \"0\"\nassert solution(\"4 1 1 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == 2\nassert solution('5\\n1 1 0 0 0') == 0\n\"\"\"\n\nimport sys\n\nassert sys.version_info >= (3, 7)  # make sure we have Python 3.7+\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1 1\\n') == 0\nassert solution('4\\n0 0 0 0\\n') == 0\nassert solution('5\\n1 1 1 1\\n') == 0\n\"\"\"\n\nn = int(input())\n\nlights = list(map(int, input().split()))\n\ndisturbance = 0\n\nfor i in range(1, n - 1):\n    if lights[i - 1] == 1 and lights[i + 1] == 1 and lights[i] == 0:\n        disturbance += 1\n\nprint(disturbance)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 0 0 0') == '0'\nassert solution('3\\n1 1 1') == '0'\nassert solution('5\\n1 1 0 1 1') == '2'\nassert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 1 1') == '0'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1'\nassert solution('''6\n6 90 12 18 30 18''') == '4'\nassert solution('''3\n1 5 3''') == '2'\nassert solution('''4\n1 2 3 4''') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6 90 12 18 30 18') == '4'\n\"\"\"\n\na = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 5 6 8\\n6 90 12 18 30 18') == '2'\nassert solution('4 2 5 6 8\\n6 90 12 18 30 18') == '4'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''6\n6 90 12 18 30 18\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3 4 5\") == 1\nassert solution(\"6 90 12 18 30 18\") == 4\n\nimport sys\nassert solution(sys.stdin.read()) == result\n\n----\n3 1 4 1 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 90 12 18 30 18\") == \"4\"\n\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_simple(self):\n        self.assertEqual(solution(\"6 90 12 18 30 18\"), \"4\")\n        self.assertEqual(solution(\"6 12 18 30 18\"), \"4\")\n        self.assertEqual(solution(\"6 36 12 18 30 18\"), \"4\")\n        self.assertEqual(solution
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '4', 'Test #1'\n\nassert solution('4\\n3 2 1 4') == '0', 'Test #2'\n\nassert solution('7\\n1 7 2 6 3 4 5') == '4', 'Test #3'\n\nassert solution('7\\n8 3 6 5 2 1') == '1', 'Test #4'\n\nassert solution('9\\n1 9 2 8 3 4 5 6 7') == '7', 'Test #5'"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\") == \"1\"\n\nassert solution(\"2\\n1\\n1\") == \"2\"\n\nassert solution(\"2\\n3\\n4\") == \"2\"\n\nassert solution(\"1\\n100\") == \"1\"\n\nassert solution(\"2\\n1\\n1\") == \"2\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\") == '1'\nassert solution(\"1\\n2\\n2\") == '2'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = list(map(int, sys.stdin.readline().split()))\n\nd = {}\n\nfor i in a:\n    if d.get(i, False):\n        d[i] += 1\n    else:\n        d[i] = 1\n\nprint(min(d.values()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '2'\nassert solution(\"5\\n1 2 3 4 5\") == '2'\nassert solution(\"4\\n1 1 2 2\") == '1'\nassert solution(\"7\\n1 2 3 4 5 6 7\") == '2'\nassert solution(\"1\\n100\") == '1'\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\n\n---\n\nclass Solution:\n    def minPockets(self, a: list) -> int:\n        n = len(a)\n        a.sort()\n        a = [x for x in set(a)]\n        result = 0\n        for i in a:\n            result += 1\n            left = a[:a.index(i)]\n            right = a[a.index(i):]\n            result += max(len(left) + len(right), 0)\n        return result\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('1 2') == 2\nassert solution('1 2 3') == 3\nassert solution('1 2 3 4') == 3\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\nassert solution(\"1\\n100\") == 1\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n0 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\n\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('10 10\\n0 0 0 0 0 0') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == '2'\nassert solution(\"10 3\") == '-1'\nassert solution(\"10 10\") == '0'\nassert solution(\"5 10\") == '3'\nassert solution(\"6 2\") == '3'"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n0 0 1 1\\n\") == \"2\"\nassert solution(\"5 3\\n0 0 0 0 1\\n\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"1 2\\n1 0\\n\") == \"1\"\nassert solution(\"2 3\\n0 1 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"10 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_stdout\n\"\"\"\n\nn, r = map(int, input().split())\narr = [int(c) for c in input().split()]\n\nh_cnt = 0\nfor i in range(len(arr)):\n    if arr[i] == 1:\n        h_cnt += 1\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 0 1 0\") == \"2\"\nassert solution(\"6 2\\n0 0 1 0 0 1\") == \"3\"\nassert solution(\"5 10\\n0 0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n1 0 0 0 1') == '2'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('5 10\\n0 0 0 0 0 1') == '-1'\nassert solution('10 3\\n1 1 1 1 0 0 0 0 0 0') == '1'"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '2'\nassert solution('10 3\\n0 0 0 0 0 0') == '-1'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 0 0 0 1') == '3'\nassert solution('0 0 0 0 0') == '0'\nassert solution('1 1 0 1 1') == '-1'\nassert solution('0 0 0 0 0') == '0'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 2\") == \"3\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"3\\n\"\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 3\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"3\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3''') == '''3'''\n\nassert solution('''2''') == '''1'''\n\nassert solution('''1''') == '''0'''\n\nassert solution('''3''') == '''3'''\n\nassert solution('''3\n2\n1\n3\n3\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n3\n1\n2\n1''') == '''28'''"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == '3'\nassert solution(1) == '1'\n\"\"\"\n\nfrom math import ceil, sqrt\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('100') == '64'\n\nprint('All tests passed.')"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 3\n'''\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('1\\n') == '0'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(((()))())\") == 6\n\nassert solution(\"()())()\") == 0\n\nassert solution(\")(\") == 0\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''(((())\n''') == 3\nassert solution('''()()()\n''') == 0\nassert solution('''()())(\n''') == 0\nassert solution(''')(()\n''') == 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(((())') == 3\nassert solution('()()()') == 0\nassert solution(')(') == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()\") == 1\nassert solution(\"(()\") == 0\nassert solution(\"()()\") == 2\nassert solution(\"()(\") == 0\nassert solution(\"((()\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"())\") == 0\nassert solution(\"(())\") == 1\nassert solution(\"())()\") == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()\") == 1\nassert solution(\"()()\") == 2\nassert solution(\"(()\") == 0\n\nassert solution(\"((((((())))((())))\"\n    == 0\nassert solution(\"((((((())))((())))\"\n    == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()((()))\") == 2\nassert solution(\"(())(())\") == 3\nassert solution(\"()(((()))\") == 3\nassert solution(\"()()(()())\") == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((()))\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(((()))\") == 2\nassert solution(\"((())\") == 0\nassert solution(\"((()))(())(()(()()))\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()())\") == 0\nassert solution(\"(((()))\") == 3\nassert solution(\"(()())()\") == 3\nassert solution(\"())\") == 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('(((())') == 3\nassert solution('())') == 0\n\"\"\"\nimport re\n\nn = int(input())\ns = input()\nres = 0\nfor i in range(n):\n    if s[i] == '(':\n        res += 1\nprint(res)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sdfasd') == 3\nassert solution('s') == 0\nassert solution('asdf') == 3\nassert solution('asd') == 1\nassert solution('fasd') == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaa') == 0\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba', 'bb') == 3, \"First\"\nassert solution('baaba', 'ab') == 2, \"Second\"\nassert solution('abcde', 'abcde') == 0, \"Third\"\nassert solution('asdfasdf', 'fasd') == 3, \"Fourth\"\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!');\n\nprint(solution(stdin))\n\"\"\"\n\ns = stdin.split(\"\\n\")[0]\nt = stdin.split(\"\\n\")[1]\n\nlength_s = len(s)\nlength_t = len(t)\ni, j = 0, 0\n\nmax_len = 0\nwhile i < length_s:\n    if s[i] == t[j]:\n        max_len = max(max_len, j + 1)\n        i += 1\n        j += 1\n    elif j > 0:\n        j = j - 1\n    else:\n        i += 1\n\nprint(max_len)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('baaba') == 3\nassert solution('asdfasdf') == 3\nassert solution('abcde') == 0\nassert solution('fasd') == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabebcdd\") == \"3\"\nassert solution(\"abebcdd\") == \"2\"\nassert solution(\"ebcdd\") == \"0\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 1\nassert solution('abab') == 2\nassert solution('abcdef') == 1\nassert solution('abcde') == 0\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"\") == 0\nassert solution(\"testtest\") == 0\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bbaba') == 3\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\nassert solution(\"\") == 0"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd') == 0\nassert solution('abcdee') == 1\nassert solution('abcdeeee') == 2\nassert solution('abcdef') == 0\nassert solution('abcdefgh') == 1\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == '2'\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nprint(solution(\"1 2 1 1\")) # 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"3 2 4 1\") == \"10\"\nassert solution(\"0 0 0 0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\"\n\nimport math\n\na, b, c, d = map(int, input().strip().split())\nprint(math.ceil(a/c) * math.ceil(b/d))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 4 4 6 7\") == 2\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\nassert solution('8\\n9 1 4 4 6 7') == '2'\nassert solution('10\\n9 1 4 4 6 7') == '1'\n\nimport sys; print(solution(sys.stdin.readlines()))\n\n\"\"\"\nN = int(input())\narr = list(map(int, input().split()))\n\ncount = 0\nfor i in range(1, len(arr)):\n    if arr[i] <= arr[i-1]:\n        count += 1\n\nprint(count)\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n9 1 4 4 6 7') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 1 4 4 6 7') == '2'\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n\") == \"1\"\nassert solution(\"5\\n1 5 2 3 4\\n\") == \"3\"\nassert solution(\"6\\n9 1 4 4 6 7\\n\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\nimport sys\nfrom itertools import accumulate\n\na = [int(x) for x in sys.stdin.readline().split()]\nn, h, l, r = a[0], a[1], a[2], a[3]\na = [int(x) for x in sys.stdin.readline().split()]\nsleep_schedule = list(accumulate(a))\nmax_sleep_times = 0\n\nfor i in range(n):\n    if i!= 0 and i % 2 == 0:\n        sleep_schedule = [x + (i + 1) % 2 for x in sleep_schedule]\n    if sleep_schedule[i] >= h - l:\n        max_sleep_times += 1\n\nprint(max_sleep_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ncurr_time = 0\nans = 0\nfor i, ai in enumerate(a):\n    if i > 0:\n        ans += 1\n        curr_time += (ai - a[i - 1])\n    if curr_time >= l and curr_time <= r:\n        ans += 1\n        curr_time += (r - a[i])\n\nprint(ans)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\nassert solution('2 2 2 1\\n1 1 1 1 1') == '1'\nassert solution('7 24 21 23\\n16 17 14 20 20 11 22\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '3'\nassert solution('7 24 21 23\\n16 17 14 20 20 11 22\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 24 21 23''') == '3'\n'''\n7,24,21,23\n0,1,1,2\n0,1,2,3\n'''\n\nassert solution('''7 24 21 23''') == '3'\n'''\n7,24,21,23\n0,1,1,2\n0,1,2,3\n'''\n\nassert solution('''5 8 7 10 11''') == '1'\n'''\n5,8,7,10,11\n0,1,1,2,3\n0,1,2,3,4\n'''\n\nassert solution('''1 1 1 1 1 1 1''') == '0'\n'''\n1,1,1,1,1,1,1\n0,1,2,3,4,5,6\n'''\n\nassert solution('''1 1 1 1 1 1 1''') == '0'\n'''\n1,1,1,1,1,1,1\n0,1,2,3,4,5,6\n'''"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nimport sys\n\nn, h, l, r = [int(i) for i in sys.stdin.readline().strip().split(' ')]\na = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n\ngood = 0\ni = 0\nwhile i < n:\n    if l <= a[i] <= r:\n        good += 1\n    i += 1\n\nprint(good)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 24 21 23''') == '''3'''\nassert solution('''7 6 7 10''') == '''0'''\nassert solution('''7 12 13 19''') == '''2'''\nassert solution('''7 9 9 10''') == '''1'''\n\nassert solution('''6 6 6 9''') == '''1'''\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == 3\n\"\"\"\n\n\"\"\"\nsolution for BOG\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = [int(x) for x in input().split()]\n\nres = 0\nfor i in range(n):\n    res += (min(h - (a[i] - 1), r) - max(l, a[i] - 1))\n\nprint(res)\n\n\"\"\"\nsolution for AF\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nres = 0"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 24 21 23\") == 3\nassert solution(\"16 17 14 20 20 11 22\") == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split(' ')]\nc = 0\ncount = 0\na.sort()\nfor i in range(1,n):\n    if a[i] <= a[i-1]*2:\n        count +=1\n    else:\n        break\nprint(n - count)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\nassert solution('5\\n4 7 12 100 150 199') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 2 10 100 250\\n') == 1\nassert solution('5 2 10 100 250\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10 50 110 250') == '1'\nassert solution('5 10 50 110 250') == '3'\nassert solution('6 4 7 12 100 150 199') == '3'\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"5\\n1 2 5 6 7 10\\n\") == \"1\\n\"\nassert solution(\n\"6\\n4 7 12 100 150 199\\n\") == \"3\\n\"\nassert solution(\n\"4\\n4 7 12 100 150 199\\n\") == \"1\\n\"\n\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == 4\nassert solution('5\\n2 10 50 110 250\\n') == 1\nassert solution('6\\n4 7 12 100 150 199\\n') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '4'\nassert solution('2 3 4 5') == '6'\nassert solution('3 4 5 6') == '7'\nassert solution('3 4 5 7') == '8'\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('a\\n') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\n\"\"\"\n\n\nfrom itertools import combinations\nfrom math import lcm"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 11 3 7\") == '1 4'\nassert solution(\"6 2 11 3 7\") == '2 4'\nassert solution(\"10 5 20 5 3\") == '1 4'\nassert solution(\"10 11 20 11 3\") == '1 4'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10\\n2\\n3\\n5\") == '1\\n2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 11 3 7\") == '1 2'\nassert solution(\"5 2 11 3 7\") == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\n\"\"\"\n\n\"\"\"\n\nNote.\n\nThe least common multiple (LCM) of two integers $a$ and $b$ is the smallest integer greater than $0$ such that:\n\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"110110\") == \"110120\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('121') == '021'\nassert solution('000000') == '001122'\nassert solution('211200') == '211220'\nassert solution('120110') == '120120'\n\nimport sys\nassert sys.stdin.readline().rstrip() == '121'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('120110') == '120120'\n\nassert solution('010010') == '101010'\n\nassert solution('011010') == '101010'\n\nassert solution('101010') == '101010'\n\nassert solution('111011') == '111010'"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('121') == '021'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('121') == '021'\n\nassert solution('101') == '11010'\n\nassert solution('0111') == '11110'\n\nassert solution('1211') == '21120'\n\nassert solution('11110') == '121110'"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(123) == \"012\"\nassert solution(1234) == \"1023\"\nassert solution(12345) == \"10111\"\nassert solution(123456) == \"101111212\"\nassert solution(1234567) == \"1011112121313\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12010') == '120120'\nassert solution('11010') == '120111'\nassert solution('110110') == '120110'\nassert solution('1110110') == '1210100'\nassert solution('11101110') == '1210110'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('120110') == '120120'\nassert solution('211200') == '211220'\nassert solution('110110') == '110120'\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211200\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211220'\n\n'''\n\nn = int(input())\nstring = input()\ns = '0'*(n//3)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n3\\n\") == '4'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3\\n4\\n2\\n5\\n1\\n6\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"6\"\nassert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n1\\n2\\n3\\n4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3\\n4\\n2\\n5\\n2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n3\\n\") == '4'\nassert solution(\"6 1\\n3\\n\") == '6'\n\n---Problem---\nA sequence of integers is said to be a scad sequence if the difference between any two consecutive elements is greater than 1.\nFor example, [2, 4, 3, 7, 4, 10] is a scad sequence while [1, 4, 3, 7, 4, 10] is not.\nLet X(n) be the number of scad sequences that are of length n.\nFor example, X(5) = 7.\nFind X(10^7).\n\n-----Constraints-----\n 1 \\leq n \\leq 10^6\n\n-----Input-----\nn = 10^7\n\n-----Output-----\nX(10^7) = 2528104501986751\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1\\n3') == '4'\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\n\na = [int(x) for x in stdin.split()][1:m + 1]"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\nimport math\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2\\n\") == \"4\"\nassert solution(\"4 5\\n1\\n\") == \"0\"\nassert solution(\"4 5\\n2\\n3\\n\") == \"0\"\nassert solution(\"4 5\\n2\\n1\\n3\\n\") == \"4\"\nassert solution(\"4 5\\n2\\n3\\n4\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\") == \"4\"\nassert solution(\"4\\n3\\n5\") == \"0\"\nassert solution(\"4\\n3\\n5\\n2\") == \"0\"\nassert solution(\"4\\n3\\n5\\n2\\n7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1\\n2\\n3\\n4\") == \"5\"\nassert solution(\"4 2\\n1\\n2\\n3\\n4\\n5\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"5 6 -3\") == \"3\"\nassert solution(\"3 3 3\") == \"0\"\n\"\"\"\n\nimport math\n\n_, K, D = map(int, input().split())\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4') == 2\n\n\"\"\"\n\nfrom math import inf\nimport sys\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\nassert solution(\"1 1 1\\n\") == \"0\"\n\nassert solution(\"10 2 2\\n\") == \"5\"\nassert solution(\"10 1 2\\n\") == \"5\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import product, chain\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2 4\\n') == 2\n\"\"\"\n\nimport sys\n\nX, K, D = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"0 5 5\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n\nX, K, D = map(int, stdin.readline().split())"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n\nX, K, D = input().split(' ')\n\nX = int(X)\nK = int(K)\nD = int(D)\n\nprint(min(abs(X - D), abs(X + D)))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nassert solution(\"2128506\") == \"3\"\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 10\nassert solution(2128506) == 3\n\n\nimport timeit\navg_time = 0.\ntests = ['11', '14', '61441', '2128506']\nfor t in tests:\n    avg_time += timeit.timeit(lambda: solution(t), number=10000)\nprint(f'avg_time: {avg_time / len(tests)}')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"61441\") == 2\nassert solution(\"2128506\") == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"2128506\") == 3\nassert solution(\"87613\") == 5\nassert solution(\"124530\") == 4\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 2\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"61441\") == 2\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == 2\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('571576') == 10\nassert solution('61441') == 2"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\n\nprint(a ** 2 + a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5') == 25\n\nprint(solution(''))\nprint(solution('5'))\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 27\n'''\n\na = int(input())\nprint(a**3)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 27\n-------------------\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '27'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 27\n-----\n\nimport sys\na = int(input())"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\nprint(\"all tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == 1\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == 1\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\nprint('Hint #1: Divide the number by 11, take the remainder, and test it against 11. If the remainder is not equal to 11, the number is divisible by 11, so output 1. Otherwise, the number is not divisible by 11, so output 0. Then, output 1 if the number is divisible by 7, 0 if it is not.')\nprint('Hint #2: You can either use a classical algorithm, or use the following very clever trick:')\nprint('If the number is divisible by 11, then it is divisible by 7.')\nprint('If the number is divisible by 7, then it is divisible by 11.')\nprint('If the number is divisible by 11 or 7, then it is divisible by both.')\nprint('Hint #3: If you are interested in whether the number is divisible by 11, check it against the variable divisible11.'\nprint('If the remainder of the number is not equal to divisible11, then the number is not divisible by 11.')\nprint('Hint #4: If you are interested in whether the number is divisible by 7, check it against the variable divisible7.'\nprint('If the remainder of the number is not equal to divisible7, then the number is not divisible by 7.')\nprint('Hint #5: If you are interested in whether the number is divisible by 11 or 7, check it against the variable divisible.'\nprint('If the remainder of the number is not equal to divisible, then the number is neither divisible by 11 nor 7.')\nprint('Hint #6: You could use a classical algorithm for the first test, but it is only applicable to the number 3, 5, and 7.')\nprint('You can use the following trick for the first test:')\nprint('If the number is divisible by 3, then the number is divisible by 7.')\nprint('If the number is divisible by 5, then the number is divisible by 3 and by 7.')\nprint('If the number is divisible by 3 and 5, then the number is divisible by 3, 5, and 7.')\nprint('Hint #7: Similarly, you could use a classical algorithm for the second test, but it is only applicable to the number 2 and 4.')\nprint('If the number is divisible by 2, then the number is divisible by 4.')\nprint('If the number is divisible by 2 and 4, then the number is divisible by 2, 4, and 7.')\nprint('If the number is divisible by 4, then the number is divisible by 2 and by 7.')\n\nprint('Input #1: 13')\nprint('Output #1: 1')\n\nprint('Input #2: 927')\nprint('Output #2: 1')\n\nprint('Input #3: 48')\nprint('Output #3: 0')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nprint('All tests passed.')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 5 3 1') == '4'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(4) == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    if a[i] == 1:\n        a[i] = 2\n    elif a[i] == 2:\n        a[i] = 5\n    elif a[i] == 3:\n        a[i] = 1\n    elif a[i] == 5:\n        a[i] = 3\n    elif a[i] == 4:\n        a[i] = 4\n\nfor i in range(n):\n    if a[i] == 2:\n        a[i] = 5\n    elif a[i] == 5:\n        a[i] = 2\n\nprint(a)"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 5 1\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('2\\n1 2') == ''\nassert solution('4\\n1 2 3 4') == ''\nassert solution('4\\n1 2 3 5') == ''"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5 3 1') == 4\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5 3 1') == 4\n\n-----\n\nfrom collections import deque\n\nn = int(input())\n\na = deque(map(int, input().split()))\n\na.appendleft(0)\na.append(0)\n\nprint(max(map(lambda x: abs(x[0] - x[1]), list(zip(a, a[1:])))))\n\n\n-----\n\nimport heapq\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nheapq.heapify(a)\nprint(heapq.nlargest(2, a)[-1])\n\n\n-----\n\nfrom itertools import count, islice\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nfor i in islice(count(0), n):\n    print(a[i])\n\n\n-----\n\nfrom itertools import accumulate, count\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(count(), lambda x: x, 0))))\n\n\n-----\n\nfrom itertools import accumulate, count\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(count(), lambda x: x, 0))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 5 1\") == 4\n\nassert solution(\"5 2 4 1\") == 3\n\nassert solution(\"3 1 2\") == 1\n\nprint(solution(\"7 5 8 9 2 1 3\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n2 5 3 1''') == 4"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 6\nassert solution('1 2') == 3\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 5 1') == '4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\n\n-----Code-----\n```python\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nwhile True:\n    try:\n        text = stdin.readline()\n        if text == '\\n':\n            break\n        text = text.split()\n        n = int(text[0])\n        k = int(text[1])\n        count = 0\n        for i in range(1, k + 1):\n            for j in range(i, k + 1):\n                if i * j == n:\n                    count += 1\n        stdout.write(str(count) + '\\n')\n    except:\n        break\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 999997 33\\n9 1\\n9 1\") == \"999999733\\n1\\n1\"\nassert solution(\"8 999997 33\\n9 1\\n9 1\") == \"999999733\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 2\\n3\\n4 5\\n') == '1'\nassert solution('1 1\\n1 1\\n3\\n4 5\\n') == '1'\nassert solution('1 2\\n1 1\\n1 1\\n3\\n4 5\\n') == '1'\nassert solution('1 2\\n1 2\\n2\\n4 5\\n') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\") == \"8\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\nSolution:\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n\nfrom collections import Counter\nimport sys\nimport pprint\n\nassert sys.stdin.read() == \"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2\\n1') == '2'\nassert solution('1 2\\n2') == '0'\nassert solution('1 2\\n2\\n2') == '0'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 1 2\\n0 1\") == \"1\"\nprint(\"Test 1 passed\")\nassert solution(\"4 2\\n2 1 2\\n0 1\") == \"1\"\nprint(\"Test 2 passed\")\nassert solution(\"4 2\\n2 1 2\\n0 1\") == \"1\"\nprint(\"Test 3 passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"4 2\\n1 2 2 1\\n1 2\\n0 1\\n0 2\") == \"4\"\nassert solution(\"4 3\\n1 2 1 2\\n0 1\\n0 2\\n0 3\") == \"7\"\n\n-----------------------\nimport sys\n\nfrom collections import Counter, defaultdict\n\nn, m = map(int, sys.stdin.readline().split())\n\ngroups = defaultdict(set)\nfor i in range(m):\n    x, y, z = map(int, sys.stdin.readline().split())\n    groups[x].add(y)\n    groups[x].add(z)\n    groups[y].add(z)\n    groups[y].add(x)\n    groups[z].add(x)\n    groups[z].add(y)\n\nlights = {}\nfor i in range(1, n + 1):\n    lights[i] = {i}\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        a = groups[i + 1].intersection(groups[j + 1])\n        if len(a) % 2:\n            lights[i + 1].update(a)\n            lights[j + 1].update(a)\n        else:\n            lights[i + 1] |= a\n            lights[j + 1] |= a\n\ntotal = 0\nfor i in range(1, n + 1):\n    total += len(lights[i])\nprint(total)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\nprint(\"Test 1 successful.\")\n\nassert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\nprint(\"Test 2 successful.\")\n\nassert solution(\"5 5\\n1 2 3 4 5\\n0 1\\n1 0\\n0 0\\n0 1\\n\") == \"0\"\nprint(\"Test 3 successful.\")\n\nassert solution(\"5 5\\n1 2 3 4 5\\n0 1\\n1 0\\n0 0\\n0 1\\n\") == \"0\"\nprint(\"Test 4 successful.\")\n\nassert solution(\"6 6\\n1 2 3 4 5 6\\n0 1\\n1 0\\n0 0\\n0 1\\n0 1\\n\") == \"0\"\nprint(\"Test 5 successful.\")"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\n\"\"\"\nfrom collections import defaultdict, Counter\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n\nfrom collections import Counter\n\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        return (len(s) % 2 == 0 and Counter(s) == Counter('01')) or (len(s) % 2 == 1 and Counter(s) == Counter('11'))\n\n    def check(self, n: int, m: int, k: list, s: list, p: list) -> int:\n        ans = 0\n        for i in range(n):\n            cnt = 0\n            for j in range(m):\n                if s[i] == '1' and self.isValid(str(k[j]) + str(i)):\n                    cnt += 1\n            if cnt % 2 == p[i]:\n                ans += 1\n        return ans\n\n    def totalNumberOfWays(self, n: int, m: int, k: list, s: list, p: list) -> int:\n        if not self.isValid(''.join(map(str, k))):\n            return 0\n        return self.check(n, m, k, s, p) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3 4 9 0) == 5\n\"\"\"\n\na, b, h, m = [int(x) for x in stdin.split()]\n\nang = (m*12+h)*60\nh = ang//360\nm = ang%360//60\nprint(a*m + b*h)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 9 0') == '5.000000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 6 1\") == \"4.0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == output\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('3 5 9 0') == '10.00000000000000000000'\nassert solution('3 3 9 0') == '13.00000000000000000000'\nassert solution('3 3 1 0') == '13.00000000000000000000'\nassert solution('3 2 9 0') == '12.00000000000000000000'\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(r\"3 4 9 0\") == r\"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 1 1\") == \"6\"\n\nprint(solution(\"5 4\\n1 4 5 60 4\"))\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"6\"\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == 8\nassert solution(\"3 1\\n1 1 1\\n\") == 6\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\\n\") == 97\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\nassert solution(\"3 1\\n1 1 1\\n\") == \"6\"\n\n\"\"\"\nimport math\nfrom bisect import bisect_left\nfrom collections import Counter, defaultdict, deque\nfrom functools import lru_cache\nfrom itertools import combinations, permutations\nfrom math import inf\nfrom typing import Any, Dict, List, Optional, Set, Tuple\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \"\"\"O(NlogN) / O(1)\n        \"\"\"\n        n, m = map(int, stdin.splitlines()[:2])\n        a = list(map(int, stdin.splitlines()[2:]))\n\n        cnt = Counter(a)\n\n        left, right = 0, n - 1\n        mid = math.ceil(n / 2)\n\n        while True:\n            if left >= mid and right <= mid:\n                break\n            if left >= mid:\n                left -= 1\n            elif right <= mid:\n                right += 1\n            else:\n                if a[left] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif a[right] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif a[left] < m < a[right]:\n                    return f\"{left + 1} {right + 1}\"\n                else:\n                    left += 1\n                    right -= 1\n        left, right = 0, n - 1\n        left_a, right_a = a[left:mid], a[mid:right+1]\n        left_cnt, right_cnt = cnt[a[left]], cnt[a[right]]\n        while True:\n            if left_cnt <= right_cnt:\n                if left_a[-1] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif right_a[0] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif left_a[-1] < m < right_a[0]:\n                    return f\"{left + 1} {right + 1}\"\n                else:\n                    left += 1\n                    right -= 1\n                    left_cnt += cnt[a[left]]\n                    right_cnt += cnt[a[right]]\n                    left_a, right_a = a[left:mid], a[mid:right+1]\n            else:\n                if left_a[0] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif right_a[-1] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif left_a[0] < m < right_a[-1]:\n                    return f\"{left + 1} {right + 1}\"\n                else:\n                    left += 1\n                    right -= 1\n                    left_cnt += cnt[a[left]]\n                    right_cnt += cnt[a[right]]\n                    left_a, right_a = a[left:mid], a[mid:right+1]\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '7\\n2\\n1 4'\nassert solution(\"3 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '7\\n2\\n3 2'\nassert solution(\"3 3\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '0\\n0'\nassert solution(\"1 0\\n1000000\\n\") == '0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\\n\"\nassert solution(\"5 4 2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n1 4\\n', 'wrong result'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n', 'wrong result'\nassert solution('1 0\\n1000000\\n') == '0\\n0\\n', 'wrong result'"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6'\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5''') == '7'\nassert solution('''1 0\n1000000''') == '0'\nassert solution('''5 5\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5''') == '7'\nassert solution('''1 0\n0''') == '0'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\nassert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\nassert solution(\"az\\naa\\nbad\\nbabc\") == \"No\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\nassert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\n\n\"\"\"\nfrom typing import List, Set"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\"\nassert solution(\"az\\naa\\nbad\\nbabc\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4\") == \"2 1\"\nassert solution(\"5 4\") == \"2 1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"1 0\") == \"0 0\"\nassert solution(\"100000 100000\") == \"0 0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Dict, Union\n\nInput = List[Union[int, Tuple[int, int]]]\nOutput = int\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\n\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6\\n2\\n4 1'\n\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5\n''') == '7\\n2\\n3 2'\n\nassert solution('''1 0\n1000000\n''') == '0\\n0'\n\n\n\n\n-----Explanation-----\n\nIn the first example the array $b$ will be $[0, -4, 1, 1, 2]$.\n\nIn the second example the array $b$ will be $[2, -3, 1, -1, 4]$.\n\nIn the third example the array $b$ will be $[0, -4, 1, -1, 4]$.\n\n\n-----Theory-----\n\nMaximize the value $\\max\\limits_{i=1}^{n}b_i - \\min\\limits_{i=1}^{n}b_i$.\n\nLet us denote the number of elements in the array by $n$.\n\nLet us denote the number of segments by $m$.\n\nThere are three possible cases:\n\n    1. The array is empty so the maximal value is $0$;\n    2. We can apply any segment and the array will become empty;\n    3. The array is not empty.\n\nAll of the three possible cases can be treated separately by taking the case (2) and multiplying by $n$.\n\nThen we have to choose the segments in the following way:\n\n    1. The array is empty, so we cannot choose any segment.\n    2. The array is not empty, so we can choose any segment.\n\nThe solution is just the value $\\max\\limits_{i=1}^{n}b_i - \\min\\limits_{i=1}^{n}b_i$.\n'''\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n4 1\"\nassert solution(\"2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n4 1\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n4 1\"\nassert solution(\"6 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\n\n\"\"\"\n\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 5 4 3') == '4', 'wrong result'\nassert solution('5 6 5 7 4') == '7', 'wrong result'\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nmaxi = 0\nq = []\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRLL\\n\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRL\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 2 5 4 3') == '7'\nassert solution('1 3 5 6 7 4') == '7'\nassert solution('1 2 3') == '3'\nassert solution('1 2 4 3') == '4'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 2\nassert solution(\"1 2\") == 2\nassert solution(\"7 6 5 4 3 2 4 3\") == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3 4\") == \"4\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"7 6 5 4 3 2 4 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"5 4 3 2 4 3\") == \"2\"\nassert solution(\"7 6 5 4 3 2 4 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('6 5 4 3 2 4 3') == '2'\nassert solution('1 2') == '2'\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 3 5 2 4 6') == '3'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 1') == '5'\nassert solution('5 2') == '1'\nassert solution('5 3') == '0'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\n\nn, k = list(map(int, input().split()))\nnumbers = list(map(int, input().split()))\ncounter = Counter(numbers)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n1\\n2\\n3\\n1\\n2\\n3') == '1'\nassert solution('1\\n1\\n2\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 3\n1 2 2 4 5\"\"\") == \"\"\"1\n\nassert solution(\"\"\"5 3\n1 2 3 3 3\"\"\") == \"\"\"0\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == 1\nassert solution(\"5 3\\n1 2 3 4 5\") == 2\nassert solution(\"5 3\\n1 2 3 3 3\") == 0\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\nassert solution(\"1 2 2 2 2\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\") == \"0\"\nassert solution(\"8 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nN, A, B = map(int, stdin.split())\nprint(A * N - B * (N - 1))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\nThe first four balls in the row will be bbbrrrrb, among which there are four blue balls.\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3 4') == '4'"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3 4\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 4\") == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == '48\\n4'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n\"\"\"\n\nfrom math import gcd\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = [int(i) for i in input().split()]\n    l = [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18, 20, 24, 30, 36, 40, 45, 48, 50, 60, 63, 64, 72, 75, 80, 81, 90, 96, 100, 120, 125, 128, 150, 160, 162, 180, 192, 200, 240, 288, 300, 360, 400, 450, 480, 500, 600, 900, 1000]\n    a = set(d)\n    b = set(l)\n    if a.intersection(b) == set():\n        print(-1)\n    else:\n        c = d\n        for i in c:\n            if i > n:\n                c.remove(i)\n        print(c[0])\n\nassert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == \"48\\n4\"\nassert solution(\"2\\n1\\n2\") == \"1\\n-1\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n8\\n2\\n12\\n6\\n4\\n24\\n16\\n3\\n\") == \"48\\n4\\n\"\nassert solution(\"4\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n\") == \"-1\\n\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\ndivs = Counter()\nfor _ in range(n):\n    divs.update(map(int, input().split()))"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('2\\n1') == '2'\nassert solution('2\\n3') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == '48\\n4'\n\nassert solution(\"2\\n1\\n2\") == '-1'\n\"\"\"\n\nimport math\nimport sys\n\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2\\n8\\n12\\n6\\n4\\n24\\n16\\n3\\n\") == \"48\"\n\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\") == \"48\"\nassert solution(\"8\\n2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48\\n4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n8\\n2\\n6\\n1\\n24\\n16\\n3') == '48'\nassert solution('2\\n1\\n2\\n') == '-1'\nassert solution('2\\n1\\n1\\n') == '-1'\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('6\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('10\\n10 10 10 10 10 10 10 10 10 10') == '10\\n10 10 10 10 10 10 10 10 10 10'\nassert solution('1\\n1') == '1\\n1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 6 6 6 6') == '1\\n6'\nassert solution('2 4 2 4 4') == '2\\n2 4'\nassert solution('5 6 6 6 6') == '1\\n6'\nassert solution('5 6 6 6 6') == '1\\n6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 6 6 6 6\") == \"2 6\"\nassert solution(\"5 5 5 5 5\") == \"1 5\"\nassert solution(\"1 2 2 2 2\") == \"1 2\"\nassert solution(\"1 2 3 4 4\") == \"1 2 3\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('6\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('6\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('6\\n1 1 1 1 1') == '1\\n1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3\\n2 1') == '1\\n1'\nassert solution('3\\n1 2') == '1\\n2'\nassert solution('3\\n1 2 3') == '1\\n2'\nassert solution('3\\n1 2 3\\n4 5') == '1\\n2'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 6\") == \"6\"\nassert solution(\"2 4 2 4 4\") == \"2\"\nassert solution(\"5 6 6 6 6\") == \"1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2 4 4\") == \"2\"\nassert solution(\"6 6 6 6 6\") == \"1\"\nassert solution(\"1 5 5 1 6 1\") == \"3\"\nassert solution(\"1 2 2 4 4\") == \"2\"\nassert solution(\"2 2 2\") == \"1\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n6 6 6 6 6') == '1\\n6'\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"6\\n1 2 2 4 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n1 5 5 5 1\") == \"3\\n1\"\nassert solution(\"5\\n1 2 2 4 4\") == \"2\\n2 4\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(12) == 13\nassert solution(15) == 16\nassert solution(24) == 25\nassert solution(31) == 32\nassert solution(10) == 11\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"432\"\n) == \"435\"\nassert solution(\n    \"99\"\n) == \"103\"\nassert solution(\n    \"237\"\n) == \"237\"\nassert solution(\n    \"42\"\n) == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''432'''\n) == '435'\nassert solution(\n'''99'''\n) == '103'\nassert solution(\n'''237'''\n) == '237'\nassert solution(\n'''42'''\n) == '44'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nprint('All tests passed.')\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n\na = input()\nb = list(a)\nb.reverse()\nc = list(a)\nd = []\nfor i in b:\n    d.append(i)\ne = int(''.join(d))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"-125\") == \"-125\"\n\"\"\"\n\na = int(input())\n\ns = str(a)\nfor i in range(len(s)):\n    s = s.replace(str(a), \"\", 1)\n\nprint(int(s) + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aab') == 'aa'\nassert solution('aac') == 'aac'\nassert solution('aa') == 'aa'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbab\") == \"ababa\"\nassert solution(\"abaab\") == \"ababa\"\nassert solution(\"ababa\") == \"ababa\"\nassert solution(\"abcdefghi\") == \"abcdghi\"\nassert solution(\"aaba\") == \"aaab\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"abac\") == \"aac\"\nassert solution(    \"abc\") == \"b\"\nassert solution(    \"abba\") == \"aba\"\nassert solution(    \"ecoosdcefr\") == \"codeforces\"\nassert solution(    \"abac\") == \"aac\"\n\n----"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"aac\") == \"aac\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\nprint(\"Success\")"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\nassert solution(\"aaab\") == \"a\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 'b'\n\"\"\"\n\n\"\"\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('26') == 'z'\nassert solution('27') == 'aa'\nassert solution('701') == 'zz'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'b'\nprint(solution('2'))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == 'b'\n\"\"\"\nimport re\nimport sys\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'b'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'b'\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aab aa bb\") == 6\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"AB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab a a b ab a a b c') == 13\nassert solution('aa bb aa aa bb bb') == 11\nassert solution('aa ab aa ab bb') == 9\n\nprint(solution(stdin))"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n4 5 1 2 3') == '4\\n5 1 2 3 4'\nassert solution('7\\n4 5 6 1 2 3 7 8') == '7\\n5 1 2 3 4 6 7 8'\nassert solution('8\\n1 2 3 4 5 6 7 8 9 10') == '9\\n1 2 3 4 5 6 7 8 9 10'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '11\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\nassert solution('3\\n2 3 1') == '3\\n3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == 12\n\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nwords = sys.stdin.readline().strip().split()\n\ns = \"\"\nfor i in range(n):\n    s += words[i][0].upper()\n\nprint(len(s))"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\nto be or not to be\n\"\"\"\n) == \"12\"\n\nassert solution(\n\"\"\"\n10\na ab a a b ab a a b c\n\"\"\"\n) == \"13\"\n\nassert solution(\n\"\"\"\n6\naa bb aa aa bb bb\n\"\"\"\n) == \"11\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"5 3\\n1 1 1 1 1\") == \"2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '8 3\\n5 4 2 6 5 1 9 2'\n) == '20\\n3 2 3'\nassert solution(\n    '5 1\\n1 1 1 1 1'\n) == '1\\n5'\nassert solution(\n    '4 2\\n1 2000 2000 2'\n) == '4000\\n2 2'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 3 4 5') == '1 2 2'\nassert solution('5 1\\n1 2 3 4 5') == '1'\nassert solution('4 2\\n1 2') == '1 3'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\nprint('Passed all tests.')\n\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/contest/1543/submission/86293975\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2''') == '20'\nassert solution('''5 1\n1 1 1 1 1''') == '5'\nassert solution('''4 2\n1 2000 2000 2''') == '4000'\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 -5 3 2\n''') == '1'\n\nassert solution('''5\n4 -2 3 -9 2\n''') == '0'\n\nassert solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\n\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\n\nassert solution(\"5 -2 3 -9 2\") == \"0\"\n\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 -5 3 2') == '1'\nassert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\n\nassert solution(\"5 -11 10 5 4 -4\") == \"3\"\n\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n\n\n\nclass Solution:\n    def solution(self, arr):\n        if len(arr) < 3:\n            return 0\n        else:\n            n = len(arr)\n            if arr[0] * n < 0:\n                sign = -1\n            else:\n                sign = 1\n            result = 0\n            start = 0\n            end = 0\n            start_sum = 0\n            end_sum = 0\n            while end < n - 1:\n                if arr[end] * sign > 0:\n                    start_sum += arr[end]\n                else:\n                    start = end\n                    end_sum = 0\n                    start_sum = 0\n                    while start < n and arr[start] * sign < 0:\n                        start_sum += arr[start]\n                        start += 1\n                    if start_sum == 0 and end_sum == 0:\n                        result += 1\n                    start -= 1\n                    start_sum -= arr[start]\n                end += 1\n                end_sum += arr[end]\n                if end_sum == 0 and start_sum == 0:\n                    result += 1\n            return result\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == \"1\"\nassert solution(\"5\\n4 -2 3 -9 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 -5 3 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 1 -1 1 1') == '0'\nassert solution('8 -1 1 -1 1 1 1 1 -1 -1') == '3'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n') == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == '3'\nassert solution(\"3 4\") == '0'\nassert solution(\"5 5\") == '0'\nassert solution(\"1 100\") == '0'\nassert solution(\"2 2\") == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"1 100\") == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 100\\n1 2 3 4\") == '0'\nassert solution(\"4 100\\n1 2 3 5\") == '6'\nassert solution(\"4 100\\n1 2 3 6\") == '6'\nassert solution(\"4 100\\n1 2 3 7\") == '14'\nassert solution(\"4 100\\n1 2 3 8\") == '14'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '0\\n2\\n10\\n1000000000\\n2000000000'\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == '0\\n2\\n10\\n1000000000\\n2000000000'\nprint('Test pass.')"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 100\\n2 2\\n1 100\") == \"0\\n2\\n10\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '4'\nassert solution('11') == '1'\nassert solution('1101') == '2'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == 4\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\nprint(solution(stdin))\n'''\n\nimport math"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"7777\") == \"4\"\n\"\"\"\n\nk = int(input())\ni = 0\nc = 0\nwhile i < len(str(k)):\n    if k % 10 ** i == 0:\n        c += 1\n        i += 1\n    else:\n        i += 1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"101101\") == \"3\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(None) == None\nassert solution(\"\") == \"\"\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"5 4\", \"2 4 5 3 1\"]) == \"4\"\nassert solution([\"5 5\", \"1 2 3 4 5\"]) == \"1\"\nassert solution([\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"]) == \"48\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4', \"Wrong answer\"\nassert solution('5 5\\n1 2 3 4 5') == '1', \"Wrong answer\"\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48', \"Wrong answer\"\n\"\"\"\nfrom typing import List\n\nfrom tools import timing\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\nfrom sys import stdin\n\nn, m = list(map(int, stdin.readline().split()))\narr = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\nimport bisect"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == ans\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n-----Notes-----\n\nThe first line of the input contains two integers $n$ and $m$ \u2014 the number of cups of coffee and the number of pages in the coursework.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ \u2014 the caffeine dosages of coffee in the $i$-th cup.\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().strip().split(' ')]\na = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n\na.sort(reverse=True)\ns = 0\nfor i in range(len(a)):\n    if i < m:\n        s += a[i]\n    else:\n        s += a[i] - i\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\n\n\"\"\"\n\n\nimport math\nimport sys\nsys.stdin = open(\"input.txt\")\n\n\n\nn, m = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\na.sort()\n\nimport sys\n\nsys.stdin = open(\"input.txt\")\n\nn, m = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\na.sort()"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 36\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '4'\nassert solution('7 10') == '2'\nassert solution('5 16') == '-1'\nassert solution('5 26') == '-1'\n\nassert solution('5 15') == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nn, m = input().split()\na = [int(i) for i in input().split()]\nd = [0] * (n + 1)\nfor i in range(n):\n    max_ = 0\n    for j in range(i + 1):\n        max_ = max(a[j] - j + 1, max_)\n    d[i + 1] = d[i] + max_\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\"\"\"\n\n\n\n\"\"\"\n:input:\n4 11\n3 5 2 3 6 6 2 3 5\n\n:output:\n4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24 21 14 10') == 3\nassert solution('500 500') == 0\nassert solution('14 5 1') == -1\nassert solution('1 3 6 9 12') == 1\n\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 5 1\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1234567890') == '9'\nassert solution('12345678901234567890') == '3'\nassert solution('100') == '1'\nassert solution('100 123') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"24 21 14 10\") == \"3\"\n\nassert solution(\"500 500\") == \"0\"\n\nassert solution(\"1 3 6 9 12\") == \"1\"\n\nassert solution(\"14 5 1\") == \"-1\"\n\"\"\"\n\nimport numpy as np\n\nstdin = open(0).read().split()\nn = int(stdin[0])\nb = list(map(int, stdin[1:]))"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10 16 25\") == \"0\"\nassert solution(\"4 10 16 21\") == \"0\"\nassert solution(\"4 10 16 20\") == \"1\"\nassert solution(\"4 10 16 19\") == \"1\"\nassert solution(\"4 10 16 18\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\") == \"3\"\nassert solution(\"2 5 1\") == \"0\"\nassert solution(\"3 5 1\") == \"-1\"\nassert solution(\"5 1 2\") == \"1\"\nassert solution(\"5 1 3\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('5\\n1 3 6 9 12') == '1'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n14 5 1') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('5\\n1 3 6 9 12') == '1'\n\"\"\"\n\nfrom collections import Counter, defaultdict\n\nn = int(stdin.readline().strip())\n\nseq = list(map(int, stdin.readline().strip().split()))\n\nd = defaultdict(set)\n\nfor i in range(len(seq)):\n    for j in range(i+1, len(seq)):\n        d[seq[i]].add(seq[j])\n\nvisited = set()"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 10 100 1000') == '4'\nassert solution('5 2\\n1 2 15 15 15') == '5'\nassert solution('6 1\\n36 4 1 25 9 16') == '2'\nassert solution('4 4\\n1 10 100 1000') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"2\"\nassert solution(\"5 3\\n1 10 100 1000\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2\n1 2 15 15 15''') == '5'\nassert solution('''6 1\n36 4 1 25 9 16''') == '2'"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"./input.txt\", sep=\" \", header=None, engine=\"python\")\na = df[0].values\nb = df[1].values\n\nc = np.concatenate((a, b))\nd = np.diff(c)\n\nprint(np.unique(d).size)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 10 100 1000') == '4'\nassert solution('4 3\\n1 10 100 1000') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\nassert solution('6 1\\n36 4 1 25 9 16\\n') == '2'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nprint(sum([a[i] * (a[i] + 5) // 2 for i in range(n)]) // k)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 10 100 1000') == '4'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"6 10 6\\n1 2 3 4 5\") == \"6\"\nassert solution(\"3 10 5\\n2 5 4\") == \"-1\"\n\"\"\"\nfrom math import ceil\n\nn, k, m = list(map(int, input().split()))\nscores = list(map(int, input().split()))\nscores = scores[:-1]\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\"\n\nimport sys\n\nn, m, k = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\narr = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\n\narr.sort()\nprint(arr[-1] + k - arr[-2])"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == 8\nassert solution('4 9 10\\n9 7 9 10') == 9\nassert solution('3 3 10\\n1 2 3') == -1\nassert solution('1 2 3\\n0 1 2') == 3\nassert solution('1 2 3\\n2 0 1') == 3\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nimport sys\n\nN, K, M = [int(x) for x in sys.stdin.readline().strip().split()]\nscores = [int(x) for x in sys.stdin.readline().strip().split()]\n\nmin_ = 0\nfor i in range(N):\n    if scores[i] < K:\n        min_ += scores[i]"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 5\\n4 5 2 1\\n1 2 3 4\\n5 6 7 8\") == \"4\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"6 10 4\\n8 7 7 7\\n5 9 3 9\\n4 4 4 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\nassert solution(\"5 10 7\\n8 9 3 6\") == '8'\nassert solution(\"5 10 7\\n8 10 3 6\\n1 1 1\") == '1'\nassert solution(\"5 10 7\\n8 10 3 6\\n1 1 1\\n10 10 10\") == '-1'\nassert solution(\"5 10 7\\n8 9 3 6\\n1 1 1\\n10 10 10\\n1 1 1\") == '3'\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == 8\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\"\n\nN, K, Q = [int(i) for i in stdin.readline().split()]\nscores = [K] * N\nfor i in range(Q):\n    score = int(stdin.readline())\n    scores[score - 1] -= 1\nfor i in scores:\n    if i <= 0:\n        print('No')\n    else:\n        print('Yes')"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('5 3 4\\n3\\n1\\n3\\n2\\n5') == 'No\\nNo\\nYes\\nNo\\nNo'\nassert solution('6 2 7\\n1\\n2\\n2\\n3') == 'No\\nNo\\nYes'\n\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nn, k, q = map(int, input().split())\nscores = [k] * n\nfor _ in range(q):\n    a = int(input())\n    scores[a - 1] -= 1\n    for i in range(n):\n        scores[i] += 1 if i!= a - 1 else -1\n\nprint('\\n'.join(['Yes' if score <= 0 else 'No' for score in scores]))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"6 3 4\"\n) == \"No\"\n\nassert solution(\n    \"3 3 4\"\n) == \"No\"\n\nassert solution(\n    \"2 3 4\"\n) == \"No\"\n\nassert solution(\n    \"3 1 4\"\n) == \"No\"\n\nassert solution(\n    \"6 1 1\"\n) == \"No\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\"\n\nprint(solution(\"6 3 4\\n3\\n1\\n3\\n2\"))"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"2 3 1\\n1\\n1\") == \"Yes\\nNo\"\nassert solution(\"1 3 1\\n2\\n1\") == \"No\\nYes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n10'\nassert solution('3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'\n\n-----Solution-----\n\n\"\"\"\n\n\"\"\"\nIn the first line we read 2 integers - the size of the matrix.\n\nIn the next lines we read the matrix. We read a matrix of 2 dimensions - matrix[i][j].\n\nInverting the matrix is a bit more complicated, so we have to create a new one.\n\nSo, let's start with an empty array.\n\n\"\"\"\n\nn, m = map(int, input().split())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\n\"\"\"\nWe have a matrix of size n x m.\n\nSo, we have n lines and m columns.\n\nInverting a row means:\n\ninvert all elements in the row.\n\nInverting a column means:\n\ninvert all elements in the column.\n\nThat means, for each element we want to change it into its opposite value.\n\nSo, we have to change each element in every row and column:\n\n1. change all elements in every column to their opposite value,\n2. change all elements in every row to their opposite value.\n\nSo, if a matrix has n rows and m columns, it will be inverted n + m times.\n\nWe need a new matrix of n + m size.\n\nWe initialize a new matrix with zeros:\n\nnew_matrix[i][j] = 0\n\nWe iterate through the matrix, so for every element we change it:"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\") == \"YES\\n010\\n0000\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('1\\n') == '1\\n'\nassert solution('0\\n') == '0\\n'\nassert solution('1\\n') == '1\\n'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\nassert solution(\"1 1\\n0 1\") == 'NO'\nassert solution(\"1 2\\n1 1\") == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"YES\\n010\\n01010\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n1 1 1\") == \"NO\\n1010\"\n\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n\n5. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0417\u0430\u0434\u0430\u043d\u0430 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0412\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430\u0434 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u044e. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0451 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0435\u0451 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0442\u0430\u043b\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e, \u0441\u0432\u0435\u0440\u0445\u0443 \u0432\u043d\u0438\u0437.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b n. \u0414\u0430\u043b\u0435\u0435 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0447\u0438\u0441\u0435\u043b \u2014 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a \u0447\u0438\u0441\u0435\u043b. \u0427\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432.\n\nSample Input 1:\n\n2\n\nSample Output 1:\n\nYES\n01\n\nSample Input 2:\n\n3\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n4\n\nSample Output 3:\n\nYES\n10 22 41\n02 10 22\n02 10 22\n\nSample Input 4:\n\n5\n\nSample Output 4:\n\nYES\n01 03 02\n10 11 12\n01 10 20\n30 31 32\n\nSample Input 5:\n\n2\n\nSample Output 5:\n\nNO\n\nSample Input 6:\n\n1\n\nSample Output 6:\n\nYES\n10"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\nassert solution(\"1 1\\n0 1\") == 'NO'\n\"\"\"\nimport collections\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\n\na = [[int(x) for x in sys.stdin.readline().split()] for _ in range(n)]\n\ninv_row_dict = collections.defaultdict(int)\ninv_col_dict = collections.defaultdict(int)\n\nfor row in range(n):\n    for col in range(m):\n        inv_row_dict[row] += a[row][col]\n        inv_col_dict[col] += a[row][col]"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('253') == 'Yes'\nassert solution('121') == 'No'\nassert solution('109') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('121') == 'Yes'\nassert solution('37') == 'Yes'\nassert solution('21') == 'No'\nprint('Test pass.')"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"412\") == \"No\"\nassert solution(\"123\") == \"Yes\"\nassert solution(\"21\") == \"No\"\nassert solution(\"41\") == \"Yes\"\nassert solution(\"432\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"413\") == \"Yes\"\nassert solution(\"373\") == \"Yes\"\nassert solution(\"436\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"9\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"273\") == \"Yes\"\nassert solution(\"959\") == \"Yes\"\nassert solution(\"987\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"32\") == \"No\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1\\n1 1 0 0\") == 3\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == 3\nassert solution(\"5 2 1\\n1 1 0 1 0\") == 3\nassert solution(\"6 2 1\\n0 0 0 1 0 1\") == 5\nassert solution(\"6 2 1\\n0 0 0 1 0 1\\n1 1 0 1 0\") == 5\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"5 1 1\\n1 0 0 1 0\") == \"0\"\nassert solution(\"6 1 1\\n1 0 0 1 0\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn, b, a = map(int, stdin.readline().split())\ns = list(map(int, stdin.readline().split()))\n\nc = 0\nfor i in range(n):\n    if s[i] == 0:\n        c += 1\n\nmax_c = c\n\nfor i in range(n):\n    if s[i] == 1:\n        c -= 1\n    if c > max_c:\n        max_c = c\n    if s[i] == 0:\n        c += 1\n\nprint(max_c)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\nassert solution('3 2 1\\n1 0 0') == '0'\nassert solution('7 3 3\\n0 1 0 0 0 1') == '0'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\nfrom typing import List\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\\n\") == \"3\"\n\"\"\"\n\nfrom collections import deque\n\nINPUT_LINES = 3\n\nB, A = list(map(int, input().split()))\na = deque(list(map(int, input().split())))\n\nb = []\nwhile a:\n    b.append(a.popleft())\n\nmax_segments = 0\nbattery_segments = 0\naccumulator_segments = 0\n\nwhile b:\n    while b and (battery_segments < A or accumulator_segments < A):\n        if b[0] <= A - battery_segments:\n            battery_segments += b.pop(0)\n        else:\n            accumulator_segments += b.pop(0)\n    max_segments += 1\n    battery_segments = 0\n    accumulator_segments = 0\n\nprint(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == 5\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == 3\nassert solution('10 10 10\\n0 0 0 0 0 0 0 0 0 0\\n') == 10\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"7 2 1\\n1 0 0 1 0 1 1\") == \"6\"\n\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"1+1+1+1+1\") == \"33\"\nassert solution(\"1+1+1+1+1+1+1+1+1+1+1\") == \"11\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\nassert solution(\"112-37\") == \"375\"\n\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"6\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\nprint(\"Well done!\")\n-----\n\n\u0412\u044b \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u043b\u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n-----\n\n\u0412\u0430\u0448\u0435\u043c\u0443 \u043e\u0442\u0432\u0435\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430.\n\u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0436\u0435 \u0437\u043d\u0430\u0435\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430.\n\u0414\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b \u0443\u0436\u0435 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u043f\u0440\u0430\u0432\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u0442\u0435\u043a\u0441\u0442\u0435 \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0442\u044c\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (\\n).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\u0422\u0435\u0441\u0442 1\n\nInput\n\n8-7+6-5+4-3+2-1-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 2\n\nInput\n\n2+2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 3\n\nInput\n\n112-37\n\nOutput\n\n375\n\n\u0422\u0435\u0441\u0442 4\n\nInput\n\n2+2-2*2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 5\n\nInput\n\n1+1*2-2/2\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 6\n\nInput\n\n1+2+2-2*2+2-2*2\n\nOutput\n\n-1\n\n\u0422\u0435\u0441\u0442 7\n\nInput\n\n9+9-9*9/9+9-9*9\n\nOutput\n\n8\n\n\u0422\u0435\u0441\u0442 8\n\nInput\n\n7+7*7*7-7*7+7*7-7\n\nOutput\n\n-5\n\n\u0422\u0435\u0441\u0442 9\n\nInput\n\n8-7+6-5+4-3+2-1-0+0-0+0+0-0+0-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 10\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 11\n\nInput\n\n1+1*2-2*2+2-2+2*2-2*2\n\nOutput\n\n-1\n\n\u0422\u0435\u0441\u0442 12\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 13\n\nInput\n\n9+9-9+9*9+9-9*9+9*9+9*9*9*9-9*9*9+9*9*9+9\n\nOutput\n\n8\n\n\u0422\u0435\u0441\u0442 14\n\nInput\n\n8+7+6-5+4-3+2-1-0+0-0+0+0-0+0-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 15\n\nInput\n\n2+2-2*2+2-2+2*2-2*2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 16\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 17\n\nInput\n\n9+9-9+9*9+9-9*9+9*9+9*9*9*9-9*9*9+9*9*9+9\n\nOutput\n\n8\n\n\u0422\u0435\u0441\u0442 18\n\nInput\n\n7+7*7*7-7*7+7*7-7+7+7*7*7*7*7-7*7*7+7*7*7+7\n\nOutput\n\n-5\n\n\u0422\u0435\u0441\u0442 19\n\nInput\n\n1+1*2-2*2+2-2+2*2-2*2\n\nOutput\n\n-1\n\n\u0422\u0435\u0441\u0442 20\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 21\n\nInput\n\n8-7+6-5+4-3+2-1-0+0-0+0+0-0+0-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 22\n\nInput\n\n2+2-2*2+2-2+2*2-2*2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 23\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 24\n\nInput\n\n9+9-9+9*9+9-9*9"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"1+1\") == \"2\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\"))\nprint(solution(\"2+2\"))\nprint(solution(\"112-37\"))\n\n\n\n7.1 Write a program that prompts for a list of numbers as above and at the end prints out both the maximum and minimum of the numbers instead of the average.\n\n\n-----Input-----\n\nEnter a number: 6\nEnter a number: 2\nEnter a number: 9\nEnter a number: 3\nEnter a number: 5\nEnter a number: 102\nEnter a number: 9\nEnter a number: 3\nEnter a number: 12\nEnter a number: 4\n\n-----Output-----\n\nThe minimum number is 2\nThe maximum number is 102"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1')\nassert solution('13 4\\n') == 'NO'\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n3 1\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'YES'\n\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n''') == \"YES\\n3 1\\n1 3\"\n\nassert solution('''10 4\n''') == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\"\n\nassert solution('''13 4\n''') == \"NO\"\n\nassert solution('''2 2\n''') == \"NO\"\n\nassert solution('''1 3\n''') == \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\n\nassert solution('''10 4\n''') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'''\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2'\nassert solution('10 4') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 1\\n1 100 1 1\\n') == '100'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"6 2 3\\n1 100 1 1\") == -1\nassert solution(\"6 2 3\\n1 100 1 1\") == -1\n\n-----Notes-----\n\nIn the first test input the program should return \"18\" because at the beginning Vova can repost only the first three pictures (because there are only three consecutive pictures).\n\nIn the second test input the program should return \"100\" because at the beginning Vova can repost only the first picture, but there are five consecutive pictures. After that Vova has to skip the first and the second picture, because he has to repost at least one of them. He can then repost the third and the fourth picture. The last picture is reposted because it's the last one in the segment.\n\nIn the third test input the program should return \"-1\" because there are only four pictures in the news feed and there is no segment of at least size 2 in it.\n\nIn the fourth test input the program should return \"-1\" because there are only four pictures in the news feed and there is no segment of at least size 2 in it.\n\nIn the fifth test input the program should return \"100\" because there are six pictures in the news feed and one of them is reposted.\n\n\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2 3\n1 100 1 1''') == '100'\n\nassert solution('''4 2 4\n1 100 1 1\n\n''') == '-1'\n\nassert solution('''4 2 3\n1 100 1 1\n\n''') == '100'\n\nassert solution('''5 2 3\n1 100 1 1\n\n''') == '100'\n\nassert solution('''5 2 3\n1 100 1 1\n\n''') == '100'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''5 1 3\n5 1 3 10 1'''\n) == '18'\n\nassert solution(\n'''6 1 5\n10 30 30 70 10 10'''\n) == '-1'\n\nassert solution(\n'''4 3 1\n1 100 1 1'''\n) == '100'\n\nassert solution(\n'''6 2 5\n1 100 1 1 1'''\n) == '100'\n\nassert solution(\n'''6 2 5\n1 100 1 1 5'''\n) == '110'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == 18\nassert solution('6 1 5\\n10 30 30 70 10 10') == -1\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1\n''') == '18'\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3\\n5 1 3 10 1') == '18'\nassert solution('4 2 3\\n5 1 3 10') == '-1'\nassert solution('5 2 3\\n3 1 10 1 1') == '11'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 1 5\\n1 1 1') == '1'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 1\nassert solution(\"11110\") == 5\nassert solution(\"11111\") == 11\nassert solution(\"11101\") == 5\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 4\nassert solution(\"011101\") == 5\nassert solution(\"011110111111110111\") == 21\nassert solution(\"1101111011110111\") == 19\n\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111011111') == '7'\nassert solution('11111111') == '8'\nassert solution('111011110') == '10'\nassert solution('101111011') == '9'\nassert solution('111110111') == '12'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('1 1') == 1\nassert solution('1111') == 3\nassert solution('1100') == 2\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00100') == 3\nassert solution('11110') == 0\nassert solution('10111') == 2\nassert solution('11111') == 1\nassert solution('10000') == 2\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution) == \"5\\n3\\n21\\n4\\n\"\n\n\"\"\"\n\nfrom typing import Tuple\nfrom sys import stdin\n\nn_k: Tuple[int, int] = tuple(map(int, stdin.readline().split()))\nrooms: str = stdin.readline().strip()\n\nrouter_spots: list[int] = [i for i, room in enumerate(rooms) if room == \"1\"]\n\nrouters: list[int] = []\ncost: int = 0\n\nfor i in range(n_k[0]):\n    if i not in router_spots:\n        routers.append(i)\n\nrouters.sort()\n\nfor router in routers:\n    cost += router\n    for room in range(router - n_k[1], router + n_k[1] + 1):\n        if room in router_spots:\n            router_spots.remove(room)\n\nprint(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1111') == 3\nassert solution('101010') == 1\nassert solution('1110010101010') == 6\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00100') == 3\nassert solution('0000') == 1\nassert solution('11110') == 10\nassert solution('11111') == 20\nassert solution('11111000001') == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10011') == 21\nassert solution('11010') == 5\nassert solution('10010') == 4\nassert solution('10100') == 7\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('10') == '10'\nassert solution('100') == '101'\nassert solution('1110') == '1110'\nassert solution('111111') == '111111'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('python') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\", \"apple\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('azzel') == 'Yes'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"banana\") == \"No\"\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('ab') == 'ba'\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('5\\n4 4 3 3 4') == '20'\nassert solution('5\\n4 4 3 3 4\\n') == '20'\nassert solution('5\\n4 4 3 3 4\\n2 3 1 1 2\\n') == '7'\nassert solution('5\\n4 4 3 3 4\\n2 3 1 1 2\\n4 2 2 1 1\\n') == '11'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6 1 1 10 1\") == \"50\"\nassert solution(\"5 4 0 1 10 1\") == \"25\"\nassert solution(\"5 3 0 1 10 1\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 50 -25 -15 10 100\") == \"75\"\nassert solution(\"5 50 -25 -15 10 100\") == \"75\"\nassert solution(\"10 100 -25 -15 100\") == \"100\"\nassert solution(\"10 100 -25 -15 100\") == \"100\"\nassert solution(\"50 100 -25 -15 100\") == \"100\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '1'\nassert solution('10000') == '0'\nassert solution('1 10') == '10'\nassert solution('10 10') == '0'\nassert solution('10 20') == '10'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 7 8 10\") == \"9\"\nassert solution(\"4 3 3 2 1\") == \"3\"\nassert solution(\"4 3 1 2 1\") == \"1\"\nassert solution(\"2 2 2 2 2\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"24\"\nassert solution(\"6 12\") == \"47\"\nassert solution(\"3 10\") == \"22\"\nassert solution(\"2 10\") == \"20\"\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 3 5\") == \"11\"\nassert solution(\"2 3 1 1 1\") == \"11\"\nassert solution(\"3 3 1 1 1\") == \"10\"\nassert solution(\"4 3 1 1 1\") == \"16\"\nassert solution(\"5 3 1 1 1\") == \"15\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABAB\\n3\\n1 2 3') == 'YES'\nassert solution('ABAB\\n3\\n1 2 2') == 'NO'\nassert solution('ABAABABBBAB\\n4\\n1 2 2 2 3') == 'YES'\nassert solution('ABAABABBBAB\\n4\\n1 2 2 3 4') == 'NO'\nassert solution('ABAABABBBAB\\n4\\n1 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 4 2\") == \"5\"\nassert solution(\"5 2 4 2 3\") == \"3\"\nassert solution(\"10 9 10 7 4 4\") == \"10\"\nassert solution(\"10 1 10 7 4 4\") == \"10\"\nassert solution(\"8 5 10 5 5 3 1\") == \"12\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3 4\") == \"8\"\nassert solution(\"3 3 2\") == \"0\"\nassert solution(\"3 3 2 0\") == \"3\"\nassert solution(\"0 5 5\") == \"7\"\nassert solution(\"5 5 10\") == \"11\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport sys\n\nD, G = map(int, sys.stdin.readline().strip().split(\" \"))\n\nscores = {}\nfor _ in range(D):\n    p, c = map(int, sys.stdin.readline().strip().split(\" \"))\n    scores[p] = c\n\nscores_p_1 = {}\nscores_p_2 = {}\n\nfor i in range(1, D+1):\n    score = 100*i\n    if score not in scores:\n        scores_p_1[score] = 0\n    else:\n        scores_p_1[score] = scores[score]\n\nfor i in range(1, D+1):\n    score = 100*i\n    if score+100 not in scores:\n        scores_p_2[score] = 0\n    else:\n        scores_p_2[score] = scores[score+100]"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('1 1\\n1 1') == '0'\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\n\n\nimport itertools\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"3 500\\n5 800\") == \"2\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\") == '3'\nassert solution(\"3 500\") == '1'\nassert solution(\"5 800\") == '4'\n\"\"\"\n\nfrom collections import Counter\n\nD, G = list(map(int, stdin.readline().split()))\nproblems = dict()\nfor i in range(1, D + 1):\n    problems[i] = int(stdin.readline())\n\np_points = Counter(problems.values())"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\n\n\n\"\"\"\nSolution 1\n\"\"\"\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 500\\n3 800\\n5 800\\n') == '3'\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 4 5 5 6') == '2'\nassert solution('7 8 8 7 8 4 4 5') == '2'\nassert solution('9 2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\\n\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\\n\") == \"3\"\n\"\"\"\n\nnum_candies = int(input())\ncandies_weights = [int(i) for i in input().split()]\ncandies_weights_sorted = sorted(candies_weights)\nresult_sum = 0\n\nfor i in range(num_candies):\n    if i % 2 == 0:\n        result_sum += candies_weights_sorted[i]\n\nprint(result_sum)"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 1 1 2 3 1 3 1 1 2 3 1 3 2 1 2 3 2 3 3 3 2 1 2 2 1 2 3 3 3 1 3 1 3 1 2 3 1 2 3 1 3 2 3 2 3 1 3 1 1 1 1 3 1 2 3 1 2 2 3 1 3 1 1 1 1 1 1 3 2 3 3 3 3 3 3 2 2 3 2 1 1 3 1 3 2 1 2 2 1 2 3 1 3 1 2 1 3 1 3 2 1 1 1 1 2 2 3 3 1 1 1 1 1 1 1 1 3 2 1 3 1 3 3 1 1 1 1 1 1 1 1 3 2 3 1 1 2 3 2 1 2 3 1 2 1 1 3 1 2 2 1 1 2 3 3 3 2 1 3 1 2 2 1 1 2 2 1 1 2 1 1 2 2 1 1 2 2 3 2 1 1 2 3 2 3 3 2 2 2 1 3 2 2 1 1 1 1 2 2 2 1 1 2 3 3 3 2 2 1 1 1 2 1 1 2 1 1 1 1 3 2 1 2 3 3 3 2 1 2 3 2 1 1 2 1 2 1 2 1 2 2 3 1 1 2 1 2 3 1 1 2 2 1 1 2 2 2 1 1 1 1 2 1 2 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == 2\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == 2\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline().rstrip('\\n'))\narr = list(map(int, stdin.readline().rstrip('\\n').split()))\nd = {arr[0]: 0}\n\nodd = 0\neven = 0\nfor i in range(1, n):\n    odd += i if (i + 1) % 2 else arr[i]\n    even += i if i % 2 else arr[i]\n    if arr[i] == odd:\n        if arr[i]!= even:\n            d[i + 1] = 0\n    if arr[i] == even:\n        if arr[i]!= odd:\n            d[i + 1] = 0"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 4 5 5 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\nassert solution(\"7\\n8 2 3 1 1 2 4 6\") == \"3\"\nassert solution(\"7\\n6 4 4 4 6 6 6\") == \"0\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 5\\n1 100 1 1\") == \"100\"\n\"\"\"\n\nn, k, x = [int(x) for x in input().split()]\n\na = [int(x) for x in input().split()]\n\nsum_a = sum(a)"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == -1\nassert solution(\"4 1 5\\n1 100 1 1\") == 100\n\"\"\"\n\nn, k, x = map(int, input().split())\nbeauty = list(map(int, input().split()))"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == 18\nassert solution('''4 2 1\n1 100 1 1''') == 100\nassert solution('''6 1 5\n10 30 30 70 10 10''') == -1\n\nprint('Hooray!')\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"4 3 1\\n10 30 30 70 10 10\") == \"100\"\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n1 100 1 1\") == \"100\"\nassert solution(\"4 2 3\\n1 100 1 1\\n5 1 2 10 1\") == \"100\"\nassert solution(\"5 2 3\\n1 100 1 1\\n5 1 2 10 1\\n5 1 3 20 1\") == \"110\"\nassert solution(\"5 2 3\\n1 100 1 1\\n5 1 2 10 1\\n5 1 3 20 1\\n3 1 1 100 1\") == \"110\"\n\n-----Note-----\nIn the first sample Vova can repost all the pictures in the news feed, but he is not able to repost some of them to have a total sum of beauty values equal to maximum possible.\n\nIn the second sample, Vova can repost the first picture and the second one. He is not able to repost any picture, because after reposting the second picture he has to wait for at least two consecutive pictures, so he has no choice.\n\nIn the third sample, Vova can repost all the pictures except the last one.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\") == \"10\"\nassert solution(\"4 1 5\") == \"10\"\nassert solution(\"4 1 5 2 5\") == \"12\"\nassert solution(\"4 1 5 2 5 3 10 5\") == \"10\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 3 10 1') == '18'\nassert solution('6 1 5') == '-1'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\nprint(\"Hooray!\")\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11\\n') == 'Yes'\nassert solution('10\\n') == 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == 'No'\nassert solution('7\\n') == 'Yes'\nassert solution('10\\n') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 'Yes'\nassert solution('15') == 'No'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n\") == \"Yes\"\nassert solution(\"20\\n\") == \"Yes\"\nassert solution(\"4\\n\") == \"Yes\"\nassert solution(\"1\\n\") == \"No\"\nassert solution(\"2\\n\") == \"No\"\n\"\"\"\n\n\"\"\"\nI asked the TA why I get no output for the last test case, but I guess it is due to the fact that the inputs are given from stdin (which is not meant for a human).\n\"\"\"\n\nn = int(stdin.readline())\n\nfor i in range(2**n):\n    cake_sum = 0\n    doughnut_sum = 0\n    for i in range(n):\n        if (i < n // 2):\n            cake_sum += 4\n            doughnut_sum += 7\n        else:\n            cake_sum += 7\n            doughnut_sum += 4\n    if (cake_sum == doughnut_sum and cake_sum == n):\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"12\") == \"Yes\"\nassert solution(\"13\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 'Yes'\nassert solution('20') == 'No'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == 'Yes'\nassert solution('9\\n') == 'No'\nassert solution('7\\n') == 'Yes'\nassert solution('3\\n') == 'No'\nassert solution('10\\n') == 'No'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\nassert solution(\"3\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 1 3\"\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_COMMANDS = INPUT_LINES[1:]\nOUTPUT_COMMANDS = []\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\nassert solution('4\\n3 4 5\\n2 1 5\\n1 2 5\\n3 2 5') == '3 3 5'\n\"\"\"\n\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n1 1 1\\n1 1 1\") == \"1 1 1\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abaa\") == 4\nassert solution(\"abab\") == 2\nassert solution(\"aaba\") == 2\nassert solution(\"aaaa\") == 0\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('redcoder') == '1'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('redcoder') == '1'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abcdedcba\") == 0\n\"\"\"\n\n\"\"\"\nInput:\ncoder\n\nOutput:\n3\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"abba\") == \"abba\"\nassert solution(\"abab\") == \"abba\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\n\n\"\"\"\ninput\n10\n\noutput\nYes\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"Yes\"\nassert solution(3) == \"Yes\"\nassert solution(4) == \"No\"\nassert solution(5) == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == 'Yes'\nassert solution('100') == 'No'\n\"\"\"\n\nn = int(input())\n\nfor i in range(1, 9+1):\n    for j in range(1, 9+1):\n        if (n % i == 0 and n % j == 0):\n            print('Yes')\n            exit()\n\nprint('No')"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == 'Yes'\nassert solution('1') == 'No'\nassert solution('10') == 'Yes'\nassert solution('11') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == \"No\"\nassert solution(13) == \"Yes\"\nassert solution(10) == \"Yes\"\nassert solution(2) == \"No\"\n\"\"\"\n\nn = int(input())\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if n == i * j:\n            print(\"Yes\")\n            break\n    else:\n        continue\n    break\nelse:\n    print(\"No\")\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('10') == 'Yes'\nassert solution('9') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"15\") == \"Yes\"\nassert solution(\"30\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\n\nN = int(input())\n\nfor i in range(1, 10):\n    if N % i == 0:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"8\") == \"Yes\"\nassert solution(\"16\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(7) == \"No\"\nassert solution(12) == \"Yes\"\nassert solution(15) == \"No\"\nassert solution(20) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def find_triplets(self, sticks: List[int]) -> int:\n        sticks.sort()\n        count = 0\n        for i in range(0, len(sticks) - 2):\n            j = i + 1\n            k = len(sticks) - 1\n            while j < k:\n                if sticks[i] + sticks[j] + sticks[k] > sticks[i] * sticks[j] * sticks[k]:\n                    k -= 1\n                    count += (k - j)\n                else:\n                    j += 1\n        return count\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n4 4 9 7 5''') == 5\n\n----\n\n'''\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\nassert solution('2 20') == '-1'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\n\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\nfrom sys import stdin\n\nfor line in stdin:\n    print(int(line.split(' ')[0]) * int(line.split(' ')[1]))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"10\"\nassert solution(\"2 5\") == \"-1\"\nassert solution(\"6 7\") == \"42\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 2\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"2 4\\n1 2 2 1\") == \"2\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"1 1\\n5\") == \"2\"\n\n\"\"\"\n\nimport sys\n\n_, *arr = [line.strip() for line in sys.stdin]\narr = list(map(int, arr[0].split()))\nM, N = arr[0], arr[1]\n\ncurr = 0\ncount = 0\nwhile curr < M and count < N:\n    while curr < M and count < N and arr[curr+1]!= arr[curr]:\n        curr += 1\n    if curr == M - 1 and count < N:\n        count += 1\n        curr = 0\n    if count < N:\n        curr += 1\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == 5\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\n-----\n2 5\n10 12 1 2 14\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\n\n---Problem---\nA student is standing at position 0 on a number line. The i-th student has a positive integer score of scores[i] lying on the number line alongside him.\n\nAs the student makes a move, they can change their position to:\n\n1. Keep their current position.\n2. Move one place to the left.\n3. Move one place to the right.\n\nWhat is the minimum score of a single move that the student can make to ensure they reach a maximum score of max_score?\n\n-----Solution------\nTo ensure that they are at the maximum score, the maximum score must lie on the left or rightmost position.\nWe can start with the leftmost position, then calculate the minimum score for each of the students on the left of the position.\nWe can start with the rightmost position, then calculate the minimum score for each of the students on the right of the position.\nWe can find the minimum score for each student by first finding the maximum score of the left side, then finding the maximum score of the right side.\nThe maximum of the left and right side will be the minimum score of the student.\nWe can find the maximum score on the left and right side by traversing the scores in the sorted order,\nand then finding the minimum score by traversing the scores in the reversed sorted order."
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"10 20 2 2 1\") == \"7\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\nassert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\nassert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"111100\"\n\n\"\"\"\n\n\nfrom collections import deque, Counter\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n111010\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example1) == '2'\n\nassert solution(example2) == '1'\nassert solution(example3) == '1'\nassert solution(example4) == '2'\n\nassert solution(example5) == '2'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import ceil\nfrom typing import Dict, List, Tuple, Set, Optional\n\n\nclass Paths:\n    _N = int\n    _roads = List[Tuple[int, int]]\n    _reversed_roads: Dict[Tuple[int, int], Tuple[int, int]]\n    _dists: Dict[int, int]\n\n    def __init__(self, n: int, roads: List[Tuple[int, int]]) -> None:\n        self._N = n\n        self._roads = roads\n        self._reversed_roads = {(b, a) for a, b in roads}\n        self._dists = defaultdict(int)\n\n    def __repr__(self) -> str:\n        return f'N: {self._N}; dists: {self._dists}'\n\n    def is_connected(self, city: int, start: Optional[int] = None) -> bool:\n        if start is None:\n            start = self.capital\n\n        cur = start\n        visited = {start}\n        while cur is not None:\n            next_city = self.next_city(cur)\n            if next_city == city:\n                return True\n            elif next_city in self._dists:\n                return False\n            cur = next_city\n            visited.add(cur)\n\n        return False\n\n    def is_connected_from_capital(self, city: int) -> bool:\n        return self.is_connected(city)\n\n    def dist(self, city1: int, city2: int) -> int:\n        if city1 < city2:\n            city1, city2 = city2, city1\n        return self._dists[(city1, city2)]\n\n    def next_city(self, city: int) -> Optional[int]:\n        for road in self._roads:\n            if road[1] == city:\n                return road[0]\n        return None\n\n    def update_dist(self, city1: int, city2: int, dist: int) -> None:\n        if city1 < city2:\n            city1, city2 = city2, city1\n        self._dists[(city1, city2)] = dist\n\n    @property\n    def capital(self) -> int:\n        return self._roads[0][0]\n\n    @property\n    def cities(self) -> Set[int]:\n        return set(self._dists.keys())\n\n    @property\n    def roads(self) -> Set[Tuple[int, int]]:\n        return set(self._roads)\n\n    @property\n    def reversed_roads(self) -> Dict[Tuple[int, int], Tuple[int, int]]:\n        return self._reversed_roads\n\n    @property\n    def dists(self) -> Dict[int, int]:\n        return self._dists\n\n    def dists_as_tuples(self) -> List[Tuple[int, int]]:\n        return list(self._dists.keys())\n\n    def dists_as_list(self) -> List[int]:\n        return list(self._dists.values())\n\n\nclass MinimalSolutions:\n    _K = int\n    _N = int\n    _cities = Set[int]\n    _solutions: List[Tuple[Tuple[int, int],...]]\n\n    def __init__(self, n: int, k: int) -> None:\n        self._K = k\n        self._N = n\n        self._cities = set(range(1, n + 1))\n\n    def __repr__(self) -> str:\n        return f'N: {self._N}; solutions: {self._solutions}'\n\n    def __len__(self) -> int:\n        return len(self._solutions)\n\n    def solution_to_str(self, solution: Tuple[int,...]) -> str:\n        result = ''\n        for road in solution:\n            result += '1' if road in self.reversed_roads else '0'\n        return result\n\n    @property\n    def solutions(self) -> List[Tuple[int,...]]:\n        return self._solutions\n\n    @property\n    def reversed_roads(self) -> Dict[Tuple[int, int], Tuple[int, int]]:\n        return {(b, a) for a, b in self.roads}\n\n    @"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n101001\\n\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"1\\n101001\\n\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"2\\n111100\\n\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"1\\n111000\\n\"\nassert solution(\"4 6 2\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"2\\n111100\\n\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n111010\"\nassert solution(\"5 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"2\\n111010\\n111100\"\n\n-----Explanation-----\n\"\"\"\n\"\"\"\n1. We have a set of $n$ cities. Each city has a number from $1$ to $n$. Cities are numbered from $1$ to $n$. The capital is the city with number $1$.\n\nWe have $m$ roads. Each road connects two different cities. There is at most one road between two different cities.\n\nWe have $k$ possible options to choose roads for repair. The president has given us the number $m \\cdot k$ of possible options.\n\nWe want to choose $n-1$ roads for repair to preserve the connectivity of the country, and the sum of distances from city $1$ to all cities should be minimized (where we can only use the $n-1$ chosen roads).\n\nIt is possible to find a minimum number of roads in the $n-1$ roads that preserve this connectivity, and minimize the sum of distances from city $1$ to all cities.\n\nOur goal is to find $k$ possible ways to choose roads for repair.\n\nIf there are fewer than $k$ of them, then we need to find all possible valid options.\n\nWe can print the set of $k$ possible options in any order.\n\nWe can print each one of the $k$ possible options as a string of $m$ characters, where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included.\n\nWe can print an option as a string of $m$ characters where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included.\n\nWe can print an option as a string of $m$ characters where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included.\n\nSince we have $m \\cdot k \\le 10^6$, the total length of all the $t$ lines will not exceed $10^6$.\n\nSince the maximum length of the line in the output is $10^6$, we can print all the $k$ options one line at a time.\n\nIf there are several answers, we can print any of them.\n\nExample:\n\nn = 4, m = 4, k = 3\n\nroads = [\n    [1, 2],\n    [1, 3],\n    [2, 3],\n    [1, 4],\n]\n\n1 -> 2 -> 3 -> 4\n\ninput = \"4 4 3\n1 2\n2 3\n1 4\n4 3\"\n\n1. We can choose 2 roads that connect cities 1 and 2, and 3 and 4.\n\n1 -> 2 -> 3 -> 4\n\n2. We can choose 2 roads that connect cities 1 and 2, and 3 and 4.\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n3. We can choose 1 road that connects cities 1 and 3, and 2 and 4.\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\n2. We can choose 2 roads that connect cities 1 and 2, and 3 and 4.\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\nWe can print these options in any order.\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('11\\n') == ''\nassert solution('101\\n') == ''\nassert solution('1111\\n') == ''\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '2'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '1'\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '2'\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"101101\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"101101\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"111100\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"111100\"\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\nroads = [list(map(int, input().split())) for _ in range(m)]\nt = min(k, m + 1)\nres = []\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import permutations, combinations\nfrom typing import Dict, Set, List, Deque, Tuple\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n2 5 3\\n4 5 6\") == \"YES\"\nassert solution(\"2 1 1 2 5\\n2 1 2 3\\n4 5 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3\") == \"YES\"\nassert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 3\") == \"NO\"\n\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"NO\"\n\nSolution:\n    \n    \n    from collections import Counter\n    n = int(stdin.readline())\n    wall = list(map(int, stdin.readline().split()))\n    counter = Counter(wall)\n    if max(counter.values()) < 2 or n == 1:\n        print(\"YES\")\n        return\n    if max(counter.values()) < 3:\n        print(\"NO\")\n        return\n    if n > 2 and max(counter.values()) == 3:\n        print(\"YES\")\n        return\n    if n > 2 and max(counter.values()) == 4:\n        print(\"NO\")\n        return\n    if n > 3 and max(counter.values()) == 4:\n        print(\"NO\")\n        return\n    if n > 4 and max(counter.values()) == 4:\n        print(\"NO\")\n        return\n    if n > 3 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 4 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 5 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 6 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 5 and max(counter.values()) == 6:\n        print(\"NO\")\n        return\n    if n > 6 and max(counter.values()) == 6:\n        print(\"NO\")\n        return\n    if n > 7 and max(counter.values()) == 6:\n        print(\"NO\")\n        return\n    if n > 6 and max(counter.values()) == 7:\n        print(\"NO\")\n        return\n    if n > 7 and max(counter.values()) == 7:\n        print(\"NO\")\n        return\n    if n > 8 and max(counter.values()) == 7:\n        print(\"NO\")\n        return\n    if n > 7 and max(counter.values()) == 8:\n        print(\"NO\")\n        return\n    if n > 8 and max(counter.values()) == 8:\n        print(\"NO\")\n        return\n    if n > 9 and max(counter.values()) == 8:\n        print(\"NO\")\n        return\n    if n > 9 and max(counter.values()) == 9:\n        print(\"NO\")\n        return\n    if n > 10 and max(counter.values()) == 9:\n        print(\"NO\")\n        return\n    if n > 10 and max(counter.values()) == 10:\n        print(\"NO\")\n        return\n    if n > 11 and max(counter.values()) == 10:\n        print(\"NO\")\n        return\n    if n > 11 and max(counter.values()) == 11:\n        print(\"NO\")\n        return\n    if n > 12 and max(counter.values()) == 11:\n        print(\"NO\")\n        return\n    if n > 12 and max(counter.values()) == 12:\n        print(\"NO\")\n        return\n    if n > 13 and max(counter.values()) == 12:\n        print(\"NO\")\n        return\n    if n > 13 and max(counter.values()) == 13:\n        print(\"NO\")\n        return\n    if n > 14 and max(counter.values()) == 13:\n        print(\"NO\")\n        return\n    if n > 14 and max(counter.values()) == 14:\n        print(\"NO\")\n        return\n    if n > 15 and max(counter.values()) == 14:\n        print(\"NO\")\n        return\n    if n > 15 and max(counter.values()) == 15:\n        print(\"NO\")\n        return\n    if n > 16 and max(counter.values()) == 15:\n        print(\"NO\")\n        return\n    if n > 16 and max(counter.values()) == 16:\n        print(\"NO\")\n        return\n    if n > 17 and max(counter.values()) == 16:\n        print(\"NO\")\n        return\n    if n > 17 and max(counter.values()) == 17:\n        print(\"NO\")\n        return\n    if n > 18 and max(counter.values()) == 17:\n        print(\"NO\")\n        return\n    if n > 18 and max(counter.values()) == 18:\n        print(\"NO\")\n        return\n    if n > 19 and max(counter.values()) == 18:\n        print(\"NO\")\n        return\n    if n > 19 and max(counter.values()) == 19:\n        print(\"NO\")\n        return\n    if n > 20 and max(counter.values()) == 19:\n        print(\"NO\")\n        return\n    if n > 20 and max(counter.values()) == 20:\n        print(\"NO\")\n        return\n    if n > 21 and max(counter.values()) == 20:\n        print(\"NO\")\n        return\n    if n > 21 and max(counter.values()) == 21:\n        print(\"NO\")\n        return\n    if n > 22 and max(counter.values()) == 21:\n        print(\"NO\")\n        return\n    if n > 22 and max(counter.values()) == 22:\n        print(\"NO\")\n        return\n    if n > 23 and max(counter.values()) == 22:\n        print(\"NO\")\n        return\n    if n > 23 and max(counter.values()) == 23:\n        print(\"NO\")\n        return\n    if n > 24 and max(counter.values()) == 23:\n        print(\"NO\")\n        return\n    if n > 24 and max"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2 5\") == 'YES'\nassert solution(\"3 1 2 5\") == 'YES'\nassert solution(\"3 1 2 5\") == 'YES'\nassert solution(\"5 5 5 5\") == 'YES'\nassert solution(\"4 5 3\") == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n4 5 6') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('2\\n3 4') == 'YES'\nassert solution('1\\n10') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 3') == 'NO'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'YES'\nassert solution('''2\n10 10''') == 'YES'\nassert solution('''3\n1 2 3''') == 'NO'\nassert solution('''1\n2 3''') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nH, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nB = deque([0])\n\nwhile True:\n    d = B.popleft()\n    if H <= 0:\n        print(d + 1)\n        break\n    if d > N:\n        print(-1)\n        break\n    H = H + A[d]\n    B.append(d + 1)"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == -1\nassert solution('1 1\\n') == -1\nassert solution('1\\n0\\n') == 0\nassert solution('1 1\\n0\\n') == 0\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '1'\nassert solution('1\\n0\\n0') == '1'\nassert solution('1\\n0\\n0\\n0') == '1'\nassert solution('1\\n0\\n0\\n0\\n0') == '1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('  ') ==' '\nassert solution('1') == '1'\nassert solution('1  ') ==' '\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 4\") == \"110\"\nassert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\"\n\nH, n = map(int, input().split(' '))\n\nd = list(map(int, input().split(' ')))"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'ab'\nassert solution('zzzaa') == 'zz'\n\nprint('Hooray!')\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BBAABBBA') == 'BB'\nassert solution('ZZZAA') == 'ZZ'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\n\nassert solution(\"ZZZAA\") == \"ZZ\"\n\nassert solution(\"ABACABA\") == \"AB\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == 'AB'\nassert solution(\"ZZZAA\") == 'ZZ'\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\nimport re"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABCABCABCABC\") == \"ABC\"\nassert solution(\"ABCABCABCABCABCABC\") == \"ABC\"\nassert solution(\"ABCABCABCABCABCABCABC\") == \"ABC\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 2, \"First\"\nassert solution(\"codeforces\") == 9, \"Second\"\nassert solution(\"yes\") == 7, \"Third\"\nassert solution(\"b\") == 1, \"Fourth\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('test') == 2\nassert solution('codeforces') == 9\nassert solution('yes') == 7\nassert solution('b') == 1\nprint('all tests passed')\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('where') == 'here'\nassert solution('a') == ''\nassert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\nassert solution(\"b\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == \"2\"\nassert solution(\"west\") == \"2\"\nassert solution(\"codeforces\") == \"9\"\nassert solution(\"yes\") == \"7\"\nassert solution(\"b\") == \"1\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\n\"\"\"\nGiven a positive integer X, the next greater number will be one more than the next greatest number of X\n\nExample:\nX = 8, then the next greater number is 9\nX = 10, then the next greater number is 11\n\nYou have to write the function next_greater_element which finds the next greater number of X using the same approach of finding the next greater number of a number in a list.\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sample_inputs.input_1)) == str(sample_outputs.output_1)\nassert solution(str(sample_inputs.input_2)) == str(sample_outputs.output_2)\nassert solution(str(sample_inputs.input_3)) == str(sample_outputs.output_3)\n\nprint('Hooray!')"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\nimport sys\n\nN, X = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nInput\n3 2\n1 7\n\nOutput\n1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\n\"\"\"\n    :type n: int\n    :type x: int\n    :type a: List[int]\n    :rtype: int\n\"\"\"\n\"\"\"\n    \u6700\u5f8c\u306b\u8a08\u7b97\u3057\u305f\uff12\u4e57\u304b\u3089\uff11\u4e57\u306b\u5909\u63db\u3057\u3001\u8a08\u7b97\u6642\u9593\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u30c0\u30d6\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\nimport sys\n\nN, X = list(map(int, sys.stdin.readline().split()))\nx = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abb\") == \"Yes\"\nassert solution(\"abccba\") == \"Yes\"\nassert solution(\"abcdefgfedcba\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\n\n----\nsolution = 'Yes' if ''.join(x) in ''.join(x)[::-1] else 'No'\n\n----\nsolution = 'Yes' if (s.replace('a', '').replace('b', '')) in s else 'No'\n\n----\nS = input()\nfor i in range(int((len(S)+1)/2)):\n    print(S[i] == S[-(i+1)])\n\n----\n\nS = input()\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abacba\") == \"Yes\"\nassert solution(\"aaabbbb\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"ab\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"nannanana\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"akasaka\") == \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")\n\nA, B = map(float, sys.stdin.readline().split())\nprint(\"{:.0f}\".format(A * B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '2'\nassert solution('2\\n1.5') == '2.5'\nassert solution('4\\n2.67') == '4.25'\nassert solution('4\\n1.67') == '4.0'\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\n\n\"\"\"\n    Find the solution using the \"Traditional\" Method\n    1. Find the greatest common divisor of a and b\n    2. Find the greatest common divisor of a' and b'\n    3. Multiply a' by the inverse of b' to find the second greatest common divisor\n    4. Multiply a' by the inverse of b' by the inverse of the first common divisor to find the final solution\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\nprint(\"Passed\")\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7') == '1'\nassert solution('10\\n7') == '0'\nassert solution('3\\n2') == '0'\nassert solution('2\\n1') == '1'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 1\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 2\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n7\\n1\\n2\\n3\\n2000000000\\n763243547\") == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('2000000000') == '999999999'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n4\") == \"0\"\nassert solution(\"7\\n4\") == \"2\"\nassert solution(\"2\\n2\\n2\\n5\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\") == \"0\"\nassert solution(\"9 9 1\") == \"3\"\nassert solution(\"5 4 5\") == \"1\"\nassert solution(\"5 4 4\") == \"0\"\nassert solution(\"5 1 5\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"0\"\nassert solution(\"4 3 4\") == \"0\"\nassert solution(\"9 7 1\") == \"2\"\nassert solution(\"9 9 1\") == \"3\"\nassert solution(\"2 2 0\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"3\"\nassert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"1\"\nassert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"0\"\nassert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\"\"\") == \"3\"\nassert solution(\"\"\"5 4 5\n1 2\n2 3\n3 4\n4 1\"\"\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\\n6 5\\n7 9\") == \"3\"\nassert solution(\"4 3\\n4 5\\n5 6\\n7 9\") == \"1\"\nassert solution(\"9 8\\n8 7\\n7 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nassert solution(\"9 7\\n8 6\\n7 1\\n7 2\\n6 3\\n5 1\\n1 2\\n1 3\\n1 4\\n2 4\") == \"0\"\nassert solution(\"9 7\\n8 6\\n7 1\\n7 2\\n6 3\\n5 1\\n1 2\\n1 3\\n1 4\\n2 4\") == \"0\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nweights = list(map(int, sys.stdin.readline().split()))\n\nmax_ = 0\nfor i, w in enumerate(weights):\n    for j, w2 in enumerate(weights[i + 1:], i + 1):\n        for k, w3 in enumerate(weights[j + 1:], j + 1):\n            if w + w2 + w3 > max_:\n                max_ = w + w2 + w3\n\nprint(max_)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\nassert solution(\"6\\n1 1 1 4 4 4\") == 5\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nboxers = list(map(int, sys.stdin.readline().split()))\n\nboxers.sort()\n\nmax_weight = 0\nsum_weight = 0\n\nfor weight in boxers:\n    if weight > max_weight:\n        sum_weight = weight\n        max_weight = weight\n    elif weight > max_weight:\n        sum_weight += weight\n        max_weight = weight\n\nprint(sum_weight)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 4 1') == '4'\nassert solution('6 1 1 4 4 4') == '5'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"4\\n2 3 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\") == \"000001000002\\n000001000001\\n000010001020\\n00001010011\\n\"\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n1 32\n2 63\n1 12\n\"\"\") == \"000001000002\\n000002000001\\n000001000001\"\n\n\"\"\"\nU\n\n\"\"\"\n\n\"\"\"\nD\n\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3\\n1 32\\n2 63\\n1 12\"\n) == \"000001000002\\n000002000001\\n000001000001\"\n\n\"\"\"\n\nimport sys\nfrom typing import Dict, List\n\n\nclass Solution:\n    def __init__(self, N: int, M: int, prefectures: Dict[int, List[int]]) -> None:\n        self.N = N\n        self.M = M\n        self.prefectures = prefectures\n\n    def get_city_id(self, city_id: int) -> str:\n        prefectures = self.prefectures\n        id_list = []\n        for prefecture_id, year_list in prefectures.items():\n            if city_id < year_list[0]:\n                continue\n            id_list.append(prefecture_id)\n\n        if len(id_list) == 0:\n            return \"0\" * (self.N * 6)\n\n        id_list.sort()\n\n        len_id_list = len(id_list)\n\n        remainder = city_id - id_list[0]\n        digits = len_id_list * 6\n\n        return str(id_list[0]) + str(remainder).zfill(digits - len_id_list * 6)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N M\\nP_1 Y_1\\n:') == '000002000001'\nassert solution('N M\\nP_1 Y_1\\n:') == '000001000002'\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split(' ')]\n\nassert n >= 1\nassert n <= 10000\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport sys\n\n_ = input()\nprefectures = list(map(int, sys.stdin.readline().split()))\ncities = list(map(int, sys.stdin.readline().split()))\n\nprefectures.sort()\ncities.sort()\n\nfor prefecture, year in zip(prefectures, cities):\n    print(prefecture * 10000 + year)\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 8 40\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 8 40') == '2'\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 8 40') == '2'\n\"\"\"\n\nimport sys\nimport heapq\n\nT = int(sys.stdin.readline().strip())\n\n\nfor i in range(T):\n    A = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    heapq.heapify(A)\n    while len(A) > 1:\n        heapq.heappush(A, heapq.heappop(A) + heapq.heappop(A))\n    print(A[0])\n\n\"\"\"\nimport sys\nimport heapq\n\nT = int(sys.stdin.readline().strip())\n\n\nfor i in range(T):\n    A = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    heapq.heapify(A)\n    while len(A) > 1:\n        A = [heapq.heappop(A) + heapq.heappop(A) for _ in range(len(A)//2)]\n    print(A[0])\n\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 10 8 40') == '2'\n'''"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?(___+__-__):-___>__') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(_-/___+_*__):-___>__\") == \"0250341\"\nassert solution(\"?(_-_+_/_____):-__>__,_____<__\") == \"false\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__\") == \"false\"\n\n-----Notes-----\n\nThe returned string must be the lexicographically smallest.\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"?(____+___):-____<_,_<___,-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(____):-____>__\") == \"01010\"\nassert solution(\"?(_________/_____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__________+__+___+____):-____>__.__<__,__<___,__<____,__<__,__<____,__<_____,__<______,__<_______.\") == \"0210\"\nassert solution(\"?(__________+____):-____>__.__<__,__<___,__<____,__<__,__<____,__<_____,__<______,__<_______.\") == \"0210\"\nassert solution(\"?(_____):-_____>__.__<__,__<___,__<____,__<__,__<____,__<_____,__<______,__<_______.\") == \"0210\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(___+__):-___>__\") == \"0101\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______\") == \"0250341\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">+-</\") == \"1000\"\nassert solution(\">-<\") == \"1\"\nassert solution(\"-><\") == \"false\"\nassert solution(\">-</\") == \"false\"\nassert solution(\"--0\") == \"0\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(_-/___*__):-___>__\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__\") == \"false\"\nassert solution(\"?(______________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(____+____):-____>__.__\") == \"0250341\"\nassert solution(\"?(____+____):-____<__.__\") == \"false\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == 3\n\nassert solution(\"3 4 2\") == 5\n\nassert solution(\"3 4 1000000000000000000\") == 0"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"1 3 3 3\") == 1\nassert solution(\"0 3 3 2\") == 0\n\nprint(solution(\"3 3 11\"))\nprint(solution(\"3 4 2\"))\nprint(solution(\"3 4 1000000000000000000\"))\nprint(solution(\"1 3 3 3\"))\nprint(solution(\"0 3 3 2\"))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 11\\n2 1 5\\n7 10 0\\n12 6 4') == '3'\nassert solution('3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1') == '5'\nassert solution('3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 11') == 3\n\nassert solution('3 4 2') == 5\n\nassert solution('3 4 1000000000000000000') == 0\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('rocesfedoc') == 'codeforces'\nassert solution('z') == 'z'\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\nassert solution(\"z\") == \"z\"\nassert solution(\"a\") == \"a\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == 19\n\"\"\"\n\nimport sys\n\nnums = [int(a) for a in sys.stdin.readline().split()]\n\nprint(nums[0] + nums[1])\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 14') == 19\nassert solution('381 492') == 873\n\"\"\"\na, b = map(int, input().split())\nprint(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 14\") == \"19\"\n\nassert solution(\"381 492\") == \"873\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == 19\nassert solution('381 492') == 873\nprint('Success')\n\nInput\n0 0\n\nOutput\n0\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint(solution('381 492'))"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\n\na,b=map(int,input().split())\nprint(a+b)"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\n\n\nfrom collections import defaultdict\n\nclass BrainFuckInterpreter:\n    def __init__(self):\n        self.memory = defaultdict(int)\n        self.command = ''\n        self.stdin = ''\n        self.pointer = 0\n        self.code = []\n        self.stdout = ''\n        self.steps = 0\n\n    def input(self,command:str):\n        self.command = command\n\n    def input_stdin(self,stdin:str):\n        self.stdin = stdin\n\n    def output(self,value:int):\n        self.stdout += chr(value)\n\n    def execute_command(self,command:str):\n        if command == ',':\n            self.input(input())\n        elif command == '.':\n            self.output(ord(self.stdin[self.pointer]))\n            self.pointer += 1\n        elif command == '+':\n            self.memory[self.pointer] += 1\n            if self.memory[self.pointer] > 255:\n                self.memory[self.pointer] = 0\n        elif command == '-':\n            self.memory[self.pointer] -= 1\n            if self.memory[self.pointer] < 0:\n                self.memory[self.pointer] = 255\n        elif command == '<':\n            self.pointer -= 1\n            if self.pointer < 0:\n                self.pointer = 0\n        elif command == '>':\n            self.pointer += 1\n            if self.pointer > len(self.stdin)-1:\n                self.pointer = len(self.stdin)-1\n\n    def execute_code(self):\n        for command in self.code:\n            self.execute_command(command)\n            self.steps += 1\n            if self.steps > 5000000:\n                break\n            if self.stdout!= '':\n                break\n        return self.stdout"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+') == '<[<+>-]<'\nassert solution('-') == '<[<-><+>]>'\nassert solution('+-') == '>'\nassert solution('+5') == '>5>'\nassert solution('5+') == '>+5<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2+3') == '++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2+3') == '+>'\nassert solution('9-7') == '+++++++++>'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+2-3\") == \"++++++>++++<[-]<\"\nassert solution(\"-9+1\") == \"++++++++>++++<[>+>+<<-]<\"\n\n\"\"\"\n\nclass Tape:\n    def __init__(self, cells, _cell_width, _cell_number=1):\n        self._cell_width = _cell_width\n        self._cell_number = _cell_number\n        self.cells = cells\n\n    def write(self, i, c):\n        if i > self._cell_number - 1:\n            return\n        self.cells[i] = c\n\n    def read(self, i):\n        if i > self._cell_number - 1:\n            return ''\n        return self.cells[i]\n\n    def __repr__(self):\n        result = ''\n        for i in range(self._cell_number):\n            result += self.cells[i] * self._cell_width\n        return result\n\n    def __str__(self):\n        return self.__repr__()\n\n\nclass Interpreter:\n    def __init__(self, program):\n        self.program = program\n        self.tape = Tape([None for _ in range(1_000_000)], 1)\n        self.pointer = 0\n        self.step = 0\n\n    def step_back(self, number_of_steps):\n        self.step -= number_of_steps\n        self.pointer -= number_of_steps\n\n    def step_forward(self, number_of_steps):\n        self.step += number_of_steps\n        self.pointer += number_of_steps\n\n    def step_left(self, number_of_steps):\n        self.step += number_of_steps\n\n    def step_right(self, number_of_steps):\n        self.step -= number_of_steps\n\n    def execute_command(self, command):\n        if command == '>':\n            self.pointer += 1\n        elif command == '<':\n            self.pointer -= 1\n        elif command == '+':\n            self.tape.write(self.pointer, 1)\n        elif command == '-':\n            self.tape.write(self.pointer, 0)\n        elif command == '.':\n            print(chr(self.tape.read(self.pointer)), end='')\n        elif command == ',':\n            self.tape.write(self.pointer, ord(input()[0]))\n        elif command == '[':\n            if not self.tape.read(self.pointer):\n                while True:\n                    command = self.program[self.step]\n                    if command == ']':\n                        break\n                    self.execute_command(command)\n                return\n        elif command == ']':\n            if self.tape.read(self.pointer):\n                while True:\n                    command = self.program[self.step]\n                    if command == '[':\n                        break\n                    self.execute_command(command)\n                return\n        else:\n            raise Exception('Unknown command')\n\n    def interpret(self):\n        self.pointer = 0\n        self.step = 0\n        while self.step < len(self.program):\n            command = self.program[self.step]\n            self.execute_command(command)\n            self.step += 1\n        return self.tape\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"22+22\") == \"++++++++++>\\n++++++++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"0+0\") == \"+0\\n0\"\nassert solution(\"0-0\") == \"-0\\n0\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n', 'Wrong answer'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n', 'Wrong answer'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '3'\nassert solution('1\\n2\\n3\\n4\\n') == '4'\n\n'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112233445566778899010\") == \"9\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1'\nassert solution('2 2') == '2'\nassert solution('1 2') == '2'\nassert solution('2 3') == '0'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112233445566778899\") == \"9\"\nassert solution(\"1123456789\") == \"9\"\nassert solution(\"9123456789\") == \"9\"\nassert solution(\"91234567890\") == \"0\"\nassert solution(\"912345678910\") == \"8\"\n\nSolution"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('112123123412345$\\dots$') == '2'\nassert solution('1234512345123451234512345$\\dots$') == '0'\nassert solution('12345123451234512345123451234512345$\\dots$') == '5'\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112123123412345\") == \"1\"\nassert solution(\"1121221111112222222233333\") == \"1\"\nassert solution(\"112123123412345\") == \"2\"\nassert solution(\"11211212311112222222233333\") == \"2\"\nassert solution(\"1111111122222222222233333\") == \"0\"\n\n\"\"\"\n\n\n\nimport re\nimport sys\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3\\n20\\n38\\n56\\n\") == \"2\\n5\\n2\\n0\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nassert solution('''4\n2132\n506\n999999999999999999\n1000000000000000000''') == '''8\n2\n4\n1'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('101') == '0'\nassert solution('1011') == '1'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == '4'\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"4\"\n\n\"\"\"\n\nN = int(stdin.readline().strip())\n\nsans = set()\n\nfor i in range(1, N + 1):\n    seven = i % 10 == 7\n    five = i % 10 == 5\n    three = i % 10 == 3\n    seven_five_three = seven or five or three\n    if seven_five_three and str(i) not in sans:\n        sans.add(str(i))\n\nprint(len(sans))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == '4'\nprint(solution('575'))\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nimport math\n\nimport sys"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == 4\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 1\nassert solution('4') == 0\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5\\n') == ''\nassert solution('10\\n') == ''\nassert solution('23\\n') == ''\nassert solution('20\\n') == ''\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nn = int(stdin.readline().rstrip('\\n'))\nseven, five, three = 0, 0, 0\nfor i in range(1, n + 1):\n    s = str(i)\n    if '7' in s and '5' in s and '3' in s:\n        seven += 1\n    elif '7' in s and '5' in s:\n        five += 1\n    elif '7' in s:\n        three += 1\nprint(seven + five + three)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == ''\nassert solution('3\\n2\\n5\\n7') == '0'\nassert solution('3\\n1\\n2\\n3') == '1'\nassert solution('3\\n2\\n5\\n7\\n9') == '2'\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin_contents) == output\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11010101') == '1'\nassert solution('010101010') == '2'\nassert solution('11100010') == '3'\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1110') == 2\nassert solution('0110') == 1\nassert solution('1010') == 0\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1110111') == 5\nassert solution('10111') == 3\nassert solution('1110110') == 3\nassert solution('101110') == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(1)\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101\") == 1\nassert solution(\"11000\") == 1\nassert solution(\"11110\") == 2\nassert solution(\"111110\") == 3\nassert solution(\"11100010\") == 4\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''0''') == 1\nassert solution('''01''') == 2\nassert solution('''101010''') == 0\nassert solution('''111111111''') == 0\nassert solution('''0''') == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110110\") == 3\n\"\"\"\n\nS = input()\nblack = 0\nwhite = 0\nfor i in range(len(S)):\n    if S[i] == '1':\n        white += 1\n    else:\n        black += 1\n\nprint(min(black, white))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0101010\") == 3\nassert solution(\"0110110\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111\") == 3\nassert solution(\"1010\") == 1\n\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"1 2 3 4 5\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\nassert solution('6\\n7 9 10 31') == 'APPROVED'\nassert solution('7\\n9 10 31') == 'APPROVED'\nassert solution('8\\n10 31') == 'APPROVED'\nassert solution('9\\n10 31') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 6 7 8 9 10') == 'APPROVED'\nassert solution('4\\n5\\n3\\n2\\n1') == 'DENIED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\nassert solution('4\\n6 7 9 10') == 'DENIED'\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\n\"\"\"\nimport unittest\nfrom collections import deque\n\n\nclass TestClass(unittest.TestCase):\n\n    def test_given_case(self):\n        self.assertEqual(solution('RUDLUDR'), 'Yes')\n\n    def test_duplicates_in_input_are_ignored(self):\n        self.assertEqual(solution('RUUDLUDR'), 'Yes')\n\n    def test_empty_input(self):\n        self.assertEqual(solution(''), 'Yes')\n\n    def test_large_input(self):\n        self.assertEqual(solution('L'*100), 'Yes')\n\n    def test_only_RUDLR_input(self):\n        self."
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('RUDLUDR') == 'Yes'\nassert solution('LDRUDR') == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LDRUULR\") == \"No\"\nassert solution(\"RDDLRLU\") == \"Yes\"\nassert solution(\"DDLDRLLU\") == \"No\"\nassert solution(\"UDRLDDRLLUDRLRRUULDLLDDL\") == \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RLRUDR\") == \"No\"\nassert solution(\"UUUUDD\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\"\n\nimport sys\nimport string\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LURD\") == \"Yes\"\nassert solution(\"RUDLRUULRDRD\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LURDDR') == 'No'\nassert solution('UDLUR') == 'Yes'\nassert solution('RDUUR') == 'No'\n\"\"\"\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('RUDLUDR'), 'Yes')\n        self."
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5\\n') == '7'\nassert solution('5\\n3\\n2\\n4\\n3\\n5\\n') == '7'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '0'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '0'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '0'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nimport sys\n\ninput_list = sys.stdin.readlines()\n\nn = int(input_list[0].strip())\na, b, c, d, e = list(map(int, input_list[1].strip().split(\" \")))"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"10 5 2 4 3 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\nfrom math import ceil\n\nn, a, b, c, d, e = list(map(int, stdin.readline().split()))\nans = 0\n\nfor i in range(n):\n    ans += ceil(min(a, b, c) / min(a, b, c, d, e))\nprint(ans)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"1 1 1 1 1\") == \"2\"\nassert solution(\"10 100 10 100 100 100\") == \"110\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 2 4 3 5') == '7'\nassert solution('3 3 3 4 4') == '12'\nassert solution('1 1 1 1 1 1 1') == '30'\nassert solution('100 100') == '120'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom itertools import count\nimport sys\n\nN, A, B, C, D, E = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"10 10 10 10 10 10\") == \"15\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"31\"\nassert solution(\"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\") == \"501\"\nassert solution
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input().strip())\ncount = Counter(list(map(int, input().split())))\nres = 0\nfor i in range(10):\n    if count[i] == 0 or count[9 - i] == 0:\n        continue\n    res += 1\nprint(res % (10**9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\n\"\"\"\n\nn = int(input())\ncount = 0\ni = 1\nwhile i <= n:\n    if 9 in (0, i):\n        count += 1\n    if 0 in (0, i):\n        count += 1\n    i += 1\n\nprint(count)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0') == 1\nassert solution('5\\n1') == 1\nassert solution('5\\n9') == 0\nassert solution('5\\n11') == 0\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0\\n1\\n1\\n0\\n0\\n9\\n9\") == \"2\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N') == ''\nassert solution('N\\n') == ''\nassert solution('1\\n') == '0'\nassert solution('3\\n') == '1'\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3') == '2'\nassert solution('5') == '6'\n'''\n\nn = int(stdin.readline().strip())\nA = [0]\nA.extend([9]*(n-1))"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 5\n\"\"\"\nfrom collections import defaultdict\n\nfrom collections import Counter\n\n\nclass Solution:\n    def solve(self, stdin):\n        N = int(stdin)\n        seq = defaultdict(Counter)\n        a = Counter()\n        b = Counter()\n        for i in range(1, N + 1):\n            seq[i][0] = 1\n        for i in range(1, N + 1):\n            for j in range(i + 1, N + 1):\n                seq[i][9] += seq[j][9] + seq[j][0]\n        for i in range(1, N + 1):\n            for j in range(i + 1, N + 1):\n                if i + j == N:\n                    seq[i][0] += seq[j][0]\n                    seq[i][9] += seq[j][9]\n        for i in range(1, N + 1):\n            a[seq[i][0]] += 1\n            b[seq[i][9]] += 1\n        ans = 0\n        for i in range(1, 9):\n            ans += a[i] * b[9 - i]\n        return ans % (10 ** 9 + 7)\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"23\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"5\"\nassert solution(\"23\\n\") == \"23\"\nassert solution(\"20\\n\") == \"23\"\nassert solution(\"10\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == 7\nassert solution(\"20\") == 23\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"23\"\nprint('Hooray')\n\n'''\n'''\n\n'''\n'''\n\n'''\n'''\n\n'''\n\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"23\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20') == '23'\nassert solution('3') == '2'\nassert solution('0') == '2'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(20) == 23\nprint(solution(20))\n\n'''\nfrom math import sqrt\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        if int(stdin) < 2:\n            return 2\n        else:\n            for i in range(int(stdin)):\n                if i > 1:\n                    for j in range(2, int(sqrt(i)) + 1):\n                        if i % j == 0:\n                            break\n                    else:\n                        return i\n        return -1"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == 7\nassert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"3\") == 5\nassert solution(\"20\") == 23\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\nassert solution(\"4 3 1 3 2\") == \"0\"\nassert solution(\"4 3 1 3 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 3 2') == '1'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nS = list(map(int, stdin.readline().strip().split(' ')))\n\nn = len(S)\ni = 0\nj = n-1\ncount = 0\n\nwhile i < j:\n    if S[i] == S[j]:\n        i += 1\n        j -= 1\n    else:\n        count += 1\n        i += 1\n        j -= 1\n\nprint(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 1 3 2') == 1\n\n\"\"\"\n\nimport sys\nimport functools\nimport collections"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\nassert solution(\"3 1 3 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nn, *v = map(int, stdin.split())\nn = int(n)\nv = list(v)\n\ncount = 0\nfor i in range(n - 1):\n    if v[i] == v[i + 2]:\n        count += 1\n        v[i] = 1\n        v[i + 2] = 1\n\nprint(count)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(bamboo_input) == optimal_output\n\n\"\"\"\nimport math"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"1 100 1 1\") == \"0\"\nassert solution(\"3 100 100 200\") == \"4\"\nassert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n\n\"\"\"\nI'll look into this later, but it's a good question.\nThe main problem is that I'm not sure what to store the results of the functions that consumes mp in.\n\nThe function that consumes mp is a recursive function that gets called three times.\nIt returns a tuple (cost, mp_consumed, combo_bamboo_bamboo_length, length_of_bamboo_length_1, length_of_bamboo_length_2)\n\nSo, we need to store the values returned by the first two recursive calls.\nThe first one consumes 1 mp, so we store it.\nThe second one consumes 10 mp, so we store it.\n\"\"\"\n\nimport unittest\nfrom collections import namedtuple\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 100 90 80\"\n) == \"23\"\n\"\"\"\n\n########################################################################\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\n\"\"\"\nYou are given the following variables:\n - N, a positive integer\n - A, a positive integer\n - B, a positive integer\n - C, a positive integer\n - D, a positive integer\nYour task is to determine the minimum amount of money you need to rob this house at the earliest,\nwithout alerting the police.\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == '23'\nprint(solution(stdin))"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nfrom utils.trees.btree import TreeNode\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\nassert solution(\"SHINCHAN\") == \"CDEFGHA\"\n\nassert solution(\"AB\") == \"CD\"\n\nassert solution(\"ABCDE\") == \"CDEFG\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\n\"\"\"\n\nimport os\nimport sys\nimport collections\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6\nABCXYZ\n''') == 'CDEZAB'\n\nassert solution('''\n2\nABCXYZ\n''') == 'CDEZAB'\n\nassert solution('''\n0\nABCXYZ\n''') == 'ABCXYZ'\n\nassert solution('''\n26\nABCXYZ\n''') == 'ABCXYZ'\n\nassert solution('''\n27\nABCXYZ\n''') == 'ABCXYZ'"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\nassert solution(\"ABCXYZ\", 3) == \"ADGZAB\"\nassert solution(\"ABCXYZ\", 26) == \"ABCXYZ\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('3 5 2 3 2 4 5') == '3 4 2 5'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1 2 3'\nassert solution('2 3 1\\n') == '3 2 1'\nassert solution('2 5 3 4\\n') == '5 4 3 2'\nassert solution('2 5 3 5\\n') == '5 5 3 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())\n\n\nhttps://codeforces.com/gym/1296/problem/A\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\n\"\"\"\n\nfrom math import ceil, sqrt\nfrom itertools import permutations\n\nimport math\nimport itertools"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 3 2 4\") == \"3 4 2\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nres = ''\nfor i in range(n):\n    curr_cnt = 0\n    curr_max_pr = 0\n    for j in range(n):\n        if j == i:\n            continue\n        if arr[j] <= curr_max_pr:\n            curr_cnt += 1\n        if curr_cnt == k:\n            if i < n - 1:\n                res += '11'\n            else:\n                res += '22'\n            break\n        elif curr_cnt > k:\n            break\n        curr_max_pr = max(curr_max_pr, arr[j])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '21112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"1111111111\"\nassert solution(\"5 1\") == \"2222222221\"\nassert solution(\"7 1\") == \"1122221222\"\nassert solution(\"5 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5 2\"\n) == \"1111\"\nassert solution(\n\"7 1\"\n) == \"22112\"\nassert solution(\n\"5 1\"\n) == \"21112\"\nassert solution(\n\"7 1\"\n) == \"22112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1') == '211'\nassert solution('5 1') == '2112'\nassert solution('7 1') == '11212'\nassert solution('5 2') == '22212'\nassert solution('7 2') == '2222212'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n2 4 5 3 1\"\"\") == \"11111\"\nassert solution(\"\"\"5 1\n2 1 3 5 4\"\"\") == \"21112\"\nassert solution(\"\"\"7 1\n7 2 1 3 5 4 6\"\"\") == \"1121122\"\nassert solution(\"\"\"5 1\n2 4 5 3 1\"\"\") == \"21112\"\nassert solution(\"\"\"7 1\n7 2 1 3 5 4 6\"\"\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('7 2') == '22111'\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 2) == \"21112\"\nassert solution(5, 1) == \"22112\"\nassert solution(7, 1) == \"1121122\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('2\\n1 1') == 2\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''5\n1 2 1 2 3\n''') == 2\n\nassert solution(\n'''2\n100 1\n''') == 2\n\nassert solution(\n'''4\n1 3 3 7\n''') == 4"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('4\\n1 3 3 7') == 4\n\"\"\"\n\n\"\"\"\nInput\n3\n3 1 3 2\n\nOutput\n3\n\nInput\n3\n1 2 3\n\nOutput\n2\n\"\"\"\n\na = [int(i) for i in input().split()]\nn = len(a)"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1 2 3') == 2\nassert solution('100 1') == 2\nassert solution('100 2') == 4\nassert solution('100 3') == 8\nassert solution('100 4') == 16\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"4\\n2\"\nassert solution(\"6\\n1 3 7 9 15\") == \"6\\n1\"\nassert solution(\"3\\n1 2 3\") == \"1\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\n\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 1 2 3\n''') == 2\n\nassert solution('''2\n1 3\n''') == 4\n\nassert solution('''4\n1 3 7\n''') == 4\n\nassert solution('''4\n100 1\n''') == 4\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7\") == 3\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations, permutations\nfrom math import factorial\nfrom typing import Dict, Iterable, List, Tuple, Callable\n\nfrom helpers import print_assert\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('4\\n1 3 3 7') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"4\\n100 1\") == \"2\"\n\nprint(solution(input().strip()))\n\n\n\n\n\n-----\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\nassert solution('1 2 3 4 5') == '2'\n\nassert solution('16') == '1'\n\nassert solution('1 1 1 1023') == '0'\n\nassert solution('4 7 1 5 4 9') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n4 7 1 5 4 9') == '1'\nassert solution('5\\n1 2 3 4 5') == '2'\nassert solution('1\\n16') == '1'\nassert solution('4\\n1 1 1 1023') == '0'\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0011') == '4'\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11110') == '4'\nassert solution('11000') == '1'\nassert solution('10000') == '0'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1110111\") == 4\n\"\"\"\nimport time\n\nfrom typing import List\n\nclass Cube:\n    def __init__(self, s: str) -> None:\n        self.colors: List[str] = [s] * len(s)\n        self.colors[0] = \"1\"\n        self.colors[-1] = \"0\"\n        self.colors[-2] = \"1\"\n        self.colors[1] = \"0\"\n\n    def remove(self, i: int, j: int) -> None:\n        if i < 0 or j < 0 or i >= len(self.colors) or j >= len(self.colors):\n            raise ValueError(f\"Invalid indices: {i}, {j}\")\n        if self.colors[i]!= \"1\" or self.colors[j]!= \"0\":\n            raise ValueError(f\"At least one cube is not red or blue: {i}, {j}\")\n        self.colors[i] = \"0\"\n        self.colors[j] = \"0\"\n\n    def can_remove(self, i: int, j: int) -> bool:\n        if i < 0 or j < 0 or i >= len(self.colors) or j >= len(self.colors):\n            return False\n        if self.colors[i]!= \"1\" or self.colors[j]!= \"0\":\n            return False\n        return True\n\n    def get_color(self, i: int) -> str:\n        return self.colors[i]\n\n    def to_string(self) -> str:\n        return \"\".join(self.colors)\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110111\") == 4\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            min_red, max_blue = min(red), max(blue)\n            if red.index(min_red) < blue.index(max_blue):\n                return min_red - blue.index(max_blue) + 1\n            else:\n                return -1\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\"\n        low, high = 0, len(l) - 1\n        while low < high:\n            mid = low + (high - low) // 2\n            if pos:\n                if l[mid] + mid + 1 >= len(l):\n                    high = mid\n                else:\n                    low = mid + 1\n            else:\n                if l[mid] + mid >= len(l):\n                    high = mid - 1\n                else:\n                    low = mid + 1\n        return low\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\"\n        low, high = 0, len(l) - 1\n        while low < high:\n            mid = low + (high - low) // 2\n            if pos:\n                if l[mid] + mid + 1 >= len(l):\n                    high = mid\n                else:\n                    low = mid + 1\n            else:\n                if l[mid] + mid >= len(l):\n                    high = mid - 1\n                else:\n                    low = mid + 1\n        return low\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\"\n        low, high = 0, len(l) - 1\n        while low < high:\n            mid = low + (high - low) // 2\n            if pos:\n                if l[mid] + mid + 1 >= len(l):\n                    high = mid\n                else:\n                    low = mid + 1\n            else:\n                if l[mid] + mid >= len(l):\n                    high = mid - 1\n                else:\n                    low = mid + 1\n        return low\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1111') == 1\nassert solution('0111') == 1\nassert solution('1100') == 2\nassert solution('1010') == 2\nassert solution('1001') == 2\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101110011') == 4\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0011\") == 4\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0011') == 4\nassert solution('0111') == 3"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10011') == '4'\nassert solution('11101') == '1'\nassert solution('111111') == '0'\nassert solution('11111') == '0'\nassert solution('100') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11001100110011001111110011') == 12\nassert solution('111011110111111110111101111011') == 17\nassert solution('1111111011111111110111101111011') == 22\nassert solution('11101111011111111110111101111011') == 17\nassert solution
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\n---------------------------------------"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"2 2\\n1 3\\n2 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"4 2\\n3 4\\n1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\nassert solution('''3 2\n1 2\n2 3''') == '3'\nassert solution('''5 5\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6''') == '0'\nassert solution('''5 5\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6''') == '5'\n\n---\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n5 6') == '2'\nassert solution('4 2\\n1 3\\n2 4') == '2'\nassert solution('3 2\\n2 3\\n1 2') == '0'\nassert solution('3 2\\n2 2\\n1 2') == '1'\n\"\"\"\n\n\"\"\"\nGiven the number of ID cards N and the number of gates M, followed by N lines, each containing two integers L_i and R_i (separated by a space):\n\n- Each ID card has a range of L_i to R_i, inclusive.\n- All the ID cards must have at least one card with range L_i to R_i.\n- If there is at least one card with range L_i to R_i, then the gate can be passed.\nHow many of the ID cards allow us to pass all the gates alone?\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq L_i \\leq R_i \\leq N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nL_1 R_1\nL_2 R_2\n\\vdots\nL_M R_M\n\n-----Output-----\nPrint the number of ID cards that allow us to pass all the gates alone.\n\n-----Sample Input-----\n4 2\n1 3\n2 4\n\n-----Sample Output-----\n2\n\nTwo ID cards allow us to pass all the gates alone, as follows:\n - The first ID card does not allow us to pass the second gate.\n - The second ID card allows us to pass all the gates.\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 1\") == 2\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n\nsys.setrecursionlimit(15000)\n\n\"\"\"\nO(N) solution with optimized space\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\nprint('Test pass.')"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\n-----\nGiven an integer array A of size N. The task is to remove all the duplicates from it. You need to change the order of the elements too.\n\nNote: You should change the order of the element, not remove or add any element.\n\nInput Format:\nFirst line of input contains T, number of testcases. Its followed by 2T lines. First line of each testcase contains N, the size of the array A. The next line contains N space separated integers of array A.\n\nConstraints:\n1 <= T <= 100\n1 <= N <= 106\n1 <= A[i] <= 106\n\nOutput Format:\nFor each testcase, print the sorted array on a new line.\n\nSample TestCase 1\nInput\n2\n5\n1 2 2 2 3\n4\n1 1 1 1\nOutput\n2 3\n1 1 1\n\n-----\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\nimport sys\nfrom math import inf"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 1\") == \"2\"\nassert solution(\"6 3 7 6 8 9\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nThis problem is a variation of job scheduling problem.\nIn this problem, we can schedule jobs on the basis of their start time. So, the idea is to schedule the jobs in such way that there is no overlap in job's schedules.\n\nFor a particular job j, we can pick the time interval (a, b) in which j will be executed. We can pick any time interval (a, b) such that all the previously scheduled jobs are done before b.\nWe can pick (a, b) in the following way:\n - Pick the time interval (a, b) such that there is no overlap with previously scheduled jobs.\n - (a, b) is a local optimum.\nNote that if (a, b) is not an optimum, (a, b') and (a', b) are also local optima.\n\nSo, the problem is now reduced to scheduling n jobs. We can solve this by applying dynamic programming.\n\"\"\"\n\nfrom typing import List\nfrom bisect import bisect_left\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5\n2 1 -3\"\"\") == \"3\"\n\nassert solution(\"\"\"2 4\n-1 1\"\"\") == \"4\"\n\nassert solution(\"\"\"4 10\n2 4 1 2\"\"\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n2 1 -3') == '3'\nassert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n-1 1') == '4'\nassert solution('4 10\\n1 1') == '0'"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\\n1 1\") == \"4\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"3 3\\n2 1 -3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n2 4 1 -3') == '3'\nassert solution('4 10\\n2 4 1 2') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 5\n2 1 -3\n''') == '3'\nassert solution('''\n4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nprint(solution(\"4 8 6 3 12 9\"))\n\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nprint(solution(\"42 28 84 126\"))\n\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nprint(solution(\"1000000000000000000 3000000000000000000\"))"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n\n\"\"\"\n\nimport numpy"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\", 'Test 1 failed'\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\", 'Test 2 failed'\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\", 'Test 3 failed'\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 6 3 12 9\\n') == '9 3 6 12 4 8'\nassert solution('42 28 84 126\\n') == '126 42 84 28'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('-1 2 5 8 11') == '1'\n\nprint('The code ran Correctly')\n\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\nassert solution(\"5\\n2 3 4 7 10 12\") == \"1\"\nassert solution(\"5\\n2 3 4 8 10 12\") == \"1\"\nassert solution(\"5\\n2 3 4 8 11 12\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3') == '0 2'\nprint('Test pass.')\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 3\n''') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\n\"\"\"\nSolution 3"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '0 2'\n\n\"\"\"\n\nfrom pydantic import BaseModel, validator\n\nclass CodingTest(BaseModel):\n    a: int\n    b: int\n    k: int\n\n    @validator('a', 'b', 'k')\n    def check_length(cls, value):\n        if len(str(value)) > 12:\n            raise ValueError('Length of integers should be less or equal to 12')\n        return value"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == '0 2'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1\") == \"0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"100\") == \"1\"\n\"\"\"\n\nX = int(input())\nbalance = 100\nyear = 0\nwhile balance < X:\n    balance *= (1 + 0.01)\n    year += 1\n\nprint(year)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '1'\nassert solution('100') == '5'\nassert solution('101') == '1'\nassert solution('103') == '3'\n\nprint('PASSED')\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('103') == '3'\nprint(solution(stdin), end='')\n\nSample Input\n100\n\nSample Output\n3\n\nExplanation\nThe first year's interest is 1 yen, which is discarded.\nThe second year's interest is 1 yen, which is discarded.\nThe third year's interest is 2 yen, which is added to the balance.\nThus, the third year is 103 yen, which is above the limit.\nThus, it takes three years for the balance to reach 103 yen or above.\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\nimport math\n\nX = int(input())\n\nprint(math.floor(math.log(X, 10) / math.log(1 + 1, 10)) + 1)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '1'\nassert solution('103') == '3'\nassert solution('100') == '0'\nassert solution('105') == '2'\nassert solution('1020') == '5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"103\") == '3'\nassert solution(\"100\") == '1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nans = 0\n\nwhile N >= 100:\n    ans += 1\n    N = N - 100 * (1 + 1 / 100)\n\nprint(ans)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101\\n102\\n103') == '3'\n\"\"\"\n\nx = int(stdin.readline())\ncnt = 0\nwhile True:\n    if x >= 100:\n        x += (1/100) * x\n        cnt += 1\n    else:\n        break\nprint(cnt)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '12'\nassert solution('4') == '28'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline())\n\n\"\"\"\nf(a, b, c) = 1 + min(f(a-1, b, c), f(a, b-1, c), f(a, b, c-1))\n\"\"\"\n\ndp = [[[0 for _ in range(K + 1)] for _ in range(K + 1)] for _ in range(K + 1)]\n\nfor a in range(1, K + 1):\n    for b in range(1, K + 1):\n        for c in range(1, K + 1):\n            if a == 1 and b == 1 and c == 1:\n                dp[a][b][c] = 1\n                continue\n\n            dp[a][b][c] = 1 + min(\n                dp[a - 1][b][c],\n                dp[a][b - 1][c],\n                dp[a][b][c - 1]\n            )\n\nprint(sum([sum([sum(row) for row in dp]) for _ in range(K + 1)]) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '9'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '9'\nassert solution('2\\n3') == '6'\nassert solution('3\\n3') == '1'\nassert solution('4\\n4') == '1'\nassert solution('5\\n5') == '1'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 6') == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 6') == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3 4 6') == 10\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\") == \"10\"\nprint(solution(\"3 4 6\"))\n\n\n3 4 6\n\n3 4 6\n\n-----Explanation-----\nFor m = 0, f(m) = 0.\nFor m = 1, f(m) = 0 + 4 + 6 = 10.\nFor m = 2, f(m) = 0 + 4 + 6 = 10.\nFor m = 3, f(m) = 0 + 4 + 6 = 10.\nFor m = 4, f(m) = 4 + 6 = 10.\nFor m = 5, f(m) = 0 + 4 + 6 = 10.\nFor m = 6, f(m) = 0 + 4 + 6 = 10.\nFor m = 7, f(m) = 0 + 4 + 6 = 10.\nFor m = 8, f(m) = 0 + 4 + 6 = 10.\nFor m = 9, f(m) = 0 + 4 + 6 = 10.\nFor m = 10, f(m) = 0 + 4 + 6 = 10.\n10 is the maximum value of f.\n\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2\\n1 2 3 4') == '10'\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\\n6\") == \"10\"\nprint(solution(\"3\\n4\\n6\"))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == ans\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split(\" \")]\n\narr.sort()\ntotal = 0\n\nfor i in range(n):\n    total += arr[n - i - 1]\n\nprint(total)\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n2 2\\n') == 'Yes'\nassert solution('2 1\\n2 2\\n3 1\\n3 3\\n') == 'No'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n6 6\\n4 4\\n3 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nprint(solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\") == \"No\"\nassert solution(\"2\\n3 3\") == \"Yes\"\nassert solution(\"2\\n1 1\") == \"Yes\"\nassert solution(\"5\\n1 1 1 2 2\") == \"Yes\"\nassert solution(\"5\\n1 1 1 3 3\") == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\"\n\nN = int(stdin.readline())\ndice = []\nfor i in range(N):\n    dice.append(list(map(int, stdin.readline().split())))\n\nfirst, second = None, None\nfor i in range(N):\n    if not first:\n        if dice[i][0] == dice[i][1]:\n            first = i\n    elif not second:\n        if dice[i][0] == dice[i][1]:\n            second = i\n    else:\n        if dice[i][0] == dice[i][1] and dice[i+1][0] == dice[i+1][1]:\n            if i-first >= 3:\n                print(\"Yes\")\n                return\n\nprint(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\nassert solution(\"5\\n1 2\\n3 3\\n4 4\\n3 3\\n\") == \"No\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\nr = int(input())\n\nx = r - 1\n\nprint(x * x)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\nprint(solution('2'))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == 1\nassert solution('5\\n') == 2\nassert solution('6\\n') == 3\nassert solution('7\\n') == 5\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 0\nassert solution(\"100\") == 0\nassert solution(\"1.5\") == 0\nassert solution(\"0\") == 0\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nimport math\n\nr = int(input())\nprint(math.ceil(r ** 2 * 4 / math.pi))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nn = int(input())\nprint(n * (n + 1) // 2)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\n\"\"\"\n1.1\n\nGiven r, how many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n1.2\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n2.1\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n2.2\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n2.3\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n3.1\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length 1 and width 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length 1 and width 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n3.2\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length 1 and width r?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length 1 and width r, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n3.3\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length r and width 2?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length r and width 2, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 2.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n4.1\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length r and width 2?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length r and width 2, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 2.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n4.2\n\nGiven is an integer r. How many times is the"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 8 5 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('4\\n1 2 4 3') == 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"5\\n4 3 2 1\") == \"No\"\nassert solution(\"2\\n1 1\") == \"Yes\"\nassert solution(\"5\\n4 3 2 1\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n3 8 5 1''') == \"Yes\"\nassert solution('''4\n8 2 5 1''') == \"No\"\nassert solution('''3\n8 5 5 2''') == \"No\"\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n8 9 5 1') == 'Yes'\n\n\"\"\"\n\nN = int(input())\nL = [int(item) for item in input().split(' ')]\n\nmax_index = L.index(max(L))\nfor i, item in enumerate(L):\n    if i!= max_index:\n        if L[i] > L[max_index] + L[i]:\n            print('No')\n            break\nelse:\n    print('Yes')\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n3 8 5 1'\n) == 'Yes'\nassert solution(\n    '4\\n3 6 5 1'\n) == 'No'\nassert solution(\n    '6\\n3 6 5 1'\n) == 'Yes'\nassert solution(\n    '5\\n3 8 5 1'\n) == 'Yes'\nassert solution(\n    '5\\n3 7 5 1'\n) == 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 8 5 1\") == \"Yes\"\nassert solution(\"4 3 8 6 1\") == \"No\"\nassert solution(\"3 8 5 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nn = int(input().strip())\nl = list(map(int, input().strip().split()))\n\nmax_l = l[0]\nfor i in range(1, n):\n    max_l = max(max_l, l[i])\n\ncount = 0\nfor i in range(n):\n    count += l[i]\n\nprint(\"Yes\" if count > max_l else \"No\")\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\nassert solution(\"5 5\\n1 7\\n3 2\\n1 7\\n3 2\\n1 7\") == \"703\"\n\"\"\"\n\nN, M = map(int, input().split())\ns, c = [], []\nfor _ in range(N):\n    s.append(int(input()))\n    c.append(int(input()))\n\ns = sorted(s)\nc = sorted(c)\n\ns_idx = c_idx = 0\ns_min = s_max = 0\nc_min = c_max = 0\nwhile s_idx < N and c_idx < M:\n    if s[s_idx] >= c[c_idx]:\n        s_min, s_max = s[s_idx] + c[c_idx], s[s_idx] + c[c_idx]\n        break\n    s_idx += 1\n    c_min, c_max = c[c_idx] + s[s_idx], c[c_idx] + s[s_idx]\n\nprint(c_min if c_min < s_max else -1)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\n'''\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(''), -1)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7\\n') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\nimport sys"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\n\"\"\"\n3 3\n1 7\n3 2\n1 7\n\n2\n1 7\n3 2\n1 7\n\n-1\n\n2\n1 7\n3 2\n1 7\n\n-1\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 5\\n3 2\\n4 4\\n2 3\") == \"702\"\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == 9\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"9\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3') == '9'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3,2) == 9\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n\") == \"9\"\n\"\"\"\n\n\"\"\"\n    Solution\n    \n    N, K = map(int, stdin.readline().split())\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if (i + j) % K == 0 and (i * j) % K == 0:\n                count += 1\n    print(count)\n    \n    \n    \n    Notes\n    \n    - I'd like to be able to test this solution if I have the time\n    - I have the problem to solve to be like this\n    - When I tried to use modulus %, I got a runtime error.\n    - It was unclear whether I was using the left or the right hand side of the modulus\n    - There was no way for me to find out what was wrong\n\"\"\"\n\n\"\"\"\n    Solution\n    \n    N, K = map(int, stdin.readline().split())\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if (i + j) % K == 0 and (i * j) % K == 0:\n                count += 1\n    print(count)\n    \n    \n    \n    Notes\n    \n    - I'd like to be able to test this solution if I have the time\n    - I have the problem to solve to be like this\n    - When I tried to use modulus %, I got a runtime error.\n    - It was unclear whether I was using the left or the right hand side of the modulus\n    - There was no way for me to find out what was wrong\n\"\"\"\n\n\"\"\"\n    Solution\n    \n    N, K = map(int, stdin.readline().split())\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if (i + j) % K == 0 and (i * j) % K == 0:\n                count += 1\n    print(count)\n    \n    \n    \n    Notes\n    \n    - I'd like to be able to test this solution if I have the time\n    - I have the problem to solve to be like this\n    - When I tried to use modulus %, I got a runtime error.\n    - It was unclear whether I was using the left or the right hand side of the modulus\n    - There was no way for me to find out what was wrong\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 6\nassert solution(\"100 11\") == 12\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 2\") == \"9\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1,1) == 1\nassert solution(3,2) == 9\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2\n''') == 9\nprint(\"test passed\")\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nfrom enum import Enum\nfrom functools import reduce\n\nclass Solution:\n    def binary_to_decimal(self, binary: str) -> int:\n        \"\"\"\n        1. Create an enum for every character.\n        2. Return the sum of the enum of the characters of binary, power of 2, which is the base -2 representation.\n        \"\"\"\n        class Binary(Enum):\n            zero = 0\n            one = 1\n        return reduce(lambda x, y: x + (y.value * (2**int(y))), [x for x in Binary if x in binary], 0)\n\n    def decimal_to_binary(self, decimal: int) -> str:\n        \"\"\"\n        1. Create an enum for every character.\n        2. For every character in Binary, divide the decimal number by (-2), keep modulo of the value by 2 and append to the list.\n        3. Reverse the list, return the string.\n        \"\"\"\n        class Binary(Enum):\n            zero = 0\n            one = 1\n        return \"\".join([x.name for x in [Binary(int(i)) for i in bin(decimal)[2:]]])[::-1]"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == '1011'\nassert solution('3') == '11'\nassert solution('8') == '1000'\nassert solution('6') == '110'\nassert solution('11') == '1001'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\n\"\"\"\nAn integer can be expressed as the sum of all powers of 2 in base -2. \nIn other words, for every integer N, there exists an integer M, such that N = 2^M + 1.\n\nWhat is the largest integer N such that there is no integer M such that N = 2^M + 1?\n\n-----Constraints-----\n - N \\leq 10^9\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'\nassert solution('9') == '1001'\nassert solution('10') == '1010'\nassert solution('-10') == '1010'\nassert solution('100') == '1011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-9') == '1011'\nassert solution('9') == '1001'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11) == '11'\nassert solution(10) == '101'\nassert solution(0) == '0'\nassert solution(1) == '1'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\nassert solution(\"4 5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100\\n1 101\\n1 102\\n1 103\\n1 104\\n1 105\\n1 106\\n1 107\\n1 108\\n1 109\\n1 110\\n1 111\\n1 112\\n1 113\\n1 114\\n1 115\\n1 116\\n1 117\\n1 118\\n1 119\\n1 120\\n1 121\\n1 122\\n1 123\\n1 124\\n1 125\\n1 126\\n1 127\\n1 128\\n1 129\\n1 130\\n1 131\\n1 132\\n1 133\\n1 134\\n1 135\\n1 136\\n1 137\\n1 138\\n1 139\\n1 140\\n1 141\\n1 142\\n1 143\\n1 144\\n1 145\\n1 146\\n1 147\\n1 148\\n1 149\\n1 150\\n1 151\\n1 152\\n1 153\\n1 154\\n1 155\\n1 156\\n1 157\\n1 158\\n1 159\\n1 160\\n1 161\\n1 162\\n1 163\\n1 164\\n1 165\\n1 166\\n1 167\\n1 168\\n1 169\\n1 170\\n1 171\\n1 172\\n1 173\\n1 174\\n1 175\\n1 176\\n1 177\\n1 178\\n1 179\\n1 180\\n1 181\\n1 182\\n1 183\\n1 184\\n1 185\\n1 186\\n1 187\\n1 188\\n1 189\\n1 190\\n1 191\\n1 192\\n1 193\\n1 194\\n1 195\\n1 196\\n1 197\\n1 198\\n1 199\\n1 200\\n1 201\\n1 202\\n1 203\\n1 204\\n1 205\\n1 206\\n1 207\\n1 208\\n1 209\\n1 210\\n1 211\\n1 212\\n1 213\\n1 214\\n1 215\\n1 216\\n1 217\\n1 218\\n1 219\\n1 220\\n1 221\\n1 222\\n1 223\\n1 224\\n1 225\\n1 226\\n1 227\\n1 228\\n1 229\\n1 230\\n1 231\\n1 232\\n1 233\\n1 234\\n1 235\\n1 236\\n1 237\\n1 238\\n1 239\\n1 240\\n1 241\\n1 242\\n1 243\\n1 244\\n1 245\\n1 246\\n1 247\\n1 248\\n1 249\\n1 250\\n1 251\\n1 252\\n1 253\\n1 254\\n1 255\\n1 256\\n1 257\\n1 258\\n1 259\\n1 260\\n1 261\\n1 262\\n1 263\\n1 264\\n1 265\\n1 266\\n1 267\\n1 268\\n1 269\\n1 270\\n1 271\\n1 272\\n1 273\\n1 274\\n1 275\\n1 276\\n1 277\\n1 278\\n1 279\\n1 280\\n1 281\\n1 282\\n1 283\\n1 284\\n1 285\\n1 286\\n1 287\\n1 288\\n1 289\\n1 290\\n1 291\\n1 292\\n1 293\\n1 294\\n1 295\\n1 296\\n1 297\\n1 298\\n1 299\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 10\\n1 10\") == \"20\"\nassert solution(\"4 5\\n1 10\\n1 10\\n1 10\") == \"30\"\nassert solution(\"4 5\\n1 10\\n1 10\\n1 10\\n1 10\") == \"40\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\") == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\nassert solution(\"5 10\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\nn, m = map(int, sys.argv[1:])\n\nA = [0] * n\nB = [0] * n\n\nfor i in range(n):\n    a, b = map(int, sys.stdin.readline().split())\n    A[i] = a\n    B[i] = b\n\nB = list(map(lambda x: x-1, B))\n\nresult = 0\nfor i in range(n):\n    for j in range(m):\n        if B[i] - j < 0:\n            break\n        result += A[i] * (B[i] - j)\n\nprint(result)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\ncans = sorted([[int(a), int(b)] for a, b in [input().split() for _ in range(N)]])\n\ncost = 0\nfor i in range(len(cans)):\n    cost += cans[i][1]\n    if cost > M:\n        print(cost - cans[i][1])\n        sys.exit()\n\nprint(cost)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\"\"\"\n\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nimport sys\n\nN, M = [int(x) for x in input().split()]\n\nA = []\nB = []\nfor i in range(N):\n    a, b = [int(x) for x in input().split()]\n    A.append(a)\n    B.append(b)\n\nA_sum = sum(A)\nB_sum = sum(B)\ntotal_sum = A_sum + B_sum\n\ni = 0\nj = N - 1\nresult = 0\ntotal_sum = 0\nwhile total_sum < M:\n    if j == i:\n        result = max(A_sum, B_sum)\n        break\n    total_sum += A[i] + B[j]\n    i += 1\n    j -= 1\n\nresult = max(result, total_sum)"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nfrom typing import List\nfrom math import ceil\n\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        n, m = map(int, stdin[0].split())\n        a: List[int] = list(map(int, stdin[1].split()))\n        b: List[int] = list(map(int, stdin[2].split()))\n        print(sum(a[i] * b[i] for i in range(n)) // m)\n\n\nsolution = Solution().solve\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 3 4\") == '2'\nassert solution(\"5\\n5 3 4 5\") == '3'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('3 2 1') == '0'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"1\\n3\\n2\") == \"1\"\nassert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nfrom typing import Iterable\n\nN = int(input())\nsequence = list(map(int, input().split()))\n\ncount = 0\nwhile True:\n    if count >= N:\n        break\n    max_height = max(sequence)\n    index = sequence.index(max_height)\n    if index == 0:\n        break\n    sequence = sequence[index - 1:] + sequence[:index - 1]\n    count += 1\n\nprint(count)"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n10 4 8 7 3') == 2\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 8 7 3\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\nThe maximum number of times you can move is the minimum of the heights of all squares you could have reached before.\nIf the height of the square you're currently standing on is H, then the maximum number of times you can move is H - 1.\n\nTime Complexity: O(N)\nSpace Complexity: O(1)\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 1 1 1 1\n''') == '5'\n\nassert solution('''5 3\n3 3 3 3 3\n''') == '0'"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 2 4 5\") == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2 4 5\\n') == 1\nassert solution('1 2 3 4 5\\n') == 2\nassert solution('1 2 2 4 5\\n') == 1\nassert solution('1 2 3 3 3\\n') == 0\n\n\"\"\"\n\nimport heapq\n\nclass Node(object):\n    def __init__(self, index, value, left, right):\n        self.index = index\n        self.value = value\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(index={self.index}, value={self.value}, left={self.left}, right={self.right})'\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n    def __le__(self, other):\n        return self.value <= other.value\n\n    def __gt__(self, other):\n        return self.value > other.value\n\n    def __ge__(self, other):\n        return self.value >= other.value\n\n    def __eq__(self, other):\n        return self.value == other.value\n\n    def __ne__(self, other):\n        return self.value!= other.value\n\n    def __hash__(self):\n        return hash(self.value)"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 3\\n2 2 4 5\") == \"0\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\", \"Wrong answer\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\", \"Wrong answer\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\", \"Wrong answer\"\n\nprint(\"All cases passed\")\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 1 1 1 1') == '0'\nassert solution('5 3\\n1 2 2 2 2') == '0'\nassert solution('5 3\\n1 1 2 2 3') == '1'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('5 4\\n1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 2 3') == '1'\nassert solution('1 2 2 3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == '1'\n\nassert solution(\"5 3\\n1 2 3 4 5\") == '2'\n\nassert solution(\"5 3\\n1 2 3 3 3\") == '0'\n\nprint(solution(\"10 2\\n8 2 9 5 6 7 0 7 0 0\"))"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5\n1 2 2 4 2 3''') == '3'"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 3 4 2''') == '1'\n\nassert solution('''4 3\n1 3 4 2''') == '2'\n\nassert solution('''5 3\n1 3 4 2 5''') == '3'\n\nassert solution('''5 3\n5 5 5 5 5''') == '0'\n\nassert solution('''10 3\n2 2 2 2 2 2 2 2 2 2 2''') == '9'"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 2 3\\n\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 2 2 4 2 3\\n\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5\\n3 3 2 1 1 1 3') == '4'\nassert solution('6 5\\n1 2 2 4 2 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 1\nassert solution(\"8 4\") == 0\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 3 4') == '4'\nassert solution('4 2\\n1 2 1 3') == '0'\nassert solution('7 5\\n1 2 2 4 2 3') == '3'\nassert solution('7 5\\n1 2 2 1 3') == '2'\nassert solution('7 5\\n1 2 3 3 3') == '2'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 2 3\") == \"3\"\nassert solution(\"1 2 2 3 2 1\") == \"4\"\nassert solution(\"1 2 2 3 2 1\") == \"4\"\n\nassert solution(\"3 3 2 1 1 1 3\") == \"4\"\nassert solution(\"3 3 2 1 1 3\") == \"3\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nfirst = 0\nlast = n - 1\n\nmoves = 0\nwhile first < last and a.count(a[first]) < k:\n    first += 1\n    moves += 1\n\nwhile first < last and a.count(a[last]) < k:\n    last -= 1\n    moves += 1\n\nprint(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a_1, a_2,..., a_n) == output\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\n'''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\"\nassert solution(\"4\\n5 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"9\"\nassert solution(\"4\\n5 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"1000\"\nassert solution(\"4\\n5 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"42000000000000\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str) == test_out\nprint(solution(stdin))\n\n-----Problem-----\n\nThis problem was asked by Google.\n\nGiven two strings A and B, find the minimum number of steps required to make A equal to B.\n\nYou can swap any two characters of A for any two characters of B, i.e. swap A[i] with B[j]. Also, you can swap any two characters of B for any two characters of A if this results in a valid string.\n\nFor example, if A = \"XXYYZZ\" and B = \"YYXXZA\" then the minimum number of steps required is 3:\n\n1. Swap A[0] with B[0] -> \"YYXXZZ\"\n2. Swap A[1] with B[2] -> \"YZXXZZ\"\n3. Swap A[2] with B[1] -> \"YXZYZZ\"\n\n\"\"\"\n\ntest_str = \"\"\"10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\n\ntest_out = \"\"\"10\n9\n1000\n42000000000000\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10\\n9\\n1000\\n42000000000000\\n'\n\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import namedtuple, deque"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(example) == answer"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n3 4 5\\n\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"100 30\") == \"7\"\nassert solution(\"100 100\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3\n3 4 5\n''') == '2'\n\n------Solution------\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\\n3 4 5\\n3 4 5\") == 2\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 6) == 2\n\n-------------------------\n\nimport math"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\nassert solution(\"1 1\\n1 1\") == 1\n\nprint(solution(\"3 6\\n3 4 5\")) # 2\nprint(solution(\"1 1\\n1 1\")) # 1"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\n-----Explanation-----\nThe last line was not announced correctly, so the rules of shiritori was not observed.\n\n---"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nhoge\\ngoogle\\ngoogle\\nenigma') == 'No'\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\nhoge\nenglish\nhoge\nenigma\n''') == 'Yes'\nassert solution('''\n5\nhoge\nenglish\nhoge\nhoge\nenglish\n''') == 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == \"Yes\"\nprint(solution(sys.stdin.read()))\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == 6\n\"\"\"\n\n\"\"\"\nTest case\n2 3\n5 10\n2 2\n10 10\n2 10\n10 10\n2 2\n10 10\n2 10\n10 10\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == 6\nassert solution(\"4 4\") == 8\nassert solution(\"10 10\") == 40\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6'\nassert solution('1 10') == '6'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4') == '2\\n2'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"6 6\") == \"2\"\n\n-------"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"4 6\") == \"4\"\n\"\"\"\n\na, b = map(int, input().split())\n\nc = (a + b) // 2\n\nprint(c + a % 2)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '6'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint(solution('sardine'))"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\nimport unittest\n\nclass TestReplace(unittest.TestCase):\n    def test_replace(self):\n        self.assertEqual(solution('sardine'), 'xxxxxxx')"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint(solution('sardine'))\n\n-You can use stdin.readline() to read a single line of input.\n-You can use stdin.readlines() to read all lines of input.\n-You can use print(stdin.read()) to print the entire input.\n-You can use stdin.readlines() to read the entire input.\n\nThe input() function in Python 2 will only accept one argument. If you want to allow multiline input, use the raw_input() function instead.\n\n-Python 3 does not have any built in functions that only take a single argument.\n-For reading a single line, use sys.stdin.readline(). For reading multiple lines, use sys.stdin.readlines()\n-For printing output, use the print(variable, end='') function.\n\n-As an exercise, read a single line of input from the user, and output the result back to the user.\n\n-Consider using the input() function in Python 2.7 only, as it allows for multiline input.\n\n-When writing your own functions, you can reuse the built in functions."
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nprint(solution(\"sardine\"))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('sardine') == 'xxxxxxx'\nassert solution('abcde') == 'xxxxxxx'\nassert solution('aaaaaa') == 'xxxxxxx'\nassert solution('abc') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 1 3') == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nYou are given a string. You have to perform the following operations:\n\n- Remove the characters of the string which have even index values and those whose ASCII values are less than or equal to 32.\n- Remove the characters of the string which have odd index values and those whose ASCII values are less than or equal to 32.\n- Print the resulting string.\n\nNote: We can't use.split() and.join() operations. We can only use split() operation to split a string on spaces.\n\nInput Format\nA string, S.\n\nOutput Format\nThe new string, obtained after performing the given operations.\n\nConstraints\n1 < |S| < 10^4\n\nSample Input 1\nR@#et\n\nSample Output 1\nrce\n\nSample Input 2\n@$#%!^&\n\nSample Output 2\n@$#%!^&\n\nSample Input 3\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == 'No'\nassert solution('5\\n1 2 3 4 5') == 'Yes'\nassert solution('7\\n4 2 2 2 5 1 5 3') == 'Yes'\nassert solution('8\\n1 5 2 4 2 3 3 5 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 1 1 3\\n') == 'Yes'\n\n-----\n1. sort\n2. reversed\n3. loop\n4. while loop\n5. if else\n\n----\n'''\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n1\\n1\\n3') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3 -10\\n\"\n    \"1 2 3\\n\"\n    \"3 2 1\"\n    ) == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n3 2 1\\n1 2 2\") == 1\n\"\"\"\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())\nb_l = list(map(int, sys.stdin.readline().split()))\na_l = []\nfor line in sys.stdin:\n    a_l.append(list(map(int, line.split())))\n\ncnt = 0\nfor i in range(len(a_l)):\n    for j in range(len(a_l[i])):\n        if a_l[i][j] * b_l[j] + c > 0:\n            cnt += 1\nprint(cnt)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n-----TEST 1-----\n\n-----Test 2-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\n----\n\"\"\"\n\nimport ast\nimport sys\nfrom typing import List\n\nfrom typing import List\n\nINPUT_PREFIX_LEN = 3\nINPUT_INFIX_LEN = 2\nINPUT_INFIX_DELIM =''\nINPUT_POSTFIX_LEN = 1\nINPUT_LINE_SEPARATOR = '\\n'\nINPUT_ARRAY_SEPARATOR =''\n\nassert INPUT_INFIX_DELIM not in INPUT_INFIX_LEN\nassert INPUT_INFIX_LEN == INPUT_INFIX_LEN.__len__()\nassert INPUT_POSTFIX_LEN == INPUT_POSTFIX_LEN.__len__()\nassert INPUT_LINE_SEPARATOR == INPUT_LINE_SEPARATOR.__len__()\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\") == 1\nprint(solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\"), 1)\nprint(solution(\"3 3 0\\n2 4 7\\n5 6 2\\n1 3 4\\n3 1 2\\n6 1 1\\n1 3 3\\n4 5 1\\n5 2 2\\n4 6 9\\n2 6 3\\n2 5 1\\n2 1 4\\n1 4 2\\n6 5 4\\n4 1 3\\n1 2 3\\n6 5 3\\n1 2 3\\n4 5 1\\n5 3 1\\n5 1 3\\n4 3 2\\n6 2 5\\n5 3 2\\n3 4 2\\n6 5 3\\n3 1 2\\n5 1 1\\n2 3 4\\n6 4 4\\n2 1 1\\n6 4 2\\n4 5 4\\n6 3 2\\n6 2 5\\n4 2 4\\n6 4 1\\n2 4 1\\n3 5 3\\n3 1 4\\n5 2 3\\n3 2 2\\n6 2 3\\n3 4 2\\n4 3 3\\n1 4 1\\n6 2 2\\n5 2 3\\n4 1 5\\n2 2 1\\n6 5 1\\n4 5 4\\n6 2 4\\n4 4 3\\n3 5 4\\n4 2 1\\n4 1 3\\n5 2 4\\n5 4 3\\n2 1 3\\n3 5 2\\n2 2 4\\n4 4 4\\n2 2 1\\n3 5 3\\n6 3 3\\n3 2 3\\n6 5 1\\n4 4 5\\n6 1 5\\n6 5 2\\n4 5 2\\n3 2 1\\n5 2 3\\n3 4 2\\n4 1 1\\n6 2 2\\n6 4 1\\n1 5 1\\n3 1 5\\n1 4 3\\n3 4 1\\n2 3 2\\n6 2 5\\n5 1 1\\n4 1 4\\n5 2 1\\n6 2 4\\n1 2 1\\n1 2 2\\n6 3 2\\n2 5 2\\n2 3 3\\n3 5 3\\n4 2 1\\n4 2 1\\n6 4 4\\n5 3 3\\n4 1 1\\n1 2 1\\n1 3 4\\n4 3 2\\n1 1 3\\n6 5 1\\n6 5 2\\n5 1 1\\n5 1 1\\n4 1 1\\n6 1 5\\n3 2 5\\n5 4 2\\n2 4 1\\n4 6 1\\n1 1 1\\n6 3 1\\n1 1 4\\n5 3 2\\n3 4 4\\n6 1 2\\n5 2 2\\n4 6 3\\n1 4 4\\n2 5 1\\n1 5 1\\n1 1 1\\n6 1 4\\n5 2 4\\n2 1 1\\n3 6 3\\n5 6 4\\n6 4 3\\n2 6 1\\n4 1 4\\n4 2 1\\n6 2 2\\n5 6 3\\n4 5 5\\n5 1 4\\n1 3 5\\n5 2 4\\n6 4 1\\n6 3 3\\n3 2 5\\n6 4 5\\n5 3 3\\n1 1 4\\n2 4 2\\n6 1 5\\n6 1 5\\n2 4 1\\n5 6 2\\n4 1 4\\n6 4 3\\n6 4 1\\n2 2 1\\n4 2 2\\n1 3 3\\n6 2 4\\n6 1 5\\n6 5 2\\n4 3 5\\n6 5 3\\n5 1 1\\n5 2 4\\n4 3 5\\n6 2 2\\n5 5 3\\n5 2 4\\n1 2 1\\n6 2 1\\n5 5 1\\n6 3 2\\n6 3 3\\n5 1 1\\n1 3 4\\n3 5 2\\n6 4 1\\n4 5 2\\n6 5 4\\n5 2 2\\n2 1 1\\n4 1 3\\n6 4 2\\n6 4 2\\n6 3 4\\n1 4 1\\n5 4 1\\n6 1 3\\n5 1 1\\n6 3 3\\n1 1 1\\n5 2 3\\n3 1 4\\n1 2 1\\n6 2 4\\n6 1 1\\n6 3 1\\n1 1 5\\n5 6 4\\n6 5 4\\n1 1 1\\n3 5 2\\n2 1 1\\n2 1 1\\n5 6 3\\n5 4 3\\n6 2 3\\n6 1 5\\n4 4 3\\n1 1 3\\n3 2 1\\n4 4 1\\n2 2 1\\n6 4 2\\n3 6 2\\n1 2 2\\n6 2 2\\n4 6 3\\n1 1 3\\n2 6 3\\n5 6 2\\n1 2 4\\n2 5 1\\n2 1 1\\n6 2 3\\n6 2 2\\n4 5 2\\n5 2 1\\n6 2 2\\n5 2 1\\n6 3 1\\n5 6 4\\n4 6 3\\n3 1 5\\n6 3 5\\n6 5 1\\n6 5 4\\n2 2 2\\n3 5 2\\n5 3 1\\n5 2 3\\n1 4 4\\n1 1 3\\n5 1 4\\n6 4 5\\n6 2 2\\n6 3 4\\n6 1 3\\n6 2 1\\n5 6 2\\n6 3 2\\n3 2 5\\n4 1 3\\n6 3 1\\n6 5 1\\n5 2 2\\n5 1 1\\n4 1 2\\n6 1 3\\n5 6 4\\n6 3 3\\n3 1 5\\n6 5 2\\n3 5 2\\n6 1 4\\n2 3 3\\n6 2 2\\n4 5 2\\n6 1 3\\n6 1 1\\n2 4 3\\n6 4 1\\n6 2 1\\n2 2 4\\n4 3 2\\n5 5 3\\n1 1 4\\n5 4 1\\n6 1 3\\n5 2 1\\n6 1 4\\n5 2 3\\n6 2 1\\n6 2 3\\n3 6 3\\n6 2 3\\n6 5 5\\n3 2 5\\n3 1 2\\n6 4 4\\n6 2 4\\n6 3 3\\n5 6 2\\n2 1 1\\n4 2 1\\n6 1 4\\n6 1 4\\n2 1 1\\n6 2 1\\n1 1 1\\n6 1 3\\n6 1 4\\n5 3 2\\n1 1 1\\n4 6 1\\n1 3 5\\n3 2 2\\n6 2"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nclass Code(object):\n    def __init__(self, line):\n        line = line.strip().split(' ')\n        self.B = tuple(map(int, line[:M]))\n        self.A = tuple(map(int, line[M:]))\n        self.solution = None\n\n    def solve(self):\n        if sum(self.A[i] * b for i, b in enumerate(self.B)) + self.C > 0:\n            self.solution = True\n        else:\n            self.solution = False\n\n    def __str__(self):\n        return \" \".join(map(str, self.A)) + \" \" + \" \".join(map(str, self.B)) + \" \" + str(self.C)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == 1\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"1900\") == \"100\"\nprint(\"PASSED\")\n\n-----Explanation-----\nWe have N = 1900.\nWe need to use two 1000-yen bills to pay the price.\nThere is no change, therefore we return 100."
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"1\"\n) == \"0\"\nassert solution(\n    \"100\"\n) == \"100\"\nassert solution(\n    \"5\"\n) == \"10\"\nassert solution(\n    \"10\"\n) == \"10\"\nassert solution(\n    \"1000\"\n) == \"1000\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1902) == 2\nassert solution(1234) == 0\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('19') == '100'\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \"0\"\nassert solution(\"19\") == \"1\"\nassert solution(\"48\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500\") == \"100\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500\") == \"3\"\n\"\"\"\n\nN = int(input())\n\nchange = 1000 - N\n\nprint(change//500 + change % 500 // 100 + change % 500 % 100 // 50 + change % 500 % 100 % 50 // 10 + change % 500 % 100 % 50 % 10 % 5 + change % 500 % 100 % 50 % 10 % 5 % 1)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000') == 0\nassert solution('2000') == 1000\nassert solution('4000') == 2000\n\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1100\") == \"2\"\nassert solution(\"1950\") == \"20\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n2 4\\n') == '9'\nprint('OK')\n\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 5 2\n4 5\n''') == '9'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2\\n4 5\") == \"9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n3 5 2') == '9'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 3\\n') == '9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == 9\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2\\\\n4 5\\\\n\") == \"9\"\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().strip().split())\n\ntmp = b * (a + 1)\nfor i in range(1, a):\n    tmp = tmp - max(0, c - b) * i\n\nprint(tmp)\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\"\"\"\n\n\"\"\"\nThe Nature of the Problem\nTo solve this problem, we must first determine whether war can break out based on given conditions.\nIf war can break out, then the conditions that determine if war will break out are as follows:\n\n- X < Z \\leq Y\n- x_1, x_2,..., x_N < Z\n- y_1, y_2,..., y_M \\geq Z\n\n- All of these conditions must be met.\n\nIf war can not break out, then there is no war, so we print 'No War'.\n\nHow can we determine whether war can break out?\nWe can create a function to determine whether war can break out and then use that to determine the solution to the problem.\n\nWe'll need to determine whether war can break out by creating a function called war_can_break_out(x, y, z).\nWe can determine whether two conditions are met by using an if statement.\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\n-----\n\nSolution:\n\nimport sys\n\nN, M, X, Y = map(int, sys.stdin.readline().split())\nx, y = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == 'No War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"4 6 20 16\\n7 18 19 17\\n18 18\\n19 19\") == \"War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\"\"\"\n\nx, y, z = map(int, input().split())\nX, Y = sorted([x, y])\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == 'No War'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\\n4\") == \"6\"\n\n-----Test 1-----\n\n-----Test 2-----\n\n-----Test 3-----\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n3') == '6'\nassert solution('2\\n5\\n3') == '5'\nassert solution('4\\n2\\n1\\n1') == '10'\n\n----\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\": 2 3\") == \"6\"\n\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\") == 0\nassert solution(\":1\") == 1\nassert solution(\":2\") == 2\nassert solution(\":3\") == 3\nassert solution(\":2:1\") == 4\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"4\\n1\\n2\\n3\\n4\") == \"4\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2\n2\n3\n\"\"\"\n) == \"6\"\n\nassert solution(\n\"\"\"\n1\n2\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3\n10\n1\n\"\"\"\n) == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\n545\\n546\\n547\\n548\\n549\\n550\\n551\\n552\\n553\\n554\\n555\\n556\\n557\\n558\\n559\\n560\\n561\\n562\\n563\\n564\\n565\\n566\\n567\\n568\\n569\\n570\\n571\\n572\\n573\\n574\\n575\\"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(':\\n2\\n3\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('2\\n1 2') == '0'\nassert solution('3\\n1 1 3') == '1'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0'\nprint(solution(stdin))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == 0\n\"\"\"\n\nN = int(stdin.readline())\nweights = [int(w) for w in stdin.readline().strip().split()]"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == 0\n\n-------"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3''') == '0'\nassert solution('''2\n1 2 3''') == '0'\nassert solution('''2\n1 3 3''') == '1'\nassert solution('''1\n1''') == '0'\nassert solution('''1\n2''') == '1'\n\nimport sys\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nW = list(map(int, sys.stdin.readline().split()))\nT = int(sys.stdin.readline())\n\nS1, S2 = 0, 0\n\nW.sort()\n\nfor i in range(N):\n    if i > T:\n        S1 += W[i]\n    else:\n        S2 += W[i]\n\nprint(abs(S1 - S2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"sample.in\").read()) == \"0\\n\"\nassert solution(open(\"input.txt\").read()) == \"0\\n\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('4\\n5 2 1 2') == '1'\nassert solution('7\\n9 10 2 5 2 3 4') == '1'\nassert solution('5\\n10 20 30 10 40') == '0'\nassert solution('10\\n15 40 2 10 8 10 1 5 3 7') == '1'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\nassert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '0'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\nassert solution(\"4 4\\n1 2 3 4\\n5 10 7 8\\n9 2 11 12\\n13 14 15 16\") == \"4\"\nassert solution(\"1 1\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9') == '2'\nassert solution('3 3\\n3 2 1\\n1 2 3') == '6'\nassert solution('4 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\\n6 7 8 9\\n10 11 12\") == \"2\"\n\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nmatrix = []\n\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\nmoves = []\n\nfor column in range(m):\n    column_shift = []\n\n    for row in range(n):\n        column_shift.append(matrix[row][column])\n\n    moves.append(column_shift)\n\nprint(moves)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == '5'\nassert solution(\"2\\n1 100\") == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 2\") == \"3\"\nassert solution(\"8 2 5 3 7 4\") == \"1\"\nassert solution(\"8 2 6 2 3 5 4\") == \"5\"\nassert solution(\"8 2 6 2 3 5 1 4\") == \"6\"\nassert solution(\"8 2 6 2 3 5 1 1 4\") == \"6\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('2\\n1 100') == '1'\nassert solution('3\\n1 100 2') == '1'\nassert solution('4\\n1 100 2 3') == '3'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 100\") == \"99\"\n\nassert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n5 10 2 3 14 5''') == '5'\nassert solution('''2\n1 100''') == '99'\n\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 1 0 1 0 1\\n\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == '3'\n\"\"\"\n\n\"\"\"\nA naive solution\n\nInput:\n7\n0 0 0\n\nOutput:\n0\n\nInput:\n7\n1 0 1 1 1 0 1\n\nOutput:\n2\n\nInput:\n7\n1 1 1 1 1 1 1\n\nOutput:\n3\n\nInput:\n7\n1 1 1 1 1 1 1\n\nOutput:\n4\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('3\\n0 0 0') == '0'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\nassert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\nassert solution(\"4\\n0 1 0 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5\\n1 0 1 0 1\"\n) == \"2\"\nassert solution(\n    \"6\\n0 1 0 1 1 0\"\n) == \"2\"\nassert solution(\n    \"7\\n1 0 1 1 1 0 1\"\n) == \"3\"\nassert solution(\n    \"3\\n0 0 0\"\n) == \"0\"\nassert solution(\n    \"5\\n0 1 0 1 0\"\n) == \"2\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0 0\\n\") == \"0\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"2\"\nassert solution(\"1\\n0\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"15\") == \"3\"\nassert solution(\"15\") == \"3\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"17\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '0'\nassert solution('9') == '1'\nassert solution('10') == '1'\nassert solution('11') == '2'\nassert solution('12') == '2'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 0\nassert solution(5) == 0\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n\nprint(solution(input))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '2'\nassert solution('3') == '4'\nassert solution('3\\n2\\n1') == '3\\n2\\n4'\nassert solution('6\\nemmental hard\\nfeta hard\\ngouda hard\\nswiss hard\\nparmesan hard\\n') == '6\\n2\\n4\\n6\\n3\\n1'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == '3'\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == '4'\n\"\"\"\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\") == 3\nassert solution(\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\") == 4\n\nsolution()\n\n\n'''\nimport re\nimport sys\n\nn = int(input())\ndict_cheese = {}\nfor _ in range(n):\n    cheese = input().split()\n    dict_cheese[cheese[0]] = cheese[1]\n\nlines = sys.stdin.readlines()\ncount = 0\nfor line in lines:\n    if re.search(r'[a-zA-Z][a-zA-Z]', line):\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == \"4\"\nassert solution(\"5\\njarlsberg hard\\ntimberland soft\\ngost soft\\nsprengel soft\\njarlsberg hard\\n\") == \"2\"\nassert solution(\"3\\nmozzarella soft\\nmascarpone hard\\n\") == \"1\"\nassert solution(\"2\\ncheddar soft\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n') == '3'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(cheese) == cheese_type"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\n\"\"\"\n\nfrom typing import List\nfrom math import gcd\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\nb = list(map(int, stdin.readline().strip().split()))\n\nans = []\nmodulo = 1000000000\nfor i in range(n):\n    ans.append((a[i] + b[i]) % modulo)\nprint(\" \".join(list(map(str, ans))))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import Counter"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a, b) == c\nassert solution(a, b) == c\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1 2 1 1\") == \"1 0 0 0 1\"\nassert solution(\"7\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\nassert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nprint(solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\"))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '0 1 2 3 4 5'\n\n'''\nfrom typing import List\n\n'''\nWrite a function:"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101010\") == \"0\"\nassert solution(\"101010\") == \"0\"\nassert solution(\"111000\") == \"0\"\nassert solution(\"111000\") == \"0\"\nassert solution(\"111000\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"011110\") == \"1\"\nassert solution(\"111011\") == \"0\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0011') == '1'\nassert solution('1011') == '0'\nassert solution('10011') == '0'\nassert solution('11101') == '1'\nassert solution('10111') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"010\") == \"0\"\nassert solution(\"101\") == \"1\"\nassert solution(\"110\") == \"1\"\nassert solution(\"101010\") == \"1\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"010\") == \"0\"\nassert solution(\"110\") == \"1\"\nassert solution(\"00101110\") == \"0\"\nassert solution(\"111011010\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11110') == '1'\nassert solution('11011') == '0'\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101\") == \"1\"\nassert solution(\"11010\") == \"0\"\nassert solution(\"01100\") == \"0\"\nassert solution(\"11110\") == \"1\"\nassert solution(\"01110\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('01101') == '0'\nassert solution('11010') == '0'\nassert solution('11111') == '1'\nassert solution('10110') == '0'\nassert solution('10111') == '1'\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0\n1\n1\n0''') == \"0\"\n\n-----Note-----\nThe input and output can only be strings, no variables.\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('001101') == '0'\nassert solution('11100010') == '1'\nassert solution('10011010') == '1'\nassert solution('10111010') == '1'\nassert solution('11111111') == '1'\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 15 32\") == \"No\"\n\"\"\"\nimport math\nD, T, S = list(map(int, stdin.split()))\nprint(\"Yes\") if math.ceil(D / S) <= T else print(\"No\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"10 10 2\") == \"No\"\nassert solution(\"100 200 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"1000 15 80\"\"\") == \"Yes\"\n\"\"\"\n\n-------\nO(1)\n-------\n\nimport math\n\nd, t, s = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n----\n\n'''\n\nimport sys\n\nD, T, S = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1337 5678 9012\") == \"No\"\n\"\"\"\n\nimport math\n\nd, t, s = (int(n) for n in stdin.split())\nt = t - 1\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\nassert solution(a) == b\nassert solution(a) == b\nassert solution(a) == b\nassert solution(a) == b\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"43 89 77\\n99 99 99\\n99 99 98\\n9\\n99\\n9\\n99\\n90\\n90\\n99\") == 'Yes'\nassert solution(\"86 96 43\\n35 93 85\\n54 93 93\\n12\\n86\\n90\\n99\\n15\\n15\\n84\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"90 54 63\\n62 50 33\\n78 91 26\\n92 3 85\\n87 92 37\\n65 34 85\\n45 90 36\\n91 87 46\\n50 93 54\\n76 92 59\\n97 43 32\\n98 93 53\\n39 90 81\\n39 36 96\\n95 97 84\\n83 47 62\\n99 69 21\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport math\nimport time\n\n_stdin = sys.stdin\n_stdout = sys.stdout\nsys.stdin = open(\"problem_4_stdin.txt\")\n\nstart_time = time.time()"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('1') == 'No'\nassert solution('1 1 1') == 'Yes'\nassert solution('1 1 2') == 'No'\nassert solution('1 1 3') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nprint(n * max(a))\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('41 2\\n5 6') == '30'\n\n-------"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('41 2\\n5 6') == '30'\n\"\"\"\n\nn, m = map(int, stdin.readline().split(' '))\ndays = list(map(int, stdin.readline().split(' ')))\n\nmaximum = 0\n\nfor day in days:\n    if day >= maximum:\n        maximum = day"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('41 2\\n5 6\\n') == '30'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''41 2\n5 6''') == '30'\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\nl = list(map(int, stdin.readline().strip().split()))\n\nmax_l = max(l)\ns = sum(l)"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 1') == '1'\nassert solution('2 2\\n1 1') == '-1'\nassert solution('3 2\\n1 1\\n1 2') == '1'\nassert solution('4 2\\n1 1\\n2 1\\n3 1') == '2'\nassert solution('5 2\\n1 1\\n2 1\\n3 1\\n4 1') == '-1'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nn, m = input().split(' ')\n\nassignment = list(map(int, input().split(' ')))\n\nassignment.sort(reverse=True)\n\ndays = 0\nfor i in range(int(n)):\n    days += assignment[i]\n    if days > int(m):\n        print(-1)\n        break\nelse:\n    print(days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2\\n') == '5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n2 3\") == \"2\"\nassert solution(\"0 2\\n1 1\") == \"1\"\nassert solution(\"1 2\\n0 1\") == \"2\"\nassert solution(\"0 3\\n0 1\") == \"1\"\nassert solution(\"1 3\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 5') == '5'\n\"\"\"\n\n\"\"\"\nSolution:\n\n10\n\n9\n\n9\n\n8\n\n8\n\n7\n\n7\n\n6\n\n6\n\n5\n\n5\n\n5\n\n4\n\n4\n\n4\n\n4\n\n3\n\n3\n\n3\n\n3\n\n3\n\n3\n\n3\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\nassert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 2\\n\") == \"1\"\nassert solution(\"0 0\\n\") == \"1\"\nassert solution(\"0 1\\n\") == \"2\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n2 2') == '0'\nassert solution('2 1\\n1 1') == '100'\nassert solution('2 2\\n1 1') == '0'\nassert solution('2 2\\n2 1') == '100'\nassert solution('2 2\\n2 2') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 5\\n') == '5'"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n7 6 8') == '2'\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 6 8\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n7 6 8\\n') == '2'\n\"\"\"\n\n\n\"\"\"\nn = stdin.readline()\narray = list(map(int, stdin.readline().split()))\nprint(max(sorted(array)[-2:]))\n\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 6 8\") == \"2\"\nprint(solution(\"7 6 8\"))\n\n------Solution------\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('N\\nA_1 A_2... A_N') == 'N\\nA_1 A_2... A_N'\n'''"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 6 8\") == 2\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\nprint(\"Test 1 Passed\")\nassert solution(\"4 3 2 1\") == \"4 1 3 2\"\nprint(\"Test 2 Passed\")\nassert solution(\"10 4 5 2 3 9 8 7 6 1\") == \"10 4 5 2 3 9 8 7 6 1\"\nprint(\"Test 3 Passed\")\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 2\") == \"1 2 3 4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\nfor i in arr:\n    print(i, end=\" \")\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"1\\n2\") == \"2 1\"\n\"\"\"\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1\\n') == '3 1 2'\nassert solution('3 3 1\\n') == '3 1 2'\nassert solution('3 1 3\\n') == '3 1 2'\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 1 1000\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def main(self, input_string: str) -> str:\n        a, b, x = (int(n) for n in input_string.split())\n        max_price = (10 ** 9) * a + (10 ** 9) * b\n\n        # for i in range(1, max_price + 1):\n        #     if i % a == 0 and i % b == 0:\n        #         return i\n        return f\"{max_price // (a * 10 ** 9) * a} {max_price // (b * 10 ** 9) * b}\"\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        input_string = \"10 7 100\"\n        expected = \"9\"\n        self.assertEqual(Solution.main(input_string), expected)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 7 100') == '9'"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\"\n\n\nfrom decimal import Decimal"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 8 100\") == \"8\"\nassert solution(\"100 5 100\") == \"0\"\nassert solution(\"1 1 100\") == \"0\"\nassert solution(\"100 0 100\") == \"0\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 10 10 10\") == \"0\"\nassert solution(\"1 100 2 0\") == \"0\"\nassert solution(\"1 1 1 100\") == \"100\"\nassert solution(\"100 100 2 0\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nA, B, X = list(map(int, input().split()))\n\nmax_num = 0\nfor i in range(1, 10 ** 9 + 1):\n    if A * i + B * len(str(i)) <= X:\n        max_num = i\n\nprint(max_num)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10, 7, 100) == 9\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"3 5 7\") == \"0\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\nprint(\"Test pass.\")\n\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\nh = sorted(h, reverse=True)\nprint(sum(h[i] >= k for i in range(n)))"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\nprint(sum(1 for h_i in h if h_i >= k))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200\\n') == '2'\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\n\"\"\"\n\n\nimport os\nimport sys"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n\"\"\"\nfrom __future__ import annotations\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Yes'\nassert solution('4 1\\n5 4 2 1') == 'Yes'\nassert solution('4 2\\n5 4 2 1') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4 1\\n5 4 2 1'\n) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nfrom typing import List, Tuple\nimport math"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 3 2\\n.'\n    '#\\n.'\n    '#\\n'\n) == '5'\nassert solution(\n    '3 2 4\\n.'\n    '#\\n.'\n    '#\\n'\n) == '3'\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#..##....####...###....\") == 5\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 3 2\n..#\n###\n\"\"\") == \"5\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2 3 2\"\n) == 5\nassert solution(\n\"1 1 1\"\n) == 1\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\nprint(solution(\"2 3 2\\n..#\\n###\\n\"))"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n..#\\n###') == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#..#.##.#.#.#.###.###\") == \"26\"\nassert solution(\".#.###.#####.#.###.###\") == \"6\"\nassert solution(\".#.###.#####.#.###.#####.#####.###.###.####.###.###.###\") == \"1308\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 2\\n..#\\n###') == 5\n\"\"\"\n\nh, w, k = [int(x) for x in stdin.readline().strip().split()]\nc = [stdin.readline().strip() for i in range(h)]\n\nans = 0"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#.#\") == 2\nassert solution(\"##.\") == 1\nassert solution(\".#.#\") == 2\nassert solution(\"##.\") == 1\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys\n\nfrom input_handler import input_handler\nfrom typing import Callable\nfrom pydantic import BaseModel\nfrom enum import Enum, auto\n\n\nclass InputHandler(Enum):\n    INT = auto()\n    INT_ARRAY = auto()\n    INT_SET = auto()\n\n\nInputDataType = Callable[[list], int]\n\n\nclass Solution:\n    # Minimise the time complexity by storing the value of i x j\n    # in a hash table, and only checking values that are\n    # divisible by 2019.\n\n    def __init__(self):\n        self.mod = 2019\n        self.divisor_dict = {}\n\n    def compute_divisors(self, x: int) -> int:\n        return (\n            x\n            if x == 1\n            else 1\n            + self.compute_divisors(x // 2)\n            + self.compute_divisors(x // 3)\n            + self.compute_divisors(x // 4)\n        )\n\n    def compute(self, l: int, r: int) -> int:\n        for i in range(l, r + 1):\n            for j in range(l, r + 1):\n                if (i * j) % self.mod in self.divisor_dict:\n                    return self.divisor_dict[(i * j) % self.mod]\n\n        return -1\n\n    def execute_input_handler(self, input_handler: InputHandler, inp: str) -> int:\n        inp_data = input_handler.value(inp)\n        return self.compute(inp_data[0], inp_data[1])\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2020 2040') == 2\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(2020)) == str(2)\nassert solution(str(2040)) == str(2)\n\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2020, 2040) == 2"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nprint(solution(\"2020 2040\"))\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == 'AC'\nassert solution(\"AtCoder\") == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nprint(solution(\"AtCoder\"))\n\n-----\nS = input()\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n\nfrom collections import Counter\nimport string"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"atCoder\") == \"WA\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin='1214') == '2'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nprint(solution(\"1214\"), \"2\")\nassert solution(\"1428\") == \"4\"\nprint(solution(\"1428\"), \"4\")\nassert solution(\"1333224444\") == \"3\"\nprint(solution(\"1333224444\"), \"3\")\nassert solution(\"133333333322224444444444444444\") == \"7\"\nprint(solution(\"133333333322224444444444444444\"), \"7\")\nassert solution(\"1333333333333333333333333333333333333333333333333333333333333333\") == \"8\"\nprint(solution(\"1333333333333333333333333333333333333333333333333333333333333333\"), \"8\")\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1333224444\") == \"2\"\nassert solution(\"133333333322224444444444444444\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1333224444\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1214') == '2'\nassert solution('17') == '7'\nassert solution('2223') == '4'\nassert solution('3333') == '3'\nassert solution('4444') == '4'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1214\") == \"2\"\n\nprint(solution(\"1214\"))\n\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\nassert solution('1234') == '4'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"hello\"\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0430 \u0446\u0438\u0444\u0440\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u0430 \"one\", \"two\"\n\u0412\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u0438\u0437 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0432\u044b\u0445 \u0431\u0443\u043a\u0432, \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0431\u0443\u043a\u0432.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u043e \u043d\u0430\u0434\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \"One\", \"Two\"\n\u0415\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u0434\u043b\u0438\u043d\u043e\u0435, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 N \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u0430 \"the\"\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0430 \u0446\u0438\u0444\u0440\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u0430 \"one\", \"two\"\n\u0412\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u0438\u0437 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0432\u044b\u0445 \u0431\u0443\u043a\u0432, \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0431\u0443\u043a\u0432.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u043e \u043d\u0430\u0434\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \"One\", \"Two\"\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443,\n\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: \"one two three four five six seven eight nine ten\"\n\u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 \u0431\u0443\u043a\u0432 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435: \"One Two Three Four Five Six Seven Eight Nine Ten\"\n\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u043d\u0430 \u043d\u0438\u0436\u043d\u0438\u0439: \"one two three four five six seven eight nine ten\"\n\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 N \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u0430 the: \"one two three four five six seven eight nine ten\"\n\u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0431\u0443\u043a\u0432 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430: \"One two three four five six seven eight nine ten\"\n\u0432\u044b\u0437\u043e\u0432 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: \"one two three four five six seven eight nine ten\"\n\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"One two three four five six seven eight nine ten\"\n\"\"\"\nimport re"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('2 3 1 5 4') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n5 2 3 4 1''') == 'YES'\nassert solution('''3\n3 1 2''') == 'NO'\nassert solution('''5\n3 1 2 4 5''') == 'YES'\n'''\nfrom collections import Counter"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('5 2 4 1 3') == 'YES'\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('5 2 3 4 1') == 'YES'\nassert solution('3 2 5 1 4') == 'YES'\nassert solution('1 2 3 5 4') == 'NO'\nassert solution('4 3 2 1 5') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('1000000000000000000000000000000000') == 33\nassert solution('201920181') == 4\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\n\"\"\"\n\ns = int(stdin)\ncount = 0\nwhile s % 3 == 0:\n    count += 1\n    s = s // 3\n\nprint(count)\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == '2'\nassert solution('3\\n13 37 39\\n1 2 3') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6') == '3'\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\nprint(\"Success\")"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == '2'\nassert solution('3\\n13 37 39\\n1 2 3') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6') == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == 2\nassert solution('3\\n13 37 39') == 2\nassert solution('4\\n0 0 0 0') == 0\nassert solution('3\\n1 2 -1') == 3\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\n\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\n\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\nimport functools"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"1 2 -1\\n-6 -12 6\") == \"3\"\nassert solution(\"13 37 39\\n1 2 3\\n\") == \"2\"\n\n\n\n\n\n\n\n-----\nYou are given two strings, $a$ and $b$.\n\nYou are allowed to perform at most $k$ operations on each string.\n\nIn one operation, you can choose any character of the string and replace it by any other character.\n\nYour goal is to make a difference between the strings. The difference can be measured as the number of characters that are different between the strings.\n\nYou can also measure the difference using Levenshtein distance, which is a dynamic programming algorithm that computes the minimum number of operations required to convert one word into another.\n\nWhat is the minimum possible difference between the strings, if you allow at most $k$ operations?\n-----\n\nfrom math import factorial as fact"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\nfrom typing import List"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('hellocode') == 0\n\n\"\"\"\n\nimport numpy as np\nfrom utils.testcase import TestCase\nfrom utils.decorators import stats_path\n\n\n@stats_path\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\\ndodivthree\") == \"5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\\n\"\nassert solution(\"abaca\\nb\") == \"5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n\"\nassert solution(\"codeforces\\nhellocode\") == \"0\\n\"\nassert solution(\"bambarbia\\nhellocode\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n\"\nassert solution(\"codeforces\\nhellocode\\nb\") == \"5\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n\"\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarria\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"abc???????\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '10'\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n\nassert solution(\"a?b\") == 0\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"abaca?b\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(codeforces) == 5\nassert solution(dodivthree) == 5\nassert solution(bambarbia) == 0\nassert solution(hellocode) == 0\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('abaca?b') == '5'\nassert solution('zabbbcc') == '0'\n\"\"\"\nfrom typing import List, Set, Dict\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('bambarbia') == 0\nassert solution('hellocode') == 0\n\nassert solution('codeforces') == 5\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7\n4 1 2 2 1 5 3\n\"\"\") == '3\n7 7\n2 3\n4 5\n\nassert solution(\"\"\"11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\"\"\") == '2\n3 4\n1 1\n2 2\n3 3\n\nassert solution(\"\"\"4\n1 1 1 1\n\"\"\") == '4\n4 4\n1 1\n2 2\n3 3\n\nassert solution(\"\"\"4\n-1 -1 -1 -1\n\"\"\") == '4\n1 1\n2 2\n3 3\n\nassert solution(\"\"\"1\n-1\n\"\"\") == '1\n1 1\n1 1\n1 1"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7\\n2 3\\n4 5'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4\\n1 1\\n2 2'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == '3'\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2'\nassert solution(\"7 4 1 2 2 1 5 3\") == '3'\n\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\\n\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2 3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_string) == output_string"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"2\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"8 1 5 2 3 7 2 1 2\") == \"4\"\nassert solution(\"12 1 5 2 3 7 2 1 2\") == \"4\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 11\n45 1 10 12 11 7''') == 7\nassert solution('''4 2\n2 78 4 10''') == 12\nassert solution('''5 2\n3 7 19 3 3''') == 0\nassert solution('''5 2\n3 7 19 3 3''') == 0\nassert solution('''5 2\n3 7 19 3 3''') == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2 78 4 10\") == \"12\"\nassert solution(\"3 7 19 3 3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"45 1 10 12 11 7\") == \"7\"\nassert solution(\"2 78 4 10\") == \"12\"\nassert solution(\"3 7 19 3 3\") == \"0\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\ntotal = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (a[i] + a[j]) % k == 0:\n            total += 1\n\nprint(total)"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 1') == '0'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 11\n3 7 19 3 3\n\"\"\") == '12'\n\nassert solution(\"\"\"\n4 2\n2 78 4 10\n\"\"\") == '0'\n\nassert solution(\"\"\"\n5 2\n3 7 19 3 3\n\"\"\") == '0'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"45 1 10 12 11 7\") == 7\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n\nprint(\"Well done!\")"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\nassert solution(\"5 3\\n3 7 19 3 3\") == 0\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 5') == 9\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5\") == \"9\"\nassert solution(\"6\\n2 3 4 5 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('2\\n1 5') == '9'\nassert solution('4\\n5 1 0 2') == '12'\nassert solution('3\\n5 1 0 2') == '9'\nassert solution('4\\n0 1 2 3') == '6'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n\") == 9\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n\n\n\nfrom itertools import accumulate"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 7 4 4') == '14'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nassert solution(\"3\\n-2 5\") == \"9\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n-1 -1 -1 -1\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\n-------------Problem-------------\n\nHackerLand University has the following grading policy:\n - Every student receives a grade in the inclusive range from 0 to 100.\n - Any grade less than 40 is a failing grade.\n\nTask.\n - Given a list of grades, determine the number of failing grades.\n\nInput Format.\n - The first line contains a single integer, n, the number of grades.\n - The next n lines contains a single integer, grade[i].\n\nConstraints.\n - There are at most 100 students.\n - Grade < 40\n\nOutput Format.\n - Print the number of failing grades.\n\nSample Input 0.\n - 5\n - 73\n - 67\n - 38\n - 33\n - 34\n\nSample Output 0.\n - 3\n\nSample Input 1.\n - 6\n - 33\n - 67\n - 55\n - 34\n - 20\n\nSample Output 1.\n - 4\n\n-------------Solution-------------"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10''') == '110'\n\n\"\"\"\n\nfrom typing import List, NamedTuple, Dict, Optional\nfrom collections import defaultdict\n\nclass Quadruple(NamedTuple):\n    a: int\n    b: int\n    c: int\n    d: int\n\n    def __eq__(self, other):\n        return all(map(lambda x, y: x == y, self, other))\n\nclass Scores:\n    def __init__(self, scores):\n        self.scores = scores\n\n    def get_score(self, a: int, b: int, c: int) -> int:\n        score = 0\n        for d in self.scores[b]:\n            if self.scores[a][0] - d == c:\n                score += d\n        return score\n\nclass Scores:\n    def __init__(self, scores):\n        self.scores = scores\n        self.scores_map = defaultdict(list)\n        for a, b, c, d in self.scores:\n            self.scores_map[a].append(d)\n            self.scores_map[b].append(d)\n\n    def get_score(self, a: int, b: int, c: int) -> int:\n        return sum([d for d in self.scores_map[b] if self.scores_map[a][0] - d == c])"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\n------Solution------"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 2\\n1 2 3 4\\n1 3 2 4\\n2 4 3 4\") == \"110\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('2 3') == '0'\nassert solution('3 3') == '0'\nassert solution
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(    '4\\n1 4 6 3\\n') == '5'\nassert solution(    '4\\n5 2 8 6\\n') == '9'\nassert solution(    '4\\n5 2 8 1\\n') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n1 4 6 3''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 6 3\") == 5\nprint(\"Passed\")\n\n--------------------------------------------"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 4 6 3\n''') == '5'\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\nprint(\"assertions passed\")\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''3\n0 0\n1 0\n0 1'''\n) == '2.276142'\n\nassert solution(\n'''5\n0 0\n1 0\n0 1\n1 1\n0 0'''\n) == '1.41421356237'\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math\nimport typing"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == '4'\nassert solution(\"6 6\") == '0'\nassert solution(\"1 100\") == '100'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 4') == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 4') == '4'\nassert solution('1 1') == '0'\nassert solution('2 1') == '1'\nassert solution('2 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == '4'\nassert solution('2 4') == '0'\nassert solution('10 20') == '10'\n\"\"\"\nimport sys"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''12 4''') == '4'\nassert solution('''4 3''') == '0'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 4\\n') == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 4') == '4'\nassert solution('10 1') == '9'\nassert solution('5 6') == '0'\nassert solution('1 0') == '0'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12, 4) == 4\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 4') == '4'\nassert solution('12 5') == '4'\nassert solution('18 20') == '0'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '3'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1110') == '1111'\nassert solution('1234') == '1234'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '3'\n\"\"\"\n\nN = int(input())\nA = 1\nwhile N // A!= 0:\n    A *= 10\n    A //= 2\n\nB = 1\nwhile N // B!= 0:\n    B *= 10\n\nprint(max([len(str(A)), len(str(B))]))\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"10\") == '1'\nassert solution(\"100\") == '1'\nassert solution(\"1000\") == '1'\nassert solution(\"10000\") == '1'\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 2\nassert solution('100') == 1\nassert solution('1000') == 2\nassert solution('10000') == 3\nassert solution('100000') == 3\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10000') == '3'\nassert solution('9999') == '6'\nassert solution('1') == '1'\nassert solution('9') == '2'\n\nfrom itertools import combinations\n\nn = int(stdin.readline())\n\nans = min(sum(map(lambda x: len(str(x[0])),combinations(range(1,n+1),2)))\nfor x,y in combinations(range(1,n+1),2)\n)\nprint(ans)\n\nn = int(stdin.readline())\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"32\") == \"2\"\nassert solution(\"999\") == \"9\"\nassert solution(\"9876543210\") == \"10\"\n\"\"\"\nfrom math import log10"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100') == 3\nassert solution('10000') == 3\nassert solution('3') == 3\nassert solution('11') == 2\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('7 8\\n4 1 2 3 4 5 6') == 0\n'''"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == 1\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n2 1 3\\n3 1 2 3') == '1'\nassert solution('2 2\\n1 2\\n2 1') == '2'\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(1)\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_str) == expected_result\n\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def num_likes(self, n: int, m: int, array_of_like_counts: List[List[int]]) -> int:\n        result = 0\n        for i in range(m):\n            result += len([x for x in array_of_like_counts[i] if x > 0])\n        return result\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == '1'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nlist_food = []\n\nfor i in range(n):\n    list_food.append(list(map(int, stdin.readline().split())))\n\nlist_food = sum(list_food, [])\n\nset_food = set(list_food)\n\nprint(len(set_food))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 2 3 4 5\\n2 1 2\\n2 3 2\\n2 4 2\\n2 5 2\\n1 1 1\\n2 2 2\\n3 3 3\\n2 1 1\\n1 1 1') == '3'\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('100\\n') == '0.5'\nassert solution('1\\n') == '1.0'\nassert solution('5\\n') == '0.8'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '0.5'\nprint(solution('4'))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '0.5'\nassert solution('8') == '0.6410256410256411'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 0.5\n\"\"\"\nfrom math import e\nfrom fractions import Fraction"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0.5'\nassert solution('3\\n') == '0.25'\nassert solution('4\\n') == '0.125'\nassert solution('10\\n') == '0.0625'\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n\") == '0.5'\n\"\"\"\n\nn = int(stdin.readline())\n\ncounter = 0\nfor i in range(1, n+1):\n    if i % 2!= 0:\n        counter += 1\n\nresult = counter/n\nprint(result)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('5\\n') == '0.25'\nassert solution('6\\n') == '0.375'\nassert solution('7\\n') == '0.4375'\nassert solution('8\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2 3\\n2\\n1 1\\n1\") == '2'\nassert solution(\"2\\n1\\n2 1\") == '0'\nassert solution(\"4\\n1\\n2 1\\n1\\n1 1\\n1\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nprint('Test pass.')\n\n------------------\nSample input:\n6\n3\n3 1\n3 0\n2 1\n2 0\n2 0\n:\n1\n1 1\n\nSample output:\n3\n\n-------------------\nSample input:\n8\n5\n3 1\n1\n1 0\n1\n1 0\n2\n1\n1 1\n\nSample output:\n4\n\n-------------------\nSample input:\n5\n1\n4 0\n2 1\n3 1\n1 0\n2 0\n2 0\n\nSample output:\n5\n\n-------------------\nSample input:\n6\n1\n2 0\n2 0\n3 1\n1 0\n1 1\n\nSample output:\n4\n\n-------------------\nSample input:\n6\n5\n3 0\n3 1\n1 0\n1 1\n3 0\n\nSample output:\n3\n\n-------------------\nSample input:\n7\n1\n3 1\n3 0\n1 1\n1 1\n1 0\n1 0\n2 0\n\nSample output:\n3\n\n-------------------\nSample input:\n7\n1\n3 1\n3 1\n3 0\n1 1\n1 0\n1 0\n2 0\n\nSample output:\n3\n\n-------------------\nSample input:\n8\n1\n3 1\n3 0\n1 1\n1 0\n1 0\n2\n1\n1 1\n\nSample output:\n4\n\n-------------------\nSample input:\n9\n1\n1 1\n3 1\n2 1\n1 0\n1 0\n2\n1 1\n2 1\n2 0\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n2 1\n3 1\n3 0\n2 1\n2 0\n1 0\n1 1\n2 1\n1 0\n2 0\n\nSample output:\n5\n\n-------------------\nSample input:\n9\n1\n2 1\n3 1\n2 1\n1 1\n3 0\n2 1\n1 0\n2 0\n\nSample output:\n5\n\n-------------------\nSample input:\n9\n1\n3 1\n3 0\n2 1\n2 1\n2 0\n1 0\n1 0\n2 0\n\nSample output:\n4\n\n-------------------\nSample input:\n11\n1\n3 1\n3 1\n3 0\n2 1\n2 1\n2 1\n2 1\n1 1\n1 0\n1 1\n2 1\n\nSample output:\n5\n\n-------------------\nSample input:\n15\n2\n5 1\n3 1\n1 1\n1 0\n1 0\n2 0\n1 1\n1 1\n2 0\n1 0\n2 0\n1 0\n1 0\n2 0\n1 0\n2 1\n3 1\n\nSample output:\n6\n\n-------------------\nSample input:\n16\n1\n2 1\n1 1\n1 1\n1 0\n1 0\n2 1\n2 1\n2 0\n1 1\n1 0\n2 0\n1 0\n1 1\n1 1\n2 0\n1 1\n2 1\n2 1\n2 0\n\nSample output:\n7\n\n-------------------\nSample input:\n16\n3\n1 0\n1 0\n1 1\n1 1\n1 0\n1 0\n1 1\n1 0\n2 0\n1 0\n2 0\n1 0\n1 1\n2 1\n1 1\n1 0\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n16\n1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n16\n1\n3 1\n1 1\n1 1\n2 1\n3 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 0\n1 0\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\nSample output:\n7\n\n-------------------\nSample input:\n16\n1\n3 1\n1 0\n2 0\n3 1\n1 1\n1 0\n1 1\n1 1\n2 0\n1 0\n1 1\n1 0\n2 1\n1 1\n1 0\n1 1\n1 1\n1 1\n1 1\n\nSample output:\n7\n\n-------------------\nSample input:\n10\n1\n3 1\n1 1\n2 1\n3 1\n3 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n1 1\n1 0\n1 1\n1 1\n2 1\n3 1\n1 1\n1 1\n1 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n2 1\n2 1\n1 1\n1 0\n1 1\n1 1\n1 1\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n3 1\n3 1\n3 1\n3 1\n1 1\n1 1\n1 1\n1 1\n3 1\n2 1\n2 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n1 1\n3 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 0\n2 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n2 1\n3 1\n3 1\n1 1\n1 1\n1 1\n3 1\n3 1\n3 1\n3 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n2 0\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n2 0\n3 1\n1 1\n2 1\n1 1\n3 1\n1 1\n3 1\n3 1\n1 1\n1 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n1 1\n2 1\n1 1\n2 1\n2 1\n2 1\n2 1\n1 1\n1 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n2 1\n1 1\n3 1\n1"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\n\"\"\"\n\nfrom collections import namedtuple\nimport re\n\n\nTestCase = namedtuple('TestCase', ['n', 'as_list', 'xys_list'])\n\nTESTS = [\n    TestCase(n=2, as_list=[1, 1], xys_list=[[1, 1], [1, 1]]),\n    TestCase(n=3, as_list=[1, 2], xys_list=[[1, 1, 0], [1, 2, 1]]),\n    TestCase(n=3, as_list=[1, 3], xys_list=[[1, 1, 0], [2, 1, 1]]),\n    TestCase(n=3, as_list=[2, 1], xys_list=[[1, 1, 1], [2, 1, 1]]),\n]\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\nstdin = \"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\"\n\nn = int(stdin.split()[0])\n\nnumbers = set()\n\nfor _ in range(n):\n    numbers.add(int(stdin.split()[1]))"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n1\\n1\\n0\\n1\") == 2\nassert solution(\"3\\n2\\n1\\n1\\n0\\n1\") == 2\nassert solution(\"3\\n2\\n1\\n2\\n0\\n1\") == 2\nassert solution(\"3\\n2\\n1\\n2\\n1\\n0\\n1\") == 1\nassert solution(\"3\\n2\\n1\\n2\\n1\\n1\\n0\\n1\") == 1\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == '2'\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\": 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"edifice\") == \"edifice\"\nassert solution(\"thequickbrownfoxjumpsoverthelazydog\") == \"thequickbrownfoxjumpsoverthelazydog\"\n\nimport re\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\n-------\ncode = \"\"\nwith open(\"code_input.txt\", \"r\") as ins:\n    code = ins.read()\nassert solution(code) == \"nikoand...\\n\"\n\n-------\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"solstice\") == \"solcest\"\nassert solution(\"an\") == \"an\"\nassert solution(\"e\") == \"e\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\nimport stdin"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd123456\") == \"abcd123456\"\nassert solution(\"123456\") == \"123456\"\nassert solution(\"abcdefghijklmnop\") == \"abcdefghijklmnop\"\nassert solution(\"abcdefghijk\") == \"abcdefghijk\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice has a length of 15, which exceeds K=7. We should extract the first 7 characters in this string, append... to the end of them, and print the result nikoand...\") == \"nikoand...\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(Taknese) == TaknesePlural\nprint(solution(Taknese))\n\n----Problem-----\nIn the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n - If a noun's singular form does not end with s, append s to the end of the singular form.\n - If a noun's singular form ends with s, append es to the end of the singular form.\nYou are given the singular form S of a Taknese noun. Output its plural form.\n\n\"\"\"\n\n\"\"\"\n1. S ends with s, append es to the end.\n2. S ends with e, append s to the end.\n3. S ends with anything else, append s to the end.\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('dog') == 'dogs'\nassert solution('onion') == 'onions'\nassert solution('laptop') == 'laptops'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('taknese') == 'takneses'\n\n---Problem 027---\nGiven the names and grades for each student in a class of  students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade.\n\nNote: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.\n\nExample\n\nThe ordered list of scores is, so the second lowest score is. There are two students with that score:. Ordered alphabetically, the names are printed as:\n\nalpha\nbeta\nInput Format\n\nThe first line contains an integer,, the number of students.\nThe  subsequent lines describe each student over  lines.\n- The first line contains a student's name.\n- The second line contains their grade.\n\nConstraints\n\nThere will always be one or more students having the second lowest grade.\nOutput Format\n\nPrint the name(s) of any student(s) having the second lowest grade in. If there are multiple students, order their names alphabetically and print each one on a new line.\n\nSample Input 0\n\n5\nHarry\n37.21\nBerry\n37.21\nTina\n37.2\nAkriti\n41\nHarsh\n39\nSample Output 0\n\nBerry\nHarry\nExplanation 0\n\nThere are  students in this class whose names and grades are assembled to build the following list:\n\npython students = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41], ['Harsh', 39]]\n\nThe lowest grade of  belongs to Tina. The second lowest grade of  belongs to both Harry and Berry, so we order their names alphabetically and print each name on a new line.\n\"\"\"\n\nimport sys\nimport math\nimport array as arr"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        return stdin + \"s\" if stdin[-1]!='s' else stdin + \"es\"\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        self.assertEqual(self.solution(\"apple\"), \"apples\")"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('apple') == 'apples'\n\nprint(solution('apple'))\n\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'\nassert solution('grape') == 'grapes'\nassert solution('melon') =='melons'\nassert solution('tomato') == 'tomatoes'\nassert solution('zucchini') == 'zucchinis'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apple') == 'apples'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n-----Constraints-----\n - stdin - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\n\u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\n\n-----Output-----\n3\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n-----Constraints-----\n - stdin - \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\n1\n\n-----Output-----\n\"1\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\n\n-----Constraints-----\n - stdin - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\nThe quick brown fox jumps over the lazy dog.\n\n-----Output-----\nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u0432\u0441\u0435 \u043b\u0438 \u043d\u0430\u0431\u043e\u0440 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b\n\n-----Constraints-----\n - stdin - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\nThe quick brown fox jumps over the lazy dog.\n\n-----Output-----\nTrue\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\n\"\"\"\n\nn, k = map(int, input().strip().split())\nsnuke_snack = {}\nfor i in range(1, k + 1):\n    snuke_snack[i] = set(map(int, input().strip().split()))\n\nsnuke_snack_unique = {}\nfor k, v in snuke_snack.items():\n    for snack in v:\n        if snack not in snuke_snack_unique:\n            snuke_snack_unique[snack] = set()\n        snuke_snack_unique[snack].add(k)\n\nans = 0\nfor snuke_num in range(1, n + 1):\n    if snuke_num not in snuke_snack_unique:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\n------Solution------\n\nThe solution is based on the following observations:\n1. Every Snuke has at least one Snack, and for each Snuke the Snacks are sorted.\n2. Takahashi starts by picking up all the Snacks of Snuke 1, and then after that he picks up Snack 2, Snack 3 and so on.\n3. This way, Takahashi will pick up all Snacks of Snuke N.\n4. Therefore, Takahashi has Snuke N Snacks and Snuke 1 Snacks, and all Snacks in between are discarded.\n5. Thus, the total number of Snacks picked up by Takahashi is N * (K + 1) / 2.\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n2\n1 3\n1\n3\n''') == '1'\nassert solution('''\n5 4\n1\n1 2\n1 3\n1 4\n2\n1 2\n1 3\n2 3\n2 4\n3 4\n''') == '5'\n\"\"\"\n\nN, K = map(int, stdin.readline().strip().split(' '))\nSnakes = [0] * N\nfor i in range(K):\n    snake = list(map(int, stdin.readline().strip().split(' ')))\n    Snakes[snake[0] - 1] += 1\nvictim = 0\nfor i in range(N):\n    if Snakes[i] == 0:\n        victim += 1\nprint(victim)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n\nlines = iter(sys.stdin.readlines())\nN, K = map(int, next(lines).split())\nsnakes = [list(map(int, line.split())) for line in lines]\n\nsnake_set = set()\n\nfor i in range(K):\n    snake_set.update(snakes[i])\n\nfor _ in range(N):\n    if snakes[_][0] in snake_set:\n        snake_set.remove(snakes[_][0])\n\nprint(len(snake_set))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\n-------------"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('N Snukes called Snuke 1, Snuke 2,..., Snuke N live in a town.\\nThere are K kinds of snacks sold in this town, called Snack 1, Snack 2,..., Snack K. The following d_i Snukes have Snack i: Snuke A_{i, 1}, A_{i, 2}, \\cdots, A_{i, {d_i}}.\\nTakahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi\\'s mischief?') == '1'\n'''\n\n\n'''\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\nsnakes = []\nfor i in range(1, n + 1):\n    snakes.append(int(sys.stdin.readline()))\n\nsnakes = sorted(snakes)\nprint(snakes[n - 1])\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\nhttps://www.codewars.com/kata/59835dbcbc92f05eb0000c1/train/python\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"aabbbbaaca\"]) == \"5\"\n\"\"\"\n\n\"\"\"\nGiven the number of slimes S and the string S of their colors, determine the number of slimes that will finally remain after the processes described above.\n\n-----Input-----\nThe first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe second line contains a string S consisting of N lowercase English letters.\n\n-----Output-----\nPrint a single line containing one integer - the final number of slimes.\n\n-----Sample Input-----\n2\n1\na\n2\naba\n\n-----Sample Output-----\n1\n4\n\"\"\"\n\n\"\"\"\nTest Case #0\nS = \"a\"\nOutput:\n1\n\nTest Case #1\nS = \"ab\"\nOutput:\n2\n\nTest Case #2\nS = \"aba\"\nOutput:\n2\n\nTest Case #3\nS = \"abbbabbaa\"\nOutput:\n2\n\"\"\"\n\n\"\"\"\nSolution #1\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"aba\"\nassert solution(\"aabbbbb\") == \"b\"\nassert solution(\"aabbbbccc\") == \"b\"\nassert solution(\"aabaa\") == \"ab\"\nassert solution(\"aab\") == \"a\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaabbbbaa') == 'ababa'\nassert solution('aabbbbaa') == 'ababa'\nassert solution('aabbbbbaa') == 'ababa'\nassert solution('aabbbbaaa') == 'ababa'\nassert solution('aabbbbaaaa') == 'ababa'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbbbaaca') == '5'\n\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n\n\"\"\"\nsolution:\nSince the input is valid, we can initialize an array of length N of zeros. \nFor every adjacent pair of indices, we check if the two values are the same. \nIf they are, we change the value at the first index to be the sum of the two. \nWe iterate through the array, incrementing the index by 1. \nAfter all iterations, the largest value in the array will be the answer. \nWe can do this because if the two values are not the same, we can never fuse them together. \n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbbbbbb\") == \"a\"\nassert solution(\"aabbbbbaaca\") == \"a\"\nassert solution(\"abbbbbaaacaaaa\") == \"a\"\nassert solution(\"abbbbbaaaacaaaa\") == \"aa\"\nassert solution(\"abbbbbaaaaaacaaaa\") == \"aaaa\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\naabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"3\\n2 4 6\") == \"2\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n5 2 4\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n4\n9 4 6 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n7\n1 2 3 4 5 6 7\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n7\n1 2 3 4 5 6 7\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n):\n    while True:\n        if (a[i] % 2 == 0 and a[i] % 3!= 0) or (a[i] % 2!= 0 and a[i] % 3 == 0):\n            break\n        else:\n            a[i] = a[i] // 2 if a[i] % 2 == 0 else a[i] * 3\n            count += 1\n            if a[i] < 2:\n                break\n\nprint(count)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 1\") == '3'\nassert solution(\"4\\n1 1 1 1\") == '2'\nassert solution(\"5\\n1 1 1 1 1\") == '1'\nassert solution(\"6\\n1 1 1 1 1 1\") == '0'\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nA = list(map(int, sys.stdin.readline().strip().split()))\n\nA.sort()\n\nans = 0\n\nfor i in range(N):\n    if A[i] % 2!= 0:\n        ans += 1\n        A[i] //= 2\n        \n    A[i] *= 3\n\nfor i in range(N):\n    if A[i] % 2!= 0:\n        ans += 1\n        A[i] //= 2\n        \n    A[i] *= 3\n\nprint(ans)"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 4\\n') == 3\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '9'\nassert solution('1 2 3 5') == '15'\nassert solution('1 2 -1 3') == '4'\nassert solution('0 -1 -1 -1 1') == '0'\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n\n\nimport sys\nimport os\nimport time\nimport bisect\nimport math"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == 2\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n\nfrom src.main.python.functions import is_prime"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nprint(\"All Tests Passed.\")\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 1 1 1 1\") == \"2\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"1 0 0 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 1 1 3'\n) == '2'\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"6 10\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 8\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n5 5\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n6 6\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n6 9\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n1 2\n\"\"\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"4 8\") == \"No\"\nassert solution(\"4 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"2 6\") == \"No\"\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\nassert solution(\"2 5\\n\") == \"No\"\nassert solution(\"1 100\\n\") == \"Yes\"\nassert solution(\"5 4\\n\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10') == 'Yes'\nassert solution('10 10') == 'Yes'\nassert solution('5 5') == 'No'\nassert solution('10 5') == 'No'\nassert solution('10 5') == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8') == 'Yes'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 3') == '2'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4') == '1'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4') == '0'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4\\n1 4\\n3 4') == '2'\n\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4') == '0'\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n4 3') == '2'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\\n4 1\") == \"2\"\nassert solution(\"7 4\\n1 2\\n1 3\\n2 4\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"3\"\n\n------\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == 2\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n4 5\\n\") == \"2\"\nassert solution(\"5 3\\n1 2\\n1 3\\n2 3\\n4 5\\n\") == \"0\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nprint(solution(\"3 3\\n1 2\\n1 3\\n2 3\"))"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 3') == '2'\nassert solution('2 3\\n2 3') == '1'\n\"\"\"\n\nn, m = map(int, input().split())\ngraph = []\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    graph.append((a, b))\n    graph.append((b, a))\n\ngraph = list(set(graph))\n\nadj = [0] * (n + 1)\nfor x, y in graph:\n    adj[x] += 1\n    adj[y] += 1\n\nadj_sum = 0\nfor i in range(1, n + 1):\n    adj_sum += adj[i]\n\nprint(adj_sum - 1)\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n4 3\") == \"2\"\nassert solution(\"6 7\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n3 5\\n4 5\\n6 7\\n5 6\") == \"4\"\n\n\"\"\"\n\nn,m = input().split(\" \")\nn,m = int(n),int(m)\n\nd = {str(i):[] for i in range(1,n+1)}\n\nfor _ in range(m):\n    x,y = input().split(\" \")\n    x,y = int(x),int(y)\n    d[str(x)].append(y)\n    d[str(y)].append(x)"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 3 4 5 6') == '18'\n\"\"\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\n\"\"\"\nA.k.a. Apple Farm\n\nhttps://www.codewars.com/kata/523f5d21c841566fde000009\n\nAlex just got a new hula hoop, he loves it but feels discouraged because his little brother is better than him\n\nWrite a program where Alex can input (n) how many times the hoop goes round and it will return him an encouraging message :)\n\nIf Alex gets 10 or more hoops, return the string \"Great, now move on to tricks\".\nIf he doesn't get 10 hoops, return the string \"Keep at it until you get it\".\n\nExamples:\n\nhoop_count(1)? \"Keep at it until you get it\"\nhoop_count(2)? \"Great, now move on to tricks\"\nhoop_count(10)? \"Great, now move on to tricks\"\n\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Dict, List\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.read()"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1\\n1\\n2\\n3\\n5') == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n') == '18'\nprint('Success')\n\n----------------------"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"1\"\nassert solution(5) == \"1\"\nassert solution(15) == \"1\"\nassert solution(25) == \"1\"\nassert solution(30) == \"1\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5''') == 5\nassert solution('''10''') == 55\nassert solution('''15''') == 60\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n\n\"\"\"\nLet us define the FizzBuzz sequence a_1,a_2,... as follows:\n - If both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\n - If the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\n - If none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\n - If none of the above holds, a_i=i.\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\n-----Sample Input-----\n15\n\n-----Sample Output-----\n60\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(15) == 60\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n\nimport sys\nfrom fractions import gcd\n\nfor line in sys.stdin:\n    n = int(line)\n    def FizzBuzz(n):\n        def FizzBuzz(n):\n            if not n:\n                return []\n            elif n == 1:\n                return [1]\n            if 3 * n + 1 > n * n:\n                return [i for i in range(1, n + 1)]\n            return FizzBuzz(3 * n + 1) + FizzBuzz(n - (3 * n + 1) / 2 - (n - 3 * n + 1) / 2)\n    result = [n for n in FizzBuzz(n) if n % 3!= 0 and n % 5!= 0]\n    print(sum(result))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15') == '60'\nassert solution('2') == '2'\nassert solution('5') == '15'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\na, n = [int(i) for i in input().strip().split(' ')]\narr = list(map(int, input().strip().split(' ')))\narr.sort()"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 7 10 6 5''') == '8'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 10 6 5') == '8'\nassert solution('3 4 7 10 6 5') == '7'\nassert solution('3 4 10 6 5') == '7'\nassert solution('3 10 6 5') == '7'\nassert solution('10 6 5') == '7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\nassert solution('1 10\\n2 3 4 5 6 7 8 9 10') == '9'\nassert solution('6 8\\n4 7 10 6 5') == '8'\nassert solution('3 4\\n1 2') == '1'\nassert solution('5 4\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 10 6 5\\n') == 8\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2 1''') == '1'\nassert solution('''3 2\n2 1\n2 1\n''') == '0'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1\\n') == ''\nassert solution('2\\n2\\n') == '1'\nassert solution('3\\n3\\n') == '6'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n1 1\") == \"1\"\n\nassert solution(\"1 1\\n3 3\") == \"0\"\n\nassert solution(\"3 3\\n1 1\") == \"1\"\n\nassert solution(\"3 3\\n3 3\") == \"6\"\n\nassert solution(\"4 4\\n1 2\") == \"0\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2 1') == '1'\nprint('Test Successful')\n\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\", \"3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nseq = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"7 4\"\n) == \"6\"\nassert solution(\n    \"7 2\"\n) == \"-1\"\nassert solution(\n    \"7 1\"\n) == \"1\"\nassert solution(\n    \"6 2\"\n) == \"2\"\nassert solution(\n    \"7 0\"\n) == \"1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '7 4\\n3 7 5 1 10 3 20'\n) == '6'\nassert solution(\n    '7 2\\n3 7 5 1 10 3 20'\n) == '-1'\n\"\"\"\nimport sys\n\n\"\"\"\n\u0427\u0435\u0440\u0435\u0437 \u0432\u0441\u0442\u0430\u0432\u043a\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e x.\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\nassert solution(\"7 2\\n1 2 3 3 4 1 4 1\") == \"2\"\nassert solution(\"7 2\\n1 2 3 3 4 1 4 1\") == \"2\"\nassert solution(\"7 3\\n1 2 3 4 5 5 6 6\") == \"1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n\nimport sys\n\nnumber_of_elements, number_to_find = sys.stdin.readline().split()\nsequence = sys.stdin.readline().split()\nprint(str(sorted(sequence)[int(number_to_find)-1]))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(input()))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution_2(str(input())))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\"\"\") == '3\\n2 2 1\\n3 3 1\\n3 4 1\\n'\n\nassert solution(\"\"\"\n3 3\n.*.\n.*.\n*.*\n\"\"\") == '-1\\n'\n\nassert solution(\"\"\"\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\"\"\") == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\n\nassert solution(\"\"\"\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\"\"\") == '-1\\n'\n\nassert solution(\"\"\"\n3 3\n.*.\n.*.\n*.*\n\"\"\") == '-1\\n'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1 1\\n\") == \"0\"\nassert solution(\"2 3\\n..*..\\n...**\\n*....\\n....*\\n\") == \"3\"\nassert solution(\"3 4\\n.*..\\n..*.*\\n.*.**\\n\") == \"-1\"\nassert solution(\"5 6\\n.*..*\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n\") == \"7\"\nassert solution(\"5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\n\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"2 2 1\"\n\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.*...\\n.*...\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"3 2\\n.*..\\n.*..\") == \"3\\n3 2 1\\n3 2 1\"\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n.*...\\n.*...\\n.*...\") == '3\\n2 2 1\\n3 3 1\\n3 4 1'\nassert solution(\"5 5\\n*.*\\n.*.\\n*.*\") == '-1'\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == '-1'\nassert solution(\"3 3\\n*.*\\n.*\\n*.*\") == '-1'\nassert solution(\"3 3\\n.*\\n.*\\n*.*\") == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"2\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"2\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n2 2 1\\n3 3 1'\nassert solution('3 3\\n.*\\n.*\\n.*') == '-1'\nassert solution('6 8\\n.*...\\n...**\\n..****\\n...**.\\n.****.\\n*......\\n........') == '3\\n3 4 1\\n3 5 2'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"2 2 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n.**..\\n.*.*\\n.*.*\\n.*.*\\n.....\") == \"3\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n....\") == \"0\"\nassert solution(\"3 3\\n***\\n.*\\n***\") == \"1\"\nassert solution(\"3 3\\n***\\n.*\\n.*\\n.*\") == \"-1\"\nassert solution(\"3 3\\n***\\n.*\\n.*\\n.*\") == \"-1\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('good') == 0\nassert solution('abc') == 1\nassert solution('xyyx') == 2\nassert solution('bad') == 1\nassert solution('aabc') == 2\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('good') == 0\nassert solution('bad') == 2\nassert solution('string') == 3\nassert solution('xyyx') == 1\nassert solution('aaaa') == 4\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('good') == 0\nassert solution('bad') == 1\nassert solution('xyyx') == 2\nassert solution('aabc') == 2\nassert solution('aaa') == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('good') == '0'\nassert solution('aa') == '2'\nassert solution('aabc') == '2'\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xyyxxyy\") == \"xyxy\"\nassert solution(\"good\") == \"xx\"\nassert solution(\"aabc\") == \"ab\"\nassert solution(\"aaa\") == \"a\"\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"yyxyxyx\") == 3\nassert solution(\"yyxyxyxy\") == 4\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('good') == 0\nassert solution('string') == 0\nassert solution('xyxy') == 2\nassert solution('aaa') == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('good') == 0\nassert solution('string') == 0\nassert solution('xyyx') == 2\nassert solution('aaa') == 3\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s='abc') == 'ab'\nassert solution(s='aaaaa') == 'aa'\nassert solution(s='xxyyy') == ''\nassert solution(s='zzzzz') == 'z'\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaa\") == \"3a\"\nassert solution(\"ababa\") == \"2b\"\nassert solution(\"aaaaaaaa\") == \"5a\"\nassert solution(\"aaaaaaaaa\") == \"6a\"\n\nassert solution(\"aaaa\") == \"5a\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n2 3\\n3 1\\n2 1\\n2 3\\n2 1\\n') == '10100'\n\nassert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n') == 'YES\\n10100'\n\nassert solution('6 5\\n2 3\\n3 1\\n2 1\\n2 3\\n2 1\\n') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\\n2 3\\n\") == \"YES\\n010\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('a') == 'NO'\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 1\") == \"YES\\n10110\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n1 2\\n3 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 2\\n2 1\\n1 3\\n3 1\\n4 2\\n1 5\\n5 1\") == \"NO\"\nassert solution(\"2 4\\n1 2\\n2 1\\n1 3\\n3 1\\n4 2\\n1 5\\n5 1\") == \"YES\\n10100\"\nassert solution(\"2 3\\n1 2\\n2 1\\n1 3\\n3 1\") == \"NO\"\nassert solution(\"2 3\\n1 2\\n2 1\\n1 3\\n3 1\") == \"YES\\n101\"\nassert solution(\"2 3\\n1 2\\n2 1\\n1 3\\n3 1\") == \"YES\\n11\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == solution_output\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 3\\n3 4') == '1010'\nassert solution('8 10\\n4 5\\n5 6\\n4 8\\n8 9\\n9 10\\n5 4\\n6 7\\n7 8\\n10 4') == '101011010'\nassert solution('5 5\\n2 3\\n4 1\\n1 2\\n5 2') == '101'\nassert solution('1 1\\n1 1') == 'NO'\nassert solution('2 2\\n1 2\\n2 1') == 'NO'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\nassert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\n\n\n\n-----Hints-----\n\nThink about the tree representation of graphs and the binary strings.\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 3\\n1 2\\n1 3\\n2 3\\n1 2\\n2 1\\n3 2\\n2 3\\n3 1\\n1 2\\n2 1\\n3 2\\n3 1\\n\") == \"10100\"\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 5\") == \"YES\\n010\"\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\nassert solution('1 7\\n1 7\\n') == '0'\nassert solution('1 7\\n1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n\n'''"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 2\\n3 2\\n4 2\\n5 2\") == \"2\"\nassert solution(\"1 2\\n2 2\\n3 2\\n4 2\\n5 2\\n6 2\\n7 2\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7') == '0'\nassert solution('3 5') == '2'\nassert solution('1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n2 2\\n1 3\\n2 4\") == \"0\\n1\\n2\\n3\\n4\\n\"\n\"\"\"\n\nn, m = map(int, input().split())\n\npoints = {(i, 0) for i in range(1, m+1)}\n\nsegments = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n    points -= set((i, 0) for i in range(l, r+1))\n\nprint(len(points))\nprint(*sorted(points))"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(A, B, C, D) == result\nprint(solution(A, B, C, D))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\nfrom sys import stdin\nfrom math import gcd\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 9 2 3') == '0'\nassert solution('1 2 2 3') == '3'\nassert solution('1 2 1 3') == '0'\nassert solution('1 1 1 1') == '4'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"23456\") == \"No\"\nassert solution(\"242588\") == \"Yes\"\n\"\"\"\n\nfrom utils.number_theory.basic.is_multiple import is_multiple\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123456789') == 'Yes'\n\n-------------\n\nimport numpy as np"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('0') == 'No'\nassert solution('1') == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\"\n\n\"\"\"\nProblem Statement:\nA number is considered perfect if its digits sum up to exactly 10.\nGiven a positive integer N, find the smallest perfect number greater than or equal to N.\n\nInput Format:\nThe first and the only line of the input contains a single integer N (0 <= N < 10^6).\n\nOutput Format:\nPrint a single line denoting the respective minimum perfect number.\n\nNote: The number obtained should be printed modulo 10^9 + 7.\n\nExample:\nInput 1:\n29\n\nOutput 1:\n328\n\nExplanation 1:\nThe smallest perfect number greater than 29 is 32, which is the answer.\n\nInput 2:\n18\n\nOutput 2:\n19\n\nExplanation 2:\nThe smallest perfect number greater than 18 is 19, which is the answer.\n\"\"\"\n\n\"\"\"\nSolution Approach:\nWe can see that the number can be created by summing up the digits of the number.\nThe digits of a number can be obtained by performing the following operations on the number:\n1. Divide the number by 10.\n2. The remainder of the operation is called the last digit of the number.\n3. Repeat the above two steps until the number is reduced to 0.\n\nNow, if the number is divisible by 9, then the sum of its digits is divisible by 9.\nIf the above steps cannot reduce the number to 0, then the number is not divisible by 9.\n\nTo find the minimum number, we need to take the smallest possible last digits of the numbers that can be created.\nTo check whether a number is divisible by 9 or not, we can use the property of modular arithmetic.\n\nFirst we define a function that generates all possible numbers that can be created by taking the last digits.\nThen, we can check the numbers whether they are divisible by 9 or not.\n\nBy using the property of modular arithmetic, we know that the sum of the last digits of the number will be divisible by 9.\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"69\") == \"No\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('12346789') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == '4'"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127\\n') == '4'\nassert solution('1\\n') == '1'\nassert solution('999\\n') == '15'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"127\") == \"4\"\n\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('127') == '4'\nassert solution('131') == '6'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('8') == '2'\nassert solution('9') == '3'\nassert solution('11') == '3'\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hello\") == \"olleh\"\nassert solution(\"hellothere\") == \"ellothereh\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"lucia\") == \"tucia\"\n\nsolution(\"lucia\")\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"bcda\"\nassert solution(\"abcd\", \"bcad\") == \"No\"\nassert solution(\"abcd\", \"bcda\") == \"Yes\"\nassert solution(\"mjtoqabxjzrvgeqt\", \"szgxqrjytkivmnb\") == \"Yes\"\nassert solution(\"mjtoqabxjzrvgeqt\", \"szgxqrjytkivmno\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"nagaokoro\") == \"No\"\nassert solution(\"manggu\") == \"No\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"a\"*2) == \"No\"\nassert solution(\"tokyo\"*2) == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('k') == 't'\nassert solution('y') == 'o'\nassert solution('z') == 'k'\nassert solution('l') == 'i'\nassert solution('a') == 'o'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcde') == 'ebcda'\nassert solution('abracadabra') == 'raebcaca'\nassert solution('babab') == 'babab'\nassert solution('a') == 'a'\nassert solution('yummy') == 'ummyy'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"ab\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tokyo\") == \"kyoto\"\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()\n\nprint('Yes' if a == a[::-1] else 'No')\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\"\"\"\n\nimport pytest"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('abcdef') == ''\nassert solution('cabacc') == '1'\nassert solution('abaccdef') == '2'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cabacc') == '1'"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n\nS = input()\nT = input()\nprint(S.count(T))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\ncabacc\nabc\n''') == '1'\n\nassert solution('''\ncabacc\nxyz\n''') == '3'\n\nassert solution('''\nabc\nxyz\n''') == '2'\n\nassert solution('''\na\na\n''') == '0'\n\nassert solution('''\na\na\na\n''') == '0'"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cabacc') == '1'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nprint(solution(\"8 12 2\"))\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 12 2') == '2'\n\nassert solution('8 12 4') == '4'\n\nassert solution('7 17 8') == '8'\n\nassert solution('1 1 1000000000') == '1'\n\n'''\n\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n-----Explanation-----\nTime: O(n*log(n))\nSpace: O(1)\n\n'''"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\n\"\"\"\n------SOLUTION------\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n') == '1'\nassert solution('2 6 9\\n') == '2'\nassert solution('3 9 12\\n') == '4'\n\"\"\"\n\nimport sys\n\nA, B, K = sys.stdin.read().split()\nA, B, K = int(A), int(B), int(K)\n\ndivs = list(range(1, B+1))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"1024\"\n) == \"2020\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1024\") == \"2020\"\n\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\n\"\"\"\nimport sys\n\nX = int(sys.stdin.readline().strip())\n\nhappiness = 0\n\nwhile X >= 500:\n    happiness += (X // 500) * 1000\n    X = X % 500\n\nwhile X >= 100:\n    happiness += (X // 100) * 500\n    X = X % 100\n\nwhile X >= 50:\n    happiness += (X // 50) * 100\n    X = X % 50\n\nwhile X >= 10:\n    happiness += (X // 10) * 50\n    X = X % 10\n\nwhile X >= 5:\n    happiness += (X // 5) * 10\n    X = X % 5\n\nwhile X >= 1:\n    happiness += (X // 1) * 5\n    X = X % 1\n\nprint(happiness)\n\"\"\"\nimport sys\n\nX = int(sys.stdin.readline().strip())\n\nhappiness = 0\n\nwhile X >= 500:\n    happiness += (X // 500) * 1000\n    X = X % 500\n\nwhile X >= 100:\n    happiness += (X // 100) * 500\n    X = X % 100\n\nwhile X >= 50:\n    happiness += (X // 50) * 100\n    X = X % 50\n\nwhile X >= 10:\n    happiness += (X // 10) * 50\n    X = X % 10\n\nwhile X >= 5:\n    happiness += (X // 5) * 10\n    X = X % 5\n\nwhile X >= 1:\n    happiness += (X // 1) * 5\n    X = X % 1\n\nprint(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == '1001'\nassert solution('10') == '110'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\n\"\"\"\n    The idea is to count the number of times we can add 1 or subtract 1 in order to maximize the number of points from the given input.\n    Since we have five kind of coins, we can add or subtract 1 to either of the coins to maximize the number of points.\n    So, we can say that our dynamic programming table is going to look something like this:\n    \\begin{pmatrix}\n    0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    \\\\\n    0    & 1    & 1    & 1    & 1    & 1    & 1    & 1    & 1    \\\\\n    0    & 1    & 2    & 2    & 2    & 2    & 2    & 2    & 2    \\\\\n    0    & 1    & 3    & 3    & 3    & 3    & 3    & 3    & 3    \\\\\n    0    & 1    & 4    & 4    & 4    & 4    & 4    & 4    & 4    \\\\\n    0    & 1    & 5    & 5    & 5    & 5    & 5    & 5    & 5    \\\\\n    0    & 1    & 6    & 6    & 6    & 6    & 6    & 6    & 6    \\\\\n    0    & 1    & 7    & 7    & 7    & 7    & 7    & 7    & 7    \\\\\n    0    & 1    & 8    & 8    & 8    & 8    & 8    & 8    & 8    \\\\\n    0    & 1    & 9    & 9    & 9    & 9    & 9    & 9    & 9    \\\\\n    0    & 1    & 10    & 10    & 10    & 10    & 10    & 10    & 10    \\\\\n    \\end{pmatrix}\n    The number of rows in the matrix is 10. The number of columns in the matrix is 10.\n    For each row, we are trying to find out what is the maximum number of points that can be earned when we take the coins in that row and add or subtract 1 to it in order to maximize the number of points.\n    To do this, we need to find out the maximum of the values of the elements in each row.\n    The maximum element in each row is the value of the coin we will use to increase or decrease the number of points, the maximum number of points that can be earned is the sum of all the elements in the row.\n    So, the last column of the matrix represents the maximum number of points that can be earned when taking the coins in that row.\n    We can look at the code below to see what is happening:\n    \\begin{pmatrix}\n    0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    \\\\\n    0    & 1    & 2    & 3    & 4    & 5    & 6    & 7    & 8    \\\\\n    0    & 2    & 4    & 6    & 8    & 10    & 12    & 14    & 16    \\\\\n    0    & 3    & 6    & 9    & 12    & 15    & 18    & 21    & 24    \\\\\n    0    & 4    & 8    & 12    & 16    & 20    & 24    & 28    & 32    \\\\\n    0    & 5    & 10    & 15    & 20    & 25    & 30    & 35    & 40    \\\\\n    0    & 6    & 12    & 18    & 24    & 30    & 36    & 42    & 48    \\\\\n    0    & 7    & 14    & 21    & 28    & 35    & 42    & 49    & 56    \\\\\n    0    & 8    & 16    & 24    & 32    & 40    & 48    & 56    & 64    \\\\\n    0    & 9    & 18    & 27    & 36    & 45    & 54    & 63    & 72    \\\\\n    0    & 10    & 20    & 30    & 40    & 50    & 60    & 70    & 80    \\\\\n    \\end{pmatrix}\n    The above matrix represents the dynamic programming table.\n    We can see that the last column is the maximum number of points that can be earned when taking the coins in that row.\n    For example, if we take the coins in row 2, we can increase the number of points in row 3 or decrease the number of points in row 1 by 1 point, increasing the number of points by 1.\n    Now, we can do this process again, but this time we will change the value of the row and the column.\n    In this way, we can change the value of the number of points that can be earned in row 2, and we can see that the maximum number of points that can be earned when taking the coins in row 2 is 6.\n    Similarly, we can also see that the maximum number of points that can be earned when taking the coins in row 10 is 60.\n    In the last step, we can also see that the maximum number of points that can be earned when taking the coins in row 2 is the maximum number of points that can be earned when taking the coins in row 10.\n    Therefore, we can conclude that we will get the maximum number of points that can be earned when taking the coins in row 2 as the maximum number of points that can be earned when taking the coins in row 10.\n    Now, we will add the maximum values of the elements in the rows to the last column of the matrix to get the final number of points that can be earned.\n    After that, we can see that the maximum number of points that can be earned when taking the coins in row 2 is the same as the maximum number of points that can be earned when taking the coins in row 10.\n    To visualize the above process, you can see the code below:\n    \\begin{pmatrix}\n    0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    \\\\\n    0    & 1    & 2    & 3    & 4    & 5    & 6    & 7    & 8    \\\\\n    0    & 2    & 4    & 6    & 8    & 10    & 12    & 14    & 16    \\\\\n    0    & 3    & 6    & 9    & 12    & 15    & 18    & 21    & 24    \\\\\n    0    & 4    & 8    & 12    & 16    & 20    & 24    & 28    & 32    \\\\\n    0    & 5    & 10    & 15    & 20    & 25    & 30    & 35    & 40    \\\\\n    0    & 6    & 12    & 18    & 24    & 30    & 36    & 42    & 48    \\\\\n    0    & 7    & 14    & 21    & 28    & 35    & 42    & 49    & 56    \\\\\n    0    & 8    & 16    & 24    & 32    & 40    & 48    & 56    & 64    \\\\\n    0    & 9    & 18    & 27    & 36    & 45    & 54    & 63    & 72    \\\\\n    0    & 10    & 20    & 30    & 40    & 50    & 60    & 70    & 80    \\\\\n    \\end{pmatrix}\n    The above matrix represents the dynamic programming table.\n    So, the code below does the rest of the processes.\n    First, we define the function get_max_points that takes in the number of coins and the number of happiness points that can be earned for each coin and returns the maximum number of points that can be earned.\n    Then, we initialize the variable number_of_coins with the number of coins given by the user.\n    Next, we initialize the variable max_points with 0.\n    Then, we iterate through"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\\n\") == 5\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n4') == '5'\nassert solution('2\\n1 4') == '5'"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"2\\n1 4\"\n) == \"5\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 4') == 5\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 4\\n\") == \"5\"\nassert solution(\"4 4\\n1 4\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4\") == \"5\"\nassert solution(\"5\\n1 4 2 3 5\") == \"3\"\nassert solution(\"4\\n1 2 3 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4\\n\") == \"5\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2\\n') == 5\n\"\"\"\n\nimport math"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10') == '3'\nassert solution('2 3') == '2'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == \"3\"\nprint(solution(\"4 10\"))\n'''"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n\") == \"3\"\n\"\"\"\n\nA, B = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10') == '3'\nassert solution('4 4') == '0'\nassert solution('4 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nfrom collections import Counter"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n\nstdin = input()\ncount = 0\nfor i in range(0, 3):\n    if stdin[i] == \"C\":\n        if stdin[i + 1] == \"S\":\n            count += 1\n        if stdin[i + 1] == \"R\":\n            count += 0\n    if stdin[i] == \"R\":\n        if stdin[i + 1] == \"S\":\n            count += 1\n        if stdin[i + 1] == \"C\":\n            count += 0\nprint(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('CSR') == 2\nassert solution('CSS') == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\nassert solution(\"CSC\") == \"1\"\nassert solution(\"SCC\") == \"1\"\nassert solution(\"SCR\") == \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 0\nassert solution(\"CCS\") == 1\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 1\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\nassert solution(\"6\\n1 3 5 6 4 2\") == \"4\"\nassert solution(\"9\\n1 3 5 6 7 9 8 2 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 5 4') == '2'\nassert solution('6\\n1 3 3 3 3 4 4') == '1'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 5 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 3 5 4 2''') == 2\n\nassert solution('''5\n2 3 1 4 5''') == 2\n\nassert solution('''2\n3 2''') == 0\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 5 4 2') == '2'\nassert solution('3\\n1 3 2 5 4') == '0'\nassert solution('5\\n1 3 5 4 2') == '2'"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\nimport math\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __str__(self):\n        return f'Point({self.x}, {self.y})'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\n\"\"\"\n\nfrom math import atan2, sqrt\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\n\nassert solution('2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.040'\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == '6.720'\n\n\"\"\"\n\nimport sys\nimport math\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass\nclass Point:\n    x: Union[float, int]\n    y: Union[float, int]"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n') == '5.410'\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '6.040'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.720'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\n\nprint(solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62'))\nprint(solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66'))\nprint(solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76'))\nprint(solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06'))\nprint(solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92'))\n\n\"\"\"\nimport os\nimport io\nimport unittest\nimport random\n\n\nclass MyTest(unittest.TestCase):\n    def test(self):\n        dir_path = os.path.dirname(os.path.realpath(__file__))\n        file = open(dir_path + \"/solutions/test.txt\", \"r\")\n        test_cases = file.readlines()\n        test_cases = [x.strip() for x in test_cases]\n        test_cases = [x for x in test_cases if len(x) > 0]\n        test_cases = [x for x in test_cases if x[0]!= '#']\n        file.close()\n        number_of_test_cases = int(test_cases[0])\n        test_cases = test_cases[1:]\n\n        for i in range(number_of_test_cases):\n            # read the test case\n            test_case_parts = test_cases[i].split(';')\n            stdin = test_case_parts[0]\n            correct_stdout = test_case_parts[1]\n            print(stdin, correct_stdout)\n            # solve the test case and check whether is equals to the correct_stdout\n            solution = open(dir_path + \"/solutions/my_solution.txt\", \"r\")\n            student_solution = solution.read()\n            solution.close()\n            self."
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\n\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\\n\") == \"6.720\"\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.040\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('7') == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\") == \"2\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"1\"\nassert solution(\"5 26\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == solution(\"5 8\\n2 3 1 1 2\")\nassert solution(input()) == solution(\"7 10\\n1 3 4 2 1 4 2\")\nassert solution(input()) == solution(\"5 15\\n5 5 5 5 5\")\nassert solution(input()) == solution(\"5 26\\n5 5 5 5 5\")\nassert solution(input()) == solution(\"5 16\\n5 5 5 5 5\")\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"2\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"4 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2, 3, 1, 1, 2) == 4\nassert solution(5, 8, 2, 1, 2) == 4\nassert solution(5, 15, 5, 5, 5) == 2\nassert solution(5, 16, 5, 5, 5) == 2\nassert solution(5, 26, 5, 5, 5) == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\\n\") == \"1 2 3\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = [int(i) for i in input().split()]\n\ndp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp[i][1] = dp[i - 1][1] + s[i - 1]\n\nfor i in range(1, k + 1):\n    dp[1][i] = dp[1][i - 1] + s[0]\n\nfor i in range(2, n + 1):\n    for j in range(2, k + 1):\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + s[i - 1]\n\nprint(*dp[n][k:k + 1])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 1 2') == '1 1 2 2'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"1 3\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 1 2\") == \"1 1\"\nassert solution(\"1 1 1 1\") == \"1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 2 4 3 1') == '1 2 3'\nassert solution('1 2 1 2 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\nassert solution('1 2 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\nprint('Hooray!')\n\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == '3'\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == \"5\"\n\nassert solution('''2 4\n1 2 3 4\n10 3 7 3''') == \"0\"\n\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == \"3\"\n\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == \"0\"\n\nassert solution('''1 1\n1''') == \"0\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == 5\n\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == 3\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n3\") == '3'\nassert solution(\"4 2\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"4 2\\n1 2 3 4\\n10 3 7 3\") == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\\n\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == '3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, \"xxoxx\") == 0\nassert solution(6, \"xxxiii\") == 1\nassert solution(10, \"xxxxxxxxxx\") == 8\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nassert solution(\"xx\") == \"0\"\nassert solution(\"xx\") == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxixxx\") == \"xxix\"\nassert solution(\"xxiixxx\") == \"xxxxx\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nassert solution(\"xxxxxx\") == \"3\"\nassert solution(\"xx\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\nassert solution(\"zzz\") == 3\nassert solution(\"hippopotamuses\") == 6\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 'xxxx') == 0\nassert solution(3, 'xxx') == 0\nassert solution(6, 'xxxi') == 1\nassert solution(7, 'xxxxx') == 1\nassert solution(10, 'xxxxxxxxxx') == 8\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '48'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"3\") == \"27\"\nassert solution(\"10\") == \"1260\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 48\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nimport math\n\nr = int(input())\n\narea = r * r * math.sqrt(3) / 2\n\nprint(int(area))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '48'\nprint('Passed')\n\n'''\n\nimport math\nimport sys\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 48\nassert solution(\"10\") == 454\nassert solution(\"1\") == 36\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == 48\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\nassert solution(\"4 0\\n\") == \"safe\"\nassert solution(\"5 5\\n\") == \"unsafe\"\nassert solution(\"5 0\\n\") == \"safe\"\n\"\"\"\nimport math\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n') == 'unsafe'\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"5 4\") == \"unsafe\"\nassert solution(\"6 3\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\n\n\"\"\"\nInput:\n3 4\n\nOutput:\nsafe\n\nInput:\n4 5\n\nOutput:\nunsafe\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\nfrom math import ceil\n\ns, w = input().split()\ns, w = int(s), int(w)"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('4 5') == 'unsafe'\nassert solution('5 5') == 'unsafe'\nassert solution('5 4') =='safe'\nassert solution('4 4') =='safe'\n\n-----\n1. First, the program should read the two input parameters: S and W.\n\n2. Then, it should check whether W is less than or equal to S, and print \u201cunsafe\u201d if W is less than or equal to S, and \u201csafe\u201d otherwise.\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\n-----Tests-----\n1) test(S,W) where S = 0, W = 0, expected: \"safe\"\n2) test(S,W) where S = 1, W = 0, expected: \"safe\"\n3) test(S,W) where S = 2, W = 0, expected: \"safe\"\n4) test(S,W) where S = 3, W = 0, expected: \"safe\"\n5) test(S,W) where S = 4, W = 0, expected: \"safe\"\n6) test(S,W) where S = 5, W = 0, expected: \"unsafe\"\n7) test(S,W) where S = 6, W = 0, expected: \"unsafe\"\n8) test(S,W) where S = 7, W = 0, expected: \"unsafe\"\n9) test(S,W) where S = 8, W = 0, expected: \"safe\"\n10) test(S,W) where S = 9, W = 0, expected: \"unsafe\"\n11) test(S,W) where S = 10, W = 0, expected: \"unsafe\"\n12) test(S,W) where S = 11, W = 0, expected: \"unsafe\"\n13) test(S,W) where S = 12, W = 0, expected: \"safe\"\n14) test(S,W) where S = 13, W = 0, expected: \"unsafe\"\n15) test(S,W) where S = 14, W = 0, expected: \"unsafe\"\n16) test(S,W) where S = 15, W = 0, expected: \"unsafe\"\n17) test(S,W) where S = 16, W = 0, expected: \"unsafe\"\n18) test(S,W) where S = 17, W = 0, expected: \"unsafe\"\n19) test(S,W) where S = 18, W = 0, expected: \"unsafe\"\n20) test(S,W) where S = 19, W = 0, expected: \"safe\"\n21) test(S,W) where S = 20, W = 0, expected: \"safe\"\n22) test(S,W) where S = 21, W = 0, expected: \"unsafe\"\n23) test(S,W) where S = 22, W = 0, expected: \"unsafe\"\n24) test(S,W) where S = 23, W = 0, expected: \"safe\"\n25) test(S,W) where S = 24, W = 0, expected: \"safe\"\n26) test(S,W) where S = 25, W = 0, expected: \"unsafe\"\n27) test(S,W) where S = 26, W = 0, expected: \"unsafe\"\n28) test(S,W) where S = 27, W = 0, expected: \"unsafe\"\n29) test(S,W) where S = 28, W = 0, expected: \"unsafe\"\n30) test(S,W) where S = 29, W = 0, expected: \"safe\"\n31) test(S,W) where S = 30, W = 0, expected: \"safe\"\n32) test(S,W) where S = 31, W = 0, expected: \"unsafe\"\n33) test(S,W) where S = 32, W = 0, expected: \"unsafe\"\n34) test(S,W) where S = 33, W = 0, expected: \"safe\"\n35) test(S,W) where S = 34, W = 0, expected: \"unsafe\"\n36) test(S,W) where S = 35, W = 0, expected: \"unsafe\"\n37) test(S,W) where S = 36, W = 0, expected: \"unsafe\"\n38) test(S,W) where S = 37, W = 0, expected: \"unsafe\"\n39) test(S,W) where S = 38, W = 0, expected: \"unsafe\"\n40) test(S,W) where S = 39, W = 0, expected: \"safe\"\n41) test(S,W) where S = 40, W = 0, expected: \"safe\"\n42) test(S,W) where S = 41, W = 0, expected: \"unsafe\"\n43) test(S,W) where S = 42, W = 0, expected: \"unsafe\"\n44) test(S,W) where S = 43, W = 0, expected: \"safe\"\n45) test(S,W) where S = 44, W = 0, expected: \"safe\"\n46) test(S,W) where S = 45, W = 0, expected: \"unsafe\"\n47) test(S,W) where S = 46, W = 0, expected: \"unsafe\"\n48) test(S,W) where S = 47, W = 0, expected: \"unsafe\"\n49) test(S,W) where S = 48, W = 0, expected: \"unsafe\"\n50) test(S,W) where S = 49, W = 0, expected: \"unsafe\"\n51) test(S,W) where S = 50, W = 0, expected: \"unsafe\"\n52) test(S,W) where S = 51, W = 0, expected: \"safe\"\n53) test(S,W) where S = 52, W = 0, expected: \"safe\"\n54) test(S,W) where S = 53, W = 0, expected: \"unsafe\"\n55) test(S,W) where S = 54, W = 0, expected: \"unsafe\"\n56) test(S,W) where S = 55, W = 0, expected: \"unsafe\"\n57) test(S,W) where S = 56, W = 0, expected: \"unsafe\"\n58) test(S,W) where S = 57, W = 0, expected: \"unsafe\"\n59) test(S,W) where S = 58, W = 0, expected: \"unsafe\"\n60) test(S,W) where S = 59, W = 0, expected: \"unsafe\"\n61) test(S,W) where S = 60, W = 0, expected: \"unsafe\"\n62) test(S,W) where S = 61, W = 0, expected: \"unsafe\"\n63) test(S,W) where S = 62, W = 0, expected: \"unsafe\"\n64) test(S,W) where S = 63, W = 0, expected: \"unsafe\"\n65) test(S,W) where S = 64, W = 0, expected: \"unsafe\"\n66) test(S,W) where S = 65, W = 0, expected: \"unsafe\"\n67) test(S,W) where S = 66, W = 0, expected: \"unsafe\"\n68) test(S,W) where S = 67, W = 0, expected: \"unsafe\"\n69) test(S,W) where S = 68, W = 0, expected: \"unsafe\"\n70) test(S,W) where S = 69, W = 0, expected: \"unsafe\"\n71) test(S,W) where S = 70, W = 0, expected: \"unsafe\"\n72) test(S,W) where S = 71, W = 0, expected: \"unsafe\"\n73) test(S,W) where S = 72, W = 0, expected: \"unsafe\"\n74) test(S,W) where S = 73, W = 0, expected: \"unsafe\"\n75) test(S,W) where S = 74, W = 0, expected: \"unsafe\"\n76) test(S,W) where S = 75, W = 0, expected: \"unsafe\"\n77) test(S,W) where S = 76, W = 0, expected: \"unsafe\"\n78) test(S,W"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'unsafe'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == 6\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3 4 5) == 6\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint('Test pass.')\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == 6\n\"\"\"\n\n\"\"\"\n\nTriangles problem:\n\nFor each triangle ABC, write a line of code that finds the area of triangle ABC.\n\nInput Format\nIn this section, you will be given three integers - A, B and C.\n\nOutput Format\nIn this section, print the area of triangle ABC, rounded off to the nearest integer.\n\nSample Input\n3 4 5\n\nSample Output\n6\n\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"Test 1 Passed\")\nassert solution(\"1 1 1\") == \"0\"\nprint(\"Test 2 Passed\")\nassert solution(\"3 4 5\") == \"6\"\nprint(\"Test 3 Passed\")\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == 6\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\") == 4\nassert solution(\"1 100 100\") == 1\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n1, 10, 2\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 11 4') == 4\n\n\"\"\"\n\nimport sys\n\nA, B, C = map(int, sys.stdin.readline().strip().split())\n\nsumm = A + (B * C)"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 11 4\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"3 0 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11 4\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 1 2\") == 2\n\"\"\"\n\nA, B, C = map(int, input().split())\nprint(B // (C + 1))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nA, B, C = input().split(\" \")\nA = int(A)\nB = int(B)\nC = int(C)\nans = 0\nfor i in range(A, B + 1):\n    ans += 1\n    if i % C == 0:\n        ans -= 1\n        break\nprint(ans)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 5) == 10\n\n---Solution---\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nfrom math import prod"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == 10\n\n'''\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\n\nprint(solution(stdin))\n\n\"\"\"\n\"\"\"\n2 5\n\n2 * 5 = 10\n\"\"\"\n\na, b = map(int, input().split())\nprint(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\nprint(solution(\"1 1 1\"))\nprint(solution(\"2 10 3\"))\nprint(solution(\"5 10 10\"))"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7') == '10'\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\") == 10\n\"\"\"\n\nA, B, T = [int(i) for i in stdin.split()]\n\ntotal = 0\nbiscuits = 0\nfor i in range(int(T / A) + 1):\n    biscuits += A\n    total += biscuits\n    biscuits = A * (i + 1)\n    print(total)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 5 7''') == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nassert solution(\"1 1 10\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\") == 10\n\na, b, t = [int(x) for x in stdin.split(' ')]"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\n\"\"\"\nSolution 3"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5 7''') == 10\n'''\n'''\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 567') == 'OK'\nassert solution('567 7') == 'NG'\n\"\"\"\n\nA, B, K = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 500 600\") == \"OK\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''7\n500 600'''\n) == 'OK'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n500 600') == \"OK\"\nassert solution('7\\n500 600\\n456 123') == \"NG\"\nassert solution('2\\n1 100') == \"NG\"\nassert solution('2\\n2 2') == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"7\n500 600\n\"\"\"\n) == 'OK'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 500 600') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('K 500 600') == 'NG'\nassert solution('K 7 100') == 'OK'\nassert solution('K 7 10') == 'NG'\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 10') == 'NG'\nassert solution('7\\n1 10') == 'OK'\nassert solution('7\\n100 500') == 'OK'\nassert solution('7\\n100 500') == 'NG'\nassert solution('7\\n100 500') == 'NG'\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n\") == \"2.66666667\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nt, x = input().split()\nt, x = int(t), int(x)\n\nprint(f\"{math.floor(t / x):.6f}\")\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 3\n''') == '2.6666666667'\nassert solution('''8 2\n''') == '3.0'\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\nprint(\"{0:.3f}\".format(T / X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\na, b = [int(i) for i in stdin.strip().split(\" \")]\nprint(f\"{a * b / a:.3f}\")\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '0.5'\nassert solution('2 3') == '1.0'\nassert solution('1 2 3') == '1.5'\n'''"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\n\"\"\"\nGiven two integers A and B, the task is to find the number of ways you can form a number of A using digits from {1,2,3,4,5,6,7,8,9} such that the number obtained from such way is less than B.\nExamples:\nInput: A = 3, B = 10\nOutput: 7\n\nInput: A = 3, B = 16\nOutput: 2\nExplanation:\n{1, 8, 9} -> 3\n{1, 2, 2, 3} -> 4\n{1, 2, 2, 2, 8} -> 9\n{1, 2, 2, 2, 2, 9} -> 10\n\n[+]Temporal marker            : Tue, 9:33 | Feb 19, 20\n[+]Temporal marker untethered : Tue, 9:45 | Feb 19, 20\n[+]Comments                   : *implemented straightforward, works fine for low A and B\n                                *Solved\n[+]Level                      :\n[+]Tread Speed                :\n[+]LINK                       : https://www.interviewbit.com/problems/ways-to-form-number-less-than-b/\n[+] Supplement Sources         : N/A\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\"\n\na,b,c = input().split()\nb = int(b)\nc = int(c)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '6 4 3'\n) == '1'\nassert solution(\n    '0 0 0'\n) == '0'\nassert solution(\n    '6 2 3'\n) == '0'\nassert solution(\n    '6 2 1'\n) == '0'\nassert solution(\n    '3 0 2'\n) == '0'\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 4 3') == '1'\nprint('Test Successful')"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '6 4 3'\n) == '1'\n\"\"\"\n\n\"\"\"\nBOTTLE CAPACITY, A BOTTLE OF WATER, A LINE OF DIGITS"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('6 4 3') == '1'\nassert solution('10 11 12') == '10'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4\\n3 1 2 4') == '3'\nassert solution('4\\n3 1 2 4\\n1 3 2 4') == '0'\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n---Problem---\n\nImplement function solution(P, Q, N) which takes in two permutations P and Q and a number N and returns the absolute difference between the largest element in P and the smallest element in Q.\n\n-----Solution-----\n\nIt is easy to see that if we sorted the permutation P and Q, then the difference between the largest and smallest element would be the difference between the N-1th and 1st element of sorted P and Q.\n\nSince N-1 is always greater than or equal to 1, we know that we can find the indices of the smallest element and the largest element in sorted P and Q, and then sort them and return the difference between the indices (which are a and b).\n\nFrom here, we can begin solving the problem recursively. For example, we can assume we have already computed the indices of the smallest element and the largest element in P and Q, and we want to find the absolute difference between the indices in the sorted versions of P and Q.\n\nIn this case, we can compute the absolute difference between the indices in P and Q. If the absolute difference between the indices in P and Q is greater than the absolute difference between the indices of the elements in Q and P, then the absolute difference would be the difference between the elements in Q and P.\n\nOtherwise, we can simply return the difference between the indices in the sorted versions of P and Q.\n\nSince we have already computed the indices of the smallest element in P and the largest element in Q, we can just use those indices to compute the indices of the smallest element in Q and the largest element in P.\n\nWe then recursively call the function solution(P, Q, N - 1) where N = N - 1 to compute the absolute difference between the indices in Q and P, then return the solution from the previous call.\n\nThe solution below uses a similar approach to solve the problem.\n\n'''\nimport math\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"2\\n1 3\\n2 1\") == \"1\"\n\n-----\n2. Assume that you are given n integers (a_1,~a_n). We can define an array of size n - 1 that satisfies the following properties:\n\nFor every i, a_i > a_{i + 1}.\nFor every i, a_i >= 0.\nThe array is called an increasing sequence if a_1 < a_2 <... < a_n.\nThere is an array of size n - 1, called increasing sequences of length n - 1, such that all the elements in the array are increasing sequences of length n - 1.\nFor every increasing sequence array a, find the number of increasing sequences of length n that can be formed using elements of array a.\n\n-----Notes-----\nArray is defined as an array of size n - 1 that satisfies the following properties:\n\nFor every i, a_i > a_{i + 1}.\nFor every i, a_i >= 0.\nThe array is called an increasing sequence if a_1 < a_2 <... < a_n.\nThere is an array of size n - 1, called increasing sequences of length n - 1, such that all the elements in the array are increasing sequences of length n - 1.\nFor every increasing sequence array a, find the number of increasing sequences of length n that can be formed using elements of array a.\n\n-----Constraints-----\n - n \\leq 100\n - 1 \\leq a_i \\leq 1000\n\n-----Input-----\nThere are three lines in the input:\n\nn - the number of elements in the array\na_1,~a_n - the elements of the array, separated by a space\n\n-----Output-----\nPrint the number of increasing sequences of length n that can be formed using elements of array a_1,~a_n.\n\n-----Sample Input-----\n5\n1 3 4 2 5\n\n-----Sample Output-----\n5\n\nThere are 5 increasing sequences of length 5: (1, 2, 3, 4, 5), (1, 3, 4, 2, 5), (1, 3, 4, 5, 2), (1, 3, 5, 4, 2), and (1, 3, 5, 2, 4).\n\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 2') == '3'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\nassert solution('''\n2\n3 1 2\n3 1 2\n''') == '0'\nassert solution('''\n2\n3 1 2\n2 1 3\n''') == '1'\nassert solution('''\n4\n1 2 3 4\n4 3 1 2\n''') == '3'\nassert solution('''\n4\n2 1 3 4\n4 3 2 1\n''') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"2\\n1 2\\n1 2\") == \"0\"\nassert solution(\"4\\n1 3 2 4\\n3 1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\\n1 3 2\\n2 3 1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n\nassert solution('''\n4\n1 4 3 2\n2 1 3 4\n''') == '0'\n\nassert solution('''\n5\n1 4 3 2 5\n5 1 4 3 2\n''') == '2'\n\nprint('Success')"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(S) == output\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"AT\") == 1\nassert solution(\"ATC\") == 2\nassert solution(\"ATCODER\") == 3\nassert solution(\"ATCODERATC\") == 8\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(T) == result\nprint(solution(T))\n\nSolution\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"AC\") == 1\n\"\"\"\n\nimport collections\nfrom typing import Deque\n\n\nclass Solution:\n    def __init__(self, string):\n        self.string = string\n\n    def longest_acgt_string_substring(self) -> int:\n        \"\"\"\n        Finds the longest substring of S that only contains A, C, G, T\n        Returns the length of that substring\n        \"\"\"\n        # The longest substring can be either A, C, G, T or an empty string\n        max_substring = min(len(self.string), 4)\n        substring = \"\"\n        while max_substring > 0:\n            substring = self.string[0:max_substring]\n            # If the substring is a valid ACGT string, return the length of it\n            if self.is_valid_acgt_string(substring):\n                return len(substring)\n            max_substring -= 1\n        # If the string is invalid, return 0\n        return 0\n\n    def is_valid_acgt_string(self, substring: str) -> bool:\n        \"\"\"\n        Determines whether a substring is a valid ACGT string or not\n        \"\"\"\n        # For each character in the substring, check if it is A, C, G, T\n        # If it is not then return False\n        for c in substring:\n            if c!= \"A\" and c!= \"C\" and c!= \"G\" and c!= \"T\":\n                return False\n        # Otherwise return True\n        return True\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '9'\nassert solution('1') == '0'\nassert solution('21') == '6'\nassert solution('121') == '0'\n\"\"\"\n\n\"\"\"\nBEST SOLUTION\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == \"9\"\nprint(solution('11'))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '9'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == \"4\"\nassert solution(10) == \"9\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1234\") == \"5\"\nassert solution(\"2345\") == \"8\"\nassert solution(\"12345\") == \"6\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == '9'\n\"\"\"\nfrom typing import Iterable, List, Union, Dict\n\nfrom icontract import require, ensure\n\n\nclass Entry:\n    def __init__(self, value: Union[int, float], count: int):\n        self.value = value\n        self.count = count\n\n\nclass Bucket:\n    def __init__(self, entries: List[Entry]):\n        self.entries = entries\n\n    def __str__(self) -> str:\n        return f\"{self.entries}\"\n\n\nclass Histogram:\n    def __init__(self, buckets: List[Bucket]):\n        self.buckets = buckets\n\n    def __str__(self) -> str:\n        return f\"{self.buckets}\"\n\n    @property\n    def count_greater_than_or_equal_to_one(self) -> int:\n        \"\"\"Count of values >= 1\"\"\"\n        return len(list(filter(lambda b: b.count >= 1, self.buckets)))\n\n    @property\n    def count_greater_than_or_equal_to_five(self) -> int:\n        \"\"\"Count of values >= 5\"\"\"\n        return len(list(filter(lambda b: b.count >= 5, self.buckets)))\n\n    @property\n    def count_greater_than_or_equal_to_ten(self) -> int:\n        \"\"\"Count of values >= 10\"\"\"\n        return len(list(filter(lambda b: b.count >= 10, self.buckets)))\n\n    @property\n    def count_greater_than_or_equal_to_fifteen(self) -> int:\n        \"\"\"Count of values >= 15\"\"\"\n        return len(list(filter(lambda b: b.count >= 15, self.buckets)))\n\n    def values_count_greater_than_or_equal_to_fifteen(self) -> Dict[int, int]:\n        \"\"\"Count of values >= 15\"\"\"\n        return dict((k, v) for k, v in\n                    enumerate(self.buckets, start=1) if v.count >= 15)\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofcookies\") == \"cupofcookies\"\n\nprint(solution(\"cupofcoffee\"))\nprint(solution(\"cupofcookies\"))\n\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofhottea') == 'cupofcoffee'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cupofcoffee') == 4\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 4\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == \"coffee\"\nassert solution(\"cupofhottea\") == \"hottea\"\nassert solution(\"cupofcoffee\") == \"coffee\"\nassert solution(\"cupofhottea\") == \"hottea\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cupofcoffee') == '4'"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"b\") == 1\nassert solution(\"ab\") == 2\nassert solution(\"bab\") == 2\nassert solution(\"aba\") == 2\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"cuhtofeeea\"\nassert solution(\"cupofhottea\") == \"cuhtohottea\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nfrom typing import List\n\nimport sys"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\") == \"5 6 7 8 9\"\n\"\"\"\n\nimport sys\n\nK, X = [int(i) for i in sys.stdin.readline().rstrip().split()]\n\nprint(\" \".join([str(i) for i in range(X - K + 1, X + K)]))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\"\n\nk, x = input().split()\nk, x = int(k), int(x)"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 7''') == '''5 6 7 8 9'''\nassert solution('''3 8''') == '''6 7 8 9'''\nassert solution('''5 4''') == '''5'''\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\n\"\"\"\n\nfrom math import ceil\n\nx = int(stdin.readline().strip())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"No\"\n\nprint(solution(\"25\"))\n\n-----Test 3-----\n\nYou will turn on the air conditioner if, and only if, the temperature of the room is 30 degrees Celsius or above.\nThe current temperature of the room is X degrees Celsius. Will you turn on the air conditioner?\n\n-----Constraints-----\n - -40 \\leq X \\leq 40\n - X is an integer.\n\n-----Input-----\n20\n\n-----Output-----\nNo"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30') == 'No'\nassert solution('25') == 'Yes'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\nassert solution('15') == 'Yes'"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"27\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30') == 'Yes'\nassert solution('25') == 'No'\n\"\"\"\n\n\"\"\"\nInput: \n-40\n\nOutput:\nYes\n\ninput: int\noutput: str\n\n30\n26\n-40\n-15\n\"\"\"\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25\\n') == 'No'"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 1') == '1'"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2\\n3 4\") == \"1\"\nassert solution(\"2 2\\n1 1\") == \"0\"\nassert solution(\"4 1\\n1 2 1 2 1\") == \"1\"\nassert solution(\"4 1\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\nassert solution('1 1\\n1 1') == '0'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\nfrom typing import Tuple\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\nassert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('12345') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1235\") == \"Bad\"\nassert solution(\"2234\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"1243\") == \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"12aa\") == \"Bad\"\nassert solution(\"aaaa\") == \"Bad\"\nassert solution(\"0000\") == \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3776\") == \"Bad\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Bad\"\n\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1235\") == \"Good\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1244\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1123\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"3.5\"\nassert solution(\"2 4\") == \"3.5\"\nassert solution(\"2 5\") == \"3.5\"\nassert solution(\"3 6\") == \"3.5\"\nassert solution(\"3 7\") == \"3.6\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 3.5\nassert solution('1 2') == 1.5\nassert solution('10 100') == 100\nassert solution('5 10') == 5.5\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n') == '3.5'\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('1\\n3 4') == '4'\nassert solution('3\\n1 2') == '2.5'\nassert solution('3\\n3 4') == '3.5'\nassert solution('3\\n1 1') == '1.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 4\") == '3.5'\nprint('Hooray!')\n\nassert solution(\"3\\n3 4\") == '3.5'\nprint('Hooray, again!')\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2\\n3 4'\n) == '3.5'\n\nassert solution(\n    '2\\n5 5'\n) == '3.5'\n\nassert solution(\n    '2\\n0 1'\n) == '1'\n\nassert solution(\n    '2\\n0 0'\n) == '0'\n\nassert solution(\n    '3\\n1 2 3'\n) == '2'"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\n\"\"\"\n\"\"\"\nNo need for arrays here.\nThe trick is to get the minimum possible number from one ingredient and then do the same thing with it.\nI'll go through the process of reducing the minimum possible number from one ingredient to zero.\n\n1) We start with the largest possible number. In this case, the largest possible number is 1_000_000.\n\n2) We reduce each number to its lowest possible number. In this case, the lowest possible number is 1.\n\n3) We calculate the average of the numbers that were reduced. In this case, the average is 2.\n\n4) We repeat the process until we get the lowest possible number (in this case, 1).\n\n5) We take the average of the numbers that were reduced and it is our minimum possible number.\n\n6) We repeat the process once more to obtain the next lowest number.\n\n7) We take the average of the numbers that were reduced and it is our next minimum possible number.\n\n8) We repeat the process once more until we get the next lowest number (in this case, 1).\n\n9) We take the average of the numbers that were reduced and it is our third minimum possible number.\n\n10) We repeat the process once more to obtain the fourth lowest number.\n\n11) We take the average of the numbers that were reduced and it is our fourth lowest possible number.\n\n12) We repeat the process once more to obtain the fifth lowest number.\n\n13) We take the average of the numbers that were reduced and it is our fifth lowest possible number.\n\n14) We repeat the process once more to obtain the sixth lowest number.\n\n15) We take the average of the numbers that were reduced and it is our sixth lowest possible number.\n\n16) We repeat the process once more to obtain the seventh lowest number.\n\n17) We take the average of the numbers that were reduced and it is our seventh lowest possible number.\n\n18) We repeat the process once more to obtain the eighth lowest number.\n\n19) We take the average of the numbers that were reduced and it is our eighth lowest possible number.\n\n20) We repeat the process once more to obtain the ninth lowest number.\n\n21) We take the average of the numbers that were reduced and it is our ninth lowest possible number.\n\n22) We repeat the process once more to obtain the tenth lowest number.\n\n23) We take the average of the numbers that were reduced and it is our tenth lowest possible number.\n\n24) We repeat the process once more to obtain the eleventh lowest number.\n\n25) We take the average of the numbers that were reduced and it is our eleventh lowest possible number.\n\n26) We repeat the process once more to obtain the twelfth lowest number.\n\n27) We take the average of the numbers that were reduced and it is our twelfth lowest possible number.\n\n28) We repeat the process once more to obtain the thirteenth lowest number.\n\n29) We take the average of the numbers that were reduced and it is our thirteenth lowest possible number.\n\n30) We repeat the process once more to obtain the fourteenth lowest number.\n\n31) We take the average of the numbers that were reduced and it is our fourteenth lowest possible number.\n\n32) We repeat the process once more to obtain the fifteenth lowest number.\n\n33) We take the average of the numbers that were reduced and it is our fifteenth lowest possible number.\n\n34) We repeat the process once more to obtain the sixteenth lowest number.\n\n35) We take the average of the numbers that were reduced and it is our sixteenth lowest possible number.\n\n36) We repeat the process once more to obtain the seventeenth lowest number.\n\n37) We take the average of the numbers that were reduced and it is our seventeenth lowest possible number.\n\n38) We repeat the process once more to obtain the eighteenth lowest number.\n\n39) We take the average of the numbers that were reduced and it is our eighteenth lowest possible number.\n\n40) We repeat the process once more to obtain the nineteenth lowest number.\n\n41) We take the average of the numbers that were reduced and it is our nineteenth lowest possible number.\n\n42) We repeat the process once more to obtain the twentieth lowest number.\n\n43) We take the average of the numbers that were reduced and it is our twentieth lowest possible number.\n\n44) We repeat the process once more to obtain the twenty-first lowest number.\n\n45) We take the average of the numbers that were reduced and it is our twenty-first lowest possible number.\n\n46) We repeat the process once more to obtain the twenty-second lowest number.\n\n47) We take the average of the numbers that were reduced and it is our twenty-second lowest possible number.\n\n48) We repeat the process once more to obtain the twenty-third lowest number.\n\n49) We take the average of the numbers that were reduced and it is our twenty-third lowest possible number.\n\n50) We repeat the process once more to obtain the twenty-fourth lowest number.\n\n51) We take the average of the numbers that were reduced and it is our twenty-fourth lowest possible number.\n\n52) We repeat the process once more to obtain the twenty-fifth lowest number.\n\n53) We take the average of the numbers that were reduced and it is our twenty-fifth lowest possible number.\n\n54) We repeat the process once more to obtain the twenty-sixth lowest number.\n\n55) We take the average of the numbers that were reduced and it is our twenty-sixth lowest possible number.\n\n56) We repeat the process once more to obtain the twenty-seventh lowest number.\n\n57) We take the average of the numbers that were reduced and it is our twenty-seventh lowest possible number.\n\n58) We repeat the process once more to obtain the twenty-eight lowest number.\n\n59) We take the average of the numbers that were reduced and it is our twenty-eight lowest possible number.\n\n60) We repeat the process once more to obtain the twenty-ninth lowest number.\n\n61) We take the average of the numbers that were reduced and it is our twenty-ninth lowest possible number.\n\n62) We repeat the process once more to obtain the twenty-tenth lowest number.\n\n63) We take the average of the numbers that were reduced and it is our twenty-tenth lowest possible number.\n\n64) We repeat the process once more to obtain the twenty-eleventh lowest number.\n\n65) We take the average of the numbers that were reduced and it is our twenty-eleventh lowest possible number.\n\n66) We repeat the process once more to obtain the twenty-twelfth lowest number.\n\n67) We take the average of the numbers that were reduced and it is our twenty-twelfth lowest possible number.\n\n68) We repeat the process once more to obtain the twenty-thirteenth lowest number.\n\n69) We take the average of the numbers that were reduced and it is our twenty-thirteenth lowest possible number.\n\n70) We repeat the process once more to obtain the twenty-fourteenth lowest number.\n\n71) We take the average of the numbers that were reduced and it is our twenty-fourteenth lowest possible number.\n\n72) We repeat the process once more to obtain the twenty-fifteenth lowest number.\n\n73) We take the average of the numbers that were reduced and it is our twenty-fifteenth lowest possible number.\n\n74) We repeat the process once more to obtain the twenty-sixteenth lowest"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == '3.5'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6') == 14\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\nassert solution('5 3 6 9 1\\n5 8 7 4 2\\n8 6 3 7 5') == '34'\n\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\n\"\"\"\nclass AllYouCanEat:\n    def __init__(self):\n        self.dishes = dict()\n        self.total_score = 0\n\n    def add_dish(self, dish_num: int, score: int, after_score: int):\n        self.dishes[dish_num] = (score, after_score)\n\n    def get_total_score(self):\n        return self.total_score\n\n    def eat(self, dish_num: int):\n        score, after_score = self.dishes[dish_num]\n        self.total_score += score\n        for i in range(dish_num + 1, len(self.dishes)):\n            next_dish, (next_dish_score, _) = self.dishes[i]\n            self.total_score += next_dish_score * after_score\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == '14'\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6\\n') == '14'\n\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 5\\n3 6') == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == 14\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\nassert solution(\"ZABCDBABCQAAA\") == 4\nassert solution(\"ZABCDBABCQAAAB\") == 3\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 ZABCDBABCQ\") == \"2\"\nassert solution(\"10 ZABCDBABCQ\") == \"2\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ZABCDBABCQ\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 ABCDBABCQ\") == \"2\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2, \"WA\"\nassert solution(\"ZABCDBABC\") == 2, \"WA\"\nassert solution(\"ZABACABACABACABACABAC\") == 4, \"WA\"\nassert solution(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\") == 22, \"WA\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AAAABBBBCCCCDDDD') == '4'\nassert solution('ABBCDDDD') == '4'\nassert solution('AAA') == '3'\nassert solution('AA') == '1'\nassert solution('AAAAAAAAAABBBBBB') == '16'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"10\\n\"\n\"ZABCDBABCQ\") == 2, \"Error!\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCDBABCQ') == 2\n\n-----\n1. \u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0430 \u043f\u043e\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u043e \u0438 \u0441\u0442\u0440\u043e\u043a\u0430. \u041d\u0430\u0439\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0440\u043e\u043a\u0443."
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nMASHIKE\\nRUMOI\\nOBIRA') == '2'\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nOBIRA\\nMIXTA\\nMASHIKE\\nRUMOI\") == \"2\"\nprint(\"PASSED\")\n\nassert solution(\"5\\nRUMOI\\nMIXTA\\nMASHIKE\\nOBIRA\\nHOROKANAI\") == \"2\"\nprint(\"PASSED\")\n\nassert solution(\"4\\nMASHIKE\\nMIXTA\\nOBIRA\\nHOROKANAI\") == \"2\"\nprint(\"PASSED\")\n\nassert solution(\"3\\nOBIRA\\nMASHIKE\\nHOROKANAI\") == \"1\"\nprint(\"PASSED\")\n\nassert solution(\"7\\nMASHIKE\\nRUMOI\\nOBIRA\\nMIXTA\\nHABORO\\nHOROKANAI\") == \"1\"\nprint(\"PASSED\")"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\nimport unittest\n\nclass TestSum(unittest.TestCase):\n\n    def test_case_1(self):\n        assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n    def test_case_2(self):\n        assert solution('''3\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '0'\n    def test_case_3(self):\n        assert solution('''5\nKANJIRI\nTEMPURU\nCISANNE\nSALMOSO\nHIEMPIRE''') == '3'\n    def test_case_4(self):\n        assert solution('''2\nYAGOKI\nRUEMI\nOBIRA\nHABORO\nHOROKANAI''') == '1'\n    def test_case_5(self):\n        "
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nn = int(input())\ns = input().split()\na = [x for x in s if x.startswith(\"A\")]\nr = [x for x in s if x.startswith(\"R\")]\nc = [x for x in s if x.startswith(\"C\")]\nh = [x for x in s if x.startswith(\"H\")]\n\nsolution = 0\nfor i in a:\n    for j in r:\n        for k in c:\n            for l in h:\n                if i!= j and i!= k and i!= l and j!= k and j!= l and k!= l:\n                    solution += 1\n\nprint(solution)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stub1) == \"expected_result\"\nassert solution(stub2) == \"expected_result\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 3\\n2 3\\n1 2\\n1 3\\n') == 'Yes'\n\nassert solution('3 3\\n2 3\\n1 3\\n1 2\\n1 3\\n') == 'No'\n\nassert solution('3 3\\n3 2\\n3 1\\n2 3\\n') == 'No'\n\nassert solution('3 3\\n1 3\\n3 2\\n1 2\\n1 3\\n') == 'Yes'\n\nassert solution('5 3\\n1 3\\n1 3\\n2 3\\n1 2\\n') == 'Yes'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('3 1') == 'No'\nassert solution('4 2') == 'No'\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('2 4') == 'No'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\ninput = list(map(lambda s: s.strip(), input))\n\nn, m = map(int, input[0].split())\n\nassert 1 <= n <= 100\nassert 0 <= m <= n\n\nfor i in range(1, n + 1):\n    assert 0 <= m <= i\n\nprint('Yes')\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 1\\n1 2\\n2 3') == 'Yes'\nassert solution('2 2\\n1 1\\n2 1') == 'No'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2\\n3 1') == 'Yes'\nassert solution('5 5\\n2 3\\n4 5\\n5 2\\n3 4') == 'Yes'\nassert solution('10 10\\n1 1\\n3 3\\n5 5\\n7 7\\n9 9\\n2 2\\n4 4\\n6 6\\n8 8\\n') == 'No'\nassert solution('2 2\\n1 1') == 'Yes'\nassert solution('7 7\\n4 4\\n3 3\\n2 2\\n1 1\\n5 5') == 'No'\n\n---\n\nimport sys\n\nsys.stdin.readline().split()\nn, m = int(sys.stdin.readline().split()[0]), int(sys.stdin.readline().split()[0])\n\nfor _ in range(m):\n    if n == 0:\n        print('Yes')\n    else:\n        print('No')\n        n -= 1\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 3\\n1 3\\n\") == \"Yes\"\nassert solution(\"3 2\\n2 3\\n1 3\\n\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"5 2\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 1\\n2 1\\n3 1\\n\") == \"Yes\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"5 5\") == \"Yes\"\n\nimport sys"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sippuu') == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"puuus\") == \"No\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"soooo\") == \"No\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"adada\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nprint(solution(\"sippuu\"))\n\nassert solution(\"cappu\") == \"No\"\nprint(solution(\"cappu\"))\n\nassert solution(\"appu\") == \"Yes\"\nprint(solution(\"appu\"))\n\nassert solution(\"appu\") == \"Yes\"\nprint(solution(\"appu\"))\n\nassert solution(\"sippuu\") == \"Yes\"\nprint(solution(\"sippuu\"))"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('hmmmmm') == 'No'\nassert solution('floofy') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"rndrndrndrnd\") == \"No\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 70\n7 60\n1 80\n4 50''') == '4'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 70\n7 60\n1 80\n4 50\n\"\"\"\n) == \"4\"\n\nprint(solution(\n\"\"\"\n3 70\n7 60\n1 80\n4 50\n\"\"\"\n))\n\nassert solution(\n\"\"\"\n2 70\n1 60\n4 50\n\"\"\"\n) == \"TLE\"\n\nassert solution(\n\"\"\"\n1 70\n1 60\n4 50\n\"\"\"\n) == \"TLE\"\n\nassert solution(\n\"\"\"\n2 70\n1 60\n1 60\n\"\"\"\n) == \"TLE\"\n\nassert solution(\n\"\"\"\n3 70\n4 50\n1 60\n1 60\n\"\"\"\n) == \"TLE\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\"\"\"\n\n\"\"\"\nYou have a map of a circular road with some steps, marked with 1, 2, 3, 4, 5, and 6.\n\nThere is a starting point on the road.\n\nYou can walk for one hour in a direction (one of the 6 directions), then you must choose between two options:"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\") == \"4\"\n\ntry:\n    assert solution(\"7 60\\n1 80\\n4 50\\n\") == \"TLE\"\nexcept AssertionError as e:\n    print(f\"Assertion Error!\\n{e}\")\n    exit(1)\n\ntry:\n    assert solution(\"7 60\\n1 80\\n4 50\\n7 40\") == \"TLE\"\nexcept AssertionError as e:\n    print(f\"Assertion Error!\\n{e}\")\n    exit(1)\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 9\\n') == '8'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('1 1 1') == '0'\nassert solution('1 0 0') == '0'\nassert solution('10 10 10') == '50'\nassert solution('50 10 10') == '50'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9\\n') == '8'\nassert solution('1 3 2\\n') == '3'\nassert solution('5 5 20\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"aa\") == \"aa\"\nassert solution(\"aabb\") == \"aabb\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"aabcde\") == \"aabcde\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"acornistnt\") == \"1\"\nassert solution(\"peanutbomb\") == \"0\"\nassert solution(\"constraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('acornistnt') == 1\nassert solution('peanutbomb') == 0\nassert solution('constraint') == 1\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"acornistnt\") == 1\nassert solution(\"peanutbomb\") == 0\nassert solution(\"constraint\") == 1\n\"\"\"\n\nfrom collections import Counter\n\nn = int(stdin.readline())\nstrings = [stdin.readline().strip() for _ in range(n)]\n\nfor i in range(n):\n    strings[i] = Counter(strings[i])\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        if i!= j:\n            if strings[i] == strings[j]:\n                count += 1\n\nprint(count)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1111111111111111111111\"\n\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('112') == '1'\nassert solution('1121') == '1'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"112122$\\dots$\") == \"1\"\nassert solution(\"1121221212$\\dots$\") == \"2\"\nassert solution(\"11212212121212$\\dots$\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n3\\n20\\n38\\n56\") == \"2\\n5\\n9\\n8\"\n\"\"\"\n\nfrom math import log2, ceil\n\nstdin = open(\"./input.txt\", \"r\").read().rstrip()\nstdin = [int(x) for x in stdin.split('\\n')]\n\nq = stdin[0]\nseq = [1] + list(range(2, 1001))\n\nfor k in stdin[1:]:\n    i = seq.index(k)\n    seq = seq[:i] + [seq[i]//seq[i-1]] + seq[i+1:]\n    if len(seq) == k:\n        break\n\nseq = [int(log2(x)) for x in seq]\n\nwhile q:\n    print(seq[ceil(stdin[q+1]) - 1])\n    q -= 1\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11212312341234512345612345671234567812345678912345678910') == '1\\n2\\n5\\n2\\n0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1122334455556666777788889999') == '1'\nassert solution('123456789101112131415161718192021222324252627282930313233343536') == '3'\nassert solution
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11223344556677\") == \"7\"\n\"\"\"\n\nfrom itertools import count\n\nq = int(input())\nfor _ in range(q):\n    k = int(input())\n    n = 0\n    for i in count(1):\n        if not i % k:\n            print(i % 10)\n            break"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\\n2\\n5\\n2\\n0\"\nassert solution(\"111$\\dots$\") == \"1\\n1\\n1\\n1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('112123123412345') == '1'\nassert solution('11212312341234512345') == '2'\nassert solution('1121231234123451234512345') == '5'\nassert solution('112123123412345123451234512345') == '2'\nassert solution('11212312341234512345123451234512345') == '0'\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2\\n1 2 1 1 2'\n\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1 2'\nassert solution('1 2\\n3 4') == '1 2 1 2 3 4'\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 4\\n4 3\\n3 5\\n3 6\") == \"2\\n1 1 2 3 2 3 1 3 1\"\nassert solution(\"4 2\\n1 4\\n4 3\\n3 5\\n3 6\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n8 9\\n8 10\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 4\\n2 3\\n3 5\\n\") == \"1 2 1 1 2\"\nassert solution(\"5 2\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 5\\n3 6\\n5 2\\n\") == \"1 2 1 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n2 4\") == \"2\"\nassert solution(\"1 3\\n2 4\\n5 6\") == \"2\"\nassert solution(\"1 3\\n2 4\\n5 6\\n7 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3 1 1 1 2 1 3 1 1 1 2 1 3 2 3 2 1 3 2 3 1 1 1 2 2 1 3 3 1 1 1 3 2 1 1 2 1 1 2 2 3 1 2 3 1 3 1 1 2 2 2 2 2 1 2 2 1 1 1 2 1 1 1 1 2 2 1 3 3 1 3 1 1 1 2 2 1 1 2 3 1 1 1 2 2 2 2 1 2 1 1 1 3 1 1 1 2 1 1 1 1 1 2 1 1 2 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 2 1 2 2 2 1 2 3 2 1 1 2 3 2 1 1 2 2 3 1 1 1 1 1 2 1 1 1 1 2 2 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 2 1 1 1 1 1 2 2 1 2 1 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2', 'wrong result'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9''') == '3', 'wrong result'\n'''\n\nSample test(s)\n\nInput\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\nOutput\n2\n1 2 1 1 2 \n\nInput\n4 2\n3 1\n1 4\n1 2\n\nOutput\n1\n1 1 1 \n\nInput\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\nOutput\n3\n1 1 2 3 2 3 1 3 1\n\nInput\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\nOutput\n2\n1 2 1 1 2 \n\nInput\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\nOutput\n3\n1 1 2 3 2 3 1 3 1\n'''\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2\\n1 2 1 1 2'\n\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'\n\nassert solution('''\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3\\n1 1 2 3 2 3 1 3 1'\n\nassert solution('''\n5 2\n3 1\n1 4\n1 2\n2 5\n''') == '1\\n1 1 1'\n\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\nx_max = max(arr)\nx_min = 1\nmin_occ = 0\nmax_occ = 0\nfor i in range(n):\n    if arr[i] == x_max:\n        min_occ += 1\n    elif arr[i] == x_min:\n        max_occ += 1\n    elif arr[i] > x_min:\n        if arr[i] > x_max:\n            max_occ += 1\n        else:\n            min_occ += 1\nprint(min_occ, max_occ)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 4\") == \"2 4\"\nassert solution(\"1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7 4 3 1 4 3 3\") == \"3 6\"\n\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 4\") == '2 4'\nassert solution(\"5\\n1 1 3 4 4\") == '3 8'\n\nassert solution(\"9\\n4 3 7 1 4 3 3\") == '3 6'\nassert solution(\"7\\n4 3 7 1 4 3 3\") == '3 6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 4 4\") == \"2 4\"\nassert solution(\"9 1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7 4 3 1 4 3 3\") == \"3 6\"\n\n\"\"\"\n\nimport collections\n\nN = int(stdin.readline())\ncoordinates = [int(x) for x in stdin.readline().split()]\n\ndeq = collections.deque(coordinates)\ndeq.appendleft(0)\ndeq.append(N+1)\noccupied = []\nwhile deq:\n    cur = deq.popleft()\n    occupied.append(cur)\n    for i in range(-1, 2):\n        if cur + i > 0 and cur + i <= N and cur + i not in deq:\n            deq.appendleft(cur + i)\n\noccupied.sort()\nprint(occupied[0], occupied[-1])"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\n\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '2 4'\nassert solution('4 4 4') == '2 4'\nassert solution('1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7 1 4 3 3') == '3 6'\nassert solution('7 4 3 1 4 3') == '3 6'\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == '3 2 4 1 5'\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3 3\\n1 1\\n2 2') == '1 2 3'\nassert solution('2 10\\n1 1\\n2 2') == '2 1'\nassert solution('3 5\\n3 4\\n1 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('2 10\\n1 1\\n2 2') == '2 1'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2 3\\n3 1\") == \"3 1 2\"\nassert solution(\"4 2\\n2 3\\n1 1\") == \"1 2 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3\\n1 2\\n1 2') == '3 2 1 2'\nassert solution('5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n1 2\\n1 2') == '3 1 2'\nassert solution('4\\n1 3\\n2 3\\n1 4\\n2 4') == '3 1 4 2'\nassert solution('3\\n1 1\\n1 1') == '3 1 1'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3\\n3 1\\n1 2\\n\") == \"3 1 2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2\\n') == '3 1 2'\nassert solution('7\\n3 6\\n1 5\\n4 7\\n1 2\\n4 3\\n2 5\\n6 7\\n') == '3 1 4 7 2 6'\nassert solution('6\\n4 7\\n1 5\\n2 6\\n3 7\\n1 4\\n2 5\\n3 6\\n') == '4 2 3 1 7 5 6'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\nassert solution('''3\n2 3\n3 1\n1 2''') == '3 1 2'\nassert solution('''3\n1 2\n3 1\n2 3''') == '3 1 2'\nassert solution('''3\n1 2\n2 3\n1 3''') == '3 1 2'\nassert solution('''3\n2 1\n3 1\n2 3''') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == 3\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '10'\nassert solution('''\n6\n1 1000 10000 10 100 1000000000\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('123') == '3'\nassert solution('123 123') == '0'\n\"\"\"\nfrom collections import Counter\n\nstdin = open(0).read().split('\\n')\na = list(map(int, stdin[1].split()))\n\ns = sorted(Counter(a).items(), key=lambda x: x[1], reverse=True)\na = [k for k, v in s]\n\nprint(a[0] if len(a) > 0 else 0)\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 17 12 15 2\") == \"3\"\nassert solution
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"5\\n3 5 4 2 1\") == \"3\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"2\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n1 1000 10000\") == \"1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3\") == \"2\"\nassert solution(\"10 5 3 2\") == \"2\"\nassert solution(\"15 5 3 2\") == \"2\"\nassert solution(\"15 5 4 3\") == \"-1\"\nassert solution(\"15 5 2 1\") == \"2\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n15 5 3 2\") == '4'\nassert solution(\"3\\n5 2 1\") == '-1'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution(\"2 5 2 2\\n3 1 2 2\\n3 3 4 1\\n2 2 3 3\\n1 3 4 1\") == '-1\\n0'\nassert solution(\"10 2 4 2\\n10 2 6 2\\n10 10 10 10\\n10 4 1 1\\n10 3 4 2\\n10 10 1 2\\n10 10 3 2\\n10 10 3 3\\n10 4 3 3\\n10 10 4 2\\n10 10 4 2\\n10 10 4 3\\n10 10 5 4\\n10 10 5 4\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5\\n2\\n0\\n1'\nassert solution('5 2 3 2\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '-1\\n5\\n5\\n5\\n5'\nassert solution('5 2 3 2\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '-1\\n5\\n5\\n5\\n5'\n\"\"\"\n\nimport sys\n\ntests = int(sys.stdin.readline().strip())\n\nfor _ in range(tests):\n    battery, turns, a, b = map(int, sys.stdin.readline().strip().split())\n    if battery < a:\n        print(-1)\n    elif battery < b:\n        print(turns)\n    else:\n        print(0)\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15 5 3 2\") == '4'\nassert solution(\"15 5 4 3\") == '-1'\nassert solution(\"15 5 2 1\") == '5'\nassert solution(\"15 5 5 1\") == '2'\nassert solution(\"16 7 5 2\") == '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a?b?c\") == \"16\"\nassert solution(\"a???c\") == \"2835\"\nassert solution(\"a??b?c\") == \"27\"\nassert solution(\"a??c?b\") == \"26\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ac?b?c') == '24'\n\nassert solution('???????') == '2835'\nassert solution('a???c') == '46'\nassert solution('cccbbbaaa') == '0'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a??c\") == \"2835\"\nassert solution(\"????????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\nassert solution(\"a???c\") == \"46\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('ac???c') == 24\nassert solution('ac?b??c') == 24\nassert solution('ac??b??c') == 24\nassert solution('ac?b?c?') == 24\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('cccbbbaaa') == 0\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('ac?b?c'), 24)\n        self.assertEqual(solution('???????'), 2835)\n        self."
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\nassert solution(\"a???c\") == \"46\"\nassert solution(\"abc\") == \"3\"\n\n\n\n\n---"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\n\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('a???c') == '46'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\nassert solution(\"5 3\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\") == \"16\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5''') == '5'\nassert solution('''4 0\n1 3 3 7''') == '16'\nassert solution('''5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15''') == '18'\n\n'''"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\") == \"5\"\n\nassert solution(\"\"\"4 0\n1 3 3 7\n\"\"\") == \"16\"\n\nassert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\"\"\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"16\"\nassert solution(\"1 2 8\") == \"12\"\nassert solution(\"1 3 10\") == \"10\"\nassert solution(\"1 4 7\") == \"10\"\nassert solution(\"1 5 15\") == \"15\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5\n2 1 1''') == '5'\n\nassert solution('''4 0\n1 3 3 7\n''') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\nassert solution(\"10 1 1\\n0 9\\n9 5\\n\") == \"25\"\nassert solution(\"10 1 1\\n0 9\\n9 5\\n\") == \"25\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 4\\n1 2\\n2 3\\n3 4\") == \"14\"\nassert solution(\"4 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"4 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '14'\nassert solution('1 2 3 4 5 6 7 8 9') == '-1'\nassert solution('1 2 3 4 5 6 7') == '45'\n\"\"\"\n\n\"\"\"\nThe idea is to process the input and collect information about the rain.\n\nAs we do not care about the points of falling rain, we can use a set to keep only the unique rain points.\n\nThe set `rain_points` contains all rain points, the key is a rain point and the value is a list of segments.\n\"\"\"\n\nrain_points = dict()\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\"\"\"\n) == \"14\"\nassert solution(\n\"\"\"\n10 1 1\n0 9\n0 5\n\"\"\"\n) == \"-1\"\n\n\"\"\"\n[-1]\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == '14'\nassert solution(\n'''\n10 1 1\n0 9\n0 5\n''') == '45'\nassert solution(\n'''\n10 1 1\n0 9\n1 5\n''') == '-1'\nassert solution(\n'''\n10 1 1\n0 9\n1 5\n''') == '-1'\nassert solution(\n'''\n10 1 1\n0 9\n1 5\n''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 1 1 0 9 0 5 1') == '-1'\nassert solution('10 2 4 3 7 8 10 3 4') == '14'\n\"\"\"\n\nimport math\n\na, n, m = [int(x) for x in input().split(' ')]\n\nlst = [int(x) for x in input().split(' ')]\n\nd = {}\n\nfor i in range(n):\n    l, r = [int(x) for x in input().split(' ')]\n    if l in d:\n        d[l].append(r)\n    else:\n        d[l] = [r]\n    if r in d:\n        d[r].append(l)\n    else:\n        d[r] = [l]\n\numbrellas = {}\n\nfor i in range(m):\n    x, p = [int(x) for x in input().split(' ')]\n    umbrellas[x] = p\n\nf = {}"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\n\"\"\"\n\na, b, c = [int(i) for i in stdin.split(\" \")]"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 5\") == 'Yes'\nassert solution(\"1 2 2\") == 'No'\nassert solution(\"4 4 6\") == 'No'\n\n-------"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5\\n') == \"Yes\"\nassert solution('7 7 7\\n') == \"No\"\n\"\"\"\n\nA, B, C = map(int, stdin.split())\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 6 7\") == \"No\"\nassert solution(\"4 7 7\") == \"No\"\nassert solution(\"5 5 5\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2') == 'Yes'\nassert solution('5 1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"2 1 2\") == \"Yes\"\nassert solution(\"3 1 3\") == \"No\"\nassert solution(\"4 1 4\") == \"Yes\"\nassert solution(\"5 1 5\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 5 7\") == \"No\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == '1'\nassert solution(\"3\\n25 85\\n34 92\\n80 150\") == '2'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n12 5\\n1000 2000\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(3000)\n\ninp = sys.stdin.readlines()\nN = int(inp[0])\nT, A = map(int, inp[1].split())\nH = list(map(int, inp[2].split()))\n\nH.sort()\n\nmin_d = 1000"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12 5\\n1000 2000 3000 4000 5000') == '1'\n\"\"\"\n\nfrom collections import OrderedDict\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nprint(\"Passed.\")\n\n---"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '0'\nassert solution('2 2\\n3 4') == '1'\nassert solution('3 2\\n1 2 2') == '1'\nassert solution('1 2\\n3 4\\n5 6') == '0'\n\"\"\"\n\nimport sys\n\nA, T = map(int, sys.stdin.readline().split())\n\nh = list(map(int, sys.stdin.readline().split()))\n\nd = []\nfor i, _ in enumerate(h):\n    d.append((i, A - _ * 0.006))\n\nd.sort(key=lambda x: x[1])\n\nprint(d[0][0])\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 12 1000 2000\") == \"1\"\n'''"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == 1\nassert solution(\"5 3\") == 2\nassert solution(\"3 5\") == 0\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('N M\\n1 2\\n') == '1'\nassert solution('N M\\n1 2\\n3 4\\n') == '1'\n\"\"\"\n\n\"\"\"\nLet's assume that the first N balls are even. Then the numbers on the next M balls are odd.\n\nIn fact, there are C(N, 2) combinations of N balls, where the first ball is even and the second one is odd.\nSo the number of ways for choosing the first ball is C(N, 2). \nIf we assume that the first ball is odd, we can reduce the number of ways of choosing the first ball from C(N, 2) to C(N - 1, 2) by 1.\n\nThus, the number of ways for choosing the first ball is C(N, 2) + C(N - 1, 2).\n\nSimilar conclusions apply to the second ball.\n\nThe total number of ways is the product of C(N, 2) + C(N - 1, 2) + C(N - 2, 2) +... + C(1, 2) + C(0, 2).\n\nThis expression is simply the binomial coefficient 2N.\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n') == 1\n\n------\n|  |\n----\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is odd;\n - If we choose the two balls with 1 and 4, the sum is odd;\n - If we choose the two balls with 2 and 4, the sum is even.\nThus, the answer is 1.\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '1'\nassert solution('2 1') == '0'\nassert solution('2 2') == '1'\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1\n''') == '1'\n\nassert solution('''3 2\n''') == '2'\n\nassert solution('''3 2\n''') == '2'\n\nassert solution('''1 10\n''') == '0'\n\nassert solution('''4 2\n''') == '1'"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == 1\n\"\"\"\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 4\") == \"0\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACTACG\", 3, 7) == 2\nassert solution(\"ACTACG\", 3, 3) == 0\nassert solution(\"ACTACG\", 3, 2) == 3\n\"\"\"\n\n\n\nclass Solution:\n    # @param A : string\n    # @param B : list of integers\n    # @return a strings\n    def solve(self, A, B):\n        res = 0\n        for i in range(len(B)):\n            l = B[i]\n            r = B[i+1]\n            cur_str = A[l:r]\n            res += cur_str.count(\"AC\")\n        return res\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ACACTACG', 3, 7) == '2'\nassert solution('ACACTACG', 3, 3) == '0'\nassert solution('ACACTACG', 3, 1) == '3'\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ACACTACG') == 2\nassert solution('ACTACG') == 0\nassert solution('CATGCATG') == 3\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"GACTACG\") == \"1\"\nassert solution(\"ACTACG\") == \"0\"\nassert solution(\"GGGACTACG\") == \"3\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ACACTACG') == '2'\nassert solution('ATCODER') == '5'\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ACACTACG') == '2'\nassert solution('TTTAAACCAATCAGCTAATC') == '3'\nassert solution('TTTAAACCAATCAGCTAATC') == '3'\nassert solution('TTTAAACCAATCAGCTAATC') == '3'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('AC') == 'AC'\nassert solution('AG') == 'AC'\nassert solution('AT') == 'AT'\nassert solution('CG') == 'CC'\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str_a) == \"2\\n0\\n3\"\nassert solution(str_b) == \"1\\n1\\n0\"\nassert solution(str_c) == \"2\\n0\\n3\"\nassert solution(str_d) == \"2\\n1\\n1\"\nassert solution(str_e) == \"1\\n1\\n0\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == \"ACTAC\"\nassert solution(\"ACACTACG\", 2, 3) == \"CA\"\nassert solution(\"ACACTACG\", 1, 8) == \"ACACTACG\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ACACTACG', 3, 7) == '2'\nassert solution('ACACTACG', 3, 0) == '0'\nassert solution('ACACTACG', 8, 3) == '3'\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == '210'\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\n'''\n\nN, K = [int(n) for n in stdin.readline().split()]\n\nnums = [int(n) for n in stdin.readline().split()]\n\narr = []\nfor i in range(1, N+1):\n    for j in range(K):\n        if i == j:\n            continue\n        else:\n            arr.append(i * nums[j])\n\nprint(min(arr))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n10 20 30 40\\n\") == \"60\"\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"6\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"9\"\n\"\"\"\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == 210\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().strip().split())\nprices = list(map(int, sys.stdin.readline().strip().split()))\n\ntotal = 0\nfor _ in range(K):\n    total += min(prices)\n    prices.remove(min(prices))\n\nprint(total)\n\n\"\"\"\npython3 shop.py < shop.txt\n5 3\n50 100 80 120 80\n210\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"1 3 4\"\n) ==\n\"4\"\nassert solution(\n\"3 1 3\"\n) ==\n\"7\"\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == 4\nassert solution('2 3 4') == 7\nassert solution('3 3 4') == 7\nassert solution('5 5 4') == 10\nassert solution('1 3 6') == 9\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('2 5 2') == '3'\nassert solution('4 1 1') == '4'\n\n-------------"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == '4'\n\n-----------\nYou are given a graph with n vertices and m edges.\nEach vertex is described by an integer between 1 and n.\nThere is an edge between the vertices with IDs a and b if and only if a and b share a common factor greater than 1.\nFor example, there is an edge between vertices 1 and 2, because 2 and 4 share the factor 2.\n\nWrite a function that computes for each vertex v the number of edges that are incident to v.\n\n-----Constraints-----\n - n \\geq 1\n - 1 \\leq m \\leq n(n-1)/2\n - Each vertex is described by an integer between 1 and n.\n\n-----Input-----\nThe first line of the input contains one integer t (1 \\leq t \\leq 100) \u2014 the number of test cases.\n\nEach of the next t lines contains two integers n and m (1 \\leq n,m \\leq n(n+1)/2) \u2014 the number of vertices and the number of edges, respectively.\n\n-----Output-----\nPrint the number of edges incident to each vertex.\n\n-----Sample Input-----\n5\n4 2\n1 1\n2 1\n1 3\n2 3\n\n-----Sample Output-----\n1\n0\n3\n2\n3\n\n-----------\nYou are given an unweighted, directed graph consisting of m vertices and n edges.\n\nWrite a function that can find all of its vertices k in O(m + n lg(n)) time.\n\nFor example, consider the following graph:\n\n0---1\n| \\  |\n|  \\ |\n4-3-2\nThe vertices in a graph are its edges.\n\nYour function should return the list [0, 1, 2, 3, 4].\n\n-----------\nYou are given a directed graph with n vertices and m edges.\n\nWrite a function that returns a list of all its vertices.\n\nYou can assume that the graph may have vertices with a number of edges greater than 1.\n\n-----------\nYou are given a directed graph with n vertices and m edges.\n\nWrite a function that returns a list of all its vertices in the ascending order of their degrees.\n\nIf there are several vertices with the same degree, they must appear in the returned list in the order of their occurrence in the initial array.\n\nYou can assume that the graph may have vertices with a number of edges greater than 1.\n\n-----------\nYou are given a directed graph with n vertices and m edges.\n\nWrite a function that computes the minimum spanning tree of this graph.\n\nIt should return an integer that represents the sum of all edges that do not belong to the minimum spanning tree.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum distance between each vertex of this graph and returns the minimum distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the diameter of this graph.\n\nIt should return the maximum distance between any two vertices in the graph.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the average distance between each vertex of this graph and returns the average distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the number of connected components and returns the number of connected components.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\nIt should return a list of edges to add.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the maximum of the lengths of all simple paths between each pair of vertices.\n\nA simple path is a path that does not pass through any vertex more than once.\n\nIf there are no simple paths, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between two of its vertices.\n\nIf there is no path between two given vertices, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between any two vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum distance between each vertex of this graph and returns the minimum distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the diameter of this graph.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the average distance between each vertex of this graph and returns the average distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the number of connected components and returns the number of connected components.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the maximum of the lengths of all simple paths between each pair of vertices.\n\nA simple path is a path that does not pass through any vertex more than once.\n\nIf there are no simple paths, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between two of its vertices.\n\nIf there is no path between two given vertices, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between any two vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum distance between each vertex of this graph and returns the minimum distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the diameter of this graph.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the average distance between each vertex of this graph and returns the average distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 1 4\") == \"7\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\n\n-----\n\nfrom sys import stdin"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\". 1 3 4\") == '4'\nassert solution(\"1 3 4\") == '4'\nassert solution(\"1 3 2\") == '6'\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\n\"\"\"\n- P, Q, R: 1 \\leq P,Q,R \\leq 100\n- all values in input are integers\n- read a single line of input containing three integers P, Q, and R\n\n- compute the sum of the flight times\n- compute the minimum possible sum of the flight times\n- print the minimum possible sum of the flight times\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\nassert solution(\"4 3 2\") == \"7\"\n\nassert solution(\"10 9 7\") == \"19\"\n\nassert solution(\"100 99 98\") == \"198\"\n\nassert solution(\"3 6 9\") == \"12\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 5) == 0"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == 0\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n') == '0\\n'\nassert solution('3 5\\n')!= '10\\n'"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"2 3\") == \"10\"\nassert solution(\"9 9\") == \"0\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == \"0\\n\"\n\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '0'\nprint('Test passes.')"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\n\n\"\"\"\nfrom a1_1 import solution\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n\n\"\"\"\nGiven a number n, Aoki can do the operation below.\n\nOperation: Replace n with the sum of n and K.\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.\n\n-----Constraints-----\n - 0 \u2264 N \u2264 10^{18}\n - 1 \u2264 K \u2264 10^{18}\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn k\n\n-----Output-----\nPrint the minimum possible value taken by N after Aoki does the operation zero or more times.\n\n-----Sample Input-----\n7 4\n\n-----Sample Output-----\n1\n\nInitially, N=7.\nAfter one operation, N becomes |7+4| = 11.\nAfter two operations, N becomes |11+4| = 13, which is the minimum value taken by N.\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == '1'\nassert solution(\"10 6\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\nimport ast"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 9') == \"win\"\n\"\"\"\n\nimport sys\nimport itertools\n\ninput_ = sys.stdin.readlines()\ninput_ = [int(i.split()[0]) for i in input_]\ninput_ = list(itertools.combinations(input_, 3))\n\nfor i in input_:\n    if sum(i) >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 9') == 'win'\n\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 9\\n') == 'win'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"3 5 7\") == \"bust\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('3 4 5') == 'bust'\nassert solution('10 13 17') == 'bust'\nassert solution('15 17 20') == 'win'\nassert solution('15 17 16') == 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nprint(solution(\"5 7 9\"))\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input())\n\nGiven are three integers A_1, A_2, and A_3. If A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win."
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\nassert solution('6 6 8') == 'bust'\nassert solution('7 6 9') == 'win'\nassert solution('8 7 8') == 'bust'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3''') == '6'\nassert solution('''2''') == '2'\nassert solution('''1''') == '1'\nassert solution('''9''') == '9'\nassert solution('''7''') == '14'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"6\"\nassert solution(\"6\")!= \"2\"\nassert solution(\"9\")!= \"5\"\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '2'\nassert solution('1') == '2'\nassert solution('0') == '2'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '6'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6') == '6'\nassert solution('5\\n10') == '10'\nassert solution('6\\n10') == '10'\nassert solution('9\\n10') == '9'\nassert solution('12\\n10') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\nassert solution('6') == '6'\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == 6\nassert solution('7') == 10\nassert solution('8') == 12\n\nimport sys\nassert solution(sys.stdin.read()) == None\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 6\nassert solution(7) == 14\nassert solution(100) == 200\n\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        assert solution('3') == 6\n        assert solution('7') == 14\n        "
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\n---\nYou are given a positive integer N.\nFind the minimum positive integer divisible by both 2 and N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the minimum positive integer divisible by both 2 and N.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n6\n\n6 is divisible by both 2 and 3.\nAlso, there is no positive integer less than 6 that is divisible by both 2 and 3.\nThus, the answer is 6.\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n\") == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n') == '1'\nassert solution('4 2\\n') == '2'\nassert solution('6 3\\n') == '2'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2') == 2\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def minimum_inspectors(self, n: int, d: int) -> int:\n        if d > n:\n            return -1\n\n        return n - d + 1\n\nsol = Solution()\n\nassert sol.minimum_inspectors(6, 2) == 2\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n\") == \"2\"\nprint(solution(\"6 2\\n\"))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n') == 2\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(1)"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n') == '2'\nassert solution('7 5\\n') == '2'\nassert solution('9 20\\n') == '4'\nassert solution('2 1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4 3\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n5 2\n\"\"\") == \"3\"\n\n\"\"\"\n\nNo solution is expected for the following input:\n4 2\n\"\"\"\n\n\"\"\"\nNo solution is expected for the following input:\n5 4\n\"\"\"\n\n\"\"\"\nNo solution is expected for the following input:\n6 5\n\"\"\"\n\nassert solution(\n\"\"\"\n3 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == 'pon'\nassert solution('8') == 'bon'\nassert solution('6') == 'hon'\nassert solution('4') == 'pon'\nassert solution('3') == 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"15\") == \"hon\"\nassert solution(\"12\") == \"pon\"\nassert solution(\"0\") == \"bon\"\nassert solution(\"1\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"16\"\n) == \"pon\"\n\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == 'pon'\nassert solution('16') == 'pon'\nassert solution('22') == 'hon'\nassert solution('23') == 'bon'\nassert solution('25') == 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == 'pon'\nassert solution('11') == 'bon'\nassert solution('15') == 'bon'\nassert solution('19') == 'hon'\nassert solution('200') == 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\n\n---\nIf the digit in the one's place of N is 3, the pronunciation of \"\u672c\" in \"N \u672c\" is bon, not pon.\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == 'pon'\nassert solution('12') == 'pon'\nassert solution('13') == 'bon'\nassert solution('1') == 'hon'\nassert solution('100') == 'hon'\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == '11'\nassert solution('5 3 1 1 1\\n') == '21'\nassert solution('3\\n1 2 3') == '6'\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '11'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == 11\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 11\n\"\"\"\n\n\"\"\"\nImplementation in Python\n\nimport sys\n\nN, *d = map(int, sys.stdin.readlines())"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4\\n3\") == '4\\n3\\n4'\nassert solution(\"3\\n1\\n4\\n3\") == '4\\n3\\n4'\n\"\"\"\n\nimport sys\n\n_, *data = sys.stdin.readlines()\n\nmax_index = 0\nfor index in range(1, len(data)):\n    if data[index] > data[max_index]:\n        max_index = index\n\nfor index in range(0, len(data)):\n    if index!= max_index:\n        print(data[index])\n\n\"\"\"\nimport sys\n\n_, *data = sys.stdin.readlines()\n\nmax_value = max(data[1:])\n\nfor index in range(0, len(data)):\n    if data[index]!= max_value:\n        print(max_value)\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n3\\n2') == '4\\n3\\n4'\nassert solution('3\\n1\\n4\\n3') == '3\\n3\\n4'\n\"\"\"\n\nimport unittest\nfrom typing import List"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n4\\n3\\n5\\n3\") == \"4\\n3\\n4\\n3\"\nassert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"5\\n1\\n4\\n3\\n5\\n3\") == \"4\\n3\\n4\\n3\"\nassert solution(\"4\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\\n1\\n1\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1\\n4\\n3\\n5\\n9\\n7') == '4\\n3\\n9\\n9\\n9\\n9'\n\"\"\"\n\n\"\"\"\nSolution 2\n\nThis is a more optimized solution.\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('6\\n1\\n4\\n3\\n3\\n4\\n3') == '4\\n4\\n4'\nassert solution('1\\n2\\n3') == '3\\n2\\n3'\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n4\\n3\") == '4\\n3\\n4'\nassert solution(\"2\\n4\\n3\") == '4\\n3'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n4') == '4'\nassert solution('1\\n4\\n3') == '4'\nassert solution('1\\n4\\n3\\n2') == '4'\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"5 2\") == \"6\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"100 100\") == \"100\"\nassert solution(\"9 99\") == \"100\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n') == '9'\n'''\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\nprint(\"OK\")"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 4') == '9'\nassert solution('1 1') == '2'\nassert solution('5 4') == '9'\nassert solution('1 5') == '3'\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == '9'\nassert solution(\"3 3\") == '6'\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == expected_result"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n''') == '9'\n\n'''\n\nGiven a, b - the sizes of two buttons. If you press a button twice, you get 2 a's and b - 1 b's. The task is to find the maximum number of coins you can get if you press both buttons once.\n\nSample Input:\n4 4\nSample Output:\n4\nExplanation:\nYou press the first button twice and the second button once, thus you get 4 coins.\n\nSample Input:\n1 4\nSample Output:\n3\nExplanation:\nYou press the first button twice and the second button once, thus you get 3 coins.\n\nSample Input:\n2 5\nSample Output:\n8\nExplanation:\nYou press the first button twice, the second button once, then press the first button thrice and the second button twice, thus you get 8 coins.\n\nSample Input:\n1 1\nSample Output:\n1\nExplanation:\nYou press the first button once, thus you get 1 coin.\n\nSample Input:\n8 7\nSample Output:\n15\nExplanation:\nYou press the first button once, then press the first button twice, then press the first button thrice, then press the first button four times, then press the first button five times, then press the first button six times, then press the first button seven times, thus you get 15 coins.\n\n'''"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == 9\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''5 3\n-30 -10 10 20 50\n''') == '40'"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2 3') == '5'\n\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n-30 -10 10 20 50''') == \"40\"\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\ncandles = [int(x) for x in stdin.split()]\ntime = 0\nfor i, candle in enumerate(candles):\n    while True:\n        time += 1\n        if i >= k:\n            if i == k:\n                break\n            else:\n                i = i - 1\n                break\n        if candle == 0:\n            break\n        candle -= 1\nprint(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 -30 -10 10 20 50\") == '40'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 2 4\") == \"7\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 1\\n'\n    '5 10 5\\n'\n    ) == '8'\nassert solution(\n    '5 3\\n'\n    '20 10\\n'\n    ) == '40'\nassert solution(\n    '4 3\\n'\n    '4 10 20\\n'\n    ) == '7'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 13\") == '2'\n\n---\n\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 15') == '1'\nassert solution('15 15') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\nimport sys\n\na, b = [int(i) for i in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 15\\n8 13') == '2'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '8 13'\n) == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '1'\nassert solution('1 5\\n') == '2'\nassert solution('2 1\\n') == '0'\nassert solution('1 1\\n') == '1'\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"100 100\") == \"1\"\nassert solution(\"1 100\") == \"2\"\nassert solution(\"100 0\") == \"2\"\n\"\"\"\n\nfrom typing import List, Optional\nimport unittest\n\n\nclass Solution:\n    def find_num_of_attacks(\n            self, monster_health: int, monster_attack: int,\n            serval_health: int, serval_attack: int) -> int:\n        if monster_health <= 0:\n            return 0\n        if monster_health - serval_attack <= 0:\n            return 1\n        if monster_health - (2 * serval_attack) <= 0:\n            return 2\n        return 3\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution.find_num_of_attacks(monster_health=10, monster_attack=4,\n                                                           serval_health=5, serval_attack=2), 3)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 4') == '3'\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4') == 3\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\nprint(solution(stdin), end='')\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\n\nH, A = input().split()\nH = int(H)\nA = int(A)\nprint((H - A) // A)\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(solution(input()))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 75 25 100''') == '50'\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(solution(\"0 75 25 100\"))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"0 75 25 100\"\n    ) == \"50\"\nprint(solution(input()))\n\n##############\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 50''') == '25'\nassert solution('''0 75 25 25''') == '0'\n\n'''\na = int(stdin.readline().split()[0])\nb = int(stdin.readline().split()[0])\nc = int(stdin.readline().split()[0])\nd = int(stdin.readline().split()[0])\n\nprint((a if a > b else b) + (c if c > d else d))\n'''\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"105\\n\") == \"1\\n\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('105') == '1'\nassert solution('4') == '0'\nassert solution('0') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105') == '1'\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('105') == '1'"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == '1'\nassert solution('8') == '1'\nassert solution('1000') == '0'\nassert solution('10005') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"105\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/59eef93d2b2c5d4d50000b7e/python\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nimport math\n\nfrom utils import checkValue\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('105') == 1\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"\n\nimport math\n\nn, k = map(int, stdin.split())\n\na = [0] * (n + 1)\nb = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    a[i] = i\n    b[i] = i\n\nfor i in range(1, k + 1):\n    a[i * i] = i\n    b[i * i] = i * i\n\nc = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    c[i] = b[i] - a[i]\n\nprint(max(c) - min(c))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"7 3\"\n) == \"1\"\n\"\"\"\n\nN, K = map(int, input().split())\nprint(N - max(N % K, K - N % K))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n2\\n1 3\\n1 2\\n2 1\\n2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"7 3\"\n) == \"1\"\nassert solution(\n    \"8 5\"\n) == \"0\"\nassert solution(\n    \"8 2\"\n) == \"2\"\n\"\"\"\nimport math\nimport sys\n\nsys.setrecursionlimit(10000000)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2 2\\n3 3\\n4 1') == '1'\n\"\"\"\n\n\nfrom math import gcd"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111') == '111'\n\"\"\"\n\nN = input()\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"10\") == \"10\"\nassert solution(\"100\") == \"100\"\nassert solution(\"1000\") == \"100\"\nassert solution(\"100100\") == \"100\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('111') == '1'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\nimport sys\n\nn = sys.stdin.readline()\nprint(n)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == '111'\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('\\n\\n\\n') == ''\nassert solution('1') == '1'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nfrom typing import List, Dict\n\n\nclass Task:\n    def __init__(self, priority: int, time_needed: int):\n        self.priority = priority\n        self.time_needed = time_needed\n        self.time_left = time_needed\n\n    def __repr__(self):\n        return f\"Task(priority={self.priority}, time_needed={self.time_needed}, time_left={self.time_left})\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"1 2 2\") == \"0\"\n\"\"\"\n\n\"\"\"\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\nprint(sum(a) - min(a) * len(a))\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 6 3''') == '5'\nprint('Test passed')\n\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nclass Solution:\n    \"\"\"Time Complexity: O(N)\n       Space Complexity: O(N)\n    \"\"\"\n    def solve(self, A: str) -> str:\n        n = list(map(int, A.split()))\n        dp = [float('inf')] * (len(n)+1)\n        dp[0] = 0\n        dp[1] = abs(n[0] - n[1])\n        dp[2] = abs(n[1] - n[2])\n        dp[3] = abs(n[0] - n[2]) + abs(n[1] - n[2])\n        for i in range(3, len(n)+1):\n            dp[i] = min(dp[i - 1] + abs(n[i-1] - n[i]), dp[i - 2] + abs(n[i-2] - n[i]))\n            dp[i] = min(dp[i - 1] + abs(n[i-1] - n[i]), dp[i - 3] + abs(n[i-3] - n[i]) + abs(n[i-2] - n[i]))\n\n        return dp[len(n)]"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 6 3\"\n) == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\n\"\"\"\nAssumptions:\n\nInitial Cost:\nA_0 = 0\n\nCost of completing one task\nA_1... A_n\nA_0 + |A_1 - A_0| + A_2... A_n\n\nAmount of money to buy the task that is done last\n(A_1 + A_2 +... + A_n)\n\nCost of doing all tasks\nA_0 + |A_1 - A_0| + A_2... A_n + (A_1 + A_2 +... + A_n)\n\nMinimum Cost to do all tasks\nA_0 + A_1 + A_2 +... + A_n\n\nTotal Cost\nA_0 + A_1 + A_2 +... + A_n + A_0 + |A_1 - A_0| + A_2... A_n + (A_1 + A_2 +... + A_n)\n\nMinimum Cost to do all tasks\nA_0 + A_1 + A_2 +... + A_n\n\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\nimport sys\n\nnumbers = list(map(int, sys.stdin.readline().split()))\nprint(min([abs(numbers[i] - numbers[i - 1]) for i in range(1, 4)]))"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '5'\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\nfrom math import floor\n\nstdin = input().split(\"\\n\")\ns = int(stdin[0])"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"7\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\ns = int(input())\na = [s]\ni = 1\nwhile s > 1:\n    s = s//2 if s % 2 == 0 else s*3+1\n    a.append(s)\n    i += 1\n\nprint(i-1)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(8) == 5\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\nassert solution(\"10 20 10 10\") == 'No'\nassert solution(\"10 20 10 10\") == 'No'\nassert solution(\"10 20 10 10\") == 'No'\nassert solution(\"10 20 10 10\") == 'No'\n\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('11 10 10 10') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 10 10 9\") == \"Yes\"\nassert solution(\"20 100 10 10\") == \"Yes\"\n\n----\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\nA, B, C, D = list(map(int, stdin.split()))"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"100 100 100 100\") == \"No\"\nassert solution(\"10 10 10 10\") == \"Yes\"\n\n'''\n\nfrom collections import deque\n\nA, B, C, D = [int(i) for i in stdin.strip().split()]\n\ndq = deque([A, B, C, D])\n\nwhile dq[0] > 0 and dq[3] > 0:\n    dq[0] -= max(1, dq[1])\n    dq[1] -= max(1, dq[3])"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 9 10 10') == 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a, b, c, d) == \"No\"\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\nassert solution(\"20 2 5 10\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('1 2 3 4') == 'Yes'\nassert solution('1 2 10 10') == 'No'\nassert solution('10 9 10 10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10 20\\n10 10\\n10 10\\n10 10\") == \"20\"\n\"\"\"\n\n\"\"\"\nIDEA:\nWe are trying to maximize the difference between X and Y, where X is the sum of all values of the gems that we are\ntaking, and Y is the sum of the costs of taking these gems.\n\nWe can start with one of the gems, and keep going. We have to keep the maximum possible value that we can have.\n\nWe have two cases:\n    1. Take the current gem.\n    2. Do not take the current gem.\n\nWe can either pick the current gem or not pick it, and choose the maximum of the two.\n\nRepeat the process for all N gems.\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nn = int(input())\nv = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\n\ntotal_v = sum(v)\ntotal_c = sum(c)\n\ndp = [[0 for _ in range(total_v + 1)] for _ in range(n + 1)]\n\nfor i in range(n + 1):\n    dp[i][0] = 0\n\nfor j in range(total_v + 1):\n    dp[0][j] = 0\n\nfor i in range(1, n + 1):\n    for j in range(1, total_v + 1):\n        if j >= c[i - 1]:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - c[i - 1]] + v[i - 1])\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(total_v - dp[-1][-1])\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 5 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 5\\n6 3 4\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 4 5\\n5 5 5 5\") == \"9\"\nassert solution(\"4\\n1 3 4 5\\n5 5 5 1\") == \"8\"\nassert solution(\"4\\n1 3 4 5\\n5 5 5 5\") == \"9\"\nassert solution(\"4\\n1 3 4 5\\n5 5 5 6\") == \"8\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"\n3 3\n.##\n.##\n.##\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"3 4\\n#.#\\n....\\n#.#\\n#.#\") == \"###\\n#.#\\n.##\"\n\n------Problem-----\nhttps://codeforces.com/contest/1399/problem/B\n\n-----Notes-----\nhttps://www.youtube.com/watch?v=nXQ7xGzUWJw\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nfrom copy import deepcopy\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '''3 3\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nprint(\"test passed\")\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == '6.28318530717958623200'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6.8') == '6.28'\nassert solution('1') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\nassert solution(\"2\") == '12.566370614359172953850'"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n\") == \"6.28318530717958623200\"\nassert solution(\"100\\n\") == \"25.132741215345907905\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"6.28318530717958623200\"\n\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '6.28318530717958623200'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"28.274333882308138\"\nassert solution(\"10\") == \"62.831853071795862\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"HJAS\") == \"No\"\nassert solution(\"HHJA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ASAS') == 'Yes'\nassert solution('ASSA') == 'Yes'\nassert solution('SSAA') == 'No'\n\n'''\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ASSA\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AAAA') == 'Yes'\nassert solution('ASSA') == 'Yes'\nassert solution('SSSS') == 'No'\nassert solution('AAABBB') == 'No'\nassert solution('BBAABB') == 'No'\n\nprint('PASSED')\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('ASS') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ASA') == 'Yes'\nassert solution('AS') == 'No'\nassert solution('ABCD') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AAAA') == 'No'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ABABA\") == \"Yes\"\nassert solution(\"AAABBB\") == \"No\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ASS\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 12\") == \"6\"\n\nassert solution(\"0 2\") == \"2\"\n\nassert solution(\"-5 -2\") == \"-7\"\n\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-3 -3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n') == '3'\nassert solution('5 10\\n') == '12'\nassert solution('1 2\\n') == '2'\nassert solution('-1 -1\\n') == '-2'\n\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-13 3') == '-10'\nassert solution('0 0') == '0'\nassert solution('-1 -3') == '-4'\nassert solution('-2 -5') == '-7'\nassert solution('0 -2') == '-2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n----INPUT EXAMPLE----\n3 5\n\n----OUTPUT EXAMPLE----\n5\n\n----INPUT EXAMPLE----\n-3 -5\n\n----OUTPUT EXAMPLE----\n-10\n\n----INPUT EXAMPLE----\n-1 -1\n\n----OUTPUT EXAMPLE----\n0\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\n-------------------------\nimport sys\n\nA = int(sys.stdin.readline())\nB = int(sys.stdin.readline())\n\nprint(max(A + B, A - B, A * B))\n\n-------------------------"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-13 3') == '-10'\nprint('Passed')\n\n-----------------------------------------------------\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n6 5 6 8''') == '3'\nassert solution('''3\n8 9 10''') == '0'\nassert solution('''3\n8 10 10''') == '1'\nassert solution('''4\n5 5 5 5''') == '1'\nassert solution('''5\n5 5 5 5 5''') == '1'\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nprint(solution(stdin))\n\n\"\"\"\nfrom typing import List\n\n\"\"\"\nAn integer x is a divisor of an integer y if the remainder of y % x is 0.\n\nGiven an integer, for each digit that makes up the integer determine whether it is 0 or 1.\nReturn the digits from left to right to form all possible binary numbers that could have led to the given integer.\n\nExample\n\nFor x = 5, the output should be\ndivisorDigits(x) = [\"1\", \"0\", \"1\"].\n\n5 is \"101\" in binary and it can be formed by the digits 1, 0 and 1.\n\nFor x = 8, the output should be\ndivisorDigits(x) = [\"1\", \"1\", \"0\"].\n\n8 is \"1000\" in binary and it can be formed by the digits 1, 1 and 0.\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5 6 8\\n') == 3\nassert solution('5 5 8 10\\n') == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 2 1 2 1\") == \"3\"\nassert solution(\"5\\n1 2 1 2 1\") == \"3\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\n\"\"\"\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\nstairs = {}\nc = 1\n\nfor i in nums:\n    if i not in stairs:\n        stairs[i] = c\n    c += 1\n\nprint(len(stairs))\nfor key, val in stairs.items():\n    print(key, val)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 2 1 2 1\") == \"3\"\nassert solution(\"5\\n1 2 1 2 1\") == \"3\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\\n\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\\n\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\\n\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('7\\n1 2 3 1 2 3 4') == '2'\nassert solution('6\\n1 1 1 1 1 1') == '6'\nassert solution('8\\n1 2 1 2 1 1 2') == '2'\nassert solution('5\\n1 2 3 4 5') == '1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1 1') == '3\\n1 1 1'\nassert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('5\\n1 2 1 2 1') == '3\\n2 2 1'\nassert solution('5\\n1 1 1 1') == '4\\n1 1 1 1'"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"4\"\nassert solution(\"28\") == \"3\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1\\n2\\n1'\nassert solution('6') == '2\\n1\\n1\\n1'\nassert solution('7') == '1\\n2\\n1\\n1\\n2\\n1'\nassert solution('21') == '4\\n3\\n2\\n1\\n1\\n1'\nassert solution('28') == '4\\n3\\n2\\n1\\n1\\n1\\n1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\") == \"1\\n2\"\nassert solution(\"2\\n6\") == \"1\\n2\"\nassert solution(\"3\\n7\") == \"1\\n2\"\nassert solution(\"3\\n21\") == \"1\\n4\"\nassert solution(\"3\\n28\") == \"3\\n4\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\") == '1\\n2\\n1\\n7\\n4\\n333333333\\n333333328'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"4\\n7\") == \"2\"\nassert solution(\"5\\n9\") == \"1\"\n\n----- Solution -----\n\nn = int(stdin.readline())\nfor i in range(1, n+1):\n    k = 1\n    x = 1\n    while x < (n - (k-1)*(k-1)):\n        x *= k\n        k += 1\n    print(k-1, x, n - x)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '4'\nassert solution('28') == '3'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '4'\nassert solution('28') == '3'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\\n2\\n1\"\nassert solution(\"6\") == \"1\\n2\\n1\"\nassert solution(\"7\") == \"1\\n2\\n1\"\nassert solution(\"21\") == \"1\\n2\\n1\"\nassert solution(\"28\") == \"1\\n2\\n1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\nassert solution(\"999\\n99999999\") == \"33333333\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"2\"\nassert solution(\"7\\n28\") == \"1\"\nassert solution(\"9\\n999999999\") == \"999999999\"\nassert solution(\"9\\n999999984\") == \"333333333\"\n\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\n\nimport datetime\nimport unittest\nimport sys\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('512 4') == '50'\n\nprint(solution('1000000000 9'))\n\nassert solution('1000000000 9') == '1'"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n\nn, k = map(int, input().split())\nprint(n - k * (n // 10))\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('512 4') == '50'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\"\"\"\n\n\n\nimport re"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n\n\nfrom typing import Union"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n---\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\nassert solution('456 6') == '45'\nassert solution('5123 43') == '5122'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\n\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1\\n') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5\\n') == '2\\n5 5'\nassert solution('3\\n5 1 4\\n') == '2\\n4 5'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1\\n') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5\\n') == '2\\n5 5'\nassert solution('3\\n5 1 4\\n') == '2\\n4 5'"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == '5\\n2 1 1 2 3'\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\narr = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 8\\n7 4\\n3 1\\n5 4\\n') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"1\"\nassert solution(\"4 10\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 7\\n7 4\\n3 1\\n5 4\\n') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '-1'\n\n'''\nfrom typing import List\n\nimport bisect"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\\n\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 3') == 'tleelte'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'\n\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 3') == 'tleelte'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"tleelte\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"qwerty\"\nassert solution(\"7 5 3\\n6 6 1\") == \"vvvvvv\"\nassert solution(\"7 5 3\\n6 1 1\") == \"abcde\"\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\n-----Hint-----\n\nThe required number of distinct letters in each substring is a function of $a$ and $b$.\n\"\"\"\nimport sys\nimport math\nfrom typing import List, Set, Dict\n\nsys.setrecursionlimit(1500)\n\n\nclass Solution:\n    def solution(self, n: int, a: int, b: int) -> str:\n        if n < a:\n            return \"\"\n        else:\n            return \"\".join([chr(i) for i in range(97, 97 + b) for _ in range(math.ceil(n / a))])[:n]\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\"\"\"\n\n\nimport collections\n\n\nclass Solution:\n    def distinct_letters_in_substring(self, s, a, b):\n        \"\"\"\n        :param s: given string, string type\n        :param a: given string, int type\n        :param b: given string, int type\n        :return: the answer, string type\n        \"\"\"\n        count_letters = collections.Counter(s)\n        ans = \"\"\n        for i in range(len(s)):\n            if i + a <= len(s):\n                counter = 0\n                for j in s[i:i + a]:\n                    if j in count_letters and count_letters[j] >= b:\n                        counter += 1\n                if counter == b:\n                    ans += s[i:i + a]\n        return ans\n\n    def distinct_letters_in_substring_2(self, s, a, b):\n        \"\"\"\n        :param s: given string, string type\n        :param a: given string, int type\n        :param b: given string, int type\n        :return: the answer, string type\n        \"\"\"\n        ans = \"\"\n        n = len(s)\n        l, r = 0, a\n        while r <= n:\n            substring = s[l:r]\n            if len(substring) == a and len(set(substring)) >= b:\n                ans += substring\n            r += 1\n            l += 1\n        return ans\n\n\nsolution = Solution()\nprint(solution.distinct_letters_in_substring_2(\"vvvvvv\", 2, 1))\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\") == \"tleel\" or solution(\"5 2 3\") == \"qwerty\" or solution(\"5 2 3\") == \"vvvvvv\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 5\") == \"6\"\nassert solution(\"3 20 5\") == \"8\"\nassert solution(\"10 10 10\") == \"10\"\nassert solution(\"1 5 5\") == \"6\"\nassert solution(\"20 10 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 12 6\\n') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 12 6\\n') == '12'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"40 1000 2\") == \"1000\"\nassert solution(\"0 3 4\") == \"0\"\nassert solution(\"100 9 9\") == \"0\"\n\n'''\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\") == \"10\"\nassert solution(\"10 20 30\") == \"10\"\nassert solution(\"10 20 30 40\") == \"10\"\n\n-------Solution-------\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\\n3 3 3\") == \"3\\n\"\nassert solution(\"2 1 1\\n2 2 2\") == \"2\\n\"\nassert solution(\"2 1 1\\n2 3 2\") == \"2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\nassert solution(\"20 10 6\") == \"10\"\n\nassert solution(\"30 20 15\") == \"13\"\n\nassert solution(\"30 20 20\") == \"15\"\n\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n\") == \"3\"\n'''\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == 2\n'''"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n1') == '3'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3\\n2\\n3\\n3\\n2\\n2\") == \"2\"\nassert solution(\"5\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"8\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n\") == \"2\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"100\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '4'\nassert solution('3\\n') == '3'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3\\n4\\n5\\n6\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n3 4') == '4\\n', 'A test'\nassert solution('3 4\\n5 7') == '6\\n', 'A test'\nassert solution('1 1\\n1 0') == '0\\n', 'A test'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == '3'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == '3'\n\ntry:\n    assert solution('1 1') == '1'\n    assert solution('1 4') == '2'\n    assert solution('3 5') == '4'\nexcept AssertionError:\n    print('Test 1 Failed')\nelse:\n    print('Test 1 Passed')\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3\\n') == '3'\nassert solution('3 4\\n') == '4'\nassert solution('6 8\\n') == '8'\nassert solution('4 4\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\n') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == '3'\nprint(\"Test pass.\")\n\nassert solution(\"2 5\") == '5'\nprint(\"Test pass.\")\n\nassert solution(\"5 5\") == '5'\nprint(\"Test pass.\")\n\nassert solution(\"5 0\") == '0'\nprint(\"Test pass.\")\n\nassert solution(\"0 5\") == '0'\nprint(\"Test pass.\")"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n') == '3'\n\n\"\"\"\n\nfrom typing import List\nfrom math import factorial"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == 3\nassert solution(\"3 2\") == 1\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 12\n''') == '16'\nprint(solution(stdin), end='')\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n\nimport re\nimport sys\n\nlines = []\n\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n\nA = int(lines[0])\nB = int(lines[1])\n\nprint(A + B if A % B == 0 else B - A)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12\\n') == '16'\nassert solution('10 20\\n') == '10'\nassert solution('1 1\\n') == '0'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('12') == 2\nassert solution('13') == 1\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b if a % b == 0 else b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n6 9\") == \"4\\n4\"\n\"\"\"\nfrom aoc import *\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12') == '16'\nassert solution('1 3') == '4'\nassert solution('2 10') == '8'\nassert solution('1 1') == '0'\nassert solution('1 20') == '20'\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\n\"\"\"\nGiven a set of positive integers, A, find the total number of divisors of the integers in A.\n\nInput Format\nThe first line contains a single integer, N, denoting the size of the array.\nThe second line contains N space-separated integers describing the respective values of array A.\n\nConstraints\n - 1 \\leq A[i] \\leq 2 * 10^9\n - 2 \\leq N \\leq 2 * 10^4\n\nOutput Format\nPrint a single integer denoting the total number of divisors of the integers in A.\n\nSample Input 0\n6\n1 1 2 3 5 8\n\nSample Output 0\n15\n\nExplanation 0\nThe divisors of 1, 1, 2, 3, 5, and 8 are 1, 1, 2, 3, 5, and 8.\nHence, the total number of divisors is \n1 + 1 + 2 + 3 + 5 + 8 + 1 + 1 + 2 + 3 + 5 + 8 = 15.\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('ab') == 'No'\nassert solution('a') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\n\"\"\"\n\nfrom __future__ import print_function\nfrom sys import stdin\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == t\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvwwxyz\") == \"No\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\nassert solution(\"5 15\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\n\nA, B = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\n(Tested)"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 16') == '9'\nassert solution('2 17') == 'IMPOSSIBLE'\nassert solution('2 18') == '3'\nassert solution('1 1') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys\n\nA, B = [int(x) for x in sys.stdin.readline().split()]\n\nA_B = abs(A - B)"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '2 16'\n) == '9\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 16\") == '9'\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 16\") == \"9\"\n'''\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"3\"\nassert solution(\"7 9\") == \"1\"\nassert solution(\"7 17\") == \"IMPOSSIBLE\"\n\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'No'\nassert solution('7') == 'Yes'\nassert solution('9') == 'Yes'\nassert solution('10') == 'No'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123') == 'No'\nassert solution('117') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('117') == \"Yes\"\nassert solution('420') == \"No\"\n\n\"\"\"\n\"\"\"\nGiven is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 100 \\leq N \\leq 999\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nIf N contains the digit 7, print Yes; otherwise, print No.\n\n-----Sample Input-----\n117\n\n-----Sample Output-----\nYes\n\n117 contains 7 as its last digit.\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('117') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"117\") == \"Yes\"\n\"\"\"\n\nn = input()\nprint(\"Yes\" if \"7\" in n else \"No\")\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('117') == 'Yes'\n\nassert solution('123') == 'No'\n\nassert solution('111') == 'No'\n\nassert solution('7') == 'Yes'\n\nassert solution('77') == 'Yes'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('117') == 'Yes'\nassert solution('123') == 'No'\n\"\"\"\n\n\"\"\"\nMishka is fond of reading books. He has read a book once and wants to read it again. He can read the book only one more time. Help him in reading it once again.\n\nLet's assume that the volume of the book is a positive integer, then Mishka can read it. The only condition is that he can't read it more than once.\n\nInput Format\n\nFirst line of input contains T - number of test cases.\n\nEach of the next T lines contains the volume of the book Mishka has read.\n\nOutput Format\n\nFor each test case, print Mishka's last read volume of the book.\n\nSample Input 0\n\n5\n1\n6\n8\n5\n12\nSample Output 0\n\n5\n6\n8\n5\n12\nExplanation 0\n\nMishka read the book with volume 1. He can read it again only once. So, Mishka read the book with volume 5 in the second time. He can't read it again. So, Mishka read the book with volume 12 in the third time. Mishka can't read it again. So, Mishka read the book with volume 8 in the fourth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the fifth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the sixth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the seventh time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the eighth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the ninth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the tenth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the eleventh time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the twelfth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirteenth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the fourteenth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the fifteenth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the sixteenth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the seventeenth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the eighteenth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the nineteenth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the twentieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the twenty-first time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the twenty-second time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the twenty-third time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the twenty-fourth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the twenty-fifth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the twenty-sixth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the twenty-seventh time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the twenty-eighth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the twenty-ninth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 12 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 8 in the thirtieth time. So, Mishka can't read it again. So, Mishka read the book with volume 5 in the thirtieth time."
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\nassert solution('245') == 'No'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"117\") == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"99\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\nimport math"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nprint(\"Yes\" if n % int(solution(str(n))) == 0 else \"No\")\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12) == \"Yes\"\n\nassert solution(101) == \"Yes\"\n\nassert solution(102) == \"No\"\n\nprint('Success')\n\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(101) == \"Yes\"\nassert solution(12) == \"Yes\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def restoreCoordinates(self, s: str) -> str:\n        return \" \".join([str(int(i) - 1) for i in s.split()])\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n    def testRestoreCoordinates(self):\n        self.assertEqual(\n            self.solution.restoreCoordinates(\n                \"0 0 0 1\"\n            ),\n            \"1 1 -1 0\"\n        )"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0 1') == '1 1 -1 0'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('1 0 1 0') == '1 0 1 0'\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"1 2 3 4\") == \"2 3 1 4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 0 1') == '1 1 -1 0'\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n'''\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/contest/1535/problem/B\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nprint(\"Passed!\")\n\n-------\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\nassert solution('''red blue\n3 4\nblue''') == '1 1'\nassert solution('''red blue\n3 4\nblue\nred''') == '1 1'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0 4'\nassert solution('red blue') == '2 4'\nassert solution('blue red') == '0 0'\n'''"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n'''\n\nimport collections"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"red blue\", \"blue red\") == \"0 0\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcabccba') == 'No'\nassert solution('abcabc') == 'Yes'\nassert solution('aba') == 'Yes'\nassert solution('a') == 'No'\n\n----\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"abcabc\"\n) == \"Yes\"\nassert solution(\n    \"abccba\"\n) == \"No\"\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('abcabcabc') == 'Yes'\nassert solution('abcabcab') == 'No'\nassert solution('abcabcdef') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == \"Yes\"\n\n-------\n\n5\nabcabcd\n\n-------\n\n4\nabbcd\n\n-------\n\n2\nabb\n\n-------\n\n1\nb\n\n-------\n\n2\naa\n\n-------\n\n1\na\n\n-------\n\n4\ncc\n\n-------\n\n3\ncc\n\n-------\n\n3\nccc\n\n-------\n\n4\ncccc\n\n-------\n\n5\ncccccc\n\n-------\n\n2\nb"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == 'Yes'\nassert solution(\"abac\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abccba') == 'No'\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('ababab') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcac\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcdef') == 'No'\nassert solution('abcabcdefg') == 'Yes'\nassert solution('abccba') == 'No'\nassert solution('abbccc') == 'Yes'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 1 2') == '0'\nassert solution('3 3 1 2') == '0'\nassert solution('4 5 4 5') == '3.0'\nassert solution('4 5 6 4') == '1'\nassert solution('4 5 6 5') == '0'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2 3 1 2\\n'\n) == '3.000000 0'\nassert solution(\n    '7 9 2 2\\n'\n) == '2.200000 0'\nassert solution(\n    '7 9 2 3\\n'\n) == '2.666667 0'\nassert solution(\n    '7 9 2 6\\n'\n) == '2.666667 0'\nassert solution(\n    '7 9 3 4\\n'\n) == '1.66667 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\nprint(solution(\"2 3 1 2\"))\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\\n\") == \"3.0 0\"\nassert solution(\"4 8 2 1\\n\") == \"1.0 1\"\nassert solution(\"3 4 5 2\\n\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1 2\\n') == '3.0 0'\nassert solution('4 4 2 1\\n') == '0.25'\nassert solution('2 5 5 4\\n') == '0.5'\nassert solution('7 8 4 1\\n') == '0.5'\nassert solution('3 5 8 3\\n') == '0.5'\n\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"4 3 6 5\") == \"6.000000 0\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\") == \"3.000000 0\"\n\nassert solution(\"2 3 1 2\") == \"3.000000 0\"\n\nassert solution(\"2 3 3 2\") == \"2.000000 0\"\n\nassert solution(\"2 3 1 4\") == \"2.50000 0\"\n\nassert solution(\"2 3 3 2\") == \"2.50000 0\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\") == '3.000000 0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\nassert solution(\"G W Y P Y W P\") == \"Three\"\nassert solution(\"G W Y P Y W P G\") == \"Four\"\nassert solution(\"G W Y P Y W P G W G\") == \"Four\"\nassert solution(\"G W Y P Y W P G W G Y\") == \"Four\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nW W\\nW W\") == \"Three\"\nassert solution(\"3\\nW W\\nG G\\nG G\") == \"Four\"\nassert solution(\"3\\nW W\\nG G\\nP P\") == \"Three\"\n\nprint(solution(\"3\\nP P\\nP P\\nP P\"))\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"6 G W Y P Y W\"\n) == \"Four\"\n\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 G W P Y\\n\") == \"Four\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 G W Y P Y W') == 'Four'\nassert solution('4 W Y P Y W') == 'Four'\nassert solution('3 G Y P Y W') == 'Four'\nassert solution('1 P Y W') == 'Three'\nassert solution('5 G P W') == 'Four'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\nG W Y P Y W''') == 'Four'\nassert solution('''2\nW Y G P Y''') == 'Four'\nassert solution('''5\nG G G G W W''') == 'Three'\nassert solution('''2\nG W G Y''') == 'Four'\nassert solution('''3\nW G W Y''') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nW\\nW\\nG\") == \"Three\"\nassert solution(\"4\\nW\\nG\\nG\\nP\") == \"Four\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\nassert solution(\"6\\nY W Y P Y W\") == \"Three\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nG W Y P\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 P P') == 'Three'\nassert solution('4 W W W') == 'Four'\nassert solution('3 G G') == 'Three'\nassert solution('4 Y Y G') == 'Four'\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3') == '2'\nassert solution('6 3 2\\n2 3 1 3 4 2') == '6'\nassert solution('5 5 6\\n1 2 6 10 3') == '2'\nassert solution('6 5 6\\n1 2 6 10 3') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"8 5 6\\n1 2 6 10 3\") == \"2\"\nassert solution(\"8 5 6\\n1 2 6 10 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == \"2\"\nassert solution(\"5 5 6\\n1 2 6 10 3\") == \"2\"\nassert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"6 5 6\\n1 2 6 10 3\") == \"2\"\nassert solution(\"6 5 5\\n1 2 6 10 3\") == \"1\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3') == 2\n\n\"\"\"\n\nn, x, y = list(map(int, input().split()))\na = list(map(int, input().split()))"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 1') == '5'\nassert solution('10 4 1') == '10'\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2\\n2 3 1 3 4 2') == '6'\n\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 6') == 2\nassert solution('1 2 6 10 3') == 2\nassert solution('3 3 3') == 0\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 3 4 2\\n1 2\") == 2\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\nassert solution(\"5 5 6\\n1 2 6 10 3\") == 2\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('4\\n1 3 2 4\\n1 3 2 4') == '0'\nassert solution('4\\n1 3 2\\n1 3 2') == '0'\nassert solution('3\\n3 3 3\\n3 3 3') == '0'\nassert solution('4\\n1 3 2\\n1 3 2') == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n'''\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2 6 2\") == 7\nassert solution(\"4 5 4 1 3\") == 0\nassert solution(\"1 3 2 4\") == 0\n\"\"\"\n\nnum_topics = int(input())\nteacher_interestingness = [int(i) for i in input().split()]\nstudent_interestingness = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2 6 2\") == '7'\nassert solution(\"1 3 2 4\") == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\n\"\"\"\nfrom collections import Counter\n\nnum_topics = int(stdin.readline().strip())\nteacher_interestingness = [int(x) for x in stdin.readline().strip().split()]\nstudent_interestingness = [int(x) for x in stdin.readline().strip().split()]\n\nteacher_dict = Counter(teacher_interestingness)\nstudent_dict = Counter(student_interestingness)\n\ngood_topics = 0\n\nfor topic, teacher_interest in teacher_dict.items():\n    student_interest = student_dict[topic]\n    if teacher_interest + student_interest > topic:\n        good_topics += 1\n\nprint(good_topics)"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n\n\"\"\"\nFind the number of (non-empty) substrings of text that contain no more than k distinct characters.\n\nGiven a text t and a number k, return the number of (non-empty) substrings of t that contain no more than k distinct characters.\n\nExample\n\nFor t = \"cabaabac\" and k = 2, the output should be\n    stringsWithAtMostKDistinctCharacters(t, k) = 9.\n\nThere are 9 substrings that contain no more than 2 distinct characters: \"c\", \"cab\", \"aba\", \"abac\", \"b\", \"ba\", \"a\", \"abc\" and \"abca\".\n\nFor t = \"abcdefghijklmnopqrstuvwxyz\" and k = 3, the output should be\n    stringsWithAtMostKDistinctCharacters(t, k) = 262.\n\nThere are 262 substrings that contain no more than 3 distinct characters: \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" and \"abc\", \"abe\", \"acd\", \"ace\", \"bef\", \"beh\", \"cgk\", \"def\", \"deh\", \"efi\", \"fjk\", \"ghi\", \"hjk\", \"ijk\", \"jkl\", \"klm\", \"lno\", \"mqrs\", \"nst\", \"opv\", \"qtu\", \"rst\", \"stu\", \"tuv\", \"vwx\", \"wxy\", \"xyz\".\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == 7\nprint('OK')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2 6 2\") == '7'\nassert solution(\"4 5 4 1 3\") == '0'\nprint(\"Test complete.\")"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\nassert solution('10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nfrom typing import List, Dict, Set\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 10\"\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\"\"\"\nfrom typing import List, Tuple\n\nN, M = map(int, input().split())\nconnections = [[int(num) for num in input().split()] for _ in range(M)]\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 2\\n3 4\") == \"1\"\nassert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"2\"\nassert solution(\"1 5\\n3 4\\n3 1\") == \"0\"\nassert solution(\"1 4\\n1 3\\n2 4\") == \"0\"\nassert solution(\"1 2\\n2 3\\n3 4\") == \"0\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == 1\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == 2\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\n-----"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1\\n1 2') == '1'\nassert solution('1 2\\n1 1') == '1'"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == '2'\n\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"5\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '0'\nassert solution('3\\n1 1 2\\n2 3\\n1 3\\n') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\n\"\"\"\n\nimport sys\nimport queue"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\n-----Test 1-----\n\nSample test containing a total of 5 test cases\n\n=== Sample Case 1 ===\n\nInput\n2\naz\nbf\n\nOutput\nbc\n\nInput\n5\nafogk\nasdji\n\nOutput\nalvuw\n\nInput\n6\nnijfvj\ntvqhwp\n\nOutput\nqoztvz\n\n=== Sample Case 2 ===\n\nInput\n1\nfjfj\nfjfj\n\nOutput\nfjfj\n\n=== Sample Case 3 ===\n\nInput\n6\nafogk\nasdji\n\nOutput\nalvuw\n\nInput\n7\nfjfj\nfjfj\n\nOutput\nfjfj\n\n=== Sample Case 4 ===\n\nInput\n1\nfjfj\nfjfj\n\nOutput\nfjfj\n\n=== Sample Case 5 ===\n\nInput\n2\naz\nafogk\n\nOutput\nalvuw\n\n\"\"\"\n\"\"\"\nfrom typing import List\n\nimport math\nimport unittest\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        # return self.find_median_sorted_arrays_iterative(nums1, nums2)\n        return self.find_median_sorted_arrays_recursive(nums1, nums2)\n\n    def find_median_sorted_arrays_iterative(self, nums1: List[int], nums2: List[int]) -> float:\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n\n        nums1.append(math.inf)\n        nums2.append(math.inf)\n\n        left, right = 0, len(nums1) - 1\n        while left <= right:\n            m1 = (left + right) // 2\n            m2 = len(nums1) - m1 - 1\n\n            left_nums1 = nums1[m1]\n            right_nums1 = nums1[m1 + 1]\n            left_nums2 = nums2[m2]\n            right_nums2 = nums2[m2 + 1]\n\n            if left_nums1 <= right_nums2 and left_nums2 <= right_nums1:\n                return max(left_nums1, left_nums2)\n            elif left_nums1 > right_nums2:\n                right = m1 - 1\n            else:\n                left = m1 + 1\n\n        return -1\n\n    def find_median_sorted_arrays_recursive(self, nums1: List[int], nums2: List[int]) -> float:\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m = len(nums1)\n\n        def binary_search(arr: List[int], val: int) -> int:\n            left, right = 0, len(arr) - 1\n            while left <= right:\n                m = (left + right) // 2\n                if arr[m] == val:\n                    return m\n                elif arr[m] > val:\n                    right = m - 1\n                else:\n                    left = m + 1\n            return left\n        \n        n = len(nums2)\n        if m == 0:\n            if n % 2 == 0:\n                return (nums2[n // 2] + nums2[n // 2 - 1]) / 2\n            else:\n                return nums2[n // 2]\n        elif n == 0:\n            if m % 2 == 0:\n                return (nums1[m // 2] + nums1[m // 2 - 1]) / 2\n            else:\n                return nums1[m // 2]\n        elif m == 1:\n            if n % 2 == 0:\n                return (nums1[0] + nums2[n // 2 - 1] + nums2[n // 2]) / 2\n            else:\n                return (nums1[0] + nums2[n // 2]) / 2\n        else:\n            if n % 2 == 0:\n                return (\n                    max(\n                        nums1[m // 2],\n                        nums1[m // 2 - 1]\n                    ) + \n                    min(\n                        nums2[n // 2],\n                        nums2[n // 2 - 1]\n                    ) +\n                    nums2[n // 2]\n                ) / 2\n            else:\n                return max(\n                    nums1[m // 2],\n                    nums1[m // 2 - 1]\n                ) + min(\n                    nums2[n // 2],\n                    nums2[n // 2 - 1]\n                )\n\n        if n > m:\n            if nums1[m] < nums2[0]:\n                return self.find_median_sorted_arrays_recursive(nums1[m:], nums2)\n            elif nums1[m] > nums2[0]:\n                return self.find_median_sorted_arrays_recursive(nums1, nums2[:m])\n            else:\n                return self.find_median_sorted_arrays_recursive(nums1[m:], nums2[1:])\n        else:\n            if nums1[m] < nums2[n - 1]:\n                return self.find_median_sorted_arrays_recursive(nums1, nums2[:n])\n            elif nums1[m] > nums2[n - 1]:\n                return self.find_median_sorted_arrays_recursive(nums1[:m], nums2)\n            else:\n                return self.find_median_sorted_arrays_recursive(nums1[:m], nums2[:n - 1])\n\nclass Test(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_find_median_sorted_arrays(self) -> None:\n        s = Solution()\n        for nums1, nums2, solution in (\n            [[1, 3], [2], 2],\n            [[1,"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\n\n-----Test1-----\nInput\n2\naz\nbf\n\nOutput\nbc\n\n-----Test2-----\nInput\n5\naz\nnz\n\nOutput\nbc\n\n-----Test3-----\nInput\n6\naz\nz\n\nOutput\nbc\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('\\n\\n') == '\\n'\nassert solution('\\na\\n') == 'a'\nassert solution('\\nab\\n') == 'a'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"az\") == \"az\"\nassert solution(\"bf\") == \"bf\"\nassert solution(\"gjj\") == \"jgj\"\nassert solution(\"gxz\") == \"gxz\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\nassert solution(\"ujtmv\") == \"qrpzs\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"az\") == \"bc\"\n\nassert solution(\"bf\") == \"bc\"\n\nassert solution(\"bc\") == \"bc\"\n\nassert solution(\"zf\") == \"bc\"\n\nassert solution(\"zf\") == \"bc\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"asdji\") == \"defqowz\"\nassert solution(\"tvqhwp\") == \"uvnzw\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"15 13 15 15 12\"], 4) == \"NO\"\nassert solution([\"20 10 40 30\"], 4) == \"YES\"\nassert solution([\"15 13 15 15 12\"], 5) == \"NO\"\nassert solution([\"15 13 15 15 12\"], 2) == \"YES\"\nassert solution([\"15 13 15 15 12\"], 3) == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 3 2 4 1') == 'YES\\n1 2 4 \nassert solution('4 5\\n1 3 2 3 1') == 'NO \nassert solution('4 4\\n1 3 2 3 1') == 'YES\\n1 2 3 4 \nassert solution('3 4\\n2 1 3 2') == 'NO \n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n20 10 40 30\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n15 13 15 15 12\") == 'YES\\n1 2 5'\nassert solution(\"4 4\\n20 10 40 30\") == 'YES\\n1 2 3 4'\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 2) == 'YES'\nassert solution(2, 2) == 'NO'\nassert solution(2, 3) == 'YES'\nassert solution(1, 2) == 'NO'\nassert solution(2, 4) == 'YES'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\\n\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 3 4 0 2\") == \"YES\\n1 0 0 0 1 0 1 0\"\nassert solution(\"1 2 4 0 2\") == \"NO\\n\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"9 0 2 3 8 9 3 2 5 4 0\") == \"YES\\n1 0 1 1 1 1 0 1 0 1\"\nassert solution(\"1 1 1\") == \"YES\\n1 1 1\"\nassert solution(\"0 0 0\") == \"YES\\n0 0 0\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('5 1 2 6 8 0 9') == 'NO'"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution(\"5\\n1 2 4 0 2\") == 'NO\\n'"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9 10\") == \"NO\"\nassert solution(\"5\\n1 3 2 4 5\") == \"YES\\n1 0 1 0 0 1\"\nassert solution(\"6\\n1 3 2 4 5 6\") == \"YES\\n1 0 1 1 0 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5 2 3\") == \"YES\\n0 1 0 0 1\"\nassert solution(\"4 2 1 3 6\") == \"NO\\n\"\nassert solution(\"3 1 3 2\") == \"YES\\n1 0 1 0\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5') == 'YES\\n1 1 1 1 1 1'\nassert solution('1 2 4 0 2') == 'NO\\n0 0 0 0 1 0'\n\nassert solution('1 2 4 0 2') == 'NO\\n0 0 0 0 1 0'\nassert solution('1 2 3 4 5') == 'YES\\n1 1 1 1 1 1'"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 8 7 6 5 4 3 2 1 0\") == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution(\"5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\n\nprint(solution(stdin.strip()))\n\n-----Problem-----\n\nhttps://codeforces.com/contest/1430/problem/B\n'''\n\nimport sys"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '9\\n5 1 3 6 8 2 9 0 10'\n) == 'YES\\n1 0 0 0 0 1 0 1 0'\n\nassert solution(\n    '9\\n5 1 3 6 8 2 9 0 10'\n) == 'YES\\n1 0 0 0 0 1 0 1 0'\n\nassert solution(\n    '5\\n1 2 4 0 2'\n) == 'NO'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == '3\\n0\\n1134\\n0'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2 1 3 4\n4 1 3 5\n1 1 2 2\n3 1 3 3\n3 2 2 2\n''') == '''0\n1\n1'''\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '''3\n0\n1134\n0'''\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom typing import Tuple, List\n\nfrom utils.number_theory import lcm\n\nT = int(input())\nfor _ in range(T):\n    A = [int(i) for i in input().split()]\n    N = A[0]\n    L, v, l, r = A[1:]\n    ans = 0\n    for i in range(l, r + 1):\n        x = i\n        while x % v!= 0:\n            x += L\n        if i == x:\n            continue\n        ans += 1\n    print(ans)\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2 3 7') == '3'\nassert solution('100 51 51 51') == '0'\nassert solution('1234 1 100 199') == '1134'\nassert solution('1000000000 1 1 1000000000') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('2 2 2') == '0'\nassert solution('10 2 3 7') == '3'\nassert solution('100 51 51 51') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2 5\\n3 2 6 8\") == \"1\"\nassert solution(\"4 1 2 10\\n5 1 11 11\") == \"2\"\nassert solution(\"3 1 2 1000000000\\n10000 1 1000000000\") == \"1\"\nassert solution(\"4 1 1 1000000000\\n10001 1 1000000000\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == '3\\n0\\n1134\\n0'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\nassert solution('2 4 3 10\\n5 11 4 13\\n3 4 3 3') == '1\\n0\\n0\\n1'\nassert solution('4 4 2 8\\n1 2 3 6\\n3 4 3 3') == '2\\n2\\n0\\n1'\nassert solution('10 10 10 10') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000001 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000001 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\n'''"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 1\nassert solution('4') == 3\nassert solution('8') == 1260\nassert solution('20') == 12164510040883200\n\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\nprint(\"You are good to go!\")\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n\") == '1'\nassert solution(\"4\\n\") == '3'\nassert solution(\"8\\n\") == '1260'\nassert solution(\"20\\n\") == '12164510040883200'\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('4') == '3'\nassert solution('20') == '12164510040883200'\nprint(solution(input()))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"20\") == \"12164510040883200\"\nassert solution(\"8\") == \"1260\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\nprint('The local tests are done. Click \"Check\" to earn cool rewards!\"')\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\ns = list(input())\n\nfor i in range(k):\n    a = 0\n    while a < n and s[a]!= 'a':\n        a += 1\n    if a < n:\n        s.pop(a)\n        n -= 1\n    else:\n        break\n\nprint(''.join(s))"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('aab') == ''\nassert solution('ba') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"aabbcc\") == \"aaabbcc\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('abbccc') == 'bbccc'\nassert solution('aaaa') == ''\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == 'def'\n\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1 3 2\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n\"\"\"\n\nfrom typing import List, Union\nfrom collections import Counter\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\"\"\"\n\n\"\"\"\nhttps://www.educative.io/courses/grokking-the-coding-interview/g78h7jE5KQp\n\"\"\"\n\n\"\"\"\nfor k in range(1, n + 1):\n        if k >= k_list[i]:\n            day += 1\n            k -= k_list[i]\n            if k == 0:\n                break\n            i += 1\n    return day\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3 2 1 1 3 1 2 2 1 1 3 2 1\") == \"8\"\nassert solution(\"2 1 1 3 2 1 1 3 1 2 2 1 1 3 2 1\") == \"6\"\nassert solution(\"2 1 1 3 2 1 1 3 1 2 2 1 1 3 2 1\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n1 2\\n2 3\\n4 2\\n2 3\\n') == '20'\n\n-----Solution-----\n\nIf there are m special offers then the graph for m special offers can be represented by m layers.\nEach layer contains nodes for all possible sums of microtransactions for given d and t.\nThen the problem becomes finding the minimum number of layers to cover all microtransactions.\n\n1. In the first layer we choose all microtransactions from k1 to k2 (0 <= k1 <= k2).\n2. In the second layer we choose all microtransactions from k3 to k4 (0 <= k3 <= k4).\n3. In the third layer we choose all microtransactions from k5 to k6 (0 <= k5 <= k6).\n\nIf we have m special offers then we need m layers. If m is zero then there is only one layer.\nIf we have m special offers and k1 = k2 = k3 = k4 = k5 = k6 = 0 then the answer is 1.\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 1.\n\nHowever, there are more general cases.\n\nIf we have m special offers and k1 = k2 = k3 = 0 then the answer is 2.\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\n\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\n\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\n\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\n\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\nIf we have m special offers and k1 = k2 = k3 = k4 = 0 then the answer is 2.\n\nTherefore, the answer is 2 * m.\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '2'\nassert solution('2 2') == '2'\nassert solution('1 1 1 1 1') == '2'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nprint(solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\"))"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('....*...') == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n3 4 1'\nassert solution('.*.*') == '-1'\nassert solution('.*.*') == '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == '3\\n2 2 1\\n3 3 1'\nassert solution(\"6 7\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n\") == '-1'\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n\") == '-1'\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n*.*\\n.*.\\n*.*') == '3\\n2 2 1\\n3 3 1\\n3 4 1','solution first'\nassert solution('2 2\\n**\\n.*') == '1\\n1 1 1','solution second'\nassert solution('3 3\\n***\\n.*\\n.*') == '-1','solution third'\nassert solution('5 5\\n****\\n***.\\n****\\n***.\\n****\\n***.\\n****') == '3\\n2 2 1\\n3 3 1\\n3 4 1','solution fourth'\nassert solution('5 5\\n****\\n***.\\n****\\n***.\\n****\\n***.\\n****') == '-1','solution fifth'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\") == \"-1\"\n\nassert solution(\"4 6\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n.....\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n*.*\\n.*.\") == \"2 2 1\"\nassert solution(\"5 5\\n.*..\\n.*..\\n.*..\\n.*..\\n.*.\") == \"3 3 1\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"1 1 1\"\nassert solution(\"5 5\\n.*..\\n.*..\\n.*..\\n.*..\\n.*.\") == \"3 3 1\"\nassert solution(\"1 2\\n.*\\n.*\") == \"2 2 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"5 5\\n*..*\\n.*.*\\n*.*\\n*.*\") == \"2\\n2 2 1\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 'Yes'\nassert solution('10') == 'Yes'\nassert solution('22') == 'Yes'\nassert solution('121') == 'Yes'\nassert solution('123') == 'Yes'\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == 'Yes'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(555) == 'Yes'\nassert solution(101) == 'No'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"333\") == \"No\"\nassert solution(\"18\") == \"No\"\nassert solution(\"123\") == \"No\"\nassert solution(\"1010\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"575\"\n) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 'Yes'\nassert solution('0') == 'No'\nassert solution('0 0') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"123\") == \"No\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(567) == 'Yes'\nassert solution(576) == 'No'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('575') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A B\\n8 6\\n\") == \"Alice\"\nprint(solution(\"A B\\n8 6\\n\"))\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('2 3') == 'Bob'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"4 3\") == \"Bob\"\nassert solution(\"7 7\") == \"Draw\"\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"8 12\") == \"Bob\"\nassert solution(\"10 7\") == \"Alice\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 6') == 'Alice'"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Bob\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"3 5\") == \"Alice\"\nassert solution(\"6 6\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"7 6\") == \"Bob\"\nassert solution(\"8 7\") == \"Draw\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"8 6\") == \"Alice\"\nassert solution(\"1 10\") == \"Alice\"\nassert solution(\"1 10\") == \"Alice\"\nassert solution(\"9 9\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"6 8\") == \"Bob\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"8 6 7\") == \"Draw\"\nassert solution(\"1 1 3\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"5 5\") == \"Draw\"\nassert solution(\"9 7\") == \"Bob\"\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\ns = input()\n\nprint(s.replace(',',''))\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"hello,dolphin,goodbye\") == \"hello dolphin goodbye\"\nassert solution(\"hello,dolphin,goodbye\") == \"hello dolphin goodbye\"\n\n---------------------"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\", sep=\",\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    s=\"happy,newyear,enjoy\"\n) == \"happy newyear enjoy\"\n\nassert solution(\n    s=\"hello,world\"\n) == \"hello world\"\n\nassert solution(\n    s=\"he,llo\"\n) == \"hello\"\n\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n------"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 0\\n3 0\\n2 3\\n1 2\\n0 0\\n2 0\\n1 2') == '3\\n1\\n2'\nassert solution('2 2\\n1 0\\n0 0\\n-1 0\\n1 0\\n') == '1\\n2'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"3 5\\n-1 2\\n0 4\\n3 1\\n-3 0\\n-5 5\\n1 1\\n-3 2\\n2 2\\n\") == \"3\\n0\\n1\\n2\"\nassert solution(\"2 3\\n0 1\\n1 0\\n\") == \"0\\n1\"\nassert solution(\"3 5\\n0 0\\n1 0\\n-1 2\\n1 1\\n-2 0\\n2 2\\n\") == \"0\\n1\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\n\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    2 2\n    2 0\n    0 0\n    -1 0\n    1 0\n    \"\"\"\n) == \"2\\n1\"\n\nassert solution(\n    \"\"\"\n    2 2\n    2 0\n    0 0\n    -1 0\n    1 0\n    \"\"\"\n) == \"1\\n2\"\nassert solution(\n    \"\"\"\n    2 2\n    2 0\n    0 0\n    -1 0\n    1 0\n    \"\"\"\n) == \"1\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2\n2 0\n0 0\n-1 0\n1 0''') == '2\\n1'\nassert solution('''3 3\n-1 0\n2 0\n2 0\n0 1\n-1 1\n1 2\n1 2\n1 2\n0 0\n-1 1\n1 0\n1 1\n0 0\n-1 1\n0 2\n1 1\n1 0\n-1 1\n0 0\n1 1\n0 0\n0 1''') == '1\\n2\\n1'\nassert solution('''3 3\n0 1\n0 0\n0 0\n-1 1\n1 1\n0 0\n0 2\n0 1\n-1 1\n-1 1\n0 0\n0 1\n0 2\n0 1\n-1 1\n1 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n1 1\n0 0\n-1 1\n0 1\n0 1\n0 0\n0 0\n0 1\n0 1\n1 1\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n-1 1\n0 0\n0 1\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\\n\"\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 3\\n0 0\\n0 0\\n0 0\\n0 0\") == \"3\\n3\"\nassert solution(\"4 4\\n1 1\\n0 0\\n0 0\\n0 0\\n0 0\") == \"4\\n3\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 14\nassert solution(5) == 80\nassert solution(6) == 184\nassert solution(8) == 512\nassert solution(10) == 1024\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\nprint(\"Test Successful\")\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == 14\n\"\"\"\n\na = int(input())\nprint(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '14'\n'''\n\n'''\nGiven an integer n as input, print all the integers from 1 to n.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n\n-----Output-----\nPrint the value as an input. Outputs such as 1.0 will be judged as incorrect."
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '14'\nassert solution('3\\n') == '18'\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '14'\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 14\n\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '14'\n'''\n\na = input()\na = int(a)\nx = a\nx = x + x*x\nx = x + x*x\nx = x + x*x\nx = x + x*x\nx = x + x*x\nx = x + x*x\nprint(x)\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#') == 'Yes'\n\nimport sys\nassert sys.stdin.read() == '3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\\n'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\n\"\"\"\n\nimport sys\n\nA, B = (list(map(str.strip, line.split(':')) for line in sys.stdin.readlines()[:2]))\nA = [''.join(line) for line in A]\nB = ''.join(B)\n\nfor line in A:\n    print(B in line)\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"1 1\\n.\") == \"Yes\"\nassert solution(\"1 1\\n#.\") == \"No\"\nassert solution(\"1 1\\n.#\") == \"Yes\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.#.#\\n.###\\n###.') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\") == \"No\"\nassert solution(\"3 2\\n##\\n##\\n##\") == \"No\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n##\\n#.\\n#.\") == \"No\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())\n\nprint(max([a+b+c, a+b, a+c, b+c, a, b, c]))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nprint(solution(\"1 5 2\"))\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('1 5 2') == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 2\\n') == '53'\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\"\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(int(input()))\n\nlst.sort(reverse=True)\n\ntotal = 0\nfor i in range(n):\n    if i % 2 == 0:\n        total += lst[i]\n    else:\n        total += lst[i] / 2\n\nprint(int(total))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\n\nN = int(input())\narr = [int(i) for i in input().split()]\narr.sort()\nans = 0\nfor i in range(N):\n    ans += arr[i]\n    if i%2==0:\n        ans -= arr[i]/2\nprint(ans)\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n2\\n\") == \"1\\n\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n1\\n5\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\":\") == \"0\"\nassert solution(\"3450\") == \"6450\"\nassert solution(\"7980\") == \"15950\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"16\"\nassert solution(\"4\\n100\\n100\\n100\\n100\\n\") == \"400\"\nassert solution(\"5\\n100\\n99\\n100\\n100\\n\") == \"300\"\nassert solution(\"6\\n100\\n99\\n100\\n101\\n101\\n\") == \"300\"\nassert solution(\"7\\n100\\n99\\n100\\n101\\n101\\n102\\n\") == \"350\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nprices = []\n\nfor _ in range(N):\n    prices.append(int(stdin.readline()))\n\nprices.sort(reverse=True)"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\nimport sys\nimport numpy\n\nsys.setrecursionlimit(10000000)\n\nn = int(sys.stdin.readline().strip())\np = numpy.array(list(map(int, sys.stdin.readline().strip().split())))\nprint(sum(numpy.ceil(p/2)))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nA, B, C, D, E = input().split()\n\nA = int(A)\nB = int(B)\nC = int(C)\nD = int(D)\nE = int(E)\n\nstart = 0\nprev = 0\n\nwhile True:\n    if A % 10 == 0 and B % 10 == 0 and C % 10 == 0 and D % 10 == 0 and E % 10 == 0:\n        break\n    if A % 10 == 0:\n        start += B\n    else:\n        start += C\n    if prev > start:\n        start += D\n    else:\n        prev = start\n    start += E\n\nprint(start)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20 5 120\") == \"215\"\nassert solution(\"0 10 0 5 120\") == \"215\"\nassert solution(\"10 10 10 10 10\") == \"15\"\nassert solution(\"10 10 10 10 120\") == \"15\"\nassert solution(\"10 10 10 120 10\") == \"15\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"29\\n20\\n7\\n35\\n120\"\n) == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\na, b, c, d, e = [int(i) for i in stdin.split()]\n\norders = [0, 0, 0, 0, 0]\nfor i in range(a):\n    orders[0] += 1\nfor i in range(b):\n    orders[1] += 1\nfor i in range(c):\n    orders[2] += 1\nfor i in range(d):\n    orders[3] += 1\nfor i in range(e):\n    orders[4] += 1\n\norders.sort()\n\nstart = 0\nfor i, val in enumerate(orders):\n    if val % 10:\n        start = i\n        break\n\nstart = start if start!= 0 else len(orders) - 1\n\nfor i in range(start, -1, -1):\n    if orders[i] % 10:\n        print(a*i + b*(i+1) + c*(i+2) + d*(i+3) + e*(i+4))\n        break"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\n-----Problem-----\nThe restaurant AtCoder has five tables for take-out. Customers can place orders in any of the tables and then are served immediately (they can be seated and served in parallel).\n\nThere is a rule that customers are served in the increasing order of their order times. For example, a customer with order time 1 can be served only after all customers with order time 0.\n\nGiven order times of k customers, find the earliest time when all customers can be served.\n\n-----Input-----\n- Outputs (space delimited)\nA space-separated sequence of integers.\n\n-----Output-----\nPrint the earliest possible time, as an integer.\n\n-----Sample Input-----\n10 9 5 2 4\n\n-----Sample Output-----\n20\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\ninput_time = int(input())"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\n\"\"\"\n\nimport math\n\na, b, c, d, e = [int(x) for x in stdin.split()]\n\nt = 0\nwhile a * t % 10!= 0 or b * t % 10!= 0 or c * t % 10!= 0 or d * t % 10!= 0 or e * t % 10!= 0:\n    t += 1\n\nprint(t)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\n\"\"\"\n\nimport math\nimport unittest\n\nINPUT_FILE = 'day10.input.txt'\nINPUT_SAMPLE = 'day10.input.sample.txt'\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1.5'\nassert solution('10 30') == '7.5'\nassert solution('10\\n10') == '1'\n'''"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('3 2') == '1'\nassert solution('4 5') == '2'\nassert solution('10 30') == '7.5'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 30\") == \"7.5\"\n\"\"\"\n\nfrom typing import Union, Any, Sequence\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n10 2 20\\n') == '2\\n'\n\"\"\"\n\n\nfrom math import floor, ceil\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2\\n10 30\"\n) == \"7.5\"\n\"\"\"\n\n\"\"\"\nGiven is a sequence of N integers A_1, \\ldots, A_N.\nFind the sum of the inverses of these numbers,\n    \\frac{1}{A_1} + \\frac{1}{A_2} + \\ldots + \\frac{1}{A_N}.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint a decimal number (or an integer) representing the value of \\frac{1}{\\frac{1}{A_1} + \\frac{1}{A_2} + \\ldots + \\frac{1}{A_N}}.\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n2\n10 30\n\n-----Sample Output-----\n7.5\n\n\\frac{1}{\\frac{1}{10} + \\frac{1}{30}} = \\frac{1}{\\frac{4}{30}} = \\frac{30}{4} = 7.5.\nPrinting 7.50001, 7.49999, and so on will also be accepted.\n\"\"\"\n\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nassert solution(\"3\\n10 20 30\") == \"1.2\"\nassert solution(\"3\\n5 4 10\") == \"1.15\"\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n10 15\\n11 14\\n12\") == \"2\"\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10 15 11 14 12\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == '2'\n\n---\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nh = []\nfor i in range(N):\n    h.append(int(sys.stdin.readline()))\n\nh.sort()\nprint(h[K-1] - h[0])\n\n---\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nmin_ = 10 ** 9 + 1\nmax_ = 0\n\nfor _ in range(N):\n    height = int(sys.stdin.readline())\n    if height < min_:\n        min_ = height\n    if height > max_:\n        max_ = height\n\nprint(max_ - min_)\n\n---\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nmin_ = 10 ** 9 + 1\nmax_ = 0\n\nfor _ in range(N):\n    height = int(sys.stdin.readline())\n    min_ = min(min_, height)\n    max_ = max(max_, height)\n\nprint(max_ - min_)\n\n---\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nh = sorted(map(int, sys.stdin.readlines()))\n\nprint(h[K-1] - h[0])\n\n---\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nmin_ = 10 ** 9 + 1\nmax_ = 0\n\nfor _ in range(N):\n    height = int(sys.stdin.readline())\n    min_ = min(min_, height)\n    max_ = max(max_, height)\n\nprint(max_ - min_)\n\n---\nimport sys"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '10 15 11 14 12'\n) == '2'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12''') == '2'\nassert solution('''5 3\n10\n15\n11\n14\n12''') == '2'\nassert solution('''1 1\n10''') == '0'\nassert solution('''1 1\n10\n10''') == '0'\nassert solution('''1 1\n10\n9''') == '1'\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\n'''"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 15\\n11\\n14\\n12') == '2'\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\ntrees = list(map(int, stdin.readline().split()))\ntrees.sort()\n\nprint(trees[-K] - trees[K-1])\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n) == \"2\"\n\n\"\"\"\n\u0412 \u043a\u0430\u0444\u0435 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0445\u043e\u0434\u0438\u0442 \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0442\u0435\u043c\u044b.\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u044c \u0432\u0441\u0451 \u0432\u0440\u0435\u043c\u044f.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u0441\u0440\u0435\u0434\u0438 \u0442\u0435\u0445, \u043a\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0432 \u043a\u0430\u0444\u0435, \u0435\u0441\u0442\u044c \u0435\u0449\u0435 \u0442\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0435\u043d\u044c\u0433\u0438.\n\u0418\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0442\u0430\u043a\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0435\u0441\u0442\u044c \u0432 \u043a\u0430\u0444\u0435.\n\n\u0417\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439.\n\n-----Constraints-----\n - 0 \\leq N \\leq 10^5\n - 0 \\leq ai \\leq 10^9\n\n-----Input-----\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e N - \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043a\u0430\u0444\u0435.\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 N \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a1, a2,..., aN - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439.\n\u0421\u0443\u043c\u043c\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10^9.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e - \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439.\n\n-----Sample Input-----\n6\n3 1 1 1 1 1\n\n-----Sample Output-----\n5\n\n\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439.\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c N = 6 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043a\u0430\u0444\u0435, \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u044c.\n\u0422\u0430\u043a \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d, \u0447\u0442\u043e \u043e\u043d \u0443\u0436\u0435 \u043f\u043e\u043a\u0443\u043f\u0430\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0435\u0434\u0438\u043d\u0438\u0446\u0443,\n\u0442\u043e \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435:\n\np + 1 - ai\n\u0433\u0434\u0435 p - \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f, ai - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0435\u0434\u0438\u043d\u0438\u0446 \u043f\u043e\u043a\u0443\u043f\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432 \u043a\u0430\u0444\u0435 \u0431\u044b\u043b\u043e 6 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0431\u044b\u043b \u043f\u043e\u043a\u0443\u043f\u0430\u043d \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430,\n\u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0432\u044b\u0448\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 6 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u0435\u043d 3,\n\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u0440\u0430\u0432\u0435\u043d 10.\n\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u043e\u0433\u043e, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435:\n\np + 1 - ai\n\u0433\u0434\u0435 p - \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('B') == 'A'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"B\") == \"a\"\nassert solution(\"Aa\") == \"A\"\nassert solution(\"aA\") == \"a\"\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"C\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"C\") == \"C\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'A'\nassert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\n\nSolution:"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'a'\nassert solution('a') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(2) + \"\\n\" + \"2 2\") == \"6\"\n\n-----\n'''\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''2 2'''\n) == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('3 3\\n') == '1'\nassert solution('10 4\\n') == '0'\nassert solution('9 9\\n') == '9'\nassert solution('8 10\\n') == '0'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('2 3') == '0'\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"2 2\") == \"6\"\nassert solution(\"3 10\") == \"0\"\nassert solution(\"5 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 3\") == \"0\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1905') == 'YYMM'\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905a') == 'AMBIGUOUS'\nassert solution('1905b') == 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1906') == 'MMYY'\nassert solution('1907') == 'AMBIGUOUS'\nassert solution('1908') == 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1706') == 'MMYY'\nassert solution('1706') == 'YYMM'\nassert solution('1702') == 'AMBIGUOUS'\nassert solution('1602') == 'AMBIGUOUS'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\n-----Test Input-----\n1905\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1903\") == \"YYMM\"\nassert solution(\"1905XX\") == \"YYMM\"\nassert solution(\"1903XX\") == \"YYMM\"\nassert solution(\"19XX05\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\n-----\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905a\") == \"AMBIGUOUS\"\nassert solution(\"1905aab\") == \"AMBIGUOUS\"\n\n---\n\nYou can assume that the input is always a valid date. For instance, the following are valid input strings:\n- 1905\n- 0519\n- 051905\n- 05190519\n- 0119\n- 2005\n- 052005\n- 200515\n\n---\n### Solution\n\nThere are several possible solutions:\n\n1. Use of the `%` operator.\n\nWe can split the input string into two parts (by `-`) and interpret the first as a year, and the second as a month. Then we can just construct the YYMM and MMYY strings from the first and the last part respectively.\n\n```python\nprint(\n    \"YYMM\"\n    if int(s[:4]) < 100\n    else \"MMYY\"\n    if int(s[4:6]) < 10\n    else \"AMBIGUOUS\"\n    if int(s[:4]) < 1 or int(s[4:6]) < 1\n    else \"NA\"\n)"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n\n\"\"\"\nIf you can choose 2 even numbers and 2 odd numbers, then you can choose any number of pairs of an even and odd number. \nThis means we need to return the number of ways to choose an even number of evens and an odd number of odds. \nWe can use the same logic as before to get the solution:\n\nn_ways[K] = n_ways[K - 1] + n_ways[K - 2]\n\nThe base case is n_ways[1] = 1 and n_ways[2] = 2\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\\n\") == '2'\n\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(2)\n\n'''\n\nimport math"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nprint(solution(\"3\"))\n\nassert solution(\"2\") == \"2\"\nprint(solution(\"2\"))\n\nassert solution(\"1\") == \"1\"\nprint(solution(\"1\"))\n\nassert solution(\"0\") == \"0\"\nprint(solution(\"0\"))\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\"\n\n\n\"\"\"\nsolution\n\"\"\"\n\nimport itertools\n\nK = int(stdin.readline())\n\neven_odd_list = [(i, j) for i, j in itertools.product(range(1, K + 1, 2), range(1, K + 1, 2))]\n\nprint(len(even_odd_list))\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '2'\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 12\\n') == '21'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 12') == '21'\nassert solution('9 1') == '10'\nassert solution('11 1') == '12'\nassert solution('23 1') == '0'\nassert solution('23 0') == '23'\n\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 12\") == \"21\"\n\n-------TESTED WITH 0/10-------\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 12') == '21'\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 12\\n') == '21'\n\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n'''"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 12') == '21'\n\nprint(solution('9 12'))"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nprint(solution(\"2 2919\"))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nfrom ast import literal_eval as make_tuple\n\nfor line in stdin:\n    n, r = make_tuple(line)\n    print(n + (r - 100 * n) if n > 10 else r)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2919') == '3719'\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919\\n') == '3719'\n\"\"\"\n\na, b = stdin.split()\na = int(a)\nb = int(b)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\") == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n\nimport math\n\nn, k = input().split()\n\nprint(len(str(int(n, k))))"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 2\") == 4\nprint(\"Hooray!\")\n\"\"\"\n\n\"\"\"\nGiven is an integer N. Find the number of digits that N has in base K.\n\n-----Notes-----\nFor information on base-K representation, see Positional notation - Wikipedia.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^9\n - 2 \\leq K \\leq 10\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of digits that N has in base K.\n\n-----Sample Input-----\n11 2\n\n-----Sample Output-----\n4\n\nIn binary, 11 is represented as 1011.\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''11 2''') == 4\nassert solution('''1 1''') == 1\nassert solution('''2 4''') == 1\nassert solution('''9 8''') == 2\nassert solution('''10 10''') == 1\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == '4'\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2') == '4'\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 2') == '4'\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 2') == '4'\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == '4'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5) == 3\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5) == 3\nprint(solution(5))\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\nassert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n\") == \"Yay!\"\nassert solution(\"3 3\\n\") == \"Yay!\"\nassert solution(\"1 1\\n\") == \"Yay!\"\nassert solution(\"1 1\\n\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Yay!\"\nassert solution(\"3 3\") == \"Yay!\"\nassert solution(\"4 1\") == \"Yay!\"\nassert solution(\"5 4\") == \"Yay!\"\nassert solution(\"5 7\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n------Solution------\nfor i in range(A):\n    if i in B:\n        print(\"Yay!\")\n        return \"Yay!\"\n    for j in range(B):\n        if j == i:\n            continue\n        if j in B:\n            print(\"Yay!\")\n            return \"Yay!\"\n        print(\" :(\")\n        return \" :( \"\n\n-----Problem-----\nhttps://atcoder.jp/contests/typical90/tasks/typical90_af\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4') == 'Yay!'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\nassert solution(\"5 3\") == \":(\n\nassert solution(\"7 4\") == \"Yay!\"\n\nassert solution(\"6 4\") == \":(\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3 4') == 'Yay!'\nassert solution('2 2\\n4 4') == 'Yay!'\nassert solution('1 16\\n9 4') == 'Yay!'\nassert solution('5 4\\n3 4') == 'Yay!'\nassert solution('1 16\\n5 4') == 'Yay!'\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == \"34\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1234567876''') == '34'\nassert solution('''12345678876''') == '34'\nassert solution('''12345678976''') == '56'\nassert solution('''123445678976''') == '34'\nassert solution('''12345678987654321''') == '21'\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234567876') == '34'\nassert solution('1234567867') == '34'\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('12345678') == '34'\nassert solution('101010') == '2'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\ns = input()\n\nsum = 0\nmax = 0\n\nfor i in range(len(s)):\n    sum += int(s[i])\n    if sum > max:\n        max = sum\n    if i % 3 == 2:\n        sum = 0\nprint(max - int(s[len(s) - 1]))"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\nS = input()\n\nminimum_difference = len(S) + 1\nfor i in range(len(S) - 2):\n    minimum_difference = min(minimum_difference, (int(S[i]) - 753) + (int(S[i+1]) - 753) + (int(S[i+2]) - 753))\nprint(minimum_difference)\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234567876') == 34\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 2 1000000000 4 6 8 4 2\") == \"1 7\"\nprint(\"The local tests are done.\")\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nans = [0] * 3\nfor i in range(n):\n    ans[0] += a[i]\n    ans[2] += a[i]\n    ans[1] += ans[0] - a[i]\nprint(*ans)\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == ans\nprint(solution(s))\n\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13\") == \"1 7\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 13 52 0 13 26 52') == '12 13'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 12 6\\n'\n) == '5 3'\nassert solution(\n    '2 9\\n'\n) == '1 7'\nassert solution(\n    '7\\n'\n    '13 52 0 13 26 52'\n) == '12 13'\n\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 4 1\") == \"3\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"2\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 4 1\") == 3\n\"\"\"\n\nfrom collections import deque\nfrom itertools import count"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 4 1\\n') == 3\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 4 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n3 1 4 1\n''') == '3'\nassert solution('''5\n1 1 1 2 2\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 4 1\\n\") == 3\nassert solution(\"3\\n1 1 1\\n\") == 1\nassert solution(\"5\\n1 1 1 2 2\\n\") == 2\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\nassert solution('5\\n1 1 1 2 2') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 4 1\\n\") == \"3\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 4 1\\n\") == \"3\"\nassert solution(\"3\\n1 1 1\\n\") == \"1\"\n\"\"\"\n\nn = int(input())\ncontests = list(map(int, input().split()))\n\ncount = 0\nfor i in range(len(contests)):\n    if contests[i] >= n:\n        count += 1\n\nfor i in range(1, n):\n    if contests[i] >= n - i:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4 2\n1 2\n2 3\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n2 0\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n3 2\n1 3\n2 3\n\"\"\"\n) == \"2\"\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\n\"\"\"\n\nimport sys\nimport math\nimport queue\nimport heapq\nfrom collections import Counter, deque\nfrom itertools import combinations, product, permutations\nfrom functools import lru_cache\nfrom bisect import bisect_left, bisect_right\nfrom math import gcd\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2\\n'\nassert solution('2 0') == '1\\n1 2\\n'\nassert solution('3 2\\n1 3\\n2 3') == '2'\nassert solution('3 2\\n1 3\\n2 3\\n') == '2'\nassert solution('3 2\\n1 3\\n2 3\\n1 2') == '2'\n\n\"\"\"\n\nfrom sys import stdin\nimport collections\nimport heapq\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\"\"\"\n\nimport sys\nimport collections\nimport heapq\nfrom collections import defaultdict\n\nclass Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.edges = dict()\n        self.key = None\n    \n    def __str__(self):\n        return str(self.value)\n        \n    def __repr__(self):\n        return self.value\n\nclass Graph:\n    def __init__(self, num_of_vertices):\n        self.vertices = dict()\n        self.num_of_vertices = num_of_vertices\n        self.num_of_edges = 0\n        self.edges = collections.defaultdict(list)\n        self.edges_by_vertex = collections.defaultdict(list)\n        self.edges_by_vertex_set = collections.defaultdict(set)\n        \n    def add_edge(self, edge):\n        v, u = edge\n        if v not in self.vertices:\n            self.vertices[v] = Vertex(v)\n        if u not in self.vertices:\n            self.vertices[u] = Vertex(u)\n        \n        v, u = self.vertices[v], self.vertices[u]\n        self.edges[v].append(u)\n        self.edges[u].append(v)\n        self.edges_by_vertex[v].append(u)\n        self.edges_by_vertex[u].append(v)\n        \n        self.edges_by_vertex_set[v].add(u)\n        self.edges_by_vertex_set[u].add(v)\n        self.num_of_edges += 1\n        \n    def print_graph(self):\n        print(f'Number of vertices: {self.num_of_vertices}')\n        print(f'Number of edges: {self.num_of_edges}')\n        for v in self.vertices:\n            print(v, end=' -> ')\n            for edge in self.edges_by_vertex_set[v]:\n                print(edge, end=' ')\n            print()\n        print()\n        \n    def find_mst(self):\n        # Initialize the root\n        root = self.vertices[1]\n        root.key = 0\n        \n        # Priority queue\n        priority_queue = [(0, root)]\n        \n        # Set of vertices in the tree\n        tree_vertices = set()\n        \n        # Set of vertices to be removed from the priority queue\n        removed_vertices = set()\n        \n        while len(priority_queue) > 0:\n            \n            # Get the next vertex and its cost from the priority queue\n            current_cost, current_vertex = heapq.heappop(priority_queue)\n            \n            # Mark the vertex as removed from the priority queue\n            removed_vertices.add(current_vertex)\n            \n            # Add the vertex to the tree\n            tree_vertices.add(current_vertex)\n            \n            # Check if there is any edge connected to the vertex\n            for edge in self.edges_by_vertex[current_vertex]:\n                \n                # Get the destination vertex\n                destination_vertex = edge\n                \n                # Check if the destination vertex was removed from the priority queue\n                if destination_vertex not in removed_vertices:\n                    \n                    # Check if the destination vertex is already in the priority queue or the tree\n                    if destination_vertex not in priority_queue and destination_vertex not in tree_vertices:\n                        # Set the destination vertex key\n                        destination_vertex.key = current_cost + 1\n                        \n                        # Add the destination vertex to the priority queue\n                        heapq.heappush(priority_queue, (current_cost + 1, destination_vertex))\n                    \n                    # Update the cost of the destination vertex if necessary\n                    elif destination_vertex in priority_queue and destination_vertex.key > current_cost + 1:\n                        destination_vertex.key = current_cost + 1\n                        heapq.heappush(priority_queue, (current_cost + 1, destination_vertex))\n                    \n                    # If the destination vertex is in the tree, then check for any cycle\n                    elif destination_vertex in tree_vertices:\n                        \n                        # Get the path in the tree\n                        current_path = self.find_path(current_vertex, destination_vertex)\n                        \n                        # If the current path is a cycle, then mark the current vertex as removed from the priority queue\n                        if current_path:\n                            current_vertex.key = None\n                            removed_vertices.add(current_vertex)\n                    \n        print(root)\n        return root\n                    \n    def find_path(self, current_vertex, destination_vertex):\n        # Keep track of the vertexes in the path\n        path = [current_vertex]\n        \n        # Set the current vertex as the destination vertex\n        current_vertex = destination_vertex\n        \n        # While we have not reached the root\n        while current_vertex.key:\n            \n            # Get the parent vertex\n            parent_vertex = self.edges[current_vertex][0]\n            \n            # If the parent vertex is the root, then the current vertex is the destination vertex\n            if parent_vertex == current_vertex.value:\n                return path\n            \n            # Add the parent vertex to the path\n            path.append(parent_vertex)\n            \n            # Set the current vertex as the parent vertex\n            current_vertex = parent_vertex\n        \n        # If we reach the root, then there is no cycle in the tree\n        return False\n        \n    \n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\n\"\"\"\nimport sys\nimport queue\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('4 0\\n1 2\\n2 3') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 9\\n11 9\\n12 9\\n13 9\\n14 9\\n15 9\\n16 9') == '6'\nsolution('10 4\\n1 10\\n2 10\\n3 10\\n4 10\\n5 10\\n6 10\\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\nimport itertools\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 2\") == \"2\"\n\nimport json"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == 11\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == 4"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\n\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n\nassert solution('5 2\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(example_stdin) == example_stdout\nprint(solution(stdin))"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n''') == '11'\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n''') == '4'\n\nprint('Success')\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\") == \"11\"\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('../inputs/dp_4')\n\n\nimport math"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 6\n10 15 12''') == '''1 1\n1 9\n2 2\n2 13\n3 1\n3 12'''\nassert solution('''2 3\n5 10000000000\n5 6 9999999999''') == '''1 5\n2 1\n2 9999999994'''\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1 1'\nassert solution('1 2 3') == '1 1'\nassert solution('3 2') == '1 2'\nassert solution('3 2 1') == '2 1'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6 9999999999\") == \"1 9\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\nprint(\"PASSED\")\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solve(self, stdin):\n        n, m = map(int, stdin.readline().split())\n        rooms = list(map(int, stdin.readline().split()))\n        rooms = [0] + rooms\n        letters = list(map(int, stdin.readline().split()))\n\n        rooms.sort()\n        letters.sort()\n        dormitory = []\n        for room in rooms:\n            if len(dormitory) == 0 or room > dormitory[-1] + 1:\n                dormitory.append(room)\n            else:\n                dormitory.append(room)\n        i = 0\n        j = 0\n        dormitory_dict = {}\n        for room in dormitory:\n            if i < len(dormitory) and room == dormitory[i]:\n                dormitory_dict[room] = letters[j]\n                j += 1\n                i += 1\n\n        res = []\n        for i in range(m):\n            number = int(stdin.readline())\n            dormitory_number = 1\n            room_number = 1\n            for key in dormitory_dict.keys():\n                if number >= key:\n                    number -= key\n                    dormitory_number = key\n                    room_number = dormitory_dict[key]\n                else:\n                    break\n            res.append(dormitory_number)\n            res.append(room_number)\n        return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6 5 4''') == '2 1 3'\nassert solution('''40 40 40 60''') == '20 20 20'\nassert solution('''201 101 101 200''') == '1 100 100'\nassert solution('''20 20 20''') == '1 100 100'\nassert solution('''1 2 3 4''') == '1 2 3'\n\"\"\"\n\nx1, x2, x3, x4 = (int(i) for i in input().split())\n\na, b, c = sorted([x1, x2, x3, x4])"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n        '3 6 5 4'\n    ) == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6 4 3\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '1 1 1'\nassert solution('1 2 3 4') == '1 3 3'\nassert solution('1 2 3 5') == '1 2 3'\nassert solution('1 2 3 6') == '1 2 3'\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n\na, b, c, d = map(int, input().split())\n\na, b, c, d = sorted([a, b, c, d], reverse=True)\n\na1 = a + b\nb1 = a + c\nc1 = b + c\n\na2 = a + b + c"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\"\"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\n\n-----"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\nprint(\"Finished\")\n\nimport os\nimport signal\nimport time\n\nfrom collections import deque\n\nclass Input:\n    def __init__(self):\n        self.queue = deque()\n        self.queue.append(self.read())\n        self.pipe = None\n        self.line = 0\n        self.flag = False\n\n    def read(self):\n        self.flag = True\n        self.line = 0\n        return self.pipe.readline().rstrip('\\n')\n\n    def start_pipe(self, pipe):\n        self.pipe = pipe\n        os.set_inheritable(pipe.fileno(), True)\n        self.queue.append(self.read())\n\n    def get(self):\n        return self.queue.popleft()"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nprint('The solution is correct!')\n\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nRRR\") == \"RRR\"\nassert solution(\"6\\nGBGGRB\") == \"GRBGGRBGGR\"\nassert solution(\"8\\nRBRRBBB\") == \"RRBBRRBRR\"\nassert solution(\"13\\nRRRRRRRRRRR\") == \"RRRRRRRRRRRR\"\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRBGBGBGRG'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '9\\n'\n    'RBGRRBRGG'\n    ) == '2\\n'\n    'RBGRGBRGR'\nassert solution(\n    '8\\n'\n    'BBBGBRRR'\n    ) == '2\\n'\n    'BRBGBRGR'\nassert solution(\n    '13\\n'\n    'BBRRRRGGGGGRR'\n    ) == '6\\n'\n    'BGRRRRBBBGBBBBGB'"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\n\"\"\"\n\ninput_data = input()\nlamps = [char for char in input_data]\n\nn = int(input_data)\ndiverse = False\ncounter = 0\n\nfor i in range(n):\n    if i > 0 and lamps[i]!= lamps[i-1]:\n        counter += 1\n        diverse = True\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('GGGGGG') == 'GGGGGG'\nassert solution('RRRRR') == 'RRRRR'\nassert solution('RRRBB') == 'RRRBB'\nassert solution('RGGGG') == 'RGGGG'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nRG') == 'RR'\nassert solution('5\\nGGGGR') == 'RRRRRR'\nassert solution('8\\nBBBGBRRR') == 'RRRRRRBBBGB'\nassert solution('13\\nBBRRRRGGGGGRR') == 'RRRRRRBBBGBGBBGRGR'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9RBBGGBRBR') == '2BGBBBRR'\nassert solution('8BGBRRRGGGGGRR') == '2BGRBGRRRR'\nassert solution('13RRRRRRRRRRRGGGGGGRRRRRRRRRRRRRRRRR') == '6RRGGBRGRR'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\nRRRBBBBGG\\n\") == \"2\\nRRRBBBBGG\\n\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\\n\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRRRBGBBBGR\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BBBGBRRR\") == \"2\\nRBGRBGRGR\"\nassert solution(\"BBRRRRGGGGGRR\") == \"6\\nBGRBGRGRGRBGRGRG\"\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()\n\ncolors = {'R': 0, 'G': 0, 'B': 0}\nfor c in s:\n    colors[c] += 1\n\nanswer = n\nfor color in colors:\n    if colors[color] > 0:\n        answer += colors[color] - 1\n\nprint(answer)\nprint(s[::-1])"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 1\") == '2'\nassert solution(\"6 7 8 3 4 5 9 10 11\") == '6'\nassert solution(\"10 9 8 7\") == '1'\nassert solution(\"6 7 8 3 4 5 9 10 11\") == '6'\nassert solution(\"1 3 5 2 4 6\") == '2'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"1 2 3 7 8 9\"\nassert solution(\"3 3 4 7 5 6 8\") == \"4 2 3 5 6\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\nassert solution(\"10 9 8 7\") == \"1 2 3 7 8 9\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s1) == '4'\nassert solution(s2) == '2'\nassert solution(s3) == '1'\nassert solution(s4) == '1'\nassert solution(s5) == '6'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 4 7 5 6 8') == '4'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('10 9 8 7') == '1'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n3 3 4 7 5 6 8') == '4'\nassert solution('6\\n1 3 5 2 4 6') == '2'\nassert solution('4\\n10 9 8 7') == '1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6'\nassert solution('5\\n1 3 5 2 4') == '2'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"7\n3 3 4 7 5 6 8\"\"\") == \"4\\n2 3 5 6\\n\"\n\nassert solution(\"\"\"6\n1 3 5 2 4 6\"\"\") == \"2\\n1 4\\n\"\n\nassert solution(\"\"\"4\n10 9 8 7\"\"\") == \"1\\n1\\n\"\n\nassert solution(\"\"\"9\n6 7 8 3 4 5 9 10 11\"\"\") == \"6\\n1 2 3 7 8 9\\n\"\n\n\"\"\"\nSample Input:\n\n7\n3 3 4 7 5 6 8\nSample Output:\n\n4\n2 3 5 6\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 4 7 5 6\") == \"4\\n2 3 5 6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"10 9 8 7\") == \"1\\n1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 4 7 5 6 8\\n\") == \"4\\n2 3 5 6\\n\"\nassert solution(\"6 7 8 3 4 5 9 10 11\\n\") == \"6\\n1 2 3 7 8 9\\n\"\nassert solution(\"4 10 9 8 7\\n\") == \"1\\n1\\n\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\\n\") == \"6\\n1 2 3 7 8 9\\n\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('123\\n123\\n') == '0\\n0\\n'\nassert solution('123\\n123\\n12') == '1\\n1\\n'\nassert solution('123\\n123\\n1234') == '1\\n1\\n'\nassert solution('123\\n123\\n1234\\n12') == '2\\n2\\n'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"\n\nimport sys\n\nclass Seq:\n    def __init__(self, seq: list):\n        self.seq = seq\n    \n    def max_seq(self) -> int:\n        \"\"\"Return the length of the subsequence of the given array that forms an increasing sequence of consecutive integers.\"\"\"\n        seq = self.seq\n        ans = 0\n        for i in range(len(seq)):\n            j = i + 1\n            while j < len(seq):\n                if seq[j] - seq[j - 1] == 1:\n                    ans = max(ans, j - i + 1)\n                    j += 1\n                else:\n                    break\n        return ans\n\n    def subsequence(self) -> str:\n        \"\"\"Return the index of the any maximum length subsequence of the given array that forms an increasing sequence of consecutive integers.\"\"\"\n        seq = self.seq\n        ans = \"\"\n        if self.max_seq() == 0:\n            return ans\n        for i in range(len(seq)):\n            j = i + 1\n            while j < len(seq):\n                if seq[j] - seq[j - 1] == 1:\n                    ans = \" \".join(map(str, seq[i : j + 1]))\n                    j += 1\n                else:\n                    break\n        return ans\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n\") == 'Yes'\nassert solution(\"3 1\\n\") == 'Yes'\nassert solution(\"2 2\\n\") == 'No'\nassert solution(\"2 3\\n\") == 'No'\nassert solution(\"3 3\\n\") == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('4 2') == 'No'\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\na, b = map(int, stdin.split('\\n')[:2])"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n') == 'Yes\\n'\nassert solution('4 1\\n') == 'No\\n'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('3 1') == 'No'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('81 58') == '110'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\n\"\"\"\ninput_data = [int(i) for i in input().split()]\n\nprint(input_data[0] * 2 + input_data[1] // 2)\n\"\"\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('81 58') == '110'\nprint(solution(input()))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\n\"\"\"\nThe following code gives incorrect answer, please change it to give correct answer.\n\"\"\"\n\nX, Y = input().split()\nX = int(X)\nY = int(Y)\nZ = X / 2\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0 1') == '0'\nassert solution('0 2') == '1'\nassert solution('100 100') == '100'\nassert solution('100 10000') == '1000'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"8\"\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\nHow many possible passwords are there if each of its character must be a digit between 1 and N (inclusive)?\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of possible passwords.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n8\n\nThere are eight possible passwords: 111, 112, 121, 122, 211, 212, 221, and 222.\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"8\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2') == '8'\nassert solution('3') == '27'\nassert solution('4') == '64'\n\n-----\nWhat is the number of possible passwords, if the password must consist of unique characters?\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of possible passwords.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n5\n\nThere are five possible passwords: 11, 12, 13, 22, and 23.\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n''') == '8'\n\nassert solution('''5\n''') == '25'\n\nassert solution('''1\n''') == '1'\n\nassert solution('''6\n''') == '36'\n\nassert solution('''8\n''') == '64'"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"8\"\nprint(\"All test cases passed.\")\n\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"8\"\nprint(solution(\"2\"))\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2''') == '''8'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n') == 'YES'\nassert solution('6\\n') == 'YES'\nassert solution('7\\n') == 'NO'\nassert solution('8\\n') == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('2\\n') == 'NO'\nassert solution('1\\n') == 'NO'\nassert solution('9\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5) == 'YES'\nassert solution(6) == 'NO'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\n\nassert solution('7') == 'NO'\n\nassert solution('9') == 'YES'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('10\\n') == 'NO'\nassert solution('6\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"9\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('6\\n') == 'NO'\nassert solution('7\\n') == 'YES'\n\n\"\"\"\n\nimport math\n\nx = int(stdin.readline())\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"999\") == \"ABC\"\nassert solution(\"1000\") == \"ABD\"\nassert solution(\"1001\") == \"ABC\"\nassert solution(\"2000\") == \"ABC\"\nassert solution(\"2001\") == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"999\") == \"ABC\"\n\"\"\"\n\nn = input()\nprint('ABC'[:len(n)])\n\n\"\"\"\nAccepted\nTime Complexity: O(N)\nSpace Complexity: O(1)\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('999') == 'ABC'\nassert solution('1000') == 'ABD'\nassert solution('1001') == 'ABC'\nassert solution('1998') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('999') == 'ABC'\nassert solution('1') == 'ABC'\nassert solution('2000') == 'ABC'\nassert solution('1998') == 'ABC'\nassert solution('1991') == 'ABD'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'ABC'\nassert solution('ABCD') == 'ABC'\nassert solution('ABCDE') == 'ABC'\nassert solution('ABCDEF') == 'ABC'\nassert solution('ABCDEFG') == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"999\") == \"ABC\"\nassert solution(\"10\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC998\") == \"ABD\"\nassert solution(\"ABC997\") == \"ABD\"\nassert solution(\"ABC996\") == \"ABD\"\nassert solution(\"ABC995\") == \"ABD\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6\") == \"Yay!\"\nassert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\n    \"1\\n1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\n    \"1\\n1\\n2\\n3\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\n    \"1\\n1\\n1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\n    \"1\\n2\\n3\\n4\\n8\\n9\\n15\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n2\\n4\\n8\\n9\\n15\") == \":(\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\n2\n4\n8\n9\n15''') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n4\n8\n9\n15''') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"2\\n3\\n5\\n7\\n10\\n12\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n2\\n4\\n8\\n9\\n15\\n\") == \":(\\n\"\nassert solution(\"1\\n1\\n2\\n4\\n8\\n9\\n15\\n\") == \":(\\n\"\nassert solution(\"1\\n2\\n1\\n4\\n8\\n9\\n15\\n\") == \":(\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"1\\n2\\n4\\n8\\n9\\n15\\n\"\n) == 'Yay!'\nassert solution(\n    \"1\\n2\\n3\\n4\\n5\\n15\\n\"\n) == 'Yay!'\nassert solution(\n    \"1\\n2\\n3\\n4\\n5\\n6\\n15\\n\"\n) == ':(\\n'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pink') == 'pink'\nassert solution('pink', {'a': 3200}) =='red'\nassert solution('pink', {'a': 3201}) == 'pink'"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3200\") == \"pink\"\n\n'''"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3200, 'pink') == 'pink'\nassert solution(3200, 'pink') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"3201\") == \"red\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('pink') == 'pink'\nassert solution('pink') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pink\") == \"pink\"\n\"\"\"\n\na, s = map(str, input().split())"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3200, 'pink') == 'pink'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3200, \"pink\") == \"pink\"\nassert solution(3200, \"red\") == \"red\"\nassert solution(2800, \"blue\") == \"blue\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1200') == 'ABC'"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(12345) == \"ABC\"\nassert solution(9) == \"ABC\"\nassert solution(1234) == \"ABC\"\nassert solution(1234) == \"ABC\"\nassert solution(1234) == \"ABC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\"\n\nstdin = input()\nR = int(stdin)"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1199\") == \"ABC\"\nassert solution(\"2000\") == \"ARC\"\nassert solution(\"0\") == \"AGC\"\nassert solution(\"4208\") == \"AGC\"\n\"\"\"\n\na = input().strip()\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234') == 'ABC'\nassert solution('1203') == 'ARC'\nassert solution('2123') == 'AGC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(Takahashi_rating)) == 'ABC'\nassert solution('R') == 'R'\n\"\"\"\n\nR = int(input())\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"R\\n\") == \"ABC\"\nassert solution(\"1234\\n\") == \"ARC\"\nassert solution(\"R\\n\") == \"AGC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(101) == \"ABC\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"1239\") == \"9913\"\nassert solution(\"1079\") == \"1009\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(123) == 321\nassert solution(101) == 910\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('119') == '991'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('119') == '991'\nassert solution('111') == '1111'\nassert solution('999') == '1111'\nassert solution('777') == '9999'\nassert solution('333') == '99999'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(123) == 321\nassert solution(123) == 993\nassert solution(1) == 9\nassert solution(5) == 9\nassert solution(8) == 9\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"1\") == \"9\"\nassert solution(\"9\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '999'\nassert solution('9') == '1'\nassert solution('1') == '9'\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\") == \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\n\nassert solution(\"abbaac\") == \"abac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaac\") == \"abac\"\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom itertools import combinations"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        ans = \"\"\n        return ans\n\n    def exec(self) -> None:\n        print(self.solution(stdin))\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n4 5') == '0'\nassert solution('4 1\\n8 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"2\"\nassert solution(\"9 7\") == \"3\"\nassert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\nprint(\"Well done!\")\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 13\") == \"2\"\nassert solution(\"123 456\") == \"3\"\nassert solution(\"92 46\") == \"0\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == '2\\n5\\n4\\n333\\n0'\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4\\n13 9') == '2'\nassert solution('100 13\\n123 456') == '4'\nassert solution('92 46\\n') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('10 20') == '10'\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == '2\\n5\\n4\\n333\\n0'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('10 4') == '2'\n\nassert solution('13 9') == '5'\n\nassert solution('100 13') == '4'\n\nassert solution('123 456') == '333'"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nseq = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nn, k = map(int, input().split())\nlst = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == expected_result\n\"\"\"\n\nfrom functools import reduce\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nfrom math import *\n\n[n, k] = [int(i) for i in input().split()]\n[a] = [int(i) for i in input().split()]"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n-----\n\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\n------Hint---\nDo you need to use some basic math operations?\nTry to solve the problem by yourself and then use the Python cheat to check your solution.\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 3\n3 4 1 2''') == '2.666666666666667'\n'''\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\nfor i in range(t):\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = list(map(int, stdin.readline().strip().split()))\n    if solution(a) == 'YES':\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1') == 'YES'\nassert solution('4 2\\n4 1 2 3\\n1 2\\n4 1\\n4 3 2 1') == 'YES'\nassert solution('4 2\\n4 1 2 3\\n1 2\\n4 3 2 1') == 'NO'\nassert solution('4 1\\n4 3 2 1') == 'YES'\nassert solution('5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == \"YES\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"NO\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == \"YES\"\n\"\"\"\n\n\nfrom typing import List, Dict, Tuple, Set\nimport sys\n\n\nclass Positions:\n    def __init__(self, raw_positions: str) -> None:\n        self.positions: Set[int] = set(map(lambda p: int(p) - 1, raw_positions.split()))\n\n\nclass Numbers:\n    def __init__(self, raw_numbers: str) -> None:\n        self.numbers: List[int] = list(map(lambda n: int(n), raw_numbers.split()))\n\n    def swap_positions(self, i: int, j: int) -> None:\n        self.numbers[i], self.numbers[j] = self.numbers[j], self.numbers[i]\n\n\nclass Input:\n    def __init__(self, input_: str) -> None:\n        self.numbers: Numbers = Numbers(input_)\n        self.positions: Positions = Positions(input_)\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"NO\"\nassert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"NO\"\nassert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'YES\\nNO\\nYES\\nYES\\nNO\\nYES'\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('baabbb') == 'bab'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abba') == 'abba'\nassert solution('babba') == 'abba'\nassert solution('bab') == 'bab'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bab') == 'baabbb'\nassert solution('ooopppssss') == 'oops'\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"baabbb\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\nassert solution('oooooo') == 'oooooo'\nassert solution('xz') == 'xz'\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\nprint(solution(\"baabbb\"))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\nprint(solution(\"baabbb\"))\nprint(solution(\"ooopppssss\"))\nprint(solution(\"z\"))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"b\") == \"b\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6 4\n1 2 4\n1 3 2\n3 4 1\n3 2 3\n2 4 2\n2 5 1\n''') == '1'\nassert solution('''\n6 4\n1 2 3\n1 3 2\n3 4 1\n3 2 3\n2 4 2\n2 5 1\n''') == '1'\nassert solution('''\n5 6\n1 2 1\n2 3 2\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n''') == '2'\nassert solution('''\n6 3\n1 2 1\n2 3 2\n1 3 3\n''') == '0'\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 3\n''') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"4 3\n2 1 3\n4 3 4\n2 4 1\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"3 3\n1 2 1\n2 3 3\n1 3 3\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"1 0\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n\n\"\"\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '1'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n2 4 2\\n1 4 2\\n1 5 3') == '1'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'\nassert solution('1 0\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 3') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2 3\\n2 4 1\\n1 4 2\\n1 5 3\\n\") == \"2\"\nassert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '0'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"0\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\nclass Solution:\n    def __init__(self, input_lines):\n        self.n, self.m = map(int, input_lines[0].split())\n        self.edges = [\n            tuple(map(int, line.split()))\n            for line in input_lines[1:]\n        ]\n        self.vertices = set()\n        self.edges_by_endpoints = defaultdict(list)\n        for u, v, w in self.edges:\n            self.vertices.add(u)\n            self.vertices.add(v)\n            self.edges_by_endpoints[u].append((v, w))\n            self.edges_by_endpoints[v].append((u, w))\n\n    def solve(self):\n        min_heap = [(0, 0, 0)]\n        seen = set()\n        distances = defaultdict(lambda: float('inf'))\n        distances[0, 0] = 0\n        while min_heap:\n            dist, u, v = heappop(min_heap)\n            if (u, v) in seen:\n                continue\n            seen.add((u, v))\n            seen.add((v, u))\n            if u == self.n - 1:\n                return dist\n            for nei, nei_dist in self.edges_by_endpoints[u]:\n                alt = dist + nei_dist\n                if alt < distances[nei, v]:\n                    distances[nei, v] = alt\n                    heappush(min_heap, (alt, nei, v))\n        return -1"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"RRB\"\nassert solution(\"RGBGRBB\") == \"RRB\"\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRB\"\nassert solution(\"RB\") == \"GB\"\nassert solution(\"GB\") == \"GB\"\nassert solution(\"RG\") == \"GR\"\nassert solution(\"RR\") == \"RR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RGBGRBB') == 'GRB'\nassert solution('BB') == 'BB'\nassert solution('RR') == 'RR'\nassert solution('GB') == 'GB'\nassert solution('GBR') == 'GBR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RG\") == \"RR\"\nassert solution(\"R\") == \"R\"\nassert solution(\"RR\") == \"RR\"\nassert solution(\"RGG\") == \"R\"\n\nfrom itertools import product\nfrom typing import List, Iterator, Tuple, Dict, Set, Callable\nfrom functools import lru_cache\nfrom collections import defaultdict\nimport operator\nimport re"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == 'RGBRGBR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBRGBRG\") == \"GRB\"\n\nassert solution(\"GB\") == \"GB\"\n\nassert solution(\"R\") == \"R\"\n\nassert solution(\"GRBGRBG\") == \"GRBGRBG\"\n\nassert solution(\"RR\") == \"RR\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRB\") == \"RGBR\"\nassert solution(\"RGBGBR\") == \"GB\"\nassert solution(\"RGRBG\") == \"GRBG\"\nassert solution(\"RGBRR\") == \"R\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRB\"\nassert solution(\"R\") == \"G\"\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"Pass\")\n\n----\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\nassert solution('1000 JPY\\n0.1 BTC') == '38000.0'\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\nassert solution('''\n2\n1000000 JPY\n0.10000000 BTC\n''') == '48000.0'\nassert solution('''\n2\n1000000 JPY\n0.10000000 BTC\n''') == '48000.0'\nassert solution('''\n2\n0.10000000 BTC\n1000000 JPY\n''') == '48000.0'\nassert solution('''\n2\n0.10000000 BTC\n1000000 JPY\n''') == '48000.0'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\":10000 JPY:0.10000000 BTC\") == '48000.0'\nassert solution(\":0.10000000 BTC:10000 JPY\") == '48000.0'\nassert solution(\":1.0:0.10000000 BTC\") == '48000.1'\nassert solution(\":10000 JPY:1.0 BTC\") == '48000.1'\nassert solution(\":10000 JPY:0.10000000 BTC:0.10000000 BTC\") == '48000.2'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 JPY') == '1.0'\nassert solution('2 JPY') == '2.0'\nassert solution('1 BTC') == '3.8'\nassert solution('1.1 BTC') == '3.8'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\") == \"0\"\nprint(\"Passed!\")\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 JPY 2 JPY\\n0.1 BTC 3 BTC\\n\") == \"3.00000000\"\nassert solution(\"3 BTC 0.1 BTC\\n0.3 BTC 0.4 BTC\\n\") == \"0.050000\"\n\"\"\"\n\nn = int(input())\nx_list = []\nu_list = []\nfor i in range(n):\n    x, u = input().split()\n    x = float(x)\n    x_list.append(x)\n    u_list.append(u)"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n\nimport math\n\nn = int(input())\na = []\nfor _ in range(n):\n    a.append([int(x) if u == \"JPY\" else float(x) for x, u in zip(input().split(), (\"JPY\", \"BTC\"))])\n\nyen = 0\n\nfor i in range(n):\n    if u == \"JPY\":\n        yen += a[i][0]\n    else:\n        yen += a[i][0] * 380000.0\n\nprint(round(yen, 6))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == 48000.0\nassert solution(\"10000 JPY\\n0.10000000 BTC\\n\") == 48000.0\n\"\"\"\n\nimport math"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n') == '3'\nassert solution('5 3\\n') == '2'\nassert solution('5 5\\n') == '4'\nassert solution('6 5\\n') == '5'\nassert solution('8 4\\n') == '7'\n\nprint('All tests passed.')\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"3\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4 2\\n'\n) == '3'\n\n-----------------------------------\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n\n\"\"\"\nThe i-th car from the front of a N-car train is the (i - 1)th car from the back.\nIn other words, the car that has just left the train is the last one in the train.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\n''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\nabc\nbcd''') == 'abcbcd'\nassert solution('''4\nbcdef\nabcde''') == 'bcdefabcdebcde'\n'''\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(solution(\"ip cc\"))\n\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution(' ') ==''\nassert solution('a') == 'a'\nassert solution('a b') == 'a b'\nassert solution('a b c') == 'a b c'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\nip cc\"\n) == \"icpc\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n\nfrom unittest import TestCase"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ba'\nassert solution('aba') == 'baba'\nassert solution('abc') == 'bac'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('abc') == 'abcc'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('1011') == '1110'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5', '123456789') == '123456789'\nassert solution('5', '12345') == '123412345'\nassert solution('5', 'abcdef') == 'abcde12345'\nassert solution('5', 'lkjhgfdsa') == 'lkjhgf34a'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(\"Passed\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABB\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BAB') == 'Yes'\nassert solution('BAB') == 'Yes'\nassert solution('ABA') == 'Yes'\nassert solution('BABA') == 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"ABA\"\n) == \"Yes\"\nassert solution(\n\"BBA\"\n) == \"No\"\nassert solution(\n\"AAB\"\n) == \"No\"\nassert solution(\n\"BBB\"\n) == \"Yes\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\nassert solution(\"BBB\") == \"No\"\nassert solution(\"BAA\") == \"No\"\n\n------------------------------------------------------"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"BBB\") == \"Yes\"\nassert solution(\"AAA\") == \"Yes\"\nassert solution(\"BBB\") == \"Yes\"\nassert solution(\"AAA\") == \"Yes\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\nimport re\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRR') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRS') == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRS') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"RRS\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRS') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RRR') == '1'\nassert solution('RRS') == '2'\nassert solution('RBR') == '0'\nassert solution('RRG') == '1'\nassert solution('RRR') == '2'\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'RRS'\n) == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRR') == 3\nassert solution('RRS') == 2\nassert solution('RRSR') == 4\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRR') == '2'\nassert solution('SRR') == '2'\nassert solution('RRSR') == '3'\nassert solution('RRSRR') == '3'\nassert solution('RRSRSRR') == '2'\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RR\") == 1\nassert solution(\"RRR\") == 2\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 2 3''') == '''3 1 2'''\nassert solution('''5 4 1''') == '''4 5 1'''\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"4 5 6\") == \"6 5 4\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"10 20 30\") == \"30 10 20\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 3 1\") == \"1 3 2\"\nassert solution(\"3 2 1\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"7 4 6\\n9 8 1\"\nassert solution(\"6 2 9\\n1 4 7\\n3 8 5\") == \"3 6 8\\n7 4 1\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"4 5 6\") == \"6 5 4\"\nassert solution(\"9 8 7\") == \"7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 2 3\n4 5 6\n7 8 9\n''') == '7 4 1 8 9 6 3 2'\nassert solution('''1 2 3\n4 5 6\n7 8 9\n''') == '9 8 6 3 7 4 2 1'\nassert solution('''1 2 3\n4 5 6\n7 8 9\n''') == '9 8 6 3 7 4 2 1'\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('30 100') == '100'\n\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30 100\") == \"100\"\nprint(solution(\"30 100\"))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30 100\") == \"100\"\n\n'''\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"30 100\") == \"100\"\nassert solution(\"1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30 100\") == \"100\"\n\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n\nA, B = map(int, input().split())\nprint(max(0, A - 13) * B // 2 + (A - 13) * B % 2)\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\n\nprint((A + 1 if (A >= 6 and A <= 12) else A) * B // 2)\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\n\n------\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''30 100\n''') == '100'\n\nassert solution('''5 10\n''') == '10'\n\nassert solution('''10 30\n''') == '50'\n\nassert solution('''15 7\n''') == '7'\n\nassert solution('''13 2\n''') == '3'"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+-\") == \"2\"\n\n-----------------------------------"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+-') == 2\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('+-') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"2\"\n\n\"\"\"\n\nS = \"+-++\"\n\n\"\"\"\nThe easiest way to solve this is to just split the string, then sum up the resulting integers.\n\"\"\"\n\nsum_ = 0\nfor e in S:\n    if e == \"-\" or e == \"+\":\n        sum_ += -1 if e == \"-\" else 1\n\nprint(sum_)\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('+-++') == '2'\nassert solution('+--') == '0'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '+-++') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == '0'\nassert solution('+-++') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"++\") == \"1\"\nassert solution(\"+-++\") == \"1\"\nassert solution(\"+-\") == \"1\"\nassert solution(\"+-++\") == \"2\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n1\n\"\"\"\n\n\n\"\"\"\n2\n\"\"\"\n\n\"\"\"\n3\n\"\"\"\n\n\n\"\"\"\n4\n\"\"\"\n\n\n\"\"\"\n5\n\"\"\"\n\n\n\"\"\"\n6\n\"\"\"\n\n\n\"\"\"\n7\n\"\"\"\n\n\n\"\"\"\n8\n\"\"\"\n\n\n\"\"\"\n9\n\"\"\"\n\n\n\"\"\"\n10\n\"\"\"\n\n\n\"\"\"\n11\n\"\"\"\n\n\n\"\"\"\n12\n\"\"\"\n\n\n\"\"\"\n13\n\"\"\"\n\n\n\"\"\"\n14\n\"\"\"\n\n\n\"\"\"\n15\n\"\"\"\n\n\n\"\"\"\n16\n\"\"\"\n\n\n\"\"\"\n17\n\"\"\"\n\n\n\"\"\"\n18\n\"\"\"\n\n\n\"\"\"\n19\n\"\"\"\n\n\n\"\"\"\n20\n\"\"\"\n\n\"\"\"\n21\n\"\"\"\n\n\n\"\"\"\n22\n\"\"\"\n\n\n\"\"\"\n23\n\"\"\"\n\n\n\"\"\"\n24\n\"\"\"\n\n\n\"\"\"\n25\n\"\"\"\n\n\n\"\"\"\n26\n\"\"\"\n\n\n\"\"\"\n27\n\"\"\"\n\n\n\"\"\"\n28\n\"\"\"\n\n\n\"\"\"\n29\n\"\"\"\n\n\n\"\"\"\n30\n\"\"\"\n\n\n\"\"\"\n31\n\"\"\"\n\n\n\"\"\"\n32\n\"\"\"\n\n\n\"\"\"\n33\n\"\"\"\n\n\n\"\"\"\n34\n\"\"\"\n\n\n\"\"\"\n35\n\"\"\"\n\n\n\"\"\"\n36\n\"\"\"\n\n\n\"\"\"\n37\n\"\"\"\n\n\n\"\"\"\n38\n\"\"\"\n\n\n\"\"\"\n39\n\"\"\"\n\n\n\"\"\"\n40\n\"\"\"\n\n\n\"\"\"\n41\n\"\"\"\n\n\n\"\"\"\n42\n\"\"\"\n\n\n\"\"\"\n43\n\"\"\"\n\n\n\"\"\"\n44\n\"\"\"\n\n\n\"\"\"\n45\n\"\"\"\n\n\n\"\"\"\n46\n\"\"\"\n\n\n\"\"\"\n47\n\"\"\"\n\n\n\"\"\"\n48\n\"\"\"\n\n\n\"\"\"\n49\n\"\"\"\n\n\n\"\"\"\n50\n\"\"\"\n\n\n\"\"\"\n51\n\"\"\"\n\n\n\"\"\"\n52\n\"\"\"\n\n\n\"\"\"\n53\n\"\"\"\n\n\n\"\"\"\n54\n\"\"\"\n\n\n\"\"\"\n55\n\"\"\"\n\n\n\"\"\"\n56\n\"\"\"\n\n\n\"\"\"\n57\n\"\"\"\n\n\n\"\"\"\n58\n\"\"\"\n\n\n\"\"\"\n59\n\"\"\"\n\n\n\"\"\"\n60\n\"\"\"\n\n\n\"\"\"\n61\n\"\"\"\n\n\n\"\"\"\n62\n\"\"\"\n\n\n\"\"\"\n63\n\"\"\"\n\n\n\"\"\"\n64\n\"\"\"\n\n\n\"\"\"\n65\n\"\"\"\n\n\n\"\"\"\n66\n\"\"\"\n\n\n\"\"\"\n67\n\"\"\"\n\n\n\"\"\"\n68\n\"\"\"\n\n\n\"\"\"\n69\n\"\"\"\n\n\n\"\"\"\n70\n\"\"\"\n\n\n\"\"\"\n71\n\"\"\"\n\n\n\"\"\"\n72\n\"\"\"\n\n\n\"\"\"\n73\n\"\"\"\n\n\n\"\"\"\n74\n\"\"\"\n\n\n\"\"\"\n75\n\"\"\"\n\n\n\"\"\"\n76\n\"\"\"\n\n\n\"\"\"\n77\n\"\"\"\n\n\n\"\"\"\n78\n\"\"\"\n\n\n\"\"\"\n79\n\"\"\"\n\n\n\"\"\"\n80\n\"\"\"\n\n\n\"\"\"\n81\n\"\"\"\n\n\n\"\"\"\n82\n\"\"\"\n\n\n\"\"\"\n83\n\"\"\"\n\n\n\"\"\"\n84\n\"\"\"\n\n\n\"\"\"\n85\n\"\"\"\n\n\n\"\"\"\n86\n\"\"\"\n\n\n\"\"\"\n87\n\"\"\"\n\n\n\"\"\"\n88\n\"\"\"\n\n\n\"\"\"\n89\n\"\"\"\n\n\n\"\"\"\n90\n\"\"\"\n\n\n\"\"\"\n91\n\"\"\"\n\n\n\"\"\"\n92\n\"\"\"\n\n\n\"\"\"\n93\n\"\"\"\n\n\n\"\"\"\n94\n\"\"\"\n\n\n\"\"\"\n95\n\"\"\"\n\n\n\"\"\"\n96\n\"\"\"\n\n\n\"\"\"\n97\n\"\"\"\n\n\n\"\"\"\n98\n\"\"\"\n\n\n\"\"\"\n99\n\"\"\"\n\n\n\"\"\"\n100\n\"\"\"\n\n\"\"\"\n101\n\"\"\"\n\n\n\"\"\"\n102\n\"\"\"\n\n\n\"\"\"\n103\n\"\"\"\n\n\n\"\"\"\n104\n\"\"\"\n\n\n\"\"\"\n105\n\"\"\"\n\n\n\"\"\"\n106\n\"\"\"\n\n\n\"\"\"\n107\n\"\"\"\n\n\n\"\"\"\n108\n\"\"\"\n\n\n\"\"\"\n109\n\"\"\"\n\n\n\"\"\"\n110\n\"\"\"\n\n\n\"\"\"\n111\n\"\"\"\n\n\n\"\"\"\n112\n\"\"\"\n\n\n\"\"\"\n113\n\"\"\"\n\n\n\"\"\"\n114\n\"\"\"\n\n\n\"\"\"\n115\n\"\"\"\n\n\n\"\"\"\n116\n\"\"\"\n\n\n\"\"\"\n117\n\"\"\"\n\n\n\"\"\"\n118\n\"\"\"\n\n\n\"\"\"\n119\n\"\"\"\n\n\n\"\"\"\n120\n\"\"\"\n\n\n\"\"\"\n121\n\"\"\"\n\n\n\"\"\"\n122\n\"\"\"\n\n\n\"\"\"\n123\n\"\"\"\n\n\n\"\"\"\n124\n\"\"\"\n\n\n\"\"\"\n125\n\"\"\"\n\n\n\"\"\"\n126\n\"\"\"\n\n\n\"\"\"\n127\n\"\"\"\n\n\n\"\"\"\n128\n\"\"\"\n\n\n\"\"\"\n129\n\"\"\"\n\n\n\"\"\"\n130\n\"\"\"\n\n\n\"\"\"\n131\n\"\"\"\n\n\n\"\"\"\n132\n\"\"\"\n\n\n\"\"\"\n133\n\"\"\"\n\n\n\"\"\"\n134\n\"\"\"\n\n\n\"\"\"\n135\n\"\"\"\n\n\n\"\"\"\n136\n\"\"\"\n\n\n\"\"\"\n137\n\"\"\"\n\n\n\"\"\"\n138\n\"\"\"\n\n\n\"\"\"\n139\n\"\"\"\n\n\n\"\"\"\n140\n\"\"\"\n\n\n\"\"\"\n141\n\"\"\"\n\n\n\"\"\"\n142\n\"\"\"\n\n\n\"\"\"\n143\n\"\"\"\n\n\n\"\"\"\n144\n\"\"\"\n\n\n\"\"\"\n145\n\"\"\"\n\n\n\"\"\"\n146\n\"\"\"\n\n\n\"\"\"\n147\n\"\"\"\n\n\n\"\"\"\n148\n\"\"\"\n\n\n\"\"\"\n149\n\"\"\"\n\n\n\"\"\"\n150\n\"\"\"\n\n\n\"\"\"\n151\n\"\"\"\n\n\n\"\"\"\n152\n\"\"\"\n\n\n\"\"\"\n153\n\"\"\"\n\n\n\"\"\"\n154\n\"\"\"\n\n\n\"\"\"\n155\n\"\"\"\n\n\n\"\"\"\n156\n\"\"\"\n\n\n\"\"\"\n157\n\"\"\"\n\n\n\"\"\"\n158\n\"\"\"\n\n\n\"\"\"\n159\n\"\"\"\n\n\n\"\"\"\n160\n\"\"\"\n\n\n\"\"\"\n161\n\"\"\"\n\n\n\"\"\"\n162\n\"\"\"\n\n\n\"\"\"\n163\n\"\"\"\n\n\n\"\"\"\n164\n\"\"\"\n\n\n\"\"\"\n165\n\"\"\"\n\n\n\"\"\"\n166\n\"\"\"\n\n\n\"\"\"\n167\n\"\"\"\n\n\n\"\"\"\n168\n\"\"\"\n\n\n\"\"\"\n169\n\"\"\"\n\n\n\"\"\"\n170\n\"\"\"\n\n\n\"\"\"\n171\n\"\"\"\n\n\n\"\"\"\n172\n\"\"\"\n\n\n\"\"\"\n173\n\"\"\"\n\n\n\"\"\"\n174\n\"\"\"\n\n\n\"\"\"\n175\n\"\"\"\n\n\n\"\"\"\n176\n\"\"\"\n\n\n\"\"\"\n177\n\"\"\"\n\n\n\"\"\"\n178\n\"\"\"\n\n\n\"\"\"\n179\n\"\"\"\n\n\n\"\"\"\n180\n\"\"\"\n\n\n\"\"\"\n181\n\"\"\"\n\n\n\"\"\"\n182\n\"\"\"\n\n\n\"\"\"\n183\n\"\"\"\n\n\n\"\"\"\n184\n\"\"\"\n\n\n\"\"\"\n185\n\"\"\"\n\n\n\"\"\"\n186\n\"\"\"\n\n\n\"\"\"\n187\n\"\"\"\n\n\n\"\"\"\n188\n\"\"\"\n\n\n\"\"\"\n189\n\"\"\"\n\n\n\"\"\"\n190\n\"\"\"\n\n\n\"\"\"\n191\n\"\"\"\n\n\n\"\"\"\n192\n\"\"\"\n\n\n\"\"\"\n193\n\"\"\"\n\n\n\"\"\"\n194\n\"\"\"\n\n\n\"\"\"\n195\n\"\"\"\n\n\n\"\"\"\n196\n\"\"\"\n\n\n\"\"\"\n197\n\"\"\"\n\n\n\"\"\"\n198\n\"\"\"\n\n\n\"\"\"\n199\n\"\"\"\n\n\n\"\"\"\n200\n\"\"\"\n\n\"\"\"\n201\n\"\"\"\n\n\n\"\"\"\n202\n\"\"\"\n\n\n\"\"\"\n203\n\"\"\"\n\n\n\"\"\"\n204\n\"\"\"\n\n\n\"\"\"\n205\n\"\"\"\n\n\n\"\"\"\n206\n\"\"\"\n\n\n\"\"\"\n207\n\"\"\"\n\n\n\"\"\"\n208\n\"\"\"\n\n\n\"\"\"\n209\n\"\"\"\n\n\n\"\"\"\n210\n\"\"\"\n\n\n\"\"\"\n211\n\"\"\"\n\n\n\"\"\"\n212\n\"\"\"\n\n\n\"\"\"\n213\n\"\"\"\n\n\n\"\"\"\n214\n\"\"\"\n\n\n\"\"\"\n215\n\"\"\"\n\n\n\"\"\"\n216\n\"\"\"\n\n\n\"\"\"\n217\n\"\"\"\n\n\n\"\"\"\n218\n\"\"\"\n\n\n\"\"\"\n219\n\"\"\"\n\n\n\"\"\"\n220\n\"\"\"\n\n\n\"\"\"\n221\n\"\"\"\n\n\n\"\"\"\n222\n\"\"\"\n\n\n\"\"\"\n223\n\"\"\"\n\n\n\"\"\"\n224\n\"\"\"\n\n\n\"\"\"\n225\n\"\"\"\n\n\n\"\"\"\n226\n\"\"\"\n\n\n\"\"\"\n227\n\"\"\"\n\n\n\"\"\"\n228\n\"\"\"\n\n\n\"\"\"\n229\n\"\"\"\n\n\n\"\"\"\n230\n\"\"\"\n\n\n\"\"\"\n231\n\"\"\"\n\n\n\"\"\"\n232\n\"\"\"\n\n\n\"\"\"\n233\n\"\"\"\n\n\n\"\"\"\n234\n\"\"\"\n\n\n\"\"\"\n235\n\"\"\"\n\n\n\"\"\"\n236\n\"\"\"\n\n\n\"\"\"\n237\n\"\"\"\n\n\n\"\"\"\n238\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+-++\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\nassert solution(\"2019/01/01\") == \"TBD\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\nassert solution(\"2019/04/32\") == \"Heisei\"\nassert solution(\"2019/04/33\") == \"TBD\"\nassert solution(\"2019/04/34\") == \"Heisei\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/05/31') == 'TBD'\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/05/31\") == \"TBD\"\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/31') == 'TBD'\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n\n\"\"\"\n\n\"\"\"\nimport datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/01/01\") == \"TBD\"\nassert solution(\"2014/04/29\") == \"TBD\"\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/31') == 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/10/16\") == \"TBD\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/04/30\") == \"TBD\"\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\n\nassert solution('\\n'.join([\n    '2',\n    '1 1',\n])) == '2'\nassert solution('\\n'.join([\n    '6',\n    '6 6 6 3 6 1000000000 3 3 6 6',\n])) == '9'\nassert solution('\\n'.join([\n    '3',\n    '1337 1337 1337',\n])) == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == '9'\nassert solution(\"3\\n1337 1337 1337\") == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\n\"\"\"\n\nimport sys\nimport math\nimport heapq"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == 9\nassert solution('3\\n1337 1337 1337') == 3\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == '9'\nassert solution(\"3\\n1337 1337 1337\") == '3'\nprint(\"Well done!\")\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n1 1 1') == '12'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n1 1 1') == '12'\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\n\nassert solution('3\\n1337 1337 1337') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == 9\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\", \"1 2 3 4 5 6\") == \"2 6\"\nassert solution(\"7 2\", \"1 2 3 2 1 3 2\") == \"2 1\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2 3 2 1 3\") == \"2\\n2 1\"\nassert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 1\\n2 3 3 1 1 2 1 2 3 3\") == \"1\\n3 2\"\nassert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"1\\n2 3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\nassert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 2 1 3 2') == '2 1'\nassert solution('1 2 3 2 1 3 2 3') == '2 1 3'\nassert solution('1 2 3 2 1 3 2 3 4') == '2 1 3 2 4'\n\"\"\"\nimport sys\nimport os\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, stdin: List[str]):\n        self.stdin = stdin\n        self.n, self.k = list(map(int, stdin.pop(0).split()))\n        self.friends = {i: [] for i in range(1, self.n + 1)}\n        for line in stdin:\n            friend_id, message_id = map(int, line.split())\n            self.friends[friend_id].append(message_id)\n\n    def get_conversations(self) -> str:\n        conversations = []\n        conversations.extend(self.friends[i][:self.k] for i in range(1, self.n + 1))\n        for friend_id, message_ids in self.friends.items():\n            conversations.extend(message_ids[:self.k])\n        conversations.sort()\n        return''.join(map(str, conversations))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3 2') == '3 2'\nassert solution('10 4') == '3 2'\nassert solution('7 2') == '2 1'\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\nfrom collections import deque, OrderedDict\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 4\n2 4 8 2 4\n8\n5\n14\n10\"\"\") == \"\"\"\n1\n-1\n3\n2\n\"\"\"[1:]\n\nassert solution(\"\"\"\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n\"\"\") == \"\"\"\n1\n-1\n3\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n\"\"\") == \"\"\"\n1\n-1\n3\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n\"\"\") == \"\"\"\n1\n-1\n3\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n\"\"\") == \"\"\"\n1\n-1\n3\n2\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n1 1\\n3\\n5\") == \"1 -1 -1\\n1 -1 -1\\n3 1\\n2 2\\n1 -1 -1\"\n\"\"\"\n\n\nfrom sys import stdin, stdout\n\nn, q = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\nfor _ in range(q):\n    b = int(stdin.readline())\n    s = 0\n    for x in a:\n        s += 1 << x\n        if s >= b:\n            stdout.write(str(s - (1 << x)) + '\\n')\n            break\n    else:\n        stdout.write('-1' + '\\n')"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 2 4 8 2 4\\n8\\n14\\n10\\n') == '1 -1 3 2'\n\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 2\\n5\\n2\\n9\\n') == '2\\n1\\n0'\nassert solution('2 5 4\\n5\\n2\\n9\\n') == '1\\n0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1\\n2\\n4\\n8\\n8\\n1\") == '2 2 1 1'\n\"\"\"\n\n\nn, q = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\nx = [int(x) for x in input().split()]\n\ndp = [float('inf')] * n\n\nfor i in range(n):\n    for j in range(i):\n        if dp[j] > d[i]:\n            dp[i] = dp[j]\n    dp[i] += x[i]\n\nfor _ in range(q):\n    x = int(input())\n    print(dp[x - 1])\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n''') == '''\n1\n-1\n3\n2\n'''\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 2 4 3\\n4\\n2 3\\n1 3\\n2 4\\n2 3\\n4\") == \"1 -1 3 2\"\n\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 4 8 2 4\\n8\\n5\\n14\\n10\") == '1 -1 3 2'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1\\n1\\n1\\n1\\n1\\n\") == \"0\\n0\\n0\\n0\"\n\"\"\"\n\nn, q = map(int, input().split())\ncoins = list(map(int, input().split()))\n\nassert n == len(coins)\n\nqueries = []\nfor i in range(q):\n    queries.append(int(input()))\n\nprint('\\n'.join(map(str, [solution(i, j) for i, j in zip(coins, queries)])))"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_result"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('4 3') == 0\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9') == '0'\nassert solution('3 3\\n1 2 3\\n1 2 3') == '0'\nassert solution('3 3\\n1 2 3\\n1 2 3') == '0'\nassert solution('3 3\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n\") == \"0\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 6 6 6') == 2\nassert solution('3\\n8 10') == 2\nassert solution('4\\n1 1 1 1') == 0\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n'\nassert solution('3\\n2 8 10') == '2\\n2 2 1\\n'\nassert solution('4\\n1 1 1 1') == '0\\n'"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 3 4\") == \"2 2 1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"3 4 5 6\") == \"0\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"3 3 3 3\") == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\"\nassert solution(\"3\\n8 10\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\nprint(\"Success\")"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '0'\nassert solution('1 2 3 4 5 6') == '1'\nassert solutionnassert solution('2 8 10') == '2'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 1 2 3') == '2'\nassert solution('5\\n2 4 6 6 6') == '2'\nassert solution('6\\n8 10 10 10 10') == '2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nres = 0\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        a[i] = a[i] + abs(a[i] - 1)\n    else:\n        a[i] = a[i] - abs(a[i] - 1)\n\nprint(res)\nfor i in range(res):\n    print(1, end=' ')\n    print(i + 1, end=' ')\n    print(i + 2)\n\nprint(res)\nfor i in range(res):\n    print(2, end=' ')\n    print(i + 1, end=' ')\n    print(i + 2)"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"\nassert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 6 6 6\\n') == '2'\n\"\"\"\n\na = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nm = float('inf')\ncount = 0\n\nfor i in range(0, len(a) - 1):\n    if abs(a[i] - a[i+1]) == 1:\n        count += 1\n        m = min(m, 1)\n        continue\n    count += 1\n    if abs(a[i] - a[i+1]) > 1:\n        m = min(m, 2)\nprint(count)\nfor i in range(0, count):\n    if m == 1:\n        print('1', end='')\n        print(i + 1, end=' ')\n        print(i + 2, end=' ')\n        print(' ')\n    elif m == 2:\n        print('2', end='')\n        print(i + 1, end=' ')\n        print(i + 2, end=' ')\n        print(' ')\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"\nassert solution(\"4\\n1 1 1 1\") == \"0\\n\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(    '5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n'\nassert solution(    '3\\n2 8 10') == '2\\n2 2 1\\n'\nassert solution(    '4\\n1 1 1 1') == '0\\n'\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"11111111\") == 0\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100010') == 1\nassert solution('10101') == 2\nassert solution('01110') == 0\nassert solution('100011') == 1\nassert solution('111111') == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"111011\") == 0\nassert solution(\"1011110110110110111\") == 2\nassert solution
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100010') == 1\nassert solution('101010') == 2\nassert solution('1111110') == 0\nassert solution('10101010') == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10101010\") == 1\nassert solution(\"10010001\") == 1\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(TEST_CASES[0][0]) == TEST_CASES[0][1]\nassert solution(TEST_CASES[1][0]) == TEST_CASES[1][1]\nassert solution(TEST_CASES[2][0]) == TEST_CASES[2][1]\n\"\"\"\n\nfrom collections import defaultdict\n\nT = int(input())\nfor _ in range(T):\n    n, k = list(map(int, input().split()))\n    s = input()\n    h = defaultdict(lambda: [])\n    max_count = 0\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(i - k, i + k + 1):\n                if j!= i and j >= 0 and j < n and s[j] == '0':\n                    h[i].append(j)\n    \n    for v in h.values():\n        count = 0\n        for i in range(len(v)):\n            for j in range(i + 1, len(v)):\n                count += 1\n                if count > max_count:\n                    max_count = count\n    print(max_count)"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"00\") == 0\nassert solution(\"101\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10010001\") == 2\nassert solution(\"11101111\") == 3\nassert solution(\"11111111\") == 0\nassert solution(\"10100100\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100010') == 1\nassert solution('10100100') == 2\nassert solution('11111111') == 0\nassert solution('01111110') == 1\nassert solution('10000010') == 1\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\") == \"4\\n2\\n3\\n4\\n\"\nassert solution(\"5 1\\n1 1\\n3 3\\n1 1\\n1 1\\n2 3\\n1 1\\n1 1\") == \"3\\n1\\n4\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\\n\"\n\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\\n\"\n\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"\nprint('Passed')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n') == '3'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n') == '3'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n') == '4'\nassert solution('1 1\\n') == '0'\nassert solution('5 10\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n') == '5'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\nprint(solution(input()))\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\nassert solution(\"6 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\"\nassert solution(\"5 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\nassert solution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\n\nsolution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\nsolution(\"5 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\nsolution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\nsolution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\nsolution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\nsolution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\n\n\"\"\"\n\"\"\"\nSolution Explanation:\n\nWe want to remove a minimum number of segments so that there are no bad points.\nWe want to remove all segments intersecting each other.\n\nThe easiest way to do it is by making sure that all segments do not intersect each other.\nThis means we need to make sure that none of the segments have common endpoints.\n\nWe can accomplish this by building a segment tree.\nThe segment tree has the following properties:\n1. All of the leaves of the segment tree contain segments with no common endpoints.\n2. The segments with no common endpoints can be deleted in any order.\n3. No segment can be deleted unless its left and right endpoint are both in the segment tree.\n\nTo build the segment tree, we can:\n1. Insert all segments into the segment tree.\n2. Find all segments in the segment tree with no common endpoints and delete them.\n\nSince the number of segments is bounded by the number of integers, we can bound the segment tree size by the number of integers.\nWe can then run the above algorithm until no more segments can be deleted.\n\nSo the algorithm will run in O(N \\cdot logN) time and space.\n\nThe basic idea is to keep track of the minimum number of segments required to make every point good.\nThis number will always be equal to the number of segments required to remove all of the segments intersecting the point.\nSo when we insert the first point, we will add k segments to the segment tree.\n\nThe number of segments at a point will always equal the minimum number of segments required to make that point good.\nSo we can update the point's number of segments required to make it good by subtracting the number of segments intersecting that point.\n\"\"\"\n\n\n\n\"\"\"\nSolution Explanation:\n\n1. Sort the segments by their right endpoint.\n2. Insert the segments in the segment tree.\n3. Update the segments in the segment tree.\n4. Sort the segments by their left endpoint.\n5. Delete the segments in the segment tree.\n\nHere is an explanation of how we can do step 3:\n\nSince the segments are sorted by their right endpoint, we can check if a given segment is in the segment tree by looking at its right endpoint.\nIf it is in the segment tree, we can update its number of segments required to make it good by adding one to the number of segments it has intersecting it.\nThis is because the right endpoint is in the segment tree, so it intersects at least one other segment in the segment tree.\n\nFor step 5, we could sort the segments by their left endpoint.\nThis makes it easier to find the number of segments required to delete a segment.\nHowever, this is not optimal.\n\nLet's assume that we delete a segment.\nWe will also delete all segments with the same left endpoint as this segment.\nIf we sort the segments by their left endpoint, then we will delete all segments with the same left endpoint.\nThis means that we have deleted all segments with the same right endpoint as the segment we deleted.\nSo this segment and all segments with the same right endpoint will be deleted.\n\nIf we delete all segments with the same right endpoint as the segment we deleted, then we will end up with no segments in the segment tree.\nThis means that we can no longer remove points from the bad points list.\nSo, the number of segments required to remove all bad points is one greater than the minimum number of segments required to make a point good.\n\"\"\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\n\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\n\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\"\"\"\n\nfrom itertools import groupby\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n1\\n1') == '1'\nassert solution('2\\n2\\n2\\n1\\n1') == '1'\nassert solution('4\\n1\\n2\\n3\\n4') == '12'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == '30\\n31\\n10\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\") == 30\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\nassert solution(\"4\\n10 6 30 15\") == \"31\"\nassert solution(\"3\\n3 4 6\") == \"10\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\n\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5 6 15 30') == '30\\n31\\n10'\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5\\n4') == '5'\nassert solution('6\\n4') == '5'\nassert solution('15\\n6') == '5'\nassert solution('30\\n10') == '10'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\\n1\\n2\\n1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5\\n3 6') == '2'\nassert solution('2\\n5\\n3 6\\n4 9') == '1'\nassert solution('1\\n5\\n3 6') == '2'\nassert solution('1\\n5\\n3 6\\n4 9') == '1'\nassert solution('1\\n5\\n3 6\\n4 9\\n2 10 1 20') == '2'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == '2\\n1\\n2\\n1'\nassert solution(\"4\\n1\\n42\\n\") == '2'\nassert solution(\"2\\n1\\n2\\n1\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\n\n\n\n-----Hint-----\nThe naive solution is to try to create $n$ teams, and if there is a team that violates the constraint, return the current number of teams and remove this team. This can be done in O(n^2) time.\n\nBut maybe you don't want to use all the CPU power to solve the problem. To speed things up, you can try to be smart with the following ideas:\n\nDo not create all possible teams. For each team, you can try to split it. If the team is valid, do nothing and go to the next team.\nIf the team is invalid, you can try to remove one element from it to make it valid.\nRepeat step 2 for each team.\nRepeat step 1 for all teams.\nYou can find a hint in the lecture slides, but I believe it is impossible to solve the problem this way in O(n^2) time.\n\"\"\"\n\n\"\"\"\nThis approach works, but you can improve it in the following ways:\n\nTry not to create all possible teams. For each team, you can try to split it. If the team is valid, do nothing and go to the next team.\nIf the team is invalid, you can try to remove one element from it to make it valid.\nRepeat step 2 for each team.\nRepeat step 1 for all teams.\n\n1. Divide all students to groups according to the difference between their skills, such that no two students in the same group have the same skill (i.e. the difference between their skills must be strictly greater than 1).\n2. For each group of students, try to make it valid.\n\"\"\"\n\n\"\"\"\nTo find the number of teams, you have to try to divide the students into groups with the minimum possible number of teams.\n\nTo find the number of teams, you have to try to divide the students into groups with the minimum possible number of teams.\n\nThe following pseudo-code is the solution:\n\n1. Create groups for each student according to the difference between their skills.\n2. For each group, check whether it is valid.\n3. Repeat step 2 for all groups.\n\nThe algorithm is the following:\n\n1. Create groups for each student according to the difference between their skills.\n2. For each group, check whether it is valid.\n3. If the group is invalid, remove it from the list of groups.\n4. Repeat step 2 for all groups.\n\nYou can find a detailed explanation of the algorithm in the slides.\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n3\\n4\\n4\\n4\") == \"1\"\nassert solution(\"4\\n2 1 2 1\\n1\\n3 3\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == 2\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == 1\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == 2\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == 1\n\"\"\"\n\nfrom typing import List, Tuple\n\n\"\"\"\ndp[i][j] - minimal number of teams, for which i students have skill j\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('aa') == ''\nassert solution('aa bb cc dd ee') == 'a'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n'''\nfrom typing import List, Dict"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\n\n\n\n-----Problem-----\n\nPetya started to attend programming lessons. On the first lesson his task was to write a simple program. The program was supposed to do the following: in the given string, consisting if uppercase and lowercase Latin letters, it:\n\ndeletes all the vowels,\ninserts a character \".\" before each consonant,\nreplaces all uppercase consonants with corresponding lowercase ones.\nVowels are letters \"A\", \"O\", \"Y\", \"E\", \"U\", \"I\", and the rest are consonants. The program's input is exactly one string, it should return the output as a single string, resulting after the program's processing the initial string.\n\nHelp Petya cope with this easy task.\n\nInput\nThe first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.\n\nOutput\nPrint the resulting string. It is guaranteed that this string is not empty.\n\nExamples\ninput\n\nstring\n\noutput\n\nstring"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 1') == 'YES'\nassert solution('4 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'NO'\nassert solution('3 3 5 18') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES\\nNO\\nNO\\nYES'\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 5\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\nimport math"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 4\\n\") == \"YES\"\nassert solution(\"2 3 6\\n\") == \"NO\"\nassert solution(\"5 2 6 27\\n\") == \"NO\"\nassert solution(\"3 3 5 18\\n\") == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == 'YES'\nassert solution(\"1 2 3 6\") == 'NO'\nassert solution(\"5 2 6 27\") == 'NO'\nassert solution(\"3 3 5 18\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n\"\"\") == \"\"\"\nYES\nNO\nNO\nYES\n\"\"\"[1:]\n\nassert solution(\"\"\"\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n\"\"\") == \"\"\"\nYES\nYES\nNO\nYES\n\"\"\"[1:]\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"7 2 7 3 3 1 4\") == 'NO'\nassert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"7 2 7 3 3 1 4\") == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n5\\n5 4 3 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n5 5 3 1\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n5 5 3 1\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n0\\n\\n5 4 3 2 1\"\nassert solution(\"5 4 4 2 1\") == \"NO\"\nassert solution(\"0 4 3 2 1\") == \"YES\\n0\\n\\n5 4 3 2 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution(\"5 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 5 3 1'\nassert solution(\"5 0 1 5 3\") == 'NO'\nassert solution(\"5 2 3 4 1\") == 'YES\\n1\\n3\\n4\\n5 2 3 1'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\", 'Wrong result'\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n5\\n7 4 3 2 1\\n\", 'Wrong result'\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n5\\n7 4 3 2 1\\n\", 'Wrong result'\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n5\\n7 4 3 2 1\\n\", 'Wrong result'\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n5\\n7 4 3 2 1\\n\", 'Wrong result'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n2 1 2 1''') == 'YES\\n1\\n2\\n2\\n1\\n'''\nassert solution('''6\n4 4 6 3 5 2''') == 'YES\\n2\\n3\\n5\\n4\\n6\\n4\\n'''\nassert solution('''7\n7 2 7 3 3 1 4''') == 'YES\\n2\\n3\\n7\\n4\\n4\\n1\\n'''\nassert solution('''7\n7 2 7 3 3 1 4\n5\n2 2 5 3 3 5''') == 'YES\\n2\\n3\\n7\\n4\\n4\\n1\\n5\\n5\\n2\\n'''\n\n'''\n4\n2 1 2 1\n\n5\n4 3 2 1 0\n\n6\n4 4 6 3 5 2\n\n7\n7 2 7 3 3 1 4\n5\n2 2 5 3 3 5\n\n'''\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 3 4 1 2') == 'YES'\nassert solution('5 3 4 2 1') == 'YES'\nassert solution('5 1 4 3 2') == 'YES'\nassert solution('5 1 4 2 3') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 2 7 3 3 1 4\") == \"NO\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"5 0 4 3 2 1\") == \"NO\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\\n5 1 0\") == \"8\"\n\nassert solution(\"6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == \"8\"\n\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == \"8\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 1 2\") == '2'\nassert solution(\"8 2 1 1\") == '5'\nassert solution(\"5 3 1 1\") == '-1'\nassert solution(\"5 3 1 1\") == '-1'\nassert solution(\"4 1 1 1\") == '2'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == 1\nassert solution('1\\n') == 1\nassert solution('1\\n2\\n') == 2\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 0\\n') == '8'\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n') == '-1'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str([\n    '7 1 1',\n    '2 1 1',\n    '4 0 1',\n    '8 1 1',\n    '1 0 1',\n    '1 1 1',\n    '1 0 1',\n    '3 0 0',\n])) == '18'\n\nassert solution(str([\n    '3 0 0',\n    '2 1 0',\n    '3 1 0',\n    '5 0 1',\n    '3 0 1',\n])) == '8'\n\nassert solution(str([\n    '5 3',\n    '3 0 0',\n    '2 1 0',\n    '3 1 0',\n    '5 0 1',\n    '3 0 1',\n])) == '-1'\n\nassert solution(str([\n    '7 1 1',\n    '2 1 1',\n    '4 0 1',\n    '8 1 1',\n    '1 0 1',\n    '1 1 1',\n    '1 0 1',\n    '3 0 0',\n])) == '18'\n\nassert solution(str([\n    '5 2',\n    '6 0 0',\n    '9 0 0',\n    '1 0 1',\n    '2 1 1',\n    '5 1 0',\n    '3 0 1',\n])) == '8'"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"18\"\n\n\"\"\"\nimport re\nimport sys\nimport itertools\n\nsys.stdin = open(sys.stdin.read().strip())\nn, k = [int(x) for x in input().split()]\n\nbook = []\nfor i in range(n):\n    t, a, b = [int(x) for x in input().split()]\n    book.append((t, a, b))\n\nbook.sort(key=lambda x: (x[1], x[0]))\n\nans = [0] * k\nans_t = 0\nfor t, a, b in book:\n    ans_t += t\n    if a == 1:\n        ans[0] += 1\n    if b == 1:\n        ans[1] += 1\n    if a == 1 and b == 1:\n        ans[0] -= 1\n        ans[1] -= 1\n    if ans[0] == k and ans[1] == k:\n        ans_t = -1\n        break\n\nprint(ans_t)"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0''') == '8'\nassert solution('''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0''') == '18'\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1''') == '-1'\nassert solution('''8 3\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0''') == '8'\n\nprint(solution(input()))"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_str_1) == '18'\nassert solution(test_input_str_2) == '8'\nassert solution(test_input_str_3) == '-1'\n\"\"\"\n\nimport math\nimport itertools\nimport sys"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n------\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2'\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"3\\n5 1 2\\n4 2\\n3 5\\n2 2\\n5 2 5\") == \"-1\\n4\\n-1\\n3\"\nassert solution(\"2\\n6 2 9\\n3 4\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n1 5\\n5 2 5\\n1\\n1\\n5\") == \"2\\n1\\n2\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data) == test_result\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\n\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n-1\\n7\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\") == \"6\"\nassert solution(\"5 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"6\\n5 2\\n1 5\\n1 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n7\\n-1\\n7\"\nassert solution(\"7\\n5 3\\n1 5\\n1 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"7\\n7\\n-1\\n7\"\n\nassert solution(\"7\\n2 6\\n1 5\\n1 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n7\\n-1\\n7\"\nassert solution(\"7\\n3 6\\n1 5\\n1 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"7\\n7\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\n'''\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\"\nassert solution(\"7 2\\n1 1 2 3 4 5 6 7\\n2 2\\n1 4\\n3 3\\n5 2 5\") == \"3\"\nassert solution(\"6 2\\n1 1 2 3 4 5 6\\n2 2\\n1 4\\n3 3\\n5 2 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\n\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\n\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == 5\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == 0\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == 3\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 8 15 16 23') == '5'\nassert solution('12\\n4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\nassert solution('15\\n4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nm = int(n/6)\n\nmin_remove = n - m*6\n\nfor i in range(n):\n    if a[i] == 4 or a[i] == 8 or a[i] == 15 or a[i] == 16 or a[i] == 23 or a[i] == 42:\n        if a[i]!= a[i-1]:\n            min_remove -= 1\n        elif i!= 0:\n            min_remove += 1\n\nprint(min_remove)\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 15 16 23\\n') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42\\n') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42\\n') == '3'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5') == '0'\nassert solution('13 42') == '3'\nassert solution('18 4') == '2'\nassert solution('1337 420') == '92'\nassert solution('123456789 1000000000') == '87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == '0'\nassert solution(\"13 42\") == '3'\nassert solution(\"18 4\") == '2'\nassert solution(\"1337 420\") == '92'\nassert solution(\"123456789 1000000000\") == '87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"1337 420\\n123456789 1000000000\") == \"2\"\nassert solution(\"100500 9000\") == \"87654322\"\n\nprint('Success')\n\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    a, b = map(int, input().split())\n    print(b - a if a >= b else 10 - (a - b))\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"1337 420\\n18 4\") == \"2\\n2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\\n92\"\n\"\"\"\n\nimport sys\n\ntests = int(input())\n\nfor _ in range(tests):\n    a, b = map(int, input().split())\n    if a == b:\n        print(0)\n    elif a > b:\n        print(b // a)\n    else:\n        print(b // a - 1)\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"100 200\") == \"0\"\nassert solution(\"0 1\") == \"1\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\n\"\"\"\n\nimport sys\nimport os\nfrom collections import defaultdict\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n42 10') == '3'\nassert solution('18 4\\n1337 420') == '2'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('100500 9000') == '87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n42 100500') == '3'\nassert solution('123456789 1000\\n100500 9000') == '92'\nassert solution('100500 9001\\n123456789 1000') == '87654322'\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n42\") == \"3\"\nassert solution(\"18 4\\n1337 420\") == \"2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\nassert solution(\"100500 9000\") == \"87654322\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nassert solution(\"5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nassert solution(\"2 0 999999999\\n\") == \"999999998\"\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 12345\") == '12339'\n\"\"\"\n\nimport sys\nimport math\nimport re\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\n-----Problem-----\n\nYou are given a string $s$ of even length. Split this string into two halves of equal lengths, and let $a$ be the first half and $b$ be the second half.\n\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.\n\nReturn true if the two halves are alike. Otherwise, return false.\n\n-----Solution-----"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\"\"\"\nfrom typing import List, Any\nimport math\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\nassert solution('2\\n0 0 999999999') == '0'\nassert solution('1\\n0 999999999') == '999999995'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0\\n10\\n17\\n499999993\\n10\\n2\") == \"12339\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\") == 6\nassert solution(\"8 2\") == 8\nassert solution(\"7 3\") == 4\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\nassert solution(\"8 3\\n1 2 2 3 2 4 6 10\") == \"8\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"7 2\n1 2 2 3 2 4 10\"\"\") == \"6\"\nassert solution(\"\"\"8 2\n1 2 2 3 2 4 6 10\"\"\") == \"8\"\nassert solution(\"\"\"7 3\n1 2 2 3 2 4 5\"\"\") == \"4\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"7 2\\n1 2 2 3 2 4 10\"\n) == \"6\"\nassert solution(\n    \"8 2\\n1 2 2 3 2 4 6 10\"\n) == \"8\"\nassert solution(\n    \"7 3\\n1 2 2 3 2 4 5\"\n) == \"4\"\nassert solution(\n    \"6 2\\n1 2 2 3 2 4\"\n) == \"2\"\nassert solution(\n    \"6 2\\n2 1 2 3 2 4\"\n) == \"3\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n 1 2 2 3') == '4'\nassert solution('7 3\\n 1 2 2 3 2 4 5') == '4'\nassert solution('7 2\\n 1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n 1 2 2 3 2 4 6 10') == '8'\n\n\"\"\"\n\nfrom collections import Counter, deque\nfrom math import ceil"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3\\n1 2 2 3 2 4 5\\n') == '5'\nassert solution('8 2\\n1 2 2 3 2 4 6 10\\n') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5\\n') == '4'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'aBC'\nassert solution('ABK') == 'A'\nassert solution('ABB') == 'AB'\nassert solution('ABKBC') == 'ABC'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('DBC') == 'dbc'\nassert solution('AACC') == 'abbc'\nassert solution('BAAA') == 'baaa'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABABZ\") == \"ABZAB\"\nassert solution(\"KALAM\") == \"KALM\"\nassert solution(\"CABABA\") == \"CBABA\"\nassert solution(\"ABCDEF\") == \"ABCDEF\"\nassert solution(\"ABZAB\") == \"ABZAB\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"Hello World\") == \"hELLO wORLD\"\nassert solution(\"test string\") == \"tesT stRiNG\"\n\n---"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"ABCDEFG\") == \"abcdefg\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'abc'\n\n-----\nIncorrect Answer\nInput:\n3 1\nABC\n\nOutput:\naBC\n\nExpected:\nabc"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == 'aBC'\nassert solution('bcc') == 'bCC'\nassert solution('ABB') == 'aBB'\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nmoscow 20\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str_input) == str_expected\nprint(\"PASSED\")\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nprint(solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\"))"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nkabarovsk 20\\nmoscow 10\\nkazan 50\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"2\\nmoscow 10\\nkazan 50\") == \"2\\n4\\n1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n-----\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\nimport sys"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\n\"\"\"\n[\ud480\uc774 \ubc29\ubc95]\n- \uacb0\uad6d \ubc30\ud130\ub9ac\uc5d0 \ud3ec\ud568\ub418\ub294 \ubaa8\ub4e0 \uac12\uc740 1, 2, 5\uc758 \ubc30\uc218\uac00 \ub418\uace0 \uc815\ub2f5\uc744 \ucc3e\uae30 \uc704\ud574\uc11c\ub294 \uadf8 \uc774\ud558\uc758 \uc18c\uc218\uc758 \uac1c\uc218\ub97c \ucc3e\uc544\uc57c\ud568.\n- \uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ud3ec\ud568\ud558\ub294 \uc18c\uc218\ub85c\ubd80\ud130 \ucc28\ub840\ub85c \ucc3e\uc544\uc57c\ud558\ub294\ub370 \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud574\uc11c \ucc3e\uc740 \ub2e4\uc74c \ud070 \uc18c\uc218\ub85c \ub118\uc5b4\uac00\uc57c\ud568.\n- \uc774 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 \ubc30\ud130\ub9ac\uc5d0 \ud3ec\ud568\ub418\ub294 \ubaa8\ub4e0 \uac12\uc740 1, 2, 5\uc758 \ubc30\uc218\uac00 \ub418\uace0 \uc815\ub2f5\uc744 \ucc3e\uae30 \uc704\ud574\uc11c\ub294 \uadf8 \uc774\ud558\uc758 \uc18c\uc218\uc758 \uac1c\uc218\ub97c \ucc3e\uc544\uc57c\ud568.\n\"\"\"\n\nK, X = map(int, input().split(' '))\n\ns = set()\nfor i in range(K + 1, X):\n    if i % 2 == 0:\n        s.add(i)\n    if i % 5 == 0:\n        s.add(i)"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 900\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == 'Yes'\nassert solution(\"2 950\") == 'No'\nassert solution(\"2 951\") == 'No'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split())"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10') == 'No'\nassert solution('1 10') == 'Yes'\n\"\"\"\n\nK, X = input().split()\nK, X = int(K), int(X)\n\nsum = 0\nfor i in range(int(K)):\n    sum += 500"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('2 900') == 'Yes'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nassert solution(\"100 99\") == \"0.001267684932\"\nassert solution(\"1 10000\") == \"0.001267684932\"\nassert solution(\"10 1\") == \"1.0\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom math import factorial, sqrt\n\nN, K = [int(s) for s in input().split()]\n\np = (sqrt(5) - 1) / 2\n\ndp = defaultdict(int)\nfor i in range(N, 0, -1):\n    dp[i] = 0\n    for j in range(i, 0, -1):\n        dp[i] += (1/p) * dp[i-j]\n        if j <= K and K <= i:\n            dp[i] += (1/2) * dp[i-j]\n\nprint('%.9f' % (dp[1] + dp[N]))\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\nassert solution(\"4 5\") == '0.2679491924'\nassert solution(\"9 27\") == '0.39393939394'\nassert solution(\"1 10\") == '0.16666666667'\nassert solution(\"4 10\") == '0.2679491924'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\n\nfrom collections import defaultdict\nimport itertools"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0.5'\nassert solution('1 1') == '0'\nassert solution('2 1') == '1'\nassert solution('3 1') == '0'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('SAT') == '1'\nassert solution('SUN') == '0'\nassert solution('MON') == '0'\nassert solution('TUE') == '0'\nassert solution('WED') == '0'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 1\nassert solution(\"WED\") == 2\nassert solution(\"THU\") == 3\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"SUN\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 0\nassert solution('MON') == 0\nassert solution('TUE') == 1\nassert solution('WED') == 2\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('SAT') == '1'\nassert solution('SUN') == '0'\nassert solution('FRI') == '3'\nassert solution('MON') == '0'\nassert solution('WED') == '2'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('SUN') == 0\nassert solution('MON') == 1\nassert solution('TUE') == 2\nassert solution('WED') == 3\nassert solution('THU') == 4\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"SUN\") == 0\nassert solution(\"WED\") == 2\nassert solution(\"TUE\") == 1\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('SAT') == '1'\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(SUN) == '0'\nassert solution(SAT) == '1'\nassert solution(MON) == '2'\nassert solution(TUE) == '3'\nassert solution(WED) == '4'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"1 100 10\") == \"110\"\nassert solution(\"2 100 30\") == \"170\"\nassert solution(\"3 100 100\") == \"300\"\nassert solution(\"4 100 200\") == \"500\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"1 10 20\") == \"50\"\nassert solution(\"3 10 20\") == \"90\"\nassert solution(\"2 100 100\") == \"170\"\nassert solution(\"3 100 100\") == \"330\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n\nr, D, x = [int(i) for i in stdin.split()]\nprint(x)\n\nfor i in range(2001, 2011):\n    x *= r\n    x -= D\n    print(x)"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"5 4 10\") == \"90\"\nassert solution(\"2 4 30\") == \"170\"\nassert solution(\"1 10 100\") == \"330\"\nassert solution(\"3 4 60\") == \"650\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 1 1 4') == 5\nassert solution('5\\n1 3 2 1 4') == 4\nassert solution('3\\n4 1 2') == 0\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\n\"\"\"\n\nn = int(input())\nd = [int(i) for i in input().split()]"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\nassert solution(\"3\\n1 3 2\") == \"0\\n\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n4 1 2\") == \"0\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\n\"\"\"\n\nfrom typing import List\nimport math\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n3 2 3') == 'NO'\nassert solution('100 100 100\\n50 49 49') == 'YES'\nassert solution('10 30 20\\n1 1000000000 1000000000') == 'YES'\nassert solution('1 1000000000 1000000000\\n') == 'NO'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('100 100 100') == 'NO'\nassert solution('50 49 49') == 'NO'\nassert solution('10 30 20') == 'YES'\nassert solution('1 1000000000 1000000000') == 'NO'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n100 100 100\") == \"YES\\n3 2 1\"\nassert solution(\"100 100 100\\n50 49 49\") == \"NO\\nNO\"\nassert solution(\"10 30 20\\n1 1000000000 1000000000\") == \"YES\\n100 100 100\"\nassert solution(\"1 1000000000 1000000000\") == \"NO\\nNO\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"NO\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"5 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 3\\n100 100 100\") == \"YES\\n3 2 1\"\nassert solution(\"100 100 100\\n50 49 49\") == \"YES\\n3 2 1\"\nassert solution(\"10 30 20\\n1 1000000000 1000000000\") == \"NO\\nNO\"\nassert solution(\"1 1000000000 1000000000\\n\") == \"YES\\n1 1 1000000000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\n\"\"\"\nimport sys\n\nassert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"YES\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"NO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\") == \"4\"\n\"\"\"\nfrom collections import Counter\n\nn, m, k = map(int, stdin.readline().split())\nobjects = list(map(int, stdin.readline().split()))\n\ncounter = Counter(objects)\nboxes = sorted(counter.keys(), reverse=True)\n\ncur_box = boxes[0]\nwhile cur_box >= k:\n    cur_box = boxes[0]\n\nprint(sum(counter[cur_box] for cur_box in boxes) - 1)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\\n\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\\n\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\\n\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 4\\n2 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\nobjects = [int(x) for x in input().split()]\n\nbox_list = [[0] * (k + 1) for _ in range(m)]\n\nfor j in range(1, m + 1):\n    for i in range(k + 1):\n        if i >= objects[j - 1]:\n            box_list[j - 1][i] = max(box_list[j - 1][i], 1 + box_list[j - 1][i - objects[j - 1]])\n        else:\n            box_list[j - 1][i] = box_list[j - 1][i]\n\nprint(box_list[m - 1][k])"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 2, 6) == 4\n\nassert solution(5, 1, 4) == 1\n\nassert solution(5, 3, 3) == 5\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 6''') == '4'\nassert solution('''5 1 4''') == '1'\nassert solution('''5 3 3''') == '5'\nassert solution('''5 1 4''') == '1'\nassert solution('''5 3 3''') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"aaaaaaab\") == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 21\n\n\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaaaaaa\") == 0\nassert solution(\"aaaaaab\") == 1\nassert solution(\"abacaba\") == 12\n\nassert solution(\"aaaaaab\", \"a b\") == 1\nassert solution(\"aaaaaab\", \"b a\") == 1\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('sadfaasdda') == 21\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('sadfaasdda') == 21\nassert solution('aaaaa') == 6\nassert solution('a') == 1\n\n\n\"\"\"\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(100_000)\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.s, self.k = stdin.strip().split()\n        self.k = int(self.k)\n\n    def solve(self) -> str:\n        count = 0\n        for i in range(len(self.s)):\n            for j in range(i + 1, len(self.s) + 1):\n                for c in set(self.s[i:j]):\n                    if self.s[i:j].count(c) > self.k:\n                        break\n                else:\n                    count += 1\n        return count\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 -1 -2') == '2\\n-1'\nassert solution('4\\n-1 -2 -1 -3') == '-1\\n-3'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997\\n6'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\"\nprint(\"PASS\" if solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\" else \"FAIL\")\n\nassert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\"\nprint(\"PASS\" if solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\" else \"FAIL\")\n\nassert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\"\nprint(\"PASS\" if solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\" else \"FAIL\")\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n') == '2\\n-1\\n6\\n-2999999997'\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == '2\\n-1\\n6'\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == '2\\n-1\\n6'\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == '2\\n-1\\n6'\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == '2\\n-1\\n6'\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == '2\\n-1\\n6'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"4\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"4\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\n\"\"\"\n\nfrom typing import List, Callable\n\nimport pytest\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2\\n-1\\n6\\n-2999999997'"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\nassert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1'\nassert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2'\nassert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Graph(object):\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\nclass Solution(object):\n    def criticalEdges(self, n, edges):\n        critical = []\n        graph = Graph()\n        for edge in edges:\n            graph.addEdge(edge[0], edge[1])\n\n        parent = list(range(n))\n        rank = [0] * n\n        self.kruskal(graph.graph, edges, parent, rank, critical)\n        return critical\n\n    def kruskal(self, graph, edges, parent, rank, critical):\n        for edge in edges:\n            u = edge[0]\n            v = edge[1]\n            if self.union(parent, rank, u, v):\n                critical.append(edge)\n\n    def find(self, parent, x):\n        if parent[x] == x:\n            return x\n        return self.find(parent, parent[x])\n\n    def union(self, parent, rank, x, y):\n        x_root = self.find(parent, x)\n        y_root = self.find(parent, y)\n\n        if x_root == y_root:\n            return False\n\n        if rank[x_root] > rank[y_root]:\n            parent[y_root] = x_root\n        elif rank[x_root] < rank[y_root]:\n            parent[x_root] = y_root\n        else:\n            parent[y_root] = x_root\n            rank[x_root] += 1\n        return True\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 5\\n\" +\n    \"1 2\\n\" +\n    \"2 3\\n\" +\n    \"3 5\\n\" +\n    \"4 3\\n\" +\n    \"1 5\"\n) == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\n    \"4 6\\n\" +\n    \"1 2\\n\" +\n    \"1 3\\n\" +\n    \"1 4\\n\" +\n    \"2 3\\n\" +\n    \"2 4\\n\" +\n    \"3 4\"\n) == \"4 1\\n1 2\\n1 3\"\n\nassert solution(\n    \"8 9\\n\" +\n    \"1 2\\n\" +\n    \"2 3\\n\" +\n    \"2 5\\n\" +\n    \"1 6\\n\" +\n    \"3 4\\n\" +\n    \"6 5\\n\" +\n    \"4 5\\n\" +\n    \"2 7\\n\" +\n    \"5 8\"\n) == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n\") == \"3 2\\n2 1\\n3 4\\n\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 2\\n2 3\\n2 4\\n3 4\\n1 5\") == \"3 2\\n2 1\\n3 2\\n3 4\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"1 3\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"2 1\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\"\nprint('\"Run\" is good. How is \"Check\"?')"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '4 1\\n1 2\\n1 3'\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 2\\n2 1\\n3 4\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n2 3\\n3 2\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('01') == '0'\nassert solution('0123') == '4'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '4'\nassert solution('1\\n2\\n3\\n4') == '2'\n\"\"\"\n\nfrom collections import deque\nfrom itertools import product\nfrom math import ceil\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('6\\n1') == '4'\nassert solution('5\\n29') == '6'\nassert solution('7\\n134') == '5'\nassert solution('7\\n5555') == '12'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n499993') == '40'\nassert solution('5\\n499993\\n7') == '41664916690999888'\nassert solution('5\\n499993\\n7\\n8') == '41664916690999888'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == '6'\nassert solution('2\\n1\\n2') == '0'\nassert solution('1\\n3\\n4\\n5') == '9'\nassert solution('1\\n3\\n4\\n5\\n6') == '12'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n5') == '2'\nassert solution('3\\n3') == '0'\nassert solution('4\\n7') == '4'\n\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"40\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n499993') == '166909888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == result\n\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == d\na, d = map(int, stdin.split())\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4\\n') == '1 1 1 2 -1 1 1 3 1 1'"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data_1) == test_result_1\nassert solution(test_data_2) == test_result_2\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"10\n4 5 7 6 7 5 4 4 6 4\"\"\") == \"\"\"1 1 1 2 -1 1 1 3 1 1\"\"\"\n\nassert solution(\"\"\"3\n2 1 2\"\"\") == \"\"\"0 0 1 2\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4\\n7\\n6\\n7\\n5\\n4\\n4\\n6\\n4\\n\") == \"1\\n1\\n1\\n2\\n-1\\n1\\n1\\n3\\n1\\n\"\n\"\"\"\n\n\"\"\"\n10 \n4 5 7 6 7 5 4 4 6 4\n\n1 1 1 2 -1 1 1 3 1 1\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == ans\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345\\n') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint('Test passed')\n\n\"\"\"\n\nimport sys\nfrom itertools import product"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nimport math"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8'\nassert solution('54\\n5\\n3\\n1\\n2\\n4\\n6') == 'NO\\nNO'\n\n\"\"\"\n\n\"\"\"\nThinking\n\n1.\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"\nassert solution(\"97 32 2 12345\") == \"NO\"\nassert solution(\"64 32 97\") == \"NO\"\nassert solution(\"2 32 97\") == \"YES 2 4 8\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('64 32 97 2 12345') == 'YES\\n2 4 8'\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345\\n') == \"YES\\n2 4 8\"\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('64 32 97 2 12345') == 'YES 2 4 8'\nassert solution('2 3') == 'YES 2 3'\nassert solution('123') == 'NO'\nassert solution('32') == 'NO'\nassert solution('32 32') == 'NO'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"a\") == 1\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\nbbbb''') == '2', 'error'\nassert solution('''2\naa''') == '1', 'error'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbab\") == 2\nassert solution(\"abba\") == 0\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"ba\") == 1\nassert solution(\"bbbb\") == 2\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaaa\") == 1\nassert solution(\"ba\") == 1\nassert solution(\"a\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('a') == 1\n\nassert solution('abba') == 2\nassert solution('ababab') == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 1\n\n\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abba') == '2'\nassert solution('ababab') == '0'\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == 2, \"First\"\nassert solution(\"ababab\") == 0, \"First\"\nassert solution(\"aaaa\") == 0, \"First\"\nassert solution(\"baabbaaa\") == 2, \"Second\"\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''8\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n''') == '15'\n\nassert solution(\n'''5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == '9'\n\n\"\"\"\n\nn = int(input())\n\np = []\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    p.append((x, y))"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\nassert solution('5 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"1\\n0\\n0\\n0\\n0\\n\") == \"0\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 0\\n2 0\\n3 2\\n0 3\\n1 1\") == \"9\"\nassert solution(\"8 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\n\"\"\"\n\nfrom collections import Counter, deque"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 4\\n2 1\\n2 3\") == \"5\"\nassert solution(\"8\\n1 2\\n3 4\\n5 6\\n7 8\\n3 3\\n6 5\\n9 7\") == \"14\"\nassert solution(\"1\\n2\") == \"2\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n2\") == \"2\"\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\") == \"2\"\n\nprint(\"Passed all tests!\")\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1') == '2'\nprint(solution(input()))"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1') == '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('4') == '1.000000000000'\nassert solution('2') == '2.000000000000'\nassert solution('5') == '6.000000000000'\nassert solution('6') == '10.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\nimport sys\nfrom collections import Counter\nfrom math import sqrt\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 1.0\nassert solution('5') == 2.0\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"2\") == \"0.50000000000\"\nassert solution(\"1\") == \"1.0\"\n\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('0') == '0.000000000000'\nassert solution('-1') == '0.000000000000'\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('100') == '1.000000000'\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1.0'\nassert solution('1.2') == '1.2'\nassert solution('1.2 3.3 4.4') == '3.3'\nassert solution('1.2 3.3 4.4 5.5') == '4.4'\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '1.0'\nassert solution('12') == '1.0'\nassert solution('123') == '0.0'\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\nassert solution(\"A\") == \"A+B\"\nassert solution(\"B\") == \"A+B\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Hello World'\n\n-----Test 1-----\nassert solution('2') == '3'\n\nprint(solution('1'))\nprint(solution('2'))\n\n\"\"\"\n\nn = input()\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\nA = int(stdin())\nprint(A + 1)\n\nassert solution(\"2\") == \"5\"\n\nA, B = [int(c) for c in stdin().split()]\nprint(A+B)\n\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == \"Hello World\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Hello World'\nassert solution('1') == 'Hello World'\nassert solution('2') == '1+1'\n\n-----\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '5'\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(1)) == \"Hello World\"\nassert solution(str(2)) == \"3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3333'\nassert solution('6 2') == '66'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 3\"\n) == \"3333\"\nassert solution(\n    \"4 4\"\n) == \"4444\"\nassert solution(\n    \"1 2\"\n) == \"12\"\nassert solution(\n    \"9 9\"\n) == \"99\"\nassert solution(\n    \"3 3\"\n) == \"33\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"1 9\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3333'\nassert solution('1 1') == '11'\nassert solution('0 0') == '00'\nassert solution('1 9') == '999'\nassert solution('7 4') == '7777'\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3333'"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3333'\n\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"z\") == \"a\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'b'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"z\") == \"a\"\nassert solution(\"c\") == \"d\"\nassert solution(\"f\") == \"g\"\nassert solution(\"z\") == \"a\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'b'\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nIn this problem, we will find the next character in the alphabet for a given character.\nThe solution is as follows:\n\nWe define a function called alphabeticalOrder that has a single parameter called character. \nThe function returns the character that comes after the given character in the alphabet. \nThe order of characters in the alphabet is a, b, c,..., z.\n\nThe function alphabeticalOrder has the following implementation:\n\nalphabeticalOrder(char) {\n    if (char == 'z') {\n        return 'a'\n    } else {\n        return alphabeticalOrder(char + 1)\n    }\n}\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\n\nassert solution('z') == 'A'\n\nprint(solution('a'))\nprint(solution('z'))\n\n-----How to generate test cases-----\na) generate test case for each test\nb) generate an input that will satisfy the constraints\n\n-----Explanation-----\na)\n\n-----Input-----\nb)\n\n-----Output-----\na)\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"z\") == \" \"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'b'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'b'\nassert solution('b') == 'c'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oder atc\") == \"atcoder\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\n\"\"\"\n\nimport sys\nimport os\n\nS = input()\nT = input()\n\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"order\",\"atc\") == \"atcoder\"\n'''\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oder\", \"atc\") == \"atcoder\"\nprint(solution(\"qwerty\", \"qwerty\"))\n\n\"\"\"\n\ns = input()\nt = input()\nprint(t+s)"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('oder atc') == 'atcoder'\n\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oder\", \"atc\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\n'''"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oder atc') == 'atcoder'\nprint(solution('oder atc'))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"6 5 4 1 2 3\\n\") == \"1\"\nassert solution(\"2\\n1 2\\n\") == \"0\"\nassert solution(\"7\\n7 7 7 7 7 7\\n\") == \"0\"\nassert solution(\"1\\n0\\n\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 5 1 2 4 6 3') == '0'\nassert solution('2 1000000 1000000') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\nassert solution('3\\n1000 1000 1000 1000') == '0'\nassert solution('4\\n10000 1000 1000 1000') == '0'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\n\"\"\"\n\nstdin = \"\"\"5\n1 5 7 8 2\"\"\"\n\nn = int(stdin.split(\"\\n\")[0])\na = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n\neven = 0\nodd = 0\n\nfor i in a:\n    if i % 2 == 0:\n        even += i\n    else:\n        odd += i"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 1 2 4 6 3\") == \"0\"\nassert solution(\"3\\n1 2 3 4 5\") == \"0\"\nassert solution(\"4\\n2 2 2 2 2\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 4 1 2 3\") == \"0\"\nassert solution(\"1 1000000000\") == \"10000000\"\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline().strip())\narr = [int(x) for x in stdin.readline().strip().split()]\n\ntotal_sum = 0\n\nfor i in range(n):\n    total_sum += arr[i]"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 4 6 3\") == 0\nassert solution(\"1 5 7 8 2\") == 0\n\"\"\"\n\nfrom typing import List, Any"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\nassert solution('3\\n1 2 3') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 5 1 2 4 6 3') == '0'\nassert solution('2 1 1000000000 1000000000') == '10000000'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3 3\\n1 3 5 4 2 7 6\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2 2\\n10 20 30 40') == '1'\nassert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 1\\n1 3 5 4 2 7 6') == '6'\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\"\n\nfrom itertools import combinations\n\nn, a, b, k = [int(x) for x in input().split()]\nh = [int(x) for x in input().split()]\n\ncombinations = list(combinations(h, n))\n\ncombinations.sort(key=lambda x: len(x))\n\ncount = 0\nfor comb in combinations:\n    hp_l = []\n    for num in comb:\n        hp_l.append(num)\n    a_hp = 0\n    b_hp = 0\n    i = 1\n    while i < len(hp_l):\n        a_hp += hp_l[i]\n        b_hp += hp_l[i]\n        if a_hp < b_hp:\n            break\n        i += 1\n    a_hp = a_hp * i\n    if a_hp > b_hp:\n        count += 1\n    if k >= i:\n        k -= i\n    else:\n        k -= 1\n        if k >= 1:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 3 3\") == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\nassert solution(\"1 1 100 99\\n100\\n\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 100 99\\n100\") == \"1\"\n\n\"\"\"\n\nfrom typing import List\nimport math\nimport copy"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 3 3\") == \"5\"\nassert solution(\"7 10 50 12 1 8\") == \"1\"\nassert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"7 4 2 1\") == \"6\"\nassert solution
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == '0\\n0 1 2 3'\nassert solution(\"6 3\\n3 2 0 6 10 12\") == '3\\n3 2 0 7 10 14'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 2 0 1 4') == '3'\nassert solution('4 3\\n0 1 2 3') == '0'\nassert solution('1 3\\n0 0') == '0'\nassert solution('5 2\\n5 1 4') == '1'\nassert solution('2 1\\n4 0') == '0'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n0 1 2 3\\n') == '0\\n0 1 2 3\\n'\nassert solution('4 2\\n4 0 3 5\\n') == '1\\n4 0 2 6\\n'\nassert solution('5 4\\n0 3 1 2 4\\n') == '0\\n0 2 1 3 5\\n'\nassert solution('5 5\\n0 1 2 3 4 5\\n') == '0\\n0 1 2 3 4 5\\n'\nassert solution('6 6\\n0 1 2 3 4 5 6\\n') == '0\\n0 1 2 3 4 5 6\\n'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"3 10\") == \"0 1 2 3\"\nassert solution(\"5 10\") == \"0 1 2 3 4 5\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print(solution(str(input()))))\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"8 7\\n1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"6 5\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"4 4\\n1 2 3 4\") == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3\\n3 2 0 6 10 12') == '3'\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"10 2\\n1 3 4\") == \"3\"\nassert solution(\"10 3\\n3 4 5\") == \"2\"\n\nprint(\"Success\")"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == 20\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1 3 2\") == \"20\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == 20\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n\"\"\") == \"20\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO\\nYES\\nNO\\nYES\\nYES'\nprint('Hooray!')\n\n\"\"\"\n\nn = int(input())\nfor i in range(n):\n    q = int(input())\n    a = list(map(int, input().split()))\n    if len(a) == 4 * n:\n        if sum(a) % 4 == 0 and sum(a) // 4 == max(a) and sum(a) // 4 == min(a):\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n1 1 1 1\\n2\\n3 4') == 'YES'\nassert solution('4 2\\n1 1 1 1\\n2\\n3 4') == 'NO'\nassert solution('4 3\\n1 1 1 1\\n2\\n3 4') == 'NO'\n\"\"\"\n\na, b, c, d, e, f, g = map(int, input().split())"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 1 10 5 1 1 1\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 10 10\") == 'YES'\nassert solution(\"2\") == 'NO'\nassert solution(\"1 1 1 1 1 1 1 1\") == 'YES'\nassert solution
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\\nYES\\nNO\\nYES\"\nassert solution(\"4\\n1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\\nNO\"\nassert solution(\"2\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"3\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n10000 10000 10000 10000\") == \"NO\"\nassert solution(\"3\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n''') == '3'\n\"\"\"\n\"\"\"\n\n\nfrom collections import deque, Counter\n\nn, m, k = (int(n) for n in stdin.readline().split())\nadj = {n: {} for n in range(1, n+1)}\nfor _ in range(m):\n    a, b, c = (int(n) for n in stdin.readline().split())\n    adj[a][b] = c"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 20\\n1 3 1\\n2 3 3\\n3 2 1\") == \"4\"\nassert solution(\"6 9 21\\n4 5 2\\n5 3 4\\n6 1 2\\n5 6 10\\n1 6 5\\n7 2 5\\n6 7 7\\n3 6 2\\n2 6 2\\n2 3 9\\n3 1 8\\n6 4 8\\n3 7 2\\n6 1 4\\n7 5 6\\n6 7 1\\n5 2 2\\n7 4 10\\n6 1 3\\n5 6 7\\n1 5 1\\n2 1 2\\n4 1 8\\n5 2 1\\n3 1 1\\n2 5 10\\n4 3 2\\n6 2 6\\n6 4 9\\n5 6 8\\n1 5 2\\n2 5 1\\n3 2 8\\n3 6 6\\n5 4 2\\n5 1 3\\n1 2 4\") == \"6\"\nassert solution(\"6 10 21\\n4 5 2\\n5 3 4\\n6 1 2\\n5 6 10\\n1 6 5\\n7 2 5\\n6 7 7\\n3 6 2\\n2 6 2\\n2 3 9\\n3 1 8\\n6 4 8\\n3 7 2\\n6 1 4\\n7 5 6\\n6 7 1\\n5 2 2\\n7 4 10\\n6 1 3\\n5 6 7\\n1 5 1\\n2 1 2\\n4 1 8\\n5 2 1\\n3 1 1\\n2 5 10\\n4 3 2\\n6 2 6\\n6 4 9\\n5 6 8\\n1 5 2\\n2 5 1\\n3 2 8\\n3 6 6\\n5 4 2\\n5 1 3\\n1 2 4\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 4\\n1 2 2\\n2 3 1') == '2'\nassert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\"\"\") == \"3\"\nassert solution(\"\"\"7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\"\"\") == \"9\"\nassert solution(\"\"\"6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\"\"\") == \"3\"\nassert solution(\"\"\"7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\"\"\") == \"9\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\"\"\"\n\nfrom math import inf\nfrom sys import stdin"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\n\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\nassert solution(\"9 3 1\\n8 3 6\\n2 3 4\\n5 3 7\\n3 7 6\\n2 8 3\\n2 8 1\\n5 1 6\\n1 1 1\\n5 6 6\\n5 7 3\\n4 1 7\\n6 1 5\") == \"4\"\n\nassert solution(\"9 3 1\\n8 3 6\\n2 3 4\\n5 3 7\\n3 7 6\\n2 8 3\\n2 8 1\\n5 1 6\\n1 1 1\\n5 6 6\\n5 7 3\\n4 1 7\\n6 1 5\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 3\\n1 2 1\\n1 3 2\\n3 4 4\\n2 4 4') == '4'\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n''') == '3'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 6\\n2 3 4\\n3 4 4\\n4 3 5\") == \"7\"\nassert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\"\"\"\n\n\nimport sys\nimport heapq"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == '3 1\\n1 1 1 1 1'\nassert solution(\"6\\n1 2 5 129 185 581 1041 1909 1580 8150\") == '7486 3\\n3 3 3 2 2 2 2 1 1 1'"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1 1\"\nassert solution(\"6\\n1 2 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\"\"\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\nprint(solution(input()))"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\n\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\n\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n5009') == '2\\n5000 9'\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"2000\\n50\\n100\\n2000\") == \"2\\n1\\n2\\n3\"\nassert solution(\"9079\\n1\\n9079\") == \"1\\n1\\n1\\n1\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n0\") == \"2\\n7\\n9\\n15\\n17\\n21\\n25\\n26\\n33\\n34\\n44\"\n\"\"\"\n\n\"\"\"\nSolution 1:\n\nTime: O(n)\nSpace: O(n)\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1\\n2\\n3\\n9\\n10\\n5') == '2\\n1\\n1\\n1\\n5\\n7\\n2'\nassert solution('1\\n1\\n9\\n9\\n10\\n1\\n3\\n7\\n10\\n4\\n6') == '2\\n1\\n2\\n4\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n2'\nassert solution('2\\n1\\n2\\n3\\n9\\n10\\n5') == '2\\n1\\n1\\n1\\n5\\n7\\n2'\nassert solution('3\\n1\\n2\\n3\\n9\\n10\\n5') == '2\\n1\\n2\\n3\\n5\\n7\\n2'\nassert solution('1\\n1\\n9\\n9\\n10\\n1\\n3\\n7\\n10\\n4\\n6') == '2\\n1\\n2\\n4\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n2'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5009\") == \"2 5000 9\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n9\") == \"1\\n1\"\nassert solution(\"5\\n9\") == \"1\\n1\"\nassert solution(\"5\\n99\") == \"1\\n1\"\nassert solution(\"5\\n1111\") == \"1\\n1\"\nassert solution(\"5\\n9876\") == \"1\\n2\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n5009\\n7\\n9876\\n10000\\n10\\n') == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n'"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\\n\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\n\"\"\"\nfrom math import floor"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4\\n5\\n9\") == \"2\\n1\\n1\"\nassert solution(\"11\\n12\\n13\") == \"3\\n3\"\nassert solution(\"10\\n10\\n10\") == \"1\\n2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1\\n2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\") == \"2\\n1\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5\\n5\\n5\\n5\") == \"3\"\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA positive (strictly greater than zero) integer n.\n\n[output] string\n\nA positive integer k \u2014 the minimum number of summands. Next, k terms must follow, each of which is a round number, and their sum is n. The terms can be printed in any order. If there are several answers, print any of them.\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 6\\n3 1 4\\n2 3 6\\n3 4 5\\n4 5 3\\n2 1 5\") == \"4 4 4 1 4\"\nassert solution(\"7 3 2\\n4 7 5\\n2 3 4\\n6 7 1\\n1 2 6\\n3 4 7\\n4 6 3\\n6 7 2\\n3 4 2\\n5 7 2\\n3 1 2\\n4 6 1\\n7 3 6\") == \"1 2 2 2 2\"\nassert solution(\"10 7 8\\n7 8 10\\n5 3 9\\n8 3 7\\n6 9 3\\n7 8 10\\n8 9 7\\n2 1 8\\n2 2 8\\n7 6 2\\n5 9 6\\n7 1 8\\n6 1 7\") == \"2 1 1 1 1 1 1 1 1 1\"\nassert solution(\"6 5 4\\n2 5 1\\n1 4 2\\n3 4 1\\n5 1 3\\n4 2 5\\n3 6 4\") == \"2 2 2 1 1 1 1\"\nassert solution(\"4 4 4\\n1 1 2\\n2 1 3\\n3 1 1\\n3 2 4\\n3 2 4\\n2 1 1\\n1 2 3\\n3 3 2\") == \"3 3 3 2 2 2 2 1 1\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n'\n\n\n-----Solution-----\n\n\"\"\"\n\n############################################\n\"\"\"\nSolution:\n\n* Initialize a variable `first` to `n`.\n* Initialize a counter `count` to 0.\n* For each query:\n    * Initialize `last` and `next` to the initial values.\n    * For each `i` from `1` to `n`:\n        * If `last` equals `p_i`, then set `last` equal to `p_i`.\n        * Set `next` equal to the initial value of `last`.\n        * Increment `count` by `1`.\n        * If `next` equals `i`, then set `first` equal to `i`.\n    * Print `count` on a new line.\n    * Set `last` equal to the initial value of `next`.\n* Print `-1` on a new line.\n\n\"\"\"\n\n############################################\n\nfrom typing import List\n\nn = int(input())\nm = int(input())\nbook_owners = [int(i) for i in input().split()]\n\ncount = 0\nfirst, last = n, book_owners[0]\n\nfor _ in range(m):\n    if last == book_owners[0]:\n        last = book_owners[book_owners[0] - 1]\n        book_owners[book_owners[0] - 1] = book_owners[0]\n        book_owners[0] = last\n    else:\n        count += 1\n        first = book_owners[0]\n        last = book_owners[book_owners[0] - 1]\nprint(count)\nprint(-1)\n\n\n############################################\n\nfrom typing import List\n\nn = int(input())\nm = int(input())\np = [int(i) for i in input().split()]\n\np.sort()\n\nprint(*[p.index(i) + 1 for i in range(1, n + 1)])\nprint(-1)\n\n############################################"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 1 3\\n1 3 2 4') == '2 3 1 1 1'\n\nassert solution('3 3 2 1\\n1 2 3') == '1 1 1'\n\nassert solution('5 4 3 2 1\\n5 1 2 3 4') == '2 2 2 2 1 1 1'\n\nassert solution('3 4 1 2\\n1 2 3') == '1 1 1'\n\nassert solution('4 2 1 3\\n1 3 2 4') == '2 3 1 1 1'"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5') == '1 1 1 1 1'\nassert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5') == '3 3 3'\nassert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5') == '2 3 3 2 1 3'\nassert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5') == '1'\nassert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5') == '2 2 2 2'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n1 2 3 4 5') == '1 1 1 1 1'\nassert solution('4\\n6\\n1 2 3 4 5 6') == '1 1 1 1 1 1'\nassert solution('6\\n6\\n1 2 3 4 5 6') == '1 1 1 1 1 1'\nassert solution('4\\n6\\n1 2 3 4 5 6') == '1 1 1 1 1 1'\nassert solution('4\\n6\\n1 2 3 4 5 6') == '1 1 1 1 1 1'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"2 3 3 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"2 2 2 2\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n\"\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(example1) == [4, 4, 4, 4, 4]\nassert solution(example2) == [1, 3, 3, 1, 1]\nassert solution(example3) == [2, 3, 3, 2, 2]\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n4\\n1 1 1 1\\n') == '1\\n'\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n5\\n1 2 3 4 5') == '3\\n2\\n1'\n\"\"\"\nfrom math import inf\nfrom sys import stdin"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\\n2\") == \"2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == '2'\nassert solution(\"3\\n2\\n1 1 1 1\") == '1'\n\nprint(solution(\"2\\n1 1 1 1\"))\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n1 2 2') == '3'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3\\n1 2 3 4') == '2'\n\nassert solution('3\\n1 2 3') == '1'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4 5\\n3\\n1 2 2') == '3\\n2\\n1'\nassert solution('5\\n1 2 3 4 5\\n3\\n1 2 2') == '3\\n2\\n1'\nassert solution('5\\n1 2 3 4 5\\n3\\n1 1 1') == '1\\n1\\n1'\n'''"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_result)\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == test_data_result\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2\n3 2 1 2 3\n1 2\n2 2\n3 3\n3 4\n1 2\n4 2\n5 3\n5 4\n3 4\n2 3\n3 5\n4 4\n1 5\n5 5''') == '0 0 1 2 3 4 0 2 4 3 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\"\"\"\nimport itertools\nimport unittest\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n10 4 10 15\") == \"0 0 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(\n\"\"\"4 2\n10 4 10 15\n1 2\n4 3\n\n\"\"\"\n)\nsys.stdout = io.StringIO()\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\"\"\"\nfrom collections import defaultdict\n\n\"\"\"\n\u041a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n2 2\n1 2 3\n1 3 2\n\n\u041a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\nNO\n\"\"\"\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'abc'\n\"\"\"\n\nimport collections\n\nN, K = map(int, stdin.readline().split())\np, q = map(lambda x: list(map(int, x.split())), [stdin.readline(), stdin.readline()])\n\nfreq = collections.Counter(p + q)\nlst = sorted(freq.values())"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n1 2\") == \"abcd\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nnums = [i for i in range(1, n + 1)]\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test) == test_result\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == 'abb'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\n-----Constraints-----\n1 <= n, k <= 2 * 10^5\nn == p.length == q.length\n1 <= p[i], q[i] <= n\np[i]!= q[i]\nall elements of p are unique\nall elements of q are unique\np and q contain at most n elements\n\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\"\"\"\n\nfrom typing import List, NamedTuple"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nprint('The local tests are done. Try Solution Next.\\n')"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"69\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n20 10 20''') == '43'\nassert solution('''4\n10 10 10 10''') == '64'\nassert solution('''6\n5 4 5 4 4 5''') == '69'\nassert solution('''2\n1 4''') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n20 10 20') == '43'\n\nassert solution('4\\n10 10 10 10') == '64'\n\nassert solution('6\\n5 4 5 4 4 5') == '69'\n\nassert solution('2\\n1 4') == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nassert solution(\"3\\n20 10 20\") == \"43\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n20 10 20\\n') == '43'\nassert solution('4\\n10 10 10 10\\n') == '64'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69'\nassert solution('2\\n1 4\\n') == '3'"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\nassert solution(\"10\\n1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6\") == \"9 1 3 5 2 4 6\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\n\"\"\"\nimport itertools\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport math\nimport itertools\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\nmin_num = math.inf\nmin_perm = None\n\nfor perm in itertools.permutations(arr):\n    num = 0\n    for i in range(len(perm)):\n        num += perm[i]*(i+1)\n    if min_num > num:\n        min_num = num\n        min_perm = perm\n\nprint(min_num)\nprint(\" \".join(map(str, min_perm)))\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\nassert solution(\"5 4 2 1 3\") == \"0\"\n\nassert solution(\"5 1 4 2 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\nassert solution('5\\n4 2 5 1') == '0'\nassert solution('3\\n1 2 3') == '0'\nassert solution('2\\n1 3') == '0'\nassert solution('5\\n4 2 1 3') == '3'\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint('Success')\n\nYou can use up to 3 lines of additional space to work with the input and output.\n\nThis solution is much more easy to understand that the one from above.\n\"\"\"\n\nfrom collections import Counter\nfrom sys import stdin"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n4 2 5 1 3''') == '3'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n4 2 5 1 3') == '3'\n\nSample Input:\n5\n4 2 5 1 3\nSample Output:\n3\n\nSample Input:\n4\n2 2 2 2\nSample Output:\n0\n\nSample Input:\n3\n1 2 3\nSample Output:\n0\n\nSample Input:\n5\n5 3 2 4 1\nSample Output:\n2\n\nSample Input:\n5\n3 1 2 5 4\nSample Output:\n0\n\nSample Input:\n5\n3 5 1 2 4\nSample Output:\n0\n\nSample Input:\n5\n5 4 3 2 1\nSample Output:\n1\n\nSample Input:\n5\n1 2 3 4 5\nSample Output:\n5\n'''\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\nimport heapq\nimport collections"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\nThe basic idea is to use the concept of Counter (counting elements) from collections module.\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\nassert solution(\"7\\n4 4 3 2 4 3 2 4\") == \"3\"\nassert solution(\"10\\n3 3 5 2 1 1 1 2 1 2 1\") == \"1\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 3 3\\n') == '1'\n\"\"\"\nimport collections"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 3 3 3\") == '1'\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3 3\\n') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 3 3 3\") == 1\n\"\"\"\nimport itertools"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\n\n\"\"\"\nIf you still don't know how to start solving problems like this, please, review a Basis problem: Zadanie nr 1 - Matura in 2020\n\nYou can also solve it using a calculator.\n\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 3 4 5\") == '1'\nassert solution(\"1 0 3 4 2\") == '1'\nassert solution(\"1 2 3 0 4\") == '1'\nassert solution(\"1 2 3 4 0\") == '3'\nassert solution(\"0 2 3 4 5\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    x, *args = line.split()\n    for i, xi in enumerate(args):\n        if int(xi) == 0:\n            print(i+1)\n            break\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\n'''\nimport sys\n\ninp = sys.stdin.readlines()\nprint(inp)"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"0 2 3 4 5\") == \"2\"\nassert solution(\"0 1 2 4 5\") == \"3\"\nassert solution(\"0 1 2 3 5\") == \"4\"\nassert solution(\"0 1 2 3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\n\nfrom __future__ import annotations\n\nclass Solution:\n    def __init__(self, variables: list[int]):\n        self.variables = variables\n\n    def run(self) -> int:\n        return next(i for i in self.variables if i == 0)"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == 0\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\") == 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('6 3\\n2 2\\n3 4\\n2 2') == '0'\nassert solution('3 5\\n4 3\\n3 2') == '5'\nassert solution('1 1\\n1 1') == '0'\nassert solution('2 4\\n4 2') == '4'\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 5') == '0'\nassert solution('3 5') == '0'\nassert solution('10 1') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\n\"\"\"\n\nh, w = map(int, input().split())\n\nprint(h * w - (h + w) * min(h, w))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\nassert solution(\"10 4\\n\") == \"3\"\n\"\"\"\n\n\"\"\"\n0 0\n\n1 1\n\n1 1\n\n2 2\n\n1 1\n\n0 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n') == 0\n\"\"\"\n\nh, w = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\n\"\"\"\n\nN = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"2 10 100\") == \"No\"\nassert solution(\"3 10 100\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"2 1 1\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\nassert solution(\"4\\n1 10 100 1000\") == \"No\"\nassert solution(\"2\\n1 10\") == \"Yes\"\nassert solution(\"1\\n10\") == \"Yes\"\nassert solution(\"3\\n100 10 1\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\nassert solution(\"2\\n1 1\") == \"Yes\"\nassert solution(\"2\\n10 1\") == \"No\"\n\"\"\"\n\nimport sys\nimport re\n\n\"\"\"\nIt will be assumed that:\n - the number of input lines is in the range [2, 10^5];\n - each of the input lines contains exactly two integers, each integer in the range [1, 10^9].\n\"\"\"\n\n\"\"\"\nSince it is assumed that the input is in the range [2, 10^5], we can assume that all input values are positive.\nIt will be assumed that a sequence of length N contains exactly N integers.\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"3 10 100 1\") == \"No\"\nassert solution(\"2 10 100 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 10 100\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"zax\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\n\n-------------------------\n\u4f5c\u8005\uff1adecode_solution\n\u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/lexicographical-numbers/solution/lexicographical-numbers-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abac') == 'abcac'\nassert solution('aab') == 'aba'"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoder') == 'Yes'\nassert solution('atlas') == 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"yx\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\nassert solution(\"atlas\") == \"No\"\n\n-----Explanation-----\nThe first example is the following:\n- yx is written as xy, so xy < yxa.\n- yx is written as xy, so xy < yxa.\nThus, xy < yxa is satisfied.\n\nThe second example is the following:\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\nThus, xy < yxa is not satisfied.\n\nThe third example is the following:\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\n- xy is written as yx, so xy < yxa.\nThus, xy < yxa is not satisfied.\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"xyz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n--------TESTED WITH 0/1 SOLVER--------\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7 5 1\n''') == 'YES'\nassert solution('''7 5 1\n''') == 'YES'\nassert solution('''7 5 1\n''') == 'YES'\nassert solution('''7 5 1\n''') == 'YES'\nassert solution('''7 5 1\n''') == 'YES'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 1') == 'YES'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n\na, b, c = list(map(int, input().strip().split()))\nb = abs(b)\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 1') == 'YES'\nprint(solution(stdin))\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 1\") == 'YES'\nassert solution(\"3 4 -9\") == 'NO'\nassert solution(\"8 9 -12\") == 'YES'\nassert solution(\"2 3 0\") == 'YES'\nassert solution(\"8 9 3\") == 'YES'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n\"\"\"\n\na, b, c = list(map(int, input().split()))"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n\n\"\"\"\nSolution:\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n---------------------\nI learned the basics of string formatting and function arguments in this challenge. I am now familiar with the way to pass arguments to functions in Python.\n\nThis problem is just a logic problem, and it requires no coding.\n\nNote: I will be using Python 3.6.9, and I will be using the PyCharm IDE for Python.\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"5 5\") == \"20\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"5 10\") == \"6\"\nassert solution(\"6 20\") == \"13\"\n\"\"\"\nimport math\n\nA, B = map(int, input().split())\n\nresult = (A * B - 2 * (A + B - math.gcd(A, B))) / 2\n\nprint(int(result))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\n\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n\") == '1'\n\n---"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '1'\nassert solution('3 3\\n') == '3'\nassert solution('4 4\\n') == '4'\nassert solution('100 100\\n') == '100'\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 5\") == \"5\"\nassert solution(\"5 3 1\") == \"3\"\nassert solution(\"7 3 5\") == \"2\"\nassert solution(\"7 3 3\") == \"1\"\nassert solution(\"12 1 1\") == \"0\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1\") == \"3\"\nassert solution(\"5 2 3\") == \"2\"\nassert solution(\"5 3 1\") == \"2\"\nassert solution(\"5 4 3\") == \"0\"\nassert solution(\"4 3 3\") == \"0\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3 1\\n') == '3'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 3 1\\n\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1\") == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\") == 3\n\"\"\"\n\nX, Y, Z = map(int, input().split())\nseats = 0"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\n\n-----"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\n-------\n>>> reduce(lambda x, y: x + y, [[1, 2], [3, 4], [5, 6]], [])\n[1, 2, 3, 4, 5, 6]"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n') == '2'\nassert solution('2\\n1\\n') == ''\nassert solution('2\\n1\\n2\\n') == '2'\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0\\n2 0\\n3 1\\n4 2\\n5 5\\n\") == \"2\\n\"\nassert solution(\"2 0\\n1 1\\n0 1\\n3 1\\n4 2\\n5 5\\n\") == \"2\\n\"\nassert solution(\"5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n\") == \"10\\n\"\nassert solution(\"1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n\") == \"1\\n\"\nassert solution(\"5 2\\n5 3\\n5 4\\n5 5\\n5 6\\n5 7\\n5 8\\n5 9\\n5 10\\n\") == \"5\\n\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 4\n0 3''') == '7'\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'2 4\\n0 3'\n) == '7'"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 3\") == \"7\"\nassert solution(\"10^5 6\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n0 10\\n0 11\\n0 12\\n0 13\\n0 14\\n0 15\") == \"32\"\nassert solution(\"10 10\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n0 10\\n0 11\\n0 12\\n0 13\\n0 14\\n0 15\\n0 16\\n0 17\\n0 18\\n0 19\\n0 20\\n0 21\\n0 22\\n0 23\\n0 24\\n0 25\\n0 26\\n0 27\\n0 28\\n0 29\\n0 30\\n0 31\\n0 32\") == \"32\"\nassert solution(\"10 10\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n0 10\\n0 11\\n0 12\\n0 13\\n0 14\\n0 15\\n0 16\\n0 17\\n0 18\\n0 19\\n0 20\\n0 21\\n0 22\\n0 23\\n0 24\\n0 25\\n0 26\\n0 27\\n0 28\\n0 29\\n0 30\\n0 31\\n0 32\") == \"32\"\nassert solution(\"10 10\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n0 10\\n0 11\\n0 12\\n0 13\\n0 14\\n0 15\\n0 16\\n0 17\\n0 18\\n0 19\\n0 20\\n0 21\\n0 22\\n0 23\\n0 24\\n0 25\\n0 26\\n0 27\\n0 28\\n0 29\\n0 30\\n0 31\\n0 32\\n0 33\\n0 34\\n0 35\\n0 36\\n0 37\\n0 38\\n0 39\\n0 40\\n0 41\\n0 42\\n0 43\\n0 44\\n0 45\\n0 46\\n0 47\\n0 48\\n0 49\\n0 50\\n0 51\\n0 52\\n0 53\\n0 54\\n0 55\\n0 56\\n0 57\\n0 58\\n0 59\\n0 60\\n0 61\\n0 62\\n0 63\\n0 64\\n0 65\\n0 66\\n0 67\\n0 68\\n0 69\\n0 70\\n0 71\\n0 72\\n0 73\\n0 74\\n0 75\\n0 76\\n0 77\\n0 78\\n0 79\\n0 80\\n0 81\\n0 82\\n0 83\\n0 84\\n0 85\\n0 86\\n0 87\\n0 88\\n0 89\\n0 90\\n0 91\\n0 92\\n0 93\\n0 94\\n0 95\\n0 96\\n0 97\\n0 98\\n0 99\\n0 100\\n0 101\\n0 102\\n0 103\\n0 104\\n0 105\\n0 106\\n0 107\\n0 108\\n0 109\\n0 110\\n0 111\\n0 112\\n0 113\\n0 114\\n0 115\\n0 116\\n0 117\\n0 118\\n0 119\\n0 120\\n0 121\\n0 122\\n0 123\\n0 124\\n0 125\\n0 126\\n0 127\\n0 128\\n0 129\\n0 130\\n0 131\\n0 132\\n0 133\\n0 134\\n0 135\\n0 136\\n0 137\\n0 138\\n0 139\\n0 140\\n0 141\\n0 142\\n0 143\\n0 144\\n0 145\\n0 146\\n0 147\\n0 148\\n0 149\\n0 150\\n0 151\\n0 152\\n0 153\\n0 154\\n0 155\\n0 156\\n0 157\\n0 158\\n0 159\\n0 160\\n0 161\\n0 162\\n0 163\\n0 164\\n0 165\\n0 166\\n0 167\\n0 168\\n0 169\\n0 170\\n0 171\\n0 172\\n0 173\\n0 174\\n0 175\\n0 176\\n0 177\\n0 178\\n0 179\\n0 180\\n0 181\\n0 182\\n0 183\\n0 184\\n0 185\\n0 186\\n0 187\\n0 188\\n0 189\\n0 190\\n0 191\\n0 192\\n0 193\\n0 194\\n0 195\\n0 196\\n0 197\\n0 198\\n0 199\\n0 200\\n0 201\\n0 202\\n0 203\\n0 204\\n0 205\\n0 206\\n0 207\\n0 208\\n0 209\\n0 210\\n0 211\\n0 212\\n0 213\\n0 214\\n0 215\\n0 216\\n0 217\\n0 218\\n0 219\\n0 220\\n0 221\\n0 222\\n0 223\\n0 224\\n0 225\\n0 226\\n0 227\\n0 228\\n0 229\\n0 230\\n0 231\\n0 232\\n0 233\\n0 234\\n0 235\\n0 236\\n0 237\\n0 238\\n0 239\\n0 240\\n0 241\\n0 242\\n0 243\\n0 244\\n0 245\\n0 246\\n0 247\\n0 248\\n0 249\\n0 250\\n0 251\\n0 252\\n0 253\\n0 254\\n0 255\\n0 256\\n0 257\\n0 258\\n0 259\\n0 260\\n0 261\\n0 262\\n0 263\\n0 264\\n0 265\\n0 266\\n0 267\\n0 268\\n0 269\\n0 270\\n0 271\\n0 272\\n0 273\\n0 274\\n0 275\\n0 276\\n0 277\\n0 278\\n0 279\\n0 280\\n0 281\\n0 282\\n0 283\\n0 284\\n0 285\\n0 286\\n0 287\\n0 288\\n0 289\\n0 290\\n0 291\\n0 292\\n0 293\\n0 294\\n0 295\\n0 296\\n0 297\\n0 298\\n0 299\") == \"32\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n'''"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\n\nimport time"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 4\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 3\\n0 1\") == \"4\"\nassert solution(\"1 10\\n1 2\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n0 1\\n3 4\\n2 2\\n2 3\\n0 0\") == \"7\"\nassert solution(\"2 4\\n0 1\\n1 2\\n0 0\") == \"6\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 4\n0 3''') == '7'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\"\n\n\"\"\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\"\"\") == \"\"\"1\n1\n2\"\"\"\n\nassert solution(\"\"\"10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\"\"\") == \"\"\"0\n2\n1\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\\n1\\n2\"\n\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('L 1\\nR 2') == '1'\nassert solution('L 1\\nR 2\\nR 3') == '1'\nassert solution('L 1\\nR 2\\n? 2') == '1'\nassert solution('L 1\\nR 2\\nL 4') == '1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == '1'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == '0'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30\\n14\\n27\\n1000000000000000000\\n\") == \"6\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    if n % 2 == 0:\n        print(n//2)\n    elif n % 3 == 0:\n        print(n//3)\n    elif n % 5 == 0:\n        print(n//5)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30\\n1\\n25\\n2\\n14\\n27\\n1000000000000000000\") == '6\\n4\\n6\\n6\\n-1\\n6\\n72'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\\n\")\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5') == '4\\n2'\nassert solution('15\\n15') == '1\\n0'\nassert solution('4\\n3') == '4\\n2'\nassert solution('1\\n5') == '1\\n2'\nassert solution('1\\n7') == '1\\n3'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '''0\n4\n6\n6\n-1\n6\n72'''\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n30\") == \"4\"\nassert solution(\"4\\n5\") == \"-1\"\nassert solution(\"2\\n20\\n24\") == \"6\"\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '''0\n4\n6\n6\n-1\n6\n72'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\n\"\"\"\n\nimport sys\n\nassert solution(test_stdin_1) == test_stdout_1"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == 3\nassert solution(5) == 3\nassert solution(3) == 2\nassert solution(1) == 0\n\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'YES'\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'NO'\nassert solution(\"2\\n11 11\\n1\\n100\") == 'YES'\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('2\\n1 1 3\\n1 2 1\\n') == 'YES'\nassert solution('3\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'NO'"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\n\n\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import defaultdict"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n0 2 4 5 0\\n2\\n11 11\\n1\\n100\\n') == 'NO'\nassert solution('1\\n0\\n1\\n') == 'YES'\nassert solution('2\\n0 1\\n1 2\\n') == 'YES'\nassert solution('2\\n1 0\\n1 0\\n') == 'NO'\nassert solution('2\\n1 0\\n2 0\\n') == 'NO'"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"4\\n3\\n1 1 3\\n5\\n1 1 2 1\") == \"NO\"\nassert solution(\"1\\n100\\n100\") == \"YES\"\n\"\"\"\n\n\nimport sys\n\nfrom typing import Dict, List, Tuple\n\n\nclass Field:\n    def __init__(self, n: int) -> None:\n        self.n: int = n\n        self.field: List[int] = [0] * n\n\n    def clear(self) -> None:\n        self.field = [0] * self.n\n\n    def is_empty(self) -> bool:\n        for i in self.field:\n            if i > 0:\n                return False\n        return True\n\n    def __str__(self) -> str:\n        s: str = \"\"\n        for i in range(self.n):\n            s += f\"{self.field[i]}\"\n            if i < self.n - 1:\n                s += \" \"\n        return s\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2\\n1 1 3') == 'NO'\nassert solution('4\\n1 1 2 1') == 'YES'\nassert solution('2\\n11 11') == 'NO'\nassert solution('1\\n100') == 'YES'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1') == 'YES'\nassert solution('3\\n1 1 3\\n4\\n1 1 2 1') == 'NO'\nassert solution('2\\n11 11\\n1\\n100') == 'YES'\nassert solution('2\\n11 11\\n1') == 'NO'\nassert solution('1\\n5\\n0 1 2 3 4') == 'YES'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert solution(\"bacabaa\") == 4\nassert solution(\"zcabd\") == 0\n\n\n\n-----Problem-----\nThe minimum number of preprocess moves to make the two given strings equal is $\\displaystyle\\min{k, |a| + |b| - |\\bar{a}| - |\\bar{b}| + c}$ where $a$ is the initial string, $b$ is the final string, $\\bar{a}$ is the string of distinct characters in $a$, and $k$ is the number of preprocess moves.\n\nFor example, if we are given the following strings:\n\n$a = \"abcd\"$,\n$b = \"cdab\"$,\n$\\bar{a} = \"ab\"$,\n$c = 2$\nthen the minimum number of preprocess moves is $4$.\n\nHow many preprocess moves are required to make the two strings equal?\n\"\"\"\n\nfrom string import ascii_lowercase"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacaba') == '4'\nassert solution('bacabaa') == '0'\nassert solution('zcabd') == '0'\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 4\nassert solution(\"zcabd\") == 0\n\nassert solution(\"bbcabba\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"bacabaa\") == \"0\"\n\nassert solution(\"zcabd\") == \"0\"\nassert solution(\"dbacz\") == \"4\"\n\nassert solution(\"abbbaa\") == \"3\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\nassert solution('bacabaa') == 4\n\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\n\nassert solution(\"1\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"198 -17 2999999997 0 1\"\n\nassert solution(\"1\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"0 -17 2999999997 0 1\"\n\nassert solution(\"1\\n1 1 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"0 -17 2999999997 0 1\"\n\nassert solution(\"1\\n1 1 1\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"0 -17 2999999997 0 1\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\nfrom typing import List\nfrom functools import reduce"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\n\"\"\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\nassert solution(\"1 1 1000000000\\n1 1 999999999\") == \"0 1\"\nassert solution(\"2 1 1\\n1 1 1\\n1 1 1\") == \"0 1 0\"\nassert solution(\"4 0 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\nassert solution(\"4 0 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-17299999999701\"\nassert solution(\"1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n1 1\\n1 1\") == \"2\"\nassert solution(\"1\\n1\\n1\") == \"1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n10 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\nassert solution(\"1 2 3\") == \"0 -1 -1\"\nassert solution(\"2 1 1\") == \"2 0 0\"\nassert solution(\"1 1 1\") == \"0 0 0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n3 2 1') == '4'\nassert solution('2\\n2 3 1') == '0'\nassert solution('3\\n5 2 2') == '2'\nassert solution('10\\n4 3 6') == '5'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 1\\n100 1 4\") == \"198\"\nassert solution(\"4\\n1 2 3\\n100 1 4\") == \"0\"\nassert solution(\"4\\n1 2 3\\n100 1 4\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 2 3\\n100 1 4\\n1 2 3\\n1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999''') == '''8\n198\n-17\n2999999997\n0\n1'''\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('4\\n2') == '3'\nassert solution('4\\n6') == '9'\nassert solution('4\\n13') == '27'\nassert solution('4\\n14') == '6561'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '3\\n9\\n9\\n13\\n27\\n6561\\n68383\\n1350851717672992089'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '3'\nassert solution(6) == '9'\nassert solution(13) == '13'\nassert solution(14) == '27'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\nimport math\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2\\n3\\n') == '1\\n3\\n7\\n31\\n'\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2\\n6\\n9') == '3\\n5\\n11\\n13'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"5\\n1\") == \"2\"\nassert solution(\"5\\n3\") == \"7\"\nassert solution(\"3\\n1\") == \"2\"\nassert solution(\"3\\n2\") == \"3\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1') == '3'\nassert solution('6\\n1') == '4'\nassert solution('8\\n13') == '27'"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '70771771779999999999999'\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '70'\nassert solution(\"1 2 3 4 5\\n5 1 2 3 4\\n1 2 3 4 5\\n2 1 3 4 5\\n3 2 4 5 6\\n\") == '30'\nassert solution(\"4 2 1 2 3\\n4 1 1 2 3\\n4 2 1 2 3\\n4 1 2 2 3\\n4 2 1 2 3\\n\") == '3'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"7077177177999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\"\nprint(solution(\"10\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\"))\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 8 5 3\") == 70\nassert solution(\"12 8 8 7 2\") == 77\nassert solution(\"12343 43 4543 39 123212\") == 177177\nassert solution(\"1000000000 1000000000 1 1 1\") == 9999999999000000000\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == 9999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\n\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '707717717799999999999999999\\n99999999955\\n10'\nprint(solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n'))\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '7077177177999999999000000000999999\\n5510'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '70\\n77\\n177177\\n999999999\\n55\\n10'\n\n\"\"\"\n\n\nimport io, sys"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\nassert solution(\"5\\n20 20 1 2\\n10 10 2 3 4\\n10 10 9 9 9\\n10 10 1 1 1\\n10 10 2 2 2\\n10 10 2 3 3\") == \"100\\n110\\n220\\n262\\n65\\n10\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n10') == '0'\nassert solution('2\\n10\\n2\\n4\\n7\\n9') == '1'\nassert solution('2\\n10\\n2\\n4\\n7\\n9\\n2\\n4\\n7\\n9') == '2'\nassert solution('2\\n10\\n2\\n4\\n7\\n9\\n2\\n4\\n7\\n9') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\n\"\"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('2 4') == '2'\nassert solution('7 4') == '2'\nassert solution('9 3') == '1'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\n\"\"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\n\n------"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == '1'\nassert solution(\"10 10\") == '0'\nassert solution(\"2 4\") == '2'\nassert solution(\"7 4\") == '2'\nassert solution(\"9 3\") == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\nassert solution(\"5\\n2 4\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777\\n') == '13\\n90\\n1\\n66'\n\"\"\"\n\nfrom sys import stdin\n\nt = int(stdin.readline())\nfor _ in range(t):\n    x = int(stdin.readline())\n    digits = []\n    while x > 0:\n        digits.append(x % 10)\n        x //= 10\n    digits.sort()\n    print(sum(digits))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"22\") == 13\nassert solution(\"9999\") == 90\nassert solution(\"1\") == 1\nassert solution(\"777\") == 66\n\nprint(solution(\"22\"))\nprint(solution(\"9999\"))\nprint(solution(\"1\"))\nprint(solution(\"777\"))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\"))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n22\\n9999\\n1\\n777\") == \"13\"\nassert solution(\"3\\n2\\n22\\n2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    num = sys.stdin.readline()\n    ans = 0\n    for i in range(len(num)):\n        ans += int(num[i]) * 10**(len(num)-i-1)\n    print(ans)\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('22\\n9999\\n1\\n777\\n') == 13\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('22') == '13'\nassert solution('9999') == '90'\nassert solution('1') == '1'\nassert solution('777') == '66'\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"NO\"\nassert solution(\"2\\n4\\n1 1 1 1 1\") == \"YES\\n1 4\\n2 1\"\n\"\"\"\n\nimport sys\nimport collections\nimport heapq"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 2\n2 2 2''') == 'YES\\n1 2\\n2 1'\nassert solution('''5\n2 3 1 3 2\n6\n1 1 2 2 2 1''') == 'YES\\n2 6\\n1 2\\n2 1'\nassert solution('''4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2''') == 'YES\\n2 2\\n4 1'\nassert solution('''1\n5\n2 2 2 2 2''') == 'YES\\n2 2'\nassert solution('''2\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2''') == 'YES\\n2 2\\n1 1'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n2 2 2 2 2\\n2 3\") == \"YES\\n2 2\\n4 1\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('5\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('5\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2') == 'YES\\n2 2\\n4 1'\n\n'''\nimport sys\n\nlines = sys.stdin.readlines()\nK = int(lines[0].strip())\n\nfor i in range(1, K+1):\n    n = int(lines[i*2].strip())\n    l = list(map(int, lines[i*2+1].strip().split(' ')))\n    s = set()\n    for x in l:\n        if x-1 in s:\n            s.remove(x-1)\n        else:\n            s.add(x)\n    if len(s) < 2:\n        print('NO')\n        break\n    else:\n        print('YES')\n        print(list(s)[0]+1, n-list(s)[0])\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"NO\"\nassert solution('1\\n5\\n2 2 2 2 2') == \"YES\\n2 5\"\nassert solution('2\\n6\\n2 3') == \"NO\"\nassert solution('4\\n6\\n2 2 2 2 2') == \"YES\\n2 2\"\nassert solution('3\\n5\\n2 2 2 2 2') == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == 'YES\\n2 2'\nassert solution(\"4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == 'YES\\n2 2'\nassert solution(\"3\\n2 2 2\\n5\\n2 2 2 2 2\") == 'NO'\nassert solution(\"2\\n2 2\\n5\\n2 2 2 2 2\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\"\n\nassert solution(\"\"\"\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\"\n\n\n\n-----TimeComplexity-----\nO(k)\n\n-----SpaceComplexity-----\nO(1)\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n2 3 1 3 2''') == 'YES'\nassert solution('''2\n5\n2 3 1 3 2''') == 'NO'\nassert solution('''3\n1\n5\n5\n1 1 1 1 1''') == 'YES'\nassert solution('''4\n6\n2 2 2 2 2\n5\n2 2 2 2 2''') == 'YES'\nassert solution('''3\n2\n2 3\n5\n2 2 2 2 2''') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\n\"\"\"\n\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == 5\nassert solution(\"3 -1 0 2\") == 6\nassert solution(\"2 -3 -1 5 -4\") == 13\n\n\n\"\"\"\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K):\n        A.sort()\n        for i in range(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n\n        if K % 2 == 0:\n            return sum(A)\n        else:\n            return sum(A) - 2 * min(A)"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n1\\n') == 5\nassert solution('3 -1 0 2\\n3\\n') == 6\nassert solution('2 -3 -1 5 -4\\n2\\n') == 13\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        A.sort()\n        if not K:\n            return sum(A)\n        if K % 2:\n            A[-1] = -A[-1]\n            K -= 1\n        for i in range(len(A) - 1, -1, -1):\n            if K and A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n1\") == \"5\"\nassert solution(\"3 -1 0 2\\n3\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\\n2\") == \"13\""
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(A, K) == result\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\"\"\"\n\n\n\"\"\"\nWe apply the following operations to the list A to form a new list B:\n\nWe create a new list B = A, and for each i, we replace B[i] with -B[i].\nWe apply K times the above operation.\n\nWe now count the sum of all elements of B.\u00a0 This sum must be the minimum possible value.\n\nFrom the above description, it is clear that we should return the minimum possible value.\n\nThus, the answer is the sum of all elements of B.\u00a0\n\"\"\"\n\nclass Solution:\n    def arrayManipulation(self, n, queries):\n        \"\"\"\n        :type n: int\n        :type queries: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n        a = [0] * (n + 1)\n        for q in queries:\n            a[q[0]] += q[2]\n            a[q[1] + 1] -= q[2]\n        cur = 0\n        maximum = 0\n        for i in range(n + 1):\n            cur += a[i]\n            if cur > maximum:\n                maximum = cur\n        return maximum\n\nclass Solution:\n    def arrayManipulation(self, n: int, queries: List[List[int]]) -> int:\n\n        # just do it\n        # ans = [0] * (n + 1)\n        # for i, j, k in queries:\n        #     ans[i - 1] += k\n        #     if j < n:\n        #         ans[j] -= k\n        #\n        # return max(ans)\n\n        # just do it - 2\n        # ans = [0] * (n + 1)\n        # for i, j, k in queries:\n        #     ans[i - 1] += k\n        #     ans[j] -= k\n        #\n        # return max(ans)\n\n        # brute force\n        # cur = 0\n        # ans = 0\n        # for i, j, k in queries:\n        #     cur += k\n        #     ans = max(cur, ans)\n        #\n        # return ans\n\n        # brute force - 2\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur += k\n        #     cur -= k\n        #\n        # return ans\n\n        # brute force - 3\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     for l in range(i, j + 1):\n        #         cur += k\n        #     cur -= k\n        #\n        # return ans\n\n        # brute force - 4\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     for l in range(i, j + 1):\n        #         cur = max(cur + k, 0)\n        #     cur -= k\n        #\n        # return ans\n\n        # brute force - 5\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     for l in range(i, j + 1):\n        #         cur = max(cur + k, 0)\n        #     cur -= k\n        #\n        # return ans\n\n        # brute force - 6\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #\n        # return ans\n\n        # brute force - 7\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #\n        # return ans\n\n        # brute force - 8\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #\n        # return ans\n\n        # brute force - 9\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #\n        # return ans\n\n        # brute force - 10\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #\n        # return ans\n\n        # brute force - 11\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #\n        # return ans\n\n        # brute force - 12\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #\n        # return ans\n\n        # brute force - 13\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        #     cur = cur - k\n        #\n        # return ans\n\n        # brute force - 14\n        # ans = 0\n        # cur = 0\n        # for i, j, k in queries:\n        #     ans = max(ans, cur)\n        #     cur = cur + k\n        #     cur = cur - k\n        #     cur = cur + k\n        "
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[4,2,3] K = 1\") == 5\nassert solution(\"[3,-1,0,2] K = 3\") == 6\nassert solution(\"[2,-3,-1,5,-4] K = 2\") == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A = [4,2,3] K = 1') == 5\nassert solution('A = [3,-1,0,2] K = 3') == 6\nassert solution('A = [2,-3,-1,5,-4] K = 2') == 13\nassert solution('A = [1,0,3,0] K = 1') == 4\n\n'''\n\nclass Solution:\n    def largestSumAfterKNegations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        if len(nums) == k:\n            return sum(nums)\n        elif k == 0:\n            return sum(nums)\n        elif k == len(nums):\n            return max(0, sum(nums))\n\n        for i, num in enumerate(nums):\n            if num < 0 and k > 0:\n                nums[i] = -num\n                k -= 1\n\n        if k % 2 == 1:\n            nums[0] = -nums[0]\n            k -= 1\n        return sum(nums)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[4,2,3]\") == \"5\"\nassert solution(\"[3,-1,0,2]\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\") == \"13\"\n\"\"\"\n\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: list, K: int) -> int:\n        A.sort()\n        A = [i * -1 for i in A]\n        count = 0\n        while count < K and A:\n            A.pop()\n            count += 1\n        A = [i * -1 for i in A]\n        return sum(A)\n\n\nA = [4, 2, 3]\nK = 1\n\nassert Solution().largestSumAfterKNegations(A, K) == 5\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\", \"1\") == \"5\"\nassert solution(\"3 -1 0 2\", \"3\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\", \"2\") == \"13\"\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K):\n        A = sorted(A)\n        idx = 0\n        while K > 0 and idx < len(A):\n            if A[idx] < 0:\n                A[idx] = -A[idx]\n                idx += 1\n            else:\n                A[idx] = -A[idx]\n                K -= 1\n        return sum(A)\n\n\nsol = Solution()\nprint(sol.largestSumAfterKNegations([4, 2, 3], 1))\nprint(sol.largestSumAfterKNegations([3, -1, 0, 2], 3))\nprint(sol.largestSumAfterKNegations([2, -3, -1, 5, -4], 2))"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"2 2 2\") == True\nassert solution(\"3 4 6 5\") == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == True\nassert solution(\"0,2,1,-6,6,7,9,-1,2,0,1\") == False\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\n\n'''\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        _sum = sum(A)\n        if _sum % 3:\n            return False\n\n        goal = _sum // 3\n        cur = 0\n        count = 0\n        for a in A:\n            cur += a\n            if cur == goal:\n                count += 1\n                cur = 0\n\n        return count >= 3\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum = sum(A)\n        if sum % 3:\n            return False\n\n        target = sum // 3\n\n        s = 0\n        cur = 0\n        for a in A:\n            cur += a\n            if cur == target:\n                s += 1\n                cur = 0\n\n        return s >= 3\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A) == expected\n'''"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(A) == expected\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        self.memory = dict()\n    \n    def three_sum(self, nums: List[int], target: int) -> bool:\n        \n        # NOTE: sort the list so we can easily check the boundary\n        # or we can also use three pointers\n        nums.sort()\n        \n        # check the boundary\n        # i, j, k\n        length = len(nums)\n        \n        if nums[0] > target or nums[-1] < target:\n            return False\n        \n        # if there are 3 or less elements, just check whether\n        # they are equal to the target.\n        if length < 3:\n            return False\n        \n        # check for the adjacent elements\n        for i in range(length - 2):\n            # if i == 0, this is a boundary condition\n            if i == 0 or nums[i]!= nums[i - 1]:\n                # check if we have a possible sum\n                # if we have i + 2 sum, then j + 1 == k\n                # j and k must be in the range\n                j, k = i + 1, length - 1\n                while j < k:\n                    s = nums[i] + nums[j] + nums[k]\n                    if s == target:\n                        return True\n                    if s > target:\n                        k -= 1\n                    elif s < target:\n                        j += 1\n        \n        return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[1,2,3,5,4,6]\") == True\nassert solution(\"[0,0,0,0,0,0,0]\") == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(A) == true\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('1 2 3 4 5') == False\nassert solution('1 2 3 4 5 6 7 8 9 10') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"false\"\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"true\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nbeat\\n: \\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet vet\"\nassert solution(\"7\\nbeet\\n: \\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet vet\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\nfrom collections import defaultdict\n\nN = int(input())\nvotes = defaultdict(int)\n\nfor _ in range(N):\n    s = input()\n    votes[s] += 1\n\nres = [s for s in votes.keys() if votes[s] == max(votes.values())]\nres.sort()\n\nfor s in res:\n    print(s)\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nbeet\\n:\\nvet\\n\") == \"beet\\nvet\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nab\\nab\\naa\\nbb\\nbb\\n') == 'ab\\naa\\n'\nassert solution('2\\nab\\nab\\naa\\nbb\\nbb\\n') == 'ab\\naa\\n'\nassert solution('2\\naa\\nab\\nab\\nbb\\nbb\\n') == 'aa\\nbb\\n'\nassert solution('2\\nbb\\nab\\nab\\nbb\\nbb\\n') == 'bb\\n'\nassert solution('2\\nbb\\nab\\nab\\nbb\\nbb\\n') == 'bb\\n'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nbass\\nbass\\nbass\\nbas\\nbass\\nbass\\nbas\\n\") == \"bass\"\nassert solution(\"6\\nabc\\nabc\\nabc\\nabc\\nabc\\nabc\") == \"abc\"\nassert solution(\"7\\nbat\\ncat\\ncat\\nbat\\nbat\\ncat\\ncat\") == \"bat\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nbeet\\nvet\\nbet\") == \"beet and vet\"\nassert solution(\"2\\nbeet\\nvet\") == \"beet and vet\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.argv[1]\n\nlines = lines.splitlines()"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nDabce\\nbDdca\\nbCDac\\nCDacb\\ncDba\") == \"cDba\\nCDac\\nCDacb\\nDabce\\nbDdca\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\nbeat\\n:\\nbeat\\nvet\\n:\\nvet\\nbet\\n:\\nbet') == 'beet vet'\nassert solution('7\\nbeat\\n:\\nbeat\\nvet\\n:\\nvet\\nbet\\n:\\nbet') == 'beet vet'\nassert solution('7\\nbeat\\n:\\nbeat\\nvet\\n:\\nvet\\nbet\\n:\\nbet') == 'beat vet'\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nbeat\\n:vet\\nvet:beet\\nbeet:bed\\nbed:vet\\nbet:bet\\nvet:vet\\n\") == \"beet and vet\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\nbeat') == 'beet\\nvet'\n\n'''"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\") == \"8\"\nassert solution(\"4 8\")!= \"8 1\"\nassert solution(\"4 8\") == \"8\"\n\"\"\"\n\nfrom functools import reduce\nfrom math import ceil\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\nassert solution(\"2 8 2\\n\") == \"9\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"\n2\n4 8\n\"\"\") == '8'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\nnumbers = list(map(int, stdin.readline().strip().split(' ')))\n\ncosts = []\nfor i in range(len(numbers)):\n    cost = 0\n    for j in range(len(numbers)):\n        if i!= j:\n            cost += abs(numbers[i] - numbers[j]) ** 2\n    costs.append(cost)\nprint(min(costs))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n8\\n\") == 8\n\"\"\"\n\nn = int(input())\n\nlst = [int(x) for x in input().split()]\n\nprint(sum(((x-y)**2 for x in lst for y in lst if x!= y)))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"\nimport sys\nimport math\n\nN = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\n\nmin_cost = 0\n\nfor i in range(N - 1):\n    min_cost += (arr[i] - arr[i + 1]) ** 2\n\nprint(min_cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 8''') == '8'\n\"\"\"\n\nfrom typing import List\n\nn: int = int(input())\narray: List[int] = list(map(int, input().split()))\narray.sort()\n\nbase: int = 0\ncost: int = 0\nfor i in range(n):\n    cost += (array[i] - base)**2\n    base = array[i]\nprint(cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8') == '8'\n\"\"\"\nimport sys\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2\n4 8\n\"\"\") == \"8\"\nassert solution(\n\"\"\"\n3\n5 7 1\n\"\"\") == \"15\"\nassert solution(\n\"\"\"\n3\n5 7 1\n\"\"\") == \"15\"\nassert solution(\n\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n5\n100 100 100 100 100\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"150\\n100\\n\") == \"84\"\n\"\"\"\n\nX = int(input())\nA = int(input())\nB = int(input())\n\nprint(X - (A + B * (A // B)))\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1234\\n150\\n100\") == \"84\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nassert solution
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234 150 100') == '84'\nassert solution('1234 150 1000') == '8 4'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('150 100') == '84'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234\\n150\\n100') == '84'\nprint(solution(stdin))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 8\n\n---------------------"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 2\n\"\"\") == \"8\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '8'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '8'\n\"\"\"\n\nimport numpy as np\nfrom decimal import *\ngetcontext().prec = 10\n\nn, m = [int(i) for i in stdin.split(' ')]\n\na = np.arange(1, n+1)\nb = np.arange(1, n+1)"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\n\"\"\"\nGiven 2 int values, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.\n\nsolution(1,2) # 3\nsolution(3,5) # 7\n\n\"\"\"\n\n\"\"\"\nThe range() function in Python is used to generate integer numbers within a user-specified range. \nIt also includes the endpoints, so range(1, 10) will produce numbers between 1 and 10 (not including 10).\n\nWrite a function that receives an array of integers and returns the largest element of the array modulo 10^9+7.\n\nYour function will be called like this:\n\nsolution([1,3,6])\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 8\nassert solution(\"5 2\") == 15\nassert solution(\"10 2\") == 150\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 2\n1 2\n2 3\n\"\"\"\n) == \"POSSIBLE\"\n\nassert solution(\n\"\"\"\n3 2\n1 2\n2 3\n\"\"\"\n) == \"POSSIBLE\"\n\nassert solution(\n\"\"\"\n3 2\n1 3\n2 3\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n3 2\n1 2\n1 3\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n3 2\n2 1\n1 3\n\"\"\"\n) == \"POSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == 'POSSIBLE'\n\nassert solution('''3 2\n1 2\n1 3''') == 'IMPOSSIBLE'\n\nassert solution('''3 2\n1 2\n2 3\n3 1''') == 'IMPOSSIBLE'\n\nassert solution('''3 2\n1 2\n2 3\n3 3''') == 'POSSIBLE'\n\nassert solution('''3 2\n2 3\n3 1''') == 'IMPOSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == 'POSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\nassert solution(\"3 2\\n2 3\\n1 2\\n\") == \"IMPOSSIBLE\"\n\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\n\"\"\"\nimport sys\n\n_, n, m = [int(_) for _ in input().split()]\n\ntakahashi_islands = [[int(_) for _ in input().split()] for _ in range(m)]\n\nfor _ in range(n - 1):\n    a, b = [int(_) for _ in input().split()]\n    takahashi_islands.append([a, b])\n\nprint(\"POSSIBLE\" if n == takahashi_islands[-1][0] + takahashi_islands[-1][1] else \"IMPOSSIBLE\")\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == \"POSSIBLE\"\n\n'''\nGiven the following information, determine the number of islands in the archipelago.\n\n-----Constraints-----\n - 3 \u2264 N \u2264 200 000\n - 1 \u2264 M \u2264 200 000\n - 1 \u2264 a_i < b_i \u2264 N\n - (a_i, b_i) \\neq (1, N)\n - If i \\neq j, (a_i, b_i) \\neq (a_j, b_j).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M\n\n-----Output-----\nPrint the number of islands in the archipelago, separated by a single space.\n\n-----Sample Input-----\n5 3\n1 3\n2 4\n4 5\n\n-----Sample Output-----\n2\n'''\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 2\\n2 3\\n1 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('coderbyte') == 'cderbyt'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    string = line.rstrip('\\n')\n    print(string[1::2])"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('atcoder') == 'acdr'\nassert solution('atcoder') == 'acdr'\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('hacker') == 'kr'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\n----\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoder') == 'acdr'\n\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == 'b'\nassert solution('ab') == 'a'\nassert solution('a') == 'a'\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla rng\") == \"YES\"\nassert solution(\"rng rng rng rng\") == \"YES\"\nassert solution(\"gorilla apple rng\") == \"NO\"\nassert solution(\"gorilla rng gorilla apple\") == \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng giraffe apple\") == \"NO\"\nassert solution(\"rng gorilla banana\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla banana\") == \"YES\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == \"NO\"\nassert solution('rng') == 'NO'\nassert solution('rng gorilla') == 'NO'\nassert solution('rng gorilla apple') == 'NO'\nassert solution('rng gorilla apple') == 'YES'\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n\nA, B, C = [w.strip().split(' ') for w in stdin.split('\\n')]\nprint('YES' if A[-1][-1] == B[0][0] and B[-1][-1] == C[0][0] else 'NO')"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\n-----\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng gnar gorilla apple') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('36 24') == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A) == solution(B)\n\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('36\\n24') == 'GREATER'"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('36 24') == 'GREATER'\n\nassert solution('36 24') == 'GREATER'\n\nassert solution('36 24') == 'GREATER'\n\nassert solution('36 24') == 'GREATER'\n\nassert solution('36 24') == 'GREATER'"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\nassert solution(\"11 11\") == \"EQUAL\"\n\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\nprint(\"GREATER\" if A > B else \"LESS\" if A < B else \"EQUAL\")\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\\norange\\napple\") == '2'\n\"\"\"\nimport sys\n\nN, s_list, M, t_list = map(int, sys.stdin.readline().split())\ns_list = [sys.stdin.readline().strip() for i in range(N)]\nt_list = [sys.stdin.readline().strip() for i in range(M)]"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n\nN, *s, M, *t = map(int, stdin.read().split())"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape\\n') == '2'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\") == \"2\"\nprint(solution(\"apple\\norange\\napple\\n1\\ngrape\"))"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == 2\n\n'''\n\nN = int(input())\n\ns = set()\nfor _ in range(N):\n    s.add(input())\n\nM = int(input())\n\nt = set()\nfor _ in range(M):\n    t.add(input())\n\nanswer = 0\n\nfor i in s:\n    if i in t:\n        answer += 1\n\nprint(answer)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == '2'\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3\\napple\\norange\\napple\\n1\\ngrape'\n) == '2'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n\nb = input()"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"G\") == \"C\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"T\"\n\"\"\"\n\nimport sys\n\nA = \"A\"\nC = \"C\"\nG = \"G\"\nT = \"T\"\n\nbase = sys.stdin.readline().rstrip()\n\nprint(A if base == \"A\" else C if base == \"C\" else G if base == \"G\" else T)"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '3'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(2)]\ndp = [[0] * n for _ in range(2)]\ndp[0][0] = arr[0][0]\ndp[1][0] = arr[1][0]\ndp[0][1] = dp[1][0] + arr[0][1]\ndp[1][1] = dp[0][0] + arr[1][1]\nfor i in range(2, n):\n    dp[0][i] = max(dp[1][i - 1], dp[1][i - 2]) + arr[0][i]\n    dp[1][i] = max(dp[0][i - 1], dp[0][i - 2]) + arr[1][i]\nprint(max(dp[0][-1], dp[1][-1]))\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == '14'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\n\nx = [0] * N\ny = [0] * N\n\nfor i in range(N):\n    for j in range(N):\n        x[j] += A[i]\n        y[j] += A[i + N]\n\nprint(max(x + y))\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport sys\nimport io\n\nclass Solution:\n    def __init__(self) -> None:\n        self.rows = []\n        self.cols = []\n        self.grid = []\n        self.n = 0\n        self.max_val = 0\n\n    def read_input(self):\n        self.n = int(input())\n        for _ in range(self.n):\n            self.rows.append(list(map(int, input().split(' '))))\n        for row in self.rows:\n            self.cols.append(list(map(int, input().split(' '))))\n\n    def solve(self):\n        self.grid = [[0 for _ in range(self.n)] for _ in range(self.n)]\n        self.max_val = 0\n        for row in range(self.n):\n            for col in range(self.n):\n                self.max_val = max(self.max_val, self.rows[row][col] + self.cols[row][col])\n                self.grid[row][col] = self.rows[row][col] + self.cols[row][col]\n\n    def output(self):\n        print(self.max_val)\n\n    def solve_and_output(self):\n        self.solve()\n        self.output()"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1''') == '14'\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 1 5\\n2 4 2 4') == '14'\nassert solution('3\\n2 3 1\\n3 2 3') == '8'\nassert solution('2\\n3 2\\n1 1') == '4'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3 4 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nN, k = list(map(int, stdin.split()))\n\nboxes = list(map(int, stdin.split()))\n\nmin_ops = 0\n\nfor box in boxes:\n    if box >= k:\n        min_ops += 1\n    else:\n        break\n\nprint(min_ops)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nstdin = input()\nN, K = [int(n) for n in stdin.split()]\na = [int(n) for n in input().split()]\n\nans = 0\nmax_val = max(a)\nfor i in range(N - K + 1):\n    if a[i] < max_val:\n        continue\n    ans += max_val - a[i] + 1\n    a[i] = max_val\n\nprint(ans)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n') == '1'\nassert solution('3 3 2\\n') == '5'\nassert solution('4 4 4\\n') == '8'\nassert solution('5 5 5\\n') == '13'\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\\n\") == \"1\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('2 1 3') == '2'\n\n'''\n\n'''\n\nGiven:\na_1, a_2,..., a_N\n\nWrite a program to:\nFind the minimum number of operations required to achieve the objective:\n - Any two neighboring boxes contain at most x candies in total.\n\nInput Format\nThe first line of the input contains N and x. The second line contains N integers a_1, a_2,..., a_N.\n\nConstraints\n - 2 \u2264 N \u2264 10^5\n - 0 \u2264 a_i \u2264 10^9\n\nOutput Format\nPrint the minimum number of operations required to achieve the objective.\n\nSample Input 0\n4 3\n1 2 2 3\n\nSample Output 0\n1\n\nSample Input 1\n5 2\n1 1 2 2 1\n\nSample Output 1\n0\n\nExplanation\nIn the first case, Snuke has to eat two candies from the fourth box to achieve the objective.\nIn the second case, no operation is required.\n'''\n\n'''\nYou will be given an array a, of n numbers. For example, if the input is:\n\n5 2\n1 2 1 2 1\n\nThen, the input is:\n\na = [1, 2, 1, 2, 1]\n\nWrite a program to find the minimum number of operations required to make the array a strictly increasing.\n\nYou can only perform the following operation:\n\n1. Increment all elements in the array by 1.\n2. Reduce the value of all elements in the array by 1.\nNote: The array will contain at least two elements.\n\nFor example, if the array initially is:\n\n1 3 5 6 7\n\nThen, the value after the operation is:\n\n2 4 6 8 10\n\nWrite a program to find the minimum number of operations required to make the array strictly increasing.\n\nSample Input 0\n\n2 2\n\nSample Output 0\n\n1\n\nSample Input 1\n\n5 2\n\nSample Output 1\n\n0\n\nExplanation\n\nIn the first case, Snuke can either:\n\nReduce the value of all the elements by 1.\nIncrement the value of all the elements by 1.\nSo, the minimum number of operations required is 1.\n\nIn the second case, no operation is required to make the array strictly increasing.'''\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2 3 4') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n2 2 2\n''') == '1'\nassert solution('''10 10\n1 1 1 1 1 1 1 1 1 1\n''') == '0'\nassert solution('''4 3\n1 2 1 1\n''') == '2'\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"3 0 10\\n1 2 3\\n1 0 10\") == \"No\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\") == \"Yes\"\nassert solution(\"1 0 1\\n1 0 1\\n1 0 1\") == \"No\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 0 1\n2 1 2\n1 0 1''') == 'Yes'\n\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == 'No'\n\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == 'No'\n\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == 'No'\n\nassert solution('''1 1 1\n2 1 2\n1 1 1''') == 'Yes'"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 2 1\\n2 1 2\\n1 0 1\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n\ngrid = []\n\nfor line in sys.stdin:\n    grid.append(line.strip().split())"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\ncontest = input().strip()"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\nprint(solution(\"ABC\"))\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\nimport unittest\nimport sys\n\nclass Solution:\n    def contest(self, last_type: str) -> str:\n        if last_type == \"ABC\":\n            return \"ARC\"\n        elif last_type == \"ARC\":\n            return \"ABC\"\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        # Set up test fixtures\n        solution = Solution()\n        last_type = \"ABC\"\n\n        # Test the first test case\n        self.assertEqual(solution.contest(last_type), \"ARC\")\n\n        # Test the second test case\n        last_type = \"ARC\"\n        self.assertEqual(solution.contest(last_type), \"ABC\")\n\n        # Test the third test case\n        last_type = \"ARC\"\n        self.assertEqual(solution.contest(last_type), \"ABC\")\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 2\\n') == '3'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = map(int, input().split())\n\ncount = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n-----"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2') == '3'\nassert solution('1 1 1') == '0'\nassert solution('4 8 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 8 2\n''') == '3'\nassert solution('''4 8 6\n''') == '2'\nassert solution('''3 5 7\n''') == '0'\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 2\\n') == '3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'Christmas'\n\"\"\"\n\nD = int(input())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'Christmas'"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve Eve Eve'\nassert solution('23') == 'Christmas Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\nassert solution('1') == 'Christmas Eve Eve Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\n\"\"\"\n\nimport sys\n\nD = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"Christmas\", \"Test #1\"\nassert solution(\"24\") == \"Christmas Eve\", \"Test #2\"\nassert solution(\"23\") == \"Christmas Eve Eve\", \"Test #3\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\", \"Test #4\"\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23') == 'Christmas Eve Eve Eve'\nassert solution('24') == 'Christmas Eve'\nassert solution('25') == 'Christmas'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\"\n\nfrom unittest import main, TestCase\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24\") == \"Christmas Eve Eve Eve\"\nassert solution(\"25\") == \"Christmas\"\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '2\\n'\nassert solution('8\\n') == '4\\n'\nassert solution('7\\n') == '4\\n'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n') == '4'\nassert solution('6\\n') == '3'\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingV2VXGK-YH4/\nsolution: 100%\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '4'\nprint(solution('7'))\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '5'\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2\\n1') == '1'\nassert solution('4\\n2\\n1\\n0') == '0'\nassert solution('7\\n2\\n1\\n0') == '4'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ncount = 0\n\nwhile N!= 0:\n    if N % 2 == 0:\n        count += 1\n    N = N // 2\n\nprint(count)\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == 2\nassert solution('6\\n') == 3\nassert solution('8\\n') == 4\nassert solution('7\\n') == 4\nassert solution('1\\n') == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 7 9 3''') == 'Yes'\nassert solution('''2 3 4 2''') == 'No'\n\"\"\"\n\nimport ast\nfrom operator import itemgetter\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == 'Yes'\nassert solution('1 2 2 3') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '4 7 9 3'\n) == 'Yes'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 7 9 3''') == 'Yes'\nassert solution('''4 7 9 1''') == 'No'\nassert solution('''3 4 5 6''') == 'No'\nassert solution('''1 2 3 2''') == 'Yes'\nassert solution('''1 2 3 4''') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nprint('Test Successful')\n\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nassert solution(\"hello world\") == \"hEELo wORlD\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nprint('test passed')\n\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nprint('test passed')\n\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nprint('test passed')\n\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nprint('test passed')\n\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nprint('test passed')"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"atcoder beginner contest\"\n) == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('50 100 120') == 'Yes'\n\nimport sys\n\nA, B, C = [int(i) for i in sys.stdin.read().strip().split()]\nprint('Yes' if C <= A + B else 'No')"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 120 120\") == \"No\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 100 200') == 'No'\n\"\"\"\n\nA, B, C = [int(i) for i in input().split()]"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('100 300 150') == 'No'\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 150 120') == 'No'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 0 120\") == \"No\"\nassert solution(\"0 100 120\") == \"No\"\nassert solution(\"100 100 120\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '50 100 120'\n) == 'Yes'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"100 120 120\") == \"No\"\nassert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nprint(solution(stdin))\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nN, A = map(int, stdin.readline().split())\ncards = list(map(int, stdin.readline().split()))\n\nans = 0\nfor i in range(len(cards)):\n    for j in range(i + 1, len(cards)):\n        for k in range(j + 1, len(cards)):\n            if (cards[i] + cards[j] + cards[k]) % A == 0:\n                ans += 1\nprint(ans)"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nprint(\"PASSED\")\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4 8\\n7 9 8 9\"), \"5\")\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 8\n7 9 8 9''') == '5'\n\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 8\n7 9 8 9\n''') == '5'\nassert solution('''\n3 3\n1 1\n''') == '0'\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 8\n7 9 8 9\n''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('2\\n1 2') == '1 2'\nassert solution('4\\n3 2 1 4') == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5 4 3 2 1\"\n\"\"\"\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Design\n========================================================================================================\n\"\"\"\n\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Test\n========================================================================================================\n\"\"\"\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Solution\n========================================================================================================\n\"\"\"\n\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Optimisation\n========================================================================================================\n\"\"\"\n\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Analysis\n========================================================================================================\n\"\"\"\n\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Complexity Analysis\n========================================================================================================\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\"\n\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Proof\n========================================================================================================\n\"\"\"\n\n\n\"\"\"\n========================================================================================================\nSliding Window Problem - Sample\n========================================================================================================\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\nassert solution('3 1 2') == '3 1 2'\nassert solution('3 3') == '3 3'\nassert solution('5 3 1 3 1') == '5 3 1 3 1'\nassert solution('2 1 4 3') == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"4 2 1 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '4 2 1 3'\nassert solution(\"1\\n9\") == '9'\nassert solution(\"4\\n5 4 3 2\") == '2 1 4 3 5'\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1 2 6 5 4 3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"10 9 8 7 6 5 4 3 2 1\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 1') == 'No'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10') == 'No'\nassert solution('7 3\\n1 2 3 4 5 6 7') == 'Yes'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\nassert solution(\"100 100\\n3 6 2 1 3\") == \"No\"\nassert solution(\"10 100\\n5 1 2 1 1 5\") == \"Yes\"\nassert solution(\"1 1\\n100\") == \"Yes\"\nassert solution(\"10 100\\n3 1 1 1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nh, n = map(int, stdin.readline().strip().split())\nhp = h\n\nhp -= sum([int(i) for i in stdin.readline().strip().split()])"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n2 3 1') == 'Yes'\nassert solution('10 1\\n1 2 3 4 5 6 7 8 9 10') == 'Yes'\nassert solution('10 1\\n10 1') == 'No'\nassert solution('10 3\\n4 5 6') == 'No'"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 6\nassert solution('ababab') == 6\nassert solution('xaxb') == 5\nassert solution('aaa') == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abaababaab') == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"aaaaa\") == 5\nassert solution(\"ababab\") == 4\nassert solution(\"abcabc\") == 3\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abc') == 3\nassert solution('a') == 1\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abaababaa') == 6\nassert solution('abaababa') == 6\nassert solution('abaabab') == 6\nassert solution('abaaba') == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\nimport sys\n\ninputs = sys.stdin.readlines()\ninput = ''\n\nfor line in inputs:\n    if line!= '\\n':\n        input += line.strip()"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"aaaaaa\") == 5\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\nimport re\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaababaab') == 6\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('aba') == 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"bac\"\n) == \"Yes\"\n\nassert solution(\n    \"cab\"\n) == \"No\"\n\nassert solution(\n    \"aa\"\n) == \"Yes\"\n\nassert solution(\n    \"cba\"\n) == \"Yes\"\n\nassert solution(\n    \"ba\"\n) == \"Yes\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"abb\") == \"No\"\nassert solution(\"bba\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\nassert solution('aba') == 'Yes'\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'bac'\n) == 'Yes'\n\nassert solution(\n    'aba'\n) == 'Yes'\n\nassert solution(\n    'abc'\n) == 'Yes'\n\nassert solution(\n    'aaa'\n) == 'Yes'\n\nassert solution(\n    'aba'\n) == 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('cab') == 'Yes'\nassert solution('bac') == 'No'\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == '646'\nassert solution(\"1\\n1000000\\n1000000\") == '757402647'\nassert solution(\"2\\n1 3\\n4 2\") == '20'\n\nimport sys\nassert sys.stdin.readline().strip() == \"5\\n1 8 7 2 4\\n9 7 2 9 3\"\n\nfrom functools import reduce"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 8 7 2 4\\n9 7 2 9 3\\n') == '646'\n'''"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\nassert solution('1\\n1000000\\n1000000') == '757402647'\nassert solution('2\\n1 3\\n4 2') == '20'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == 646\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\nassert solution('1\\n1000000\\n1000000') == '757402647'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == 646\nassert solution(\"1\\n1000000\\n1000000\") == 757402647\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n1 8 7 2 4\n9 7 2 9 3\n\"\"\") == \"646\"\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 8 7 2 4\\n9 7 2 9 3') == '646'\nassert solution('1000000\\n1000000') == '757402647'\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('1 2') == 1\nassert solution('1 2 3') == 2\nassert solution('1 2 3 4') == 3\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nprint(solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\"))\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndp = [[0]*n for _ in range(n)]\nfor i in range(n):\n    for l in range(n):\n        r = min(n, l + b[i])\n        if l == 0:\n            dp[i][r] = b[i] * sum(a[l:r])\n        elif r == n:\n            dp[i][r] = dp[i][l-1] + b[i] * sum(a[l:r])\n        else:\n            dp[i][r] = min(dp[i][l-1] + b[i] * sum(a[l:r]), dp[i][r])\nprint(dp[-1][-1])\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 4\\n2 5 7 4 6\") == \"17\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\") == \"17\"\nassert solution(\"7 4 5\\n2 5 4 2 6 3 1\") == \"7\"\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n') == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n2 1\\n3 1\\n\") == \"17\"\nassert solution(\"7 1 4\\n2 5 7 4 6\\n5 4\\n2 1\\n9 7\\n\") == \"17\"\nassert solution(\"7 1 4\\n2 5 7 4 6\\n5 4\\n2 1\\n9 7\\n\") == \"17\"\nassert solution(\"9 1 8\\n2 5 7 4 6\\n5 4\\n2 1\\n9 7\\n\") == \"17\"\nassert solution(\"9 1 8\\n2 5 7 4 6\\n5 4\\n2 1\\n9 7\\n\") == \"17\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\nassert solution(\"5 4 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\nassert solution(\"1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n''') == '2'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '0'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '1'"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 3\\n2 4\\n3 5\\n3 6\\n4 5\\n4 6\\n5 7\") == \"2\"\n\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"1\"\n\nassert solution(\"7\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n3 6\\n4 5\\n4 6\\n5 7\") == \"0\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 5\") == '2', 'wrong result'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == '0', 'wrong result'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 5\") == '1', 'wrong result'\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\n    \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\n    \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\n\"\"\""
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"\"\"10\n15\n1999999999\n113\n1000000001\n1\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == 10\nassert solution(\"4 12\") == 15\nassert solution(\"2 1000000000\") == 1999999999\nassert solution(\"7 97\") == 113\nassert solution(\"1000000000 1000000000\") == 1\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4 12') == '11'\nassert solution('1\\n1 1000000000') == '1'\nassert solution('3\\n7 97') == '10'\nassert solution('2\\n1 1') == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 7\") == \"10\"\nassert solution(\"2\\n4 12\") == \"15\"\nassert solution(\"2\\n2 1000000000\") == \"1999999999\"\nassert solution(\"1\\n7 97\") == \"113\"\nassert solution(\"2\\n1000000000 1000000000\") == \"1000000001\"\n\"\"\""
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7') == '10'\n\n\"\"\""
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n\"\nprint(solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n\"))\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \\\n    \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n\nsolution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\")\n\n\n\"\"\"\n\nimport sys\nimport math\nimport os\nimport time\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom collections import deque\nimport heapq\nimport bisect\nfrom itertools import accumulate\nfrom itertools import combinations\nfrom itertools import permutations\nfrom itertools import product\nfrom copy import deepcopy\nfrom math import sqrt\nfrom math import log\nfrom math import log2\nfrom math import gcd\nfrom math import factorial\nfrom math import ceil\nfrom math import floor\nfrom math import sqrt\nfrom math import exp\nfrom math import pi\nfrom math import sin\nfrom math import cos\nfrom math import tan\nfrom math import asin\nfrom math import acos\nfrom math import atan\nfrom math import atan2\nfrom math import ceil\nfrom math import floor\nfrom math import sqrt\nfrom math import log\nfrom math import log2\nfrom math import inf\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom heapq import heappush\nfrom heapq import heappop\nfrom heapq import heapify\nfrom heapq import merge\nfrom heapq import nlargest\nfrom heapq import nsmallest\nfrom itertools import accumulate\nfrom collections import Counter\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('1 1') == '2'\nassert solution('1 2') == '3'\n\nassert solution('2 1') == '1'\nassert solution('1 2') == '3'"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\n\nfrom collections import Counter, OrderedDict"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\nassert solution('2 3 3 1 1 2 1 2 3 3') == '1 3 2'\nassert solution('2 3 3 1 1 2 1 2 3 3') == '1 3 2'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2\\n2 1'\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == '3\\n1 3 2'\n\"\"\"\n\n\"\"\"\nTODO:\n    -make the approach more efficient\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n\"\"\"\n\nn, k = map(int, input().split())\nrecieved = list(map(int, input().split()))\nprint(recieved[0])\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n\"\"\"\nimport collections\nimport heapq\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == '2\\n2 1'\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nn, k = list(map(int, sys.stdin.readline().split()))\n\nids = deque(sorted(map(int, sys.stdin.readline().split())))\n\ncount = 0\nmax_count = 0\nwhile ids:\n    max_count = max(max_count, count)\n    current_id = ids.popleft()\n    if count == k:\n        count -= 1\n    else:\n        if ids and ids[0] == current_id:\n            count += 1\n        else:\n            count -= 1\nprint(max_count + 1)\nprint(\" \".join(map(str, ids)))"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'\n\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == test_solution\nprint(solution(data))\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n') == '263'\n\n'''"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\"\"\") == \"263\"\n\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(read_input()) == write_output()\n\"\"\"\nimport math\nimport collections\nimport sys\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_solution\nprint(solution(stdin))\n\n-----\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == 'code'\n\nassert solution('abacaba') == 'abacaba'\nassert solution('dfcbbcfeeedbaea') == 'dfcbbcfeeedbaea'\nassert solution('b') == 'b'\nassert solution('abacaba') == 'abacaba'\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"code4rces\"\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def __init__(self, s: str) -> None:\n        self.s = s\n\n    def solution(self) -> str:\n        counter = Counter(self.s)\n        answers = []\n        for _ in range(int(stdin)):\n            query = list(map(int, stdin.split(' ')))\n            if query[0] == 1:\n                counter[self.s[query[1]-1]] -= 1\n                counter[query[2]] += 1\n                self.s = self.s[:query[1]-1] + query[2] + self.s[query[1]:]\n            else:\n                answers.append(len(set(self.s[query[1]-1:query[2]].lower())))\n        return '\\n'.join(map(str, answers))\n\n    def solution2(self) -> str:\n        counter = Counter(self.s)\n        answers = []\n        for _ in range(int(stdin)):\n            query = list(map(int, stdin.split(' ')))\n            if query[0] == 1:\n                counter[self.s[query[1]-1]] -= 1\n                counter[query[2]] += 1\n                self.s = self.s[:query[1]-1] + query[2] + self.s[query[1]:]\n            else:\n                answers.append(sum([1 for i in set(self.s[query[1]-1:query[2]].lower()) if counter[i] > 0]))\n        return '\\n'.join(map(str, answers))\n\ns = Solution(\"codeforces\")\nprint(s.solution())\nprint(s.solution2())"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 'codeforce'\nassert solution('dfcbbcfeeedbaea') == 'abacbbedbebaeeed'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n\nfrom collections import Counter, defaultdict\nimport bisect\n\ns = stdin[0]\nqueries = int(stdin[1])\n\nfor _ in range(queries):\n    query, *rest = stdin[2:].split()\n    if query == \"1\":\n        position, letter = int(rest[0]), rest[1]\n        s = s[:position] + letter + s[position+1:]\n    else:\n        position1, position2 = int(rest[0]), int(rest[1])\n        if position1 > position2:\n            position1, position2 = position2, position1\n        print(bisect.bisect(sorted(Counter(s[position1:position2]).items(), key=lambda x: x[0]), (letter, )) + position1)\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"code\"\nassert solution(\"aaaaaaaaaa\") == \"a\"\nassert solution(\"abcde\") == \"a\"\nassert solution(\"aaabbb\") == \"a\"\nassert solution(\"b\") == \"b\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacaba') == '3'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 3\nassert solution(\"dfcbbcfeeedbaea\") == 2"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline().strip()\nq = int(sys.stdin.readline())\n\nl = len(s)\n\nd = {}\nfor c in s:\n    if c not in d:\n        d[c] = 0\n    d[c] += 1\n\nfor _ in range(q):\n    line = sys.stdin.readline().strip()\n    if len(line) == 2:\n        c = line[1]\n        d[c] -= 1\n        s = s.replace(c, \"\")\n    else:\n        l, r = map(int, line.split())\n        res = 0\n        for c in s[l - 1: r]:\n            res += d[c]\n        print(res)\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n\nstring = stdin.split()[0]\nq = int(stdin.split()[1])\nqueries = []\nfor i in range(q):\n    queries.append(stdin.split()[i + 2])\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == '3'\n\"\"\"\n\ns = stdin\nq = int(stdin.readline().rstrip())\n\nfor _ in range(q):\n    q = stdin.readline().rstrip().split(' ')\n    l = int(q[0])\n    r = int(q[1])\n    if l == 1:\n        s = s[:l] + q[2] + s[l:]\n    else:\n        s = s[:l] + s[l:r + 1][::-1] + s[r + 1:]\n    print(len(set(s)))\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"154873296\\n\"\n\"386592714\\n\"\n\"729641835\\n\"\n\"863725149\\n\"\n\"975314628\\n\"\n\"412968357\\n\"\n\"631457982\\n\"\n\"598236471\\n\"\n\"247189563\") == \"154873396\\n\" \\\n\"336592714\\n\" \\\n\"729645835\\n\" \\\n\"863725145\\n\" \\\n\"979314628\\n\" \\\n\"412958357\\n\" \\\n\"631457992\\n\" \\\n\"998236471\\n\" \\\n\"247789563\"\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n-----Problem-----\n\nNim zabezpieczenia, w kt\u00f3rym posiadasz odpowiedni\u0105 ilo\u015b\u0107 zasob\u00f3w, kt\u00f3re mog\u0105 wykorzystywa\u0107 w swoim wspomaganem zestawie dzia\u0142a\u0144. Stw\u00f3rz, kt\u00f3ry pozwoli Ci wykorzystywa\u0107 tylko zestawienie dzia\u0142a\u0144.\n\nAutor: Maciej D\u0105browski\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\") == \"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\"\n\n\"\"\"\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\") == \"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\") == \"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\") == \"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\") == \"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"154873296\\n\"\n                \"386592714\\n\"\n                \"729641835\\n\"\n                \"863725149\\n\"\n                \"975314628\\n\"\n                \"412968357\\n\"\n                \"631457982\\n\"\n                \"598236471\\n\"\n                \"247189563\") == '154873396\\n' \\\n       '336592714\\n' \\\n       '729645835\\n' \\\n       '863725145\\n' \\\n       '979314628\\n' \\\n       '412958357\\n' \\\n       '631457992\\n' \\\n       '998236471\\n' \\\n       '247789563'"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"154873296\") == \"154873396\"\n\nassert solution(\"386592714\") == \"336592714\"\n\nassert solution(\"729641835\") == \"729645835\"\n\nassert solution(\"863725149\") == \"863725145\"\n\nassert solution(\"975314628\") == \"979314628\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == '3\\n6\\n8\\n-1\\n9\\n4'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 3\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"9 3\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\""
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '''9 6\n    1 1 1 3 5 3 5 7\n    3 1\n    1 5\n    3 4\n    7 3\n    1 8\n    1 9''') == '''3\n    6\n    8\n    -1\n    9\n    4'''\nassert solution(\n    '''9 6\n    1 1 1 3 5 3 5 7\n    3 1\n    1 5\n    3 4\n    7 3\n    1 8\n    1 9''') == '''6\n    -1\n    8\n    -1\n    9\n    4'''\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 1 3 4 2\\n1 2 3\\n1 3\\n1 4\\n4 3\\n4 4\") == '4'\n\"\"\"\n\n\"\"\"\n\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0434\u0432\u0430 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0433\u043e \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443.\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\nprint(solution(input()))\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n3 5 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == '3'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\n\nn, q = [int(x) for x in stdin.readline().split(' ')]\nadj = [[] for _ in range(n)]\n\nfor i in range(n - 1):\n    a, b = [int(x) - 1 for x in stdin.readline().split(' ')]\n    adj[a].append(b)\n    adj[b].append(a)"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == '3\\n6\\n8\\n-1\\n9\\n4'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3\\n2 1\") == \"1\"\n\"\"\"\nfrom collections import deque\n\nn, q = map(int, stdin.readline().strip().split(' '))\n\nparents = list(map(int, stdin.readline().strip().split(' ')))\n\ngraph = [deque() for _ in range(n)]\n\nfor i in range(n - 1):\n    graph[parents[i] - 1].append(i + 2)"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9''') == '3\\n6\\n8\\n-1\\n9\\n4'\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\nassert solution('1\\n10\\n3\\n5\\n8') == 'YES'\nassert solution('2\\n8\\n4\\n2\\n3') == 'YES'\nassert solution('3\\n7\\n1\\n1\\n5') == 'NO'\nassert solution('4\\n1\\n1\\n1\\n5') == 'YES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(print(solution(str(input()))))"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"NO\"\nassert solution(\"101 101 101 3\") == \"YES\"\nprint(solution(\"5 3 2 8\"))\nprint(solution(\"100 101 102 105\"))\nprint(solution(\"3 2 1 100000000\"))\nprint(solution(\"10 20 15 14\"))\nprint(solution(\"101 101 101 3\"))\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n\nprint(solution(input()))\n\n\n-----\n\nclass Solution:\n    def solve(self, a, b, c, n):\n        return str((n+a+b+c) % 2)\n\n\nSolution.solve(5, 3, 2, 8) == \"YES\"\nSolution.solve(100, 101, 102, 105) == \"YES\"\nSolution.solve(3, 2, 1, 100000000) == \"NO\"\nSolution.solve(10, 20, 15, 14) == \"YES\"\nSolution.solve(101, 101, 101, 3) == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"NO\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n3 2 1 8''') == 'YES'\nassert solution('''5\n100 101 102 105''') == 'YES'\nassert solution('''3 2 1 100000000''') == 'NO'\nassert solution('''10\n20 15 14''') == 'NO'\nassert solution('''101 101 101 3''') == 'YES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n\n-----Explanation-----\n\nFor the first test case, Polycarp can distribute all 8 coins between Alice and Barbara. The number of coins each sister has is:\nAlice: 5\nBarbara: 3\nCerene: 2\n\nIn the second test case, Polycarp can distribute all the coins between Alice and Barbara.\n\nFor the third test case, Polycarp can't distribute all the coins between Alice and Barbara.\n\nThe last test case can be divided into two parts:\n\nAll the coins Polycarp has (10) are given to Cerene, but Cerene has only one coin, so he can't give it to one of the sisters.\n\nAll the coins Polycarp has (101) are given to Barbara, but Barbara has only one coin, so she can't give it to one of the sisters.\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5\\n') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3'\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n\n\"\"\"\n\nfrom collections import deque\n\nn, m = [int(i) for i in stdin.readline().split()]\nx = [int(i) for i in stdin.readline().split()]\n\nprint(*[abs(x[i] - x[i + 1]) for i in range(len(x) - 1)])\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\nassert solution(\"2 10\") == \"3 3\"\nassert solution(\"2 10\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '3 4 6 5'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('2 10') == '3 3'\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == [3, 4, 6, 5]\nassert solution(\"5 5\\n2 1 5 3 5\") == [9, 8, 12, 6, 8]\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == [3, 3]\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '3 4 6 5'\nassert solution('''\n5 5\n2 1 5 3 5\n''') == '9 8 12 6 8'\nassert solution('''\n2 10\n1 2 1 1 2 2 2 2 2 2\n''') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"3 15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"9 12 15 18 14 12 10 6 4\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == 'YES'\nassert solution('7 5\\n1 2\\n1 3\\n2 3\\n4 4\\n4 6\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n') == 'YES'\nassert solution('10 10\\n1 2\\n1 3\\n2 3\\n4 4\\n4 6\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n1 2\\n1 3\\n2 3\\n4 4\\n6 7\\n') == 'YES'\nassert solution('6 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n') == 'YES'\nassert solution('10 10\\n1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('5 3\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2') == 'YES\\nYES\\nYES\\nYES\\nYES'\n\n\"\"\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES' * 5 + 'NO' + 'YES' * 5 + 'NO'\n\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES' * 5 + 'NO' + 'YES' * 5 + 'NO'\n\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES' * 5 + 'NO' + 'YES' * 5 + 'NO'\n\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES' * 5 + 'NO' + 'YES' * 5 + 'NO'\n\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES' * 5 + 'NO' + 'YES' * 5 + 'NO'"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"10 4\\n1 2\\n1 3\\n2 4\\n3 4\\n4 10\\n3 3 8 9 10\\n2 1 3\\n3 3 2 4 5\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\"\nassert solution(\"10 4\\n1 2\\n1 3\\n2 4\\n3 4\\n4 10\\n3 3 8 9 10\\n2 1 3\\n3 2 4 5\\n3 2 1 5\\n3 4 8 2\") == \"NO\\nNO\\nNO\\nNO\"\nassert solution(\"1 1\\n1 1\") == \"NO\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n3 4\") == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1 5\\n3 4 8 2\") == \"YES\"\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\") == \"YES\"\nassert solution(\"4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('3 1\\n1 2\\n2 3') == 'YES'\nassert solution('8 6\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 1\\n1 4\\n1 5\\n5 6\\n2 2\\n2 3\\n3 4\\n3 5\\n4 6\\n2 5\\n4 5\\n6 6') == 'YES\\nNO\\nNO'\nassert solution('4 1\\n1 2\\n2 3\\n3 4') == 'YES'\nassert solution('4 1\\n1 2\\n2 3\\n3 4\\n3 1\\n4 1') == 'YES'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2\\n2 3') == 'YES'\nassert solution('1 2\\n2 3\\n3 4') == 'YES'\nassert solution('1 2\\n2 3\\n3 4\\n4 5') == 'YES'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n5 6') == 'YES'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"4 3\\n1 2\\n2 3\\n2 4\\n3 4\") == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"YES\"\nassert solution(\"4 5\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"5 10\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\nprint(solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\"))"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"3\\n4\\n1 1 1\\n3\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"3\\n4\\n1 1 1\\n3\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n2 3\\n3 4\\nYES\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution('4\\n2\\n1 2 3 4\\n4\\n1 1 2\\n3 4') == 'NO'\nassert solution('4\\n3\\n1 1 1\\n2 2 1') == 'YES'\nassert solution('4\\n2\\n1 2 1\\n4\\n1 1000 101 1000') == 'YES\\n1 2\\n1 3\\n1 4'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 2\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"NO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == 'YES\\n1 3\\n3 5\\n5 4'\nassert solution(\"4\\n3\\n1 1 1\\n4\\n1 2 3 4\\n\") == 'NO'\nassert solution(\"4\\n3\\n1 1 1\\n4\\n1 2 3 4\\n\") == 'YES\\n1 2\\n1 3\\n1 4'"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n1 1\\n0 2\\n1\\n0\\n2\\n2\\n1 1\\n0 2\\n1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == 'YES'\n\nassert solution(\"4\\n3\\n1 2 3\\n4\\n1 1000 101 1000\") == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11101010\") == \"01111010\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"0011111\"\nassert solution(\"11101110\") == \"01011110\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11011010\") == \"0111110\"\nassert solution(\"11101110\") == \"0111111\"\nassert solution(\"1111110\") == \"0011111\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(11101010) == \"0111110\"\nassert solution(11101110) == \"0111111\"\nassert solution(11101100) == \"0011111\"\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1111100') == '0011111'\nassert solution('11011010') == '01011110'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"7 9\") == \"0011111\"\nassert solution(\"1111100\") == \"11100110\"\nassert solution(\"7 11\") == \"1111100\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11011010') == '011110'\nassert solution('7 9') == '11111'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11011010\") == \"0111010\"\nassert solution(\"1111100\") == \"0011111\"\nassert solution(\"11111\") == \"11111\"\nassert solution(\"11101110\") == \"0111011\"\nassert solution(\"11101101\") == \"1110110\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11101010') == '01111010'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11011010\") == \"01011110\"\nassert solution(\"7 9\") == \"0011111\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2\\n1 4\\n2 3\\n3 5\\n2 3\\n5 3\\n4 3\\n1 3\") == \"3\\n1 4\\n5 3\\n\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n2 3\") == \"4\\n1 2 3 5 6\\n\"\nassert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n\") == \"4\\n\"\n\nassert solution(\"7 2\\n7 7\\n1 7\\n1 3\\n1 7\\n3 7\\n2 2\\n2 3\\n4 5\\n3 3\\n3 3\\n5 7\\n2 7\\n2 7\\n5 7\\n1 7\\n5 7\\n1 7\\n\") == \"3\\n1 4 7\\n\"\n\nassert solution(\"7 2\\n7 7\\n1 7\\n1 3\\n1 7\\n3 7\\n2 2\\n2 3\\n4 5\\n3 3\\n3 3\\n5 7\\n2 7\\n2 7\\n5 7\\n1 7\\n5 7\\n1 7\\n\") == \"3\\n1 4 7\\n\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('2 3 3') == '1 2 3'\nassert solution('3 3 3') == '1 2 3'\nassert solution('3 3 3\\n2 3') == '1 2 3'\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('bar') == 'bar'\nassert solution('foobar') == 'foo'\n\n-----Tests-----"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\nprint('Success')"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n\"\"\"\nimport sys\n\nfrom collections import defaultdict\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINE_COUNT = len(INPUT_LINES)\nassert 1 <= INPUT_LINE_COUNT <= 100, f\"Expected 1 <= INPUT_LINE_COUNT <= 100, got: INPUT_LINE_COUNT = {INPUT_LINE_COUNT}\"\nINPUT_LINES = [list(map(int, line.split())) for line in INPUT_LINES]\nassert all(len(line) == 2 for line in INPUT_LINES), \"Expected all lines to be of length 2\"\n\nPRECISION = 100_000\n\nsegments = defaultdict(int)\nfor x1, x2 in INPUT_LINES:\n    for i in range(PRECISION):\n        segments[x1 + i] += 1\n        segments[x2 - i] += 1\n\nsegments = sorted(segments.items(), key=lambda t: t[1], reverse=True)\n\nresult_count = 0\nresult_segments = []\nfor x1, x2 in segments:\n    if x1 <= 0:\n        continue\n\n    if x2 >= INPUT_LINE_COUNT:\n        continue\n\n    if result_count == 0 or result_count == 1:\n        result_count += 1\n        result_segments.append(x1)\n\nprint(result_count)\nprint(' '.join(str(s) for s in result_segments))\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\\n1 4 7\\n'\n\n'''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n7"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\nassert solution(\"3\\n1 1 1\\n-100 -1 -1\") == 0\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\nassert solution(\"3 1 2\\n1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 1 4 3\\n2 2 2 3 4\") == '19'\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == '19'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n\"\"\"\n\nn = int(stdin.readline().strip())\npoints = list(map(int, stdin.readline().strip().split()))\nspeeds = list(map(int, stdin.readline().strip().split()))\n\ndists = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        dists.append(min(abs(points[i] - points[j]), abs(points[i] + speeds[i] * (j - i)) - speeds[j] * j))\nprint(sum(dists))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\nfrom math import inf"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\nassert solution(\"2\\n2 1\\n-3 0\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == '3'\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n-100 2 3\") == '3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2 1\n2 3 2\n1 3 2''') == '1 3 3'\nassert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\n'''\n\nhttps://codeforces.com/problemset/problem/1127/B\n\n'''\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 1 1\\n2 4 1') == '1 2'\nassert solution('4 2\\n3 1 2\\n2 3 2\\n1 3 2') == '1 3 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 2\\n2 1 3\\n3 1 3\") == \"21 7 15 21 3\"\nassert solution(\"5 2\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 2\\n2 1 3\\n3 1 3\") == \"1 3 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import deque\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\nassert solution('1 2\\n1 2') == '0 0'\n\n[Image]\n'''"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n1 2\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\nassert solution(\"8 1\\n1 2\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 1\") == \"8 1\"\nassert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0 0\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\nassert solution('''1 2\n2 3 2\n1 3 2\n''') == '0 0'\nassert solution('''3 3\n1 2 1\n2 3 2\n1 3 2\n''') == '1 3 3'\nassert solution('''1 2\n2 3 2\n1 3 2\n''') == '0 0'\n\n\"\"\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3 \"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 2') == 'YES'\nassert solution('4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4') == 'NO'\nassert solution('1\\n100') == 'YES'\nassert solution('2\\n1 1') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100') == 'YES'\nassert solution('5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'NO'\nassert solution('1 2 2') == 'NO'\nassert solution('2') == 'YES'\nassert solution('1 2 2 3 3 4 5 5 5 6 6 6 6 7') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 5\") == \"NO\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"4\\n1 2 2\") == \"YES\"\nassert solution(\"2\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 4\\n1 3 4 4\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\") == \"NO\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\nt = int(sys.stdin.readline())\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 4\\n5 5 5 5\\n3\\n1 2 4\\n1 3 4 4\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1 3 4 4\\n100\") == \"NO\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 2\\n1 3 4 4\\n100\") == \"NO\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\nassert solution(\"4 6\\n1111\\n1111\") == \"5\"\nassert solution(\"4 7\\n1111\\n11111\") == \"5\"\nassert solution(\"4 8\\n10111\\n11101\") == \"8\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\nassert solution('4 4\\n101010\\n11101') == '101010'\nassert solution('3 2\\n1010\\n11010') == '1010'\nassert solution('3 2\\n1010\\n11010') == '1010'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 101010 1101\") == \"12\"\nassert solution(\"4 5 1010101 11010\") == \"11\"\nassert solution(\"5 7 10101101 111111011011000111\") == \"51\"\nassert solution(\"4 7 1010111 111111011011000111\") == \"41\"\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n\nprint(solution('4 5\\n1010\\n1101'))\nprint(solution('4 4\\n1010\\n1101'))\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == '12'\nassert solution(\"4 5\\n1001\\n10101\") == '11'\n\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\nprint(\"Passed\")\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2') == 'NO'\n\"\"\"\n\nfrom typing import List, Tuple, Generator, Set, Dict, TextIO\nimport sys\nimport math\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n3\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6\") == \"YES\"\nassert solution(\"8\\n10\") == \"NO\"\nassert solution(\"2\\n4\") == \"NO\"\nassert solution(\"2\\n6\") == \"YES\"\n\"\"\"\n\nfrom math import sqrt\nfrom fractions import Fraction as frac\nfrom itertools import count, takewhile\nfrom itertools import combinations as comb\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"10\\n12\") == \"NO\"\nassert solution(\"16\\n18\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"100\\n110\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('1\\n2') == 'NO'\nassert solution('1\\n4\\n1\\n1') == 'YES\\n1 2 3 4'\nassert solution('1\\n8\\n1\\n1') == 'YES\\n1 2 3 4 5 6 7 8'\nassert solution('1\\n10\\n1\\n1') == 'YES\\n1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10\\n') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\\n')\nprint(solution(stdin))\n\n-----Problem-----\n\nFind the number of distinct ways you can make change for a given amount of money, $n$, using $coins = [1, 2,..., M]$.\n\n-----Solution-----\n\n```python\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6\") == \"YES\"\nassert solution(\"8\\n10\") == \"NO\"\nassert solution(\"2\\n1\") == \"NO\"\nassert solution(\"4\\n4\") == \"NO\"\nassert solution(\"8\\n8\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"10\\n8\") == \"YES\\n2 4 1 5\"\nassert solution(\"8\\n10\") == \"NO\"\nassert solution(\"6\\n8\") == \"NO\"\nassert solution(\"4\\n8\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 'NO'\nassert solution('6') == 'YES'\n\"\"\"\nfrom collections import deque\nfrom typing import Deque, List\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n2\n4\n6\n8\n10\n\"\"\") == 'NO\\nYES\\n2 4 1 5\\nNO'\nassert solution(\"\"\"\n1\n4\n5\n5\n5\n5\n\"\"\") == 'NO\\nYES\\n2 4 6 8 1 3 5 11'\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"9\", \"3 1 4 1 5 9 2 6 5\"]) == '5'\nassert solution([\"8\", \"7 6 5 4 3 2 1\"]) == '0'\nassert solution([\"5\", \"1 1 1 1 1\"]) == '0'\nassert solution([\"8\", \"8 7 6 5 4 3 2 1\"]) == '0'\nassert solution([\"9\", \"3 1 4 1 5 9 2 6 5\"]) == '5'\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n9\\n3 1 4 1 5 9 2 6 5') == '5'\n\"\"\"\nfrom typing import List, Set, Tuple"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n1 1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 3\") == 4\nassert solution(\"5 3 1 5 8\") == 4\nassert solution(\"2 5\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6\\n1 1 1 1 1') == '2'\nassert solution('4\\n6\\n1 1 1 1 1') == '1'\nassert solution('4\\n6\\n1 1 1 1 1') == '2'\nassert solution('4\\n6\\n1 1 1 1 1') == '0'\nassert solution('4\\n6\\n1 1 1 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 2 3\\n4\\n1 1 2 2\\n2\\n4\\n1 2 3 4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\"\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1\\n5\\n1 1 1 1\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n\"\"\") == \"5\\n1\\n0\\n4\\n0\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n1 1 1 1 1') == '5'\n\"\"\"\n\n\"\"\"\nfor i in range(int(stdin.readline().strip())):\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    \n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(arr[i:j+1]) == arr[j] * (j - i + 1):\n                cnt += 1\n    print(cnt)\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\nassert solution(\"4\\n5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == '3\\n4\\n2\\n7'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == 3\nassert solution(\"4\\n5\\n1 5\\n2 3\\n2 5\") == 4\nassert solution(\"4\\n5\\n1 5\\n2 3\\n2 5\") == 4\n\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '''\n3\n4\n2\n7\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '7'\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '''\n3\n4\n2\n7\n'''\n\n\n'''\n'''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5') == ''\nassert solution('3\\n1 5\\n2 4\\n2 3') == ''\nassert solution('4\\n1 5\\n2 3\\n2 5\\n3 5') == ''\nassert solution('5\\n1 5\\n2 3\\n2 5\\n3 5') == ''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n\nimport sys\nimport io\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 20\\n23 59') == '1439'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().strip())\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''23 55\n23 0\n0 1\n4 20\n23 59''') == '''5\n60\n1439\n1180\n1'''\nprint('OK')"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '00'\nassert solution('42') == '41'\nassert solution('1\\n42') == '41'\nassert solution('2\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\n32\\"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n23 55\n23 0\n0 1\n4 20\n23 59''') == '5\\n60\\n1439\\n1180\\n1'\nprint('Test passed\\n')\n\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n23 55\n23 0\n0 1\n4 20\n23 59''') == '5\\n60\\n1439\\n1180\\n1'"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURDL\") == \"1 2\"\nassert solution(\"URUDRL\") == \"3 4\"\nassert solution(\"LLDRRL\") == \"3 4\"\nassert solution(\"L\") == \"1 1\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURD\") == \"UR\"\nassert solution(\"LLDDR\") == \"LR\"\nassert solution(\"RRUDU\") == \"RR\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    last = len(s)\n    s = s[1:-1]\n    if s == '':\n        print(-1)\n        continue\n    for c in set(s):\n        if s.count(c) % 2 == 0:\n            continue\n        t = s.replace(c, '')\n        if t[0] == t[-1]:\n            if len(t) < last:\n                last = len(t)\n                ss = t\n    print(1, end=\"\")\n    print(last)"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('URLD') == '2 4'\nassert solution('UDLL') == '1 2'\nassert solution('LLUD') == '2 4'\n\nassert solution('LRUD') == '1 2'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"RUD\") == \"R\"\nassert solution(\"RUDRUD\") == \"RUD\"\nassert solution(\"LLUDDRRLL\") == \"DRLL\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LLDDRRRRR\") == \"RRRR\"\nassert solution(\"RLRRUDDLLDLUURRDULRLDDRR\") == \"RUDDLLDDRR\"\n\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('L') == 'L'\nassert solution('LRUD') == 'LRUD'\nassert solution('LLDDR') == 'LLDDR'\n\nassert solution('LURD') == 'L'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LURLLR') == 'LR'\nassert solution('LURUD') == 'UD'\nassert solution('RRUDU') == 'UD'\nassert solution('LLDDR') == 'DR'"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"LURD\"\nassert solution(\"LLDDR\") == \"LDRRDU\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n\"\"\"\n\nfrom collections import deque\nfrom math import inf"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('L') == 'L'\nassert solution('R') == 'R'\nassert solution('U') == 'U'\nassert solution('D') == 'D'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '3'\nassert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '1'\nassert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '2'\n\n\n\"\"\"\n\nimport sys\nimport collections\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n4 2 4 1 4 3 4') == 3\nassert solution('7\\n4 2 4 1 4 3 4') == 1\nassert solution('7\\n2 1 5 4 3') == 0\nassert solution('7\\n1 1 1 3') == 2\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n1 4 3 4\\n4\\n2 1 5 4 3') == 3\nassert solution('4\\n5\\n1 4 3 4\\n4\\n2 1 5 4 3') == 1\nassert solution('4\\n5\\n1 4 3 4\\n4\\n2 1 5 4 3') == 0\nassert solution('4\\n5\\n1 4 3 4\\n4\\n2 1 5 4 3') == 2\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n1\\n') == '1'\nassert solution('1\\n1\\n2\\n') == '2'\nassert solution('1\\n1\\n2\\n2\\n') == '1'"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == '3\\n1\\n0\\n2'\nassert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == '2\\n1\\n0\\n2'\nassert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == '2\\n1\\n0\\n2'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == '3\\n1\\n0\\n2'\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\"\nassert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"0\"\nassert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    s = list(map(int, sys.stdin.readline().split()))\n    s.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    print(max(n//2-count, 0))\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\"\"\"\n\nfrom itertools import combinations\nfrom typing import List"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\nassert solution(\"5\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"24\"\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n3 4\\n1 4\\n5 6\\n5 7\\n5 8\\n\") == \"21\"\nassert solution(\"5\\n1 2\\n3 4\\n1 4\\n5 6\\n5 7\\n5 8\\n\") == \"0\"\nassert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\\n\") == \"121\"\nassert solution(\"1\\n1337\\n\") == \"0\"\n\n------\n1\n0\n0\n------\n0\n2\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '0'\nassert solution('5\\n4\\n6\\n8\\n7\\n') == '18'\nassert solution('4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\nassert solution('8\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '0'\nassert solution('8\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\\n\") == \"121\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 3\") == \"4\"\nassert solution(\"8\\n1 3\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\nassert solution(\"8\\n9 5 8 1 6 3 4 10\") == \"97\"\nassert solution(\"1\\n1337\") == \"0\"\n\nprint(solution(\"8\\n9 4 1 7 10 1 6 5\"))\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == '6'\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == '18'\nassert solution(\"5 10\\n20 100 50 20 100500\") == '0'\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == '8'\n\n\"\"\"\n\nimport sys\nimport math\nimport random\nfrom collections import deque"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('4 3\\n1 2 1 3\\n10 6') == '6'\n\nassert solution('4 3\\n1 2 1 3\\n10 6') == '6'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == '6\\n18\\n0\\n227\\n8'\n-----\n\nSample Test Cases\n\nInput\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput\n2\n\nInput\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput\n4\n\nInput\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput\n5\n\nInput\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput\n6\n\"\"\"\n\n##################################################\n\"\"\"\n\u672c\u984c\u662f\u7d93\u5e38\u51fa\u73fe\u7684\u984c\u76ee\uff0c\u9700\u8981\u5148\u5c0dinput\uff0c\u5148\u6c42\u51fa\u7e3d\u548c\uff0c\u518d\u4f86\u7528\u6700\u5c0f\u503c\u4e58\u4e0a\u7e3d\u548c\uff0c\u6700\u5f8c\u5c07\u8a72\u6578\u5b57\u4e58\u4e0a\u7e3d\u548c\uff0c\u6700\u5f8c\u8a08\u7b97\u932f\u4e86\u7684\u6b21\u6578\uff0c\u6700\u5f8c\u56de\u50b3\u932f\u4e86\u7684\u6b21\u6578\u3002\n\nInput:\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput:\n2\n\nInput:\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput:\n4\n\nInput:\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput:\n5\n\nInput:\n1\n6 3\n2 2 2 3\n3\n2 1 1\n1\n1\n1\nOutput:\n6\n\n\"\"\"\n\n##################################################\n\nimport sys"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == '6\\n18\\n0\\n227\\n8'\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\\n\") == '0\\n18\\n0\\n227\\n8'\n\n\"\"\"\n\n\"\"\"\n\u672c\u9898\u76ee\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u90fd\u662f\u6b63\u6574\u6570\uff0c\u5176\u4e2d\u4e00\u4e9b\u6570\u662f\u4e0d\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\u7684\u3002\u6211\u4eec\u8981\u627e\u5230\u6700\u5c0f\u7684x\u4f7f\u5f97\uff0c\u6bcf\u4e2a\u6570\u4e58\u4ee5x\u90fd\u80fd\u88ab\u5212\u5206\u4e3ak\u7684\u500d\u6570\u3002\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u641c\u7d22\u4e00\u4e2ax\uff0c\u7136\u540e\u53ea\u8981\u641c\u7d22\u4e00\u4e2a\u5143\u7d20\uff0c\u5728\u8fd9\u4e2a\u5143\u7d20\u540e\u9762\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u4e0d\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\uff0c\u90a3\u4e48\u90a3\u4e2ax\u5c31\u662f\u6700\u5c0f\u7684\u3002\n\n\u8fd9\u4e2ax\u53ef\u4ee5\u7531\u4e24\u79cd\u5212\u5206\u65b9\u5f0f\u6765\u8fdb\u884c\uff1a\n1. \u5728\u6570\u7ec4\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u5212\u5206\u6bcf\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e0d\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\u3002\n2. \u5728\u6570\u7ec4\u4e2d\u627e\u5230\u4e00\u4e2a\u5143\u7d20\uff0c\u5212\u5206\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u524d\u9762\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e0d\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u641c\u7d22\u4e00\u4e2ax\uff0c\u7136\u540e\u53ea\u8981\u641c\u7d22\u4e00\u4e2a\u5143\u7d20\uff0c\u5728\u8fd9\u4e2a\u5143\u7d20\u540e\u9762\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u4e0d\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\uff0c\u90a3\u4e48\u90a3\u4e2ax\u5c31\u662f\u6700\u5c0f\u7684\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6bcf\u6b21\u53ea\u80fd\u5212\u5206\u5230\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\u6bcf\u6b21\u641c\u7d22x\u65f6\uff0c\u6211\u4eec\u5206\u522b\u641c\u7d22\u6570\u7ec4\u4e2d\u7684\u524d\u540e\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\u3002\n\n\u5176\u5b9e\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5728\u641c\u7d22x\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6700\u591a\u53ea\u4f1a\u641c\u7d222n\u4e2a\u5143\u7d20\u3002\n\n\u5bf9\u4e8e\u641c\u7d22\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u4f1a\u641c\u7d22\u6570\u7ec4\u4e2d\u7684\u524d\u540e\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\u3002\n\n\u5bf9\u4e8e\u641c\u7d22\u7b2c\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u4f1a\u641c\u7d22\u6570\u7ec4\u4e2d\u7684\u524d\u540e\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u80fd\u5212\u5206\u6210k\u7684\u500d\u6570\u3002\n\n\u8fd9\u6837\u641c\u7d22\u5b8c\u6bd5\u4e4b\u540e\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u72b6\u6001\uff1a\n\n\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684x\uff0c\u90a3\u4e48\u90a3\u4e2ax\u53ef\u4ee5\u5212\u5206\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u6700\u5c0f\u7684x\u5c31\u662f\u6240\u6709\u5143\u7d20\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002\n\u5982\u679c\u6211\u4eec\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684x\uff0c\u90a3\u4e48\u8fd9\u4e2a"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == '6'\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == '18'\nassert solution(\"5 10\\n20 100 50 20 100500\") == '0'\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == '8'"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '5 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9'\n    ) == '6'\n\nassert solution(\n    '5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8'\n    ) == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 1 3') == '6'\nassert solution('10 6\\n8 7 1 8 3 7 5 10 8 9') == '18'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\n\n\nassert solution('4 3\\n1 2 1 3') == '6'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"6\\n18\\n0\\n227\\n8\"\n-----"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n2"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[1,2,3]\\n[1,1]\") == '1'\nassert solution(\"[1,2]\\n[1,2,3]\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n1\n2\n''') == '1'\n\nassert solution('''\n1\n2\n''') == '1'\n\nassert solution('''\n1\n2\n''') == '2'\n\nassert solution('''\n1\n2\n''') == '2'"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3') == '1\\n1'\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('2\\n2') == '2'\nassert solution('1\\n2\\n3\\n1\\n2') == '2'\nassert solution('2\\n2\\n3\\n1\\n2') == '2'\nassert solution('1\\n2\\n3\\n1\\n2\\n3\\n1\\n2') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == 1\nassert solution(\"1 1\") == 1\nassert solution(\"1 1 2 2\") == 2\nassert solution(\"1 2 2\") == 2\nassert solution(\"1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n2') == '1'\nassert solution('2 1\\n1') == '1'\nassert solution('2 3\\n3 1') == '2'\nassert solution('1 1\\n1') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\\n2\\n3\\n2''') == '1'\nassert solution('''1\\n2\\n3\\n2\\n1\\n1''') == '2'\nassert solution('''1\\n2\\n3\\n1\\n2\\n1''') == '2'\nassert solution('''1\\n2\\n3\\n1\\n2\\n1\\n1''') == '2'\nassert solution('''1\\n2\\n3\\n1\\n2\\n1\\n2\\n1''') == '3'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[1, 2, 3], [1, 1]\") == 1\nassert solution(\"[1, 2], [1, 2, 3]\") == 2\nassert solution(\"[1, 2, 3], [1, 1]\") == 1\nassert solution(\"[1, 2], [1, 2, 3]\") == 2\nassert solution(\"[1, 2, 3], [1, 1]\") == 1\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2,2') == 1\nassert solution('2,3') == 2\nassert solution('1,3') == 1\nassert solution('3,5') == 1\nassert solution('2,1') == 1\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\nassert solution(\"8\") == [1,8,36,108,81,45,16,1]\n\"\"\"\n\n\nclass Solution:\n    def getRow(self, n):\n        if n == 0:\n            return [1]\n        elif n == 1:\n            return [1, 1]\n        else:\n            row = [1, 1]\n            for i in range(1, n):\n                row = [1] + [row[j] + row[j + 1] for j in range(0, len(row) - 1)] + [1]\n            return row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('0') == [1]\nassert solution('1') == [1,1]\nassert solution('2') == [1,2,1]\nassert solution('3') == [1,3,3,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\nprint(solution(\"3\"))\n\nprint(\"-----\")\nassert solution(\"4\") == [1, 4, 6, 4, 1]\n\nprint(solution(\"4\"))\n\nprint(\"-----\")\nassert solution(\"5\") == [1, 5, 10, 10, 5, 1]\n\nprint(solution(\"5\"))\n\nprint(\"-----\")\nassert solution(\"6\") == [1, 6, 15, 20, 15, 6, 1]\n\nprint(solution(\"6\"))\n\nprint(\"-----\")\nassert solution(\"7\") == [1, 7, 21, 35, 35, 21, 7, 1]\n\nprint(solution(\"7\"))\n\nprint(\"-----\")\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> [int]:\n        pascal = [[1],[1,1]]\n        for i in range(2, rowIndex + 1):\n            curr = [1]\n            for j in range(len(pascal[-1]) - 1):\n                curr.append(pascal[-1][j] + pascal[-1][j + 1])\n            curr.append(1)\n            pascal.append(curr)\n        return pascal[rowIndex]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('4') == [1,4,6,4,1]\nassert solution('5') == [1,5,10,10,5,1]\n\"\"\"\n\n\nclass Solution:\n    \"\"\"\n    O(n) time\n    O(1) space\n    \"\"\"\n    def pascals_triangle_row(self, rowIndex: int) -> list[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n\n        row = [1, 1]\n        for _ in range(2, rowIndex + 1):\n            row = [1] + [row[i] + row[i + 1] for i in range(len(row) - 1)] + [1]\n        return row\n\n\nclass Solution2:\n    \"\"\"\n    O(n^2) time\n    O(n) space\n    \"\"\"\n    def pascals_triangle_row(self, rowIndex: int) -> list[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n\n        row = [1, 1]\n        for _ in range(2, rowIndex + 1):\n            for i in range(len(row) - 1):\n                row[i + 1] = row[i] + row[i + 1]\n            row.insert(0, 1)\n        return row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        triangle = []\n        if numRows == 1:\n            return [[1]]\n        triangle.append([1])\n        triangle.append([1, 1])\n        if numRows == 2:\n            return triangle\n        for i in range(2, numRows):\n            temp = [1] * (i + 1)\n            for j in range(1, len(temp)):\n                temp[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n            triangle.append(temp)\n        return triangle\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == [1, 3, 3, 1]\nprint('Test pass.')"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        # count the 1s\n        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n >>= 1\n        return count\n\nsolution = Solution().hammingWeight\n\nassert solution(0b00000000000000000000000000001011) == 3\nassert solution(0b111111111111111111111111111111101) == 31\n\nprint('PASSED')\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\nassert solution(\"1100110011001100110011001100110011\") == 31\nassert solution(\"1100110011001100110011001100110011\") == 31\n\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            n &= (n - 1)\n            count += 1\n        return count\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        bits = 0\n        while n:\n            bits += n & 1\n            n >>= 1\n        return bits"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '1'\nassert solution(2) == '10'\nassert solution(3) == '11'\nassert solution(127) == '111'\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\nassert solution(\"0101010101010101010101010101101\") == 22\nassert solution(\"10111111111111111111111111111101\") == 22\n\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000010111101') == 5\nassert solution('11111111111111111111111111111101') == 31\nassert solution('11111111111111111111111111111110') == 30\nassert solution('1011110110111101111111101111111110') == 49\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000010101010') == 2\nassert solution('111111111111111111111111111111101') == 31\nassert solution('111111111111111111111111111111110') == 31\nassert solution('101111011111111111111111111111110') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1\") == '1'\nassert solution(\"100\") == '1'\nassert solution(\"101\") == '2'\nassert solution(\"110\") == '1'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[1,2,3]\") == \"[1,2,4]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[9]\") == \"[1,0]\"\nassert solution(\"[9,9]\") == \"[1,0,0]\"\nassert solution(\"[9,9,9]\") == \"[1,0,0,0]\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution( '123') == '124'\nassert solution( '321') == '322'\nassert solution( '999') == '1000'\nassert solution( '13') == '14'\nassert solution( '00') == '1'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1\n2\n3''') == '''1\n2\n4'''\nassert solution('''0\n1\n2''') == '''1\n2\n3'''\nassert solution('''4\n3\n2\n1''') == '''4\n3\n2\n2'''\nassert solution('''9\n9\n9\n9''') == '''1\n0\n0\n0'''\nassert solution('''0\n0\n0''') == '''1\n0\n0'''\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1,2,3\") == \"1,2,4\"\nassert solution(\"123,456\") == \"124,567\"\nassert solution(\"9,9,9\") == \"1,0,0,0\"\n\nfrom typing import List"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123345\") == \"123346\"\nassert solution(\"999999999\") == \"10000000\"\n\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1,2,3\") == \"1,2,4\"\nassert solution(\"4,3,2,1\") == \"4,3,2,2\"\nassert solution(\"42,23,52,32,29\") == \"43,24,53,33,30\"\nassert solution(\"43,24,53,33,30\") == \"44,25,54,34,31\"\nassert solution(\"0,0,0,0,0\") == \"1,0,0,0,0\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"13\"\nassert solution(\"1,2\") == \"1,2\"\nassert solution(\"1,2,3\") == \"1,2,4\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12') == '13'\nassert solution('123') == '124'\nassert solution('9') == '10'\nassert solution('11') == '12'\nassert solution('971') == '972'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123') == '124'\nassert solution('987') == '988'\nassert solution('112') == '113'\nassert solution('0011') == '0110'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1,2,3\") == \"1,2,4\"\nassert solution(\"1,9,9,9,0\") == \"2,0,0,0,1\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == '4'\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 1) == 4\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 4') == '8'\nassert solution('3 0') == '3'\nassert solution('-1 -2') == '-3'\nassert solution('-1 1') == '0'\n\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n') == '4'\nassert solution('1 1\\n') == '0'\nassert solution('1 0\\n') == '0'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n\") == \"4\\n\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '4'"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\n\nfrom typing import List\n\nimport numpy as np"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\nimport sys\n\nfrom decimal import Decimal\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == 3\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nSolution should return the number of points in the plane with a distance from the origin <= D. To do this, \nit is sufficient to simply compute the sum of the square of each point's coordinates.\n\nComputing the sum of squares of each point's coordinates is done by calculating the sum of the squares of \nthe absolute values of each point's x and y coordinates. The sum of the squares of absolute values is \nsimply the square of the sum of the absolute values.\n\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == 3\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nn, d = [int(x) for x in input().split()]\na = []\nfor _ in range(n):\n    a.append([int(x) for x in input().split()])\ncount = 0\nfor i in range(len(a)):\n    for j in range(i+1, len(a)):\n        if ((a[i][0]-a[j][0])**2 + (a[i][1]-a[j][1])**2)**0.5 <= d:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4 5\\n0 5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12\\n') == 'Yes'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12') == 'Yes'\n\n-----Explanation-----\nN is 12, and f(12) is 3. Therefore, 12 is a Harshad number.\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\nassert solution('3 5 -1') == '12\\n8\\n10'\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n3 5 -1''') == '''12\n8\n10'''\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\n\"\"\"\nimport sys"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\nassert solution('3 0 0') == '0\\n0\\n0'\nassert solution('0 0 0') == '0\\n0\\n0'\n\"\"\"\n\nn = int(stdin.readline())\narray = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 5 -1\") == '12\\n8\\n10'\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\ncost = [abs(a - b) for a, b in zip([0] + A, A + [0])]\nprint(*[sum(cost[:i+1]) for i in range(N)])\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\nassert solution('5 -1') == '11\\n6'\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\nassert solution(\"3 1 -1\") == \"7\\n4\\n5\"\nassert solution(\"6 5 4\") == \"8\\n9\\n7\\n10\\n12\"\nassert solution(\"4 5 1\") == \"8\\n6\\n7\\n8\"\nassert solution(\"4 5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\nassert solution('b') == 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\"\n\n\"\"\"\nGiven a string S, print the number of times the string \"hackerrank\" appears anywhere in the given string.\n\nFor example, given the string:\n\n\"HackerRank.com presents \"Cracking the Coding Interview\".\"\n\nThe substring we consider is:\n\n\"Cracking the Coding Interview\"\n\nThe test case will always be valid; there will be at least one \"hackerrank\" in the string.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases.\nThe description of T test cases follows.\nThe first and only line of each test case contains a string S.\n\n-----Output-----\nFor each test case, print the number of times hackerrank appears in the string.\n\n-----Sample Input-----\n4\nHackerRank.com presents \"Cracking the Coding Interview\"\nHackerRank.com presents \"HackerRank.com presents \"Cracking the Coding Interview\"\nHackerRank.com presents \"HackerRank.com presents \"Cracking the Coding Interview\"\n\nSample Output\n1\n2\n3\n4\n\n-----Explanation-----\nFor each test case, print the number of times hackerrank appears in the string.\n\n\"\"\"\n\n\n\"\"\"\nGiven a number N, find the number of digits in it.\n\n-----Input-----\nThe first and only line of input contains a single integer N (1 \u2264 N \u2264 999999999)\n\n-----Output-----\nPrint the number of digits in N.\n\n-----Sample Input-----\n12345\n\n-----Sample Output-----\n5\n\n\"\"\"\n\n\"\"\"\nGiven an array of size N, find the most common element.\nThe most common element is the element that appears more than N/2 times.\n\nYou may assume that the array is non-empty and the most common element \nalways exist in the array.\n\n-----Input-----\nThe first and only line of input contains a single integer N (1 \u2264 N \u2264 100) \ndenoting the size of the array.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100).\n\n-----Output-----\nPrint a single integer denoting the most common element.\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n5\n\"\"\"\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\n\"\"\"\n\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\"\"\"\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\n\"\"\"\n\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\n\"\"\"\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\n\"\"\"\n\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\n\"\"\"\n\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\n\"\"\"\n\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list.\n\n-----Output-----\nPrint a single line of N space-separated integers denoting the sorted list.\n\n-----Sample Input-----\n5\n2 3 1 3 2\n\n-----Sample Output-----\n1 2 2 3 3\n\n\"\"\"\n\n\n\"\"\"\nGiven a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.\n\n-----Input-----\nThe first and only line of input contains a single integer N (3 \u2264 N \u2264 10000) \ndenoting the number of elements in the list.\nThe next line contains N space-separated integers A1, A2,..., AN (1 \u2264 Ai \u2264 100) \ndenoting the elements in the list."
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(chr(x)) == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'vowel'\nassert solution('c') == 'consonant'\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"c\") == \"vowel\"\nassert solution(\"d\") == \"consonant\"\nassert solution(\"e\") == \"vowel\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('WWBWBWBWBW') == '2'\nassert solution('WWBBBBBBW') == '0'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == 1\nassert solution(\"WWBBWBW\") == 4\nassert solution(\"BWBWBWBW\") == 0\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''BBBWW''') == '1'\nassert solution('''BWBWBWBW''') == '4'\nassert solution('''BBWBWBWBW''') == '1'\nassert solution('''WBBBBBBBW''') == '0'\nassert solution('''WBWBWBWBW''') == '1'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBBBBBBW\") == \"1\"\nassert solution(\"WWWWBBWBWWW\") == \"1\"\nassert solution(\"BWBWBWBW\") == \"1\"\nassert solution(\"BWBWBWBW\") == \"1\"\nassert solution(\"WBWBWBWB\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BBW') == '1'\nassert solution('BBWBW') == '2'\nassert solution('WWWWBBBW') == '3'\n\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 22\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('6 37') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 34') == 'No'\nassert solution('1 2') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\nimport sys\n\nimport sys\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 1''') == 'Yes'\nassert solution('''1 2''') == 'No'\nassert solution('''3 4''') == 'No'\nassert solution('''3 6''') == 'Yes'\nassert solution('''3 10''') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 21') == 'Yes'\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(\"Yes\" if int(str(a) + str(b)) ** 0.5 == int(a**0.5 + b**0.5) else \"No\")\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n') == 'No'\nassert solution('1 21\\n') == 'Yes'\nassert solution('5 9\\n') == 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(print())"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\\n\") == \"1\\n\"\nassert solution(\"2 1 4 1 5 9\\n\") == \"3\\n\"\nassert solution(\"4 1 2 3\\n\") == \"1\\n\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 4 1 5 9 2\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 4 1 5 9 2') == '4'\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\n\"\"\"\nIn this problem, we need to make optimal choices.\nThe optimal choice is to add 1 to each of the elements and subtract 1 from the larger of them.\nSo, for i, we need to know which element is larger among the last 3 elements.\nTo find this, we can count the number of 3 elements that are less than the current element.\nSo, we need to keep track of 3 numbers: the number of elements less than the current element,\nthe number of elements less than the number of elements less than the current element,\nand the number of elements less than the number of elements less than the number of elements less than the current element.\nWe can then choose which of these numbers is largest to obtain the optimal choice.\n\nThe solution is straightforward. We initialize 2 variables to count the 3 elements,\nthe number of elements less than the current element and the number of elements less than the number of elements less than the current element.\nIf the current element is the largest, we can increase the counter of the number of elements less than the number of elements less than the number of elements less than the current element.\nOtherwise, if the current element is the second largest, we can increase the counters of the number of elements less than the number of elements less than the current element\nand the number of elements less than the current element.\nOtherwise, if the current element is the third largest, we can increase the counter of the number of elements less than the current element.\nWe then print the maximum of the counters, which is the maximum number of elements with a value of X.\n\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input().split())\n\n\"\"\"\n\nN = int(input())\na = [int(x) for x in input().split()]\n\nmax_count = 0\nfor x in set(a):\n    count = a.count(x)\n    if count > max_count:\n        max_count = count\n\nprint(max_count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('2\\n1\\n2') == '2'\nassert solution('3\\n2\\n3\\n4\\n3') == '5'\n'''\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 4 1 5 9 2\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 3\") == \"4\"\nassert solution(\"5 3 2 3 5\") == \"2\"\nassert solution(\"5 3 2 3 5 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 4) == \"5\"\n\"\"\"\n\nn = int(stdin.readline())\na = int(stdin.readline())\n\nprint(n * n - a)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n4') == '5'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1\") == \"0\\n\"\nassert solution(\"1\\n2\") == \"1\\n\"\nassert solution(\"1\\n3\") == \"1\\n\"\nassert solution(\"2\\n2\") == \"1\\n\"\nassert solution(\"2\\n3\") == \"1\\n\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1\\n') == '5'\nassert solution('3\\n4\\n') == '5'\n\"\"\"\n\nn, m = input().split()\nn = int(n)\nm = int(m)\n\nprint(n ** 2 - (m - 1))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"2\\n5\") == \"5\"\nassert solution(\"5\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nN = int(stdin.readline())\nA = int(stdin.readline())"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '5'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"3\\n8\") == \"1\"\nassert solution(\"3\\n2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 6\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == 'YES'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('4 4 5') == 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"4 2 6\") == \"NO\"\nassert solution(\"4 6 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"5 5 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6') == 'YES'\n\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2 4 6) == \"YES\"\nassert solution(3 2 5) == \"NO\"\nassert solution(1 1 2) == \"YES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('2 3 6') == 'NO'\nassert solution('3 3 2') == 'NO'\n\n\"\"\"\n\nfrom functools import reduce\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('3 2 1') == 'NO'\nassert solution('4 4 6') == 'YES'\nassert solution('6 5 4') == 'NO'"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\nassert solution('1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n\nn = input()\nprint(\"Yes\" if \"9\" in n else \"No\")\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29') == 'Yes'\nassert solution('27') == 'No'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == 'Yes'\nassert solution(\"13\") == 'No'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '29') == 'Yes', 'Answer is Yes'\nassert solution(\n    '13') == 'No', 'Answer is No'\nassert solution(\n    '55') == 'Yes', 'Answer is Yes'\nassert solution(\n    '19') == 'No', 'Answer is No'\nassert solution(\n    '43') == 'Yes', 'Answer is Yes'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'No'\nassert solution('1') == 'No'\nassert solution('09') == 'No'\nassert solution('29') == 'Yes'\nassert solution('11') == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('29') == 'Yes'\nassert solution('18') == 'No'\nassert solution('91') == 'Yes'\nassert solution('15') == 'Yes'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n\nimport math\n\nn, m, x = map(int, input().split())\ntolls = list(map(int, input().split()))"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('6 5 2\\n1 2 3\\n2 3 4\\n3 4 5') == '3'\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('7 3 6\\n6 2 4\\n5 4 6\\n4 5 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 0') == '1'\nassert solution('5 3 3\\n1 2 4') == '1'\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 4\\n\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 2\\n3 1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3\") == \"0\"\n\"\"\"\n\nimport sys\nimport os\nfrom typing import List\n\nclass Solution:\n    def minCostPath(self, cost: List[List[int]]) -> int:\n        # space: O(n)\n        if not cost or not cost[0]:\n            return 0\n        n = len(cost)\n        dp = [[0] * n for _ in range(n)]\n        # base case\n        dp[0][0] = cost[0][0]\n        for i in range(1, n):\n            dp[0][i] = dp[0][i - 1] + cost[0][i]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + cost[i][0]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        return dp[n - 1][n - 1]"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 3 3\\n1 2 4\"\n) == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\n\"\"\"\n\nH, W = [int(n) for n in stdin.split()]\ns = [list(stdin.split()[1:])]\n\nfor i in range(1, H):\n    s.append(stdin.split()[i * W + 1:i * W + 1 + W])\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == 'Yes'\n\"\"\"\n\n\n\n\"\"\"\nGiven a grid with H rows and W columns, each square can be painted with one of the three colours: red, blue or green. Your task is to paint the grid with the minimum number of colours such that no two adjacent squares have the same colour.\n\nYou can paint the grid colour by colour in any order you like. However, you cannot change colour of a painted square, i.e. once you have painted a square with a colour, you must paint it with that same colour again.\n\nInput Format\n\nThe first line of input contains a single integer H denoting the number of rows in the grid.\nThe next line contains a single integer W denoting the number of columns in the grid.\nThe next H lines (where 1<=i<=H) each contain W integers of the form {0, 1, 2} indicating the colour of the corresponding row of the grid.\n\nConstraints\n\n1<= H <= 50\n1<= W <= 50\n0<= s_{i,j} <= 2\n\nOutput Format\n\nPrint a single line containing either Yes or No, depending on whether it is possible to paint the grid with the minimum number of colours.\n\nSample Input 0\n\n3\n3\n0 1 2\n1 1 2\n0 0 2\n\nSample Output 0\n\nYes\n\nSample Input 1\n\n4\n3\n0 0 0\n0 0 0\n0 0 0\n\nSample Output 1\n\nNo\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 3\n.#.\n###\n.#.\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"3 3\n###\n.##\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n#.#\\n###\\n.#.\") == 'Yes'\nassert solution(\"3 3\\n###\\n###\\n###\") == 'No'\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('###\\n#..\\n#..\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.\\n###\\n.#.\") == \"Yes\"\nassert solution(\"3 3\\n.#\\n###\\n.#.\") == \"No\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == \"Yes\"\nprint(solution(stdin))\n\"\"\"\n\n\"\"\"\nGiven a string of digits, determine whether the digits are in ascending order. \n\nWe will be using the following problem to test your solution.\n\nGiven a string of digits, determine whether the digits are in ascending order.\n\nFor example:\n\n\"12345\" => True\n\"12321\" => True\n\"13245\" => False\n\"123450\" => False\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\nassert solution('3 3\\n.#.\\n###\\n#.#') == 'No'\n\"\"\"\nimport sys"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\nfrom fractions import gcd\nfrom collections import deque"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('100 100 100') == 'No'\nassert solution('1 1 1') == 'Yes'\nassert solution('1 1 0') == 'No'\nassert solution('10 10 10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nThis problem is about finding the minimum number of packs to be distributed such that each student gets the same number of candies.\n\nLet f(i, j) denote the minimum number of packs to be distributed such that the first student gets i candies, the second student gets j candies, and the third student gets the remaining candies.\n\nFor example, f(10, 30) is 1, because if we distribute the packs so that each student gets 10 candies, then the third student gets 10 candies.\n\nLet us denote f(i, j) by Fi.\n\nNote that for every i, j, there is an optimal solution that makes f(i, j) = 1.\n\nFrom any optimal solution, we can always construct the next optimal solution by giving one more candy to each student. That is, f(i + 1, j) = 1 + f(i, j - 1).\n\nFrom any solution, we can always construct the next solution by giving one more candy to the first student and giving two more candies to the second student. That is, f(i, j + 1) = 1 + f(i - 1, j - 1) + f(i, j - 2).\n\nThus, from any solution, we can always construct the next solution by giving one more candy to the first student and giving two more candies to the second student. That is, f(i, j) = 1 + f(i - 1, j - 1) + f(i, j - 2).\n\nThus, we can construct an optimal solution by first constructing the optimal solution for the case when the first student gets i candies and the second student gets j candies.\n\nNow we construct the optimal solution for the case when the first student gets i - 1 candies and the second student gets j - 1 candies.\n\nBy using dynamic programming, we can easily construct the optimal solution for the case when the first student gets i candies and the second student gets j candies.\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 30 20') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 20 30\") == \"Yes\"\nassert solution(\"3 5 2\") == \"No\"\nassert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"10 10 20\") == \"Yes\"\nassert solution(\"3 5 3\") == \"Yes\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, stdin.read().split())"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 8 7 1\"\n) == \"Left\"\n\"\"\"\nimport unittest"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == 'Left'\nprint(solution('3 8 7 1'))"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 7 1') == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\n\"\"\"\n\nfrom collections import Counter\n\nstdin = '''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n'''\n\nn = int(input())\n\nstr_list = []\n\nfor _ in range(n):\n    str_list.append(input())\n\nstr_list = [s.split() for s in str_list]\n\ndict_list = []\n\nfor str_elem in str_list:\n    dict_list.append(dict(zip(list(range(1, len(str_elem))), str_elem)))\n\ndict_list = [Counter(dict_elem) for dict_elem in dict_list]\n\ncnt_dict = dict(zip(list(range(1, len(str_list))), dict_list))\n\ndict_keys = list(range(1, len(cnt_dict)))\n\ndict_keys.reverse()\n\nfor dict_key in dict_keys:\n    if '1' not in cnt_dict[dict_key]:\n        del cnt_dict[dict_key]\n\ndict_keys.reverse()\n\ndict_keys = list(cnt_dict.keys())\n\nkeys = list(range(1, len(cnt_dict)))\n\nkeys.reverse()\n\nfor key in keys:\n    if key in dict_keys:\n        dict_keys.remove(key)\n\nkeys.reverse()\n\ndict_keys = list(cnt_dict.keys())\n\ndict_keys = list(cnt_dict.keys())\n\nmax_profit = 0\n\nfor key in dict_keys:\n    for value in dict_list[key].values():\n        if value == '0':\n            max_profit += 1\n            break\n\nprint(max_profit)\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == 8\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == 8\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import permutations\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == '8'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nlines = sys.stdin.readlines()\n\nn = int(lines[0])\nnumbers = [0] * n\nfor i in range(1, len(lines)):\n    line = lines[i].split()\n    for j in range(len(line)):\n        numbers[i-1] += int(line[j])\n\nopen_per = defaultdict(int)\nfor i in range(n):\n    for j in range(n):\n        if numbers[i] >= 0:\n            open_per[i] += numbers[j]\n\nans = 0\nfor i in range(n):\n    ans = max(ans, open_per[i] + numbers[i])\n\nprint(ans)\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\nassert solution('2\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2 0 1 1\\n1 2 3 4') == '2'\nassert solution('5\\n1 1 0 1 0 0 1 0 1\\n1 2 3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0 1 1 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\nassert solution('2 1 0 0 1 0 0 1 0 1 1\\n1 2 3 4 5 6 7 8 9 -2 -3 4 -2') == '6'\nassert solution('2 1 0 0 0 1 0 0 1 0 1\\n1 2 3 4 5 6 7 8 9 -2 -3 4 -2') == '6'\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1 1 0 0 0 1 0 1\") == \"8\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('12345') == 'No'\nassert solution('1234') == 'No'\nassert solution('12-34') == 'No'\nassert solution('1-234') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"278-5480\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 5\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"No\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-1020\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"100-000\") == \"No\"\nassert solution(\"100-0\") == \"No\"\nassert solution(\"100-00\") == \"No\"\nassert solution(\"100-0\") == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"17-1654\") == \"No\"\nassert solution(\"19-2604\") == \"No\"\n\n------Solution------\na,b = map(int,stdin.split(\" \"))"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('10-10') == 'Yes'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('269-6650') == \"Yes\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\") == \"1\"\nassert solution(\"1 5 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 6\") == '1'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 2 6\"\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 2 5') == '2'\nassert solution('3 2 6') == '1'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2 6''') == 1\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 6\\n') == '1'\n\"\"\"\n\n\nfrom unittest import TestCase\n\n\nclass SolutionTestCase(TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 6') == '1'\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(expected_output)\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\nassert solution('5 20 10') == '10\\n20'\nassert solution('1 100 100') == '100'\nassert solution('1 100 100') == '100'\n\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\nA, B, K = map(int, input().split())\n\nnumbers = list(range(A, B+1))\nnumbers.sort()\n\nsmallest = numbers[:K]\nlargest = numbers[-K:]\n\nprint(\"\\n\".join(str(x) for x in smallest))\nprint(\"\\n\".join(str(x) for x in largest))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 8 2\n''') == '''3\n4\n7\n8\n'''\n\nassert solution('''1 2 3\n''') == '''1\n2\n3\n'''\n\nassert solution('''1 2 9\n''') == '''1\n2\n9\n'''\n\nassert solution('''1 2 100\n''') == '''1\n2\n100\n'''\n\nprint('Test pass.')\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\nassert solution('1 2 3') == '1\\n3'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Intermediate Contest\") == \"AIC\"\nassert solution(\"AtCoder Senior Contest\") == \"ASC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\n-------\n\n\n\nWrite 3 lines of code to test the correctness of solution:\nA string of length 1 or greater, where the first character is an uppercase English letter, and the second and subsequent characters are lowercase English letters.\n\n-----Constraints-----\n - The length of s is between 1 and 100, inclusive.\n - The first character in s is an uppercase English letter.\n - The second and subsequent characters in s are lowercase English letters.\n\n-----Input-----\nAtCoder s Contest\n\n-----Output-----\nAtCoder s Contest\n\nThe contest in which you are participating now.\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('AtCoder s Contest') == 'ABC'\nassert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 4') == 'YES'\n'''\n\nfrom math import ceil\n\na, b, x = map(int, input().split())\n\nx = x//2\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a=3, b=5, x=4) == 'YES'\nassert solution(a=3, b=5, x=3) == 'NO'\nassert solution(a=3, b=5, x=5) == 'YES'\nassert solution(a=3, b=5, x=6) == 'NO'\n\n\"\"\"\n\n\"\"\"\nfrom typing import List\n\nfrom utils import main\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 4') == 'YES'\nassert solution('3 5 6') == 'NO'\nassert solution('1 100 100') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 4\\n') == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('7 2 3') == 'NO'"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 4') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\nIf there are two cats among the A = 3 animals, there are X = 1 cat in total.\nassert solution(\"1 2 3\") == \"NO\"\n\nIf there are two cats among the B = 2 animals, there are X = 2 cat in total.\nassert solution(\"1 2 4\") == \"YES\"\n\nIf there are two cats among the A = 4 animals, there are X = 1 cat in total.\nassert solution(\"4 5 2\") == \"YES\"\n\nIf there are four dogs among the A = 3 animals, there are X = 0 dog in total.\nassert solution(\"4 5 4\") == \"NO\"\n\nIf there are two dogs among the B = 3 animals, there are X = 2 dog in total.\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 17') == '83'"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123, 456) == '922'\nassert solution('100 17',) == '922'\nassert solution(20,10) == '16'\nassert solution(5,1) == '5'\nassert solution(10,10) == '0'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(\"Passed\")\n\n----Solution----\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"./sample/input.txt\") == \"83\"\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''100 17\n''') == '83'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 17') == '83'\nprint(solution('100 17'), '83')\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"100 17\"\n) == \"83\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 17') == 83"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 3\") == \"24\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"120\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\nassert solution(\"2 1000000000 1000000000\") == \"400000000\"\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 1000000000\n1\n1\n''') == '1000000000000000000'\nassert solution('''\n5\n0\n1\n2\n3\n4\n''') == '0'\nassert solution('''\n2\n1\n1\n''') == '1'\nassert solution('''\n3\n1\n1\n2\n''') == '-1'\nassert solution('''\n4\n1\n1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"1\\n5\\n\") == \"5\"\nassert solution(\"2\\n3\\n\") == \"6\"\nassert solution(\"1\\n2\\n\") == \"-1\"\nassert solution(\"1\\n100\\n\") == \"100\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1\\n1\\n') == '1'\nassert solution('2\\n1000000000 1000000000') == '1000000000000000000'\nassert solution('1\\n1') == '1'\nassert solution('3\\n2\\n3') == '6'\nassert solution('3\\n3\\n4') == '12'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n2 3 9 2 3\") == \"18\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = [int(i) for i in sys.stdin.readline().split()]\n\ntotal = 1\nfor i in a:\n    total *= i"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 1 1 0\\n\") == \"0\"\nassert solution(\"3\\n1 2 3\\n\") == \"6\"\nassert solution(\"5\\n3 2 4 1 5\\n\") == \"30\"\nassert solution(\"4\\n8 3 9 5\\n\") == \"60\"\n\"\"\"\n\nfrom math import prod\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5') == '120'\nassert solution('4\\n1 1 1 1') == '1'\n\"\"\"\n\nn = int(input())\ndata = list(map(int, input().split(' ')))\nresult = 1\nfor x in data:\n    result *= x\n    if result > 10 ** 18:\n        print(-1)\n        break\nelse:\n    print(result)\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nfrom decimal import Decimal, getcontext"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\\n218\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\nprint(solution(\"2018 218\"))\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018 2\\n218\\n') == 'Yes'"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nN = int(input())\nA = int(input())\n\nA = min(A, N // 500)\nN = N - A * 500\n\nA = min(A, N // 1)\nN = N - A * 1"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'2018\\n218'\n) == 'Yes'\nprint(solution(\n''\n), end='')\nassert solution(\n'2018\\n218'\n) == 'Yes'\nprint(solution(\n''\n), end='')\n'''"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"1 2 3\") == \"dangerous\"\nassert solution(\"1 5 1\") == \"dangerous\"\nassert solution(\"1 2 3\") == \"dangerous\"\nassert solution(\"5 5 5\") == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 6\") == \"dangerous\"\nassert solution(\"1 1 6\") == \"dangerous\"\nassert solution(\"1 2 6\") == \"dangerous\"\nassert solution(\"3 5 6\") == \"dangerous\"\nassert solution(\"4 4 6\") == \"safe\"\n\n\"\"\"\nfrom sys import stdin\nfrom collections import defaultdict"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 6\") =='safe'\n\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"3 3 6\") == \"dangerous\"\n\"\"\"\n\nX, A, B = list(map(int, input().split(' ')))"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\nassert solution(\"4 3 5\") == \"dangerous\"\n\nassert solution(\"6 2 2\") == \"dangerous\"\n\nassert solution(\"1 1 1\") == \"dangerous\"\n\nassert solution(\"9 1 9\") == \"dangerous\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"2 10 20\") == \"dangerous\"\nassert solution(\"3 3 3\") == \"dangerous\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6') =='safe'\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\nTakahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.\n\n-----Constraints-----\n - 1 \u2264 X,A,B \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX A B\n\n-----Output-----\nPrint delicious if Takahashi found the food delicious; print safe if he neither found it delicious nor got a stomachache; print dangerous if he got a stomachache.\n\n-----Sample Input-----\n4 3 6\n\n-----Sample Output-----\ndangerous\n\nHe ate the food three days after the \"best-by\" date. It was not delicious or harmful for him.\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\n-----------"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"5\") == \"4\"\nassert solution(\"13\") == \"12\"\nassert solution(\"11\") == \"10\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().strip())"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '9'\nassert solution('100') == '99'\n\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('9') == '3'\nassert solution('10') == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 1\\n3 2') == '10'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nn = int(input())\nt = [0] * n\na = [0] * n\nfor i in range(n):\n    t[i], a[i] = map(int, input().split())\n\ntotal = 1\nfor i in range(n):\n    total *= a[i]\n\ntotal_t = 1\nfor i in range(n):\n    total_t *= t[i]\n\nfor i in range(n):\n    total /= t[i]\n    total /= a[i]\n\nprint(int(total * total_t))"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3\\n1 1\\n3 2\") == \"10\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\n\"\"\"\nAttempt 1\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 1\\n3 2') == '10'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3\") == \"10\"\nassert solution(\"3\\n1 1\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"uncopyrightable\") == 'yes'\nassert solution(\"happy\") == 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nprint(solution(\"uncopyrightable\"))\n\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nWEEWW') == 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WWWWW\") == \"0\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nWEEWW') == '1'\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5WEEWW') == '1'\nprint(solution('5WEEWW'))\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_string) == expected_result\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WEEWW\") == \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5WEEWW') == '1'\nassert solution('6WEWW') == '1'\nassert solution('4WEEWW') == '0'\nassert solution('3WEEWW') == '0'\nassert solution('2WEEWW') == '0'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WEEWW') == 1\n\nassert solution('WWWWEWEW') == 0\n\nassert solution('WEWWEWE') == 2\n\nassert solution('WEWWEEW') == 3\n\nassert solution('WWWWWW') == 1"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5WEEWW\") == \"1\"\nassert solution(\"4EEWEW\") == \"0\"\nassert solution(\"4WEWEW\") == \"2\"\nassert solution(\"4WEWWEW\") == \"2\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WEEWW\") == 1\n\nprint(solution(\"WEEWW\"))\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4\n''') == '2\\n2\\n1\\n1'\nassert solution('''3 2\n1 2\n2 3\n1 3\n''') == '2\\n2\\n1'\nassert solution('''4 2\n1 2\n2 3\n1 3\n''') == '2\\n2\\n1'\nassert solution('''3 3\n1 2\n2 3\n1 3\n''') == '2\\n2\\n1'\nassert solution('''4 4\n1 2\n2 3\n1 4\n3 4\n''') == '2\\n2\\n1\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(input())"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\nassert solution('4 4\\n1 2\\n2 3\\n3 4\\n1 3') == '2\\n2\\n1\\n1'"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '2 2 1 1'\nassert solution('''4 3\n1 2\n2 3\n1 4\n1 4''') == '2 2 1 1'\nassert solution('''4 3\n1 2\n2 3\n1 4\n2 4''') == '2 2 1 1'\nassert solution('''4 3\n1 2\n2 3\n1 3\n2 4''') == '2 2 1 1'\nassert solution('''4 3\n1 2\n2 3\n1 3\n1 4''') == '2 2 1 1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1\\n2'\nassert solution('1\\n2\\n3') == '2\\n1\\n3'\nassert solution('1\\n2\\n3\\n4') == '4\\n3\\n2\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4\n''') == '''2\n2\n1\n1'''\n\nprint('Success')"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '2\\n2\\n1\\n1'\nassert solution('''4 4\n1 2\n2 3\n1 3\n3 4''') == '2\\n2\\n1\\n1'\nassert solution('''5 5\n1 2\n2 3\n1 4\n3 5\n4 5''') == '2\\n2\\n1\\n1\\n0'\nassert solution('''3 3\n1 2\n2 3\n3 1''') == '1\\n1\\n0'\nassert solution('''3 2\n1 2\n2 3\n2 1''') == '1\\n0\\n0'\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"1\\n5\") == \"5\"\nassert solution(\"3\\n5\\n10\") == \"30\"\nassert solution(\"2\\n10\\n15\") == \"25\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"3\\n5\\n10\\n\") == \"30\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"4\\n10\\n15\\n5\\n\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25'\nassert solution('3\\n10\\n15\\n') == '30'\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n5\\n10\\n15\"\n) == \"25\"\nassert solution(\n    \"4\\n9\\n8\\n7\"\n) == \"30\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('4\\n2\\n5\\n9\\n3') == '20'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n10\\n15') == '25'\n\"\"\"\n\nN = input()\nS = list(map(int, input().split()))\n\nresult = 0\nfor i in S:\n    result += i\n    if result % 10 == 0:\n        result = result\n    else:\n        result = 0\n\nprint(result)\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\n\"\"\"\n\nimport math\n\nn = int(input())\nans = 0\nfor i in range(1, n + 1):\n    if math.floor(i / 10) == 0:\n        ans += i\n    elif math.floor((i - 1) / 10) == math.floor(i / 10):\n        ans += i\n\nprint(ans)\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"4\\n3\\n4\\n5\") == \"12\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"3\\n5\\n10\\n\") == \"30\"\n\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbca\") == 2\nassert solution(\"abbcca\") == 4\nassert solution(\"abbcca\") == 4\nassert solution(\"aaaaa\") == 0\nassert solution(\"aabbca\") == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aabbca') == 2\nassert solution('abc') == 2\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbca\") == 2"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbca') == 2\nassert solution('abcdefg') == 1\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbca\") == 2\nassert solution(\"aabbbca\") == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"aabbca\"\n) == 2, \"WA-1\"\n\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == 26, \"WA-2\"\nassert solution(\n    \"aaabbbbbbbabbbaaabbabbbbbbaaabbbbbbbbaababbbbbbbbaabbbabbabbabbabbbababababbbaabbbaaabbbababbababaaabbbababbababbababaaabbabbbbbbbbbbbabbbbaabbabbbaabababbbbabbbabbbbbbbabbbaaabbababbbbaabbabbabaabababbbabbbbaaabbbbaaabbbbbbbabaababbababbbbaaabbabbbabbbabababbbbbbaabbbaaabbabaabbabaababbbbbbbbbbbabbbbbbaaabbabbababbbbaababbabbbabbbabbbaabbbababbaababbaababbbbabbbbaabbbaaabbbbbababbbaaaaaaaaaaaaaaaaaababababbbbaaabbabbbbbbaaabbababbabbbaababaaabbbbabbbbbbababbabbbbbbbaaaaabababbbaaaaaaaabababbbabababbababbbbbabbaabbaaaaaabbababbbbaaabbbbbbbabaabbbbababbaaababbababababbababababababbbabaaaaaabbbbbababbbbaaabbbabbabaaabbbbaaabbbbabbbbbbaaaaaaabbbbbbbbbaaabbbbbaaabbbbababbbabbbbaaaaaaabbabbbbbbbaababbbbbbabaaababbbabbabaaaabbabbbbbbbbabbbaabbbbbaaabbbababaabbbbaaabbabaabbbaaaaabbabbbaaabbaababbbbbbbbbbaaababbabbbaaabbbbaaaaaaabbbaaaaaaabababbbababbbbbaabbbbabaababbaabbbaababbabaaabbbbbbbabbbbbaaabbabbbbaaaaaabbbababbbabaabbbbbaaababababbabbbabbbbaaaababbbbaaaabbbbaababbabbbbbabbbaaababbbbbbbbaaabbbbbbbaaabaababbbbaabababbbaabbbbaabbbbbabbbaaabbbabbbbbbbbbbbbbaaaaaaaaaaaaaaaaababbbabbbbaaabbbaabbbbbabbbabbbabaabbabbabaaaabbbabbbabaaaaaabbbbbaaabbaababbbabbabbbbbbabbbaabbbbabbabbbbbbabbbababaabbbbaabbbaaabbababaaabbababbbaaaababbbbaabbabbbbaaaaaaabbbbbbbabaabbababbbabaabababbbbbbaabaaabbbaaabaaabbbababbaaababbbabbbbbbbbbaaabaabababababbabaaaababbbbbbbabaababbabbabbbbbbbbbabababbbabbbbaababbabaabaababaabbbbbabbaaabbbbaababbbbaabbababbbabbbbbbbbbbbbbabbbbbbaaababbbbaaababbbabbbbaaabbababbbbaaababbbaaabbbababbbababbbbaabaababbbbaababbbbaabbbbbababbabbbababbbbaabbabaaababaabbbbaabbbaababaabaabbbabbbbabaaaabababbbaaabbbbaabbbbaaaaaaaaaaabbbbbbbbaabaabbabbbbaaaaaaababbbababbbabbbababbbbababbbbaaabbabbabbbbaabbbbaabaaaaabbbabbbbbbaabbaaabaababbbaababababbbaabaaaabbaaaaabbbbbbaababbbbaabbbaaaaaaaaaaaaaaaaaabbbbbabababbabbbababbbbaabbbaababaaaaaabbbbbabbbbbbbbaabaaabbabbbababbbaaabababbbbbababbbabbbaabbbaaaabbabaaababaaabbababababbbababababaabbbbaabbbbbbaaaabaabbbbbabababbbaababaabaaaaabbbbbabababaabababbbabbbabbbbbaababbbaaaaaababbbbbbbabaabbababbaaabbaabbbbabaaababbbaaaaaaaababbbbaabbbababaaaaaabbbbbaaabbbbaaaaaaabaaababbbbbbaabaaabbbaaaabaababbbbbabbbababaaaababbbbaabbbbbabbbbbaaaaabababbbbaaaabaababbbbaaabbbaaaaabaaabbabbabaababaaaaaaabaaabbabaababbbbaaaaabababbbabbbababbbaabbabbbbbbbabbbbbbaabababaaaababbbbbabbbbaaaabbbababbbbaaabaababbbbbabbbabbababbabbbbaaaabbbabbbbbbabbbbbababaabababbabbabababbbbabbbaaabbbbaabbbbaaabbbbaabbbabbabaabbbabbbabbbbaabbbbababbbbbabaababbbbbaababbbbaabaabbbaabbbabbbaaababbbabaaaaaabbbbbbbababbbbbaababbabbbbaaaaabbbaaabbbbbabbbbbbaabbbabababbaaabbbbbbbbaabbbaabaabbbabababaaaabaababbbbbaababbbbbbaabbbbbbbbaaabbbabbbbaaabbbbbabbbbabbabaabbbbbbbbbababaaabbaababbbbababababbbbaaababbbbaabbbbbbbbbbbbbababbbababababaaabbbbbaaabbbabaababaaaaaaababbbbbbbababbbaababbabaabbbabbbaababaabbbbbbbabaaababbbababbbbbbbaabaaaabbbbabbbabbabaabbababbbabaabaaaabababbbababbbbbabbbbbaaabbbbbabbbbaaabbaaababbababababbabbbabbabaabababababbbbaaabaabbbabbbbbababbbbaabbbbaaabbbbaabaaabbbbabbbbbbaaabbbaaabaaabababbabbbbababbbbaabbababaabaabbbababbabaaaaaabbbbbabaaaaaabbbbbabababaaaaaabababbabababaaabaaabbbbbbbbbaabaabababababbbababaaabbbababbabaabaabaabaabaaabbbbbabbabaaaaaabaaabbbbaaaaaaaaaaaaaaaaaaabbbbbaaabbbabaabaababaabaabbbababbbabaabaaaabbbbbbbbbabbbbaaababbbabbbababbaaaaaababaababaaaaabbbabbbbbbbbbbababababbbabbbaaaaaaaaaaababbbbbabaaaaaababababbbaaabaabbbbbbbbaabaaababbbababaaaabaabaaabbababbbbaabbbaababababbbbaaabbbbbababbbbbababbbaaabaababbbaababbbbbbbbbaaababbbababbbbbaabbbbbbbbbbabbbabaaabbaababaaaaabaaabbbbaaabbbbbabbbbbbbbabaabaababbabbbbaabbbabbbbbbbababaababaaabbbbaabaaaaaabababbbbbbbbbbbaabbabaabaaabbbaabbbabaaaababbbabbbbaaabaaaabababbbbabbbbaaabbbabababbababbbbaabababbbbaaaabaabababbbbbbaabbbbbabaaaa"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n\n---------------------\n\nInput:\nSunny\n\nOutput:\nCloudy\n\nIn Takahashi's town, a sunny day is followed by a cloudy day."
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\n\"\"\"\n\nimport unittest\nimport os\nimport sys\n\ncurrentdir = os.path.dirname(os.path.realpath(__file__))\nparentdir = os.path.dirname(currentdir)\nsys.path.append(parentdir)\n\nfrom lib.parser import Parser\nfrom lib.function import Function\n\n\nclass TestCorrectness(unittest.TestCase):\n    def test_solution(self):\n        path = 'input/test_correctness'\n        stdin = 'Sunny'\n\n        parser = Parser(path, stdin)\n        tree = parser.parse()\n        solution = Function('solution', tree)\n        print(solution.execute())\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\nprint('Test pass.')\n\n-----\n------Solution------\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\nassert solution(\"Cloudy\") == \"Sunny\"\n\nstdin = sys.stdin.read()"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\n\"\"\"\n\nweather = stdin.split()[0]"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\n\"\"\"\n\nfrom itertools import cycle"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Sunny'\nassert solution('Cloudy') == 'Rainy'"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"10 20 200\") == \"200\"\nassert solution(\"10 20 30\") == \"20\"\n\n\"\"\"\n\nimport math\nfrom typing import NamedTuple\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n\nclass Solution:\n    def solution(self, stdin: str):\n        a, b, n = map(int, stdin.split())\n        if a * n > b * math.floor(n):\n            return a * math.floor(n)\n        return b * math.ceil(n)"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\nn, a, b = map(int, input().split())\nprint((n // a + n // b) * a)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 17 120\\n') == '119'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17 120\") == '119'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\n\"\"\"\n\n\"\"\"\n\n- \u5165\u529b\u3057\u305f\u7d50\u679c\u3092int\u578b\u306b\u3059\u308b\n- N\u306f\u3001\u6642\u9593\u3092\u8868\u3059\u6574\u6570t\n- A\u306f\u3001\u8cbb\u7528\u3092\u8868\u3059\u6574\u6570a\n- B\u306f\u3001\u8cbb\u7528\u3092\u8868\u3059\u6574\u6570b\n- t, a, b\u306f\u3001\u6574\u6570\u578b\n\n- \u4e00\u756a\u5927\u304d\u306a\u8cbb\u7528\u304c\u8cbb\u7528b\u3092\u8d85\u3048\u308b\u3088\u3046\u306b\u7d50\u679c\u3092\u8868\u3059\n- \u5dee\u304ca\u3068b\u306e\u548c\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u306f\u3001\u8cbb\u7528\u3092\u8d85\u3048\u308b\u306e\u3067\u3001\u8cbb\u7528\u306fa\n- \u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u8cbb\u7528\u306fa\n\n- N=0\u306e\u3068\u304d\u306f\u30010\n- N=1\u306e\u3068\u304d\u306f\u3001b\n\n- t=0, a=0, b=0\n- t=1, a=0, b=b\n- t=2, a=0, b=b\n- t=3, a=0, b=b\n- t=4, a=0, b=b\n- t=5, a=0, b=b\n- t=6, a=0, b=b\n- t=7, a=0, b=b\n- t=8, a=0, b=b\n- t=9, a=0, b=b\n- t=10, a=0, b=b\n- t=11, a=0, b=b\n- t=12, a=0, b=b\n- t=13, a=0, b=b\n- t=14, a=0, b=b\n- t=15, a=0, b=b\n- t=16, a=0, b=b\n- t=17, a=0, b=b\n- t=18, a=0, b=b\n- t=19, a=0, b=b\n\n- t=20, a=0, b=b\n\n- 10<=N<=20\u3068\u3057\u305f\u3068\u304d\u3001\u7d50\u679c\u306f\u3001b*(19-t)\n\n- a\u304c\u8cbb\u7528b\u3092\u8d85\u3048\u308b\u3068\u304d\u306f\u3001\n- a\u304c\u8cbb\u7528b\u3068\u7b49\u3057\u304f\u306a\u3089\u306a\u3044\u3068\u304d\u306f\u3001\n- a\u304c\u8cbb\u7528b\u3092\u8d85\u3048\u308b\u3068\u304d\u306f\u3001\n\n- \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001a\u306fb\u3068\u7b49\u3057\u3044\n\n- \u5206\u304b\u3063\u305f\u3068\u3053\u308d\u3001\u8cbb\u7528a\u3068b\u306e\u3069\u3061\u3089\u304c\u5927\u304d\u3044\u304b\u306f\u3001\n- \u3042\u308b\u79fb\u52d5\u306e\u3068\u304d\u306b\u3001\u8cbb\u7528a\u304c\u8cbb\u7528b\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u3001\n- \u3042\u308b\u79fb\u52d5\u306e\u3068\u304d\u306b\u3001\u8cbb\u7528a\u304c\u8cbb\u7528b\u3068\u7b49\u3057\u3044\u5834\u5408\u3001\n- \u3042\u308b\u79fb\u52d5\u306e\u3068\u304d\u306b\u3001\u8cbb\u7528a\u304c\u8cbb\u7528b\u3092\u8d85\u3048\u308b\u5834\u5408\u3001\n\n- \u305d\u308c\u305e\u308c\u306e\u4ed5\u69d8\u304b\u3089\u3001\n- \u3042\u308b\u79fb\u52d5\u306e\u3068\u304d\u306b\u3001\u8cbb\u7528a\u304c\u8cbb\u7528b\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u3001\n- \u3042\u308b\u79fb\u52d5\u306e\u3068\u304d\u306b\u3001\u8cbb\u7528a\u304c\u8cbb\u7528b\u3068\u7b49\u3057\u3044\u5834\u5408\u3001\n- \u3042\u308b\u79fb\u52d5\u306e\u3068\u304d\u306b\u3001\u8cbb\u7528a\u304c\u8cbb\u7528b\u3092\u8d85\u3048\u308b\u5834\u5408\u3001\n\n- \u305d\u308c\u305e\u308c\u306b\u6ce8\u610f\u3057\u305f\u3089\u3001\u3053\u308c\u3092\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\n- \u5165\u529b\u4f8b\n7 17 120\n\n- \u5165\u529b\u4f8b1\n7 17 120\n- \u4ee5\u4e0b\u8a08\u7b97\u306e\u4f8b\n7*17=119\n7+17=24\n24+120=124\n24*120=11920\n\"\"\"\n\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == '119'\nprint(\"Test Completed\")\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\") == '119'\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '3800'\nassert solution('1 1\\n1\\n') == '10000'\nassert solution('2 1\\n1\\n') == '10000'\nassert solution('2 2\\n1\\n') == '4200'\nassert solution('5 5\\n1\\n') == '5250'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"3800\"\nassert solution(\"2 1\") == \"380\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"3800\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '3800'\nprint(solution(stdin))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1900'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n\nN, M = map(int, input().split())\n\nS = [0] * (M + 1)\n\nfor i in range(N + 1):\n    for j in range(1, M + 1):\n        if i == 0:\n            S[j] += j\n        elif i == 1:\n            S[j] += i * j\n        else:\n            S[j] += (i + 1) * i * j\n\nfor i in range(1, M + 1):\n    print(S[i])\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"1900\"\n\n------"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"900\"\nassert solution(\"7 5\") == \"1900\"\nassert solution(\"10 1\") == \"10000\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\n\"\"\"\nInput\n1 1\n\nOutput\n3800\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"b\"\n\"\"\"\n\nfrom collections import OrderedDict"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('abc') == 'c'\n\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\n\nS_set = set(S)\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nalphabet_set = set(alphabet)\n\nfor letter in alphabet_set:\n    if letter not in S_set:\n        print(letter)\n        break"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('atcoder') == None\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nfrom typing import List, Set, Dict\nimport sys\n\nclass Solution:\n    def __init__(self, S: str):\n        self.S = S\n        self.lower_set = set([x for x in \"abcdefghijklmnopqrstuvwxyz\"])\n        self.alpha_dict: Dict[str, str] = {\n            \"a\": \"z\",\n            \"b\": \"y\",\n            \"c\": \"x\",\n            \"d\": \"w\",\n            \"e\": \"v\",\n            \"f\": \"u\",\n            \"g\": \"t\",\n            \"h\": \"s\",\n            \"i\": \"r\",\n            \"j\": \"q\",\n            \"k\": \"p\",\n            \"l\": \"o\",\n            \"m\": \"n\",\n            \"n\": \"m\",\n            \"o\": \"l\",\n            \"p\": \"k\",\n            \"q\": \"j\",\n            \"r\": \"i\",\n            \"s\": \"h\",\n            \"t\": \"g\",\n            \"u\": \"f\",\n            \"v\": \"e\",\n            \"w\": \"d\",\n            \"x\": \"c\",\n            \"y\": \"b\",\n            \"z\": \"a\"\n        }\n\n    def is_upper_case(self, letter: str) -> bool:\n        return letter.isupper()\n\n    def is_lower_case(self, letter: str) -> bool:\n        return letter.islower()\n\n    def solution(self) -> str:\n        # iterate over the string\n        # check if the letter in S is upper case, if so it can't be the lexicographically smallest\n        # if it is lower case, then we check if we can move on, else return None\n        if self.is_upper_case(self.S[0]):\n            return None\n\n        for letter in self.S:\n            # if the letter is lower case and we have the same letter\n            # before it, then it means we have found the lexicographically smallest\n            if self.is_lower_case(letter) and letter == self.S[self.S.index(letter) - 1]:\n                return self.S[self.S.index(letter) + 1]\n\n            if letter not in self.lower_set:\n                return None\n\n        return None"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\n---"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\nfrom collections import deque\nfrom heapq import *\nimport sys"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom functools import reduce\nfrom typing import Callable, Dict, List, Tuple\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\nWhen l is an odd number, the median of l numbers a_1, a_2,..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2,..., a_l.\nYou are given N numbers X_1, X_2,..., X_N, where N is an even number.\nFor each i = 1, 2,..., N, let the median of X_1, X_2,..., X_N excluding X_i, that is, the median of X_1, X_2,..., X_{i-1}, X_{i+1},..., X_N be B_i.\nFind B_i for each i = 1, 2,..., N.\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - N is even.\n - 1 \\leq X_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nX_1 X_2... X_N\n\n-----Output-----\nPrint N lines.\nThe i-th line should contain B_i.\n\n-----Sample Input-----\n4\n2 4 4 3\n\n-----Sample Output-----\n4\n3\n3\n4\n\n - Since the median of X_2, X_3, X_4 is 4, B_1 = 4.\n - Since the median of X_1, X_3, X_4 is 3, B_2 = 3.\n - Since the median of X_1, X_2, X_4 is 3, B_3 = 3.\n - Since the median of X_1, X_2, X_3 is 4, B_4 = 4.\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == '2'\nprint(solution('6\\n3 1 2 4 2 1'))\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 4 2 1\") == 2\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == '10'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nsticks = sys.stdin.readline().strip().split()\n\nmax_side = 0\nmax_area = 0\nfor a, b in zip(sticks, sticks[1:]):\n    side = min(int(a), int(b))\n    max_side = max(max_side, side)\n    area = int(a) * int(b)\n    if max_area < area:\n        max_area = area\n\nprint(max_area)\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n2\\n1\\n2\\n1\\n') == '2'\nassert solution('6\\n3 1 2 4 2 1\\n') == '2'\n\"\"\"\n\n\"\"\"\n5\n1 3 4 5 6\n\"\"\"\n\"\"\"\n6\n1 2 3 4 5 6\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\n\"\"\"\n5\n1 2"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 4 1') == '2'"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2 4 2 1') == 2\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 1, 2, 4, 2, 1) == 2\nassert solution(6, 3, 1, 2, 4, 2, 1) == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 2 1') == '2'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1 1') == '9'\nassert solution('4\\n2 3 2 3') == '0'\nassert solution('4\\n2 1 3 1') == '2'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6\\n3 1 2 4 2 1\"\n) == \"2\"\nassert solution(\n    \"5\\n1 2 3 4 5\"\n) == \"0\"\n\"\"\"\n\nimport sys\n\n\"\"\"\nAnalysis\n\nsort() and pop()\n\n1. create a new list\n2. sort the list\n3. for i in range(4):\n    a. pop the element\n    b. check for equal\n    c. if equal, \n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3\\n7 1\\n2\\n5\\n10\"\n) == \"8\"\n\n-----Test Case-----\nTest Case 1\nInput:\n2\n7 2\n1\n2\n5\n10\n\nOutput:\n8\n\n-----Test Case-----\nTest Case 2\nInput:\n2\n8 2\n1\n1\n2\n1\n3\n2\n4\n\nOutput:\n8\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">4 5\\n>2 1\\n>5 1\\n>1 1\\n>0 0\\n>1 0\\n>0 0\") == \"2\"\nassert solution(\">4 6\\n>1 1\\n>5 1\\n>1 1\\n>2 1\\n>0 0\\n>1 0\\n>0 0\") == \"3\"\nassert solution(\">4 6\\n>1 1\\n>5 1\\n>1 1\\n>2 1\\n>0 0\\n>1 0\\n>0 0\") == \"3\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1\\n2\\n5\\n10\") == '8'\n\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n7 1\\n2\\n5\\n10'\n    ) == '8'\n\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7 1 2 5 : 10') == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10\\n') == '8'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 1\\n2\\n5\\n10\") == \"8\"\nassert solution(\"8 2 8\\n1\\n2\\n4\\n3\\n5\\n1\\n2\\n5\\n10\\n20\\n2\\n2\\n4\\n3\\n5\\n5\\n1\\n2\\n3\\n5\\n10\") == \"13\"\nassert solution(\"5 3 1\\n2\\n5\\n10\\n20\") == \"11\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n7 1\\n2\\n5\\n10\"\n) == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('0 2 0') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\nassert solution('''3\n2\n2\n2''') == '2'\nassert solution('''5\n2\n1\n2\n3''') == '1'\nassert solution('''5\n4\n5\n2\n1''') == '1'\nassert solution('''0\n0\n0\n0''') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"1\\n2\\n2\\n100\") == \"1\"\nassert solution(\"2\\n2\\n2\\n50\") == \"0\"\n\n\"\"\"\n\nimport sys\n\nA, B, C, X = [int(x) for x in sys.stdin.readline().rstrip().split(\"\\n\")]"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\nassert solution('''0\n0\n0\n1''') == '0'\nassert solution('''1\n1\n1\n1''') == '0'\nassert solution('''0\n0\n0\n50''') == '0'\nassert solution('''1\n2\n2\n1''') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2 100\") == 2\nassert solution(\"0 2 2 100\") == 1\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"1\\n2\\n2\\n5\") == \"1\"\nassert solution(\"2\\n2\\n2\\n5\") == \"0\"\nassert solution(\"2\\n2\\n2\\n50\") == \"1\"\nassert solution(\"2\\n2\\n2\\n5\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 100\") == \"2\"\nassert solution(\"5 3 1 100\") == \"0\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('1\\n2\\n1\\n100') == '2'\nassert solution('2\\n0\\n1\\n100') == '2'\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == '0'\nassert solution('A B') == '0'\nassert solution('1 1') == '0'\nassert solution('1 A') == '0'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 3 2\n''') == 'Yes'\n\nassert solution('''-1 3 2\n''') == 'Yes'\n\nassert solution('''3 -1 2\n''') == 'Yes'\n\nassert solution('''-3 -1 2\n''') == 'Yes'\n\nassert solution('''0 1 2\n''') == 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == \"Yes\"\nassert solution('1 3 2') == \"Yes\"\nassert solution('2 2 3') == \"No\"\nassert solution('1 3 3') == \"No\"\nassert solution('4 4 5') == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 2') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\nprint(\"Yes\" if (a < c and b > c) or (a > c and b < c) else \"No\")\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 1\") == \"No\"\nassert solution(\"1 3 3\") == \"No\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nNow that we have a problem where the input is more of a stream of inputs, we will need a way to store the inputs, and a way to pass them to the solution.\n\nWe will use a list of strings as our input. If we were to use a text file for input, we would need to read it into memory. Using a string is fine for the given problem.\n\nTo store the input, we will split the input by the lines, and then split each line by whitespace.\n\nTo pass the input to the solution, we will create a generator that will call the solution() method."
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == '9'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1000\") == \"6\"\nassert solution(\"3 1000\") == \"9\"\nassert solution(\"1 1000\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\n\"\"\"\nTime complexity: O(N * log(X/N))\nSpace complexity: O(1)\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\nprint(\"Test 1 PASSED\")\n\nassert solution('3 1000\\n10\\n10\\n10') == '0'\nprint(\"Test 2 PASSED\")\n\nassert solution('3 1000\\n100\\n100\\n100') == '1'\nprint(\"Test 3 PASSED\")\n\nassert solution('3 1000\\n100\\n110\\n100') == '1'\nprint(\"Test 4 PASSED\")\n\nassert solution('3 1000\\n100\\n110\\n160') == '1'\nprint(\"Test 5 PASSED\")"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == '9'\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\nprint(\"Test 1:\", solution(\"3 1000\\n120\\n100\\n140\\n\"), \"Passed\")\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == 2\nprint(solution(\"3\\napple\\norange\\napple\"))\n\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == \"2\\n\", \"Test 1 Failed\"\nassert solution(\"3\\napple\\napple\\napple\") == \"2\\n\", \"Test 2 Failed\"\nassert solution(\"4\\napple\\napple\\norange\\norange\\n\") == \"2\\n\", \"Test 3 Failed\"\nassert solution(\"4\\napple\\napple\\napple\\napple\") == \"1\\n\", \"Test 4 Failed\"\n\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\napple\\norange\\napple') == '2\\n'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\napple\\norange\\napple') == 2\n\"\"\"\n\nn = int(stdin)\nd = dict()\nfor i in range(n):\n    s = stdin.readline()\n    if s in d:\n        d[s] += 1\n    else:\n        d[s] = 1\n\nprint(len(d))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\nassert solution(\"apple, apple, apple, apple\") == \"apple\"\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\napple\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\napple\\norange\\napple\\n') == '2'\nassert solution('3\\napple\\napple\\n') == '1'\nassert solution('3\\napple\\napple\\napple\\n') == '0'\n\n\"\"\"\n\nn = int(input())\nkinds = set()\nfor _ in range(n):\n    kinds.add(input())\n\nprint(len(kinds))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\napple\\n:apple\\norange\") == 2\n\"\"\"\nimport re\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\napple\\norange\\napple') == '2'\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\napple\\norange\\napple') == '2'\n\"\"\"\n\n\"\"\"\n3\napple\norange\napple\n\n\"\"\"\nimport sys\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_example_1(self):\n        stdin = sys.stdin.read()\n        self.assertEqual(solution(stdin), 2)"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == ans\n\na = list(map(int, stdin.split()))\nans = ''\nfor i in range(n):\n    if a[i] < 3200:\n        ans += 'orange\\n'\n    elif a[i] < 3600:\n        ans += 'yellow\\n'\n    elif a[i] < 4000:\n        ans += 'green\\n'\n    elif a[i] < 4400:\n        ans += 'cyan\\n'\n    elif a[i] < 4800:\n        ans += 'blue\\n'\n    elif a[i] < 5200:\n        ans += 'purple\\n'\n    elif a[i] < 5600:\n        ans +='red\\n'\n    elif a[i] < 6000:\n        ans += 'brown\\n'\n    else:\n        ans += 'gray\\n'\n\nreturn ans\n    \n    \n\n-----Solution-----\n\nl=list(map(int,stdin.split()))\n\nl.sort()\n\nl.insert(0,0)\nl.append(l[-1]+l[-1]-l[-2])\nprint(l)\na=0\nb=0\nfor i in range(len(l)):\n    if(l[i+1]>l[i]):\n        a=i+1\n    else:\n        b=i\nprint(b-a+1,end=\" \")\nprint(b)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nuser_ratings = list(map(int, input().split()))\n\ngreen_count = 0\norange_count = 0\nfor user_rating in user_ratings:\n    if user_rating < 400:\n        green_count += 1\n    elif user_rating < 800:\n        orange_count += 1\n    else:\n        green_count += 1\n        orange_count += 1"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1000 1000 1000\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"5\n1000 1000 1000 1000 1000\n\"\"\") == \"4 4\"\n\n\"\"\"\nYou are given a string s, which represents a valid email address. \n\nYour task is to verify that s follows the email address structure, which means:\n\nIt must start with a name, which directly precedes the @ symbol and is in the format of a proper last name, that is, \nit must be composed of letters A-Z.\nThere must be exactly one space between the name and the @.\nIt must end with an organization, that is, a domain name, that is, it must end with one or more lowercase English letters.\nThere must be exactly one @ between the name and the organization.\nEvery email address is guaranteed to be valid and in the format of a proper email address.\n\nInput Format\nThe first line of the input contains an integer n, the number of lines in the string.\nThe next n lines each contain a string, that is, a valid email address.\n\nConstraints\n1 \u2264 n \u2264 100\n\nOutput Format\nPrint \"VALID\" if the email address is valid, otherwise print \"INVALID\".\n\nSample Input\n4\nvasya@mail.ru\nvasya@gmail.com\nvasya@gmail\nvasya@\n\nSample Output\nVALID\nVALID\nINVALID\nINVALID\n\nExplanation\nIn the first email, vasya, is the name, and mail.ru is the domain.\nIn the second email, vasya, is the name, and gmail is the domain.\nIn the third email, vasya, is the name, and gmail is the domain.\nIn the fourth email, vasya, is the name, and gmail is the domain.\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin), end=\"\")\n\n-----------------"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == '2 2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2100 2500 2700 2700\") == \"2 2\"\n\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\nprint(\"Teste OK\")\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4\\n2100 2500 2700 2700'\n) == '2 2'\nassert solution(\n    '4\\n2500 2700 2100 2700'\n) == '2 2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('xox') == '0'\nassert solution('oox') == '100'\nassert solution('oxx') == '200'\nassert solution('xxx') == '400'\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxx\") == 700\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxx\") == 700\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oxo') == 900\nprint(solution('oxo'))\n\n------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oxo') == 900\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('oxo') == '900'\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oox\") == 900\nassert solution(\"xxx\") == 700\nassert solution(\"ooox\") == 1700\nassert solution(\"xxxo\") == 700\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('oxo') == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oxo') == 900\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('ox') == 200\nassert solution('xo') == 0\nassert solution('oxo') == 700\nassert solution('xxx') == 0\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HH') == 'H'\nassert solution('DH') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H H') == 'H'\nassert solution('D H') == 'D'\nassert solution('H D') == 'H'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'D'\n\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DD\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'H'\nassert solution('a b') == 'H'\nassert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"HHH\") == \"H\"\nassert solution(\"HHD\") == \"D\"\nassert solution(\"DHD\") == \"D\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\nassert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"5678\") == \"5-6+7-8=7\"\nassert solution(\"9012\") == \"9-10+11-12=8\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12345') == '1+2+2+3+4+5=12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\n\"\"\"\nfrom __future__ import annotations\n\nimport collections\nimport re\nfrom dataclasses import dataclass\nfrom typing import ClassVar, Dict, List, Match, Optional, Sequence, Tuple\n\n\nclass Solution:\n    _regex: ClassVar[str] = r\"(\\d+)(\\+|\\-)[\\+|\\-|\\d+|\\*]+(\\d+)(\\+|\\-)[\\+|\\-|\\d+|\\*]+(\\d+)\"\n\n    def __init__(self, stdin: str) -> None:\n        self.matches: List[Tuple[str, str]] = re.findall(self._regex, stdin)\n\n    def solution(self) -> str:\n        return \" \".join(\n            f\"{match[1]}{match[2]}{match[3]}{match[4]}\"\n            for match in self.matches\n        )\n\n\n@dataclass\nclass Match:\n    num: str\n    op1: str\n    op2: str\n    num2: str\n    op3: str\n    num3: str\n\n\nclass Solution2:\n    def __init__(self, stdin: str) -> None:\n        self.matches: List[Match] = [\n            Match(\n                match[0],\n                match[1],\n                match[2],\n                match[3],\n                match[4],\n                match[5],\n            )\n            for match in re.findall(self._regex(), stdin)\n        ]\n\n    @classmethod\n    def _regex(cls) -> str:\n        return (\n            r\"(\\d+)\"\n            + r\"(\\+|\\-)[\\+|\\-|\\d+|\\*]+(\\d+)\"\n            + r\"(\\+|\\-)[\\+|\\-|\\d+|\\*]+(\\d+)\"\n        )\n\n    def solution(self) -> str:\n        return \" \".join(\n            f\"{match.num}{match.op1}{match.num2}{match.op2}{match.num3}\"\n            for match in self.matches\n        )\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('0123') == '0+1+2+3=7'\n\nassert solution('1030') == '10+0+3=7'\nassert solution('9012') == '9+1+0+2=7'\n\nassert solution('4098') == '4+0+9+8=7'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 2 2\\n') == '2\\n2\\n0\\n0\\n0'\nassert solution('6\\n1 1 2 3 3 3\\n') == '3\\n1\\n0\\n0\\n0\\n0'\nassert solution('7\\n1 2 2 3 3 3 4 4\\n') == '2\\n1\\n1\\n0\\n0\\n0\\n0'\nassert solution('10\\n1 1 3 4 2 5 6 4 3\\n') == '4\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\\n\"\n\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"4 1 2 3\\n\") == \"3\\n2\\n0\\n0\"\nassert solution(\"5 2 3 4 5\\n\") == \"4\\n3\\n2\\n1\\n0\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n1 1 2 2\"\n) == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\n    \"5\\n3 1 2 3\"\n) == \"0\\n0\\n2\\n2\\n0\"\nassert solution(\n    \"5\\n3 3 3 3\"\n) == \"0\\n0\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 2 2\") == '2\\n2\\n0\\n0\\n0\\n'\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('4\\n1 2 3 4') == '0\\n0\\n0\\n0'\nassert solution('2\\n1 2') == '1\\n1'\nassert solution('1\\n1') == '0'\n\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"4\\n1 2 3 1\\n\") == \"1\\n1\\n0\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0\\n'\nassert solution('3\\n1 1 1') == '0\\n0\\n0\\n'\nassert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0\\n'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3') == '3'\nassert solution('6\\n3') == '4'\nassert solution('5\\n2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\") == \"3\\n5\"\nassert solution(\"6\\n4\") == \"3\\n5\"\nassert solution(\"1\\n10\") == \"3\\n5\"\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n') == '3'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n\") == '3'\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n6') == '3'\n\"\"\"\nimport sys"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') == 3\nassert solution('10') == 3"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"3\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"9810\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(123) == 'No'\nassert solution(12321) == 'No'\nassert solution(1111) == 'Yes'\nassert solution(101010) == 'Yes'\nassert solution(1118) == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1111') == 'No'\nassert solution('1234') == 'No'\nassert solution('1345') == 'Yes'\nassert solution('1456') == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\n\nprint(solution('1118'))"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1119') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"3890\") == \"No\"\nassert solution(\"3628\") == \"No\"\nassert solution(\"1654\") == \"No\"\nassert solution(\"2224\") == \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('2314') == 'No'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == 'Yes'\n\"\"\"\n\n\"\"\"\n\ud83d\udccc 1. \u0412\u043e \u0432\u0441\u0435\u043c \u043a\u043e\u0434\u0435 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 IWriter. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043f\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c IWriter \n\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 Writer, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432\u0432\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \nIWriter \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Writer.\n\n\ud83d\udccc 2. \u0412 \u0441\u0432\u043e\u0435\u043c \u043a\u043e\u0434\u0435 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 IReader. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043f\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c IReader \n\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 Reader, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432\u0432\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \nIReader \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Reader.\n\n\ud83d\udccc 3. \u0412 \u0441\u0432\u043e\u0435\u043c \u043a\u043e\u0434\u0435 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 IWriter. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043f\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c IWriter \n\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 Writer, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432\u0432\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \nIWriter \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Writer.\n\n\ud83d\udccc 4. \u0412 \u0441\u0432\u043e\u0435\u043c \u043a\u043e\u0434\u0435 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 IReader. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043f\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c IReader \n\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 Reader, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432\u0432\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \nIReader \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Reader.\n\n\ud83d\udccc 5. \u0412 \u0441\u0432\u043e\u0435\u043c \u043a\u043e\u0434\u0435 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 IWriter. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043f\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c IWriter \n\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 Writer, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432\u0432\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \nIWriter \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Writer.\n\n\ud83d\udccc 6. \u0412 \u0441\u0432\u043e\u0435\u043c \u043a\u043e\ufffd"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == '3'\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2\\n1 5\\n2 4\\n3 6') == '3'\nassert solution('3\\n1 5\\n2 4\\n3 6') == '2'\nassert solution('3\\n1 5\\n2 5\\n3 6') == '1'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 1 1\\n2 1 1 2') == '3'\nassert solution('4\\n1 2 2 1\\n2 3 1 1') == '3'\n\"\"\"\n\nn = int(stdin.readline())\nupper = list(map(int, stdin.readline().split()))\nmiddle = list(map(int, stdin.readline().split()))\nlower = list(map(int, stdin.readline().split()))\n\ncounter = 0\nfor i in range(n):\n    if upper[i] < middle[i] < lower[i]:\n        counter += 1\n\nprint(counter)\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\nprint(solution(\"2\\n1 5\\n2 4\\n3 6\"))\n\n-------------------"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\nprint(solution(\"2\\n1 5\\n2 4\\n3 6\"))\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == 3\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == 3\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    'A B'\n) == '<'\nassert solution(\n    'B A'\n) == '>'\nassert solution(\n    'E E'\n) == '='\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"F F\") == \"=\"\nassert solution(\"F F\") == \"=\"\nassert solution(\"F E\") == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('B B') == '='\n\"\"\"\n\nimport sys\n\nX, Y = sys.stdin.readline().strip().split(' ')"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A B') == '<'\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A B\") == \"<\"\nassert solution(\"A B\") == \">\"\nassert solution(\"A B\") == \">\"\nassert solution(\"A B\") == \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"C D\") == \">\"\nassert solution(\"E F\") == \"=\"\n\nimport numpy as np"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A B\") == \"<\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"D E\") == \">\"\nassert solution(\"E A\") == \"=\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\n\n\"\"\"\nimport unittest\nimport sys\nfrom typing import List, Set, Tuple, Dict, Optional"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".....\\n.#.#.\\n.....\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"2 3\\n.#.\\n..\") == \"1#2\"\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".....\\n.#.#.\\n.....\\n\") == \"11211\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"3 5\\n....\\n.#..\\n....\\n\") == \"11110\"\nassert solution(\"5 5\\n..#.#\\n#.#.#\\n...#.\\n....\\n\") == \"11111\\n1#2#1\\n11110\\n11110\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"3 5\\n.##.\\n#..#\\n..##\") == \"11#2#1\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nassert solution('3 5\\n.....\\n.#.#.\\n.....\\n') == '1112211'\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(read()) == str(int(expected))\n-------------------------------\n\nIt is possible to make each student stand up exactly once, and doing so takes a minimum of the amount of minutes that they spent on reading.\n\nWe also want to be able to consider all students as the same length of time, which is the amount of minutes that we spend on reading a book.\n\nSo, for example, if we gave each student the same amount of time to read, they would all complete their books in exactly the same amount of time.\n\nBut we could give each student a different amount of time to read, resulting in some students standing up at different times.\n\nSo, for example, suppose we give each student 2 minutes to read a book. Then if we gave each student 1 minutes to read a book, the topmost books would be completed in 1 minute.\n\nWe would also get the maximum number of books that can be read, assuming that each student stands up at the same time, and each student stands up the same amount of time.\n\nConsider the following action:\n - Give the ith student 2 minutes to read the ith book from the top.\nHow many books can we read at most by repeating this action so that it takes us at most K minutes in total? We ignore the time it takes to do anything other than reading.\n\n-----Constraints-----\n - 1 \\leq N \\leq 200000\n - 1 \\leq K \\leq 10^9\n - 1 \\leq A_i, B_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\ldots A_N\nB_1 B_2 \\ldots B_M\n\n-----Output-----\nPrint an integer representing the maximum number of books that can be read.\n\n-----Sample Input-----\n3 4 240\n60 90 120\n80 150 80 150\n\n-----Sample Output-----\n3\n\nIn this case, it takes us 60, 90, 120 minutes to read the 1-st, 2-nd, 3-rd books from the top on Desk A, and 80, 150, 80, 150 minutes to read the 1-st, 2-nd, 3-rd, 4-th books from the top on Desk B, respectively.\nWe can read three books in 230 minutes, as shown below, and this is the maximum number of books we can read within 240 minutes.\n - Read the topmost book on Desk A in 60 minutes, and remove that book from the desk.\n - Read the topmost book on Desk B in 80 minutes, and remove that book from the desk.\n - Read the topmost book on Desk A in 90 minutes, and remove that book from the desk.\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\n\"\"\"\n\nimport os\nimport sys\nfrom io import StringIO\nfrom typing import List, Union\n\nPATH = os.path.dirname(os.path.realpath(__file__))\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == '3'\n\"\"\"\n\nfrom __future__ import annotations\nfrom collections import deque\nfrom typing import Deque, List, Tuple"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\\n\") == 3\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == '3'\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1500 2000 1600 3 2') == \"7900\"\n\n------Paste solution below this line------\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nprint('All tests passed.')\n\n-----"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\nimport sys\n\ntest_cases = [x.strip().split(' ') for x in sys.stdin.readlines()]\n\nfor a, b, c, x, y in test_cases:\n    pizza_cost = int(a) + int(b) + int(c)\n    total_cost = int(x) * int(a) + int(y) * int(b)\n    print(pizza_cost - total_cost)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\na, b, c, x, y = [int(x) for x in stdin.strip().split()]\na_pizza, b_pizza, ab_pizza = a * x, b * y, (a * x + b * y) // 2\nmin_pizza = min(a_pizza, b_pizza, ab_pizza)\nprint(min_pizza)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nA, B, C, X, Y = (int(i) for i in stdin.split(' '))\nprint(min((A * C) + (B * X), (A * X) + (B * C), (A * Y) + (B * X), (A * X) + (B * Y), (A * Y) + (B * C)))\n\n\"\"\"\nSolution 2\n\"\"\"\n\nA, B, C, X, Y = map(int, stdin.split())\nprint(min(A*C+B*(X+Y), A*(X+Y)+B*C, A*Y+B*X, A*X+B*Y, A*(X+Y)*(C+B)))\n\n\"\"\"\nSolution 3\n\"\"\"\n\nA, B, C, X, Y = [int(i) for i in stdin.split()]\nprint(min(A*C+B*(X+Y), A*(X+Y)+B*C, A*Y+B*X, A*X+B*Y, A*(X+Y)*(C+B)))\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\n\"\"\"\n\nimport sys\n\ninputs = iter(sys.stdin.read().splitlines())\na = int(next(inputs))\nb = int(next(inputs))\nc = int(next(inputs))\nx = int(next(inputs))\ny = int(next(inputs))\n\ntotal = a*x + b*y\ntotal += min((a+b)*x, a*y + (a+b)*x)\ntotal += min((a+c)*x, b*y + (a+c)*x)\ntotal += min((b+c)*x, a*y + (b+c)*x)\n\nprint(total)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '4'\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '4'\nassert solution('7') == '10'\n\n-------------------------------------------------\n\nInput:\n6\n\nOutput:\n10\n\nExplanation:\n6! = 720. 10 is the smallest number divisible by 6.\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('2') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"4\"\nassert solution(\"6\\n\") == \"6\"\nassert solution(\"5\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '4'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 1\n\nassert solution('7') == 3\n\nassert solution('10') == 2\n\nassert solution('0') == 1\n\nassert solution('-5') == 1"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"9\"\nassert solution(\"6\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"4\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('3') == '1'\nassert solution('1000') == '999'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == 1\nassert solution('10') == 9\n\"\"\"\n\nfrom math import log10, floor\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == 9\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n100') == '99'\nassert solution('3\\n2\\n9') == '9'\nassert solution('5\\n3\\n1024') == '1024'\nassert solution('6\\n4\\n32') == '32'\nassert solution('7\\n5\\n32') == '32'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == '9'\nassert solution('8') == '4'\nassert solution('7') == '4'\nassert solution('6') == '9'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"9\"\nassert solution(\"110\") == \"110\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1000\") == \"999\"\nassert solution(\"1234\") == \"123\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"9\"\nassert solution(\"8\") == \"9\"\nassert solution(\"10\") == \"9\"\nassert solution(\"11\") == \"11\"\nassert solution(\"15\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '4'\nassert solution('10') == '9'\n\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nprint(solution(\"4\\n10\\n8\\n8\\n6\"))"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nd = list(map(int, sys.stdin.readline().split()))\n\nprint(d.count(max(d)))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nprint(solution(\"4\\n10\\n8\\n8\\n6\"))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('3\\n6\\n8\\n10') == '1'\nassert solution('3\\n7\\n5\\n6\\n9') == '2'\n\"\"\"\n\nimport sys\n\nN = int(input())\n\nd_list = []\nfor _ in range(N):\n    d_list.append(int(sys.stdin.readline()))\n\ndp_list = [0] * N"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == 3\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\":)\") == \":)\"\n\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == 3\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"ASDF\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'QWERTYASDFZXCV'\n) == '5'\n\"\"\"\n\ns = stdin\na = 0\nb = 0\nfor i in range(len(s)):\n    if s[i] == 'A':\n        a += 1\n    elif s[i] == 'Z':\n        b += 1\nprint(a + b)\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == 5\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'QWERTYASDFZXCV'\n) == '5'\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\ns = input()\n\nprint(len(s) - 3)\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\nassert solution(\"3\\n1 2 4\") == \"0\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"4\\n8 12 40\") == \"2\"\nassert solution(\"3\\n8 12 40\") == \"2\"\n\nprint('Success')"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\\n\") == '2'\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 12 40') == 2\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 12 40') == '2'\n\"\"\"\n\n\"\"\"\nFor a given list of integers, find the maximum possible number of operations that Snuke can perform.\nSnuke can perform the following operation when all integers on the blackboard are even:\n - Replace each integer X on the blackboard by X divided by 2.\n\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n\nOutput is given in the following format:\nMAX_OPERATIONS\n\n-----Constraints-----\n - 1 \\leq N \\leq 200\n - 1 \\leq A_i \\leq 10^9\n\n-----Input-----\n5\n9 3 7 5 20\n\n-----Output-----\n3\n\"\"\"\n\nn = int(input())\narr = [int(item) for item in input().split(' ')]\n\narr.sort()\n\ncount = 0\nwhile True:\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            count += 1\n            break\n        else:\n            arr[i] //= 2\n    else:\n        break\nprint(count)"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5 7\") == \"4\"\nassert solution(\"3\\n8 12 40\") == \"2\"\nassert solution(\"1\\n16\") == \"0\"\nassert solution(\"2\\n4 6\") == \"2\"\nassert solution(\"2\\n4 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\n\"\"\"\n\nfrom collections import deque\n\nstdin = deque(int(num) for num in stdin.split(\"\\n\")[1:])"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n8 12 40') == '2'\n\"\"\"\n\n\"\"\"\nThe problem is the same as the problem D:\n\nfind the maximum number of operations that Snuke can perform:\nall positive integers are written on the blackboard.\nSnuke can perform the following operation:\n - replace each integer X on the blackboard by X divided by 2.\n\nThis problem can be solved with the same logic as D.\n\nThe only difference is that each integer should be divisible by 2.\n\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\nassert solution(\"5\\n5 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 40') == '2'\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 12 40') == '2'\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"10\") == 36\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1\\n1\") == 2\nassert solution(\"1\\n2\\n1\") == 1\n\"\"\"\n\n\"\"\"\nSolution Approach\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n\"\n) == \"6\"\n\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 6\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n') == 6\nassert solution('10\\n') == 55\n\"\"\"\n\nn = int(stdin.readline())\nres = 1\nfor i in range(n):\n    res *= (i + 1)\nprint(res % (10**9+7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 6\nassert solution('4') == 16\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == 6\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(5000)\n\nN = int(stdin.readline())\n\nprint(pow(1, N, 10 ** 9 + 7))"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n') == 1\nassert solution('3\\n') == 6\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"3\"\n) == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 6\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n\nN = int(input())\n\nprint(N*(N+1)//2)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = 0\n\nfor i in range(1, n + 1):\n    ans += i\n\nprint(ans)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '6'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\nprint(solution(\"3\"))"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 6\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\nassert solution(\"4\\n2 1 4 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '2'\nassert solution('4 2 4') == '4'\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n') == '2'\nassert solution('1 3\\n') == '1'\nassert solution('3 3\\n') == '0'\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\"\nimport collections"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 2 1\") == \"5\"\nassert solution(\"1 1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_output\n\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\nprint(\"Test PASSED\")"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n') == '2 2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 5\\n'\n    '1 WA\\n'\n    '1 AC\\n'\n    '2 WA\\n'\n    '2 AC\\n'\n    '2 WA\\n'\n) == '2 2'\n\n---\nYour puzzle answer was 923.\n\nThe first half of this puzzle is complete! It provides one gold star: *\n\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA'\n) == '2 2'\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 WA\\n2 AC\\n3 WA\\n2 WA\") == \"2 2\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nNaive solution:\n- set of N things with M things\n- if there is at least one thing A in the set with A[0] == 'AC'\n    - print A[0]\n    - update set of N things with A[1] == 'AC'\n    - print A[1]\n\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\ntakahashi_correct_answers = set()\ntakahashi_penalties = 0\n\nfor _ in range(M):\n    p, S = stdin.readline().split()\n    p = int(p)\n    if S == 'AC':\n        takahashi_correct_answers.add(p)\n        continue\n    elif S == 'WA':\n        takahashi_penalties += 1\n    else:\n        print('unknown:'+ S)\n        exit(1)\n\nprint('{} {}'.format(len(takahashi_correct_answers), takahashi_penalties))"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == e\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin.readlines()\n\nn, m = map(int, stdin[0].strip().split())\n\ncorrect = 0\npenalties = 0\n\nfor i in range(1, m + 1):\n    s = stdin[i].strip().split()\n    if s[1] == 'AC':\n        correct += 1\n    else:\n        penalties += 1\n\nprint(correct, penalties)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 AC\\n2 WA\") == \"2 2\"\nassert solution(\"5 5\\n1 AC\\n2 AC\\n3 WA\\n4 WA\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 1\n4 1 5''') == '5'\n\"\"\"\n\nimport math\n\nn, k = map(int, stdin.readline().strip().split())\nh = list(map(int, stdin.readline().strip().split()))\n\nh.sort(reverse=True)"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n4 1 5''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n4 1 5\\n') == '5'\nassert solution('2 10\\n3 5 4\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3 1\\n4 1 5\"\n) == \"5\"\n\"\"\"\n\nN, K = (int(i) for i in stdin.readline().split())\nH = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5\\n1 2 3 4\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\nassert solution(\"5 1\\n7 1 3 2 1\\n4 1 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 2 6\") == \"4\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\n\"\"\"\nfrom collections import defaultdict\nimport math\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split('\\n')[0])\n        k = int(stdin.split('\\n')[1])\n        xy = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n        # xy = [2, 6]\n        xy_dict = defaultdict(list)\n        for i in range(len(xy)):\n            xy_dict[xy[i]].append(i + 1)\n        res = 0\n        for i in range(1, n + 1):\n            if i in xy_dict:\n                for j in xy_dict[i]:\n                    res += j * 2\n        for i in range(1, n + 1):\n            if i not in xy_dict:\n                res += math.ceil((k - 1) / 2) * i\n        return str(res)\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10 2\") == \"4\"\nassert solution(\"1 20 4\") == \"16\"\nassert solution(\"2 100 10\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10\\n2\\n\") == \"4\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nx = list(map(int, sys.stdin.readline().split()))\n\nd = [abs(k - x_) for x_ in x]\n\nprint(sum(d) / 2)"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10 2\\n\") == '4'\nassert solution(\"3 3 3\\n\") == '9'\nassert solution(\"10 10 10\\n\") == '25'\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\"\n\nimport numpy as np\n\nN = int(input())\nK = int(input())\n\nballs = np.array(input().split(), dtype=int)\nA = np.zeros(K, dtype=int)\nB = np.zeros(K, dtype=int)\n\nfor i, ball in enumerate(balls):\n    if ball > K:\n        pass\n    elif ball < 0:\n        pass\n    else:\n        if ball % 2 == 0:\n            A[ball] = i\n        else:\n            B[ball] = i\n\nfor i in range(K):\n    if A[i] == 0 and B[i] == 0:\n        pass\n    elif A[i] > 0:\n        A[i] -= 1\n    elif B[i] > 0:\n        B[i] -= 1\n\ndist = 0\nfor ball in balls:\n    if ball % 2 == 0:\n        dist += 2*A[ball]\n    else:\n        dist += 2*B[ball]\n\nprint(dist)"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10\\n2\\n\") == \"4\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10 5\\n0 2\\n1 0') == '9'\nassert solution('2 10 3\\n0 3\\n0 1') == '14'\nassert solution('5 10 7\\n0 3\\n0 1') == '12'\n\"\"\"\nimport sys"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('4 4 5 1 1') == '6'\nassert solution('1 0 1 1 1') == '0'\nassert solution('3 3 4 1 1') == '7'\nassert solution('2 4 4 4') == '8'\n\"\"\"\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nB = [None] * n\n\nfor i, a in enumerate(A):\n    B[a - 1] = i + 1\n\nprint(len(set(B)))\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"3\\n1 1 1\") == \"0\"\nassert solution(\"3\\n1 1 2\") == \"0\"\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\"\nfrom collections import deque, defaultdict\nfrom itertools import permutations\nimport sys\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == 4\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\nassert solution('5\\n2 4 4 1 2') == '0'\nassert solution('5\\n1 2 4 4 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '0'\nassert solution('1 2 3 4 5\\n0 0 0 1') == '4'\nassert solution('1 2 3 4 5\\n0 0 0 1\\n0 0 0 0') == '4'\nassert solution('1 2 3 4 5\\n0 0 0 1\\n0 0 0 0\\n0 0 0 0') == '0'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\"\n\n\"\"\"\nThe following solution works by iterating over each number, and keeping track of the number of times it occurs.\nAfter that, we sort the numbers and then iterate over them again and check whether the elements are the ones that we are looking for.\nThe reason that the time complexity is O(NlogN) is that we are sorting the numbers, and the space complexity is O(N) since we are using a hashmap to store the occurences of each element."
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 4 0 2') == 4\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint('Hooray!')\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(\"Test PASSED\")\n\n-----\nIf you've passed all the tests,\n\nPlease solve it and save the solution code.\n\n'''\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 2 5\") == \"84\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 2 5') == '84'\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '20 2 5'\n) == '84'\n\nassert solution(\n    '20 10 11'\n) == '105'\n\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin='') == ''\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"20 2 5\") == \"84\"\nprint(\"Teste passe\")"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 2 5') == '84'\n\"\"\"\n\nimport sys\n\nN, A, B = [int(x) for x in sys.stdin.readline().strip().split()]\n\ntotal = 0\nfor n in range(1, N+1):\n    total += sum(map(int, list(str(n))))\n    if A <= sum(map(int, list(str(n)))) <= B:\n        total += n\n\nprint(total)\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 2 5') == '84'\nassert solution('12 3 5') == '12'\nassert solution('1 10 3') == '0'\nassert solution('1 10 100') == '1010'\nassert solution('12 3 5') == '12'\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100') == \"ABC100\"\nassert solution('999') == \"ABC999\"\nassert solution('101') == \"ABC101\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == 'ABC100'\nassert solution('999') == 'ABC999'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('123\\n') == ''\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nimport sys\n\n\"\"\"\nN = 100\n\"\"\"\n\n\"\"\"\nN = 100\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline().strip()\nprint(\"ABC\" + str(int(n) + 100))\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n\nn = input()\nprint('ABC{}'.format(n))\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\n\"\"\"\n4 2\n5 4\n6 6\n\n\"\"\"\n\nfrom datetime import datetime, timedelta\n\na, b = map(int, stdin.split())\n\ns = datetime(2018, 1, 1)\ne = datetime(2018, a, b)\n\ncount = 0\nwhile s.year == e.year and s.month == e.month:\n    count += 1\n    s += timedelta(days=1)\n    e += timedelta(days=1)\nprint(count)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5') == '5'"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"5\"\nprint(\"All sample test cases passed.\")\n\n-----Problem-----\nAtCoder Grand Contest 203 (AtCoder International Virtual Contests) is going on!\nToday is Grand Contest Day. Everyone will submit a solution to AtCoder Grand Contest 203.\nThis contest is a division contest. You can see the detail at https://atcoder.jp/contests/agc203\n\nThis contest is a hard contest. You have only one chance to submit a solution.\n\nYour task is to submit a solution that solves the following problem:\n\nThere are N students in A. For each student, you know his/her friendship score with all the other students.\nYou are also given an integer Q. For each query of the type x and y, find the total friendship score between x and y.\n\n----Input----\nThe first line of the input contains an integer T denoting the number of test cases.\nThe description of T test cases follows.\nThe first line of each test case contains two space-separated integers N and Q.\nThe second line contains N space-separated integers A1, A2,..., AN.\nEach of the Ai is an integer between 1 and 109.\nThe third line contains Q queries.\nEach query is of the form x and y. x is an integer between 1 and N and y is an integer between 1 and N.\n\n----Output----\nFor each query, print the total score between x and y.\n\"\"\"\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5') == '5'\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(f'{a}-{b}')"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5') == '5'\nassert solution('1 1') == '1'\n\n\"\"\"\n\nfrom datetime import datetime, timedelta\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 12\") == \"0\"\nassert solution(\"12 1\") == \"0\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\nassert solution(\"3\\n1\\n1\\n2\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        n, a_1, a_2 = map(int, stdin)\n        if n == 2:\n            return '-1'\n        for a in range(1, n+1):\n            if a == a_2 and a == a_1:\n                continue\n            if a == a_1:\n                return '-1'\n        return str(n - a_2 + a_1 - 1)\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2') == '2'\nassert solution('3\\n2\\n3') == '-1'\nassert solution('2\\n1\\n2') == '0'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\nassert solution(\"3\\n1\\n2\\n3\") == \"1\"\nassert solution(\"3\\n1\\n2\\n3\\n2\\n3\") == \"1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n2') == '2'\nassert solution('3\\n2\\n1') == '-1'\nassert solution('3\\n2\\n2') == '0'\nassert solution('3\\n3\\n1') == '2'\nassert solution('3\\n3\\n2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3\\n1\\n2') == '2'"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"2\\n1\\n2\\n\") == \"1\"\nassert solution(\"1\\n1\\n1\\n\") == \"0\"\nassert solution(\"3\\n1\\n1\\n\") == \"2\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nFor each line, the input provides one integer that is the number of buttons.\nThe problem is to find whether it is possible to press all buttons to get Button 2, so the answer should be either 1, 2, or -1.\nIf 1, we can press all buttons to get Button 2 in the first press,\nand then press Button 1, then press Button 2 to get Button 2.\nIf 2, we can press Button 1, then press Button 2, then press Button 1, to get Button 2.\nIf -1, it is impossible to press all buttons to get Button 2.\n\nComplexity\nSince the input is in the range 2 \u2264 N \u2264 10^5, O(N) is needed for reading.\nThe space complexity is O(1).\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"2\"\nassert solution(\"2 2\") == -1\nassert solution(\"1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n2\") == '1\\n3'\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(stdin.readline()) for i in range(n)]\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\n\"\"\"\n\nN = int(input().strip())\n\na = [None] * N\nfor i in range(N):\n    a[i] = int(input().strip())\n\nprint(a)"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == \"1\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3') == ''\nassert solution('4') == ''\nassert solution('5') == ''\nassert solution('6') == ''\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n2\\n6\") == \"1\"\nassert solution(\"3\\n6\\n2\") == \"1\"\nassert solution(\"6\\n6\\n6\") == \"1\"\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\nl = []\nfor _ in range(n):\n    l.append(int(stdin.readline()))\nl = sorted(l)\nprint(l[len(l)//2])\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n2\\n6\\n\") == \"1\"\n\n--------------------------------------------\n\n###\n\n###\n\n###\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n6\\n2\\n6\\n'\n) == '1'\nassert solution(\n    '2\\n1\\n5\\n'\n) == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == '1'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\ncount = 0\nfor i in range(n):\n    temp = int(sys.stdin.readline())\n    if temp == 0:\n        count += 1\n        print(count)\n    else:\n        count = 0\n        print(count)\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\n\"\"\"\nMain idea:\nAfter each operation, the number of unique elements in each ball is decreased by one.\n\nComplexity:\nn = number of balls\nTime: O(n)\nSpace: O(n)\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == 1\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 1 2 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\n-------TESTING-------\nimport unittest\nclass Test(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(1)\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nd = {}\nfor i in set(arr):\n    d[i] = arr.count(i)\n\ns = sorted(d.items(), key = lambda x: x[1])"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 2 2 5') == '1'\nassert solution('1 2 2 5') == '2'\nassert solution('5 2') == '1'\nassert solution('1 5') == '2'\nassert solution('1 1 1 1 1') == '0'\n\n\"\"\"\n\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\\n5 1 1\") == \"Yes\"\nassert solution(\"4 3 2\\n5 1 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations\nfrom collections import namedtuple\n\n\nCoordinate = namedtuple(\"Coordinate\", [\"x\", \"y\", \"t\"])"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\":\n1 2 2\n1 2 2\") == 'Yes'\nassert solution(\":\n1 2 2\n1 2 3\") == 'No'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == \"Yes\"\n\n----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n\na, b = [int(x) for x in sys.stdin.readline().split()]\nx = (a + b) / 2\nprint(math.ceil(x))\n\n\n\"\"\"\n\u0414\u0430\u043d\u043e \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: a \u0438 b. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f:\n\"\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2\".\n\n\u0412\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e f(x) \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0435\u0451 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u0435.\n\n-----Constraints-----\n - a \u0438 b \u0440\u0430\u0437\u043d\u044b\u0435\n - 1 \\leq a, b \\leq 10^5\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 f(x) = 1.5 * x + 5.2.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u0435 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0435\u0451 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u0435.\n\n-----Sample Input-----\n7 6\n\n-----Sample Output-----\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2.\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2.\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2.\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2.\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2.\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2.\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = 1.5 * x + 5.2.\n\u0427\u0438\u0441\u043b\u0430 a \u0438 b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0430\u043c"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(int(round((a+b)/2)))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"2\"\n\nassert solution(\"4 6\") == \"6\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"5 11\") == \"6\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"1 10\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"2 1\") == \"2\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3') == '2'\nassert solution('2 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == 2\n\"\"\"\nimport math"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 3\\n\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == '4'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\n\nedges = {}\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    edges[a] = edges.get(a, []) + [b]\n    edges[b] = edges.get(b, []) + [a]\n\nbridges = 0\nfor i in range(1, n + 1):\n    if i not in edges:\n        bridges += len(edges[i]) - 1\n        for e in edges[i]:\n            if e!= i:\n                bridges -= len(edges[e])\n\nprint(bridges)\n\n\"\"\"\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\nbridges = 0\n\nedges = {}\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    edges[a] = edges.get(a, []) + [b]\n    edges[b] = edges.get(b, []) + [a]\n\nfor i in range(1, n + 1):\n    if i not in edges:\n        bridges += len(edges[i]) - 1\n        for e in edges[i]:\n            if e!= i:\n                bridges -= len(edges[e])\n\nprint(bridges)\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == answer\n\n\"\"\"\n\nfrom math import factorial\nimport sys"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7''') == '4'\nassert solution('''7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7''') == '5'\nassert solution('''7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7''') == '6'\nassert solution('''7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7''') == '7'\n'''\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == 4\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(A,B,C) == D\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('6 4 8') == '4'\n\"\"\"\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 5\") == '7'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 5') == '7'\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 2 3\"\n    ) == \"2\"\n\nassert solution(\n    \"5 5 5\"\n    ) == \"5\"\n\nassert solution(\n    \"5 7 5\"\n    ) == \"7\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"5 6 6\") == \"6\"\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 3 1') == '3'\nassert solution('1 1 1') == '1'\nassert solution('1 1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == '7'\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"3 3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 10 20 15 200\"\n) == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\nThis problem can be solved by dynamic programming.\n\nThe idea is to find the largest value of n that satisfies the constraint.\n\nThis is a variant of the Knapsack problem.\n\nFor n in range(1, 4):\n    for c in range(1, 301):\n        for d in range(1, 301):\n            if c * d > E:\n                continue\n            if (100 * n + 100 * d) / (100 * c + d) > F:\n                continue\n            if 100 * n + 100 * d > 200 * n:\n                continue\n            if d * (n - 1) > F:\n                continue\n            if c * (n - 1) > F:\n                continue\n            ans = max(ans, (c * d * n, n))"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('internationalization') == 'i18n'\n\n-----\nfor i, letter in enumerate(stdin):\n    pass\n\n\n-----\nfrom string import ascii_lowercase\nfor i, letter in enumerate(stdin):\n    print(i, letter)\n    for letter in ascii_lowercase:\n        if letter == stdin[i]:\n            return letter\n\nfor letter in ascii_lowercase:\n    if letter == stdin[i]:\n        return letter"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(i18n) == \"i18n\"\n\"\"\"\n\nimport sys\nimport string\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nfrom solutions.problem_002 import solution\n\n\nclass TestProblem002(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('internationalization'), 'i18n')\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('') == 'NO'\nassert solution('potpot') == 'NO'\nassert solution('toptop') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pot top\") == \"YES\"\n\"\"\"\n\nfrom typing import Dict, List\nimport re"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'NO'\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"pot\\ntop\"\n) == \"YES\"\n\"\"\"\n\ngrid = []\nfor i in range(3):\n    grid.append(stdin.strip().split('\\n')[i])\n\nfor i in range(3):\n    for j in range(3):\n        print(grid[j][2 - i], end='')\n    print()\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot top\") == \"YES\"\n\"\"\"\n\ntest_grid = [list(x.strip().split()) for x in \"pot top\".split('\\n')]\nrotate_grid = [[test_grid[-i][-j] for i in range(len(test_grid))] for j in range(len(test_grid[0]))]\ntest_grid = [[test_grid[i][j] for i in range(len(test_grid))] for j in range(len(test_grid[0]))]"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pot', 'top') == 'YES'\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pot\") == \"YES\"\n\n'''\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"aba\", 3) == \"b\"\nassert solution(\"aba\", 4) == \"ab\"\nassert solution(\"aba\", 5) == \"a\"\nassert solution(\"abc\", 2) == \"ab\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"b\"\n\nassert solution(\"abacabacab\") == \"aba\"\n\n\"\"\"\n\nfrom heapq import heappop, heappush\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_0) == 'b'\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abcde\") == \"abcd\"\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('aa') == 'aa'\nassert solution('abab') == 'bab'\nassert solution('ababa') == 'ba'\nassert solution('abac') == 'bac'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ababc') == 'b'\n\"\"\"\n\nfrom typing import List, Any\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'b'\nassert solution('abaa') == 'ab'\nassert solution('abcd') == 'abcd'\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abab\") == \"aba\"\n\n\"\"\"\n\nfrom collections import OrderedDict"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(sample_input_0)) == str(sample_output_0)\n\n'''"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\nprint(solution(stdin.strip()))\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == '9'\n\"\"\"\n\nimport math\n\nW, H, N = (int(x) for x in stdin.split())\nx = []\ny = []\na = []\n\nfor i in range(N):\n    x_i, y_i, a_i = (int(x) for x in stdin.split())\n    x.append(x_i)\n    y.append(y_i)\n    a.append(a_i)\n\narea = 0\n\nfor i in range(N):\n    if a[i] == 1:\n        for j in range(i+1, N):\n            if x[i] <= x[j] and y[i] > y[j]:\n                area += (x[j] - x[i]) * (y[i] - y[j])\n    if a[i] == 2:\n        for j in range(i+1, N):\n            if x[i] >= x[j] and y[i] > y[j]:\n                area += (x[j] - x[i]) * (y[i] - y[j])\n    if a[i] == 3:\n        for j in range(i+1, N):\n            if x[i] < x[j] and y[i] >= y[j]:\n                area += (x[j] - x[i]) * (y[i] - y[j])\n    if a[i] == 4:\n        for j in range(i+1, N):\n            if x[i] >= x[j] and y[i] >= y[j]:\n                area += (x[j] - x[i]) * (y[i] - y[j])\n\nprint(area)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\nimport math\nimport random\nfrom typing import List, Tuple"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2\\n3 1 1\\n2 3 4\") == \"9\"\n\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom math import floor\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nW, H, N = [int(x) for x in input().split()]\nX = [int(x) for x in input().split()]\nY = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\narea = 0\nfor i in range(N):\n    if A[i] == 1:\n        area += W - X[i]\n    elif A[i] == 2:\n        area += X[i]\n    elif A[i] == 3:\n        area += Y[i]\n    else:\n        area += H - Y[i]\n\nprint(area)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4 2\n2 1 1\n3 3 4''') == '9'\nprint('Test pass.')"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\nassert solution(\"4\\n9 10 1\\n1 1 1\") == \"10\\n1\\n0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\nprint('Success')\n\n--------------------------------------------------"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport math\n\n\nclass Station:\n    def __init__(self, id: int, arrival_time: int, interval: int):\n        self.id = id\n        self.arrival_time = arrival_time\n        self.interval = interval\n\n\nclass Rail_road:\n    def __init__(self, stations: int, arrivals: int, departures: int):\n        self.stations = stations\n        self.arrivals = arrivals\n        self.departures = departures\n\n    def is_endpoint(self):\n        return self.stations == self.arrivals == self.departures\n\n\nclass Day_of_the_cannibals:\n    def __init__(self, stdin: str, expected_output):\n        self.stdin = stdin\n        self.expected_output = expected_output\n\n    def solution(self):\n        if self.stdin == \"\":\n            return \"\"\n\n        railroad = self.parse_input()\n        if not railway.is_endpoint():\n            raise ValueError(\"Cannibals don't like stopping at a station. There must be no gaps.\")\n        result = self.find_earliest_time(railroad)\n        return result\n\n    def find_earliest_time(self, railway: Rail_road):\n        result = []\n\n        time = 0\n        station = railway.stations - 1\n        while station >= 0:\n            time += 1\n            if time % railway.arrivals == 0:\n                result.append(time)\n                station -= 1\n            else:\n                time += railway.departures\n\n        return result\n\n    def parse_input(self) -> Rail_road:\n        stations = []\n        split_input = self.stdin.split(\"\\n\")\n\n        for line in split_input:\n            station_id, arrival_time, interval = line.split(\" \")\n            stations.append(Station(int(station_id), int(arrival_time), int(interval)))\n\n        return Rail_road(stations[0].id, stations[0].arrival_time, stations[0].interval)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n\"\"\"\nimport numpy as np\nimport pandas as pd\nfrom typing import List, Tuple\nfrom unittest import TestCase\nfrom z3 import *\nfrom z3 import Int, Sum"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 10 1\\n') == '12'\nassert solution('3\\n6 5 1\\n') == '12'\n\"\"\"\n\nfrom sys import stdin\nimport math\n\nN = int(stdin.readline().rstrip())\ntimeline = []\nfor _ in range(N):\n    timeline.append(list(map(int, stdin.readline().rstrip().split())))\n\nstation = {}\nfor i in range(N):\n    for time in timeline[i]:\n        if time % (i + 1) == 0:\n            station[i + 1] = time\n\nstation[N] = math.inf\n\nqueue = [[1, 0]]\n\nwhile queue:\n    station_num, sec = queue.pop(0)\n    sec += station[station_num]\n    for i in range(N):\n        if station_num in station:\n            if i + 1 in station and sec + 1 < station[i + 1]:\n                station[i + 1] = sec + 1\n                queue.append([i + 1, sec + 1])\n\nfor i in range(1, N + 1):\n    if i in station:\n        print(station[i])\n    else:\n        print(0)"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n6 5 1\\n1 10 1\\n') == '12\\n11\\n0'\n\"\"\"\n\n\"\"\"\n\u89e3\u8aac\n\u30fb\u62bd\u8c61\u5316\u3059\u308b\u3068\u3001\u5168\u3066\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u5bfe\u3057\u3066\u6700\u5c0f\u5236\u9650\u306e\u6642\u9593\u3067\u6765\u308b\u304b\u5224\u5b9a\u3059\u308b\u3060\u3051\u3067\u3088\u3044\n\"\"\"\n\n\nfrom collections import deque\nfrom math import gcd\n\nn = int(input())\nc = deque()\ns = deque()\nf = deque()\nfor _ in range(n):\n    c_, s_, f_ = map(int, input().split())\n    c.append(c_)\n    s.append(s_)\n    f.append(f_)\n\nc.append(c[0])\ns.append(s[0])\nf.append(f[0])\n\nnow = 0\nans = 0\n\nwhile c:\n    while c[0] > now:\n        now += s.popleft()\n    while c[0] == now:\n        now += f.popleft()\n    ans = max(ans, now)\n    now += c.popleft()\nprint(ans)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":10:10:1\") == \"12\\n11\\n0\"\nassert solution(\":10:10:0\") == \"12\\n11\\n12\"\nassert solution(\":10:10:10\") == \"12\\n11\\n12\\n12\"\nassert solution(\":10:10:100\") == \"12\\n11\\n12\\n12\\n12\"\nassert solution(\":10:10:1000\") == \"12\\n11\\n12\\n12\\n12\\n12\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\nassert solution(\"2 3\\n.*\\n.**\") == \"*.\\n.*\\n.*\"\nassert solution(\"1 1\\n.*\") == \".*\"\nassert solution(\"2 3\\n.*\\n.**\") == \".*\\n.*\\n.*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \"*.\\n*.\\n.*\\n.*\"\nassert solution(\"1 1\\n.*\") == \"*.\\n\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\nassert solution(\"1 1\\n*\") == \"*\"\nassert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\nassert solution(\"2 2\\n..\\n.*\") == \"..\\n.*\"\nassert solution(\"2 3\\n...\\n*\") == \"...\\n*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('*\\n') == '*\\n'\nassert solution('**\\n') == '**\\n'\nassert solution('*.*\\n') == '*.*\\n'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\n\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\nassert solution(\"3 3\\n....\\n....\\n....\") == \"....\\n....\\n....\\n....\\n....\\n....\\n....\"\nassert solution(\"2 3\\n.*.\\n.*.\") == \"*.\\n.*\\n.*.\"\nassert solution(\"4 4\\n.****\\n.****\\n.****\\n.****\") == \"****\\n****\\n****\\n****\\n****\\n****\"\nassert solution(\"5 5\\n.****.\\n.****.\\n.****.\\n.****.\\n.****.\") == \"****.\\n.****.\\n.****.\\n.****.\\n****.\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*\\n.*\\n.*'\nassert solution('1 1\\n*') == '*'\n\"\"\"\nfrom math import floor\n\nfor _ in range(int(input())):\n    h, w = [int(x) for x in input().split()]\n    i = 1\n    j = 0\n    m = floor((h - 1) / 2)\n    n = floor((w - 1) / 2)\n    while i < m + 1:\n        print(''.join(['*' if j == 0 or j == w - 1 else '.' for j in range(w)]))\n        i += 1\n        j = 1\n    while j < n + 1:\n        print(''.join(['*' if j == 0 or j == w - 1 else '.' for j in range(w)]))\n        j += 1\n    while i > m + 1:\n        print(''.join(['*' if j == 0 or j == w - 1 else '.' for j in range(w)]))\n        i -= 1\n        j = 1\n    while j > n + 1:\n        print(''.join(['*' if j == 0 or j == w - 1 else '.' for j in range(w)]))\n        j -= 1\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".*.\\n.*.\") == \".*.\\n.*\"\nassert solution(\".*..\\n.*..\\n.*..\\n.*..\") == \"..*..\\n..*..\\n..*..\\n..*..\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'NO'\nassert solution('2\\n1\\n') == 'YES'\nassert solution('3\\n1\\n2\\n') == 'NO'\nassert solution('4\\n1\\n2\\n3\\n') == 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n2 6 1 4') == 'NO'\n\nassert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\n\"\"\"\n\nimport sys\nimport re\n\nregex = re.compile('^[1-9]\\\\d*\\\\s+[1-9]\\\\d*$')"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2 6 1 4 5''') == 'YES'\n\n\"\"\"\n\nimport sys\nimport pdb\nfrom collections import Counter\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''3\n1 2 3''') == 'NO'\nassert solution('''3\n1 2 1''') == 'NO'\nassert solution('''4\n3 3 3 3''') == 'NO'\nassert solution('''5\n1 1 1 1 1''') == 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 6 1 4 5\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6 1 4 5\") == \"YES\"\n\"\"\"\n\nimport sys\n\ninput()"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n\n\"\"\"\nINPUT:\n4\n1 2 1 3\nOUTPUT:\nYES\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\nassert solution(\"5\\n2 6 1 1 5\") == \"NO\"\nassert solution(\"3\\n5 6 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"2\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"4\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 1 3\") == \"1\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '3'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '4'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '1'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 1 1\\n4\\n3 3 2 2\") == '2'\nassert solution(\"3\\n1 1 2\\n2\\n1 1 2\") == '1'\nassert solution(\"2\\n4\\n6 6 8\\n8\\n6 6 8\\n8\\n4\\n6 6 8\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"7\\n1 1 3 4 2 2 5\") == \"3\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '3'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '4'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '1'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"4\"\nassert solution(\"\"\"5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"2\"\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\\n3\\n4\\n1\\n2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n\n-----Problem-----\n\nAfter a long journey of searching for a job, your car breaks down on the highway. That's where you park and rent a car, buy a new one and start your journey from the beginning again.\n\nBefore you can find a new mechanic, you realize that the problem with your old car is that the brake disk is still glued to it. The driver told you that it's not possible to remove it, but now you need to drive with your car without the disk.\n\nYou know that the brake disk is made of only one material, but you don't know how much. As a driver, you don't want to fail the job and go without the brake disk. So you need to know how much the brake disk costs.\n\nThe brake disk costs $100$, but you need it to drive the car, so you need to find a new brake disk and replace your old one.\n\nThe brake disk can be any material except metal. You have to find the cheapest possible brake disk.\n\nInput\n\nThe first line contains one integer $T$ (1 \\le T \\le 100) \u2014 the number of test cases.\n\nThe only line of the test case contains one string $S$ \u2014 the material of the brake disk.\n\nIt is guaranteed that the string contains only non-capital Latin letters.\n\nIt is guaranteed that the length of $S$ is between 1 and 20.\nOutput\n\nFor each test case, print one line containing one integer $n$ \u2014 the cost of the cheapest brake disk.\n\n-----Example-----\nInput\n\n3\ncar\n\nOutput\n\n100\n100\n50\n\n\n-----Explanation-----\n\nTest case 1: The cost of the cheapest brake disk is $100$.\nTest case 2: The cost of the cheapest brake disk is $100$.\nTest case 3: The cost of the cheapest brake disk is $50$.\n\n-----Answer-----\n\nThe cheapest brake disk is made of any material except metal.\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 5\\n22 5\\n987 13\\n') == '3'\n\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4\\n'\n    '7 3\\n'\n    '1 5\\n'\n    '22 5\\n'\n    '987 13\\n'\n) == '3\\n1\\n5\\n77'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '3'\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '1'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '5'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '77'\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == \"1\"\nassert solution(\"7 3\") == \"3\"\nassert solution(\"22 5\") == \"77\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readlines()\nn, x = map(int, stdin[0].strip().split())\nfor line in stdin[1:]:\n    n, x = map(int, line.strip().split())\n    print(f\"{n // x}\")\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == '3'\nassert solution(\"1 5\") == '1'\nassert solution(\"22 5\") == '5'\nassert solution(\"987 13\") == '77'\nassert solution(\"3\") == '1'\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, x = input().split()\n    n = int(n)\n    x = int(x)\n    if x > n:\n        print(x)\n    else:\n        print(x // 2 + (n - x) // 2)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\nassert solution(\"22 22\") == \"1\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abca') == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2, 10, 1, 5, 2]\nassert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('abacaba') == [3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(codeforces) == '26 10 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n\"\"\"\n\nimport numpy as np\n\nt = int(input())\nwhile t > 0:\n    n, m = list(map(int, input().split()))\n    s = input()\n    p = list(map(int, input().split()))\n    p = [x-1 for x in p]\n    p_arr = np.array(p)\n    p_arr.sort()\n    p_arr = np.unique(p_arr)\n    p_arr = np.append(p_arr, n)\n    res_arr = np.array([0]*n)\n    for i in range(m):\n        res_arr[p_arr[i]:p_arr[i+1]] = res_arr[p_arr[i]:p_arr[i+1]] + 1\n    res_arr = np.sum(res_arr)\n    print(res_arr)\n    t -= 1\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == '26 10'\nassert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('abcd') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\nassert solution('abc') == '3 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\nassert solution('abcd') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \"\n\n\"\"\"\nfrom itertools import chain, combinations"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1]\nassert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"abcb\") == [4, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1]\nassert solution(\"abcc\") == [4, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1]\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\nimport math\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    n, m = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    l = [0] * 26\n    for i in range(m):\n        l[ord(s[i]) - ord('a')] += 1\n    for i in range(n):\n        if i!= 0:\n            print(' ', end='')\n        print(str(l[i]), end='')\n    print('')\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"26 10\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\n\"\"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 6\\n2 3 1\\n5 6 1') == '6'\nassert solution('1 1000000000 999999999\\n2 3 5\\n3 2 6') == '1999999994'\nassert solution('3 2 5\\n3 2 6\\n') == '0'\nassert solution('3 2 5\\n3 2 6\\n1 1000000000 999999999') == '1999999994'\nassert solution('3 2 5\\n3 2 6\\n1 1000000000 999999999') == '1999999994'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 4\\n10 20 30\") == \"0\"\nassert solution(\"5 5 5\\n2 4 3\") == \"0\"\nassert solution(\"2 4 3\\n1 1000000000 1000000000\") == \"1999999994\"\nassert solution(\"1 1000000000 999999999\\n3 2 5\") == \"2\"\nassert solution(\"3 2 5\\n3 2 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 4\") == \"0\"\nassert solution(\"3 3 4\") == \"36\"\nassert solution(\"1 1000000000 999999999\") == \"1999999994\"\nassert solution(\"3 2 5\") == \"2\"\nassert solution(\"3 2 6\") == \"4\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom itertools import permutations\nfrom math import sqrt\n\nsys.setrecursionlimit(100000)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 4\\n10 20 30') == '0\\n36'\nassert solution('5 5 5\\n2 4 3') == '0\\n0'\nassert solution('1 1000000000 999999999\\n3 2 5') == '1999999994\\n1999999994'\nassert solution('3 2 5\\n3 2 6') == '2\\n4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == '0'\nassert solution('4 3 2') == '36'\nassert solution('3 3 4') == '0'\nassert solution('3 2 4') == '36'\nassert solution('3 4 2') == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n\"\"\"\n\nimport sys\nfrom typing import Tuple\n\nsys.setrecursionlimit(111111)\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\"\"\"\n\n\"\"\"\n7.6 \u0421\u0430\u043c\u044b\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u0438 \u043d\u0438\u0437\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n\u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n\u043f\u0435\u0440\u0432\u043e\u0435 \u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0447\u0430\u0441\u043e\u0432 \u0441\u0443\u0442\u043e\u043a (\u043c\u043e\u0436\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u043d\u0430 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f):\n\na1, b1, c1,\na2, b2, c2\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0442\u0440\u0435\u0445 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0447\u0430\u0441\u0430\u0445 \u0441\u0443\u0442\u043e\u043a \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u043d\u044f \u0438 \u043c\u0435\u0441\u044f\u0446\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f:\n\na1 \u2013 \u043f\u0435\u0440\u0432\u043e\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0443\u0442\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\nb1 \u2013 \u0432\u0442\u043e\u0440\u043e\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0443\u0442\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\nc1 \u2013 \u0442\u0440\u0435\u0442\u044c\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0443\u0442\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\na2 \u2013 \u043f\u0435\u0440\u0432\u043e\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0443\u0442\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\nb2 \u2013 \u0432\u0442\u043e\u0440\u043e\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0443\u0442\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\nc2 \u2013 \u0442\u0440\u0435\u0442\u044c\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0443\u0442\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0414\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f datetime.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438, \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u0434\u0435\u043d\u044c, \u043c\u0435\u0441\u044f\u0446 \u0438 \u0433\u043e\u0434.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0432 \u0432\u0438\u0434\u0435 \u0447\u0438\u0441\u043b\u0430, \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u044c \u0434\u043e \u0442\u0440\u0435\u0445 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0447\u043a\u0438.\n\nSample Input 1:\n\n3 1 2\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\nSample Output 1:"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\"\"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\n'''\n\nq = int(input())\nfor _ in range(q):\n    a, b, c = map(int, input().split())\n    print(abs(a - b) + abs(a - c) + abs(b - c))"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8') == 'YES'\nassert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8') == 'NO'\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nprint(solution(stdin))"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"NO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\\n') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\\n') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\nassert solution('4\\n5\\n1 2 3 4\\n2\\n2 1\\n4\\n2 1\\n') == 'YES\\nYES\\nNO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\\n') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\n\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import Callable, List, Dict\nfrom string import ascii_uppercase\nfrom enum import Enum\nfrom random import randint\nfrom copy import deepcopy\n\nclass Field(Enum):\n    EMPTY = \".\"\n    BLOCKED = \"#\"\n    START = \"S\"\n    GOAL = \"G\"\n    PATH = \"*\"\n\n\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n    def __repr__(self):\n        return f\"({self.x}, {self.y})\"\n\nclass Labyrinth:\n    def __init__(self, size: int):\n        self.size = size\n        self.labyrinth = [[Field.EMPTY] * size for _ in range(size)]\n        self.start = None\n        self.goal = None\n\n    def __str__(self):\n        result = \"\"\n        for i in self.labyrinth:\n            for j in i:\n                result += j.value\n            result += \"\\n\"\n        return result\n\n    def set(self, position: Point, value: Field):\n        self.labyrinth[position.x][position.y] = value\n\n    def is_valid(self, position: Point):\n        return 0 <= position.x < self.size and 0 <= position.y < self.size\n\n    def get(self, position: Point):\n        if not self.is_valid(position):\n            return Field.BLOCKED\n        return self.labyrinth[position.x][position.y]\n\n    def set_start(self, start: Point):\n        if self.get(start)!= Field.EMPTY:\n            raise Exception(f\"Impossible to set start: {start}\")\n        self.start = start\n\n    def set_goal(self, goal: Point):\n        if self.get(goal)!= Field.EMPTY:\n            raise Exception(f\"Impossible to set goal: {goal}\")\n        self.goal = goal\n\n    def set_path(self, path: List[Point]):\n        for point in path:\n            if not self.is_valid(point):\n                continue\n            self.set(point, Field.PATH)\n\n    def neighbors(self, position: Point) -> List[Point]:\n        result = []\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i == 0 and j == 0:\n                    continue\n                new_position = Point(position.x + i, position.y + j)\n                if self.is_valid(new_position) and self.get(new_position)!= Field.BLOCKED:\n                    result.append(new_position)\n        return result\n\n    def solve(self, is_path_valid: Callable[[Point, Point], bool]) -> bool:\n        if self.start == self.goal:\n            return True\n\n        def dfs(position: Point, path: List[Point]):\n            if position == self.goal:\n                self.set_path(path)\n                return True\n            for neighbor in self.neighbors(position):\n                if is_path_valid(position, neighbor):\n                    path.append(position)\n                    if dfs(neighbor, path):\n                        return True\n                    path.pop()\n            return False\n\n        path = [self.start]\n        if dfs(self.start, path):\n            return True\n        return False\n\n\nclass LabyrinthSolver:\n    def __init__(self, labyrinth: Labyrinth, eps: int = 1):\n        self.labyrinth = labyrinth\n        self.start = labyrinth.start\n        self.goal = labyrinth.goal\n        self.eps = eps\n        self.solution_length = None\n        self.solution = None\n\n    def solve(self):\n        def is_valid(p1: Point, p2: Point):\n            return (p1 - p2).x ** 2 + (p1 - p2).y ** 2 <= self.eps ** 2\n\n        def dfs(path: List[Point]):\n            if len(path) > self.solution_length:\n                self.solution_length = len(path)\n                self.solution = path\n                return True\n            if path[-1] == self.goal:\n                return True\n            for neighbor in self.labyrinth.neighbors(path[-1]):\n                if is_valid(path[-1], neighbor):\n                    path.append(neighbor)\n                    if dfs(path):\n                        return True\n                    path.pop()\n            return False\n\n        dfs([self.start])\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\n\n---"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"NO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"6 6 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"6 6 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\nassert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nprint('Hooray!')"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin_1) == test_stdin_2\nprint('Hooray!')\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import combinations\nfrom sys import stdin, stdout\n\nn, m, k = [int(c) for c in stdin.readline().strip().split(' ')]\nedges = []\nfor _ in range(m):\n    a, b, c = [int(c) for c in stdin.readline().strip().split(' ')]\n    edges.append((a, b, c))\nedges.sort(key=lambda x: x[2])\nroutes = [tuple(int(c) for c in stdin.readline().strip().split(' ')) for _ in range(k)]\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 3 2\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\nassert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 2\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\nassert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6') == '22'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6') == '22'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '1\\n2\\n3\\n'\nassert solution('4\\n5\\n6\\n') == '3\\n7\\n9\\n'\nassert solution('4\\n0\\n7\\n') == '3\\n8\\n10\\n'\nassert solution('5\\n1\\n10\\n') == '5\\n6\\n15\\n'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n6\\n4\\n1\\n9\\n3\\n7\\n2\\n5\\n8\\n1\") == '13'\nassert solution(\"4\\n3\\n6\\n4\\n1\\n9\\n3\\n7\\n2\\n5\\n8\\n1\") == '13'\nassert solution(\"3\\n12\\n100\\n4\\n3\\n22\\n7\\n6\\n11\\n1\\n9\\n10\\n8\\n4\") == '91'\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n3\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4\\n0\\n1\\n1\") == \"3\\n5\\n0\\n1\\n0\"\nassert solution(\"2\\n3\\n2\\n1\\n0\\n1\") == \"3\\n3\\n1\\n1\\n0\\n1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\\n2\\n1\\n1\\n1\\n1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\nassert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\nassert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\nassert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\nassert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"1\\n3\") == \"3\"\nassert solution(\"1\\n6\") == \"9\"\nassert solution(\"1\\n13\") == \"13\"\nassert solution(\"1\\n14\") == \"27\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\") == '9'\nassert solution(\"4\\n5\\n5\") == '9\\n9'\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\") == '9\\n9'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2') == '6'\nassert solution('3\\n4') == '8'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n\"\nprint(solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\"))"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(expected)\nprint(solution(str(input())))\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\n\nassert solution('''\n4\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\n\nassert solution('''\n2\n7\n1 6 2 5 3 4 7\n2\n7 6 1 4 2 5 3\n2\n5 1 3 4 2 6 7\n1\n1\n3 4 1 2 5 6 7\n''') == '''\n1 1 1 1 1 \n2 2 2 2 1 2 2\n1 \n1 1\n3 2 3 1 3\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\n1\n1\n2 3 4 1 2\n3\n2 3 4 1 2\n4\n1 2 3 4 5\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1\n'''\n\nassert solution('''\n2\n7\n1 6 2 5 3 4 7\n2\n7 6 1 4 2 5 3\n2\n5 1 3 4 2 6 7\n1\n1\n3 4 1 2 5 6 7\n''') == '''\n1 1 1 1 1\n'''"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 2 1 5 3') == '3 3 3 2 1 3'\n\"\"\"\n\nimport sys\nsys.stdin = open('input.txt')\n\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n5\n1 2 3 4 5\n3\n2 3 1''') == '1 1 1 1 1'\nassert solution('''6\n6\n1 2 3 4 5 6\n3\n2 3 1''') == '3 3 3'\nassert solution('''6\n6\n1 2 3 4 5 6\n3\n2 3 1''') == '2 3 3 2 1 3'\nassert solution('''2\n1\n1\n2''') == '1 1'\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n'''\n\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4 5\\n3\\n2 3 1') == '1 1 1 1 1', 'error'\nassert solution('5\\n1 2 3 4 5\\n3\\n2 3 1') == '3 3 3', 'error'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 2 2 2 2 1 1 1 1 1 1', 'error'\nassert solution('3\\n2 3 1') == '2 2', 'error'\nassert solution('2\\n1 2') == '1 1', 'error'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(solution(input()))\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\"\n\"\"\"\n\nimport heapq\n\nn, m = map(int, input().split())\narr = [int(x) for x in input().split()]\narr.sort()\nh = []\nfor i in range(1, m + 1):\n    heapq.heappush(h, -arr[i - 1])\n\nres = 0\nfor _ in range(n):\n    res += heapq.heappop(h)\nprint(res)\nfor i in range(m):\n    print(-heapq.heappop(h))"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\") == \"6 -2 -1 1 0\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"4 0 1 1 2\"\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 1') == '3'\nassert solution('3 1 2') == '4'\nassert solution('4 1 2 3') == '5'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 6\n1 5\n\"\"\") == \"8\n-1 2 6 4 0 3 \"\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\"\nassert solution(\"3 5\\n0 3 1\\n\") == \"7\"\nassert solution(\"3 5\\n0 1 2\\n\") == \"-2 2 4 -1 2\"\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6\\n1 5\\n') == '8\\n-1 2 6 4 0 3'\nassert solution('3 5\\n0 3 1\\n') == '7\\n5 -2 4 -1 2'\n\"\"\"\n\nfrom math import inf\n\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\nx.sort()\n\ndist = [inf] * n\ndist[0] = 0\n\nfor i in range(1, n):\n    for j in range(i):\n        if x[j] < x[i]:\n            dist[i] = min(dist[i], dist[j] + abs(x[j] - x[i]))\n\nprint(sum(dist))\nfor i in range(m):\n    print(x[dist.index(min(dist))])\n    dist[dist.index(min(dist))] = inf\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\"\n\nassert solution(\"3 5\\n0 3 1\") == \"7\"\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 3\n1 2\n3 3\n5 5\n4 3''') == 'YES\\nRUUURRRRUU'\nassert solution('''2\n1 0\n0 1''') == 'YES\\nRRRRUUU'\n'''"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n3 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"NO\\nRRRRUUU\"\n\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\nassert solution(\"1\\n4 3\") == \"NO\\nYES\"\n\n\n\"\"\"\n\n\nimport sys\n\nimport numpy as np"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str):\n        pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n1 2\\n1 3\\n3 3\\n5 5\\n4 3\") == \"RUUURRRRUU\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n1 3\n1 2\n3 3\n5 5\n4 3\"\"\") == 'YES\\nRRRRUUU'\nassert solution(\"\"\"1\n0 1\n1\"\"\") == 'YES\\nRRRRUUU'\nassert solution(\"\"\"5\n4 3\n1 0\n0 1\n1\"\"\") == 'YES\\nRUUURRRRUU'\n\n-----Solution-----"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\nassert solution(\"5\\n4 3\") == \"NO\"\n\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\nassert solution(\"5\\n4 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\n\nassert solution('5\\n1 0\\n1 2\\n3 3\\n5 5\\n4 3') == 'NO'\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\nassert solution(\"1\\n0 1\\n1\") == \"YES\\nRRRRUUU\"\nassert solution(\"1\\n0 0\") == \"YES\\nRRRRUUU\"\nassert solution(\"1\\n2\") == \"NO\"\n\"\"\"\n\nimport math\nfrom collections import deque\nfrom typing import Deque, List, Tuple\n\n\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other: 'Point') -> bool:\n        return self.x == other.x and self.y == other.y\n\n    def __lt__(self, other: 'Point') -> bool:\n        if self.y!= other.y:\n            return self.y < other.y\n        if self.x!= other.x:\n            return self.x < other.x\n        return False\n\n    def __hash__(self):\n        return self.x + self.y * 100\n\n\nclass Path:\n    def __init__(self, moves: List[str]):\n        self.moves = deque(moves)\n\n    def pop(self) -> str:\n        return self.moves.pop()\n\n    def push(self, value: str):\n        self.moves.appendleft(value)\n\n    def __len__(self) -> int:\n        return len(self.moves)\n\n    def is_empty(self) -> bool:\n        return len(self.moves) == 0\n\n    def __repr__(self) -> str:\n        return ''.join(self.moves)\n\n\nclass Task:\n    def __init__(self, n: int, packages: List[Tuple[int, int]]):\n        self.n = n\n        self.packages = packages\n        self.paths: List[Path] = []\n\n    def solve(self) -> bool:\n        paths = self.get_paths()\n        if not paths:\n            return False\n\n        paths.sort()\n        path = Path(list(paths[0].moves))\n        for path in paths[1:]:\n            if len(path) < len(paths[0]):\n                path.push(path.pop())\n            else:\n                break\n\n        if len(path)!= len(paths[0]):\n            return False\n\n        return True\n\n    def get_paths(self) -> List[Path]:\n        paths: List[Path] = []\n        points: Deque[Point] = deque()\n        points.append(Point(0, 0))\n        while len(points) > 0:\n            point: Point = points.pop()\n            if self.packages.count(point) == 0:\n                continue\n\n            if self.can_move_up(point) and self.can_move_right(point):\n                self.move_up(point)\n                self.move_right(point)\n                paths.append(Path(['U', 'R']))\n                self.move_up(point, False)\n                self.move_right(point, False)\n                continue\n\n            if self.can_move_left(point):\n                self.move_left(point)\n                paths.append(Path(['L']))\n                self.move_left(point, False)\n                continue\n\n            if self.can_move_up(point):\n                self.move_up(point)\n                paths.append(Path(['U']))\n                self.move_up(point, False)\n                continue\n\n            if self.can_move_right(point):\n                self.move_right(point)\n                paths.append(Path(['R']))\n                self.move_right(point, False)\n                continue\n\n        return paths\n\n    def can_move_up(self, point: Point) -> bool:\n        return point.y < self.n - 1\n\n    def can_move_right(self, point: Point) -> bool:\n        return point.x < self.n - 1\n\n    def can_move_left(self, point: Point) -> bool:\n        return point.x > 0\n\n    def move_up(self, point: Point, mirror: bool = True) -> None:\n        if mirror:\n            point.x, point.y = point.x - 1, point.y + 1\n        else:\n            point.x, point.y = point.x + 1, point.y + 1\n\n    def move_right(self, point: Point, mirror: bool = True) -> None:\n        if mirror:\n            point.x, point.y = point.x + 1, point.y - 1\n        else:\n            point.x, point.y = point.x - 1, point.y - 1\n\n    def move_left(self, point: Point) -> None:\n        point.x, point.y = point.x - 1, point.y - 1\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\n\nassert solution('1 2') == 'NO'\n\nassert solution('1 3') == 'YES'\n\nassert solution('2 2') == 'NO'\n\nassert solution('1 0') == 'NO'"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 1\\n0 1') == '0'\nassert solution('0 1') == '0'\nassert solution('2 1\\n0 1') == '0'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n\") == \"8\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == '8'\nassert solution(\"1 1\") == '0'\nassert solution(\"500 4\") == '8'\nassert solution(\"217871987498122 10\") == '899999999999999999'\nassert solution(\"100000000000000001 1\") == '899999999999999999'"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n899999999999999999\"\nprint(solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\"))\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1 1') == '8'\nassert solution('1 1\\n1 2') == '8'\nassert solution('1 1\\n1 3') == '9'\nassert solution('1 1\\n1 4') == '9'\nassert solution('1 1\\n1 5') == '9'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\"\"\") == \"\"\"8\n0\n500\n2128012501878\n899999999999999999\"\"\"\nprint(\"Cool!\")\n\n\"\"\"\nfrom timeit import timeit\navg_time = 0.\ntests = [\"\"\"5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\"\"\", \"\"\"5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\"\"\"]\nfor t in tests:\n    avg_time += timeit(lambda: solution(t), number=10000)\nprint(f'avg_time: {avg_time / len(tests)}')\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1') == '5'\n\"\"\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0 1 0\\n4\\n1 0 1 0\\n1 0 1 0\\n1 1 0 1\") == '2\\n0\\n2\\n1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\") == \"2\"\nassert solution(\"3 1\\n1 1\") == \"2\"\nassert solution(\"4 1\\n1 1\") == \"0\"\nassert solution(\"7 1\\n1 0 1 0 1 0 1\") == \"2\"\nassert solution(\"8 1\\n1 1 0 0 1 1 0 1\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1\\n2\\n5\") == \"2\"\nassert solution(\"7\\n0\\n1\\n0\\n1\\n0\\n1\") == \"0\"\nassert solution(\"7\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n\nassert solution(\"5\\n3\\n1\\n2\\n5\") == \"2\"\nassert solution(\"7\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == 2\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == 0\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == 2\n\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == 2\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == 0\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5') == 0\nassert solution('1 2 3 5 4') == 1\nassert solution('2 3 4 5 1') == 1\nassert solution('1 2 3 5 4 6') == 2\nassert solution('1 2 3 5 4 6 7') == 2\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 0 0\n3\n1 0 0\n\"\"\") == '2'\nassert solution(\"\"\"\n3\n1 0 0\n3\n1 0 0\n\"\"\") == '0'\nassert solution(\"\"\"\n1\n3\n1 0 0\n\"\"\") == '0'\nassert solution(\"\"\"\n3\n1 0 0\n3\n1 0 0\n\"\"\") == '2'\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == '0'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_0) == expected_0\nassert solution(test_input_1) == expected_1\n\"\"\"\nimport sys"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 0 1\") == \"1\"\nassert solution(\"4\\n1 1 0 1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"0\"\nassert solution(\"1 2 3 4 5\\n5 4 3 2 1\") == \"1\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"2\"\nassert solution(\"1 2 3 4 5\\n7 6 5 4 3\") == \"3\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"2\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n4 4') == 'acb'\nassert solution('5 1\\n4 4') == 'cba'\nassert solution('5 3\\n4 4') == 'cbcacb'\nassert solution('3 1\\n4 4') == 'abcd'\nassert solution('3 2\\n4 4') == 'baabab'\n\"\"\"\n\nimport sys\nimport collections\n\nfor i in range(int(sys.stdin.readline().rstrip())):\n    n, k = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n    s = sys.stdin.readline().rstrip()\n    count = collections.Counter(s)\n    min_count = 0\n    for j in range(1, 26):\n        if count[chr(j)] > min_count:\n            min_count = count[chr(j)]\n    print(max(s[i:j] for i in range(n) for j in range(i, i + k) if count[chr(j)] == min_count))\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('abcde') == 'abcd'\nassert solution('abcdef') == 'abc'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n4 4\\n6 2') == \"cbcacab\"\nassert solution('6 2\\n4 4\\n6 2')!= \"abcd\"\nassert solution('6 2\\n4 4\\n6 2')!= \"baabab\"\n\nassert solution('7 3\\n4 4\\n6 2') == \"cbcacab\"\nassert solution('7 3\\n4 4\\n6 2')!= \"abcd\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('3 4') == 'aabaab'\nassert solution('7 3') == 'cbcacab'\nassert solution('6 2') == 'abcd'\nassert solution('4 4') == 'abcd'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n6 4\\n6 2\") == \"bcacabb\"\nassert solution(\"7 3\\n5 4\\n6 2\") == \"bacabb\"\nassert solution(\"7 3\\n5 4\\n7 2\") == \"bacab\"\nassert solution(\"7 3\\n4 4\\n7 2\") == \"cbcac\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('abac') == 'abc'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n7 3\n4 4\n6 2\n\"\"\") == \"cbcacab\"\nassert solution(\"\"\"\n7 3\n4 4\n6 2\n\"\"\")!= \"abcd\"\nassert solution(\"\"\"\n7 3\n4 4\n6 2\n\"\"\")!= \"cbcabba\"\nassert solution(\"\"\"\n7 3\n4 4\n6 2\n\"\"\")!= \"ccbbaaa\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\\n1 3 4 1 5 9 2 6 5 3 5\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"6 23 21\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000') == '6 23 21'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n-----Problem-----\n\nSuppose that the house has $n$ rooms. We want to assign each room a number from $1$ to $n$, in such a way that:\n\nThe number of different numbers is minimized.\nEach number is assigned to exactly one room.\nEach room is assigned to exactly one number.\nThe distance between a room and its number is minimized.\nGive a program that outputs these three values for a given house, and find the minimum possible values of $n$, $m$ and $d$:\n\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3 4 1\\n2 4 2\\n3 4 3\")\n4 4 3\n>>> solution(\"1\\n4\\n1 1 1 1\\n3\\n1 2 2\\n2 3 3\\n4\\n1 2 1\\n2 2 1\\n3 3 1\\n1 2 2\\n2 3 2\\n3"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11\\n1 4 1 5 9 2 6 5 3 5\\n') == '1 23 21'\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom collections import namedtuple\nfrom math import inf"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\") == '6 23 21'\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\") == \"6 23 21\"\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"1 1000 0\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"2 1 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"3 4 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"4 4 3\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5') == '6 23 21'\n\"\"\"\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split(' ')]\n    alice_eat = 0\n    bob_eat = 0\n    cnt = 0\n    for i in range(len(arr)):\n        if cnt == 0:\n            if arr[i] < n:\n                alice_eat += arr[i]\n            else:\n                cnt += 1\n                alice_eat += n\n        else:\n            if arr[i] < n:\n                bob_eat += arr[i]\n            else:\n                bob_eat += n\n    print(cnt, alice_eat, bob_eat)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\n\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3') == '6\\n27\\n39\\n11\\n17'\nassert solution('5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3') == '27\\n39\\n11\\n17'\nassert solution('5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3') == '6\\n27\\n39\\n11\\n17'\n\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n4\\n5 3\\n5 4\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"27\"\nassert solution(\"5\\n2 1\\n2 2\\n4 3\\n5 4\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"39\"\nassert solution(\"5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"11\"\nassert solution(\"5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"\nassert solution(\"5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\n\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\n\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\n\nassert solution(\"1 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\n\nassert solution(\"1 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 3') == '0'\nassert solution('3 2') == '2'\nassert solution('3 1') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1 2\\n2 3') == '6'\nassert solution('5 2\\n1 2\\n3 4\\n5 5') == '27'\nassert solution('5 3\\n1 2\\n3 4\\n5 5\\n5 4\\n4 3') == '39'\nassert solution('4 0\\n2 2 4 3') == '17'\nassert solution('2 2 4 3\\n4 4\\n2 2 4 3') == '11'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '6'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '39'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '11'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\\n11\\n5\\n3\"\nassert solution(\"4 4\\n1 2 2 1\\n4 4 5 4\") == \"17\\n11\\n5\\n3\"\n\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected_result)\n\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 3\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\") == \"11\"\nassert solution(\"5 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_str_1) == test_str_2\nassert solution(test_str_2) == test_str_3\n\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n7 5 1 2 4 4 6 7') == '0 7 13 16 22 36 39'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\nimport sys\nimport bisect\n\nn, c = map(int, sys.stdin.readline().split())\nstairs, elevator = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\na.append(0)\nb.append(0)\n\nt = [[0] * (n + 1) for _ in range(2)]\n\nfor i in range(1, n + 1):\n    t[0][i] = a[i - 1] + t[1][i - 1]\n    t[1][i] = max(t[0][i], t[1][i - 1]) + b[i - 1]\n\nans = []\nfor i in range(1, n + 1):\n    ans.append(t[0][i] + t[1][i] + c)\n\nprint(*ans, sep=' ')\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 2 3 4 1\\n1 2 3 4 4') == '0 3 6 8 11 13'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n\") == '0 7 13 18 24 35 36 37 40 45'\n\nassert solution(\"8 10\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\") == '0 2 4 7 8 11 13 14 16 17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\n\n-----Constraints-----\n\n$n \\le 2 \\cdot 10^5$\n$1 \\le c \\le 1000$\n$1 \\le a_i, b_i \\le 1000$\n$\\sum\\limits_{i=min(x, y)}^{max(x, y) - 1} a_i = \\sum\\limits_{i=min(x, y)}^{max(x, y) - 1} b_i$\n\n\"\"\"\n\nn, c = list(map(int, input().split()))\nstairs = list(map(int, input().split()))\nelevator = list(map(int, input().split()))\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5''') == '''0 7 13 18 24 35 36 37 40 45'''\n\nassert solution('''4 1\n4 3 4 3\n1 2 3 4''') == '''0 2 4 7 8 11 13 14 16 17'''\n\nassert solution('''1 1\n1''') == '''0'''\n\nprint(solution(input()))"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\""
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_output)\nprint(solution(str(input())))\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"ab\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2') == 'aaabb'\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom itertools import combinations"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"ab\"\nassert solution(\"5 2\") == \"baaba\"\nassert solution(\"6 3\") == \"aaaaabaaaaabaaaaaaaa\"\nassert solution(\"7 4\") == \"aaaaabb\"\nassert solution(\"8 5\") == \"aabaabb\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n5 2\") == \"aaabb\"\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == expected_result\n\nassert solution(test_input) == expected_result\n\"\"\"\nimport sys\nimport os\nfrom collections import defaultdict"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n5 3') == 'aaabb'\nassert solution('3 2\\n3 3') == 'aaaab'\nassert solution('20 100') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('7 5\\n7 10') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('7 5\\n7 9') == 'aaaaaabaaaaaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == 'aaabb'\nassert solution(\"5 2\") == 'aabab'\nassert solution(\"5 8\") == 'baaba'\nassert solution(\"5 10\") == 'bbaaa'\nassert solution(\"3 1\") == 'aaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n5 2') == 'aaabb'\nassert solution('3\\n2 1') == 'aaa'\nassert solution('2\\n2 1') == 'ab'\n'''"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"1\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"5\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\\n1\\n5\\n10\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_str) == expected_str\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\n\n\n\"\"\""
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\n-----\n\nIt can be proven that we can't achieve better answer here.\n\n[Image]\n\n-----\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport time\nfrom collections import Counter\n\nfrom mccy2020.classes import *\n\n_dict = None"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"1\\n2\\n1 2\") == \"1\"\nassert solution(\"2\\n6 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\nassert solution(\"1\\n2\\n1 2\") == \"1\"\n\n-----Problem-----\n\nIn a research lab on the moon, scientists discovered a way to increase the fuel of the LAMBCHOP's reactor core. The LAMBCHOP's fuel counter registers record the number of fuel pumps that were installed along the core. After the fuel problem was fixed, the scientists discovered that the LAMBCHOP does not have any problems with its core.\n\nThe LAMBCHOP's control and power systems have been designed so that the LAMBCHOP's core can only be damaged by the *pouring water* from the fuel pumps. We want to know how many fuel pumps we need to install along the LAMBCHOP's core to make it impossible for the water to pour out of it.\n\nFuel pump control system:\nIf control system allows water to pour out of the core, then the LAMBCHOP core is damaged.\nIf control system allows *only* alternate fluid to pass through the core, then the LAMBCHOP core is not damaged.\nGiven the core size (in [cm]) and the number of fuel pumps, return the minimum number of fuel pumps needed to make the core unwritable.\n\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 5 2 3 1 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\") == \"6\"\nassert solution(\"4 10\\n10 7 5 15 8\") == \"10\"\nassert solution(\"4 10\\n15 19 8 17 20 10 9 2 10 19\") == \"10\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\nassert solution(\"2 1\\n10 9\\n1 1000000000\") == \"1\\n1\"\nassert solution(\"1 1\\n1000000000\") == \"1\\n1\"\nassert solution(\"2 1\\n10000000\") == \"1\\n1\"\nassert solution(\"1 1\\n1\") == \"1\\n1\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a=[], x=3) == 0\nassert solution(a=[0], x=3) == 0\nassert solution(a=[0, 1, 2], x=3) == 3\nassert solution(a=[0, 1, 2, 2], x=3) == 3\nassert solution(a=[0, 1, 2, 2, 0], x=3) == 3\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\"\nassert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\") == \"0\\n0\\n0\\n0\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''\n7 3\n0\n1\n2\n2\n0\n0\n10\n''') == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\nassert solution(\n'''\n4 3\n1\n2\n1\n2\n''') == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n\"\"\"\n\nfrom collections import deque\n\nx, q = list(map(int, input().strip().split(' ')))"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == '0\\n0\\n0\\n0'\nassert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == '1\\n2\\n3\\n3\\n4\\n4\\n7'\n\n\"\"\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n\") == \"4\"\nassert solution(\"5 3\\n3\\n0\\n1\\n2\\n0\\n0\\n3\\n0\\n2\\n\") == \"4\"\nassert solution(\"3 3\\n0\\n1\\n2\\n0\\n0\\n3\\n0\\n2\\n\") == \"4\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"1 3\"\nassert solution(\"6 5 4\") == \"6 5 4\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2 3\") == \"1 3\"\nassert solution(\"1 1\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\nassert solution('5 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\nassert solution('1 2 4\\n5 7\\n') == '1 2 4\\n5 7'\nassert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nimport sys\nfrom typing import Any, List, NamedTuple, Optional, Tuple\n\nfrom utils import get_int_input_with_timeout\n\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n\n\nclass Line(NamedTuple):\n    x1: int\n    y1: int\n    x2: int\n    y2: int\n\n\nclass Case(NamedTuple):\n    n: int\n    x: int\n    y: int\n\n\nclass Case2(NamedTuple):\n    n: int\n    x: int\n    y: int\n    lines: List[Line]\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\"\n) == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50 \n8 23 18 13 3 \n1 10 13 4 19 22 25 16 7\n\"\"\"\nprint(\"PASS\" if solution(input) == output else \"FAIL\")"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n\") == \"\"\"1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\\n1 2\\n2 3\") == \"1 2\\n2 3\"\nassert solution(\"3 2 2\\n1 1\\n3 3\") == \"1 3\\n2 2\"\nassert solution(\"5 1 4\\n3 3\\n5 1\") == \"3 4 1\"\n\"\"\"\n\nfrom itertools import accumulate"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nimport re\nfrom typing import Callable, Generator, Iterable, Iterator, List, Tuple, Union\n\nfrom icontract import require, ensure, DBC\n\n\nclass Range(DBC):\n    def __init__(self, min: int, max: int) -> None:\n        self.min = min\n        self.max = max\n\n    def __repr__(self) -> str:\n        return f\"Range({self.min}, {self.max})\"\n\n\nclass RangeGen(DBC):\n    def __init__(self, generator: Iterable[int]) -> None:\n        self.generator = generator\n        self.current = None\n\n    def __iter__(self) -> Iterator[int]:\n        self.current = next(self.generator)\n        return self\n\n    def __next__(self) -> int:\n        if self.current is None:\n            raise StopIteration\n\n        result = self.current\n        self.current = next(self.generator)\n        return result\n\n\nclass RangeGen2(DBC):\n    def __init__(self, generator: Iterable[int]) -> None:\n        self.generator = generator\n\n    def __iter__(self) -> Iterator[int]:\n        for i in self.generator:\n            yield i\n\n\nclass RangeGen3(DBC):\n    def __init__(self, generator: Iterable[int]) -> None:\n        self.generator = generator\n        self.current = None\n\n    def __iter__(self) -> Iterator[int]:\n        self.current = next(self.generator)\n        return self\n\n    def __next__(self) -> int:\n        if self.current is None:\n            raise StopIteration\n\n        result = self.current\n        self.current = next(self.generator)\n        return result\n\n\nclass RangeGen4(DBC):\n    def __init__(self, generator: Iterable[int]) -> None:\n        self.generator = generator\n        self.current = None\n\n    def __iter__(self) -> Iterator[int]:\n        for i in self.generator:\n            yield i\n\n    def __next__(self) -> int:\n        if self.current is None:\n            self.current = next(self.generator)\n            return self.current\n\n        result = self.current\n        self.current = next(self.generator)\n        return result\n\n\n@require(lambda x: x >= 1)\n@require(lambda x: x <= 50)\n@require(lambda x: x > 1)\n@ensure(lambda x, result: x > result)\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\"\n\nassert solution(\"\"\"\n1 1 1\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\"\n\nassert solution(\"\"\"\n3 1 1\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\"\n\nassert solution(\"\"\"\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\"\n\n\"\"\"\n[A B C D E F G H I J K L M N O P Q R S T U V W X Y Z]\n[A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z]\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n, x, y = map(int, input().split())\n    for i in range(1, n):\n        print(x + max(0, y - i), y + max(0, x - i), end=' ')\n    print()\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 1 2') == '1 2 3 4'\nassert solution('4 3 1 5') == '1 4 3 5'\nassert solution('4 3 1 2 2') == '1 2 2 2 3 4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3 1 2''') == '1 2 3'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = sorted(a, reverse=True)\nfor i in b:\n    print(i, end=\" \")\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('5 2 1 3 4') == '1 2 3 4 5'\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '1 2 3'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1 2\") == \"1 2 3 4\"\nassert solution(\"4 1 3 2\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\n'''"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\") == '1 2 3'\n\"\"\"\n\n\"\"\"\n\u041e\u0431\u043c\u0430\u043d\u0443\u0442\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u043d\u0435\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\n-----Input-----\n\n5 1 2 1 2\n\n-----Output-----\n\nYES\n\n-----Example-----\nInput\n5 1 2 1 2\n\nOutput\nYES\n\"\"\"\n\n\"\"\"\n\u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c:\n\n\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0446\u0438\u0444\u0440\u0443,\n\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0446\u0438\u0444\u0440\u0443,\n\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u0435.\n\n-----Input-----\n\n43\n\n-----Output-----\n\n4\n1\n3\n\"\"\"\n\n\"\"\"\n\u0412\u0432\u043e\u0434 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 A \u0438\u0437 n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n-----Input-----\n\n5 1 2 1 2\n\n-----Output-----\n\n3\n\"\"\"\n\n\"\"\"\n\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 n \u0440\u0430\u0437 \u0447\u0438\u0441\u043b\u043e 1, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e 0, n \u2212 1, n \u2212 2, n \u2212 3,..., 0 \u0440\u0430\u0437, \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0432 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0441\u043f\u0440\u0430\u0432\u0430 \u0441\u0432\u0435\u0440\u0445\u0443.\n\n-----Input-----\n\n4\n\n-----Output-----\n\n1\n1\n0\n1\n0\n1\n0\n1\n\"\"\"\n\n\"\"\"\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437.\n\n-----Input-----\n\n1 1 1 2 3 3 3 4 5 5 5 5 6\n\n-----Output-----\n\n5\n\"\"\"\n\n\"\"\"\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u0432 \u043d\u0435\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n\n-----Input-----\n\n5 3 1 2 1 2\n\n-----Output-----\n\n1 2\n\"\"\"\n\n\"\"\"\n\u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043a\u0430\u0447\u043e\u043a\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0443\u043c\u043c\u044b \u0438\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439.\n\n-----Input-----\n\n-2 3\n\n-----Output-----\n\n5\n\"\"\"\n\n\"\"\"\n\u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043a\u0430\u0447\u043e\u043a\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0443\u043c\u043c\u044b \u0438\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439.\n\n-----Input-----\n\n-2 3\n\n-----Output-----\n\n5\n\"\"\"\n\n\"\"\"\n\u041c\u0435\u0442\u043e\u0434\u044b \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u044f\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e.\n\n-----Input-----\n\n1 2 3 4 5\n\n-----Output-----\n\n2 3 4 5\n\n-----Example-----\n\n\u0412\u0430\u0441\u0438\u043b\u0438\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 \u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u0441 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438. \u041f\u043e\u0442\u043e\u043c \u0432\u044b\u0448\u0435\u043b \u0441\u044e\u0440\u043f\u0440\u0438\u0437 \u043e\u0442 \u0432\u0430\u0441\u0438\u043b\u0438\u044f. \u0412\u0430\u0441\u0438\u043b\u0438\u0439 \u0441\u043d\u043e\u0432\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0441 \u0432\u0430\u043c\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443. \u0415\u0433\u043e \u043d\u043e\u0432\u044b\u0439 \u0447\u0438\u0442\u0435\u0440\u043e\u0432\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u0441\u044f \u0432\u0430\u043c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438.\n\n\u0412\u0430\u0441\u0438\u043b\u0438\u0439 \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0431\u043c\u0435\u043d\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0440\u0435\u0448\u0430\u0435\u0442 \u0441\u0430\u043c\u043e \u0441\u0435\u0431\u044f \u0431\u0435\u0437 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u0432\u043e\u0438\u0445 \u043f\u0440\u043e\u0433"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 5 1 3') == '1 2 3 5'\nassert solution('1 2 3 4') == '1 2 3 4'\n\n------END-------\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('1 1 1') == '1'\nassert solution('1 1') == '1 1'\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"5\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\\n\") == \"YES\\nNO\\nYES\\nNO\\nNO\"\nprint(solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\\n\"))\n\n\"\"\"\n\n\nimport sys\nfrom typing import Union, Tuple, List\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1') == 'NO'\nassert solution('5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1') == 'YES'\nassert solution('5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"5\\n1 1 1 1\\n4\\n5 5 5 5\") == \"NO\"\n\n\n-----Test-----"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5''') == 'YES'\nassert solution('''3\n2\n2 8\n3\n2 2 8 8\n2\n2 8\n2\n8''') == 'NO'\nassert solution('''2\n2\n2 8\n3\n2 2 8 8\n2\n2 8\n2\n8''') == 'YES'\nassert solution('''2\n2\n2 8\n3\n2 2 8 8\n2\n2 8\n2\n8''') == 'NO'\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1 1 1 1\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n\na = solution(stdin)\nprint(a)\n'''"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 2 8 8\") == \"NO\"\nassert solution(\"5\\n3 3 3\") == \"NO\"\nassert solution(\"2\\n1 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2') == '-1'\nassert solution('4') == '3 1 4 2'\nassert solution('6') == '5 3 6 2 4 1'\nassert solution('7') == '5 1 3 6 2 4 7'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\\n4\") == \"-1\"\nassert solution(\"13\\n7\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\nassert solution(\"1\\n1\") == \"1\"\n\nimport re\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6\") == \"9 6 10 8 4 7 3 1 5 2\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2\\n4\\n6\\n7\\n13\\n') == '-1'\nassert solution('4\\n6\\n7\\n13\\n') == '5 3 6 2 4 1'\nassert solution('6\\n7\\n13\\n') == '5 1 3 6 2 4 7'\nassert solution('7\\n13\\n') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4 6 7 13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"4 2\") == -1\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"4\") == \"3 1 4 2\"\nassert solution(\"6\") == \"5 3 6 2 4 1\"\nassert solution(\"7\") == \"5 1 3 6 2 4 7\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n1\\n') == '2 1'\nassert solution('3\\n1\\n2\\n') == '2 1 3'\nassert solution('4\\n1\\n2\\n3\\n') == '2 1 3 4'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"3 1 4 2\") == \"3 1 4 2\"\nassert solution(\"5 3 6 2 4 1\") == \"5 1 3 6 2 4 7\"\nassert solution(\"13 9 7 11 8 4 1 3 5 2 6 10 12\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\\n4\\n6\") == \"3 1 4 2\"\nassert solution(\"4\\n6\\n7\\n13\") == \"5 1 3 6 2 4 7\"\nassert solution(\"13\\n7\\n11\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"-1\"\nassert solution(\"1\\n7\") == \"0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '2'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '1'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '-1'\n\"\"\"\nimport sys\nfrom collections import deque\n\nDEBUG = False\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2\\n1\\n-1\\n0'\n\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2\\n1\\n-1\\n0'\n\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2\\n1\\n-1\\n0'\n\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2\\n1\\n-1\\n0'\n\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2\\n1\\n-1\\n0'"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 2 7 6') == '2'\nassert solution('3\\n3 2 6') == '-1'\nassert solution('1\\n7') == '-1'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"7\"\nassert solution(\"7\\n7\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == \"2\"\nassert solution(\"4\\n3 2 7 6\\n3\\n1\\n7\\n7\") == \"1\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == \"-1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\nprint('Test pass.')"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == 2\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '2'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '1'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '-1'\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\n\nfrom sys import stdin\nfrom itertools import permutations\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == '2 2 2 2 2 1 1 0 2'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n\n\"\"\"\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = [i for i in range(n)]\n        self.count = [1 for _ in range(n)]\n\n    def find(self, u):\n        if u!= self.parent[u]:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u, v):\n        p_u = self.find(u)\n        p_v = self.find(v)\n        if p_u!= p_v:\n            if self.count[p_u] < self.count[p_v]:\n                self.parent[p_u] = p_v\n                self.count[p_v] += self.count[p_u]\n            else:\n                self.parent[p_v] = p_u\n                self.count[p_u] += self.count[p_v]\n\n\nclass Solution:\n    def solve(self, uf, n, edges):\n        ans = [0 for _ in range(n)]\n        for u, v in edges:\n            if uf.find(u) == uf.find(v):\n                ans[u] += 1\n                ans[v] += 1\n            else:\n                ans[u] -= 1\n                ans[v] -= 1\n                uf.union(u, v)\n        return ans\n\n    def solve_2(self, n, edges):\n        uf = UnionFind(n)\n        ans = [0 for _ in range(n)]\n        for u, v in edges:\n            if uf.find(u) == uf.find(v):\n                ans[u] += 1\n                ans[v] += 1\n            else:\n                ans[u] -= 1\n                ans[v] -= 1\n                uf.union(u, v)\n        return ans\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\nclass Vertex:\n    def __init__(self, v):\n        self.v = v\n        self.neighbors = []\n        self.colors = 0\n\n    def add_neighbor(self, nbr):\n        self.neighbors.append(nbr)\n\n\nclass Graph:\n    def __init__(self, n):\n        self.vertices = []\n        for i in range(n):\n            self.vertices.append(Vertex(i))\n\n    def connect(self, u, v):\n        u.add_neighbor(v)\n        v.add_neighbor(u)\n\n    def dfs(self, v):\n        v.colors = 1\n        for u in v.neighbors:\n            if not u.colors:\n                self.dfs(u)\n                v.colors = v.colors + u.colors\n            else:\n                v.colors = v.colors + u.colors\n        return v.colors\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 1 1\") == \"2 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\") == \"2 2 2 2 2 1 1 0 2\"\n\"\"\"\nfrom typing import List\n\n\nclass Graph:\n    def __init__(self, adj_list: List[List[int]]):\n        self._adj_list = adj_list\n\n    def add_edge(self, u, v):\n        self._adj_list[u].append(v)\n\n    def get_adj_list(self):\n        return self._adj_list\n\n    def get_edges(self):\n        edges = []\n        for u in range(len(self._adj_list)):\n            for v in self._adj_list[u]:\n                if u < v:\n                    edges.append((u, v))\n        return edges\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n\n\"\"\"\n\nimport sys\nimport queue\nimport collections\nimport itertools\nfrom typing import List\nfrom typing import Set\nfrom typing import Dict\nfrom typing import Tuple\nfrom typing import Optional"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == '2 2 2 2 2 1 1 0 2'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '2'\nassert solution('12') == '-1'\nassert solution('123') == '-1'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '-1'\nassert solution('3\\n') == '2'\nassert solution('12\\n') == '-1'\nassert solution('123\\n') == '12'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('15116544') == '12'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n1') == '1'\nassert solution('2\\n2') == '-1'\nassert solution('1\\n12') == '2'\nassert solution('2\\n12') == '2'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(answer)\nprint('Success')\n\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    while n!= 1:\n        if n % 6 == 0:\n            n = n // 6\n            count += 1\n        elif n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            count = -1\n            break\n    print(count)\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('15116544') == '36'\nassert solution('387420489') == '-1'\n\"\"\""
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('12') == '2'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"12\") == \"4\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5') == '5'\nassert solution('12345') == '15'\nassert solution('123456789') == '44'\nassert solution('1234567891') == '-1'\n\n'''\nGiven a positive integer n. Return the number of steps to reduce n to 1 under the following operations:\n\nIf n is even, replace n with n / 2.\nIf n is odd, replace n with either n + 1 or n - 1.\nReturn -1 if it is not possible to reach 1.\n\nExamples\nsteps(1) \u279e 0\nsteps(2) \u279e 1\nsteps(3) \u279e 2\nsteps(4) \u279e 2\nsteps(5) \u279e 3\nsteps(6) \u279e 4\nsteps(21) \u279e 9\nsteps(22) \u279e -1\n\nSolution:\nA straightforward iterative solution is to consider all operations and increment a counter if the operation reduces n to 1:"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR''') == '3'\nassert solution('''2\n4 2\nRGR\n4 2\nRRR''') == '0'\nassert solution('''2\n3 2\nRR\n3 2\nRR''') == '1'\nassert solution('''2\n3 2\nRR\n3 2\nRRR''') == '3'\n\nassert solution('''5\n5 4\nBGRRR\n5 5\nBBRRR\n5 7\nBBGGRRRR\n7 6\nGRBGRRRBGR\n5 5\nRBRR''') == '1'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGB\") == \"RRGGBB\"\nassert solution
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BGGGG') == 1\nassert solution('5 3') == 0\nassert solution('RBRGR') == 3\n\"\"\"\nimport re\nimport math\nimport sys"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\n\"\"\"\nimport os\nimport sys"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 0\nassert solution(\"BBBRR\") == 3\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BGGGG\") == \"1\"\nassert solution(\"RBRGR\") == \"0\"\nassert solution(\"BBBRR\") == \"3\"\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRRRRRRRRRRRRR') == '0'\nassert solution('B') == '1'\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('B') == 'R'\nassert solution('BGGGG') == 'R'\nassert solution('RBRGR') == 'R'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n3 5 2 1\\n4\\n1 1 1 1\") == \"8\"\nassert solution(\"4\\n3\\n4 5 2 1\\n3\\n1 1 1 1\") == \"6\"\nassert solution(\"4\\n3\\n4 5 2 1\\n3\\n2 2 2 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 2 2\") == \"3\"\n\n-----\n\nThis solution is not optimized\n\"\"\"\nimport sys\n\nt = int(sys.stdin.readline())\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"2\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n3\\n1 1 1 1 1 2 2') == '3\\n3'\nassert solution('10\\n1 1 1 1 1 1 2 2') == '3\\n3'\nassert solution('10\\n1 1 1 1 1 1 2 2') == '3\\n3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n4\\n1 1 2 3\") == \"6\"\nassert solution(\"1\\n4\\n1 1 2 3\") == \"6\"\nassert solution(\"1\\n4\\n1 1 2 3\") == \"6\"\n\"\"\"\n\n\n\"\"\"\nTheory\n\nWe want to solve the problem:\n\nmax |sum(a_i)| where sum(a_i)%3=0\n\nThis is a sum of elements of an array, which are divisible by 3.\n\nAll elements a_i of the array are assumed to be positive integers, so:\n\nsum(a_i) <= 10^9\n\nMax|sum(a_i)| = 3 * 10^9 / 2 = 3 * 10^5.\n\nSo, if we want to find the maximum number of elements divisible by 3, we can treat it as a sum problem.\n\nIn this problem we want to find a subset of elements of the array, which sums up to value k, i.e. sum(x) = k.\n\nComplexity\n\nWe can do at most 2*10^9 operations.\nSo, we can do it for each query, O(2 * 10^9).\n\nSpace complexity:\nO(2 * 10^5)\n\"\"\"\n\nfrom collections import Counter, defaultdict\n\nimport itertools\nimport bisect\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == 3\nassert solution(\"2\\n3\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == 3\nassert solution(\"2\\n1\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == 3\nassert solution(\"1\\n1\\n1 1 1 1 1 2 2\") == 1\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n6\\n1 1 1 1 1 2 2\\n3\\n1 1 1 1 1 2 2\") == \"7\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\n\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 3 5 2\\n1 2 3 1\") == \"2\"\nassert solution(\"4\\n3 1 1 2\\n1 2 3 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4\\n1\\3\\2') == '1 5 2 4 3'\nassert solution('4\\n1\\2\\4\\3') == '1 2 3 4'\nassert solution('1\\n1') == '1'\nassert solution('2\\n4\\n4\\3\\2\\1') == '1 2 3 4'\nassert solution('3\\n1\\2\\3\\4') == '1 2 3 4'\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n1 2\\n3\") == '1 2 3 4'\nassert solution(\"4\\n1 2 3 4\\n2\\n1 2\\n4\") == '1 2 3 4'\nassert solution(\"4\\n1 2 3 4\\n2\\n1 2\\n4\") == '1 2 3 4'\nassert solution(\"4\\n1 2 3 4\\n2\\n1 3\\n4\") == '1 2 4 3'\nassert solution(\"4\\n1 2 3 4\\n2\\n1 3\\n4\") == '1 2 3 4'\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1 2 3 4\"\n\"\"\"\n\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Callable, Tuple, Union, Any, List\nimport sys\n\nfrom copy import deepcopy\n\nMAX_LEN = 10 ** 6\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\nfrom typing import List, Optional\n\nfrom icontract import DBC, ensure\nfrom icontract.examples import numbers\n\n\nclass Permutation(DBC, pathlib.Path):\n    def __init__(self, itr: Iterator[int]):\n        self.itr = itr\n\n    def __iter__(self) -> Iterator[int]:\n        return self.itr\n\n    def __repr__(self) -> str:\n        return repr(list(self))\n\n\nclass PermutationWithLargest(DBC, pathlib.Path):\n    def __init__(self, itr: Iterator[int]):\n        self.itr = itr\n\n    def __iter__(self) -> Iterator[int]:\n        return self.itr\n\n    def __repr__(self) -> str:\n        return repr(list(self))\n\n\nclass PermutationWithLargestIndex(DBC, pathlib.Path):\n    def __init__(self, itr: Iterator[int]):\n        self.itr = itr\n\n    def __iter__(self) -> Iterator[int]:\n        return self.itr\n\n    def __repr__(self) -> str:\n        return repr(list(self))\n\n\nclass PermutationWithLargestLength(DBC, pathlib.Path):\n    def __init__(self, itr: Iterator[int]):\n        self.itr = itr\n\n    def __iter__(self) -> Iterator[int]:\n        return self.itr\n\n    def __repr__(self) -> str:\n        return repr(list(self))\n\n\n@ensure(lambda result, i, perm: result[i] >= perm[i])\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\nassert solution(\"4\\n3 2 1 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n4 3 2 1\") == \"1 2 3 4\"\nassert solution(\"3\\n1 2 3\") == \"1 2 3\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == '1 5 2 4 3'\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nT = int(sys.stdin.readline())\n\nfor t in range(T):\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    \n    stack = deque()\n    \n    # DP\n    # min_val[i] == min value that we can get using first i elements\n    min_val = []\n    \n    for i in range(N):\n        while stack and A[stack[-1]] > A[i]:\n            # A[i] < A[stack[-1]], pop stack\n            stack.pop()\n        stack.append(i)\n        \n        # min_val[i] == max value that we can get using first i elements\n        min_val.append(stack[0])\n        \n    for i in range(N):\n        print(A[min_val[i]], end=\" \")\n    print()"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES'\nassert solution('4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES'\nassert solution('4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'NO'\nassert solution('4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'NO'"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'NO\\nNO\\nNO\\nNO\\nNO'\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"4\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\" * 5\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\"\n\nfrom collections import deque\nfrom sys import stdin"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'NO\\nNO\\nNO\\nNO\\nNO'\n\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nNO\\nNO\\nYES\\nYES\"\nassert solution(\"4\\n4\\n1 2 3 4\\n1\\n2 3 1\\n5\\n4 3 2 1\") == \"YES\\nYES\\nNO\\nNO\"\n\"\"\"\n\nq = int(stdin.readline().strip())\nwhile q > 0:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split(\" \")))\n    # print(l)\n    m = {}\n    for i in l:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n\n    # print(m)\n\n    for i in m:\n        if m[i] % 2 == 0:\n            pass\n        else:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n    q -= 1\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\n\nimport math\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    min_candies = k//2\n    max_candies = math.floor(k/2)\n    if n < min_candies or n > max_candies:\n        print(n)\n    else:\n        print(min_candies)\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n3 2\") == \"2\"\nassert solution(\"4 2\\n4 2\") == \"3\"\nassert solution(\"10 5\\n10 5\") == \"5\"\nassert solution(\"5 2\\n5 2\") == \"3\"\nassert solution(\"5 3\\n5 3\") == \"3\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5 2\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3 2\") == \"1\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\"\n\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\nimport numpy as np\nimport sys\n\nnum = int(input())\nfor _ in range(num):\n    n, k = list(map(int, input().split()))\n    a = int(np.floor(k / 2))\n    b = a + 1\n    if b * (b + 1) / 2 > k:\n        a = int(np.floor(k / 2))\n        b = a + 1\n    c = k - a * b\n    print(b + c)\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == '5'\nassert solution(4) == '18'\nassert solution(3) == '10'\nassert solution(2) == '6'\n\nprint(solution(int(stdin.readline())))\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1\nYES\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3') == 'NO'\nassert solution('10 4') == '4 2 4'\nassert solution('100 4') == 'NO'\nassert solution('8 7') == 'YES'\nassert solution('97 2') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == \"YES\\n4 2 4\"\nassert solution(\"100 4\") == \"YES\\n55 5 5 35\"\nassert solution(\"8 7\") == \"YES\\n55 5 5 35\"\nassert solution(\"97 2\") == \"YES\\n3 1 1\"\nassert solution(\"8 8\") == \"NO\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('4 1') == 'YES'\nassert solution('4 0') == 'YES'\nassert solution('3 2') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 10\") == \"YES\\n4 2 4\"\n\"\"\"\n\nimport re\n\npattern = re.compile(r'^(\\d+)\\s*(\\d+)\\s*$')\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 3\") == \"YES\\n4 1 4\"\n\n------"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"YES\\n4 2 4\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"NO\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"\n\"\"\""
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 10\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1'\nassert solution('4 10\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == 'NO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1'\nassert solution('1 1000000000\\n1 1\\n1 1') == 'YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n\"\"\""
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n3\\n100 4') == 'NO'\nassert solution('8\\n3\\n100 4') == 'NO'\nassert solution('8\\n3\\n100 4') == 'NO'\nassert solution('8\\n3\\n100 4') == 'NO'\nassert solution('8\\n3\\n100 4') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\") == \"YES\\n4 2 4\"\nassert solution(\"100 4\") == \"YES\\n55 5 5 35\"\nassert solution(\"8 7\") == \"YES\\n55 5 5 35\"\nassert solution(\"97 2\") == \"YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"\nassert solution(\"8 8\") == \"NO\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\nassert solution('4\\n1 10 100\\n1 3 4\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\nprint(solution('4\\n1 10 100\\n1 3 4\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45'))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([1, 3, 4])) == '4'\nassert solution(str([1, 10, 100])) == '15'\n\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\"))\n\nimport sys; input = sys.stdin.readline\nq = int(input())\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\")!= \"3\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n1 10 100\\"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\nassert solution('3\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '3\\n55\\n15000000000000000\\n51'\n\"\"\"\n\nfrom typing import List, Dict, Tuple"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\nassert solution('4\\n2 3 4\\n2 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\nassert solution('4\\n2 3 4\\n2 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n10000000000000000 10000000000000000 10000000000000000') == '4\\n55\\n15000000000000000\\n51'\nassert solution('4\\n2 3 4\\n2 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\nassert solution('2\\n1 3 4\\n1 10 100\\n') == '2\\n6\\n6'"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nassert solution(test_input_5) == test_output_5\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_1_stdin) == test_1_result\nassert solution(test_2_stdin) == test_2_result\nassert solution(test_3_stdin) == test_3_result\nassert solution(test_4_stdin) == test_4_result"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3\\n'\n                 'abcbac') == '6'\nassert solution('3 6\\n'\n                 'aaa') == '3'\nassert solution('7 1000\\n'\n                 'abczgyo') == '5'\nassert solution('5 4\\n'\n                 'ababa') == '4'\nassert solution('20 10\\n'\n                 'aaebdbabdbbddaadaadc') == '10'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"6\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"3\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"5\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"4\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"15\\n\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\nabcbac') == '3'\nassert solution('3 6\\naaa') == '0'\nassert solution('7 1000\\nabczgyo') == '7'\nassert solution('7 1000\\nabczgyo') == '7'\n\"\"\""
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcbac\") == 3\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 4\nassert solution(\"ababa\") == 5\nassert solution(\"ecbedececacbcbccbdec\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\naa\n''') == 3\nassert solution('''\n2 2\nab\nab\n''') == 1\nassert solution('''\n2 1\naa\nab\n''') == 2\nassert solution('''\n1 1\na\n''') == 1\nassert solution('''\n2 1\naa\nbb\n''') == 1\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3\\n'\n'abcbac\\n'\n'3 6\\n'\n'aaa\\n'\n'7 1000\\n'\n'abczgyo\\n'\n'5 4\\n'\n'ababa\\n'\n'20 10\\n'\n'aaebdbabdbbddaadaadc\\n'\n'20 5\\n'\n'ecbedececacbcbccbdec\\n') == '6\\n3\\n5\\n4\\n15\\n10'\n\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n7 18 3 14 1\") == \"NO\\n\"\nassert solution(\"2 2\\n1 2\\n3\") == \"YES\\n1 2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n1 2 3') == 'YES\\n1 3 5'\nassert solution('2\\n5 4') == 'NO'\nassert solution('1\\n5 3') == 'YES\\n1 3 5'\nassert solution('1\\n5 3\\n7 18 3 14 1') == 'YES\\n1 3 5\\nNO'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\") == 'NO\\n1 3 5\\nNO'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([1, 2, 3, 4, 5])) == \"YES\\n1 3 5\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque, defaultdict\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n7 18 3 14 1') == 'YES\\n1 3 5'\nassert solution('5 4\\n1 2 3 4 5') == 'NO'\nassert solution('6 2\\n1 2 8 4 10 2') == 'NO'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5 3\\n7 18 3 14 1\") == \"YES\\n1 3 5\"\n\"\"\"\n\nq = int(stdin.readline())\n\nfor _ in range(q):\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    odds = []\n    for i, num in enumerate(a):\n        if num % 2:\n            odds.append(i)\n\n    if len(odds) > k:\n        print(\"NO\")\n        continue\n\n    a_dict = {}\n    for i, num in enumerate(a):\n        a_dict.setdefault(num, []).append(i)\n\n    # print(a_dict)\n    if len(a_dict) == k:\n        print(\"YES\")\n        if len(odds)!= 0:\n            print(\" \".join([str(i) for i in odds]))\n        continue\n\n    if len(odds) < k:\n        print(\"NO\")\n        continue\n\n    left = odds[0]\n    right = odds[0] + 1\n    mid = 2\n    while len(a_dict[a[left]]) > 1:\n        left_count = len(a_dict[a[left]])\n        mid_count = len(a_dict[a[mid]])\n        if left_count > mid_count:\n            left = a_dict[a[left]][0]\n            right = a_dict[a[left]][0] + 1\n            mid = a_dict[a[mid]][-1]\n        else:\n            left = a_dict[a[left]][-1]\n            right = a_dict[a[left]][-1] + 1\n            mid = a_dict[a[mid]][0]\n        if left < mid:\n            print(\"NO\")\n            break\n        else:\n            print(\"YES\")\n            print(left + 1, mid + 1)\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n2 2\\n2 3') == 'NO'\nassert solution('2 1\\n2 3') == 'NO'\nassert solution('2 1\\n2 1') == 'YES'\nassert solution('1 3\\n2') == 'YES'\nassert solution('1 1\\n2 2') == 'YES'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n-----Problem-----\n\nSolution:\n\nimport itertools"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\") == \"YES\\n1 3 5\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"6 2\\n1 2 8 4 10 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 1 2 5\\n3 1 2 3\\n\") == 'YES\\n1 2 5'\n\"\"\"\n\nfrom math import gcd\nfrom collections import deque\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111111111111111111111111111111101') == 3221225471\nassert solution('11001100110011001100110011001101') == 3221225471\nassert solution('110011001100110011001100110011100') == 3221225471\nassert solution('110011001100110011001100110011110') == 3221225471\nassert solution('11001100110011001100110011001111') == 3221225471\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1101011011011001111001110010\") == \"1001111101101111011011011100100\"\nassert solution(\"11001001111101101101111011100\") == \"111111111111111111111111111111\"\nassert solution(\"1110111101101101111011011100\") == \"10111111011011110110110111101\"\nassert solution(\"1110111101101101111011011100\") == \"10111111011011110110110111101\"\nassert solution(\"1110111101101101111011011100\") == \"10111111011011110110110111101\"\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(bin(11)) == '1011'\nassert solution(bin(111)) == '10111111111111111111111111111111'\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101101101110011011110111101111011') == '10111011111101101101111011100111011'\nassert solution('1110011100111110011100111001111100') == '10111101101111011110111101101111010'\nassert solution('1110110111100111011110011101111011') == '10111101111110110111101101101111010'\nassert solution('1110110111111110111101111011110111') == '10111111111111111111111111111111111'\nassert solution('11101111111111111111111111111111111') == '10111111111111111111111111111111111'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10000101\") == \"10110110\"\nassert solution(\"11111111111111111111111111111101\") == \"10111111111111111111111111111111\"\nassert solution(\"11101111011111111011111111011010\") == \"10111111111111111111111111111111\"\nassert solution(\"11101111011111111111111111111011\") == \"10111111111111111111111111111111\"\nassert solution(\"111111111111111111111111111111110\") == \"10111111111111111111111111111111\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('111011100') == '1010101110'\nassert solution('110010010') == '1111101101'\nassert solution('11111111111111111111111111101') == '10111111111111111111111111111111'\nassert solution('111111111111111111111111111010') == '10111111111111111111111111111111'\nassert solution('1111111111111111111111111111101') == '10111111111111111111111111111111'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111111111111111111111111111111101\") == '3221225471'\nassert solution(\"10111111111111111111111111111101\") == '3221225471'\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        # 32 bits\n        result = 0\n        for i in range(32):\n            result <<= 1\n            result |= n & 1\n            n >>= 1\n\n        return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\nassert solution(\"1\") == [[1]]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == [[1],[1,1],[1,2,1]]\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1\\n1 1'\nassert solution('3') == '1\\n1 2\\n1 1 3'\nassert solution('4') == '1\\n1 2\\n1 3\\n1 1 4\\n1 4 1'\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution(\"6\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \\\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\n\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \\\n    [\n        [1],\n        [1,1],\n        [1,2,1],\n        [1,3,3,1],\n        [1,4,6,4,1]\n    ]\n\"\"\"\n\n\"\"\"\nConstraints:\n1 \u2264\u00a0numRows\u00a0<=\u00a030\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n\nassert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\nassert solution(\"6\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n\"\"\"\nimport math\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'lara@hackerrank.com']\nassert solution('''2\nlara@hackerrank.com\nbrian-23@hackerrank.com''') == ['brian-23@hackerrank.com', 'lara@hackerrank.com']\nassert solution('''1\nlara@hackerrank.com''') == ['lara@hackerrank.com']\nassert solution('''0\n''') == []\nassert solution('''5\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\njulia.s@hackerrank.com\njulia@hackerrank.com\n''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'julia.s@hackerrank.com', 'julia@hackerrank.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\njoe@gmail.com\\njoe@ms.com\") == [ 'joe@ms.com' ]\nassert solution(\"3\\njoe@gmail.com\\njoe@ms.com\\njoe@gmail.com\") == [ 'joe@gmail.com', 'joe@ms.com' ]\nassert solution(\"1\\njoe@gmail.com\") == [ 'joe@gmail.com' ]\n\n=====TestCase=====\nInput 1:\n2\njoe@gmail.com\njoe@ms.com\nOutput 1:\njoe@ms.com\n\nInput 2:\n3\njoe@gmail.com\njoe@ms.com\njoe@gmail.com\nOutput 2:\njoe@gmail.com\njoe@ms.com\n\n\n=====Sample TestCase Submission=====\nInput 1:\n3\njoe@gmail.com\njoe@ms.com\njoe@gmail.com\nOutput 1:\njoe@gmail.com\njoe@ms.com\n\nInput 2:\n1\njoe@gmail.com\nOutput 2:\njoe@gmail.com\n\n'''\nfrom functools import reduce"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 abc@def.com abc@def.com abc@def.com\") == ['abc@def.com', 'abc@def.com', 'abc@def.com']\nassert solution(\"2 example@email.com example@email.com\") == ['example@email.com', 'example@email.com']\nassert solution(\"2 example@email.com example@email.com\\n1 example@email.com\") == ['example@email.com', 'example@email.com']\nassert solution(\"2 example@email.com example@email.com\\n1 example@email.com\\n2 example@email.com\") == ['example@email.com', 'example@email.com', 'example@email.com']"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\na\\nb\\n\") == ['a@ex.com', 'b@ex.com']\nassert solution(\"1\\na\\nb\\n\") == ['a@ex.com']\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == []\nassert solution('a@gmail.com\\nb@gmail.com\\nc@gmail.com\\n') == ['c@gmail.com', 'b@gmail.com']\nassert solution('a@gmail.com\\na@hotmail.com\\na@yandex.ru\\nb@gmail.com') == ['b@gmail.com', 'a@gmail.com']\nassert solution('a@gmail.com\\n1@gmail.com\\nb@gmail.com\\n1@hotmail.com\\n') == ['a@gmail.com', 'b@gmail.com', '1@gmail.com']\nassert solution('a@hotmail.com\\n1@hotmail.com\\nb@gmail.com\\n1@gmail.com\\n1@yahoo.com\\n') == ['a@hotmail.com', 'b@gmail.com', '1@yahoo.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nrich@gmail.com\\n') == ['rich@gmail.com']\nassert solution('1\\nrich@gmail.com\\n') == ['rich@gmail.com']\nassert solution('1\\nrich@gmail.com\\nrich@yahoo.com') == ['rich@gmail.com', 'rich@yahoo.com']\nassert solution('2\\nrich@gmail.com\\nrich@yahoo.com\\n') == ['rich@gmail.com', 'rich@yahoo.com']\n\n=====Sample Test Case\nInput\n\n2\nrich@gmail.com\nrja@yahoo.com\nOutput\n\n['rich@gmail.com', 'rja@yahoo.com']\nExplanation\n\nTest case 1: Only one valid email, so it is returned as a list with one element.\nTest case 2: Both valid emails are returned as lists with two elements.\n\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\nabc@def.com\nxyz@abc.com''') == ['abc@def.com', 'xyz@abc.com']\n\n'''\n- **edge case**: if no email in a line, it must be empty line because\n- **testcase**: {'1':'', '2':'d'}\n- **testcase**: {'1':'a@b'}\n- **testcase**: {'1':'a'}\n- **testcase**: {'1':'a@'}\n- **testcase**: {'1':'a@b@c'}\n- **testcase**: {'1':'a@b@c@d'}\n- **testcase**: {'1':'a@b@c@d@e'}"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n'ab@cdef.com\\nef@abc.com\\nhij@abcd.com\\n\") == ['ab@cdef.com', 'ef@abc.com', 'hij@abcd.com']\n\n====================================================\n\n1.1 Write a function filter_long_words() that takes a list of words and an integer n and returns the list of words that are longer than n.\n\nExamples\n\n```bash\n$ filter_long_words([\"this\", \"is\", \"an\", \"elementary\", \"test\"], 3)\n['elementary']\n$ filter_long_words([\"this\", \"is\", \"a\", \"simple\", \"test\"], 6)\n[]"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc@gmail.com\\nab@msu.edu\\nqwer@we.com\\nqwe@msu.edu\") == [\"qwer@we.com\", \"qwer@msu.edu\"]\nassert solution(\"abc@gmail.com\\nabc@msu.edu\\nqwer@we.com\\nqwe@msu.edu\") == [\"abc@msu.edu\", \"qwer@we.com\"]\nassert solution(\"abc@gmail.com\\nabc@msu.edu\\nqwer@we.com\\nqwe@msu.edu\") == [\"abc@msu.edu\", \"qwer@we.com\"]\nassert solution(\"abc@gmail.com\\nabc@msu.edu\\nqwer@we.com\\nqwe@msu.edu\") == [\"abc@msu.edu\", \"qwer@we.com\"]\n\n=============================\n\n\nWrite a program to find the longest subarray of non-negative integers.\n\nInput Format:\nThe first and the only line of input contains a list of non-negative integers.\n\nOutput Format:\nThe only line of output prints the length of the longest subarray of non-negative integers.\n\nExample:\n\nInput:\n1 1 2 2 3 3 4 7 7 8 9 9\n\nOutput:\n6\n\nExplanation:\nThe given array is {1, 1, 2, 2, 3, 3, 4, 7, 7, 8, 9, 9}.\nThe largest subarray with non-negative integers is of length 6 and its values are 1, 1, 2, 2, 3, 3.\n\n=============================\n\n\nWrite a program to find the longest sequence of consecutive zeroes in a given array of numbers.\n\nInput Format:\nThe first line of the input contains a single integer N denoting the size of array.\nThe next line contains N space separated integers representing the elements of the array.\n\nOutput Format:\nPrint the longest sequence of consecutive zeroes.\n\nExample:\n\nInput:\n6\n0 1 0 1 1 0\n\nOutput:\n4\n\nExplanation:\nThe longest sequence of consecutive zeroes are of length 4.\nThe sequence can be either 0 0 0 0 or 0 1 0 1.\n\n=============================\n\n\nWrite a program to swap odd and even bits in an integer with as few instructions as possible (e.g., bit 0 and bit 1 are swapped, bit 2 and bit 3 are swapped, and so on).\n\nInput Format:\nThe first and the only line of input contains a single integer N denoting the number of bits in the integer.\n\nOutput Format:\nPrint a single line containing a single integer denoting the integer value obtained after swapping odd and even bits.\n\nExample:\n\nInput:\n5\n\nOutput:\n46\n\nExplanation:\nThe binary representation of the given integer is 0101\nAfter swapping even and odd bits, it becomes 0110.\n\n=============================\n\n\nGiven a string S, find the length of the longest substring T which is a palindrome.\n\nInput Format:\nThe only line of input contains a string S.\n\nOutput Format:\nPrint the length of the longest palindrome substring.\n\nExample:\n\nInput:\n4\nlevel\n\nOutput:\n3\n\nExplanation:\nThe longest palindrome substring is \"lve\"\n\n=============================\n\n\nWrite a program to count the number of substrings of a given string, that contain at least k distinct characters where k is given as an input.\n\nInput Format:\nThe first line of input contains a single integer T, the number of test cases.\nThe only line of each test case contains two space separated integers k and string S.\n\nOutput Format:\nFor each test case, print the number of substrings of the given string, that contain at least k distinct characters.\n\nExample:\n\nInput:\n2\n2 abc\n5 pqr\n\nOutput:\n3\n6\n\n=============================\n\n\nWrite a program to count the number of substrings of a given string, that contain at least k distinct characters where k is given as an input.\n\nInput Format:\nThe first line of input contains a single integer T, the number of test cases.\nThe only line of each test case contains two space separated integers k and string S.\n\nOutput Format:\nFor each test case, print the number of substrings of the given string, that contain at least k distinct characters.\n\nExample:\n\nInput:\n2\n2 abc\n5 pqr\n\nOutput:\n3\n6\n\n=============================\n\n\nWrite a program to count the number of substrings of a given string, that contain at least k distinct characters where k is given as an input.\n\nInput Format:\nThe first line of input contains a single integer T, the number of test cases.\nThe only line of each test case contains two space separated integers k and string S.\n\nOutput Format:\nFor each test case, print the number of substrings of the given string, that contain at least k distinct characters.\n\nExample:\n\nInput:\n2\n2 abc\n5 pqr\n\nOutput:\n3\n6\n\n=============================\n\n\nWrite a program to count the number of substrings of a given string, that contain at least k distinct characters where k is given as an input.\n\nInput Format:\nThe first line of input contains a single integer T, the number of test cases.\nThe only line of each test case contains two space separated integers k and string S.\n\nOutput Format:\nFor each test case, print the number of substrings of the given string, that contain at least k distinct characters.\n\nExample:\n\nInput:\n2\n2 abc\n5 pqr\n\nOutput:\n3\n6\n\n=============================\n\n\nWrite a program to count the number of substrings of a given string, that contain at least k distinct characters where k is given as an input.\n\nInput Format:\nThe first line of input contains a single integer T, the number of test cases.\nThe only line of each test case contains two space separated integers k and string S.\n\nOutput Format:\nFor each test case, print the number of substrings of the given string, that contain at least k distinct characters.\n\nExample:\n\nInput:\n2\n2 abc\n5 pqr\n\nOutput:\n3\n6\n\n=============================\n\n\nWrite a program to find the number of ways to make change for a given number of units using the given set of coins.\n\nInput Format:\nThe first line of input contains an integer N, the number of monetary units.\nThe next line contains N space separated integers, denoting the values of the array coins.\n\nOutput Format:\nPrint the number of ways to make change for the given number of units.\n\nExample:\n\nInput:\n10\n2 4 5\n\nOutput:\n4\n\nExplanation:\nThere are four ways to make change for 10 units:\n{2, 2, 2, 2, 2}\n{2, 2, 3, 3}\n{2, 2, 4, 4}\n{2, 2, 5, 5}\n\n=============================\n\n\nWrite a program to find the number of ways to make change for a given number of units using the given set of coins.\n\nInput Format:\nThe first line of input contains an integer N, the number of monetary units.\nThe next line contains N space separated integers, den"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nluke@google.com\\nryan@gmail.com\\nmauricio@yahoo.com') == ['luke@google.com','mauricio@yahoo.com', 'ryan@gmail.com']\n\nassert solution('2\\n\"john@google.com\"\\nryan@gmail.com\\n') == ['john@google.com', 'ryan@gmail.com']\n\nprint(solution(stdin))\n=====Problem Statement=====\nYou have been asked to help study the population of birds migrating across the continent. Each type of bird you are interested in will be identified by an integer value. Each time a particular kind of bird is spotted, its id number will be added to your array of sightings. You would like to be able to find out which type of bird is most common given a list of sightings. Your task is to print the type number of that bird and if two or more types of birds are equally common, choose the type with the smallest ID number.\n\nFor example, assume your bird sightings are of types. There are two each of types  and, and one sighting of type. Pick the lower of the two types seen twice: type.\n\nFunction Description\n\nComplete the migratoryBirds function in the editor below. It should return the lowest type number of the most frequently sighted bird.\n\nmigratoryBirds has the following parameter(s):\n\narr: an array of integers representing types of birds sighted\nInput Format\n\nThe first line contains an integer denoting, the number of birds sighted and reported in the array.\nThe second line describes  as  space-separated integers representing the type numbers of each bird sighted.\n\nConstraints\n\nIt is guaranteed that each type is,,,, or.\nOutput Format\n\nPrint the type number of the most common bird; if two or more types of birds are equally common, choose the type with the smallest ID number.\n\nSample Input 0\n\n6\n1 4 4 4 5 3\nSample Output 0\n\n4\nExplanation 0\n\nThe different types of birds occur in the following frequencies:\n\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nThe type number that occurs at the highest frequency is type, so we print  as our answer.\n\nSample Input 1\n\n11\n1 2 3 4 5 4 3 2 1 3 4\nSample Output 1\n\n3\nExplanation 1\n\nThe different types of birds occur in the following frequencies:\n\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nType :  bird\nThere are  occurrences of type  bird.\nThe type number that occurs at the highest frequency is type, so we print  as our answer.\n\n=====Sample Input 2======\n\n2\n0 0 0 1 0\nSample Output 2\n\n0\n\n=====Sample Input 3======\n\n3\n2 1 2\nSample Output 3\n\n1\n\n=====Sample Input 4======\n\n5\n0 0 0 1 2\nSample Output 4\n\n0\n\n=====Sample Input 5======\n\n5\n1 1 2 1 2\nSample Output 5\n\n1\n\n>>>>>>> bb4dee632fb26808d6f9ef3c06d8e6b7d1c4c2c9\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"4\") == 2\nassert solution(\"5\") == 3\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\n\n=====Sample Case 0=====\nSample Input:\n5\n\nSample Output:\n[0, 1, 1, 8, 27]\n\n=====Constraints=====\n1 <= N <= 20\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n\n=====Test Case=====\nInput 1:\n5\n\nInput 2:\n2\n\nInput 3:\n2\n\nInput 4:\n1\n\nInput 5:\n3\n\nInput 6:\n3\n\nInput 7:\n5\n\nInput 8:\n8\n\"\"\"\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == [0, 1, 1, 8]\nassert solution(5) == [0, 1, 1, 8, 27]\nassert solution(7) == [0, 1, 1, 8, 27, 64, 125]\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\n\n<<<<<<< HEAD\n\n=======\n>>>>>>> final_review\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nassert solution(\"5\") == [0, 1, 1, 8, 27]\nassert solution(\"6\") == [0, 1, 1, 8, 27, 64]\n=====Solution:=====\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == [0, 1, 1, 8, 27]\n>>>>>>> b9effbf9a1955b7918d9526fcbec2bdc9039439\nprint(list(map(lambda x:x**3,list(map(lambda y:y**3,list(map(int,input().split())))))))"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nassert solution('10') == [0, 1, 1, 8, 34, 144, 610, 2882, 17711, 116226]\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n\n======================\nimport math\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [1, 8, 27, 64, 125]\n>>>>>>> 02dce2f7d1883584c5b5f3cac5f0e37321f79bfe\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\n\"\"\")\n\n(argv: [1, 2, 3, 4, 5])"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('<data>'\n               ' <item>'\n                '<name>Foo</name>'\n                '<item>'\n                '<name>Bar</name>'\n                '</item>'\n               ' </item>'\n                '</data>') == 1\nassert solution('<data>'\n               ' <item>'\n               ' <name>Foo</name>'\n                '<item>'\n                '<name>Bar</name>'\n                '</item>'\n               ' </item>'\n                '</data>') == 2\nassert solution('<data>'\n                '<item>'\n                '<name>Foo</name>'\n                '<item>'\n                '<name>Bar</name>'\n                '</item>'\n                '</item>'\n                '</data>') == 2\nassert solution('<data>'\n                '<item>'\n                '<name>Foo</name>'\n                '<item>'\n                '<name>Bar</name>'\n                '<item>'\n                '<name>Baz</name>'\n                '</item>'\n                '</item>'\n                '</data>') == 3\nassert solution('<data>'\n                '<item>'\n                '<name>Foo</name>'\n                '<item>'\n                '<name>Bar</name>'\n                '<item>'\n                '<name>Baz</name>'\n                '<item>'\n                '<name>Bam</name>'\n                '<item>'\n                '<name>Baz</name>'\n                '</item>'\n                '</item>'\n                '</item>'\n                '</data>') == 4\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 1\n\n=====Test Cases=====\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\nOutput\n\n3\n\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n    </country>\n</data>\n\nOutput\n\n1\n\n=====\n\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\nOutput\n\n1\n\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n    </country>\n</data>\n\nOutput\n\n3\n\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\nOutput\n\n1\n\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n    </country>\n</data>\n\nOutput\n\n3\n\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\nOutput\n\n1\n\n=====\n\nInput\n\n1\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('<data>' + '\\n'.join(['<row>'+ ''.join(['<row>'+''.join(['<row>'+''.join(['<row>'+'<row>'*i+'</row>' for i in range(random.randrange(1,5))])+'</row>' for i in range(random.randrange(1,5))])+'</row>' for i in range(random.randrange(1,5))])+'</row>' for i in range(random.randrange(1,5))])+'</data>') == 1\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Aakash</author>\n        <question type='easy'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n        <neighbor name=\"Switzerland\" direction=\"W\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 2\n\n=====Note=====\nWe encourage you to take a look at the string method `find()`, to better grasp the problem.\n\nYou may use `open()` to open test data files, take a look at `utils/get_test_data.py` to see how it works.\n\n>>>>>>> 9e0c4d1c13f7f7f2d1e6f6b35e5d03986b7b8a\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n\"\"\".split('\\n')[1:-1])\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n\"\"\".split('\\n')[1:-1])\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n\"\"\".split('\\n')[1:-1])\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n\"\"\".split('\\n')[1:-1])\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n\"\"\".split('\\n')[1:-1])"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 3"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 3\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Aakash</author>\n        <question type='easy'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 3\n\n=====Test Case 1=====\nInput\n1\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput\n1\n\n=====Test Case 2=====\nInput\n4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Aakash</author>\n        <question type='easy'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\nOutput\n2\n\n=====Test Case 3=====\nInput\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\nOutput\n1\n\n=====Test Case 4=====\nInput\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Aakash</author>\n        <question type='easy'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\nOutput\n2\n'''\n) == 3\n=====Problem Statement=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\n=====Input Format=====\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\n=====Output Format=====\nOutput a single line, the integer value of the maximum level of nesting in the XML document.\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 1\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bhavya</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == 3\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bhavya</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Vivek</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == 2\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bhavya</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Vivek</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Karan</author>\n        <question type='hard'>XML 4</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == 1\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bhavya</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Vivek</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Karan</author>\n        <question type='hard'>XML 4</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bhavya</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Vivek</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == 0"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 2\nassert solution(\"\"\"\n<a>\n    <b>\n        <c/>\n        <d/>\n    </b>\n    <e>\n        <f/>\n        <g/>\n    </e>\n</a>\n\"\"\") == 1\nassert solution(\"\"\"\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\"\"\") == 1\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('(901)234-5678') == 'YES'\nassert solution('(901)234 5678') == 'NO'\nassert solution('(123)456-7890') == 'YES'\nassert solution('(123)456-7890') == 'NO'\nassert solution('abcdef') == 'NO'\n\nInput 1:\n2\n(123)456-7890\n1234567890\n\nOutput 1:\nYES\nNO\n\nInput 2:\n1\n(123)456-7890\n\nOutput 2:\nNO\n\nInput 3:\n1\n(901)234-5678\n\nOutput 3:\nYES\n\nInput 4:\n4\n(901)234-5678\n1234567890\nabcdef\nABCD-EF12\n\nOutput 4:\nNO\nNO\nNO\nYES\n\n\nSolution:\n\nimport re\n\nn = int(input())\npattern = r\"^[789]\\d{9}$\"\n\nfor _ in range(n):\n    line = input()\n    match = re.fullmatch(pattern, line)\n    if match:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('07895462130') == \"YES\"\nassert solution('934278190') == \"YES\"\nassert solution('(123) 456-7890') == \"YES\"\nassert solution('abc') == \"NO\"\nassert solution('123456789a') == \"NO\"\n\nTest case 0\nprint(solution('07895462130'))\nTest case 1\nprint(solution('934278190'))\nTest case 2\nprint(solution('(123) 456-7890'))\nTest case 3\nprint(solution('abc'))\nTest case 4\nprint(solution('123456789a'))\nsolution(input())\n\nThe first line contains an integer, T, the number of test cases.\nT test cases follow.\nEach test case is one line with some string, N.\n\nYou do not need to worry about case sensitivity.\n\nOutput Format\nFor every string listed, print \"YES\" if it is a valid mobile number and \"NO\" if it is not on separate lines. Do not print the quotes.\n\nSample Input\n2\n9587456281\n1252478965\nSample Output\nYES\nNO\nExplanation\nTest Case 0: As it starts with a 7, 8, or 9, it is a valid mobile number.\nTest Case 1: As it contains letters, it is not a valid mobile number.\n\"\"\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"85839509876543\") == \"YES\\n\", \"Test 1 Failed\"\nassert solution(\"9384975729\") == \"YES\\n\", \"Test 2 Failed\"\nassert solution(\"654849538\") == \"YES\\n\", \"Test 3 Failed\"\nassert solution(\"873895729\") == \"NO\\n\", \"Test 4 Failed\"\nassert solution(\"87389572912\") == \"NO\\n\", \"Test 5 Failed\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('07895462130') == 'YES'\nassert solution('8946278345') == 'NO'\nassert solution('123456789') == 'NO'\nassert solution('1234567890') == 'NO'\nassert solution('0712345678') == 'YES'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('79999999999') == 'NO'\nassert solution('89999999999') == 'NO'\nassert solution('89999999999') == 'NO'\nassert solution('99999999999') == 'YES'\nassert solution('99999') == 'YES'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9123456789') == 'YES'\nassert solution('91234567890') == 'NO'"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7348 689 4512 5464') == 'YES\\nNO\\nYES\\n'\n=====Test Case 1=====\n7348 689 4512 5464\n\nassert solution('7348 689 4512 5464') == 'YES\\nNO\\nYES\\n'\n=====Test Case 2=====\n7348 689 4512 5464\n\nassert solution('7348 689 4512 5464') == 'YES\\nNO\\nYES\\n'\n=====Test Case 3=====\n7348 689 4512 5464\n\nassert solution('7348 689 4512 5464') == 'YES\\nNO\\nYES\\n'\n\n=====Test Case 4=====\n7348 689 4512 5464\n\nassert solution('7348 689 4512 5464') == 'YES\\nNO\\nYES\\n'\n=====Test Case 5=====\n7348 689 4512 5464"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('72272829384') == 'YES'\nassert solution('93828394839') == 'YES'\nassert solution('99923424587') == 'NO'\nassert solution('938283948') == 'NO'\n\n\"\"\"\n\nimport re\nimport sys\n\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    line = sys.stdin.readline().strip()\n    if re.search(r'^[789][0-9]{9}$', line):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"977987798\") == \"NO\"\nassert solution(\"9779876\") == \"YES\"\nassert solution(\"9779876x\") == \"NO\"\nassert solution(\"9779876xy\") == \"NO\"\n\nprint(solution(\"977987798\"))\nprint(solution(\"9779876\"))\nprint(solution(\"9779876x\"))\nprint(solution(\"9779876xy\"))\nprint(solution(\"9779876y\"))\n\nimport re"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7886471230') == 'NO'\nassert solution('9347623890') == 'YES'\nassert solution('9354637128') == 'NO'\nassert solution('766471230') == 'NO'\n=======\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n' + '1 2 3 4'.replace(' ', '') + '5\\n' + '2 3 5 6 7 8'.replace(' ', '')) == '8 9 10'"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 5 9\\n4\\n2 4 11 12') == '5 9 11 12'\n\n\"\"\"\n\na = int(input())\ns1 = set(map(int, input().split()))\nb = int(input())\ns2 = set(map(int, input().split()))\n\ns3 = sorted(s1.union(s2) - (s1.intersection(s2)))\n\nfor i in s3:\n    print(i)"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 5 9\\n3\\n5 3 2\") == \"2 3 9\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 6 8\\n4\\n2 4 11 12\") == \"6\\n8\\n11\\n12\"\n\nassert solution(\"5\\n2 4 6 8 10\\n4\\n2 4 11 12\") == \"2\\n6\\n8\\n10\\n11\\n12\"\n\nassert solution(\"4\\n9 7 3\\n9\\n7 3 13\") == \"3\\n13\"\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n{1, 2, 3, 5, 7}\\n\"\n    \"4\\n{2, 3, 5, 7, 11}\\n\") == \"1\\n{1, 4, 7, 11}\"\n\nassert solution(\n    \"5\\n{1, 2, 3, 5, 7}\\n\"\n    \"4\\n{2, 3, 5, 7, 11}\\n\") == \"1\\n{1, 4, 7, 11}\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 5 9 12\\n4\\n2 4 11 12') == '12 9 5'\nassert solution('5\\n1 1 2 3 3\\n4\\n2 4 11 12') == '2 11'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n11\n12'''\n    # your solution goes here"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 3 4 5') == '3 4 5'\nassert solution('5\\n4 5') == '1 3'\n\n=====Test Case 1=====\nInput\n\n5\n1 3 4 5\n\n5\n4 5\n\nOutput\n\n3\n4\n5\nInput\n\n2\n3\n5\n1\n\n3\n1\n\nOutput\n\n3\n4\n\n=====Test Case 2=====\nInput\n\n5\n1 3 4 5\n\n5\n4 5\n\nOutput\n\n3\n4\n5\nInput\n\n2\n3\n5\n1\n\n3\n1\n\nOutput\n\n3\n\n=====Test Case 3=====\nInput\n\n2\n3\n5\n1\n\n3\n1\n\nOutput\n\n3\n4\n\n=====Test Case 4=====\nInput\n\n2\n3\n5\n1\n\n3\n1\n\nOutput\n\n3\n4\n\n=====Test Case 5=====\nInput\n\n3\n3\n2\n\n2\n1\n\n3\n1\n\nOutput\n\n2\n3\n\n=====Test Case 6=====\nInput\n\n3\n3\n2\n\n2\n1\n\n3\n1\n\nOutput\n\n2\n3\n\n=====Test Case 7=====\nInput\n\n5\n1 3 4 5\n\n5\n4 5\n\nOutput\n\n3\n4\n5\n\n=====Test Case 8=====\nInput\n\n5\n1 3 4 5\n\n5\n4 5\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 9=====\nInput\n\n2\n3\n5\n1\n\n3\n1\n\nOutput\n\n3\n4\n\n=====Test Case 10=====\nInput\n\n5\n1 3 4 5\n\n5\n4 5\n\nOutput\n\n3\n4\n5\n\n=====Test Case 11=====\nInput\n\n5\n1 3 4 5\n\n5\n4 5\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 12=====\nInput\n\n3\n3\n2\n\n2\n1\n\n3\n1\n\nOutput\n\n2\n3\n\n=====Test Case 13=====\nInput\n\n3\n3\n2\n\n2\n1\n\n3\n1\n\nOutput\n\n2\n3\n\n=====Test Case 14=====\nInput\n\n6\n1 3 4 5 6\n\n6\n4 5 6 7 8\n\nOutput\n\n3\n5\n6\n7\n8\n\n=====Test Case 15=====\nInput\n\n5\n1 2 3 4 5\n\n5\n2 3 4 5 6\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 16=====\nInput\n\n5\n1 2 3 4 5\n\n5\n2 3 4 6 7\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 17=====\nInput\n\n5\n1 3 5 6 8 9\n\n5\n2 3 6 7 9 10\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 18=====\nInput\n\n4\n1 2 3 4\n\n4\n2 3 4 5\n\nOutput\n\n1\n2\n3\n4\n\n=====Test Case 19=====\nInput\n\n5\n1 3 5 6 8 9\n\n5\n2 3 4 5 6\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 20=====\nInput\n\n2\n5\n1 2 3 4 5\n\n3\n1 2 3 4\n\nOutput\n\n2\n3\n4\n\n=====Test Case 21=====\nInput\n\n2\n5\n1 2 3 4 5\n\n3\n1 2 3 4\n\nOutput\n\n2\n3\n4\n\n=====Test Case 22=====\nInput\n\n4\n1 2 3 4\n\n4\n2 3 4 5\n\nOutput\n\n1\n2\n3\n4\n\n=====Test Case 23=====\nInput\n\n5\n1 3 5 6 8 9\n\n5\n2 3 6 7 9 10\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 24=====\nInput\n\n5\n1 2 3 4 5\n\n5\n2 3 4 5 6\n\nOutput\n\n1\n2\n3\n4\n5\n\n=====Test Case 25=====\nInput"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 6 7\\n3\\n1 2 4 8') == '2\\n6\\n8'\nassert solution('3\\n2 6\\n1\\n5') == '1\\n5'\n=====Sample Tests=====\nInput:\n2\n1 2 3\n3\n2 4 7 8\n\nOutput:\n3\n8\n7\n4\n2\n\nInput:\n3\n1 2 3\n3\n2 4 7 8\n\nOutput:\n2\n8\n7\n\nInput:\n4\n1 2 3 4\n4\n2 3 6 8\n\nOutput:\n2\n3\n6\n8\n\nInput:\n4\n1 2 3 4\n4\n2 3 6 8\n\nOutput:\n2\n3\n6\n8\n\nInput:\n2\n1 2\n3\n2 4\n\nOutput:\n3\n4\n\"\"\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 3 6 8 9') == '2 8 9'\n\"\"\""
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nID\\n100\\n200\\n300\\n400\\n500\\n') == '300'\nassert solution('3\\nClass\\nO\\n1\\n4\\n2') == '2.67'\n\"\"\"\nfrom collections import namedtuple\nN = int(input())\nfields = input().split()\nStudent = namedtuple('Student', fields)\nmarks = 0\ntotal_students = 0\nfor i in range(N):\n    students = Student(*input().split())\n    marks += int(students.MARKS)\n    total_students += 1\nprint('{:.2f}'.format(marks/total_students))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(['1', '2', '3', '4', '5']) == 3\nassert solution(['1', '2', '3', '4', '5', '6']) == 4.5\nassert solution(['MARKS', 'CLASS', 'NAME', 'ID']) == 3.0\n\"\"\"\nfrom collections import namedtuple\n\n_FIELDS = 'ID, MARKS, CLASS, NAME'\nStudent = namedtuple('Student', _FIELDS)\n_FIELDS = _FIELDS.split(', ')\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"1\\nMARKS\\nCLASS\\nID\\nNAME\\n\") == \"67.50\"\nassert solution(\"2\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"67.50\"\nassert solution(\"4\\nMARKS\\nCLASS\\nID\\nNAME\\n\") == \"67.50\"\nassert solution(\"5\\nNAME\\nMARKS\\nCLASS\\nID\\n\") == \"67.50\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\nassert solution('3\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '67.50'\nassert solution('4\\nCLASS\\nNAME\\nID\\nMARKS\\n') == '67.50'\nassert solution('5\\nNAME\\nCLASS\\nID\\nMARKS\\n') == '67.50'\n\nprint(solution('3\\nMARKS\\nCLASS\\nNAME\\nID\\n'))\n\n=====Problem Statement=====\nYou are given a string and your task is to swap cases.\nIn other words, convert all lowercase letters to uppercase letters and vice versa.\n\nFor Example:\nWww.HackerRank.com \u2192 wWW.hACKERrANK.COM\nPythonist 2 \u2192 pYTHONIST 2\n\n=====Input Format=====\nA single line containing a string S.\n\n=====Constraints=====\n0 < len(S) <= 1000\n\n=====Output Format=====\nPrint the modified string S.\n\n=====Sample TestCase=====\n>>> solution('HackerRank.com presents \"Pythonist 2\".')\n'hACKERrANK.COM PRESENTS \"pYTHONIST 2\".'\n\n>>> solution('CodeWithHarry')\n'CODEWITHHERRY'\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ID,MARKS,CLASS,NAME\\n1,91,B,Alberto\\n2,92,B,Ana\\n3,80,A,Gaby\\n4,78,A,Alberto\\n5,81,C,Alberto') == '81.00'\n============================================================\n'''\n\nfrom collections import namedtuple\n\nnumber_of_students = int(input())"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\nreturn 0\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"1\\nMARKS\\nCLASS\\nID\\nNAME\\n\") == \"67.50\"\n\n=====Sample test cases=====\nTestcase 1\nInput\n5\nID\nMARKS\nCLASS\nNAME\n1\n1\nA\n1\nB\n2\n2\nA\n2\nB\n3\n3\nA\n2\nB\nAverage = 90.00 / 5\nTestcase 2\nInput\n5\nMARKS\nCLASS\nNAME\n1\n1\nA\n1\nB\n2\n2\nA\n2\nB\n3\n3\nA\n2\nB\nAverage = 67.50 / 5\n\n=====Solution=====\n\n'''\n\nfrom collections import namedtuple\nn = int(input())\nfields = input().split()\nTotal = 0\nStudent = namedtuple('Student', fields)\nfor _ in range(n):\n    line = input().split()\n    stu = Student(*line)\n    Total += int(stu.MARKS)\nprint('{0:.2f}'.format(Total/n))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '0.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '0.00'\n\"\"\"\n\n\nfrom collections import namedtuple\n\nStudent = namedtuple('Student',['ID', 'MARKS', 'CLASS','NAME'])"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == \"Weird\"\nassert solution('24') == \"Weird\"\nassert solution('24') == \"Not Weird\"\nassert solution('20') == \"Not Weird\"\nassert solution('22') == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"Not Weird\"\nassert solution(\"2\") == \"Weird\"\nassert solution(\"15\") == \"Weird\"\nassert solution(\"22\") == \"Weird\"\nassert solution(\"24\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == \"Not Weird\"\nassert solution('3') == \"Weird\"\nassert solution('4') == \"Not Weird\"\nassert solution('5') == \"Weird\"\nassert solution('6') == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Weird\"\nassert solution(\"6\") == \"Not Weird\"\nassert solution(\"8\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == \"Weird\"\nassert solution('24') == \"Weird\"\nassert solution('22') == \"Not Weird\"\nassert solution('20') == \"Weird\"\nassert solution('21') == \"Weird\"\n\"\"\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == 'Weird'\nassert solution(24) == 'Not Weird'\nassert solution(5) == 'Weird'\nassert solution(2) == 'Not Weird'\n\n\"\"\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('92') == 'Weird'\nassert solution('19') == 'Not Weird'\nassert solution('2') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('0') == 'Not Weird'\nassert solution('1') == 'Weird'\nassert solution('2') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Weird\"\nassert solution(5) == \"Not Weird\"\nassert solution(6) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == 'Not Weird'\nassert solution(15) == 'Weird'\nassert solution(1) == 'Not Weird'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == output_1\n\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == output_2\n\"\"\"\n\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"<feed xml:lang='en'>\\n\"\n\"<title>HackerRank</title>\\n\"\n\"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"<updated>2013-12-25T12:00:00</updated>\\n\"\n\"</feed>\") == \"5\"\nassert solution(\n\"<feed xml:lang='en'>\\n\"\n\"<title>HackerRank</title>\\n\"\n\"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"<updated>2013-12-25T12:00:00</updated>\\n\"\n\"</feed>\") == \"0\"\nassert solution(\n\"<feed xml:lang='en'>\\n\"\n\"<title>HackerRank</title>\\n\"\n\"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"<updated>2013-12-25T12:00:00</updated>\\n\"\n\"<entry>\\n\"\n\"<author>Harsh</author>\\n\"\n\"<question type='hard'>XML 1</question>\\n\"\n\"<description type='text'>This is related to XML parsing</description>\\n\"\n\"</entry>\\n\"\n\"</feed>\") == \"3\"\nassert solution(\n\"<feed xml:lang='en'>\\n\"\n\"<title>HackerRank</title>\\n\"\n\"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"<updated>2013-12-25T12:00:00</updated>\\n\"\n\"<entry>\\n\"\n\"<author>Harsh</author>\\n\"\n\"<question type='hard'>XML 1</question>\\n\"\n\"<description type='text'>This is related to XML parsing</description>\\n\"\n\"</entry>\\n\"\n\"<entry>\\n\"\n\"<author>Harsh</author>\\n\"\n\"<question type='hard'>XML 2</question>\\n\"\n\"<description type='text'>This is related to XML parsing</description>\\n\"\n\"</entry>\\n\"\n\"</feed>\") == \"6\"\nassert solution(\n\"<feed xml:lang='en'>\\n\"\n\"<title>HackerRank</title>\\n\"\n\"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"<updated>2013-12-25T12:00:00</updated>\\n\"\n\"<entry>\\n\"\n\"<author>Harsh</author>\\n\"\n\"<question type='hard'>XML 1</question>\\n\"\n\"<description type='text'>This is related to XML parsing</description>\\n\"\n\"</entry>\\n\"\n\"<entry>\\n\"\n\"<author>Harsh</author>\\n\"\n\"<question type='hard'>XML 2</question>\\n\"\n\"<description type='text'>This is related to XML parsing</description>\\n\"\n\"</entry>\\n\"\n\"</feed>\") == \"0\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 10\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\"\"\") == 5\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n</feed>\"\"\") == 0\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == 15\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == 6"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 5\n    assert solution(\"\"\"\n    <feed xmlns='http://www.w3.org/2005/Atom'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == 0\n    assert solution(\"\"\"\n    <feed xmlns='http://www.w3.org/2005/Atom'>\n        <n:entry xmlns:n='http://www.w3.org/2005/Atom'>\n            <n:title>HackerRank</n:title>\n            <n:subtitle lang='en'>Programming challenges</n:subtitle>\n        </n:entry>\n    </feed>\n    \"\"\") == 3\n    assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == 0\n    assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <n:entry xmlns:n='http://www.w3.org/2005/Atom'>\n            <n:title>HackerRank</n:title>\n            <n:subtitle lang='en'>Programming challenges</n:subtitle>\n        </n:entry>\n    </feed>\n    \"\"\") == 3\n    "
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 30\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 34\n\n=====Test Case 2=====\nNow, let's consider an XML document without tags:\n\n<x>5</x>\nThere are no tags, so the solution is 0.\n\n=====Test Case 3=====\nLet's look at a simple example with a self-closing tag:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    </feed>\nHere, the solution is 0, because while the tag <feed> has an attribute, the self-closing tag <entry>, which is immediately followed, does not have any attributes.\n\n=====Test Case 4=====\nLet's consider the following XML document:\n\n<feed xml:lang='en' xmlns='http://www.w3.org/2005/Atom'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\nWe would return 0, because although the document has attributes, there are no tags in it.\n\n=====Test Case 5=====\nLet's look at the following XML document:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'/>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\nWe would return 0, because even though the document has attributes, it does not have any tags.\n\n=====Test Case 6=====\nLet's look at the following XML document:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    </feed>\n\nWe would return 1, because the document contains a single tag <entry>.\n\n=====Test Case 7=====\nLet's look at the following XML document:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'/>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\nWe would return 0, because the document contains a single tag <entry>, and it contains nested, self-closing tags <question>.\n\n=====Test Case 8=====\n\nLet's look at the following XML document:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'/>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nWe would return 0, because the document contains a single tag <entry>, and it contains nested, self-closing tags <question>.\n\n====================================================================================================\n\"\"\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xmlns='http://www.w3.org/2005/Atom'>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <link rel='related' type='text/html' href='http://hackerrank.com/'/>\n    <link rel='via' type='text/html' href='http://tweep.com/'/>\n    <link rel='search' type='text/html' href='http://hackerrank.com/?q=%2Bhackerrank&amp;rpp=100'/>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\n\n======\n2. Find the minimum depth of a binary tree.\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\nInput Format:\nThe first line contains the number of nodes (N) in the tree.\nThe second line contains the parent pointers, using 'null' for an empty spot.\nThe next N lines contains the values of the nodes.\n\nOutput Format:\nPrint the minimum depth.\n\nInput:\n5\n0 3 2 9 5\n3 9 0 7 null null null\n1 2 3 4 5 6\n1 null null 2 null null 3 null null null\n5\n2 5 2 6 null null 1 3 null null null\n3 4 4 null 2 null 1\n\nOutput:\n2\n2\n3\n\n======\n\n3. Find the maximum depth of a binary tree.\nGiven a binary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nInput Format:\nThe first line contains the number of nodes (N) in the tree.\nThe next N lines contains the value of the nodes where the ith value is the value of the ith node.\n\nOutput Format:\nPrint the maximum depth of the tree.\n\nInput:\n7\n3\n2\n5\n8\n7\n2\n4\n\nOutput:\n3\n\n======\n\n4. Find the maximum depth of a binary tree\nGiven a binary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nInput Format:\nThe first line contains the number of nodes (N) in the tree.\nThe next N lines contains the values of the nodes where the ith value is the value of the ith node.\n\nOutput Format:\nPrint the maximum depth of the tree.\n\nInput:\n4\n1\n2\n3\n4\n\nOutput:\n3\n\n======\n5. Find the maximum depth of a binary tree\nGiven a binary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nInput Format:\nThe first line contains the number of nodes (N) in the tree.\nThe next N lines contains the value of the nodes where the ith value is the value of the ith node.\n\nOutput Format:\nPrint the maximum depth of the tree.\n\nInput:\n6\n1\n2\n3\n4\n5\n6\n\nOutput:\n4\n\n======\n6. Find the sum of all left leaves in a given binary tree.\nYou are given a binary tree and you need to write a function that returns the sum of all left leaves of the binary tree.\n\nInput Format:\nThe first line of input contains the number of nodes in the tree, 'n'.\nThe second line contains 'n' node values in a single line separated by space.\nEach of the following 'n' lines contains a child of the node and the node value separated by a space.\n\nInput Constraints:\n0 <= n <= 10^3\n\nOutput Format:\nPrint a single integer denoting the sum of all left leaves in the given binary tree.\n\nInput:\n9\n3 2 9 1 3 4 7 6 5\n\nOutput:\n2\n\n======\n7. Check if two binary trees are identical.\nGiven two binary trees, write a function to check if they are identical or not.\nTwo binary trees are considered identical if they are structurally identical and the nodes have the same value.\n\nInput Format:\nThe first line of input contains the number of nodes in the first tree, 'n'.\nThe second line contains the value of the nodes in the first tree.\nThe following 'n' lines contains the value of the nodes in the second tree.\n\nOutput Format:\nThe only line of output prints 'true' or 'false' without quotes.\n\nInput:\n4\n1\n2\n3\n4\n1 3 2 4\n1\n1\n2\n3\n\nOutput:\ntrue\n\n======\n8. Check if two binary trees are identical.\nGiven two binary trees, write a function to check if they are identical or not.\nTwo binary trees are considered identical if they are structurally identical and the nodes have the same value.\n\nInput Format:\nThe first line of input contains the number of nodes in the first tree, 'n'.\nThe second line contains the value of the nodes in the first tree.\nThe following 'n' lines contains the value of the nodes in the second tree.\n\nOutput Format:\nThe only line of output prints 'true' or 'false' without quotes.\n\nInput:\n2\n1\n2\n2\n1\n1\n\nOutput:\ntrue\n\n======\n9. Print the sum of the elements of a binary tree.\nYou are given a pointer to the root of a binary tree. You need to print the sum of all its elements.\n\nInput Format:\nThe first line of input contains an integer, which is the value of the root node.\nThe next line contains the number of nodes in the tree.\nThe next 'n' lines contain the value of the nodes of the tree where the value of the ith node is denoted by 'ai'.\n\nOutput Format:\nPrint the sum of all the nodes present in the tree as a single integer.\n\nInput:\n9\n2\n7\n1 3 1 6 7 6 8\n\nOutput:\n32\n\n======\n10. Print the sum of all left leaves in a binary tree.\nYou are given a binary tree and you need to write a function that returns the sum of all left leaves of the binary tree.\n\nInput Format:\nThe first line of input contains the number of nodes in the tree, 'n'.\nThe next 'n' lines contains the node value and the child nodes of each node in order.\n\nInput Constraints:\n1 <= n <= 10^3\n\nOutput Format:\nPrint the sum of all left leaves of the binary tree.\n\nInput:\n3\n2\n1 3\n3\n4\n\nOutput:\n3\n\n======\n11. Find the minimum depth of a binary tree.\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\nInput Format:\nThe first line contains the number of nodes (N) in the tree.\nThe next N lines contains the value of the nodes where the ith value is the value of the ith node.\n\nOutput Format:\nPrint the minimum depth of the tree.\n\nInput:\n5\n2\n1\n3\n4\n5\n\nOutput:\n1\n\n======\n12. Find the maximum depth of a binary tree\nGiven a binary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nInput Format:\nThe first line of input contains the number of nodes in the tree, 'n'.\nThe next 'n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n\"\"\") == 25\n\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n\"\"\") == 0\n\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n\"\"\") == 2\n\n=====Test Case 2=====\nimport xml.etree.ElementTree as etree"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('<elem>value</elem>') == 6\nassert solution('<elem attr=\"value\"><sub>child</sub></elem>') == 6\nassert solution('<data>'\n             ' <info>'\n             '   <name>name</name>'\n             '   <id>id</id>'\n             ' </info>'\n             ' <info>'\n             '   <name>name</name>'\n             ' </info>'\n              '</data>') == 6\n\ninputString = '''<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>'''\n\ninput = inputString.split('\\n')\n\nimport xml.etree.ElementTree as etree\n\nstuff = etree.fromstring(inputString)\nlst = stuff.findall('users/user')\nprint('User count:', len(lst))\nfor item in lst:\n    print('Name', item.find('name').text)\n    print('Id', item.find('id').text)\n    print('Attribute', item.get(\"x\"))\n    \nimport xml.etree.ElementTree as etree\n\ndoc = '''\n<html>\n    <body>\n        <tag>\n            <name>first tag</name>\n            <tag>\n                <name>sub-tag</name>\n            </tag>\n        </tag>\n        <tag>\n            <name>second tag</name>\n        </tag>\n    </body>\n</html>'''\n\ntree = etree.ElementTree(etree.fromstring(doc))"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == output\n\nassert solution('''') == output\nassert solution('<feed></feed>') == output\nassert solution('<feed xmlns=\"http://www.w3.org/2005/Atom\"></feed>') == output\n'''\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.0 3.0 5.0 7.0') == '90.00'\nassert solution('2.0 3.0 5.0 7.0') == '60.00'"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '90'\nassert solution('1 1 1 2 2 2') == '180'\n\"\"\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1') == '0.0'\nassert solution('2 4 6 4') == '60.0'\nassert solution('1 1 -2 2') == '180.0'\n\"\"\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0 3.0 2.0 4.0') == 45.0\nassert solution('1.0 1.0 1.0 1.0') == 0.0\nassert solution('1.0 4.0 7.0 2.0') == 120.0\nassert solution('3.0 4.0 1.0 5.0') == 180.0\nassert solution('1.0 1.0 2.0 3.0') == 90.0\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.1 1.1 1.1') == '90.00'\nassert solution('-1.1 -1.1 -1.1') == '-90.00'\nassert solution('0.0 0.0 0.0') == '0.00'\nassert solution('1.0 1.0 0.0') == '90.00'\n\"\"\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0 4.0 3.0 2.0\") == 45.0\nassert solution(\"2.0 3.0 1.0 5.0\") == 158.8333\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 3 4') == '62.5'\nassert solution('1 1 1 1') == '90'\nassert solution('0 0 0 0') == '0'\nassert solution('1 1 2 3') == '60'\n\"\"\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '14.0'\nassert solution('1 1 1 1') == '60.0'\nassert solution('-1 -4 -8 -10') == '90.0'\nassert solution('1 -1 -1 -1') == '0.0'\n\"\"\"\n\n\"\"\"\nInput Format\n\nThe first line contains an integer, n, denoting the number of coordinate pairs.\nEach of the n subsequent lines contains:\nx1\ny1\nx2\ny2\n\nOutput Format\n\nPrint a single line denoting the answer in degrees.\n\nSample Input\n\n3\n0 1 0 1\n1 1 1 1\n0 0 1 1\n\nSample Output\n\n90.0\n\"\"\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == \"45.00\"\nassert solution('1 2 -3 4') == \"-45.00\"\nassert solution('-1 -2 -3 -4') == \"-85.71\"\nassert solution('1 -1 -1 -1') == \"0.00\"\nassert solution('1 -2 3 4') == \"45.00\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0 4.0 5.0 6.0\") == \"60.00\", f\"Solution incorrect. Should be 60.00, was {solution('1.0 4.0 5.0 6.0')}\"\nassert solution(\"-1.0 -4.0 5.0 -6.0\") == \"60.00\", f\"Solution incorrect. Should be 60.00, was {solution('-1.0 -4.0 5.0 -6.0')}\"\nassert solution(\"1.0 1.0 1.0 1.0\") == \"0.00\", f\"Solution incorrect. Should be 0.00, was {solution('1.0 1.0 1.0 1.0')}\"\nassert solution(\"-1.0 -1.0 -1.0 -1.0\") == \"180.00\", f\"Solution incorrect. Should be 180.00, was {solution('-1.0 -1.0 -1.0 -1.0')}\"\nassert solution(\"-2.0 -3.0 -4.0 -5.0\") == \"90.00\", f\"Solution incorrect. Should be 90.00, was {solution('-2.0 -3.0 -4.0 -5.0')}\"\n\n=====\nThis problem was asked by Google.\n\nThe edit distance between two strings refers to the minimum number of character insertions, deletions, and substitutions required to change one string to the other. For example, the edit distance between \u201ckitten\u201d and \u201csitting\u201d is three: substitute the \u201ck\u201d for \u201cs\u201d, substitute the \u201ce\u201d for \u201ci\u201d, and append a \u201cg\u201d.\n\nGiven two strings, compute the edit distance between them.\n\n=====\nimport math\nfrom unittest import TestCase"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aiu') == 2\nassert solution('hoo') == 2\nassert solution('hihi') == 1\nassert solution('aaa') == 1\nassert solution('efef') == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaa a aaaa aaaaa zzz') == 3\nassert solution('tomma tommastere tommaaaaaa tommastere tommastere tommastere') == 36\nassert solution('wonderful wonderful wonderful wonderful wonderful wonderful') == 10\nassert solution('aaaa a aaaa aaaaa zzz') == 3\nassert solution('tomma tommastere tommaaaaaa tommastere tommastere tommastere') == 36\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 abc iu') == 3\nassert solution('2 abc iu') == 4\nassert solution('1 a ab abc abd abf iu') == 3\nassert solution('2 a ab abc abd abf iu') == 4\nassert solution('1 a ab abc abd abf iu') == 3\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 one two three five\") == 14\nassert solution(\"4 little cat\") == 10\nassert solution(\"5 map\") == 15\nassert solution(\"10 fish\") == 31\nassert solution(\"2 box\") == 3\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('these are indeed interesting, an obvious understatement, times. What say you?') == '6'\nassert solution('not multiple, of course, of 3.14. Oh, that\\'s why it\\'s called the Malthusian constant!') == '4'\nassert solution('Science is organized knowledge. You need to be a part of that organization. Join us.') == '5'\nassert solution('How interesting! I\\'m a big fan of the Malthusian Constant!') == '6'\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 a 2 b c\") == 3\nassert solution(\"2 abba cca\") == 2\nassert solution(\"2 a ab aba c aa abba bb\") == 5\nassert solution(\"2 A ab aba c aa abba Bb\") == 5\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 one two three five six seven eight') == 23\nassert solution('1 2 3 4 5') == 10\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\nhello\nwhat\nis\nyour\nfavorite\ncolor''') == 5\nassert solution('''2\ntattarrattat\nwhat''') == 4\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 abc') == '1 3', '1st example'\nassert solution('2 abc def') == '2 3', '2nd example'\nassert solution('2 a ab cd ef') == '2 5', '3rd example'\nassert solution('3 a ab cd ef gh ij') == '3 10', '4th example'\nassert solution('4 a ab cd ef gh ij kl mn op') == '4 15', '5th example'\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == \"2\"\nassert solution(\"abcba\") == \"0\"\nassert solution(\"abbcccddddeeeeedcba\") == \"10\"\nassert solution(\"yzyzyzyzyzyzyzyzy\") == \"0\"\n\nassert solution(\"AoOuoU\") == \"4\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"XXI\") == True, \"WA\"\nassert solution(\"XXX\") == False, \"WA\"\nassert solution(\"XCIX\") == True, \"WA\"\nassert solution(\"IV\") == True, \"WA\"\nassert solution(\"XIV\") == True, \"WA\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"XXI\")\nassert not solution(\"KKI\")\nassert not solution(\"CCCC\")\n\n========================\nimport re"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('MMMCMXCIX') == True\nassert solution('MMMM') == False\nassert solution('DCXXI') == True\nassert solution('MMMMDCLXVI') == True\nassert solution('I') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XL\") == True\nassert solution(\"CDXLIV\") == True\nassert solution(\"MMCDLXXXVIII\") == True\nassert solution(\"MCDLXXVI\") == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXLIII') == True\nassert solution('IV') == True\nassert solution('XIX') == False\n\nSample Input 0\n\nXLIX\nSample Output 0\n\nTrue\nExplanation 0\n\nThe input contains an integer number written in Roman characters.\n\"\"\"\n\n\nimport re\n\nregex_pattern = r\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n\nprint(str(bool(re.match(regex_pattern, input()))))\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'X'\n) == False, 'X is not a valid Roman numeral.'\n\nassert solution(\n    'I'\n) == True, 'I is a valid Roman numeral.'\n\nassert solution(\n    'II'\n) == True, 'II is a valid Roman numeral.'\n\nassert solution(\n    'III'\n) == True, 'III is a valid Roman numeral.'\n\nassert solution(\n    'XIV'\n) == False, 'XIV should not be a valid Roman numeral.'"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXLIII') == True\nassert solution('MMMCMXCIX') == True\nassert solution('LXL') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('I') == True, 'Incorrect result for I'\nassert solution('X') == True, 'Incorrect result for X'\nassert solution('C') == True, 'Incorrect result for C'\nassert solution('M') == True, 'Incorrect result for M'\nassert solution('D') == True, 'Incorrect result for D'\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('X') == False\nassert solution('XXV') == True\nassert solution('CDXXI') == False\nassert solution('MMMCMXCIX') == True\nassert solution('MMMM') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"X\") == True\nassert solution(\"XX\") == True\nassert solution(\"XL\") == True\nassert solution(\"CD\") == True\nassert solution(\"MMCDLXXVI\") == True\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 9867563654 7856483586\") == \\\n\"+91 7856 36365 4358\"\n=====Test Case=====\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport operator"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('98765432109876543210987654321') == '988765432109876543210987654321'\nassert solution('98765432109876543210') == '988765432109876543210'\nassert solution('9876 543 21 9876 543 21') == '9876 543 21 9876 543 21'\nassert solution('9876 5432 109876 5432 10') == '9876 5432 109876 5432 10'\nassert solution('9876 5432 10 9876 5432 10') == '9876 5432 109876 5432 10'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+918074XXXXXXX\") == \"+91 7874XXXXXX\"\n\nprint(solution(\"+918074XXXXXXX\"))\n\nIf you do not wish to read input as a string, you may '''use the following function on your code:\n\nimport sys\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+91 9824 561456') == '+91 9824 561456\\n'\nassert solution('93892381246') == '93892381246\\n'\nassert solution('92 123456789') == '92 123456789\\n'\nassert solution('93892381246') == '93892381246\\n'\nassert solution('93892381246') == '93892381246\\n'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('+91 88 6644 3456') == ['+91 88 6644 3456']\nassert solution('8805 5665 4646') == ['+91 8805 5665 4646']\nassert solution('9905 6644 3456') == ['+91 9905 6644 3456']\nassert solution('8856 4466 5665') == ['+91 8856 4466 5665']\nassert solution('8805 5666 4646') == ['+91 8805 5666 4646']\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n07895462130\n919875641230\n9195969878''') == '''07895462130\n9195969878\n919875641230'''\nprint(solution(input()))\n=====Test Case=====\nInput:\n3\n07895462130\n919875641230\n9195969878\n\nOutput:\n07895462130\n9195969878\n919875641230'''\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+91 8765 4532') == '+91 8765 4532'\nassert solution('91 7854 4332') == '+91 7854 4332'\nassert solution('8765 4532') == '+91 8765 4532'\nassert solution('8 7654 4323') == '+91 7654 4323'\nassert solution('7854 4323') == '+91 7854 4323'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('91 984755841') == '919847658415'\nassert solution('08987676543') == '89876765435'\nassert solution('919847658415') == '919847658415'\nassert solution('1234567890') == '1234567890'\nassert solution('9199595959') == '9999595959'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"07895462130\") == '+91 78954 62130'\nassert solution(\"919875641230\") == '+91 91988 5641230'\nassert solution(\"05895462130\") == '+91 58954 62130'\n\n=====Test Cases=====\nSample Test Cases for your code will be run against a secret testcase.\n\nTest Case 1\nInput\n3\n07895462130\n919875641230\n905895462130\nOutput\n+91 78954 62130\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 78954 62130\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 2\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 3\nInput\n2\n919875641230\n905895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 4\nInput\n4\n017895462130\n919875641230\n905895462130\n905895412830\nOutput\n+91 78954 62130\n+91 91988 5641230\n+91 58954 62130\n+91 58954 12830\nExpected\n+91 78954 62130\n+91 91988 5641230\n+91 58954 62130\n+91 58954 12830\n\nTest Case 5\nInput\n2\n919875641230\n05895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 6\nInput\n3\n919875641230\n7895462130\n91985462130\nOutput\n+91 91988 5641230\n+91 78954 62130\n+91 91985 462130\nExpected\n+91 91988 5641230\n+91 78954 62130\n+91 91985 462130\n\nTest Case 7\nInput\n2\n919875641230\n05895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 8\nInput\n2\n919875641230\n905895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 9\nInput\n3\n017895462130\n919875641230\n905895462130\nOutput\n+91 78954 62130\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 78954 62130\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 10\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 11\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 12\nInput\n2\n919875641230\n905895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 13\nInput\n2\n919875641230\n05895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 14\nInput\n2\n919875641230\n905895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 15\nInput\n2\n919875641230\n05895462130\nOutput\n+91 91988 5641230\n+91 58954 62130\nExpected\n+91 91988 5641230\n+91 58954 62130\n\nTest Case 16\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 17\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 18\nInput\n1\n017895462130\nOutput\n+91 78954 62130\nExpected\n+91 78954 62130\n\nTest Case 19\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 20\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 21\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 22\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 23\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 24\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 25\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 26\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 27\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 28\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 29\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 30\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 31\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 32\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 33\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 34\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 35\nInput\n1\n919875641230\nOutput\n+91 91988 5641230\nExpected\n+91 91988 5641230\n\nTest Case 36\nInput\n1\n9198"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"898767645\") == 898767645\nassert solution(\"928384848\") == 928384848\nassert solution(\"987654321\") == 987654321\nassert solution(\"9876 5432 10\") == 9876543210\nassert solution(\"9876 543 210\") == 9876543210\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\nArjun 70 70 70\\nMalika 52 60 62\\nMalika') == '62.00'\nassert solution('3\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarsh') == '26.50'\nassert solution('4\\nKuldeep 50 60 70\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nKuldeep') == '56.00'\n\n=====Test Case 1=====\n>>> Solution()\n62.0\n>>> Solution()\n52.0\n>>> Solution()\n26.5\n>>> Solution()\n56.0\n\nExplanation\n\n>>> Solution()\n'The average of the marks obtained by the particular student correct to 2 decimal places.'\n>>> Solution()\n'The average of the marks obtained by the particular student correct to 2 decimal places.'\n>>> Solution()\n'The average of the marks obtained by the particular student correct to 2 decimal places.'\n\n=====================================\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nHelen 67 68 69\\nMartin 70 72 73\\nAlfred 68 69 90\\nCindy 69 68 90\\nHelen\") == \"67.50\"\n=====Test Case=====\nTest Case 1:\n\nInput\n3\nKrishna 67 68 69\nArjun 70 72 73\nMalika 52 56 60\nMalika\n\nOutput\n67.50\n\nTest Case 2:\n\nInput\n4\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\n\nOutput\n26.50\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('alpha beta 3.5 1 2 3') == '3.50'\nassert solution('alpha beta 3.5 1 2 3') == '3.50'\nassert solution('alpha beta 3.5 1 2 3') == '3.50'\nassert solution('alpha beta 3.5 1 2 3') == '3.50'\nassert solution('alpha beta 3.5 1 2 3') == '3.50'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nArjun 70 68 67\\nMalika 52 56 60\\nMalika\") == '56.00'\nassert solution(\"2\\nHarsh 25 26.5 28\\nAnurag 26 28 30\") == '26.50'\n\nprint(solution(\"2\\nHarsh 25 26.5 28\\nAnurag 26 28 30\"))\n=======\n\n=======\n'''\n3. Longest Substring Without Repeating Characters\nMedium\n\n2427\n\n67\n\nAdd to List\n\nShare\nGiven a string, find the length of the longest substring without repeating characters.\n\nExample 1:\n\nInput: \"abcabcbb\"\nOutput: 3 \nExplanation: The answer is \"abc\", with the length of 3. \nExample 2:\n\nInput: \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\n\nInput: \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3. \n             Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n'''\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \n        maxLen, left, right = 0, 0, 0\n        seen = dict()\n        \n        while right < len(s):\n            if s[right] in seen:\n                # if we have seen this character, move left pointer until we see this character again\n                # i.e. we have seen this character before, and we can start again from there\n                left = max(left, seen[s[right]] + 1)\n            # no matter what, we'll add this character to the seen dictionary\n            seen[s[right]] = right\n            right += 1\n            # remember to check if we have updated maxLen variable\n            maxLen = max(maxLen, right - left)\n            \n        return maxLen\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n2 2\\n3 1') == '2.00'\nassert solution('2 3\\n1 2\\n3 1') == '1.67'\nassert solution('2 3\\n1 2\\n3 1\\n4 3') == '2.67'\nassert solution('2 3\\n1 2\\n3 1\\n4 3\\n5 2') == '2.67'\nassert solution('2 3\\n1 2\\n3 1\\n4 3\\n5 2\\n6 1') == '2.67'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nAakash 27 32\\n Harsh\\n') == '26.50'\n=====Sample Input=====\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\n=====Sample Output=====\n56.00\n\n=====Explanation=====\nMarks for Malika are [52, 56, 60] whose average is (52+56+60)/3 = 56\n\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nTom 71 68 65\\nJason 59 68 67\\nPeter 50 60 69\\nTracy 72 94') == '60.00'\n\n=====Sample Test Cases=====\nTest.assert_equals(solution('3\\nMike 19 18 63\\nJoe 28 28 73\\nAustin 51 72 94'), '72.00')"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nJeff\\t67\\nCristina\\t88\\nVincent\\t82') == \"Jeff: 75.00\"\n============================\nWrite a function solution(d) that takes a dictionary d mapping a letter to \na scrabble score as input, and returns the highest possible score a player \ncould achieve by making 7 letter words using the dictionary. Note that the \nscrabble board contains letters in uppercase and lowercase. For example, the \nletter \"A\" has a score of 1, and the letter \"b\" has a score of 3.\n\nFor this problem, you can assume that you have access to a file called \"dictionary.txt\" \ncontaining over one million English words in lowercase, one word per line. \nYou can read more about this file in the resources tab.\n\nFor the purpose of this problem, we will say that a *substring* of a string \nis a subsequence of the string. A subsequence is a sequence that can be derived \nfrom another sequence by deleting some or no elements without changing the order of the remaining elements. \nFor example, the strings \"ae\" and \"aeed\" are subsequences of \"abcde\". \nAlso, the string \"a\" is a subsequence of \"abcde\". The empty string, \"\", \nis also considered a subsequence of \"abcde\".\n\nAs a reminder, here is the definition of the score for the popular Scrabble \nsolver:\n\n\"abcde\" yields a score of 0\n\"a\" yields 2\n\"ab\" yields 3\n\"aab\" yields 4\n\"abc\" yields 5\n\"abcd\" yields 6\n\"abcde\" yields 12\n\"b\" yields 1\n\"a\" yields 2\n\"e\" yields 1\n\"d\" yields 2\n\"d\" yields 2\n\n=====Sample Input=====\ndictionary.txt\n{'a': 1, 'c': 3, 'b': 2, 'e': 1, 'd': 2, 'g': 2, 'f': 4, 'i': 1, 'h': 4, 'k': 5, 'j': 8,'m': 3, 'l': 1, 'o': 1, 'n': 1, 'q': 10, 'p': 3,'s': 1, 'r': 1, 'u': 1, 't': 1, 'w': 4, 'v': 4, 'y': 4, 'x': 8, 'z': 10}\n\n=====Sample Output=====\n19\n\n=====Challenge=====\nWrite a solution that also handles the following cases:\n\nNo dictionary file is given\nd = {}\nd[\"hello\"] = 5\nd[\"goodbye\"] = 10\n\nd = {\"hello\": 5, \"goodbye\": 10}\n\n============================\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0.5\"\nassert solution(\"3\") == \"0.67\"\n\n=====Test Case 0=====\n5\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nKrishna\nArjun\nMalika\n\n=====Test Case 1=====\n5\nAbhishek 89 90 78\nAnurag 67 100 79\nHarsh 25 26 28\nAnurag\nKrishna\nAbhishek\nHarsh\nMalika\n\n=====Test Case 2=====\n5\nRajeev 78 86 65\nArjun 70 98 63\nMalika 52 56 60\nRajeev\nArjun\nMalika\nAnurag\nHarsh\n\n=====Test Case 3=====\n5\nHarsh 78 86 65\nAnurag 70 98 63\nMalika 52 56 60\nAnurag\nHarsh\nMalika\nRajeev\n\n=====Test Case 4=====\n5\nHarsh 63 66 69\nMalika 87 94 53\nAnurag 87 90 58\nAnurag\nRajeev\nHarsh\nMalika\n\n=====Test Case 5=====\n5\nHarsh 81 82 73\nMalika 49 71 62\nAnurag 59 72 14\nMalika\nHarsh\nAnurag\nRajeev\n\n=====Test Case 6=====\n5\nHarsh 21 22 23\nMalika 49 71 62\nAnurag 59 72 14\nMalika\nHarsh\nAnurag\nRajeev\n\n=====Test Case 7=====\n5\nAbhishek 89 90 78\nAnurag 67 100 79\nHarsh 25 26 28\nAnurag\nKrishna\nAbhishek\nHarsh\nMalika\n\n=====Test Case 8=====\n5\nAnurag 67 100 79\nHarsh 25 26 28\nAnurag\nKrishna\nAbhishek\nHarsh\nMalika\n\n=====Test Case 9=====\n5\nHarsh 21 22 23\nMalika 49 71 62\nAnurag 59 72 14\nMalika\nHarsh\nAnurag\nRajeev\n\n'''\n\nn = int(input())\n\nstudent_marks = {}\n\nfor _ in range(n):\n    line = input().split()\n    name, scores = line[0], line[1:]\n    scores = list(map(float, scores))\n    student_marks[name] = scores\nquery_name = input()\nprint(format(sum(student_marks[query_name])/3,'.2f'))\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('alpha mark: 20, 30, 40\\\\nbeta mark: 30, 50, 70\\\\nbeta query: beta\\\\n') == '50.00'\nassert solution('alpha mark: 20, 30, 40\\\\nbeta mark: 30, 50, 70\\\\nbeta mark: 40, 70, 80\\\\nbeta query: beta\\\\n') == '60.00'\nassert solution('alpha mark: 20, 30, 40\\\\nbeta mark: 30, 50, 70\\\\nbeta mark: 40, 70, 80\\\\nbeta mark: 20, 30, 40\\\\nbeta query: beta\\\\n') == '60.00'\nassert solution('alpha mark: 20, 30, 40\\\\nbeta mark: 30, 50, 70\\\\nbeta mark: 40, 70, 80\\\\nbeta query: alpha\\\\n') == '0.00'\nassert solution('alpha mark: 20, 30, 40\\\\nbeta mark: 30, 50, 70\\\\nbeta query: theta\\\\n') == '0.00'\n=====Submitted By=====\nEriksson, Kristoffer\n=====Submission=====\nSubmission Result:\nTime Limit Exceeded\n'''"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Henry Davids 12 M') == 'Mr. Henry Davids\\n'\nassert solution('Mary George 45 F') == 'Ms. Mary George\\n'\nprint(solution('Henry Davids 12 M'))\nprint(solution('Mary George 45 F'))\n\nTHe return value is a string which will be printed.\nassert solution('Keshav Verma M') == 'Mr. Keshav Verma M'\nassert solution('Priyanka Kaul M') == 'Ms. Priyanka Kaul M'\nprint(solution('Keshav Verma M'))\nprint(solution('Priyanka Kaul M'))\n\n=====Problem Statement=====\nYou have a non-empty set s, and you have to execute N commands given in N lines. The commands will be pop, remove and discard.\n\nInput Format\n\nThe first line contains integer n, the number of elements in the set s.\nThe second line contains integer n, the number of commands.\nThe next n lines contains either pop, remove and/or discard commands followed by their associated value.\n\nConstraints\n\n1<=n<=100\n1<=N<=100\n\nOutput Format\n\nPrint the sum of the elements of set s on a single line.\n\nSample Input\n\n9\n7\npop\nremove 9\ndiscard 9\ndiscard 8\nremove 7\npop\ndiscard 6\nremove 5\npop\ndiscard 5\nSample Output\n\n4\nExplanation\n\nAfter completing these 7 operations on the set, we get set([4]). Hence, the sum is 4.\n\n>>> \n\n>>> \n\n>>> \n>>> \n>>> \n>>> \n\n>>> \n>>> \n>>> \n>>> \n>>> \n\n>>> \n\n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> "
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Henry Davids\\nMike Thomson\\nRobert Downey\\nJeffrey Dean\\n') == 'Mr. Henry Davids\\nMs. Mike Thomson\\nMr. Robert Downey\\nMs. Jeffrey Dean\\n'\nassert solution('H. Davids\\nM. Thomson\\nR. Downey\\nJ. Dean') == 'Mr. H. Davids\\nMs. M. Thomson\\nMr. R. Downey\\nMs. J. Dean\\n'\nassert solution('H. Davids\\nM. Thomson\\nR. Downey\\nJ. Dean') == 'Mr. H. Davids\\nMs. M. Thomson\\nMr. R. Downey\\nMs. J. Dean\\n'\nassert solution('H. Davids\\nM. Thomson\\nR. Downey\\nJ. Dean') == 'Mr. H. Davids\\nMs. M. Thomson\\nMr. R. Downey\\nMs. J. Dean\\n'\nassert solution('H. Davids\\nM. Thomson\\nR. Downey\\nJ. Dean') == 'Mr. H. Davids\\nMs. M. Thomson\\nMr. R. Downey\\nMs. J. Dean\\n'\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\nMike Thomson 20 M\\nRobert Bustle 32 M\") == \"\"\"Mr. Mike Thomson\nMs. Robert Bustle\"\"\"\nassert solution(\"2\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\") == \"\"\"Mr. Mike Thomson\nMs. Robert Bustle\nMs. Andria Bustle\"\"\"\nassert solution(\"1\\nMike Thomson 20 M\\nRobert Bustle 32 M\") == \"\"\"Mr. Mike Thomson\nMs. Robert Bustle\"\"\"\n\nSolution\n======\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Marry had a little lamb\") == \"And everywhere that Mary went.\"\nassert solution(\"Twinkle twinkle little star\") == \"How I wonder what you are!\"\nassert solution(\"Lets take the cake\") == \"Lets take the cake and eat it\"\nassert solution(\"Code\") == \"Code and Code\"\nprint(\"OK\")\n\nfrom collections import Counter\nimport operator\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\nDario Bravo\\n40\\nM\") == 'Mr. Dario Bravo\\n'\nassert solution(\"3\\nDario Bravo 40\\nPatricia Lopez 36\\nMaria Lopez 28\\n\") == 'Mr. Dario Bravo\\nMs. Maria Lopez\\nMr. Patricia Lopez\\n'\n\n=====================\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\nMike Thomson 20 M\\nRobert Bustle 32 M\") == \"Mr. Mike Thomson\\nMr. Robert Bustle\"\nassert solution(\"2\\nJudy Green 30 F\\nByron Gates 30 F\") == \"Ms. Judy Green\\nMs. Byron Gates\"\n=======\n'''"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Henry Davids 12 M') == 'Mr. Henry Davids'\nassert solution('Mary George 22 F') == 'Ms. Mary George'\n=======\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('John\\nDoe\\n30\\nM\\n') == 'Mr. John Doe'\nassert solution('Mike\\nTyson\\n35\\nM\\n') == 'Mr. Mike Tyson'\n\"\"\"\nimport unittest\nimport sys\nfrom collections import OrderedDict\nfrom collections import defaultdict"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('John Doe\\nMike William\\nElizabeth Debicki\\n') == 'Mr. John Doe\\nMs. Mike William\\nMs. Elizabeth Debicki\\n', 'Your solution is incorrect'"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nGeorge Washington 3 20 M\\nThomas Jefferson 4 35 M\") == [\n    'Mr. Thomas Jefferson', 'Ms. George Washington'\n]\n\nassert solution(\"3\\nGeorge Washington 2 20 M\\nThomas Jefferson 4 35 M\\nJefferson Davis 3 18 F\") == [\n    'Mr. Thomas Jefferson', 'Ms. George Washington', 'Mr. Jefferson Davis'\n]\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 3\") == \"1 1 2 2 3 3 1 1 2 1 2 3 1 1 3 2 1 2 3 1 1 3 2 1 2 3 1 1 3 2 1 3 1 2 2 3 1 1 3 1 2 2 3 1 1 3 1 2 3 1 2 3 1 1 3 2 2 3 1 2 3 2 1 2 3 1 3 1 2 2 2 2 1 2 3 1 1 3 2 1 1 3 1 2 3 1 2 3 1 2 3 1 3 2 2 3 2 1 2 3 2 1 3 1 2 2 2 1 1 2 3 1 1 2 3 1 1 3 1 2 2 2 1 1 2 2 1 2 3 1 2 3 2 1 2 3 1 1 2 3 2 1 1 3 2 1 1 2 2 2 1 1 3 1 1 3 1 2 3 1 1 3 1 2 2 1 2 3 2 1 2 2 1 2 2 3 2 1 2 2 3 1 1 2 3 2 1 1 3 1 1 3 2 2 3 1 1 3 1 2 2 1 2 3 1 2 2 2 1 2 3 1 2 2 2 1 2 3 2 1 2 2 2 1 1 2 2 2 1 1 2 1 1 3 2 1 1 3 2 2 2 1 2 3 1 1 2 2 2 1 1 2 2 1 1 3 1 1 3 1 2 3 1 1 3 1 1 2 1 1 3 2 1 2 3 2 1 1 3 2 2 1 1 2 2 2 2 1 1 2 2 2 1 2 3 2 1 1 3 1 1 3 1 2 3 2 1 2 2 2 1 1 3 2 2 1 1 3 1 1 2 2 2 2 1 1 3 2 1 1 1 2 3 1 1 2 3 1 1 3 2 1 1 3 2 1 1 2 3 1 2 2 2 1 1 2 2 2 1 1 3 1 2 1 2 2 1 1 1 3 2 1 1 2 2 1 1 2 3 1 1 1 1 3 1 1 2 2 1 2 1 1 2 2 2 1 1 2 3 1 1 2 2 1 2 2 2 2 1 2 1 2 3 2 1 1 3 1 1 3 2 1 1 3 1 1 2 2 2 3 2 1 2 2 2 1 1 1 2 2 2 1 2 3 2 1 1 3 1 1 3 1 1 2 2 3 1 1 1 2 3 1 1 2 2 2 1 1 3 2 1 1 1 3 2 1 2 1 1 3 2 1 2 1 1 1 3 1 1 2 1 1 2 2 1 2 3 2 2 2 1 2 2 1 1 2 2 2 1 2 2 3 1 1 2 3 2 1 1 2 3 2 1 1 1 1 2 3 2 1 2 2 2 1 1 1 2 1 1 1 1 1 3 1 1 2 2 2 2 1 1 1 2 2 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 2 1 2 2 1 1 2 2 2 1 1 1 1 2 1 2 2 1 1 1 2 2 1 1 1 1 1 2 1 2 3 1 2 2 1 2 2 2 1 1 2 3 2 1 1 2 2 1 1 2 1 1 2 1 1 2 1 2 1 1 2 2 1 1 1 1 1 2 1 2 2 1 1 1 1 1 2 1 2 2 1 1 2 2 1 1 1 1 1 2 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '''[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\nassert solution('1 2 1') == '''[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\nassert solution('4 1 4 1') == '''[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n'''\n=====Output Format=====\nPrint the list in lexicographic increasing order.\n\n======Test Case 1=======\nx = 1\ny = 1\nz = 2\nn = 3\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\n\n=====Example 2=====\nx = 1\ny = 1\nz = 2\nn = 3\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\n\n=====Input Format=====\nFour integers x, y, z and n, each on a separate line.\n\n=====Constraints=====\nPrint the list in lexicographic increasing order.\n\n======Test Case 2=======\nx = 2\ny = 2\nz = 3\nn = 3\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n\n=====Output Format=====\nPrint the list in lexicographic increasing order.\n\n======Test Case 2=======\nx = 2\ny = 2\nz = 3\nn = 3\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n\n=====Output Format=====\nPrint the list in lexicographic increasing order.\n'''"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == '[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]'\n=====Output Format=====\nPrint the list of lists in lexicographically increasing order.\n\nSample Input 0\n1\n1\n2\n3\nSample Output 0\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\n\n=====Notes=====\nThe first line contains the integer x.\nThe second line contains the integer y.\nThe third line contains the integer z.\nThe fourth line contains the integer n.\n\n=====Credit=====\nSpecial thanks to my mentor, who was kind enough to spend several hours helping me debug and learn about the solution.\n\"\"\"\n\nfrom __future__ import print_function"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2 1') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution('1 2 1 1') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order.\n\n>>> print(solution('4 3 2 1'))\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n>>> print(solution('1 2 1 1'))\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\n========================================================================================================================================================================\nSample Output:\n\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\n========================================================================================================================================================================\n\n===========LINK============\nhttps://www.hackerrank.com/challenges/list-comprehensions/problem\n\n========================================================================================================================================================================\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2 3') == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]'\nassert solution('2 2 2 1') == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]'\nassert solution('1 1 2 2') == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]'\n\nassert solution('1 1 2 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]'\n\nassert solution('4 4 4 7') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 3, 0], [3, 3, 1], [3, 3, 2], [3, 3, 3]]'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"2 2 2 4\") == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n=====Output Format=====\nPrint the permutations of the list on separate lines. Each permutation must be printed in a new line. The permutations must be printed in lexicographic increasing order.\n\nSample Input 0\n\n1 1 1 3\nSample Output 0\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n=============================================================\n'''\nimport sys"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1 2') == '0 0 0\\n1 1 0\\n0 2 0\\n0 2 1'\nassert solution('2 2 2 1') == '0 0 0\\n0 0 1\\n0 1 2\\n1 2 0\\n1 2 1\\n2 0 2\\n2 0 1\\n2 1 0\\n2 1 2'\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2 3\") == \"0 0 1 1\"\nassert solution(\"1 1 1 1\") == \"0 0 0 0\"\nassert solution(\"1 2 2 3\") == \"0 1 1 1 1\"\nassert solution(\"1 2 2 3 4\") == \"0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3,2,1,5) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2]]\n\nassert solution(2,2,2,2) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution(2,2,1,5) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nassert solution(1,1,1,1) == [[0, 0, 0]]\nassert solution(2,2,1,5) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3,2,1,5) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\nassert solution(2,2,2,1) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\nassert solution(1,3,3,1) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 2, 0], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution(3,3,3,2) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 2, 0], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution(1,1,5,3) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 2, 0], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('1 2 3') == '3 5'\nassert solution('1+2j 3+4j') == '3+5j'\nassert solution('1 2') == '3 4'\nassert solution('1+2j 3+4j') == '3+5j'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"3 4\"\n) == \"3 -4\\n3 +4\\n3 -4\\n3 +4\\n3 4\\n3 -4\\n3 4\\n3 -4\"\nassert solution(\n\"1.1 1.1\"\n) == \"1.11 +0.11i\\n1.11 -0.11i\\n1.11 +0.11i\\n1.11 -0.11i\\n1.11 1.11\\n1.11 -1.11i\\n1.11 1.11\\n1.11 -1.11i\"\n\n=======\n\n3 4\n3 -4\n3 +4\n3 -4\n3 4\n3 -4\n3 4\n3 -4\n1.1 1.1\n1.11 +0.11i\n1.11 -0.11i\n1.11 +0.11i\n1.11 -0.11i\n1.11 1.11\n1.11 -1.11i\n1.11 1.11\n1.11 -1.11i\n>>>>>>> c6bd3e3d5acf4b7f50b3424b746ad9d29ea02c92\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('1+1i') == '2.00+2.00i'\nassert solution('1-1i') == '0.00+2.00i'\nassert solution('1.5+1.5i') == '2.00+2.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"0 5\") == \"0.00+5.00i\"\nassert solution(\"0 0\") == \"0.00+0.00i\"\nassert solution(\"1 -1\") == \"0.00-2.00i\"\nassert solution(\"1 -1 -1 -1\") == \"0.00-2.00i\"\n\"\"\"\n\nimport math\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    def __add__(self, no):\n        return Complex(self.real+no.real,self.imaginary+no.imaginary)\n    def __sub__(self, no):\n        return Complex(self.real-no.real,self.imaginary-no.imaginary)\n    def __mul__(self, no):\n        return Complex(self.real*no.real-self.imaginary*no.imaginary, self.real*no.imaginary+self.imaginary*no.real)\n    def __truediv__(self, no):\n        sr, si, o_r, o_i = self.real, self.imaginary, no.real, no.imaginary\n        r = float(o_r**2 + o_i**2)\n        return Complex((sr*o_r+si*o_i)/r, (si*o_r-sr*o_i)/r)\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == expected_output\n=====\n>>>>>>> python_test_task_tmp_2_5a9a0ad88e06d7f38b86a9e83bcbd3cb9c0e7d4f\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0.00+1.00i\"\nassert solution(\"1+1i\") == \"0.00+2.00i\"\nassert solution(\"1 1\") == \"0.00+1.00i\"\nassert solution(\"0+1i\") == \"0.00+1.00i\"\nassert solution(\"0 1\") == \"0.00+1.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '5 -1.00i'\nassert solution('1 0') == '0.00+1.00i'\nassert solution('-1 0') == '0.00-1.00i'\nassert solution('0 0') == '0.00+0.00i'\n\n\"\"\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == '3.00+2.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('0 1') == '0.00+2.00i'\nassert solution('2 -1') == '3.00-2.00i'\nassert solution('2 0') == '2.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('1+1i') == '2.00+2.00i'\nassert solution('0+0i') == '0.00+0.00i'\nassert solution('-1+1i') == '0.00+2.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"0 5\") == \"5.00+0.00i\"\nassert solution(\"-1 5\") == \"-5.00+2.00i\"\nassert solution(\"1 -5\") == \"-4.00+2.00i\"\n\n\"\"\"\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        sr = self.real\n        si = self.imaginary\n        nr = no.real\n        ni = no.imaginary\n        return Complex((sr * nr + si * ni) / (nr ** 2 + ni ** 2), (si * nr - sr * ni) / (nr ** 2 + ni ** 2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real ** 2 + self.imaginary ** 2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 'cba'\nassert solution('xyz') == 'zxy'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\nassert solution(\"xaybzc\") == \"xyzabc\"\nassert solution(\"abcx\") == \"xaybzc\"\nassert solution(\"zabxc\") == \"xaybzc\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01B0\") == \"00\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"101\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"01B0\") == \"00\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"0B01\") == \"0\"\nassert solution(\"111111111111111111111111111111111111111111111\") == \"\"\nassert solution
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return stdin.replace(\"01\", \"0\").replace(\"B\", \"\")\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def testSolution(self) -> None:\n        self.assertEqual(\"00\", Solution().solution(\"01B0\"))\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01B0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1B\") == \"\"\nassert solution(\"1B0\") == \"0\"\nassert solution(\"10B\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('01B0') == '0'\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101010\") == \"101101\"\nassert solution(\"111111\") == \"\"\nassert solution(\"0110\") == \"01110\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('01B0') == '00'\n\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n-----\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\ndp[0] = 0\ndp[1] = max(arr[0], 0)\n\nfor i in range(2, n + 1):\n    dp[i] = min(dp[i - 1] + max(arr[i - 1], 0), dp[i - 2] + arr[i - 1])\n\nprint(dp[n])\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"5\\n2 1 5 2 3\") == \"5\"\nassert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"3\\n0 0 1\") == \"2\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aca\") == \"A\"\n\"\"\"\n\nimport unittest\n\nfrom collections import defaultdict"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n\nprint('Success')\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'B'\n\"\"\"\n\nfrom typing import List, Dict, Set\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    aca\n    accc\n    ca\n    \"\"\") == \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aca\\naccc\\nca') == 'A'\nassert solution('abca\\naacc\\nca') == 'B'\nassert solution('aac\\naac\\nac') == 'B'\nassert solution('aaa\\naaa\\naa') == 'C'\nassert solution('aac\\naac\\nac') == 'C'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\\naccc\\nca\\n\") == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aca\\nc\\na\\n\") == \"A\"\n\"\"\"\n\ns_a = input()\ns_b = input()\ns_c = input()\n\ns_a_cards = list(s_a)\ns_b_cards = list(s_b)\ns_c_cards = list(s_c)"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 5 6\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 7') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5 7\n''') == 'YES'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5 7') == \"YES\"\nassert solution('4 5 7') == \"NO\"\nassert solution('10 5 10') == \"YES\"\nassert solution('5 10 7') == \"NO\"\nassert solution('4 5 7') == \"YES\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"NO\"\nassert solution(\"7 5 5\") == \"YES\"\nassert solution(\"7 7 7\") == \"YES\"\n\n---\n\nWrite a function:"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"NO\"\nassert solution(\"7 5 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 7\\n\") == \"YES\"\nassert solution(\"5 7 5\\n\") == \"NO\"\n\nfrom collections import Counter\nimport numpy as np"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"6 7 5\") == \"NO\"\n\n-------------\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n\") == \"11\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '11'\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nfrom typing import Iterable, List\nimport unittest\n\nimport numpy as np\n\nfrom icontract import require, ensure\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == 11\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '7'\nassert solution('5') == '11'\nassert solution('7') == '18'\nassert solution('86') == '54782'\nassert solution('9') == '476229'"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nfrom typing import Callable\n\n\nclass LUCAS:\n    def __init__(self, n: int) -> None:\n        self.N = n\n\n    def solve(self, f: Callable) -> int:\n        return f(self.N)\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"9 14 25\") == \"108\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"100 100 100\") == \"10000\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nprint(solution(\"3 4 2\"))"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 2') == '7'\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == 7\nassert solution(\"3 4 5\") == 10\nassert solution(\"3 4 6\") == 11\nassert solution(\"6 10 5\") == 21\nassert solution(\"6 10 5\") == 21\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4\\n2') == '7'\n\"\"\"\nimport sys\n\ninput()\nprint(sum(map(int, sys.stdin.readline().split())) * 2 // 2)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n') == '11'\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 4 5') == \"13\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nA = [int(i) for i in sys.stdin.readline().strip().split()]\nresult = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        result += A[i] * A[j]\n\nprint(result % (10 ** 9 + 7))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"3\"\nassert solution(\"3\\n1 2 3\") == \"11\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2 3') == '11'\n\"\"\"\n\n\"\"\"\nGiven are N integers A_1,\\ldots,A_N.\nFind the sum of A_i \\times A_j over all pairs (i,j) such that 1\\leq i < j \\leq N, modulo (10^9+7).\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '9'\nassert solution('5\\n1 2 3 4 5') == '20'\nassert solution('3\\n1 2 3') == '6'\nassert solution('2\\n2 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom utils.number_theory.math_utils import gcd\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == \"3\\n\"\nassert solution(\"3\\n1 2 3\") == \"11\\n\"\n\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2\\n') == 'YES'\nassert solution('4 3 1\\n') == 'NO'\nassert solution('6 3 7\\n') == 'NO'\nassert solution('1 6 1\\n') == 'NO'\nassert solution('6 3 6\\n') == 'YES'\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"4 3 2\"\n) == 'YES'\nassert solution(\n\"4 5 6\"\n) == 'NO'\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == 'YES'\nprint(solution(\"4 3 2\"))\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2') == \"YES\"\n\n-----Test Case-----\n---Problem 1065A---\n4 3 2\n\n----Problem 1065B---\n4 2 1\n\n---Problem 1065C---\n4 3 1\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"6 8 2\") == \"NO\"\nassert solution(\"6 6 3\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"3 3 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 4 2\") == \"NO\"\n\"\"\"\nimport re"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3 11''') == '''30'''\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\"\n\n\n\nA, B, C = [int(n) for n in stdin.split()]\nk = int(stdin)\nmax = 0\n\nfor i in range(1, A + 1):\n    for j in range(1, B + 1):\n        for n in range(1, C + 1):\n            if max < (i + j + n) * 2:\n                max = (i + j + n) * 2\n\nprint(max)\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5 3 11\"\n) == \"30\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nassert solution(\"5 10 5\\n2\") == \"20\"\nassert solution(\"5 10 5\\n3\") == \"10\"\nassert solution(\"5 10 5\\n4\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nIf 2n > x, then n > x/2. So the sum of all x, for which 2n > x, is sum(range(1, int(n*2))).\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(r'5 3 11\\n1') == '30'\n\nimport sys"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nassert solution(\"2 1 1\\n1\") == \"2\"\nassert solution(\"1 3 2\\n2\") == \"5\"\nassert solution(\"0 0 0\\n0\") == \"0\"\nassert solution(\"5 2 3\\n1\") == \"10\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\nassert solution(\"10 5 10\\n4\\n\") == \"20\"\nassert solution(\"30 10 5\\n2\\n\") == \"150\"\nassert solution(\"10 10 5\\n3\\n\") == \"110\"\n\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aabbbcccccccc') == 'Yes'\nassert solution('aabbb') == 'No'\n\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccaaba\") == \"No\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aabbcd') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('abbcd') == 'No'\nassert solution('abbcdd') == 'No'\n\nSolution."
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str) == \"Yes\" or solution(str) == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaccaba\") == 'Yes'\nassert solution(\"abcdefg\") == 'No'\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"c\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\nassert solution(\"aaa\") == \"Yes\"\nassert solution(\"\") == \"No\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaccaba') == \"Yes\"\nassert solution('abccba') == \"No\"\nassert solution('abc') == \"Yes\"\nassert solution('a') == \"Yes\"\nassert solution('aaaaaaaaaaaaaaaa') == \"Yes\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aaaaa\") == \"Yes\"\nassert solution(\"aaaa\") == \"No\"\nassert solution(\"cccc\") == \"No\"\nassert solution(\"aaaaaaaa\") == \"No\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('cccccc') == 'Yes'\nassert solution('abbcc') == 'No'\nassert solution('zzz') == 'No'\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"abbccc\") == \"Yes\"\nassert solution(\"aaabbb\") == \"No\"\nassert solution(\"bbccddee\") == \"No\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == 3\n\n\"\"\"\n\nfrom typing import List, Set, Tuple\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\nprint(\"OK\")\n\n\"\"\"\n\nimport heapq\n\nn, k = map(int, input().split())\narr = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    arr.append((b, a))\narr.sort()\nh = []\nfor i in range(k):\n    heapq.heappush(h, arr[i][1])\n\nwhile len(h) > 0:\n    print(heapq.heappop(h))\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 1\\n\") == \"2\"\nassert solution(\"2 3\\n1 2\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\n3 4\n1 1\n2 2\n3 3\n\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\nassert solution(\"1 1\\n2 2\\n3 3\\n4 4\") == \"3\"\n\"\"\"\n\nimport sys\nfrom math import ceil\nfrom collections import Counter\nfrom heapq import heappop, heappush, heapify"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\nassert solution(\"1 2\\n2 2\\n3 3\") == \"2\"\nassert solution(\"1 1\\n2 2\\n3 3\") == \"2\"\nassert solution(\"1 1\\n2 2\\n3 3\\n5 5\\n6 6\") == \"3\"\n\"\"\"\nfrom queue import PriorityQueue"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == '3'\nassert solution('''5 4\n5 5\n1 1\n2 2\n3 3\n4 4''') == '3'\nassert solution('''1 1\n2 2\n3 3''') == '2'\n\"\"\"\nimport heapq"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n2 2\\n3 3\\n') == '3'\n\"\"\"\n\n\"\"\"\nN, K = [int(x) for x in stdin.readline().split()]\n\na = [int(x) for x in stdin.readline().split()]\n\nb = [int(x) for x in stdin.readline().split()]\n\na = sorted(a)\n\ncount = 0\n\nfor i in range(N):\n    count += a[i] * b[i]\n    if count >= K:\n        print(a[i])\n        break\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n5 5\\n6 6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 1\n2 2\n3 3\n4 4\n''') == '3'\n\nassert solution('''3 4\n1 1\n2 2\n3 3\n''') == '3'\n\nassert solution('''5 3\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '4'\n\nassert solution('''6 5\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n''') == '5'\n\nassert solution('''3 5\n1 1\n2 2\n3 3\n''') == '3'"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\nassert solution(\"1 1\\n2 2\\n3 2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('1 1\\n') == '1'\nassert solution('3 2\\n') == '2'\nassert solution('3 3\\n') == '6'\nassert solution('3 4\\n') == '10'\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n\") == 2\nprint(solution(\"2 2\\n\"))\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n0 1\") == \"2\"\nassert solution(\"2 3\\n1 0\\n0 0\") == \"4\"\n\"\"\"\n\nimport math\n\nstdin = input()\n\nn, k = list(map(int, stdin.split()))\n\narr = []\nfor _ in range(n):\n    arr.append(int(input()))\n\nnum_of_ways = 0\n\nfor i in range(0, k + 1):\n    if i == 0:\n        num_of_ways += math.factorial(k) // math.factorial(k - n)\n    else:\n        num_of_ways += math.factorial(k) // math.factorial(k - n + 1)\n\nprint(num_of_ways)"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n0 1') == '2'\nassert solution('4 2\\n1 2 3 0') == '6'\nassert solution('3 2\\n1 1 0') == '1'\nassert solution('4 1\\n1 1 1 1') == '1'\nassert solution('4 3\\n1 1 2 2') == '4'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('5 2') == '5'\nassert solution('6 2') == '6'\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"2 3\") == \"6\"\n\"\"\"\n\n\"\"\"\nLet N=n, K=k, and c_k denote the number of the possible ways to paint the balls.\n\nc_{k\u22121} = 0 for all k\nc_{k\u22121} = {N \u2212 {i \u2208 {1, 2, \u2026, k-1} } } for all k\n\nThen we can show that c_k = 0 for all k > 0.\n\nThe number of the possible ways to paint the balls is the sum of the number of the possible ways to paint the balls by painting each ball in color 0 and painting each ball in color 1. We have already proven that the answer is at most 2^{31}\u22121."
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 10 15\\n5 10 15') == '10'\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n10 15') == '10'\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys\n\ntest_input = \"\"\"20 3\n5 10 15\n\"\"\"\n\ntest_output = \"10\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 10 15') == '10'\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1) == 1\nassert solution(1, 2) == 1\nassert solution(1, 3) == 2\nassert solution(1, 4) == 3\nassert solution(1, 5) == 4\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 3\\n5 10 15\") == 10\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1, 3) == 3\nassert solution(3, 2) == 2\nassert solution(20, 3) == 6\nassert solution(3, 5) == 1\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, input_data: List[int]):\n        k, n = input_data[:2]\n        houses = input_data[2:]\n        result = 0\n        for house in houses:\n            result += house\n            result %= k\n\n        return result\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\n\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solution(self, K, N):\n        houses = [int(x) for x in stdin.readline().split()]\n        houses.sort()\n        return min(houses[-1] - houses[0], houses[-1] - houses[N - 1])\n\"\"\"\n\n\"\"\"\n    def solution(K, N):\n        houses = [int(x) for x in stdin.readline().split()]\n        houses.sort()\n        return min(houses[-1] - houses[0], houses[-1] - houses[N - 1])\n\"\"\"\n\n\nclass Solution:\n    def solution(K, N):\n        houses = [int(x) for x in stdin.readline().split()]\n        houses.sort()\n        return houses[(K - 1) % N] - houses[0]\n\n\nassert Solution().solution(20, 3) == 10\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 3\\n5 10 15') == '10'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5 2 7''') == '15', 'wrong result'\nassert solution('''1 1 1 1''') == '0', 'wrong result'\nprint('Test finished')\n\na = [1,2,3,4,5]\nb = a[3:]\n\nprint(b)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('5 5 2 7') == '14'\nassert solution('3 5 2 7') == '15'\nassert solution('5 5 2 7') == '14'\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"2 6 4 10\") == \"8\"\nassert solution(\"10 5 5 10\") == \"15\"\n\"\"\"\n\nA, B, C, D = list(map(int, input().split()))\n\nprint(max(A * C, B * D)) if A * C > B * D else print(max(A * D, B * C))\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nprint(\"Test PASSED\")"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"2 1 1 1\") == \"0\"\nassert solution(\"1 1 2 1\") == \"1\"\nassert solution(\"2 1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 2 7') == '15'\n\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"6 4 3 5\") == \"9\"\nassert solution(\"7 5 9 5\") == \"16\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '1'\nassert solution('0 0 0 0') == '0'\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 2 7') == '15'\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC\") == \"AC 3\"\nassert solution(\"AC\") == \"WA 1\"\nassert solution(\"AC\") == \"TLE 2\"\nassert solution(\"AC\") == \"RE 0\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC\") == 'AC 3'\nassert solution(\"TLE\") == 'TLE 2'\nassert solution(\"WA\") == 'WA 1'\nassert solution(\"RE\") == 'RE 0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\nAC\nTLE\nAC\nAC\nWA\nTLE\n''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('''\n6\nAC\nTLE\nAC\nAC\nWA\nTLE\n''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\nassert solution(\"AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 2\\nWA x 2\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'AC\\nTLE\\nAC\\nAC\\nWA\\nTLE'\n) == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n\nN = int(input())\n\nverdicts = ['AC', 'WA', 'TLE', 'RE']\nsolution = ''\nfor verdict in verdicts:\n    solution = solution + f'{verdict} x'+ str(N - verdicts.count(verdict)) + '\\n'\n\nprint(solution[:-1])\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nhours = int(input())\n\nhours_left_on_31 = hours - 24\nhours_left_on_30 = hours_left_on_31 - 6\nhours_left_on_29 = hours_left_on_30 - 24\n\nprint(hours_left_on_31, hours_left_on_30, hours_left_on_29)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('21') == '27'\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('21') == '27'\n\nassert solution('24') == '0'\n\nassert solution('12') == '0'\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nimport sys\n\nM = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nm = int(input())\nhours_until = (m + 11) % 12 + (m + 11) // 12\nprint(hours_until)\n\n\"\"\"\nSolution 2\n\"\"\"\n\nprint(int(input()) + (int(input()) + 11) // 12)\n\n\"\"\"\nSolution 3\n\"\"\"\n\nhours_until = ((m + 11) % 12 + (m + 11) // 12) % 24\nprint(hours_until)\n\n\"\"\"\nSolution 4\n\"\"\"\n\nm = int(input())\nhours_until = ((m + 11) % 12 + (m + 11) // 12) % 24\nprint(hours_until)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nm = int(input())"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nm = int(input().strip())"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('21') == '27'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3') == '8'\nassert solution('6 4') == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3') == '9'\nassert solution('9 9') == 'error'\nassert solution('0 0') == '0'\n\n\"\"\"\n\nfrom typing import List, Any\n\n\"\"\"\nINPUT FORMAT:\nThe first line contains the first integer, A.\nThe second line contains the second integer, B.\n\nOUTPUT FORMAT:\nPrint the output in a single line.\n\nSAMPLE INPUT:\n6 3\n\nSAMPLE OUTPUT:\n9\n\"\"\"\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"10 2\") == \"error\"\n\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A=6, B=3) == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3') == '9'\nassert solution('3 4') == '7'"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"6\"\nassert solution(\"7 4\") == \"10\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '5 3'\n) == '8'\n\nassert solution(\n    '0 6'\n) == '6'\n\nassert solution(\n    '3 4'\n) == '7'\n\nassert solution(\n    '1 4'\n) == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3') == '9'\nassert solution('1 1') == '2'\nassert solution('0 0') == 'error'\nassert solution('1 9') == 'error'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nprint(\"Test 1: Passed!\")\n\nassert solution(\"4\\n2 3 9 7\") == \"7\"\nprint(\"Test 2: Passed!\")\n\nassert solution(\"4\\n9 9 7 9\") == \"0\"\nprint(\"Test 3: Passed!\")\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nassert solution(\"6\\n2 5 6 5 1\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"11\\n1 2 3 4 5 6 7 8 9 10 11\") == \"11\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 7 9') == 7\n\"\"\"\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline().rstrip())\n\nhouses = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n\nhouses.sort()\n\ntotal_distance = houses[0] + houses[N - 1]\n\nfor i in range(N - 1):\n    min_distance = math.ceil(houses[i + 1] / 2)\n    if min_distance < total_distance:\n        total_distance = min_distance\n\nprint(total_distance)"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\nassert solution('5\\n2 3 5 7 9') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 7 9') == '7'\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\nassert solution(\"1 5\") == \"No\"\nassert solution(\"4 7\") == \"Yes\"\nassert solution(\"5 11\") == \"Yes\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n3 5\\n5 7\\n7 11\\n11 13\\n13 15\\n15 17\\n17 19\\n19 21\\n21 23\\n23 25\\n25 27\\n27 29\\n29 31\\n31 33\\n33 35\\n35 37\\n37 39\\n39 41\\n41 43\\n43 45\\n45 47\\n47 49\\n49 51\\n51 53\\n53 55\\n55 57\\n57 59\\n59 61\\n61 63\\n63 65\\n65 67\\n67 69\\n69 71\\n71 73\\n73 75\\n75 77\\n77 79\\n79 81\\n81 83\\n83 85\\n85 87\\n87 89\\n89 91\\n91 93\\n93 95\\n95 97\\n97 99\\n99 101\\n101 103\\n103 105\\n105 107\\n107 109\\n109 111\\n111 113\\n113 115\\n115 117\\n117 119\\n119 121\\n121 123\\n123 125\\n125 127\\n127 129\\n129 131\\n131 133\\n133 135\\n135 137\\n137 139\\n139 141\\n141 143\\n143 145\\n145 147\\n147 149\\n149 151\\n151 153\\n153 155\\n155 157\\n157 159\\n159 161\\n161 163\\n163 165\\n165 167\\n167 169\\n169 171\\n171 173\\n173 175\\n175 177\\n177 179\\n179 181\\n181 183\\n183 185\\n185 187\\n187 189\\n189 191\\n191 193\\n193 195\\n195 197\\n197 199\\n199 201\\n201 203\\n203 205\\n205 207\\n207 209\\n209 211\\n211 213\\n213 215\\n215 217\\n217 219\\n219 221\\n221 223\\n223 225\\n225 227\\n227 229\\n229 231\\n231 233\\n233 235\\n235 237\\n237 239\\n239 241\\n241 243\\n243 245\\n245 247\\n247 249\\n249 251\\n251 253\\n253 255\\n255 257\\n257 259\\n259 261\\n261 263\\n263 265\\n265 267\\n267 269\\n269 271\\n271 273\\n273 275\\n275 277\\n277 279\\n279 281\\n281 283\\n283 285\\n285 287\\n287 289\\n289 291\\n291 293\\n293 295\\n295 297\\n297 299') == 'Yes'\nassert solution('1 3\\n3 5\\n5 7\\n7 11\\n11 13\\n13 15\\n15 17\\n17 19\\n19 21\\n21 23\\n23 25\\n25 27\\n27 29\\n29 31\\n31 33\\n33 35\\n35 37\\n37 39\\n39 41\\n41 43\\n43 45\\n45 47\\n47 49\\n49 51\\n51 53\\n53 55\\n55 57\\n57 59\\n59 61\\n61 63\\n63 65\\n65 67\\n67 69\\n69 71\\n71 73\\n73 75\\n75 77\\n77 79\\n79 81\\n81 83\\n83 85\\n85 87\\n87 89\\n89 91\\n91 93\\n93 95\\n95 97\\n97 99\\n99 101\\n101 103\\n103 105\\n105 107\\n107 109\\n109 111\\n111 113\\n113 115\\n115 117\\n117 119\\n119 121\\n121 123\\n123 125\\n125 127\\n127 129\\n129 131\\n131 133\\n133 135\\n135 137\\n137 139\\n139 141\\n141 143\\n143 145\\n145 147\\n147 149\\n149 151\\n151 153\\n153 155\\n155 157\\n157 159\\n159 161\\n161 163\\n163 165\\n165 167\\n167 169\\n169 171\\n171 173\\n173 175\\n175 177\\n177 179\\n179 181\\n181 183\\n183 185\\n185 187\\n187 189\\n189 191\\n191 193\\n193 195\\n195 197\\n197 199\\n199 201\\n201 203\\n203 205\\n205 207\\n207 209\\n209 211\\n211 213\\n213 215\\n215 217\\n217 219\\n219 221\\n221 223\\n223 225\\n225 227\\n227 229\\n229 231\\n231 233\\n233 235\\n235 237\\n237 239\\n239 241\\n241 243\\n243 245\\n245 247\\n247 249\\n249 251\\n251 253\\n253 255\\n255 257\\n257 259\\n259 261\\n261 263\\n263 265\\n265 267\\n267 269\\n269 271\\n271 273\\n273 275\\n275 277\\n277 279\\n279 281\\n281 283\\n283 285\\n285 287\\n287 289\\n289 291\\n291 293\\n293 295\\n295 297\\n297 299') == 'No'\nassert solution('1 3\\n3 5\\n5 7\\n7 11\\n11 13\\n13 15\\n15 17\\n17 19\\n19 21\\n21 23\\n23 25\\n25 27\\n27 29\\n29 31\\n31 33\\n33 35\\n35 37\\n37 39\\n39 41\\n41 43\\n43 45\\n45 47\\n47 49\\n49 51\\n51 53\\n53 55\\n55 57\\n57 59\\n59 61\\n61 63\\n63 65\\n65 67\\n67 69\\n69 71\\n71 73\\n73 75\\n75 77\\n77 79\\n79 81\\n81 83\\n83 85\\n85 87\\n87 89\\n89 91\\n91 93\\n93 95\\n95 97\\n97 99\\n99 101\\n101 103\\n103 105\\n105 107\\n107 109\\n109 111\\n111 113\\n113 115\\n115 117\\n117 119\\n119 121\\n121 123\\n123 125\\n125 127\\n127 129\\n129 131\\n131 133\\n133 135\\n135 137\\n137 139\\n139 141\\n141 143\\n143 145\\n145 147\\n147 149\\n149 151\\n151 153\\n153 155\\n155 157\\n157 159\\n159 161\\n161 163\\n163 165\\n165 167\\n167 169\\n169 171\\n171 173\\n173 175\\n175 177\\n177 179\\n179 181\\n181 183\\n183 185\\n185 187\\n187 189\\n189 191\\n191 193\\n193 195\\n195 197\\n197 199\\n199 201\\n201 203\\n203 205\\n205 207\\n207 209\\n209 211\\n211 213\\n213 215\\n215 217\\n217 219\\n219 221\\n221 223\\n223 225\\n225 227\\n227 229\\n229 231\\n231 233\\n233 235\\n235 237\\n237 239\\n239 241\\n241 243\\n243 245\\n245 247\\n247 249\\n249 251\\n251 253\\n253 255\\n255 257\\n257 259\\n259 261\\n261 263\\n263 265\\n265 267\\n267 269\\n269 271\\n271 273\\n273 275\\n275 277\\n277 279\\n279 281\\n281 283\\n283 285\\n285 287\\n287 289\\n289 291\\n291 293\\n293 295\\n295 297\\n297 299') == 'Yes'\nassert solution('2 3\\n3 5\\n5 7\\n7 11\\n11 13\\n13 15\\n15 17\\n17 19\\n19 21\\n21 23\\n23 25\\n25 27\\n27 29\\n29 31\\n31 33\\n33 35\\n35 37\\n37 39\\n39 41\\n41 43\\n43 45\\"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 3\"\n) == \"Yes\"\n\nassert solution(\n    \"6 10\"\n) == \"No\"\n\nassert solution(\n    \"6 12\"\n) == \"No\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == 'Yes'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 3) == 'Yes'\nassert solution(4, 5) == 'No'\nassert solution(2, 2) == 'Yes'\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 3') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('1 4') == 'Yes'\nassert solution('3 3') == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 3') == 'No'\nassert solution('1 2') == 'No'\nassert solution('1 3') == 'Yes'\nassert solution('1 2') == 'Yes'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"Yes\"\nassert solution(4) == \"No\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n\") == \"Yes\"\nassert solution(\"4 7\\n\") == \"No\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\nimport math\n\nDEBUG = False\ndata = [line.strip().split() for line in sys.stdin]\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"4 1\") == \"No\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'Even'\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('1 3') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(2)) == \"Even\"\nassert solution(str(3)) == \"Odd\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Even'\nassert solution('a b') == 'Even'\nassert solution('1 1') == 'Odd'\nassert solution('1 2') == 'Even'\nassert solution('1 3') == 'Odd'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"Even\"\nassert solution(\"1 2\") == \"Even\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\") == \"Even\"\nassert solution(\"3 4\\n1 2\") == \"Odd\"\n\"\"\"\n\nimport sys\n\ninput_str = sys.stdin.readlines()\n\nfor line in input_str:\n    a, b = line.strip().split(\" \")\n    a, b = int(a), int(b)\n\n    if a*b % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"10 10\") == \"1\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6\\n\") == 2\n\"\"\"\n\nN, M = map(int, input().split())\n\nprint(N + M)\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6\\n\") == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6\\n') == 2\n\n------"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '1 2\\n3 4'\nassert solution('1 3\\n3 4') == '1 3\\n3 4'\nassert solution('1 3\\n2 2') == '1 3\\n2 2'\n'''\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n') == '1'\nassert solution('4 1\\n') == '2'\nassert solution('4 2\\n') == '2'\nassert solution('5 3\\n') == '1'\nassert solution('5 4\\n') == '1'\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6\\n') == 2\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n1 2\\n1 3\\n1 4\\n1 5\\n2 4\\n3 4\\n3 5') == '2'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">3\\n3\\n>1\\n5\\n>2\\n7\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n>2\\n8\\n>1\\n5\\n0\\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">1\\n2 1 4\\n>2\\n1 1\\n2 3\") == '6\\n9'\nassert solution(\">3\\n2 1 4\\n>2\\n1 1\\n2 3\") == '8\\n5'\nassert solution(\">1\\n2 1 4\\n>2\\n1 1\\n2 3\") == '6\\n9'\n\"\"\"\n\nimport sys\n\n\"\"\"\n>>> solution('>2\\n1 1\\n2 3')\n'8\\n5'\n>>> solution('>3\\n2 1 4\\n>2\\n1 1\\n2 3')\n'8\\n5'\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 3\") == \"7\\n6\\n5\"\nassert solution(\"4\\n1 2 3 4\\n1\\n1\") == \"9\\n0\"\nassert solution(\"3\\n1 1 1\\n1\") == \"7\\n0\"\nassert solution(\"2\\n1 1\\n2\") == \"4\\n0\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ntimes = [int(t) for t in sys.stdin.readline().split()]\nM = int(sys.stdin.readline())\ndrinks = [int(t) for t in sys.stdin.readline().split()]\n\nprefix_sum = [0] * (N + 1)\nfor i in range(1, N + 1):\n    prefix_sum[i] = prefix_sum[i - 1] + times[i - 1]\n\nfor drink in drinks:\n    prefix_sum[drink] = prefix_sum[drink - 1]\n\nfor i in range(1, N + 1):\n    print(prefix_sum[i] - prefix_sum[i - 1])\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9'\nprint('PASSED')\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9'\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\nassert solution('200 10\\n1 3 4 5 6 7 8 9') == '2000'\nassert solution('200 10\\n2 3 4 5 6 7 8 9') == '1400'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\nimport ast"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == '2000'\n\"\"\"\n\n\"\"\"\n\nnumber = int(input())\ndislikes = list(map(int, input().split()))\ndislikes = set(dislikes)\ndislikes.remove(1)\ndislikes.remove(2)\ndislikes.remove(3)\ndislikes.remove(4)\ndislikes.remove(5)\ndislikes.remove(6)\ndislikes.remove(7)\ndislikes.remove(8)\ndislikes.remove(9)\nprint(min(number, 10**6))\n\n\"\"\"\n\nnumber = int(input())\ndislikes = list(map(int, input().split()))\ndislikes = set(dislikes)\ndislikes.remove(1)\ndislikes.remove(2)\ndislikes.remove(3)\ndislikes.remove(4)\ndislikes.remove(5)\ndislikes.remove(6)\ndislikes.remove(7)\ndislikes.remove(8)\ndislikes.remove(9)\nprint(number - len(dislikes))\n\n\"\"\"\n\nnumber = int(input())\ndislikes = list(map(int, input().split()))\ndislikes = set(dislikes)\ndislikes.remove(1)\ndislikes.remove(2)\ndislikes.remove(3)\ndislikes.remove(4)\ndislikes.remove(5)\ndislikes.remove(6)\ndislikes.remove(7)\ndislikes.remove(8)\ndislikes.remove(9)\n\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1000 8\n1 3 4 5 6 7 8 9\n''') == '2000'\nassert solution('''\n2000 0\n2 2 2 2 2 2 2 2 2\n''') == '0'\nassert solution('''\n10000 10\n2 4 2 6 2 8 2 4 2\n''') == '7168'\nassert solution('''\n1234 0\n2 3 4 5 6 7 8 9\n''') == '0'\nassert solution('''\n100 10\n2 1 3 4 5 6 7 8 9\n''') == '108'\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"> 1000 0 2 <\") == \"> 2000 2 <\"\nassert solution(\"+ 100 -200 <\") == \"> 100 200 <\"\nassert solution(\"+ -1 1 <\") == \"> -1 0 <\"\n\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\nn = int(input().strip())\nk = int(input().strip())\nfor i in range(k):\n    d = int(input().strip())\n    if d in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n        print('no')\n        sys.exit()\nprint('yes')\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\nassert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n2 3 4 5 6 7 8 9\") == \"2222\"\nassert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n2 4 5 6 7 8 9\") == \"1000\"\nassert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n2 4 6 7 8 9\") == \"1000\"\nassert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n2 4 6 8 9\") == \"1000\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\nN, K = input().split()\nK = int(K)\nD = [int(i) for i in input().split()]\n\nA = set(list(range(1, 10)))\nfor i in D:\n    A.discard(i)\n\nprint(sum([int(i) for i in str(int(N) + 1)]))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('N M\\nH_1 H_2... H_N\\nA_1 B_1\\nA_2 B_2\\n:') == '2'\nassert solution('N M\\n1 2\\n2 3\\n:') == '0'\nassert solution('N M\\n1 2\\n3 4\\n:') == '2'\nassert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n:') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\nassert solution('4 4\\n4 2 2 1\\n2 3 1 3\\n3 2 4 2\\n4 2 3 3') == '2'\nassert solution('6 4\\n2 1 1 4 2\\n2 3 1 3\\n1 3\\n2 3\\n2 4') == '4'\nassert solution('6 4\\n1 1 2 1 4\\n2 3 1 3\\n1 3\\n2 3\\n2 4') == '3'\nassert solution('6 4\\n1 1 2 1 4\\n2 3 1 3\\n2 4') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n') == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == 2\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\n\"\"\"\nimport sys\nimport typing as t\n\nINPUT_PROMPT = r\"\"\"\n-----Input-----\nN M\nH_1 H_2... H_N\nA_1 B_1\nA_2 B_2\n:\nA_M B_M\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\"\n) == '2'\nassert solution(\n\"\"\"\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\"\n) == '2'\nassert solution(\n\"\"\"\n4 2\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\"\n) == '1'\nassert solution(\n\"\"\"\n4 1\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\"\n) == '0'\nassert solution(\n\"\"\"\n1 1\n1 1\n\"\"\"\n) == '1'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == 2\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == 2\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List\n\n\"\"\"\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u6700\u521d\u306b\u76ee\u7684\u5730\u307e\u3067\u79fb\u52d5\u3059\u308b\u5834\u5408\u306e\u6570\u3060\u3051\u306e\u30eb\u30fc\u30c8\u3092\u8a18\u9332\u3059\u308b\n\"\"\"\n\n\nclass Main:\n    def execute(self):\n        stdin = sys.stdin.read()\n        inputs = stdin.split('\\n')\n        n, m = list(map(int, inputs[0].split(' ')))\n        h = list(map(int, inputs[1].split(' ')))\n        a = list(map(int, inputs[2].split(' ')))\n        b = list(map(int, inputs[3].split(' ')))\n        graph = [[] for _ in range(n)]\n        for i in range(m):\n            a1, b1 = list(map(int, inputs[4 + i].split(' ')))\n            graph[a1 - 1].append(b1 - 1)\n            graph[b1 - 1].append(a1 - 1)\n\n        def dfs(graph, visited, h, v):\n            visited[v] = True\n            for i in graph[v]:\n                if visited[i] is False:\n                    if h[v] < h[i]:\n                        visited[i] = True\n                        dfs(graph, visited, h, i)\n\n        visited = [False] * n\n        ans = 0\n        for i in range(n):\n            if visited[i] is False:\n                ans += 1\n                dfs(graph, visited, h, i)\n        print(ans)\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == '10'\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n\nfrom math import log10, floor"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n'''"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\") == \"10\"\n\"\"\"\n\nimport unittest\n\nfrom collections import deque\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_is_palindrome_1(self):\n        self.assertTrue(is_palindrome(\"aba\"))\n\n    def test_is_palindrome_2(self):\n        self.assertFalse(is_palindrome(\"abcd\"))\n\n    def test_is_palindrome_3(self):\n        self.assertTrue(is_palindrome(\"a\"))\n\n    def test_is_palindrome_4(self):\n        self.assertTrue(is_palindrome(\"a_a\"))\n\n    def test_is_palindrome_5(self):\n        self."
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 10\nassert solution('1 3') == 4\nassert solution('1 4') == 7\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n---\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 0\nassert solution('0') == 1\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\n\n------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 0\nassert solution(0) == 1\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(0) == \"1\\n\"\nassert solution(1) == \"0\\n\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '0'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == 0\nassert solution(0) == 1\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"4+5\") == \"9\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"125\") == \"176\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('125') == '176'\nassert solution('123456789') == '504910622'\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('125') == '176'\nassert solution('1+2+3+4+5') == '15'\nassert solution('1+2+3+4+5+6+7+8+9') == '45'\n\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('125') == '176'\nassert solution('1023') == '7664'\n\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('125') == '176'\nassert solution('1234') == '100+34'\nassert solution('1234+5') == '100+34+5'\nassert solution('12345+6') == '100+345+6'\nassert solution('123456+789') == '100+3456+789'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"176\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"12\") == \"10\"\nassert solution(\"123\") == \"14\"\nassert solution(\"19\") == \"19\"\nassert solution(\"12+3\") == \"17\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"125\") == \"176\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"11+12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 3\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\narr = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\nsnuke = sum(arr[0:N//2])\nraccoon = sum(arr[N//2:])\nprint(abs(snuke - raccoon))\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('3\\n1 2 3') == '1'\nassert solution('3\\n5 6 7') == '1'\nassert solution('3\\n1 2 3\\n5 6 7') == '1'\n\nassert solution('5\\n3 4 5 6 7') == '2'\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 5 2') == '1'\nassert solution('1 2 3 4') == '0'\nassert solution('6 1 2 3 4 5') == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3 2\\n') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15') == 15\n\"\"\"\n\n\n\"\"\"\nSolve this task by the formula\nn(n + 1) / 2\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n\nN = int(input())\n\nprint(N * 800 - 200 * N)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15\") == \"15\"\nassert solution(\"15\\n200\") == \"15\"\nassert solution(\"15\\n200\\n15\") == \"15\"\nassert solution(\"15\\n200\\n15\\n200\") == \"15\"\nassert solution(\"15\\n200\\n15\\n200\\n15\") == \"15\"\n\"\"\"\n\n\"\"\"\nSample Input 1:\n15\n\nSample Output 1:\n15\n\nSample Input 2:\n15\n200\n\nSample Output 2:\n-1500\n\"\"\"\n\nn = int(input())\nfirst_half = 0\nsecond_half = 0\n\nfor _ in range(n):\n    x = int(input())\n    first_half += x\n\nfor _ in range(n):\n    x = int(input())\n    second_half += x\n\nprint(first_half - second_half)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n------Solution------\nimport sys\n\nfor i in range(int(sys.stdin.readline())):\n    print(2*i*200-15800)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"./tests/fixtures/3\") == \"4500\"\nassert solution(\"./tests/fixtures/5\") == \"9000\"\nassert solution(\"./tests/fixtures/6\") == \"16500\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15\\n200\\n15800') == '15800'\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n8\\n11\") == \"10\\n18\\n24\"\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aab') == 'aba'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ant') == 'abc'\nassert solution('ant') == 'abc'\nassert solution('ant') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''ant\n    \n    \n    \n    \n    \n    \n    \n    \n    ''') == 'abc'\nassert solution('''abc\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ''') == 'abc'\nassert solution('''abc\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ''') == 'abc'\n\n-----Tests-----\n> python3 solve.py <(cat input.txt)\nabc\n\n-----\n'''"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n----------------------------------------------------------------"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"2\"\nassert solution(\"100010\") == \"3\"\nassert solution(\"111011\") == \"1\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == 2\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"100010\") == 2\nassert solution(\"101101\") == 1\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(101) == 2\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"2\"\nassert solution(\"10111010\") == \"2\"\nassert solution(\"01101110\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(101) == 2\nprint(solution(stdin), end=\"\")\n\n\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000\\n3\\n10000\\n9000\") == \"48000\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'The accommodation fee is 48000 yen.'\nassert solution('1\\n1\\n10000\\n9000\\n') == 'The accommodation fee is 48000 yen.'\n\n---\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\"\"\"\n\n\"\"\"\nProblem - 5\n\nThe function accepts two arguments:\n\nn - the number of squares in a row, an integer;\nk - the number of squares in a column, an integer;\nThe function should return the number of ways to fill the squares.\n\n-----Constraints-----\n - 1 \\leq n, k \\leq 100\n - n,\\,k are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nn\nk\n\n-----Output-----\nPrint the number of ways to fill the squares.\n\n-----Sample Input-----\n3\n2\n\n-----Sample Output-----\n6\n\nThe number of ways to fill the squares is 6:\n - 00, 01, 02;\n - 10, 11, 12;\n - 20, 21, 22.\n\"\"\"\n\n\"\"\"\nProblem - 6\n\nThe function accepts an integer argument n.\nThe function returns the sum of the odd numbers between 0 and n.\n\n-----Constraints-----\n - 0 \\leq n \\leq 10^18\n - n is an integer\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the sum of the odd numbers between 0 and n.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n25\n\nThe sum of the odd numbers between 0 and 10 is 25."
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n10\\n10\\n\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\n\"\"\"\nimport re\nfrom typing import List\n\n\nclass Hotel:\n    def __init__(self, aco: str) -> None:\n        self.aco: List[int] = [int(x) for x in re.findall(r\"\\d+\", aco)]\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}(aco={self.aco})\"\n\n    def __str__(self) -> str:\n        return f\"{self.aco}\"\n\n    @property\n    def aco(self):\n        return self.__aco\n\n    @aco.setter\n    def aco(self, value: str) -> None:\n        self.__aco = [int(x) for x in re.findall(r\"\\d+\", value)]\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N\\nK\\nX\\nY') == '48000'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\nprint(\"Success\")\n\n-----\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"2 - 1\") == \"1\"\n\nassert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n'''\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nprint(solution(\"1 + 2\"))\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 + 2') == '3'\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"3 - 4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 + 2') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(solution.__annotations__[\"x\"])) == \"ABC\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000') == 'ABC'\n\nprint(solution(stdin))\n'''\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"\n\nx = int(input())\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Notes-----\n\"\"\"\n\nx = int(input())"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n'''\n\nimport sys"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = map(int, stdin.readline().split())\n\nans = min(2 * a, 2 * b, 2 * c)\nprint(ans)\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('1 2') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n') == ''\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nprint(\"Test 1 PASSED\")\n\nassert solution(\"700 600 780\") == \"1300\"\nprint(\"Test 2 PASSED\")\n\nassert solution(\"700 600 780\") == \"1380\"\nprint(\"Test 3 PASSED\")\n\nassert solution(\"700 600 780\") == \"1380\"\nprint(\"Test 4 PASSED\")\n\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 0 6\") == \"7\"\nassert solution(\"700 600 780\") == \"1380\"\nassert solution(\"10 0 1\") == \"10\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\n\"\"\"\nSolution:\ninput: a, b, c\noutput: min total price\n\n1. determine min total price with the highest price\n2. divide number of bells into two groups, \n    the highest price + the next highest price.\n3. determine min total price of those two groups\n\nbase case:\n1. if one group has 1 or 0 bells, the minimum price of that group is that group's price.\n2. if two groups have 2 or 1 bells, the minimum price of those groups is \n    the sum of their prices.\n\n\"\"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\nabc\narc\n''') == '''\n#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\nabc\narc''') == '#####\\n#abc#\\n#arc#\\n#####'\n\nassert solution('''4 5\na:b:c:d\ne:f:g:h\ni:j:k:l\nm:n:o:p\n''') == '########\\n#a#b#c#d#\\n#e#f#g#h#\\n#i#j#k#l#\\n#m#n#o#p#\\n########'\n\nassert solution('''3 4\na:b:c:d\ne:f:g:h\ni:j:k:l\n''') == '#a#b#c#d#\\n#e#f#g#h#\\n#i#j#k#l#\\n'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == \"#####\\na#abc#\\n#abc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#abc#\\n#arc#\\n#####\"\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"#####\\na#b#c#\"\nassert solution(\"arc\") == \"#####\\n#a#c#\\n#r#c#\\n#####\"\n\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == expected\n\"\"\"\n\n\"\"\"\nWrite a function:"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == \"#abc#\"\nassert solution(\"arc\") == \"#arc#\"\nassert solution(\"a\") == \"#a#\"\nassert solution(\"aa\") == \"#aa#\"\nassert solution(\"abcdefg\") == \"#abcdefg#\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n\nassert solution('2 3\\narc\\narc\\narc') == '#####\\n#arc#\\n#arc#\\n#arc#\\n#####'\n\nassert solution('1 1\\nA') == '#\\nA'\n\nassert solution('1 1\\na') == '#\\na'\n\nassert solution('4 2\\na\\nb\\nc\\nd\\ne\\nf') == '####\\na\\nb\\nc\\nd\\n#e#\\n#f#'"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\nassert solution('2 3\\nabc\\narc\\nxyz') == '#####\\n#abc#\\n#arc#\\n#xyz#\\n#####'\n\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n\nsolution('2 3\\nabc\\narc')"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1I2D1I3I') == '4'\nassert solution('1D2I1D1I2D1I') == '3'\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('IIIID') == 2\nassert solution('DDIIDI') == 2\nassert solution('IIDID') == 2\nassert solution('IDIDI') == 1\nassert solution('DDIIDID') == 1\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"IIDDIDID\") == \"2\"\nassert solution(\"IIDDIDI\") == \"3\"\nassert solution(\"IDID\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('IIDID') == '2'\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"3\\nIDID\"\n) == \"3\"\nassert solution(\n\"5\\nIDIDID\"\n) == \"4\"\nassert solution(\n\"1\\nDD\"\n) == \"1\"\n\n-----\nAfter each operation, the value of x becomes 1, 2, 1, 2 and 1, respectively. Thus, the output should be 2, the maximum value."
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\nIIDID''') == '2'\n\nassert solution('''2\nDIDI''') == '2'\n\nassert solution('''5\nIDIDI''') == '5'\n\nassert solution('''5\nDDIDID''') == '3'\n\nassert solution('''5\nIIIDDI''') == '5'"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('IIDID') == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5IIDID'\n) == 2\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11009 11332') == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11009 11332') == '4'\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''11009 11332''') == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11009 11332') == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11009 11332') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 4') == 3\n\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1\\n1 1 3\\n1 3 3') == '4'\n\"\"\"\n\n##############################################\n############## SOLUTION ######################\n##############################################"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1 4''') == '3'\nassert solution('''1 1 1''') == '1'\nassert solution('''2 2 2''') == '1'\nassert solution('''1 1 2''') == '2'\nassert solution('''1 2 3''') == '4'\n\"\"\"\n\na, b, c = map(int, input().split())\ncount = 0\n\nfor i in range(1, a + 1):\n    for j in range(1, b + 1):\n        if i == j:\n            continue\n        for k in range(1, c + 1):\n            if i == k or j == k:\n                continue\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">1<2<3<4<5\") == 3\nassert solution(\">99<98<97<96<95\") == 4"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('1 1 1') == '1'\nassert solution('10 20 30') == '3'\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"6\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == '12'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\nassert solution(\"10 7\\n
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n4 5 6') == '12'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 3 4 5''') == '12'\n\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 2\\n1 3') == '3'\nassert solution('3 2\\n1 1\\n1 1\\n1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == 12\n'''\n\nn, k = input().split()\narr = list(map(int, input().split()))\nprint(sum(arr[i] for i in range(len(arr)) if i % k == 0))\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"6\"\n\n------Solution------\n\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5\\n') == '12'\n\"\"\"\nimport re"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 1 2 4') == '12'\nassert solution('4 5 1 2 3') == '12'\nassert solution('5 3 1 2 4') == '12'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 7') == 'B'\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'A'\nassert solution('1 2 3\\n') == 'A'\nassert solution('2 4 6\\n') == 'B'\n'''"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 7') == 'B'\nassert solution('8 6 2') == 'B'\nassert solution('7 7 7') == 'A'"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n\nimport sys\n\nsys.stdin.readline().split()\n\nx, a, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n\n\"\"\"\nSolution Approach:\n===================\nConvert the string to a datetime object and replace the first four characters with 2018.\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2016/02/29\") == \"2018/02/29\"\nassert solution(\"2018/02/28\") == \"2018/02/28\"\n\"\"\"\n\nimport re\n\ns = input()\n\nmatch = re.match(r\"(\\d{4})/(\\d{2})/(\\d{2})\", s)\n\ns = re.sub(r\"^(\\d{4})/(\\d{2})/(\\d{2})\", \"2018/01/23\", s, 1)\n\nprint(s)"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline()\nprint('2018/01/' + S[0:8] + '/' + S[9:11] + S[12:])\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.strip()\n    if len(line)!= 10:\n        print(\"Error\")\n        continue\n\n    year = line[:4]\n    month = line[5:7]\n    day = line[8:]\n    print(year + \"/\" + month + \"/\" + day)\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == 'aac'\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\", \"case1,ng\"\nassert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\", \"case2,ng\"\n\"\"\"\nfrom typing import List\nfrom collections import deque\n\nstdin = input()\nwhile stdin!= \"0\":\n    stdin = input()\n    inputs = stdin.split('\\n')\n    a = int(inputs[0])\n    strings = inputs[1:]\n    string_len = len(strings[0])\n    ans = []\n    for i in range(a):\n        check = False\n        # ans.append('')\n        for j in range(a):\n            if not check:\n                for k in range(string_len):\n                    if strings[j][k]!= strings[i][k]:\n                        break\n                else:\n                    check = True\n                    ans.append(strings[i])\n                    break\n        if not check:\n            for k in range(string_len):\n                if strings[i][k]!= strings[i][0]:\n                    break\n            else:\n                ans.append(strings[i])\n\n    ans.sort()\n    print(ans[0])\n\n    stdin = input()\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"aac\"\n\n----"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\") == \"5\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"15\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"25\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\nassert solution(\"2\\n35 20\\n19 21\") == \"2\"\nassert solution(\"3\\n35 20\\n19 21\\n16 22\") == \"2\"\nassert solution(\"4\\n35 20\\n19 21\\n16 22\\n13 23\") == \"4\"\nassert solution(\"5\\n35 20\\n19 21\\n16 22\\n13 23\\n9 24\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1\\n24 30\"\n) == \"7\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n24 30\\n\") == \"7\"\n\"\"\"\n\nn = int(input())\nlist_n = []\nfor i in range(n):\n    l, r = [int(i) for i in input().split()]\n    list_n.append([l, r])\nlist_n.sort()\nlist_occupied = [False]*100000\n\nans = 0\nfor i in range(n):\n    for j in range(list_n[i][0], list_n[i][1]+1):\n        if list_occupied[j] == False:\n            ans += 1\n            list_occupied[j] = True\nprint(ans)\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n1 2\n3 4\n''') == '2'\nassert solution('''4\n1 2\n3 4\n5 6\n7 8\n''') == '4'\nassert solution('''5\n1 2\n3 4\n5 6\n7 8\n9 10\n''') == '5'\nassert solution('''1\n2 2\n''') == '1'\nassert solution('''5\n7 14\n''') == '0'\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n\nn = int(input())\na = [input().split() for _ in range(n)]\ncount = 0\nfor i in range(n):\n    a[i][0] = int(a[i][0])\n    a[i][1] = int(a[i][1])\n    count += a[i][0] - a[i][1] + 1\nprint(count)"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n3 4') == '6'\nassert solution('3 4\\n2 2') == '1'\n'''"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '6'\n\n----"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n\nn, m = map(int, input().split())\nprint(n*m*2)"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"6\"\nassert solution(\"3 10\") == \"24\"\nassert solution(\"5 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == 6\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\"\n\n\"\"\"\nPROBLEM STATEMENT:\n\nGiven integers n and m.\n\nThe task is to find the number of blocks in K-city.\n\nA block in K-city is denoted by L. Each street in K-city can be numbered from 1 to n. Street numbers are arranged in a circle, i.e.,\n\n1\n2\n.\n.\n.\nn\n2\n3\n\nEach street can be numbered from 1 to m. Street numbers are arranged in a circle, i.e.,\n\n1\n2\n3\n.\n.\n.\n.\nm\n1\n2\n\nIt is guaranteed that m < n.\n\nConstraints:\n - 2 \u2264 n, m \u2264 100\n\nSample Input:\n 3 4\n\nSample Output:\n 6\n\nExplanation:\n There are six blocks, as shown below:\n\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == 6\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\na, b = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Possible\"\n\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n\nA,B = input().split(' ')\nA = int(A)\nB = int(B)\n\na = A // 2\nb = B // 2\n\nprint(str(a+b) +'Possible') if a + b >= A + B else print('Impossible')\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n\") == \"Possible\"\n\"\"\"\n\nfrom collections import Counter\n\nA, B = [int(x) for x in stdin.split()]\n\ncnt = Counter(A + B)"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Impossible'\nassert solution('3 2') == 'Impossible'\nassert solution('1 1') == 'Impossible'\nassert solution('3 3') == 'Possible'\nassert solution('7 3') == 'Possible'\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('2 3') == 'Impossible'\n\nimport numpy as np\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('4 6') == 'Impossible'\n\n----\n<b>Small Problem #2</b>:\nSnuke has a cookie jar containing N cookies. He has to give them to three friends, such that each of them will get a unique number of cookies.\n\nGiven N, determine if there is a way to give them cookies in such a way that each friend will get a unique number of cookies.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - N is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint Possible if there exists a way to give cookies to three friends, otherwise, print Impossible.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\nPossible\n\nIf Snuke gives 4 cookies, each friend will get one of them.\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('coder') == 'atcoder'\nassert solution('ctcoder') == 'ctcoder'\nassert solution('tctcoder') == 'tctcoder'\nassert solution('tcctcoder') == 'tctcoder'\nassert solution('tctccoder') == 'tctccoder'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == expected\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?t???c???') == 'atcoder'\nassert solution('?tc???') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('coder') == 'atcoder'\nassert solution('cod?er') == 'atcoder'\nassert solution('coder') == 'atcoder'\nassert solution('cod?er') == 'atcoder'\nassert solution('cod?er') == 'atcoder'\n\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"coder\") == \"atcoder\"\nassert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"?tc?????\") == \"UNRESTORABLE\"\nassert solution(\"?t?t????t\") == \"UNRESTORABLE\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('?tc????') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\n\"\"\"\n\n\"\"\"\nfrom itertools import combinations, permutations\n\ns = stdin.split('\\n')\ns1 = s[0]\ns2 = s[1]\n\nm = set()\n\nfor i in range(len(s2) + 1):\n    for j in combinations(s2, i):\n        if s2.startswith(j):\n            m.add(j)\nm = sorted(m, key=lambda x: (len(x), x))"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"coder\") == \"coder\"\n\"\"\"\nimport re"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"atcoder\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"coder\") == \"coder\"\nassert solution(\"?!?!?!\") == \"UNRESTORABLE\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    2002\n    2017\n    \"\"\"\n) == \"\"\"\n2032\n\"\"\"\nprint('Test passed')\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2002\\n2017') == '2032'\n\n----\n2\n200\n2000\n1000\n\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2002\\n2017') == '2032'\n\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2002\\n2017') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1.5\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"0 2\") == \"1\"\n\"\"\"\nimport sys\n\nnums = input().strip().split()\n\nr = float(nums[0])\ng = float(nums[1])"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2002,2017\") == \"2032\"\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2002\\n2017') == '2032'\nassert solution('2007\\n2017') == '2557'\nassert solution('2007\\n2020') == '2557'\nassert solution('2007\\n2025') == '2557'\nassert solution('2007\\n2030') == '2557'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\"\n\nimport math\n\na, b = [int(i) for i in stdin.split('\\n')]\n\nprint((a + b) / 2)"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\n----\n\n>>>\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(string) == expected_result\n\"\"\"\n\nimport sys\n\nassert (solution(string) == expected_result)\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\n------Sources------\nhttp://www.cs.mcgill.ca/~aassaf9/python/algorithm_problems/algo_complexities.html\n\nhttps://www.hackerearth.com/practice/basic-programming/input-output/basics-of-input-output/practice-problems/algorithm/comparing-strings/\n\"\"\"\nimport sys"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\n\"\"\"\nfrom typing import List\n\nimport re\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'TLE'\nassert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n'''\n\nfrom sys import stdin, stdout\n\nstdin = open(\"test.txt\", \"r\")\n\nm, n, t = map(int, stdin.readline().split())"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 10001 6\") == \"AC\"\nassert solution(\"100000000 2 2\") == \"AC\"\nassert solution(\"100000000 4 2\") == \"AC\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\n\"\"\"\n\nimport sys\n\nfor l in sys.stdin:\n    m, n, t = [int(x) for x in l.split()]\n    \n    if t > 6 or n > 10001:\n        sys.stdout.write(\"TLE\\n\")\n        continue\n\n    if m <= n ** 4:\n        sys.stdout.write(\"AC\\n\")\n        continue\n\n    if m > n ** 2:\n        sys.stdout.write(\"TLE\\n\")\n        continue\n\n    sys.stdout.write(\"AC\\n\")\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''100000000 500 3''') == 'TLE'\nassert solution('''100000000 50 3''') == 'AC'\nassert solution('''100000000 10001 5''') == 'TLE'\nassert solution('''100000000 10000 5''') == 'AC'\nassert solution('''19931568 1000000 6''') == 'TLE'\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0''') == '''4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n'''\n\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 8\\\\n4 0 4 4\\\\n16 16 16 16\\\\n32 16 16 32\\\\n0\") == \"4 4 8 0\\\\n8 4 0 0\\\\n32 32 0 0\"\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n') == '4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List, Dict, Tuple, Iterable, Set, TypeVar, Generic, Optional, IO\n\n\nclass Tile(object):\n    \"\"\"Represents a tile of 2048 game.\"\"\"\n\n    def __init__(self, num: int, x: int, y: int, flip: bool = False):\n        self.num = num\n        self.x = x\n        self.y = y\n        self.flip = flip\n\n    def __str__(self) -> str:\n        return str(self.num)\n\n    def __repr__(self) -> str:\n        return 'Tile(' + self.num.__str__() + ','+ str(self.x) + ','+ str(self.y) + ')'\n\n    def __hash__(self) -> int:\n        return hash((self.num, self.x, self.y, self.flip))\n\n    def __eq__(self, other: 'Tile') -> bool:\n        return self.num == other.num and self.x == other.x and self.y == other.y and self.flip == other.flip\n\n    def __ne__(self, other: 'Tile') -> bool:\n        return not self.__eq__(other)\n\n\nclass Board(object):\n    \"\"\"Represents a 2048 board.\"\"\"\n\n    def __init__(self, tiles: List[Tile], score: int = 0, max_tile: int = 0):\n        self.tiles = tiles\n        self.score = score\n        self.max_tile = max_tile\n\n    def __str__(self) -> str:\n        s = \"\"\n        for i in range(4):\n            for j in range(4):\n                if i == 0:\n                    s += str(self.tiles[i + (j * 4)])\n                elif self.tiles[i + (j * 4)].num!= 0:\n                    s += \" \" + str(self.tiles[i + (j * 4)])\n                else:\n                    s += \" \"\n            s += '\\n'\n        return s\n\n    def __repr__(self) -> str:\n        return 'Board(' + str(self.tiles) + ','+ str(self.score) + ','+ str(self.max_tile) + ')'\n\n    def __hash__(self) -> int:\n        return hash((self.tiles, self.score, self.max_tile))\n\n    def __eq__(self, other: 'Board') -> bool:\n        return self.tiles == other.tiles and self.score == other.score and self.max_tile == other.max_tile\n\n    def __ne__(self, other: 'Board') -> bool:\n        return not self.__eq__(other)\n\n    def to_tuple(self) -> Tuple[int, List[Tile]]:\n        return self.score, [tile.num for tile in self.tiles]\n\n    @staticmethod\n    def from_tuple(score: int, tiles: Iterable[int]) -> 'Board':\n        return Board([Tile(tile, i % 4, math.floor(i / 4)) for i, tile in enumerate(tiles)], score, max(tiles))\n\n\nclass Game(object):\n    \"\"\"Represents a 2048 game.\"\"\"\n\n    def __init__(self, stdin: IO = sys.stdin, stdout: IO = sys.stdout):\n        self.stdin = stdin\n        self.stdout = stdout\n        self.board = Board([Tile(0, 0, 0) for i in range(16)], 0, 0)\n        self.log: List[str] = []\n\n    def __str__(self) -> str:\n        return self.board.__str__()\n\n    def __repr__(self) -> str:\n        return 'Game(' + str(self.board) + ')'\n\n    def move(self, direction: int) -> None:\n        \"\"\"Move the board in the specified direction.\"\"\"\n        if direction == 0:\n            for i in range(4):\n                self.merge(self.move_row(self.board.tiles, 0, 1 if i % 2 == 0 else -1))\n        elif direction == 1:\n            for i in range(4):\n                self.merge(self.move_col(self.board.tiles, 0, 1 if i % 2 == 0 else -1))\n        elif direction == 2:\n            for i in range(4):\n                self.merge(self.move_row(self.flip_tiles(self.board.tiles), 0, 1 if i % 2 == 0 else -1))\n        else:\n            for i in range(4):\n                self.merge(self.move_col(self.flip_tiles(self.board.tiles), 0, 1 if i % 2 == 0 else -1))\n\n    def move_row(self, tiles: List[Tile], x: int, y: int) -> List[Tile]:\n        \"\"\"Move the specified row of the board.\"\"\"\n        return [tile for tile in tiles if tile.x == x]\n\n    def move_col(self, tiles: List[Tile], x: int, y: int) -> List[Tile]:\n        \"\"\"Move the specified column of the board.\"\"\"\n        return [tile for tile in tiles if tile.y == y]\n\n    "
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \"2 16 8 4\\n4 0 4 0\\n2 64 32 4\\n0 0 2048 64\\n\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 8 16 32 64 128 256 512 1024 2048\") == \"4 8 0 0 0\"\nassert solution(\"2 0 0 2 4 16 8 2\") == \"4 16 8 0 0\"\nassert solution(\"2 4 8 16 32 64 128 256 512 1024 2048\") == \"4 8 2 0 0 0 0\"\nassert solution(\"2 4 8 16 32 64 128 256 512 1024 2048 2\") == \"4 8 2 0 0 0 0 2\"\nassert solution(\"2 4 8 16 32 64 128 256 512 1024 2048 2\") == \"4 8 2 0 0 0 0 2\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n0\\\\n\") == \"4 0 0 0\\\\n4 16 8 2\\\\n2 64 32 4\\\\n2048 64 0 0\\\\n\"\nassert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n1\\\\n\") == \"2 16 8 4\\\\n4 64 32 4\\\\n2 1024 64 0\\\\n1024 0 0 0\\\\n\"\nassert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n2\\\\n\") == \"0 0 0 4\\\\n4 16 8 2\\\\n2 64 32 4\\\\n0 0 2048 64\\\\n\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.grid = None\n        self.moves = None\n\n    def input(self):\n        while True:\n            try:\n                self.grid = tuple(\n                    [int(x) if int(x)!= 0 else 0 for x in input().split()])\n                self.moves = int(input())\n            except:\n                break\n\n    def output(self):\n        if self.moves == 0:\n            return''.join(map(str, self.grid))\n        else:\n            self.move()\n\n    def move(self):\n        grid = self.grid\n        new_grid = [0]*4\n        for i in range(4):\n            new_grid[i] = [0]*4\n            for j in range(4):\n                new_grid[i][j] = 0\n        for i in range(4):\n            for j in range(4):\n                value = grid[i][j]\n                if value:\n                    if i-1>=0 and j-1>=0 and grid[i-1][j] == value and grid[i][j-1] == value:\n                        new_grid[i-1][j-1] += value + grid[i][j]\n                        new_grid[i][j] = 0\n                    else:\n                        new_grid[i][j] += value\n\n        self.grid = tuple(tuple(x) for x in new_grid)"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H2OC100H 1\") == \"0\"\nassert solution(\"H2O 3\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H2 O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import chain\nfrom re import findall\nfrom typing import Dict, Iterable, List, Match, NamedTuple, Tuple"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H2OC100H\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H2O\") == \"0\"\nassert solution(\"H2\") == \"1\"\nassert solution(\"H2O2H2O\") == \"4\"\nassert solution(\"CH3OH\") == \"1\"\nassert solution(\"C2H4O2\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H2 O\") == \"0\"\nassert solution(\"C2 H6 O\") == \"6\"\nassert solution(\"C3 H8\") == \"6\"\nassert solution(\"C4 H10 O\") == \"12\"\nassert solution(\"C6 H14 OCH2O 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\nH2O 2\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\nCH3OH 1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\nC6H14 10\nC5H10\n\"\"\"\n) == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(H2O) == 0\nassert solution(CO2) == 2\nassert solution(H2O2) == 2\nassert solution(H2O3) == 3\nassert solution(C2H6) == 6\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == 'PASS'\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == 'FAIL'\nassert solution(\"ABC HAPPYBIRTHDAY\") == 'FAIL'\nassert solution(\"SECRET SOMECHORESARETOUGH\") == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[ { ((())) } ] () {}') == '] 20'\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () () } } ] ()\") == \"ok so far\"\nassert solution(\"[ { ((())) } ] ()\") == \"]\"\nassert solution(\"[ { ((())) } ] ()\") == \"ok so far\"\nassert solution(\"[ { ((())) } ] ()\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n([] [] ]\\n') == ']'\nassert solution('13\\n(([] [[]] ())\\n') == 'ok so far'\nassert solution('21\\n[ { { () () () () } } ]\\n') == ']'\nassert solution('27\\n[ { [[()]] (({})) } ] () {}\\n') == 'ok so far'\nassert solution('64\\n[ [[[[]]]] ]') == ']'\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[ { { () () () () } } ] () {}') == '] 20'\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('([ [] ])\\n([])') == ']'\nassert solution('((([[])))') == 'ok so far'\nassert solution('())\\n([])') == ')'\nassert solution('((()))\\n()') == ')'\n\nassert solution('([] [] ))\\n([])') == ']'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"([] [] )\") == \"]\"\nassert solution(\"([][])\") == \"]\"\nassert solution(\"[ { { ( ) ) } ]\") == \"]\"\nassert solution(\"[ { (( ) ) } ]\") == \"]\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == ']'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"([] [] ]\") == ']'\nassert solution(\"(([] [[]] ())\") == 'ok so far'\nassert solution(\"[ { { () () () () } } ]\") == ']'\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == 'ok so far'\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == 'ok so far'\n\"\"\"\n\nimport re\nimport sys\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"([] [] ]\") == \"] 2\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"] 20\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n\"\n    \"apple\\n\"\n    \"extra\\n\"\n    \"apple\\n\"\n) == 'Player 2 lost'\n\nassert solution(\n    \"2\\n\"\n    \"apple\\n\"\n    \"neat\\n\"\n) == 'Player 1 lost'\n\nassert solution(\n    \"5\\n\"\n    \"apple\\n\"\n    \"ear\\n\"\n    \"real\\n\"\n    \"letters\\n\"\n    \"style\\n\"\n) == 'Fair Game'\n\n\"\"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\napple\\neat\\nneat\\ntea\") == \"Fair Game\"\nassert solution(\"2\\napple\\nextra\") == \"Player 1 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\napple\n\"\"\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\n\"\"\"\n\n\"\"\"\nPrints a single integer denoting the person who lost.\n\"\"\"\n\nN = int(input())\n\nlst = [input() for _ in range(N)]"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\neat\\napple\\n\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple\\n') == 'Player 1 lost'\nassert solution('2\\napple\\nneat\\napple\\n') == 'Player 2 lost'\nprint('Passed!')\n\n----------------------------------------------------------------------"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\n\"\"\") == \"Fair Game\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"\"\"3\napple\nextra\napple\n\n\"\"\") == \"Player 1 lost\"\nprint(\"Test 2 Passed\")\n\nassert solution(\"\"\"2\napple\nneat\n\n\"\"\") == \"Player 2 lost\"\nprint(\"Test 3 Passed\")\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\n\nprint(solution(\"1000\\n*\\n100\"))\nprint(solution(\"10000\\n+\\n10\"))\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 * 100') == '100000'\nassert solution('1000 + 100') == '1010'\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1000\\n*\\n100\"\n) == \"100000\"\nassert solution(\n    \"10000\\n+\\n10\"\n) == \"10010\"\nassert solution(\n    \"10\\n+\\n1000\"\n) == \"1010\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n+\\n1\\n') == '2'\nassert solution('1\\n*\\n1\\n') == '1'\nassert solution('1\\n*\\n10\\n') == '10'\nassert solution('1\\n+\\n10\\n') == '11'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1000\n*\n100\n''') == '100000'\nassert solution('''1000\n+\n100\n''') == '1010'\nassert solution('''10\n+\n1000\n''') == '1010'\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Callable\n\nimport pytest"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 * 100\") == \"10000\"\nassert solution(\"10 + 1000\") == \"1010\"\nassert solution(\"10 * 10 + 10 * 10\") == \"101010\"\nassert solution(\"100 + 1 * 1000 * 1000 + 1\") == \"10101010\"\nassert solution(\"1 + 2 * 3 + 4 * 5 + 6\") == \"231\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 * 100') == '1000000'\nassert solution('10 + 1000') == '1010'\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000* 100\") == \"100000\"\nassert solution(\"10000+ 10\") == \"1010\"\nassert solution(\"10+ 1000\") == \"1010\"\nassert solution(\"100+ 1000\") == \"1010\"\nassert solution(\"100* 1000\") == \"100000\"\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 * 100\") == \"100000\"\nassert solution(\"10000 + 10\") == \"1010\"\n\n'''"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\nfrom enum import Enum\nfrom random import randint, shuffle\n\n\nclass Shuffle(Enum):\n    IN = 1\n    OUT = 2\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 out\n8 in\n52 out''') == '3\\n6'\n\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\nprint('The solution is correct!')\nYou've finished your first mission. Now you're going to do a similar one - go on a wonderful adventure in the world of galaxy!\n\nA certain amount of gas is stored in a network of pipes connecting various planets. The network of pipes is modeled as a graph. Each pipe has a length and a weight.\n\nYou are currently located on the planet of your choice. You can go anywhere in the galaxy, including to other planets.\n\nYour spaceship is currently located on the planet Cygnus.\n\nYou are carrying some amount of gas.\n\nYou have to reach the planet of your choice. However, the amount of gas you have is not enough to reach the planet.\n\nYou have to fill your tank with gas by visiting the planets.\n\nEvery planet has a station where you can refill the amount of gas in your tank. The station has a limited amount of fuel. Your current tank size is 100 units.\n\nYou have to visit as many planets as possible. To visit a planet, you have to fill your tank with fuel.\n\nFor each trip to a planet, you can refill your tank with a station.\n\nOutput the minimum number of trips needed to visit all planets.\n\nSample Input:\n0 3 0 5\n0 0 0\nSample Output:\n4\n\nSample Input:\n0 0 0 0\n2 2 2\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n3\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 1 0 5\n0 3 0\nSample Output:\n4\n\nSample Input:\n2 1 0 5\n1 1 1\nSample Output:\n5\n\nSample Input:\n0 2 0 5\n0 3 0\nSample Output:\n5\n\nSample Input:\n0 2 0 5\n0 3 0\nSample Output:\n5\n\nSample Input:\n0 2 0 5\n0 3 0\nSample Output:\n5\n\nSample Input:\n0 1 0 5\n0 0 0\nSample Output:\n4\n\nSample Input:\n2 1 0 5\n1 1 1\nSample Output:\n5\n\nSample Input:\n2 1 0 5\n1 1 1\nSample Output:\n5\n\nSample Input:\n2 1 0 5\n1 1 1\nSample Output:\n5\n\nSample Input:\n2 1 0 5\n1 1 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 1 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 1 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n0 1 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n1 0 1 5\n0 0 1\nSample Output:\n5\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n0 0 0\nSample Output:\n0\n\nSample Input:\n0 0 0 0\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\nimport string"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint(solution(\"menolaxios mox\"))\nprint(solution(\"alemaxe maxos\"))\nprint(solution(\"pamoli toxes\"))\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(18) == 'yes'\nassert solution(2019) == 'no'\nassert solution(2020) == 'yes'\nprint('All tests passed.')\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n\nyear = int(input())"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'yes'\nassert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == '1820000'\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nprint(solution(\"4 0 0 0 4 0 0 0 0 4\"))"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\n\nimport sys\nfrom typing import Dict, List\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == '64'\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\n------Problem Description-----\nThis is a contest problem. In this contest, your team is presented with a problem set of $N$ problems. Each problem is given a difficulty level (out of $N$ possible levels). The problems are assigned to a team and your team is expected to solve the problems in a specific way.\n\nA team can solve any problem they want, but in the contest, the team that solves the problem with the higher difficulty level will get a higher score.\n\nBased on the difficulty levels of the problems, the contest organizer will pick a contest strategy and the team that follows the contest strategy will win the contest.\n\nFor example, in a $N$ problem set with difficulty levels [A,B,C,D,E,F,G,H,I,J] and assuming the contest organizer is following the \u201cFirst to Solve Problem [A/B/C/D/E/F/G/H/I/J]\u201d strategy, the following happens:\n\nTeam A solves problem 0, then, problems 1,2,3,4,...,10 and 11, then problems 11,12,13,...,20,21,22,23,24,25,26,27,28,29,30\nTeam B solves problem 1, then, problems 2,3,...,10,11,12,13,...,20,21,22,23,24,25,26,27,28,29,30,31\nTeam C solves problem 2, then, problems 3,4,...,10,11,12,13,...,20,21,22,23,24,25,26,27,28,29,30,31,32\n...\nTeam J solves problem 25, then, problems 26,27,...,30,31,32\n\nWhen the contest ends, team A has $N = 25$ problems solved and team B has $N = 25$ problems solved, in a total of $N = 25$ problems. If team A wins the contest, then team A gets $15\\times N = 750$ points and team B gets $0$ points.\n\nIn the case of a tie, team A gets $750/2 = 375$ points and team B gets $375/2 = 150$ points.\n\nNote that if a team has more than $N$ problems solved during the contest, then its bonus points are added to the contest winner\u2019s points.\n\n----Constraints----\n1 <= N <= 13\n0 <= p <= N-1\n0 <= A[i] <= 9999\n\n----Output Format----\nPrint two integers $Num\\_ AC$ and $Penalty\\_ Time$ separated by a single space in one line.\n\n$Num\\_ AC$ is the highest number of problems that your team can solve and $Penalty\\_ Time$ is the lowest penalty minutes that your team can get in order to solve $Num\\_ AC$ problems in this $300$ minutes ACM ICPC if your team insists to solve problem $p$ first from the start of the contest and then use the remaining time to work on the other $N-1$ problems.\n\nFor the example scenarios above, if your team decides to solve problem $l$ first followed by $k$, then your team still solves $Num\\_ AC = 2$ Accepted problems, but with the total penalty of $270+300 = 570$ minutes.\n\n----Examples----\nSample Input 1:\n7 0\n30 270 995 996 997 998 999\nSample Output 1:\n2 330\n\nSample Input 2:\n7 1\n30 270 995 996 997 998 999\nSample Output 2:\n2 570\n\nSample Input 3:\n7 2\n30 270 995 996 997 998 999\nSample Output 3:\n0 0\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"7 0\\n30 270 995 996 997 998 999\"\n) == \"2 330\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\nprint(solution(stdin))\n\n-----Problem Link-----\nhttps://kattis.com/contests/icpc/submissions/18818786\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == \"2 330\"\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\"\"\"\nimport itertools\n\nstdin = \"\"\"7 0\n30 270 995 996 997 998 999\"\"\"\nstdin = stdin.splitlines()\n\nn, p = [int(x) for x in stdin[0].split()]\n\nestimations = [int(x) for x in stdin[1].split()]\n\nprint(n - 1, n - 1 + min(itertools.accumulate(reversed(estimations))))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nprint(solution(stdin_lines))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\nprint('The local tests are done. Click on \"Check\" for more details.')\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('./sample_input_1.txt').read()) == '2 330'\nassert solution(open('./sample_input_2.txt').read()) == '0 0'\nassert solution(open('./sample_input_3.txt').read()) == '2 570'\nassert solution(open('./input.txt').read()) == '2 535'\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n7 0\n30 270 995 996 997 998 999\n    \"\"\"\n) == \"2 330\"\n\nassert solution(\n    \"\"\"\n7 1\n30 270 995 996 997 998 999\n    \"\"\"\n) == \"2 570\"\n\nassert solution(\n    \"\"\"\n7 2\n30 270 995 996 997 998 999\n    \"\"\"\n) == \"0 0\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\n\"\"\"\n\nN, p = [int(i) for i in stdin.strip().split(\" \")]\nestimations = [int(i) for i in stdin.strip().split(\"\\n\")[1:]]\ntotal_penalty_time = 0\nmax_problems = 0\nfor i in range(N):\n    total_penalty_time += min(estimations[i], 300)\n    max_problems = max(max_problems, i)\n    total_penalty_time += sum(estimations[i + 1 :])\nprint(max_problems, total_penalty_time)\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abbaabba') == 2\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbaabbaabba') == 2\n\"\"\"\n\n\"\"\"\nFind the smallest k such that it is k-periodic.\n\nSolution 1\n\nFinding a k that is k-periodic is equivalent to finding the largest k such that there exists a length-n string for which all of the substrings of the form \"s[k:n]\" are equal. So, we need to find the largest k for which a length-n string exists for which all of the substrings are equal. We can do this in O(n) time using the pigeonhole principle.\n\nSo, we iterate through all lengths of strings from 1 to n, keeping track of the longest k such that all substrings have equal last characters. The value of k will be that which maximizes the last characters we encounter in a string.\n\nTime Complexity: O(n)\n\nSolution 2\n\nThis solution is equivalent to the first solution, but it uses a bitwise XOR instead of iterating over the strings.\n\nFirst, we iterate through the strings and set the values of k to 1. Then, we iterate through the strings again, counting the number of zeroes. If we encounter a zero, then we set k to be the smallest k such that all the substrings have equal last characters.\n\nFinally, we return the value of k.\n\nTime Complexity: O(n)\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'\n\nprint(solution('aaaaaaaa'))\nprint(solution('abbaabbaabba'))\nprint(solution('abcdef'))\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaabbaabba\") == 2\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcdef') == 6\nassert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == '2\\n1 2'\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1\\n1'\nassert solution('''3 6\n1 2 4\n11 12 15 19 24 30\n''') == '0\\n1'"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == '2\\n1 2\\n'"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\n\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\n\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n'''\n\nfrom math import ceil\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2\\n'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1\\n'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\"\n\n\"\"\"\nWrite 5 lines of code to test the correctness of solution:\nIn the United States of America, telephone numbers within an area code consist of seven digits: the prefix number is the first three digits and the line number is the last four digits. Traditionally, the $555$ prefix number has been used to provide directory information and assistance as in the following examples:\n - 555-1212\n - 555-9876\n - 555-5000\n - 555-7777\n\nTelephone company switching hardware would detect the $555$ prefix and route the call to a directory information operator. Nowadays, telephone switching is done digitally and somewhere along the line a computer decides where to route calls.\n\nFor this problem, write a program that determines if a supplied seven-digit telephone number should be routed to the directory information operator, that is, the prefix number is $555$.\n\n-----Input-----\nThe single line of input contains a single integer $n$ ($1000000 \\le n \\le 9999999$), which is a telephone number.\n\n-----Output-----\nOutput a single integer, which is $1$ if the number should be routed to the directory information operator, or $0$ if the number should not be routed to the directory information operator.\n\n-----Examples-----\nSample Input 1:\n5551212\nSample Output 1:\n1\n\nSample Input 2:\n5519876\nSample Output 2:\n0\n\nSample Input 3:\n5055555\nSample Output 3:\n0\n\nSample Input 4:\n1234567\nSample Output 4:\n0\n\nSample Input 5:\n5545586\nSample Output 5:\n1\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, n: str) -> str:\n        if n[0] == '5' and n[1] == '5' and n[2] == '5':\n            return \"1\"\n        return \"0\"\n\n\nclass Solution2:\n    def solution(self, n: str) -> str:\n        if n.startswith(\"55\"):\n            return \"1\"\n        return \"0\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\nprint(solution(stdin.readline()))\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"5551212\"), \"1\")\n        self.assertEqual(solution(\"5519876\"), \"0\")\n        self."
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\nprint('Hooray!')\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"-1/1\") == \"-1/1\"\nassert solution(\"0/1\") == \"0/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"0/1\") == \"0/1\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\nhttps://www.codewars.com/kata/dodecaphony\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_output\n\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == \"Transposition\"\nassert solution(2) == \"Inversion\"\nassert solution(3) == \"Retrograde\"\nassert solution(4) == \"Nonsense\"\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\nassert solution('5\\nG G G G F E\\nF E E E E F E\\nE E E E E E E\\nD D D D D D\\nC C C C C') == 'Nonsense'\nassert solution('5\\nC C C C C F\\nF F F F F F\\nE E E E E E\\nD D D D D D\\nC C C C C') == 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\n\"\"\"\n\nimport re\n\nclass Solution:\n    def __init__(self, input_str):\n        self.input_str = input_str\n        self.dictionary = {'a': 'A',\n                           'b': 'B',\n                           'c': 'C',\n                           'd': 'D',\n                           'e': 'E',\n                           'f': 'F',\n                           'g': 'G',\n                           'h': 'H',\n                           'i': 'I',\n                           'j': 'J',\n                           'k': 'K',\n                           'l': 'L',\n                          'm': 'M',\n                           'n': 'N',\n                           'o': 'O',\n                           'p': 'P',\n                           'q': 'Q',\n                           'r': 'R',\n                          's': 'S',\n                           't': 'T',\n                           'u': 'U',\n                           'v': 'V',\n                           'w': 'W',\n                           'x': 'X',\n                           'y': 'Y',\n                           'z': 'Z'}\n\n    def translate_word(self, word):\n        word = word.lower()\n        if word[0] not in self.dictionary:\n            return word\n        else:\n            syllables = []\n            for i, char in enumerate(word):\n                if i == 0 and char in self.dictionary:\n                    syllables.append(char)\n                elif char in self.dictionary:\n                    if (char!= 'h') or (i > 0 and word[i - 1]!= 'h'):\n                        syllables.append(self.dictionary[char])\n                else:\n                    syllables.append(char)\n            return ''.join(syllables)\n\n    def translate(self):\n        regex = re.compile(r'\\s+')\n        words = re.split(regex, self.input_str)\n        words = [self.translate_word(word) for word in words]\n        return''.join(words)\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\n-----Hint-----\nWe don't need to check for any \u201cisupper\u201d characters in the input.\n\nWe need to do a simple pass through the sentence to ensure that there are no dashes in the middle of a word.\n\nWe can do this by splitting the string using whitespace as separator, then joining back the words using dashes where needed.\n\nWe can use the regular expressions package to make things easier.\n\nHere are the main rules for converting a word from any language to nimionese:\n\nYou can\u2019t start nimionese with a hard consonant\n\nThe dach in any nimionese word must be in the second syllable\n\nIf there is a hard consonant in subsequent syllables, the nearest vowel is used to replace it\n\nAn \u201cuh\u201d or \u201cah\u201d must be used to end a word\n\nYou can\u2019t end nimionese with a hard consonant\n\nYou can\u2019t add any vowels before the word ends\n\nYou can\u2019t have \u201cpeep\u201d or \u201csee\u201d in the input.\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\nimport re\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nassert solution(\"Hi\") == \"Hia\"\nassert solution(\"Hello\") == \"Hlo\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''I love ba-na-na''') == 'Gah kove bababa'\nassert solution('''Cat-a-pil-lar''') == 'Catacillar'\nassert solution('''Co-ding is the best''') == 'Cociccah gs the bestuh'\n\"\"\"\nimport re"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 6\nassert solution(\"4\") == 16\nassert solution(\"3\") == 14\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\nassert solution(\"2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\n\"\"\"\nimport math"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '16'"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == 16\nassert solution(\"3\") == 14\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\n\"\"\"\n\nv = int(input())\nprint(v**2)\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 6\n\"\"\"\n\nimport math"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5 6\\n1 2 3 4 5'\n) == '3'\nassert solution(\n    '5 10\\n4 8 1 9 7'\n) == '2'\nassert solution(\n    '4 10\\n1 3 1 7'\n) == '4'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5\\n6 7 8 9 10') == '1'\nassert solution('6 10\\n1 3 1 7') == '2'\nassert solution('5 10\\n4 8 1 9 7') == '4'\n\nassert solution('1 2 3 4 5\\n6 7 8 9 10') == '1'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5\\n1 2 3 4 5') == '3'\n\nsolution(\"5 10\\n4 8 1 9 7\")"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == 3\n\n\"\"\"\n\nimport sys\n\nn, X = map(int, sys.stdin.readline().split())\nprices = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == 'possible'\nassert solution(test_input_2) == 'impossible'\nassert solution(test_input_3) == 'impossible'\nassert solution(test_input_4) == 'impossible'\n\"\"\"\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n1\\n0\\n1\\n0') == 'possible'\nassert solution('1\\n2\\n1\\n0\\n1\\n0') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n0 1 0\\n1 0 1\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('./input.txt', 'r').read()) == 'possible'\nassert solution(open('./input2.txt', 'r').read()) == 'impossible'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 1') == 'impossible'\nassert solution('1 2\\n1 0 1\\n0 0 0') == 'impossible'\nassert solution('1 2\\n1 0 1\\n0 1 0') == 'possible'\nassert solution('1 2\\n0 0 1\\n0 1 0') == 'possible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 0 1\\n0 1 0\\n') == 'possible'\nassert solution('1 2\\n1 0 1\\n0 1 1\\n') == 'impossible'\n'''\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n0 1 1\\n1 0 0\\n') == 'possible'\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 2\n0 1 1\n1 0 0\n''') == 'possible'\nassert solution('''1 2\n0 1 1\n1 0 0\n''') == 'impossible'\nassert solution('''1 2\n0 1 1\n1 0 1\n''') == 'impossible'\nassert solution('''1 2\n0 1 1\n1 0 1\n''') == 'possible'\nassert solution('''1 2\n0 1 1\n0 0 0\n''') == 'possible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"1.875\"\nassert solution(\"6 2\\n\") == \"4.25\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\nn, k = map(int, input().split())\nprint((n-1+k-1+k-1)//(k-1))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\nassert solution('1 1\\n') == '1'\nassert solution('1 100\\n') == '1.0'\nassert solution('100 100\\n') == '1.0'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 3''') == '1.875'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\"\"\"\n\nfrom math import ceil, log2, log10"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.8'\nassert solution('6 2\\n') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 3''') == '1.875'\n'''\n\nn, k = map(int, input().split(' '))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\nassert solution('3 3 3') == '0 0'\nassert solution('3 3 10') == '0 8'\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nBWWB\\nBWBB\\nWBBW\\nWBWW') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBB') == '0'\n\"\"\"\n\nn = int(input())\ngrid = []\nfor _ in range(n):\n    grid.append(input())"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nWBWB\\nBWWB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWWB\\nWBBW\\nBWBW\") == \"0\"\nassert solution(\"6\\nBWWBBW\\nWBWBWB\\nWBBWBW\\nBWWBWB\\nBBWBWW\\nWWBWBW\") == \"0\"\nassert solution(\"6\\nBWWBBW\\nWBWBWB\\nWBBWBW\\nBWWBWB\\nBBWBWW\\nWWBWBW\") == \"0\"\nassert solution(\"4\\nBWWB\\nBWWB\\nWBBW\\nBWBW\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWBBWWBWWWBBWBWWBWWBWWWWWWBBBWWWWWBBWWWWBBBWWBWWBWWWWWBBWWBBBWWWWBWWWWWWWWWWBBBWWWWWWWWWWWWBBBWWWWWWWWWWWWBBBWWWWWBBWWWWBBBWWWWWWBWWWWBWBWWBWWWWBWWWWWWWWWWWBBBWWWWWWWBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nWBWB\\nBWWB\\nWBBW\\nBWBW\") == '1'\nassert solution(\"4\\nWWWW\\nBBBB\\nWWWW\\nWWWW\") == '0'\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBW\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\n\"\"\"\n\nn = int(input())\ngrid = [[input()[i] for i in range(n)] for j in range(n)]\nblack = 0\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] == 'B':\n            black += 1"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWWWW\") == \"1\"\nassert solution(\"BWWBW\") == \"0\"\nassert solution(\"BBBBB\") == \"1\"\nassert solution(\"BBBBWB\") == \"0\"\nassert solution(\"BWWWBB\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"4\\n\"\n+ \"WBWB\\n\"\n+ \"BWBW\\n\"\n+ \"WBWB\\n\"\n+ \"BWBW\\n\") == \"1\"\nassert solution(\n\"4\\n\"\n+ \"WBWB\\n\"\n+ \"BWBW\\n\"\n+ \"WBWB\\n\"\n+ \"WWBB\\n\") == \"0\"\nassert solution(\n\"6\\n\"\n+ \"BWWB\\n\"\n+ \"WBWB\\n\"\n+ \"WBBW\\n\"\n+ \"BBWB\\n\"\n+ \"BWWB\\n\"\n+ \"WWBW\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nBWWB\\nBWBB\\nWBBW\\nWBWW') == '0'"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nBWWB\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('6\\nBWWWWB\\nWBWBWW\\nWBBWWW\\nBBWBWW\\nWBBWBB\\nWWBWBW') == '0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWWBBWBW\") == \"0\"\nassert solution(\"WWWWBBWB\") == \"0\"\nassert solution(\"WWBBWWWBWWWBBBWWBWWW\") == \"1\"\nassert solution(\"WBBWBBWBWWWBBBWWWBBW\") == \"0\"\n\n------2------\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 2\") == \"2 1\"\nassert solution(\"2 6 3 4\") == \"3 4\"\nassert solution(\"2 4 1 3\") == \"1 2\"\nassert solution(\"1 2 1 3\") == \"3 7\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 6\\n3 4\") == \"2 1\"\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: List[str]):\n        pass\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\\n\") == \"2 1\\n3 2\"\n\"\"\""
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 4\") == \"2 3\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\nprint(\"Passed\")\n\"\"\"\nimport sys"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 2') == '2 1'\nassert solution('1 2 1 3') == '1 2 1 3'\n\n-----Problem-----\n\nhttps://codeforces.com/gym/1091/problem/B\n\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 4 5 5 5 5 4\") == \"2 3\\n1 2\\n1 3\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1\\n2\\n') == '2\\n1\\n'\nassert solution('1\\n1\\n1\\n1\\n') == '2\\n3\\n'\nassert solution('1\\n2\\n3\\n4\\n') == '2\\n3\\n'\nassert solution('1\\n1\\n1\\n1\\n') == '2\\n3\\n'\nassert solution('1\\n2\\n3\\n4\\n') == '2\\n3\\n'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\nassert solution(\"[]\\n0\") == False\n\"\"\"\nfrom collections import defaultdict\nimport unittest\nclass Solution:\n    def detectCycle(self, head: ListNode) -> bool:\n        visited = set()\n        curr = head\n        while curr:\n            if curr in visited:\n                return True\n            else:\n                visited.add(curr)\n                curr = curr.next\n        return False\n\nclass Test(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test(self):\n        testcases = [\n            (\"[3,2,0,-4]\\n1\", True),\n            (\"[1,2]\\n0\", True),\n            (\"[1]\\n-1\", False),\n            (\"[]\\n0\", False),\n        ]\n        for i, (arg, expected) in enumerate(testcases):\n            with self.subTest(test=i):\n                self.assertEqual(self.solution.detectCycle(head=make_listnode(arg)), expected)\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([3,2,0,-4], 1) == True\nassert solution([1,2], 0) == True\nassert solution([1], -1) == False\n\nsolution.__annotations__\nsolution.__doc__\nsolution.__name__\nsolution.__qualname__\nsolution.__module__\nsolution.__defaults__\nsolution.__kwdefaults__\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\nsolution = Solution()\nassert solution.hasCycle([3,2,0,-4]) == True\nassert solution.hasCycle([1,2]) == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == False\n\"\"\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == True\nassert solution('[1, 2]') == False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 1\") == False\nassert solution(\"1 2 3\") == False\nassert solution(\"1 2 1\") == True\nassert solution(\"1 2 2 1 2 1\") == True\nassert solution(\"1 2 2 1 2 1 1 2\") == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 0 -4\") == True\nassert solution(\"1 2\") == True\nassert solution(\"1\") == True\nassert solution(\"\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 0 -4\") == True\nassert solution(\"1 2\") == True\nassert solution(\"1\") == False\nassert solution(\"1 2\") == True\nassert solution(\"1 2 3 3 4\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n0\\n-4\\n1\\n\") == True\nassert solution(\"1\\n2\\n\") == True\nassert solution(\"1\\n\") == True\nassert solution(\"1\\n2\\n1\\n\") == False\nassert solution(\"1\\n2\\n0\\n1\\n\") == False\n\"\"\""
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[1,2,3,4]\", 2) == \"true\"\nassert solution(\"[1,2,3,4]\", 1) == \"true\"\nassert solution(\"[1,2,3,4]\", 4) == \"true\"\nassert solution(\"[1,2,3,4]\", 3) == \"false\"\nassert solution(\"[1,2]\", -1) == \"false\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3,2,0,-4') == True\nassert solution('1,2') == True\nassert solution('1') == True\nassert solution('1,2,3') == False\nassert solution('1,2,3,3,3,4') == True\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\nassert solution([2, 7, 11, 15]) == [0, 1]\nassert solution([2, 7, 11, 15]) == [0, 1]\n\"\"\"\nimport math\nimport collections\n\nclass Solution:\n    def twoSum(self, nums, target):\n        hash_map = {}\n        for i in range(len(nums)):\n            if target - nums[i] in hash_map:\n                return [hash_map[target-nums[i]], i]\n            hash_map[nums[i]] = i\n        return [-1,-1]\n\nnums = [2, 7, 11, 15]\ntarget = 9\n\nsol = Solution()\n\nprint(sol.twoSum(nums, target))\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\n\n\"\"\"\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, [1,3]) == [0,1]\nassert solution(5, [5,0,3,8,14]) == [0,1]\nassert solution(7, [1,3,3,7]) == [0,2]\n\n\"\"\"\n\n\"\"\"\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2, 7, 11, 15') == [0, 1]\n\"\"\"\n\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        dic = {}\n        for i, num in enumerate(nums):\n            if target - num in dic:\n                return [dic[target - num], i]\n            else:\n                dic[num] = i\n        return []"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n3') == '3 0'\nassert solution('2 4\\n2') == '0 1'\nassert solution('4 6\\n6') == '1 0'\nassert solution('4 6\\n3') == '1 2'\nassert solution('4 5\\n7') == '2 1'\n'''\n\n'''\nGiven a 2D matrix of characters and a target word, write a function that returns whether the word can be found in the matrix by going left-to-right, or up-to-down.\n\nFor example, given the following matrix:\n\n[['F', 'A', 'C', 'I'],\n ['O', 'B', 'Q', 'P'],\n ['A', 'N', 'O', 'B'],\n ['M', 'A', 'S', 'S']]\n\nand the target word 'FOAM', you should return true, since it's the leftmost column. Similarly, given the target word 'MASS', you should return true, since it's the last row.\n\nBonus: Can you do this in O(N) time and O(1) space?\n'''\n\n'''\nSolution 1\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\n\nclass Solution:\n    def twoSum(self, nums: list, target: int) -> list:\n        \"\"\"\n        Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        \"\"\"\n        num_dict = {}\n        for i, num in enumerate(nums):\n            if target - num in num_dict:\n                return [num_dict[target - num], i]\n            num_dict[num] = i\n        return []\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    [2, 7, 11, 15]\n) == [0, 1]\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\"\nassert solution(\"4\\n5\\n4\\n3\\n2\\n1\\n0\\n\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4\\n0\\n6\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n3\\n4\\n0\\n1\\n2\\n0\\n1\\n0\\n2\\n1\\n0\\n4\\n0\\n5\\n0\\n3\\n3\\n0\\n2\\n0\\n4\\n0\\n2\\n0\\n1\\n4\\n0\\n3\\n0\\n0\\n4\\n0\\n2\\n2\\n0\\n1\\n4\\n0\\n5\\n0\\n3\\n0\\n0\\n1\\n4\\n0\\n2\\n1\\n0\\n2\\n0\\n3\\n0\\n1\\n2\\n0\\n0\\n3\\n0\\n3\\n0\\n2\\n0\\n0\\n0\\n0\\n2\\n0\\n4\\n0\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n2\\n0\\n0\\n4\\n0\\n2\\n0\\n2\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n3\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\nassert solution('10\\n') == '1'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1\"\n\nSample Case 1:"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '1'\nassert solution('6\\n') == '0'\nassert solution('8\\n') == '0'\nassert solution('10\\n') == '0'\nassert solution('13\\n') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('0') == ''\nassert solution('1111') == ''\nassert solution('1234') == ''"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\n'''\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\nimport unittest\nimport io\nimport sys\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = io.StringIO(), io.StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2\n1 2 2 1\"\"\"\n        output = \"\"\"4\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1\n3 7\"\"\"\n        output = \"\"\"impossible\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 1\") == \"4\"\nassert solution(\"3 7\") == \"impossible\"\nassert solution(\"2 1 2 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n2\\n1') == '4'\nassert solution('1\\n3\\n7') == 'impossible'\n\"\"\"\n\nn = int(input())\nsocks = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('1\\n1') == '1'\n\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\nassert solution(\"1\\n7\") == \"impossible\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 1\") == \"4\"\nassert solution(\"3 7\") == \"impossible\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"184 1\"\n) == \"180\"\n\"\"\"\n\nfrom math import ceil, floor\nfrom typing import List"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n\nC, K = input().split()\nC = int(C)\nK = int(K)\n\nresult = 0\nwhile C > 0:\n    if C % 10**K >= 1:\n        C -= (C % 10**K)\n        result += (C % 10**K)\n    else:\n        C -= (C % 10**K - 10**(K-1))\n        result += (C % 10**K - 10**(K-1))\nprint(result)\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n') == '6'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12345995) == 123451000\n\"\"\"\nimport math\n\nn, m = [int(x) for x in input().split()]"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n\na, b = input().split()\na = int(a)\nb = int(b)\nn = 1\nc = a\nwhile c % 10 == 0:\n    c /= 10\n    n *= 10"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12345) == 12345\nassert solution(123456) == 12345600\nassert solution(1234567) == 123456700\nassert solution(12345678) == 1234567800\nassert solution(123456789) == 12345678900\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')\ninput = sys.stdin.readline\n\nN = int(input())\nXY = [list(map(int, input().split())) for _ in range(N)]\n\nXY.sort(key=lambda x: x[1])\n\nt_x = 0\nt_y = 0\nfor x, y in XY:\n    if x > t_x:\n        t_x = x\n    if y > t_y:\n        t_y = y\n\nans = 0\n\nfor x, y in XY:\n    ans += abs(x - t_x) + abs(y - t_y) ** 2\n\nprint(ans)\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\nassert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n5 1\\n1 1\\n1 1') == '1.000000'\nassert solution('3\\n5 1\\n1 1\\n1 1') == '0.333333'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1\\n') == '0.000000'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\"\"\"\n\nfrom __future__ import print_function\nimport math\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(list(map(int, input().split())))\n\nminx = 10**6\nmaxx = -10**6\nminy = 10**6\nmaxy = -10**6\n\nfor i in lst:\n    if i[0] < minx:\n        minx = i[0]\n    if i[0] > maxx:\n        maxx = i[0]\n    if i[1] < miny:\n        miny = i[1]\n    if i[1] > maxy:\n        maxy = i[1]\n\na = 0\nfor i in range(minx, maxx+1):\n    for j in range(miny, maxy+1):\n        d = math.sqrt((i-lst[0][0])**2+(j-lst[0][1])**2)\n        for k in lst[1:]:\n            d += math.sqrt((k[0]-i)**2+(k[1]-j)**2)\n        if d < a or a == 0:\n            a = d\n\nprint('%.6f' % a)\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\nassert solution('4\\n-1 1\\n1 1\\n1 1\\n1 1') == '-0.5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3 3\\n0 1\\n1 0\\n1 1') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"\n\nN = int(input())\nA = []\nfor _ in range(N):\n    A.append(list(map(float, input().split())))\na = [0,0]\nfor i in range(N):\n    for j in range(N):\n        if i!= j:\n            dis = abs(A[i][0] - A[j][0])**2 + abs(A[i][1] - A[j][1])**2\n            a[0] += min(dis, A[i][0] + A[j][0])\n            a[1] += min(dis, A[i][1] + A[j][1])\n    a[0] += abs(A[i][0] - 0)\n    a[1] += abs(A[i][1] - 0)\nprint(\"{:.6f}\".format(sqrt(a[0])))\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\nassert solution('10\\n0 0\\n1 1\\n9 9\\n0 0\\n3 3\\n9 9\\n0 0\\n2 2\\n9 9\\n0 0\\n5 5\\n9 9\\n0 0\\n6 6\\n9 9\\n0 0\\n7 7\\n9 9\\n0 0\\n8 8\\n9 9\\n0 0\\n10 10') == '2.449489'\n\nimport sys; input=sys.stdin.readline\nn=int(input())\nhomes=[]\nfor i in range(n):\n    x,y=map(int,input().split())\n    homes.append([x,y])\n\nhomes.sort()\n\nlow=0\nhigh=10**6\nans=0\nwhile low<high:\n    mid=(low+high)//2\n    d=0\n    for x,y in homes:\n        d=max(d,abs(x-y))\n    if d<=mid:\n        high=mid\n        ans=max(ans,mid)\n    else:\n        low=mid+1\n\nprint(ans)\n\n\n\nSample Input 1:\n3\n1 1\n2 2\n3 3\nSample Output 1:\n0.000000\n\nSample Input 2:\n3\n0 1\n1 0\n1 1\nSample Output 2:\n0.000000\n\nSample Input 3:\n10\n0 0\n1 1\n9 9\n0 0\n3 3\n9 9\n0 0\n2 2\n9 9\n0 0\n5 5\n9 9\n0 0\n6 6\n9 9\n0 0\n7 7\n9 9\n0 0\n8 8\n9 9\n0 0\n10 10\nSample Output 3:\n2.449489\n\nSample Input 4:\n10\n0 0\n1 1\n9 9\n0 0\n3 3\n9 9\n0 0\n2 2\n9 9\n0 0\n5 5\n9 9\n0 0\n6 6\n9 9\n0 0\n7 7\n9 9\n0 0\n8 8\n9 9\n0 0\n10 10\nSample Output 4:\n2.449489\n\nSample Input 5:\n4\n5 5\n5 5\n5 5\n5 5\nSample Output 5:\n0.000000\n\nSample Input 6:\n4\n10 10\n0 0\n0 0\n0 0\nSample Output 6:\n10.000000\n\nSample Input 7:\n2\n5 4\n4 5\nSample Output 7:\n1.414213\n\nSample Input 8:\n5\n1 1\n5 2\n2 2\n4 4\n3 3\nSample Output 8:\n1.250000\n\n\nSample Input 9:\n1\n10\nSample Output 9:\n9.000000\n\n\nSample Input 10:\n3\n0 0\n9 9\n9 9\nSample Output 10:\n8.884889\n\n\nSample Input 11:\n2\n0 1\n0 0\nSample Output 11:\n0.000000\n\nSample Input 12:\n10\n0 0\n1 1\n9 9\n0 0\n3 3\n9 9\n0 0\n2 2\n9 9\n0 0\n5 5\n9 9\n0 0\n6 6\n9 9\n0 0\n7 7\n9 9\n0 0\n8 8\n9 9\n0 0\n10 10\nSample Output 12:\n2.449489\n\nSample Input 13:\n1\n5\nSample Output 13:\n0.414213\n\nSample Input 14:\n3\n0 0\n1 1\n2 2\nSample Output 14:\n0.000000\n\nSample Input 15:\n10\n0 0\n1 1\n0 0\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n0 0\n10 10\nSample Output 15:\n2.449489\n\n\nSample Input 16:\n10\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n10 10\nSample Output 16:\n2.449489\n\nSample Input 17:\n4\n5 5\n5 5\n5 5\n5 5\nSample Output 17:\n0.000000\n\nSample Input 18:\n2\n0 0\n0 0\nSample Output 18:\n0.000000\n\nSample Input 19:\n1\n1\nSample Output 19:\n0.785398\n\nSample Input 20:\n5\n1 1\n5 2\n2 2\n4 4\n3 3\nSample Output 20:\n1.414213\n\nSample Input 21:\n2\n0 1\n0 0\nSample Output 21:\n0.785398\n\nSample Input 22:\n3\n0 0\n10 10\n0 0\nSample Output 22:\n10.000000\n\nSample Input 23:\n2\n0 1\n9 9\nSample Output 23:\n9.000000\n\nSample Input 24:\n10\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\nSample Output 24:\n2.449489\n\nSample Input 25:\n10\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\nSample Output 25:\n2.449489\n\n\nSample Input 26:\n5\n1 1\n5 2\n2 2\n4 4\n3 3\nSample Output 26:\n1.414213\n\nSample Input 27:\n4\n0 0\n0 0\n0 0\n0 0\nSample Output 27:\n0.000000\n\nSample Input 28:\n4\n1 1\n1 1\n1 1\n1 1\nSample Output 28:\n0.000000\n\nSample Input 29:\n10\n0 0\n0 0\n1 1\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\nSample Output 29:\n2.449489\n\nSample Input 30:\n10\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\n0 0\n9 9\nSample Output 30:\n2.449489\n\nSample Input 31:\n3\n0 0\n1 1\n2 2\nSample Output 31:\n0.785398\n\nSample Input 32:\n1\n10\nSample Output 32:\n9.000000\n\nSample Input 33:\n6\n1 1\n2 2\n2 2\n3 3\n4 4\n5 5\nSample Output 33:\n1.414213\n\n\nSample Input 34:\n5\n1 1\n5 2\n2 2\n4 4\n3 3\nSample Output 34:\n1.414213\n\nSample Input 35:\n10\n0 0\n1 1"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\"\"\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1') == '1\\n2\\n4\\n'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8\\n'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('7\\n1\\n1 1 1 1 1 1 1 1\\n3\\n2 1 2') == '1 2'\nassert solution('') == ''\nassert solution('2\\n2') == '2'\nassert solution('5\\n3\\n4 2 1 3 5\\n3\\n2 1 5\\n4 2 4') == '1 2 3 4'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\n\"\"\"\n\nimport re\nimport sys\n\nsys.setrecursionlimit(10000000)\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 4\") == \"24\"\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('3 5 3') == '8'\nassert solution('2 2 3') == '8'\n\n-----Solution-----\nn, t, m = [int(s) for s in stdin.split()]\nprint(n * t * m)\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\nassert solution('0 0 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"1 2 1\") == \"3\"\n\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n\n\"\"\"\nN, T, M = map(int, stdin.split())\n\ne = set()\nfor _ in range(N):\n    e.add(stdin.rstrip())\n\nn = set()\nfor _ in range(T):\n    n.add(stdin.rstrip())\n\nm = set()\nfor _ in range(M):\n    m.add(stdin.rstrip())\n\nprint(len(e.intersection(n, m)))\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\nSample Case 0\nSample Input 0:\n3 4 5\nSample Output 0:\n60\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\n------Solution------\n\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nprint('Test passed\\n')\n\n-----Problem-----\nMeadow Lane is the one of the happiest places in all of Santa\u2019s country. But something has gone wrong! When there is a Jack-O\u2019-Lantern festival, it takes place in Meadow Lane. There is always a crowd of people coming out to see the fun lights and headscarfs. This year, however, there is something different. Instead of people seeing the Jack-O\u2019-Lanterns in the usual way, they now see something different!\n\nFor every Jack-O\u2019-Lantern scene, there are three different lights which change their color based on the color of the person seeing them. There are also three different nose designs, each with a different color of eyes. There are also three different mouth designs, each with a different color of lips. The colors of the lights, nose, and mouth designs all start with the same color, and then change to a different color after a fixed number of LEDs.\n\nEach LED represents a unique part of the Jack-O\u2019-Lantern design. For example, if the first LED is red, then it will be the red light on the nose. If the first LED is green, then it will be the green light on the eyes.\n\nSince every LED is different, this means that there are $n$ possible lights, $t$ possible nose designs, and $m$ possible mouth designs. To prevent any unnecessary lights, nose, and mouth designs, the designers want to know how many unique combinations of lights, nose, and mouth designs exist.\n\nFor example, the following are the unique combinations of lights, nose, and mouth designs:\n\nThe following are the unique combinations of lights, nose, and mouth designs:\n\nTherefore, there are $n \\times t \\times m = n \\times t \\times m = nt \\times m$ unique combinations.\n\n-----Solution-----\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0 2\\n3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4\\n3 -1 4') == '2.5'"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n\nimport numpy as np\n\nn = int(input())\nbases = list(map(int, input().split()))\n\nfor i, v in enumerate(bases):\n    if v == 0:\n        bases[i] = 0\n    elif v == 1:\n        bases[i] = 1\n    elif v == 2:\n        bases[i] = 2\n    elif v == 3:\n        bases[i] = 3\n    elif v == 4:\n        bases[i] = 4\n    elif v == -1:\n        bases[i] = -1\n    else:\n        raise ValueError\n\nprint(np.mean(bases))\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, List, Tuple, Set, Callable, TypeVar\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'\nassert solution('100 -1 4') == '0.0'\nassert solution('0 -1 4') == '0.0'\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split()))\n\nprint(\"%.3f\" % ((sum(s) - sum(s[0::4])) / (sum(s[0::4]) + sum(s[3::4]))))\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3') == '6'\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n6\") == \"6\"\nassert solution(\"15 12\\n7\") == \"7\"\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\ncrossed = []\n\nfor i in range(2, N + 1):\n    if i not in crossed:\n        crossed.append(i)\n        j = i\n        while j < N + 1:\n            crossed.append(j)\n            j += i\n\nprint(crossed[K - 1])\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('3 9') == '4'\nassert solution('9 3') == '6'\nassert solution('5 10') == '8'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\n\nprimes = {1}\nfor i in range(2, n + 1):\n    primes.add(i)\n    for p in primes:\n        if p * i > n:\n            break\n        primes.discard(p)\n        primes.add(i * p)\n\nprimes = sorted(primes)\nprint(primes[k - 1])\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nfrom collections import Counter\nfrom math import sqrt, ceil"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nN, K = map(int, input().split())"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n\"\"\"\n\nfrom sys import stdin\n\nstdin = stdin.read()"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123864 123865\") == \"1\"\n\nassert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n\"\"\"\n\nfrom sys import stdin\n\nN, M = [int(n) for n in stdin.readline().split()]"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n\"\"\"\n\nL, H = input().split(' ')\nL, H = int(L), int(H)\ntotal = 0\n\nfor i in range(L, H + 1):\n    if i % 1!= 0 or i % 2!= 0 or i % 3!= 0 or i % 4!= 0 or i % 5!= 0 or i % 6!= 0:\n        continue\n    else:\n        total += 1\n\nprint(total)\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\nassert solution('4\\n') == '0.52083333'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '0.5'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == '0.5'\nassert solution('2\\n1') == '0.5'\nassert solution('3\\n2') == '0.6666666666666666'\nassert solution('5\\n2') == '0.8333333333333334'\n\nassert solution('6\\n4') == '0.625'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.66666667\"\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0.5\"\n\"\"\"\n\nn = int(input())\nprobability = 1 - (1/n**2)\nprint(round(probability, 6))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\") == \"0.5\"\nprint(solution(\"2\\n3\"), \"0.5\")\nassert solution(\"3\\n5\") == \"0.66666667\"\nprint(solution(\"3\\n5\"), \"0.66666667\")\n\nSample Case 0\nIn Sample Case 0, the probabilities of a given citizen giving gifts to themselves are:\n\ncitizen 1 gives gifts to citizen 1\ncitizen 2 gives gifts to citizen 2\ncitizen 3 gives gifts to citizen 3\ncitizen 4 gives gifts to citizen 4\n\nFor the purposes of discussion, we will assume that the gifts are sent by picking an index i from the array with probability $P_i$ and then using the value at index i. So, if citizen i gave a gift to citizen j, the probability of that happening is $P_i = \\frac{1}{4}$, and if citizen i gave a gift to citizen j, the probability of that happening is $P_i = \\frac{1}{4}$.\n\nIn the following table, the probability of a citizen giving gifts to themselves is the sum of the probabilities of each citizen's gifts to themself.\n\n|  p_i  |  P(i) |\n|--------|---------|\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n\nUsing the probabilities in the table, we have:\n\np_i = 1/4\n\nLet's add up the probabilities for all the citizens in Haircombe, from 1 to n.\n\n| p_i |\n|-----|\n| p_1 | 1/4 + 1/4\n| p_2 | 1/4 + 3/4\n| p_3 | 3/4\n| p_4 | 1/4 + 1/4\n\n| p_1 + p_2 + p_3 + p_4 |\n\np_1 + p_2 + p_3 + p_4 = 1\n\nSo, the probability of giving gifts to oneself is 1 - p_i - p_1 - p_2 - p_3 - p_4.\n\n-----Problem-----\nFor any number of citizens n, we can calculate the probability of each citizen giving gifts to themselves and then add up all of the probabilities to get the total probability of a citizen giving gifts to themselves.\n\nIf a citizen gives gifts to themselves with probability p, we can calculate the probability of giving gifts to other citizens the same way as in the previous problem.\n\nIf a citizen gives gifts to themselves with probability p, then the probability of giving gifts to other citizens is (1 - p)^n - n*p.\n\n| p | p(give gifts to self) - p(give gifts to other people) |\n|---|-----------------------------------------------|\n| 0 | 0                                               |\n| 0.25| 1                                             |\n| 0.5| 1 - 0.25 - 0.75                                |\n| 0.75| 1 - 0.25 - 0.5 - 0.25                          |\n| 1 | 1                                               |\n\n----Solution-----\n\nLet's look at the solution for a single value of n, and then take a general solution of the problem.\n\n| n | p(give gifts to self) - p(give gifts to other people) |\n|---|-----------------------------------------------|\n| 1 | 1                                               |\n| 2 | 1 - 1/4 - 1/4 - 1/4 - 1/4                        |\n| 3 | 1 - 1/4 - 1/4 - 1/4 - 1/4 - 1/4 - 1/4           |\n| 4 | 1 - 1/4 - 1/4 - 1/4 - 1/4 - 1/4 - 1/4 - 1/4    |\n\nFor the general solution of the problem, we will first calculate the probabilities for the first citizen, then the probabilities for the second citizen, and so on.\n\nWe will start with the first citizen. As always, we will assume that the first citizen gives gifts to the second citizen with probability p, and then the probability of giving gifts to the third citizen is p^2, and so on.\n\n|  p_i  |  P(i) |\n|--------|---------|\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n\nFor the purposes of discussion, we will assume that the gifts are sent by picking an index i from the array with probability $P_i$ and then using the value at index i. So, if citizen i gave a gift to citizen j, the probability of that happening is $P_i = \\frac{1}{4}$, and if citizen i gave a gift to citizen j, the probability of that happening is $P_i = \\frac{1}{4}$.\n\nIn the following table, the probability of a citizen giving gifts to themselves is the sum of the probabilities of each citizen's gifts to themselves.\n\n|  p_i  |  P(i) |\n|--------|---------|\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n| p_i = 0.25 | 1/4    |\n\nUsing the probabilities in the table, we have:\n\np_i = 1/4\n\nThe probabilities of a citizen giving gifts to themselves are the same for all the citizens, so we will have the same probabilities for all the values of i.\n\n| p_i |\n|-----|\n| p_1 | 1/4\n| p_2 | 1/4\n| p_3 | 1/4\n| p_4 | 1/4\n\nFor any number of citizens n, we can calculate the probability of each citizen giving gifts to themselves and then add up all of the probabilities to get the total probability of a citizen giving gifts to themselves.\n\n| n | p(give gifts to self) |\n|---|---------------------|\n| 1 | 1                   |\n| 2 | 1/4 + 1/4           |\n| 3 | 1/4 + 1/4 + 1/4     |\n| 4 | 1/4 + 1/4 + 1/4 + 1/4|\n\nSo, the total probability of a citizen giving gifts to themselves is 1 - p(give gifts to self) = 1 - 1/4 - 1/4 - 1/4 - 1/4 - 1/4 = 2/4.\n\n----Solution-----"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0.5\\n\") == \"0.5\"\n\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('180') == 'triple 20'\n\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'impossible'\nassert solution('1\\n2') == 'impossible'\nassert solution('1\\n2\\n3') == 'impossible'\nassert solution('1\\n2\\n3\\n4') == 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport math\n\ntarget_score = int(input())"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport math\nimport random"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1) == 'impossible'\nassert solution(180) == 'triple 20'\nassert solution(192) == 'triple 19'\nassert solution(192) == 'triple 19'\nassert solution(192) == 'triple 19'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == test_output_0\nprint(\"Test 0: OK\")\n\nassert solution(test_input_1) == test_output_1\nprint(\"Test 1: OK\")\n\nassert solution(test_input_2) == test_output_2\nprint(\"Test 2: OK\")\n\nassert solution(test_input_3) == test_output_3\nprint(\"Test 3: OK\")\n\nassert solution(test_input_4) == test_output_4\nprint(\"Test 4: OK\")"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\nprint(solution(\"10 4 7\"))\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4 7') == '168'\nprint(solution('5 2 2'))"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 4 7''') == '168'\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\"\"\"\nimport math"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 4 7''') == '168'\n\"\"\"\n\nn, h, v = [int(i) for i in stdin.split(' ')]\n\nprint(n**3 - ((h-1)**2 * n**2 + (v-1)**2 * n**2)/4)\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 10\\n5 8\") == \"7\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n3 10\\n5 8') == '7'\n\"\"\"\n\nfrom math import ceil, gcd\n\nn = int(input())\ningredients = []\nfor i in range(n):\n    ingredients.append(list(map(int, input().split())))\n\ns = 1\nb = 0\nfor i in range(n):\n    s *= ingredients[i][0]\n    b += ingredients[i][1]\n\nbest_diff = s + b\nfor i in range(n):\n    j = i + 1\n    while j < n:\n        s = ingredients[i][0] * ingredients[j][0]\n        b = ingredients[i][1] + ingredients[j][1]\n        diff = abs(s - b)\n        if diff < best_diff:\n            best_diff = diff\n        j += 1\n\nfor i in range(n):\n    j = i + 1\n    while j < n:\n        s = ingredients[i][0] * ingredients[j][0]\n        b = ingredients[i][1] + ingredients[j][1]\n        if s - b < best_diff:\n            best_diff = s - b\n        j += 1\n\nprint(best_diff)"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n])) == 1\nassert solution(str([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n])) == 1\nassert solution(str([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n])) == 1\nassert solution(str([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n])) == 1\n\n\"\"\"\n\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 8\") == \"1\"\nassert solution(\"5\\n3 8\\n5 10\") == \"1\"\nassert solution(\"5\\n3 8\\n5 10\\n7 8\") == \"1\"\nassert solution(\"1\\n3 8\") == \"7\"\nassert solution(\"1\\n3 8\\n5 10\") == \"1\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n3 10\\n') == '7'\n\"\"\"\n\n\"\"\"\nThis is the second approach, which is more efficient and memory efficient.\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3 10\") == \"7\"\n\n---\n\n\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b, \u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043f\u0430\u0440\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (\\n).\n\n\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b, \u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043f\u0430\u0440\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (\\n).\n\n\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b, \u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043f\u0430\u0440\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (\\n).\n\n\u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u0442\u0440\u043e\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u0442\u0440\u043e\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0430\u043c\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u0442\u0440\u043e\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0430\u043c\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c.\n\n\u0421\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u0434\u0430\u043d \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u043f\u043b\u0438\u043a\u0438, \u0437\u0430\u043c\u0435\u043d\u0435\u043d \u0432\u043e\u0442 \u0442\u0430\u043a\u0438\u043c \u0441\u043b\u043e\u0432\u043e\u043c \u00ab\u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c\u00bb \u0438\u043b\u0438 \u00ab\u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0430\u0442\u044c\u00bb, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 "
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"3 8\") == \"1\"\nassert solution(\"2 3 8\") == \"1\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 8') == '1'\nassert solution('2\\n3 8\\n1 2') == '3'\nassert solution('3\\n3 10\\n5 8\\n1 2') == '1'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == 7\n\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") == \"\"\"\n smile.\n\"\"\"\nprint('Success')\n\n\"\"\"\n\ubb38\uc81c\n\ub3d9\ud601\uc774\ub294 \uc790\uc2e0\uc774 \ub9cc\ub4e0 \ud504\ub85c\uadf8\ub7a8\uc744 \ub2e4\ub978 \uba4b\uc0ac\ub97c \ud50c\ub808\uc774\ud558\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \uba4b\uc0ac\ub97c \uc5ec\ub7ec\ubc88 \ud50c\ub808\uc774\ud558\uae30\ub85c \ud55c\uc9c0\ub294 \uc798 \uc0dd\uac01\ud558\uc9c0 \ubabb\ud588\uc9c0\ub9cc \ud55c \ubc88\uc758 \ud50c\ub808\uc774\uc5d0\uc11c \uc790\uc2e0\uc774 \uc791\uc131\ud55c \ucf54\ub4dc\ub97c \uc5ec\ub7ec\ubc88 \ub2e4\uc2dc \ud65c\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc81c\uc57d\uc744 \uc138\uc6e0\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub97c \ucc3e\uae30 \uc704\ud574 \uc790\uc2e0\uc774 \uc0ac\uc6a9\ud558\ub294 \uc5b8\uc5b4\uc758 \ud2b9\uc131\uc744 \ud30c\uc545\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \ub3d9\ud601\uc774\ub97c \ub3c4\uc640 \uc81c\uc57d\uc744 \uc138\uc6b0\uace0, \ucf54\ub4dc\ub97c \uc81c\uc57d\uc5d0 \ub9de\uac8c \uc791\uc131\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.\n\n\ub3d9\ud601\uc774\ub294 \uc790\uc2e0\uc774 \ub9cc\ub4e0 \ud504\ub85c\uadf8\ub7a8\uc744 \ub2e4\ub978 \uba4b\uc0ac\ub97c \ud50c\ub808\uc774\ud558\uae30 \uc704\ud574 \uc791\uc131\ud588\uc9c0\ub9cc, \ud65c\uc6a9\ub418\ub294 \ucf54\ub4dc\uac00 \uc5c4\uccad \ub9ce\uc744 \uacbd\uc6b0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc5d0\ub7ec\uac00 \ub098\ub294 \uac83\uc744 \uc798 \uc0dd\uac01\ud558\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub97c \ucc3e\uae30 \uc704\ud574 \uc790\uc2e0\uc774 \uc0ac\uc6a9\ud558\ub294 \uc5b8\uc5b4\uc758 \ud2b9\uc131\uc744 \ud30c\uc545\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc790\uc2e0\uc774 \uc0ac\uc6a9\ud558\ub294 \uc5b8\uc5b4\uc758 \ud2b9\uc131\uc744 \uc54c\uc544\ub0b4\uace0 \uc81c\uc57d\uc744 \uc138\uc6b0\uace0 \uc791\uc131\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.\n\n\ud504\ub85c\uadf8\ub7a8\uc758 \uac01 \uc904\uc740 \ud558\ub098\uc758 \ubb38\uc7a5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc798\ubabb\ub41c \uc904\uc740 \ud654\uc774\ud2b8 \ud328\ub4dc\ub85c \ubcc0\ud658\ub418\uc5b4 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589\uc5d0\ub294 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n\uac01 \uc904\uc740 \ud558\ub098\uc758 \uae38\uc774\uac00 100\uc790 \uc774\ud558\uc778 \ubb38\uc790\uc5f4(\uae38\uc774\uac00 100\uc790 \uc774\ud558\uc778 \ubb38\uc790\uc5f4\uc740 \uc904\ubc14\uafc8\uc744 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4)\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud654\uc774\ud2b8 \ud328\ub4dc\uc640 \ud568\uaed8 \ubc18\ub4dc\uc2dc \ud3ec\ud568\ud558\uc5ec \uc791\uc131\ud569\ub2c8\ub2e4.\n\n\uba85\ub839\uc5b4\ub294 \ucd1d 4\uac00\uc9c0 \uacbd\uc6b0\uc758 \uc218\uc785\ub2c8\ub2e4. \ud2b9\uc815 \uc870\uac74\uc5d0 \ud574\ub2f9\ud558\ub294 \uba85\ub839\uc5b4\ub294 \ud55c \uc904\uc5d0 \ud558\ub098\uc529 \ub098\uc5f4\ub429\ub2c8\ub2e4. \uc774\ub294 \ud574\ub2f9 \uc870\uac74\uc744 \uc9c0\ud0a4\uc9c0 \uc54a\uc73c\ub824\uba74 \uac01 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uc2dc\uac04(\ucd08)\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n\uba85\ub839\uc5b4\ub294 \uc5f0\uc18d"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your right hand.\\nraise your left hand.\\n'\n\n-------\n1\nSimon says smile.\nSample Output 2:\n smile.\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.'\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"smile.\"\nassert solution(\"\"\"2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"raise your right hand.\\nraise your left hand.\"\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\nSimon says smile.\n''') == '''smile.\n'''\nassert solution('''1\nSimon says smile.\n''') == '''\n'''\n\nassert solution('''3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == '''\n'''\n\nassert solution('''2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == '''\n'''\n\nassert solution('''3\nSimon says frown.\nLower your right hand.\nSimon says frown.\n''') == '''\n'''"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.') == 'raise your left hand.\\nraise your right hand.\\n'\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\n\"\"\") == \"\"\"\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\n\"\"\"\nassert solution(\"\"\"3\nSimon says smile.\nLower your right hand.\nSimon says raise your left hand.\nSimon says smile.\nSimon says smile.\nSimon says smile.\n\"\"\") == \"\"\"\nsmile.\nsmile.\nsmile.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"smile.\"\n\nassert solution(\"\"\"2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"raise your right hand.\\nraise your left hand.\"\n\nassert solution(\"\"\"3\nSimon says smile.\nSimon says raise your left hand.\n\"\"\") == \"smile.\"\n\nassert solution(\"\"\"4\nSimon says smile.\nSimon says raise your right hand.\nSimon says raise your left hand.\n\"\"\") == \"raise your right hand.\\nSimon says raise your left hand.\"\n\nassert solution(\"\"\"5\nSimon says raise your left hand.\nSimon says raise your right hand.\nSimon says smile.\n\"\"\") == \"Simon says smile.\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') =='raise your right hand.\\nraise your left hand.'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.') == 'raise your left hand.'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\nSimon says touch your nose.') == 'Simon says touch your nose.'\nassert solution('3\\nSimon says smile.\\nLower your right hand.\\nSimon says touch your nose.') =='smile.'\nassert solution('3\\nSimon says touch your nose.\\nSimon says smile.\\nLower your right hand.\\nSimon says touch your nose.') == 'touch your nose.'\nassert solution('1\\nSimon says raise your right hand.\\nLower your right hand.') == 'Simon says raise your right hand.'\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''0 0 4 6 10 12 16 18''') == '5'\nassert solution('''1 2 4 6 10 12 16 18''') == '0'\n\"\"\"\nfrom typing import List, Tuple\nfrom collections import namedtuple\n\n\nN = namedtuple(\"N\", \"count\")\nREGISTER = Tuple[int,...]\nREGISTER_2 = Tuple[int, int]\nREGISTER_3 = Tuple[int, int, int]\nREGISTER_5 = Tuple[int, int, int, int, int]\nREGISTER_7 = Tuple[int, int, int, int, int, int, int, int]\nREGISTER_11 = Tuple[int, int, int, int, int, int, int, int, int, int, int]\nREGISTER_13 = Tuple[int, int, int, int, int, int, int, int, int, int, int, int]\nREGISTER_17 = Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int]\nREGISTER_19 = Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int,"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"0 0 2 5 10 11 12 16 18\") == \"4\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"0 0 0 1 10 11 12 16 18\") == \"4\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\ninput_string = input()\ninput_numbers = [int(n) for n in input_string.split()]\n\nfor i in range(1, len(input_numbers)):\n    input_numbers[i] += input_numbers[i - 1] % (i + 2)\n\nprint(sum([i % (i + 2) for i in input_numbers if i % (i + 2) == 0]))\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == '5'\nassert solution(\"1 2 4 6 10 12 16 18\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nassert solution('1 0 4 6 10 12 16 18') == '0'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n0 2\\n0 3'\nassert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n0 2\\n0 3'\nassert solution('4 1\\nAG\\nAT\\nTT\\nTC') == '2\\n0 1\\n0 2\\n0 3'"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\"\nassert solution(\"4 1\\nG\\nT\\nG\\nA\") == \"2\"\nassert solution(\"4 1\\nG\\nA\\nG\\nT\") == \"2\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\n\"\"\"\n\nclass Tree:\n    def __init__(self, left: str = \"\", right: str = \"\", weight: int = 0):\n        self.left = left\n        self.right = right\n        self.weight = weight\n\n    def __str__(self):\n        return f\"({self.left} - {self.weight} - {self.right})\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\n\"\"\"\n\nclass Node(object):\n    def __init__(self, name: str, count: int = 0):\n        self.name = name\n        self.count = count\n        self.children = []\n    def add_child(self, node: object) -> None:\n        self.children.append(node)\n    def get_count(self) -> int:\n        return self.count\n    def get_name(self) -> str:\n        return self.name\n    def get_children(self) -> list:\n        return self.children\n    def __repr__(self) -> str:\n        return 'Node(name={}, count={})'.format(self.name, self.count)\n    def __str__(self) -> str:\n        return self.__repr__()\n    def __lt__(self, other):\n        return self.count < other.count\n    def __gt__(self, other):\n        return self.count > other.count"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import defaultdict, deque\n\nn, k = map(int, stdin.readline().split())\nsamples = [stdin.readline().strip() for _ in range(n)]\n\nd = defaultdict(lambda: float('inf'))\nq = deque([(0, samples[0])])\n\nwhile q:\n    path, curr = q.popleft()\n    if curr == samples[-1]:\n        d[path] = min(d[path], path)\n    else:\n        for i, c in enumerate(curr):\n            for j in range(k):\n                if curr[j] == c:\n                    continue\n                for l in range(j + 1, k):\n                    nxt = curr[:j] + curr[l] + curr[j + 1:l] + curr[j] + curr[l + 1:]\n                    if nxt not in samples:\n                        continue\n                    q.append((path + 1, nxt))"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\nassert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n1 2\\n2 3'\nassert solution('4 1\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n0 2\\n0 3'\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution([\"AA\", \"AT\", \"TT\", \"TC\"]) == \"3\"\n\nassert solution([\"AA\", \"AT\", \"TT\", \"TC\"]) == \"2\"\n\nassert solution([\"A\", \"A\", \"G\", \"T\"]) == \"2\"\n\nassert solution([\"AA\", \"AT\", \"TT\", \"TC\"]) == \"3\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"aaaa\"\n) == \"a\"\n\nassert solution(\n\"abb\"\n) == \"b\"\nassert solution(\n\"aabb\"\n) == \"b\"\nassert solution(\n\"abbab\"\n) == \"b\"\nassert solution(\n\"abbab\"\n) == \"b\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n\"\"\""
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('aba') == 'a'\nassert solution('abab') == '-1'\nassert solution('abbabb') == 'b'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"-1\"\nassert solution(\"aab\") == \"a\"\nassert solution(\"abb\") == \"b\"\nassert solution(\"baa\") == \"a\"\nassert solution(\"aab\") == \"a\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('aba') == 'a'\nassert solution('abb') == 'a'\nassert solution('aabb') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('aaaaaaaa') == 'a'\nassert solution('ababab') == '-1'\nassert solution('aabbb') == 'ab'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nprint(solution('ab'))"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin=b'aaaa') == 'a'\nassert solution(stdin=b'ab') == -1\n\"\"\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('bbabab') == 'b'\nassert solution('bbbbb') == -1\nassert solution('aaaaa') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"abc\") == \"c\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"20 100\"\n) == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\n\"2 3\"\n) == \"Dr. Chaz needs 1 more piece of chicken!\"\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"20 100\n\"\"\"\n) == \"\"\"Dr. Chaz will have 80 pieces of chicken left over!\"\"\"\n\nassert solution(\n\"\"\"2 3\n\"\"\"\n) == \"\"\"Dr. Chaz needs 1 more piece of chicken!\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Dr. Chaz needs 1 more piece of chicken!'\n\nassert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\n\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\nimport sys\nimport os\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\nassert solution(\"0 1000\") == \"Dr. Chaz needs 1000 more piece[s] of chicken!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"20 100\"\n) == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\n    \"2 3\"\n) == \"Dr. Chaz needs 1 more piece of chicken!\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == -2\nassert solution('''3 30\n1 1 1\n5 2 3\n5 2 1''') == 0\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n1 1 1\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"-2\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 10\n1 1 1\n5 2 3\n5 2 1\n1 1 1\n5 2 3\n''') == '0'\nassert solution('''\n5 10\n1 1 1\n5 2 3\n5 2 1\n1 1 1\n5 2 3\n''') == '-2'\nassert solution('''\n3 10\n1 1 1\n5 2 3\n5 2 1\n''') == '2'\nassert solution('''\n5 10\n1 1 1\n5 2 3\n5 2 1\n1 1 1\n5 2 3\n''') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\n\"\"\"\n\nimport sys\n\nN, V = (int(x) for x in sys.stdin.readline().split())\nboxes = list()\nfor i in range(N):\n    l, w, h = (int(x) for x in sys.stdin.readline().split())\n    boxes.append(l * w * h)\nprint(-1 if min(boxes) > V else max(boxes) - V)\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n\"\"\"\n\nimport math\nimport sys\nimport itertools"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10\\n1 1 2\\n2 2 2\") == -2\nassert solution(\"2 10\\n1 1 2\\n1 1 2\\n2 2 2\") == 0\nassert solution(\"2 10\\n1 1 2\\n1 1 2\\n1 1 2\\n2 2 2\") == 0\nassert solution(\"2 10\\n1 1 2\\n1 1 2\\n1 1 2\\n2 2 2\") == 0\nassert solution(\"2 10\\n1 1 2\\n1 1 2\\n1 1 2\\n2 2 2\") == 0\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 10\n1 1 2\n2 2 2\n3 2 1\"\"\") == \"0\"\nassert solution(\"\"\"3 30\n1 1 1\n5 2 3\n5 2 1\"\"\") == \"-2\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'as'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\nprint('Test passed')\n\n\"\"\"\n\nfrom collections import namedtuple\nfrom typing import NamedTuple, Tuple, List, Set\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n\nclass Crossword(NamedTuple):\n    rows: int\n    cols: int\n    grid: List[str]"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as\n\n''') == 'as'\nprint('Cool')\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\nas\nCool\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nas\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\nas\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka\no#a#\nkula\ni#a#\n\nkala\n\n-----\n4 4\nluka"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nprint(solution('4 4\\nluka\\no#a#\\nkula\\ni#a#'))\nprint(solution('4 4\\nluka\\no#a#\\nkula\\ni#as'))\n\n----INPUT----\n4 4\nluka\no#a#\nkula\ni#a#\n----OUTPUT----\nkala\n\n----INPUT----\n4 4\nluka\no#a#\nkula\ni#as\n----OUTPUT----\nas\n\n----INPUT----\n4 4\nlkja\no#a#\nkula\ni#a#\n----OUTPUT----\nlka\n\n----INPUT----\n2 4\nlkja\no#a#\nkula\ni#a#\n----OUTPUT----\nlka\n\n----INPUT----\n3 4\nluka\no#a#\nkula\ni#a#\n----OUTPUT----\nkala\n\n----INPUT----\n3 3\nlkja\no#a#\nkula\ni#a#\n----OUTPUT----\nlka\n\n----INPUT----\n3 2\nlkja\no#a#\nkula\ni#a#\n----OUTPUT----\nlka\n\n----INPUT----\n3 1\nlkja\no#a#\nkula\ni#a#\n----OUTPUT----\nkala\n\n----INPUT----\n2 2\nlkja\no#a#\n----OUTPUT----\nlka\n\n----INPUT----\n2 1\nlkja\no#a#\n----OUTPUT----\nkala\n\n\"\"\"\n\nr, c = map(int, input().split())\nwords = []\nfor _ in range(r):\n    words.append(list(input()))\n\nr1 = [0,0]"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\n\n-----Explanation-----\nThe crossword puzzle is:\nluka\no#a#\nkula\ni#a#\n\nThe lexicographically smallest word is kala, which starts at the second line and finishes at the fourth.\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\n-----Notes-----\n\n'''\nimport collections"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution(\n'''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution(\n'''4 4\nkula\ni#a#\nkula\ni#as''') == 'kila'\nassert solution(\n'''4 4\nkula\ni#a#\nkula\ni#as''') == 'kila'\nassert solution(\n'''4 4\nkula\ni#a#\nkula\ni#as''') == 'kila'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WNEENWEWWEENEENWNENEENWEWWEWWNWNWE\") == \"20\"\nassert solution(\"NSEW\") == \"4\"\nassert solution(\"WEWNENWEEWNW\") == \"13\"\nassert solution(\"WNNWEENENENWESWNENEENENWNWENENENWNWENENWNENWENWSWWNENENENWWWNNWENWNNWNWE\") == \"36\"\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WNWSWWNWWWWWWWWWWWWWWWWWWWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNW') == 'WNWSWWNWWWWWWWWWWWWWWWWWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNWNW'\nassert solution
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('WNWENWSE') == 'WNWENWSE'\nassert solution('SSEENWSESE') == 'SSEENWSES'\nassert solution('NENWSENWW') == 'NENWSENW'\nassert solution('NNWESWWW') == 'NWWESW'\n\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('NSEW') == 4\n\"\"\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WNEENW\") == 10\n\"\"\"\n\nimport sys\nimport re\n\npattern = r'[NSWE][M]?[NSWE][M]?[NSWE][M]?[NSWE]'\nmacro = r'\\d+'\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\n\nprint(solution(\"WNEENWEENEENE\"))\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution(\"0 4 2 2\") == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\".split()\n\nassert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\"\"\".split()\n\nassert solution(\"0 0 0 4\") == \"problems ahead\".split()\n\nassert solution(\"0 2 0 4\") == \"problems ahead\".split()\n\nassert solution(\"0 4 2 2\") == \"problems ahead\".split()"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\"\nassert solution(\"0 4 2 1\") == \"problems ahead\"\nassert solution(\"0 4 2 0\") == \"problems ahead\"\n\"\"\"\n\nimport itertools\n\ninput = input()\n\na, b, c, d = [int(x) for x in input.split(\" \")]\n\noperators = [\"+\", \"-\", \"*\", \"/\"]\n\nexpressions = [str(a) + \" \" + ops[0] + \" \" + str(b) + \" = \" + str(c) + \" \" + ops[1] + \" \" + str(d) for ops in itertools.product(operators, repeat=2)]\n\nexpressions = [expr for expr in expressions if eval(expr)]\n\nprint(\"\\n\".join(expressions) if expressions else \"problems ahead\")\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 2 3') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n\nassert solution('1 0 3 2') == 'problems ahead'\n\nassert solution('0 4 2 2') == 'problems ahead'\n\nassert solution('0 2 4 2') == 'problems ahead'\n\nassert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3 4\"\n) == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\n    \"0 4 2 2\"\n) == \"problems ahead\\n\"\nassert solution(\n    \"0 0 0 0\"\n) == \"problems ahead\\n\"\nassert solution(\n    \"1 2 3 4 0\"\n) == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n1 * 2 = 3 * 4\\n1 + 2 = 3 + 4\\n1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n1 * 2 = 3 * 4\\n1 + 2 = 3 + 4\\n1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\n    \"1 2 3 4 5\"\n) == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n1 * 2 = 3 * 4\\n1 + 2 = 3 + 4\\n1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n1 * 2 = 3 * 4\\n1 + 2 = 3 + 4\\n1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n1 * 2 = 3 * 4\\n1 + 2 = 3 + 4\\n1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"\nassert solution(\"0 0 0 0\") == \"problems ahead\"\nassert solution(\"1 1 1 1\") == \"problems ahead\"\n\n----"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution(\"0 4 2 2\") == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABBA CCBB\") == \"\"\"C..\nC..\nABBA\n.B..\n\"\"\"\nassert solution(\"BANANA PIDZAMA\") == \"\"\"P....\nI....\nD....\nZ....\nBANANA\n.M....\n.A....\n\"\"\"\nassert solution(\"MAMA TATA\") == \"\"\"T..\nMAMA\n.T..\n.A..\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABBA CCBB\") == '.C..\\n.C..\\nABBA\\n.B..'\nassert solution(\"ANAN PEPEP\") == '.P....\\n.P....\\nANAN\\n.P....'\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"BANANA PIDZAMA\"\n) == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\n\"MAMA TATA\"\n) == \".T..\\nMAMA\\n.T..\\n.A..\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BANANA PIDZAMA') == (\n    '.P....\\n'\n    '.I....\\n'\n    '.D....\\n'\n    '.Z....\\n'\n    'BANANA\\n'\n    '.M....\\n'\n    '.A....'\n)\n\nassert solution('MAMA TATA') == (\n    '.T..\\n'\n    'MAMA\\n'\n    '.T..\\n'\n    '.A..'\n)\n\n'''"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''BANANA PIDZAMA'''\n) == '''\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n'''\n\nassert solution(\n'''MAMA TATA'''\n) == '''\n.T..\nMAMA\n.T..\n.A..\n'''\n\nassert solution(\n'''ABBA PIZZA'''\n) == '''\n.C..\n.C..\nABBA\n.B..\n'''\n\nassert solution(\n'''BOMB CIPHER'''\n) == '''\n.B...\n.C...\n.M...\nBOMB CIPHER\n.I...\n.P...\n.E...\n'''\n\nassert solution(\n'''BCD BCDA'''\n) == '''\n.C..\n.C..\nBCD\n.A..\n.A..\n'''"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''ABBA\nCCBB''') == '''C..\nC..\nABBA\nB..'''\nassert solution('''A\nAA''') == '''A\nA\nAA'''\nprint(solution(stdin))\n\n\"\"\"\nfrom functools import reduce\nimport math\n\nclass Solution:\n    def __init__(self, A, B):\n        self.A = A\n        self.B = B\n\n    def solution(self):\n        N = len(self.A)\n        M = len(self.B)\n        \n        if N > M:\n            self.A, self.B = self.B, self.A\n            N, M = M, N\n        \n        cross = [ch for ch in set(self.A + self.B) if ch in self.A and ch in self.B]\n        cross = cross[0]\n        \n        print(cross)\n        crossIdxA = self.A.index(cross)\n        crossIdxB = self.B.index(cross)\n        \n        Aline = []\n        Bline = []\n        \n        for idx in range(0, N):\n            if idx < crossIdxA:\n                Aline.append('.')\n                Bline.append(self.B[crossIdxB - idx])\n            elif idx == crossIdxA:\n                Aline.append(self.A)\n                Bline.append('.')\n            elif idx < crossIdxB:\n                Aline.append('.')\n                Bline.append(self.A[crossIdxA - idx])\n            else:\n                Aline.append(self.B)\n                Bline.append('.')\n        \n        for _ in range(0, M):\n            print(''.join(Aline))\n            Aline.append('.')\n            print(''.join(Bline))\n            Bline.append('.')\n\nsol = Solution(input(), input())\nsol.solution()\n\"\"\"\n\nclass Solution:\n    def __init__(self, A, B):\n        self.A = A\n        self.B = B\n        self.A_len = len(A)\n        self.B_len = len(B)\n\n    def solution(self):\n        shared = {ch for ch in set(self.A + self.B) if ch in self.A and ch in self.B}\n        shared = shared.pop()\n\n        if shared not in self.A:\n            shared = self.B[0]\n        elif shared not in self.B:\n            shared = self.A[0]\n\n        # print(shared)\n\n        crossIdxA = self.A.index(shared)\n        crossIdxB = self.B.index(shared)\n\n        Aline = []\n        Bline = []\n\n        for idx in range(0, self.A_len):\n            if idx < crossIdxA:\n                Aline.append('.')\n                Bline.append(self.B[crossIdxB - idx])\n            elif idx == crossIdxA:\n                Aline.append(self.A)\n                Bline.append('.')\n            elif idx < crossIdxB:\n                Aline.append('.')\n                Bline.append(self.A[crossIdxA - idx])\n            else:\n                Aline.append(self.B)\n                Bline.append('.')\n        \n        for _ in range(0, self.B_len):\n            print(''.join(Aline))\n            Aline.append('.')\n            print(''.join(Bline))\n            Bline.append('.')\n\nsol = Solution(input(), input())\nsol.solution()"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BANANA PIDZAMA') == '\\n'.join(['.' * 4 + 'PIDZAMA', '.' * 5 + 'BANANA', '.' * 4 + 'A', '.' * 5 + 'M', '.' * 4 + 'A', '.' * 4 + 'N', '.' * 4 + 'A', '.' * 4 + 'P', '.' * 4 + 'I', '.' * 5 + 'D', '.' * 4 + 'Z', '.' * 4 + 'A', '.' * 4 + 'M', '.' * 4 + 'A', '.' * 4 + 'P'])\nassert solution('MAMA TATA') == '\\n'.join(['.' * 5 + 'M', '.' * 5 + 'A', '.' * 5 + 'M', '.' * 5 + 'A', '.' * 5 + 'T', '.' * 5 + 'A'])\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('A B') == 'A.B'\nassert solution('ABBA') == '.C..'\nassert solution('ABCD ABCD') == '.C...C..'\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('ABC ABD') == 'A. B. D.'\nassert solution('XY XZ') == 'X. Y. Z.'\nassert solution('MAMA TATA') == 'M. T. A. T. A.'\nassert solution('AGAGAGAGAGA') == 'A. A. A. A. A.'\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BANANA PIDZAMA\") == '\\n'.join(['.P....', '.I....', '.D....', '.Z....', 'BANANA', '.M....', '.A....'])\nassert solution(\"MAMA TATA\") == '\\n'.join(['.T..', 'MAMA', '.T..', '.A..'])\n\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\nprint(solution(stdin))"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\nprint(\"Success!\")\n\n--------------------------------------------"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26\\n') == '10'\nassert solution('2\\n1 365\\n20 28\\n') == '365'"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == 10\nassert solution('2\\n1 365\\n20 28') == 365\n\n----\n\n### **Most recent solution**\n\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\n\nSample Case 0:\nSample Input:\n3\n10 14\n13 17\n25 26\nSample Output:\n10\n\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n10 14\n13 17\n25 26\"\"\") == \"10\"\n\n\"\"\"\nIf the students planned to attend the event, they will surely come.\n\nAll the students are willing to participate in the event so they will definitely come.\n\nSince free food is served every day, there is no way to know whether free food is served in all the days.\n\nLet us calculate the total number of days that free food is served.\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 20\\n15 25\\n20 30\\n30 40\\n40 50\\n50 60\\n60\\n\") == \"30\"\nassert solution(\"3\\n10 20\\n20 30\\n30 40\\n40 50\\n50 60\\n60\\n\") == \"10\"\nassert solution(\"1\\n1 365\\n20 28\\n\") == \"365\"\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\n10 14\") == \"10\"\nassert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '0 1'\nassert solution('4') == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '0 1'\nassert solution('3') == '1 2'\nassert solution('4') == '2 4'\nassert solution('5') == '3 6'\nassert solution('6') == '4 8'\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == '0 1'\nassert solution(\"4\") == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '2 3'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n\"\"\"\n\nn = int(stdin.readline())\n\na = 0\nb = 0\nfor i in range(n):\n    b = b + 1 if i % 2 == 0 else b\n    a = a + 1 if i % 2!= 0 else a\n\nprint(a, b)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"1\") == \"0 1\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0 1'\nassert solution('1') == '1 0'\nassert solution('2') == '2 0'\nassert solution('3') == '3 0'\nassert solution('4') == '4 0'\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ('0 1', '0 1')\nassert solution('0 0 1 0') == ('0 1', '0 1')\nassert solution('0 0 0 1 0 0 0 0 1 1 0 0') == ('0 2', '1 3')\nassert solution('1 0 0 0 0 0 0 0 1 1 0 0') == ('0 1', '1 2')\nassert solution('0 0 0 0 0 0 0 0 0 0 1 1 0 0') == ('0 0', '0 0')\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2 3\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\\n\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 100\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\"\nassert solution(\"2 2\\n1 100\\n1 100\") == \"A 0 99\"\nassert solution(\"2 3\\n1 100\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\"\n\n\"\"\"\n\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == \"\"\"B 100 49\nA 1 197\nA 49 100\n0.1965897693\n\"\"\"\n\nassert solution(\"\"\"4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n\"\"\") == \"\"\"A 0 99\nA 0 99\nA 0 99\nA 0 99\n0.4974874372\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nprint('Success')"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n''') == '''\nB 100 49\nA 1 197\nA 49 100\n0.1965897693\n'''\n\nassert solution('''\n4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n''') == '''\nA 0 99\nA 0 99\nA 0 99\nA 0 99\n0.4974874372\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874320'\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nprint(solution(INPUT))\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n\"\"\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\nassert solution(\"10 2\\n7 1000 0\\n5 9999 0\\n6 9999 0\\n4 9999 0\\n3 9999 0\\n2 9999 0\\n1 9999 0\\n0 9999 0\") == \"A 0 9999\\nA 9999 9999\\n0 9999 9999\"\n\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == '168'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1\\n1\\n') == '1'\nassert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\n\"\"\"\n\nfrom typing import List\n\nfrom tools import timing\n\n\"\"\"\n[\uc81c\uc57d \uc870\uac74]\n\n1. \uc8fc\uc5b4\uc9c4 \ubc94\uc704\ub294 2 <= n <= 10^6, 1 <= ai <= 100\n2. \uc8fc\uc5b4\uc9c4 \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\ub294 \uc218 \uc785\ub825\uc2dc, \uc5d0\ub7ec\ub85c \ucc98\ub9ac\ub428\n\n[\uc804\ub7b5]\n1. \uba3c\uc800 \uc8fc\uc5b4\uc9c4 \ubc94\uc704 \ub0b4\uc5d0\uc11c, n\uac1c\uc758 \uc790\uc5f0\uc218\ub97c \uc0dd\uc131\n2. n \uac1c\uc758 \uc790\uc5f0\uc218\ub97c \uc81c\uacf1\ud55c \uac12\uc744 \uc800\uc7a5\n3. \ub2e4\uc74c \uc790\uc5f0\uc218\ub97c \uc785\ub825\ubc1b\uc558\uc744 \ub54c, \uadf8 \uc790\uc5f0\uc218\uc758 \uc790\ub9bf\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uc81c\uacf1\ud55c \uac12\uc744 \uc800\uc7a5\n4. \uadf8 \ub2e4\uc74c \uc790\uc5f0\uc218\ub97c \uc785\ub825\ubc1b\uc558\uc744 \ub54c, \uadf8 \uc790\uc5f0\uc218\uc758 \uc790\ub9bf\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uc81c\uacf1\ud55c \uac12\uc744 \uc800\uc7a5\n5. \ub9c8\uc9c0\ub9c9 \uc790\uc5f0\uc218\ub97c \uc785\ub825\ubc1b\uc558\uc744 \ub54c, \ucd5c\ub300\uac12\uc744 \ucd9c\ub825\n\n\ud14c\uc2a4\ud2b8 1 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 2 \u3009    \ud1b5\uacfc (0.04ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 3 \u3009    \ud1b5\uacfc (0.04ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 4 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 5 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 6 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 7 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 8 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 9 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 10 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 11 \u3009    \ud1b5\uacfc (0.06ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 12 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 13 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 14 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 15 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 16 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 17 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 18 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 19 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 20 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 21 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 22 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 23 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 24 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 25 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 26 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 27 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 28 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 29 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 30 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 31 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 32 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 33 \u3009    \ud1b5\uacfc (0.05ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 34 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 35 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 36 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 37 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 38 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 39 \u3009    \ud1b5\uacfc (0.05ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 40 \u3009    \ufffd"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n3\\n4') == '135', 'Wrong solution for input 3'\nassert solution('3\\n1\\n2\\n4') == '36', 'Wrong solution for input 4'\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 4 3 5\\n1 2') == '105'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\n'''\nfrom math import sqrt\n\nN = int(stdin.readline())\n\narr = [int(x) for x in stdin.read().split('\\n')]\n\ntotal_sum = 0\n\nfor i in range(len(arr)):\n    total_sum += arr[i]**2\n\nmax_value = 0\n\nfor j in range(len(arr)-1):\n    temp_sum = 0\n    for k in range(j+1, len(arr)):\n        temp_sum += arr[k]\n    max_value = max(max_value, (total_sum*temp_sum))\n\nprint(max_value)"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.sample_input_1) == solution.sample_output_1\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2\\n1\") == '6'\nprint(solution(\"5\\n2\\n1\\n4\\n3\\n5\"))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(Input)) == str(Output)\nprint(solution(str(Input)))\n\n-----Problem-----\nGiven a list of integers, find the maximal value of the expression (x_1^2 + x_2^2 +... + x_k^2) * (x_{k+1} + x_{k+2} +... + x_n).\n\n-----Solution-----"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 4 3 5\\n1 2\\n3 4\") == '168'\n\"\"\"\n\nn = int(input().strip())\n\nnums = [int(input().strip()) for _ in range(n)]\nprint(sum([i ** 2 for i in nums]) * sum(nums[1:]))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == \"168\"\n\n-----"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nA\\nB\\n0\") == \"AB\"\n\"\"\"\nfrom typing import List\n\nfrom utils import timing\n\n_MAX_INT = 2 ** 32 - 1\n\n\nclass UnionFind:\n    def __init__(self, n: int):\n        self.p = list(range(n))\n        self.r = [1] * n\n\n    def find(self, i: int) -> int:\n        if self.p[i]!= i:\n            self.p[i] = self.find(self.p[i])\n        return self.p[i]\n\n    def union(self, i: int, j: int):\n        pi, pj = self.find(i), self.find(j)\n        if pi!= pj:\n            if self.r[pi] > self.r[pj]:\n                pi, pj = pj, pi\n            self.p[pj] = pi\n            self.r[pi] += self.r[pj]\n\n\nclass Order:\n    def __init__(self, N: int, M: int, P: List[int], T: int):\n        self.N = N\n        self.M = M\n        self.P = P\n        self.T = T\n        self.adj = [set() for _ in range(N)]\n        for i in range(M):\n            self.adj[P[i]].add(i)\n\n    def _ant(self, i: int, d: int):\n        if d > self.T:\n            return\n        if i == self.N - 1:\n            self._union(self.N - 1, 0)\n        else:\n            for j in self.adj[i]:\n                self._ant(j, d + 1)\n            self._union(i, i + 1)\n\n    def _union(self, i: int, j: int):\n        pi, pj = self._find(i), self._find(j)\n        if pi!= pj:\n            self.P[pi], self.P[pj] = pj, pi\n\n    def _find(self, i: int):\n        if self.P[i]!= i:\n            self.P[i] = self._find(self.P[i])\n        return self.P[i]\n\n    def solve(self):\n        self._ant(0, 0)\n        return self.P\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\nA\\nB\\n') == 'BAC'\nassert solution('2\\nA\\nB\\n2\\nA\\nB\\n') == 'BAC'\nassert solution('2\\nA\\nB\\n2\\nB\\nA\\n') == 'ABB'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 ABC DEF 0') == 'CBADEF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n0\n''') == 'CDBEAF'\nassert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CDBEAF'\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('2 1\\nABC\\nDEF') == 'ABFCD'\nassert solution('6 5\\nQSBDY\\nOPXA\\nAEOGK\\nZHPIU') == 'QOYEIACZHBKS'\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"\n\nN1, N2 = [int(x) for x in input().split()]\norders = [input() for i in range(N1)]\norder2 = input()\nT = int(input())\n\norder1 = ''\nfor i in range(N1):\n    order1 += orders[order2.index(order1[-1])]\n\nfor _ in range(T):\n    for i in range(1, N1 + 1):\n        order2 = order2[:orders.index(order1[i - 1])] + order2[orders.index(order1[i - 1]):]\n        order1 = order1[:i] + order1[i:].replace(order1[i - 1], order2[0])\n\nprint(order1)\n\n\"\"\"\n3 3\nABC\nDEF\n2\n\nCAB\nDEA\nACD\n2\n\nAAB\nBCA\nDAA\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\n\"\"\"\n\nfrom collections import deque\nfrom functools import reduce\nfrom typing import Dict, List\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n2\n100 T\n100 T\n100 N''') == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == '1'\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == '3'\n\"\"\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n100 T\\n100 N\\n100 T\\n100 N\\n100 T\\n100 N') == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '1'\n\nprint(solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n'''))\n\nassert solution('''\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n''') == '4'\n\nprint(solution('''\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n'''))"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\n\n\"\"\"\n\nimport os\nimport sys\n\n\"\"\"\n\nThis is the function that will be called by the\nGrader class to test the solution.\n\nThe student function called by the Grader class should\ntake in a single parameter, which will be a string\nrepresenting the student's answer to the question asked.\n\nThe function should return True if the answer passed\nin is a valid answer to the question, and False if the\nanswer is invalid.\n\nThe details of the correct answer are not relevant here,\nbut may be included in the testing program if desired,\nand will be omitted from any results string returned by\nthis function.\n\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\n\"\"\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"1\"\nassert solution(\"1\\n5\\n20N\\n50T\\n80T\\n50T\\n30T\") == \"1\"\nassert solution(\"1\\n5\\n20T\\n50N\\n80T\\n50T\\n30T\") == \"1\"\nassert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30N\") == \"1\"\nassert solution(\"1\\n5\\n20T\\n50T\\n80N\\n50T\\n30T\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('1\\n5\\n20 N\\n50 N\\n80 N\\n50 N\\n30 T') == '1'\n\nprint(solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T'))\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n6 8\") == \"22\"\nassert solution(\"6 8\") == \"22\"\nassert solution(\"5 10\") == \"42\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"2 4\\n5 2\") == \"12\"\n\"\"\"\n\nn, m = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n1 3') == '6'\nassert solution('6 8\\n1 2\\n1 3\\n2 3\\n3 4\\n5 6') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == '6'\nassert solution('6 8\\n') == '22'\nprint('Success')\n\nSolution:\nx, y = map(int, stdin.split())\nprint(int(x * (x - 1) / 2 - y * (y - 1) / 2))\n\nHow to work out the cost of upgrading a road\n    \n    The cost of upgrading a road is the sum of the costs of the following:\n    1) Replacing the road with a dirt road\n    2) Replacing the road with a road of the same cost as the previous road\n    \n    However, the cost of replacing a road with a dirt road can be zero, and the cost of replacing a road with a road of the same cost as the previous road can be zero. Therefore, the cost of upgrading a road is the sum of the cost of replacing it with a dirt road and the cost of replacing it with a road of the same cost as the previous road.\n\nIn the example, the cost of upgrading the road from 3 to 4 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (4)\n\nSo the cost of upgrading from 3 to 4 is 0 + 4 = 4.\n\nA similar calculation can be done for any pair of cities in the kingdom:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (0)\n\nSo the cost of upgrading from 3 to 4 is 0 + 0 = 0.\n\nIn this example, the cost of upgrading the road from 2 to 4 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (0)\n\nSo the cost of upgrading from 2 to 4 is 0 + 0 = 0.\n\nThe cost of upgrading from 2 to 5 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (5)\n\nSo the cost of upgrading from 2 to 5 is 0 + 5 = 5.\n\nThe cost of upgrading from 2 to 6 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (5)\n\nSo the cost of upgrading from 2 to 6 is 0 + 5 = 5.\n\nThe cost of upgrading from 2 to 7 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (10)\n\nSo the cost of upgrading from 2 to 7 is 0 + 10 = 10.\n\nThe cost of upgrading from 2 to 8 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (10)\n\nSo the cost of upgrading from 2 to 8 is 0 + 10 = 10.\n\nThe cost of upgrading from 2 to 9 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (15)\n\nSo the cost of upgrading from 2 to 9 is 0 + 15 = 15.\n\nThe cost of upgrading from 2 to 10 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (15)\n\nSo the cost of upgrading from 2 to 10 is 0 + 15 = 15.\n\nThe cost of upgrading from 2 to 11 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (20)\n\nSo the cost of upgrading from 2 to 11 is 0 + 20 = 20.\n\nThe cost of upgrading from 2 to 12 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (20)\n\nSo the cost of upgrading from 2 to 12 is 0 + 20 = 20.\n\nThe cost of upgrading from 2 to 13 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (25)\n\nSo the cost of upgrading from 2 to 13 is 0 + 25 = 25.\n\nThe cost of upgrading from 2 to 14 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (25)\n\nSo the cost of upgrading from 2 to 14 is 0 + 25 = 25.\n\nThe cost of upgrading from 2 to 15 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (30)\n\nSo the cost of upgrading from 2 to 15 is 0 + 30 = 30.\n\nThe cost of upgrading from 2 to 16 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (30)\n\nSo the cost of upgrading from 2 to 16 is 0 + 30 = 30.\n\nThe cost of upgrading from 2 to 17 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (35)\n\nSo the cost of upgrading from 2 to 17 is 0 + 35 = 35.\n\nThe cost of upgrading from 2 to 18 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (35)\n\nSo the cost of upgrading from 2 to 18 is 0 + 35 = 35.\n\nThe cost of upgrading from 2 to 19 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2) Replacing the road with a road of the same cost as the previous road (40)\n\nSo the cost of upgrading from 2 to 19 is 0 + 40 = 40.\n\nThe cost of upgrading from 2 to 20 is the sum of:\n\n1) Replacing the road with a dirt road (0)\n2"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == 6\nassert solution(\"6 8\\n1 2 3 4 5 6 7\") == 22\nassert solution(\"1 4\\n1 2 3\") == 4\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n4 8') == '6'\nassert solution('6 8\\n8 1') == '22'\nassert solution('5 5\\n5 5') == '0'\nassert solution('1 1\\n2 4') == '0'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n') == '6'\nassert solution('6 8\\n') == '22'"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n6 8\") == \"22\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n6 8\") == \"22\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n6 8') == '22'\n\"\"\"\n\nimport sys\nimport numpy as np\n\n_, m = map(int, sys.stdin.readline().split())\n\narr = np.zeros((m, 2), dtype=int)\n\nfor i in range(m):\n    arr[i, :] = [int(x) for x in sys.stdin.readline().split()]\n\ncount = 0\nans = 0\n\nfor i in range(m):\n    tmp_count = 0\n    for j in range(m):\n        if (arr[i, 0] - arr[j, 0] == 1) and (arr[i, 1] - arr[j, 1] == 1):\n            tmp_count += 1\n    if tmp_count >= count:\n        count = tmp_count\n        ans = arr[i, 0]\n\nprint(ans)\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(['3 3', '1 2 3', '6 5 4', '7 8 9']) == '1'\n\"\"\"\n\nimport sys\nimport math\nimport numpy"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\nassert solution('1 4\\n4 3 2 1') == '0'\nassert solution('1 4\\n4 3 2 1') == '0'\n\nassert solution('3 2\\n2 1') == '2'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(int(input()))"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('1 4\\n4 3 2 1') == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('4 4\\n4 3 2 1\\n4 3 2 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"10\"\n) == \"28\"\n\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n2\\n3\\n4\\n5') == '5\\n2\\n3\\n4\\n5'"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\"\n\nimport math\n\nx = int(input())\nn = int(input())\n\ntotal = 0\nfor i in range(n):\n    total += int(input())\n\nprint(math.floor(x * (n + 1) - total))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '16'\nassert solution('2\\n3\\n4\\n5\\n') == '16'\nassert solution('5\\n5\\n5\\n5\\n5\\n') == '0'\n\nimport math"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\nassert solution('5\\n2\\n5\\n1\\n4') == '10'\n\n\"\"\"\nfrom itertools import zip_longest"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\\n\") == \"16\"\nassert solution(\"100\\n3\\n10\\n2\\n12\\n\") == \"28\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"amiss\") == \"hiss\"\nassert solution(\n\"octopuses\") == \"no hiss\"\nassert solution(\n\"Hiss\") == \"hiss\"\n\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('kiss') == 'hiss'\nassert solution('mississippi') == 'hiss'\nassert solution('his') == 'hiss'\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('amississippi') == 'hiss'\nassert solution('mississippi') == 'no hiss'\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('abcde') == 'no hiss'\nassert solution('hisshiss') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\"\n\nfrom typing import Iterator\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"yzyzyzyzyzy\") == \"hiss\"\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hello\") == \"no hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"osaid\") == \"hiss\"\nassert solution(\"pohs\") == \"hiss\"\n\"\"\"\n\nimport collections\nimport itertools\nimport re\n\nclass Solution:\n    def solve(self, input_string: str) -> str:\n        if input_string.count('s') > 1:\n            return 'hiss'\n        else:\n            return 'no hiss'\n\n\nsolution = Solution().solve\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"kiss\") == \"hiss\"\nassert solution(\"mississippi\") == \"hiss\"\nassert solution(\"hiss\") == \"hiss\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nc++\\nC++\\nC\\nc#\\n') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\\n') == '5'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nlines = sys.stdin.read().split('\\n')\n\nd = defaultdict(list)\nfor i in lines[1:]:\n    d[i.lower()].append(i)\n\nprint(len(lines)-1 - sum([len(d[k]) for k in d.keys()]))\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(read_input()) == write_output()"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nc++\\nC++\\nc\\nc#\") == \"3\"\nprint(\"All tests passed.\")\n\n----Problem-----\n\nYou are asked to write a function that takes in a string, and returns a new string, where any space is replaced with a hyphen.\n\n-----Solution-----\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nC#\") == 3\nassert solution(\"5\\nc++\\nC++\\nC\\nC#\\nArtificial Intelligence\") == 5\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nc\\nc\\n\\n\\n') == '3'\nassert solution('5\\nCryptography\\nBlockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nc#\\n\") == 3\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\nc++\nC++\nc\nc#''') == '3'\nassert solution('''5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux''') == '5'\n'''\n4\nc++\nC++\nc\nc#\n\n5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux\n'''"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('12') == 1\nassert solution('1 2') == 0\nassert solution('1 2 3 4') == 0\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nc++\\nc\\nc#\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nassert solution('5\\nCryptography\\nBlockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\n'''\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"TCG\") == 21\nassert solution(\"TCCG\") == 17\nassert solution(\"TCGTG\") == 15\nassert solution
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nassert solution(\"CC\") == 7\nassert solution(\"GG\") == 1\nassert solution(\"TT\") == 0\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\"\n\nimport re\nfrom collections import Counter\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\nprint(solution(\"TCGTTC\"))\nprint(solution(\"CCC\"))\n\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\n-----Solution-----\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\nprint('All tests passed.')\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nprint('Test passed')"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nprint('The code ran Correctly')"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"225\\n315\") == \"180\"\nassert solution(\"0\\n360\") == \"180\"\n\n\"\"\"\n\n\n\"\"\"\nAnalysis\n\n\u2022 A solution that takes O(1) time is possible by using only the trigonometric functions.\n\n\u2022 A solution that takes O(1) time is possible by using only the trigonometric functions.\n\n\u2022 A solution that takes O(1) time is possible by using only the trigonometric functions.\n\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315\\n45\") == \"90\"\n\n\"\"\"\n\nfrom math import atan, degrees, sqrt, pi\nfrom typing import List\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"315 45\") == \"90\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''315\n45''') == '90'\nassert solution('''180\n270''') == '90'\nassert solution('''0\n0''') == '0'\nassert solution('''0\n360''') == '0'\nassert solution('''180\n0''') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\nassert solution(\"315\", \"30\") == \"-90\"\nassert solution(\"150\", \"350\") == \"150\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"315\") == \"90\"\nassert solution(\"180\") == \"180\"\nassert solution(\"270\") == \"90\"\nassert solution(\"0\") == \"0\"\nassert solution(\"180\") == \"180\"\n\"\"\"\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\nassert solution('45\\n180') == '90'\nassert solution('315\\n45\\n180') == '90'\nassert solution('315\\n45\\n180\\n270') == '0'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\nprint(solution('5\\n1\\n23\\n18\\n13\\n99'))\n\nassert solution('5\\n23\\n18\\n13\\n99') == '3'\n\nprint(solution('5\\n23\\n18\\n13\\n99'))\n\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\n\nprint(solution('5\\n11\\n20\\n33\\n40\\n55'))\n\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\n\nprint(solution('5\\n11\\n20\\n33\\n40\\n55'))\n\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\n\nprint(solution('5\\n11\\n20\\n33\\n40\\n55'))"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution(\n    '5\\n11\\n20\\n33\\n40\\n55') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == 3\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1\n23\n18\n13\n99\n''') == \"3\"\n\nassert solution('''\n5\n11\n20\n33\n40\n55\n''') == \"1\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n100\") == \"2\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\n\nimport re"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 23 18 13 99\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"1\"\nassert solution(\"WWBBWW\") == \"0\"\nassert solution(\"WWWBBBW\") == \"1\"\nassert solution(\"WWWWWWW\") == \"0\"\nassert solution(\"WWWWBWBWWW\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBWW') == '0'\nassert solution('WWBWBWBWBW') == '1'\nassert solution('WWBBBWWW') == '1'\nassert solution('WWBWBWW') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWWWBB') == '1'\n\nprint('all tests passed.')\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('BBWB') == 1\nassert solution('BWBBW') == 0\nassert solution('WWWWBWBWWWBBWWWW') == 1\nassert solution('WWWWBBBWWWWBBBWWW') == 1\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('WWBWBB') == '1'\nassert solution('WWWWBBW') == '0'\n\"\"\"\n\nimport unittest\n\nclass Solution(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWWWWWWWWWBBBWWWWWWWWWBBWWWWWWWWW') == '0'\nassert solution('WWWWBBW') == '1'\nassert solution('WWWBBBW') == '1'\nassert solution('WWWWWWWWWWWWBBBBBWWWWWWWWWBBWWWWWWWWWWWW') == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBWW\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWWBWWBWBWW\") == \"0\"\nassert solution(\"BBBBBWWWWWBBWBWBW\") == \"1\"\n\"\"\"\n\n\nimport itertools\nimport functools\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBBWW\") == 1\n\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\nWe can first count the number of black and white stones in the input. The total number of black and white stones in a circular arrangement is odd if and only if there are an odd number of black and white stones.\n\nThen we check if the number of white stones is odd or the number of black stones is odd. If one of them is odd and the other is even, then we can return True, since the difference between the number of white and black stones is one. Otherwise, we can return False, since there is no way we can remove exactly one white stone or exactly one black stone from the arrangement."
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\nprint('The solution is correct!')\n\n------\nA good question for this problem is to test the correctness of your solution, but before you do so, think about the time and space complexity of your solution. What is its runtime and space complexity?\n\nA naive solution would be to do a nested for loop and calculate the area of every quadrilateral. Then we would iterate over every pair of sides and check whether there is a larger quadrilateral with the side lengths in the pair that can be formed. That would take O(N^3) time and O(1) space, where N is the total number of sides.\n\nIf we can improve the space complexity, we can improve the runtime complexity by calculating the area of a quadrilateral only once and then keeping track of the maximum area seen so far. This will take O(1) time and O(N) space, where N is the total number of sides.\n\nWe can do this by calculating the area of a quadrilateral only once, and then saving the maximum area found so far. When we iterate over the sides, we can check whether the area of the current quadrilateral is larger than the maximum area so far, and if so, we can update the maximum area.\n\nHere is the algorithm we'll use to solve the problem:\n\nCalculate the area of the current quadrilateral using the formula A = \\frac{s_1 s_2}{2} l_3 + \\frac{s_1 s_3}{2} l_2 + \\frac{s_2 s_3}{2} l_1\nCalculate the area of the maximum area seen so far\nIterate over the sides of the quadrilateral\n    Calculate the area of the current quadrilateral\n    If the area of the current quadrilateral is larger than the maximum area so far,\n        update the maximum area\n    If the area of the current quadrilateral is larger than the maximum area seen so far,\n        update the maximum area seen so far\n    Return the maximum area seen so far\nWe will need to use a variable to keep track of the maximum area, since we will need to update it at each step. We will use a variable max_area for this purpose. At the beginning, we will initialize this variable to be the value of the quadrilateral itself.\n\nThen we will iterate over the sides of the quadrilateral, and we'll calculate the area of the current quadrilateral and compare it to the maximum area. If it is larger than the current maximum, we will update the maximum area. If it is larger than the maximum area seen so far, we will update the maximum area seen so far.\n\nIn the end, we will return the maximum area seen so far. This is where we'll need a variable to keep track of the maximum area, since we will need to return the maximum area when we're done.\n\nCode:\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\nassert solution(\"2 2 1 1\") == \"1.5\"\nassert solution(\"2 1 1 1\") == \"0.3333333333333335\"\nassert solution(\"2 2 1 1\") == \"1.5\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == '9'\n\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rrroobert') == 'robert'\nassert solution('rrrooobert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('roooobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rpooobert\") == \"robert\"\nassert solution(\"rpooobert\") == \"robert\"\n\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rrrooobert') == 'robert'\nassert solution('rrroobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"rrrrroobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"rrroobbar\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"xxoooobbxrtyyy\") == \"xxoooobyrt\"\nassert solution(\"xooooobbxrtyyy\") == \"xoobyrt\"\nassert solution(\"xxoooobbxrtyyyyy\") == \"xxoooobyrty\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rubber\") == \"rubber\"\nassert solution(\"adam\") == \"adam\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('aaabbbbaaaaaaaaa') == 'aaaa'\nassert solution('aaaaa') == 'aaaa'\nassert solution('bbbbbbbbbbbb') == 'bbbb'\n\"\"\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'robert'\n) == 'robert'\nassert solution(\n    'roooobert'\n) == 'robert'\nassert solution(\n    'rrroobert'\n) == 'robert'\nassert solution(\n    'rrroobert'\n) == 'robert'\nassert solution(\n    'rrrooobert'\n) == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 9 7') == '108 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"1000 9 7\"\"\") == \"\"\"108 4\"\"\"\nassert solution(\n\"\"\"1000 9 5\"\"\") == \"\"\"Impossible\"\"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print())"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1000 9 7''') == '108 4'\nassert solution('''1000 900 7''') == 'Impossible'\n\"\"\"\n\nv1, v2, s = [int(i) for i in input().split()]\n\nmax_v1 = v1\nmax_v2 = v2"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nimport sys\n\nV1, V2, S = map(int, sys.stdin.readline().split())\n\nans = 0\nwhile V1 <= S:\n    V1, V2 = V2, V1\n    ans += 1"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 9 7') == '108 4'\nprint(solution(input()))\n\"\"\"\nimport sys\n\ns, v1, v2 = (int(i) for i in sys.stdin.read().strip().split())"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\nassert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n..#\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\"\n\n\"\"\"\nimport numpy as np\n\nR, C = [int(num) for num in stdin.readline().split()]\n\nmatrix = [[num for num in stdin.readline().rstrip('\\n')] for row in range(R)]\nmatrix = np.array(matrix)"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\"\n\"\"\"\n\n\"\"\"\n--- Part Two ---\nMirko likes to have some fun and solve problems collaboratively.\n\nCurrently, Mirko is solving a problem. He has just been asked to divide the problem in $n$-sets of equal size so that the total work will be equal to one of the $n$-th powers of $2$. For instance, if $n = 3$, it means that the total work of Mirko must be divisible by 8.\n\nHe knows that the number of sets needed to solve the problem will always be at least 2. However, he also knows that he can start his search from a much larger value. Help Mirko find the minimum number of sets he needs to use.\n\n-----Input-----\nThe first line of input contains a single integer, $n$, denoting the size of the problem. The next line contains $n$ positive integers, each on a separate line, denoting the problem\u2019s given work. The next line contains $n$ positive integers, each on a separate line, denoting Mirko\u2019s initial search range.\n\nNote that the sum of the work given and the search range will always be divisible by $2^n$.\n\n-----Output-----\nThe output should consist of a single integer, denoting the minimum number of sets Mirko will use.\n\n-----Examples-----\nSample Input 1:\n3\n2 2 3\n4 5 6\n2 3\nSample Output 1:\n4\n\nSample Input 2:\n2\n8 13\n10 19\n4\nSample Output 2:\n2\n\nSample Input 3:\n4\n8 2 7 3\n4 10\n8 16\n4\nSample Output 3:\n2\n\"\"\"\n\n\"\"\"\n--- Part Three ---\nMirko just found out that he did report a wrong number of problems solved by the previous 3rd edition! He is very upset and demands that you help him to correct the mistake.\n\nFor instance, if the third line of the input is:\n\n2 2 3\n4 5 6\n1 1 1\n\ninstead of:\n\n4 5 6\n1 1 1\n\nthen the third line will be corrected to:\n\n4 5 6\n1 1 1\n\nIt seems Mirko has made a mistake counting the number of problems solved. Can you help him to find out the correct number of problems solved by the new input?\n\n-----Input-----\nThe input is given in exactly the same format as the previous part: the first line contains a single integer, $n$, denoting the size of the problem. The next line contains $n$ positive integers, each on a separate line, denoting the problem\u2019s given work. The next line contains $n$ positive integers, each on a separate line, denoting Mirko\u2019s initial search range.\n\nThe only difference from the previous part is that now the third line contains $n$ non-negative integers, each on a separate line, which may contain at most one \u20180\u2019.\n\n-----Output-----\nThe output should consist of a single line containing a single integer, denoting the correct number of problems solved by Mirko.\n\n-----Examples-----\nSample Input 1:\n3\n2 2 3\n4 5 6\n1 1 1\nSample Output 1:\n3\n\nSample Input 2:\n4\n8 2 7 3\n4 10\n8 16\n4\nSample Output 2:\n5\n\nSample Input 3:\n4\n8 2 7 3\n4 10\n8 16\n0\nSample Output 3:\n2\n\nSample Input 4:\n5\n8 2 7 3\n4 10\n8 16\n0 2\nSample Output 4:\n3\n\"\"\"\n\n\"\"\"\n--- Part Four ---\nMirko\u2019s parents have decided to give him a ride in a car.\n\nAs usual, the car is huge, but not that huge. It has the following parameters:\n\nDimensions:\nThe car is $L$ centimeters wide by $W$ centimeters high, measured along its length and width.\n\nCost per minute:\nThe cost to park in a car for $1$ minute is $P$.\n\nFor a given $L$ and $W$ the function\n\n$$\n\\begin{align*}\n\\text{cars_parked}(L, W, P) = &\\sum_{\\lceil\\frac{L}{w} \\rceil \\times \\lceil\\frac{W}{l} \\rceil - 1\\\\\n&= \\sum_{\\lceil\\frac{L}{w} \\rceil} \\sum_{\\lceil\\frac{W}{l} \\rceil} - 1\\\\\n&\\quad + \\sum_{\\lceil\\frac{L}{w} \\rceil} - 1\\\\\n&\\quad + \\sum_{\\lceil\\frac{W}{l} \\rceil} - 1\\\\\n&\\quad + \\sum_{\\lceil\\frac{L}{w} \\rceil} - 1\\\\\n&\\quad + - 1\\\\\n&\\quad + - 1\\\\\n&\\quad + - 1\\\\\n&\\quad + - 1\\\\\n&\\quad + - 1\\\\\n&= \\sum_{\\lceil\\frac{L}{w} \\rceil \\times \\lceil\\frac{W}{l} \\rceil - 1\n\\end{align*}\n$$\n\nis an integer, that is equal to the number of ways to park cars in the car park of size $L$ by $W$.\n\n-----Input-----\nThe input consists of three lines:\n\nThe first line contains $L$, the width of the car park.\nThe second line contains $W$, the width of the car.\nThe third line contains $P$, the cost per minute to park the car.\n\nConstraints:\n$1 \\leq L, W \\leq 100$, $1 \\leq P \\leq 200$.\n\n-----Output-----\nThe output should contain the number of ways to park the car, calculated via the function.\n\n-----Examples-----\nSample Input 1:\n8\n4\n4\nSample Output 1:\n11\n\nSample Input 2:\n8\n8\n12\nSample Output 2:\n0\n\nSample Input 3:\n8\n8\n4\nSample Output 3:\n1\n\"\"\"\n\n\"\"\"\n--- Part Five ---\nMirko was very upset that his parents did not provide him with a map.\n\nHe asked his friend Slavko to get a map that shows the whole city, but only the buildings that are on fire.\n\nThe map is represented as a table of characters, where each character is:\n\n$\\texttt{#}$ if the building is"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\\n\") == \"1\\n1\\n2\\n1\\n0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1 1 2 1 0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9 0 0 0 0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9 0 0 0 0\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\narr = [list(map(str, stdin.readline().strip())) for _ in range(n)]\n\nd = [0] * n\n\nfor i in range(n):\n    d[i] = m - sum([1 for j in range(m) if arr[i][j] == 'X'])\n\nfor i in range(n - 1):\n    for j in range(m):\n        if arr[i][j] == '.' and arr[i + 1][j] == 'X':\n            d[i + 1] -= 1\n\nans = [0] * 5\nans[0] = sum([1 for i in range(n) if d[i] >= 0])\nans[1] = sum([1 for i in range(n) if d[i] == 0])\nans[2] = sum([1 for i in range(n) if d[i] == 1])\nans[3] = sum([1 for i in range(n) if d[i] == 2])\nans[4] = sum([1 for i in range(n) if d[i] == 3])\n\nprint(*ans)\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\"\n\nimport sys\n\nn = int(input())\nnumbers = [int(i) for i in sys.stdin.readlines()]\nsum = 0\nfor i in numbers:\n    sum += i**n\nprint(sum)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n212\n1253''') == '1953566'\n\nassert solution('''5\n23\n17\n43\n52\n22''') == '102'\n\n\"\"\"\n\nN = int(stdin.readline())\n\np = []\n\nfor i in range(N):\n    p.append(int(stdin.readline()))\n\ns = 0\nfor i in range(N):\n    s += p[i] ** (i+1)\n\nprint(s)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"12\") == \"12\"\nassert solution(\"12\\n23\") == \"212\"\nassert solution(\"12\\n34\") == \"1234\"\nassert solution(\"12\\n34\\n56\") == \"1234\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected_result\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\\n21\\n125\") == \"212\"\nassert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('12\\n34') == '58'\n'''\n\nimport math\n\nn = int(input())\np = []\nfor _ in range(n):\n    p.append(int(input()))\n\nsum = 0\nfor i in range(len(p)):\n    sum += p[i] ** (i + 1)\n\nprint(sum)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nprint(solution(\"212\\n1253\"))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.0 0.0 0.0\"\nprint(\"Test PASSED\")\n\n\"\"\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\n----\n\nimport math\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\"\"\"\n\norange, apple, pineapple = list(map(int, input().split()))\ni, j, k = list(map(int, input().split()))\n\ni = orange * i / (i + j + k)\nj = apple * j / (i + j + k)\nk = pineapple * k / (i + j + k)\n\nprint(i - orange, j - apple, k - pineapple)\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(read_input()) == write_output()\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.0 0.0 0.0\"\n\nfrom dataclasses import dataclass\nfrom typing import List\nfrom math import floor\n\n@dataclass(frozen=True)\nclass Person:\n    orange: int\n    apple: int\n    pineapple: int\n\n@dataclass(frozen=True)\nclass Juice:\n    orange: int\n    apple: int\n    pineapple: int\n\n    def __str__(self) -> str:\n        return f\"Orange: {self.orange}, Apple: {self.apple}, Pineapple: {self.pineapple}\"\n\n    def __add__(self, other: 'Juice') -> 'Juice':\n        return Juice(\n            orange=self.orange + other.orange,\n            apple=self.apple + other.apple,\n            pineapple=self.pineapple + other.pineapple,\n        )\n\n    def __sub__(self, other: 'Juice') -> 'Juice':\n        if self.orange < other.orange:\n            raise Exception(\"No enough orange\")\n        if self.apple < other.apple:\n            raise Exception(\"No enough apple\")\n        if self.pineapple < other.pineapple:\n            raise Exception(\"No enough pineapple\")\n        return Juice(\n            orange=self.orange - other.orange,\n            apple=self.apple - other.apple,\n            pineapple=self.pineapple - other.pineapple,\n        )\n\n    def __lt__(self, other: 'Juice') -> bool:\n        return self.orange < other.orange and self.apple < other.apple and self.pineapple < other.pineapple\n\n    def __gt__(self, other: 'Juice') -> bool:\n        return not self < other"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\nprint('All tests passed.')\n\n-----\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 10 10\\\\n3 3 3') == '0.000000 0.000000 0.000000'\n\nassert solution('9 9 9\\\\n3 2 1') == '0.000000 3.000000 6.000000'\n\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nassert solution('foss<<ritun') == 'forritun'\nassert solution('a<<b') == 'a'\nassert solution('a<<<<<<b') == 'a'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\nprint(solution(\"a<bc<\"))\nprint(solution(\"foss<<rritun\"))"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"a<bc<\"\n) == \"b\"\nassert solution(\n    \"foss<<rritun\"\n) == \"forritun\"\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"foss<<rritun<\") == \"forritun\"\nassert solution(\"foss<<rritun<>\") == \"forritun\"\nassert solution(\"a<>bc<rritun<>\") == \"bcrritun\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('foss<<ritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n'''"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RSA-OAEP') == 'RSA'\nassert solution('RSA1') == 'RSA'\nassert solution('RSA2') == 'RSA'\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n\nstdin = input()\nprint(stdin.replace('-', ''))\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''Knuth-Morris-Pratt\nMirko-Slavko''') == 'MS'\nassert solution('''KMP\nMS''') == 'KMP'\nassert solution('''RSA\nSSLv2\nDiffie-Hellman\nDSA\n''') == 'RSA'\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('Mathematical Logic') == 'ML'\nassert solution('Python 3') == 'P3'\nassert solution('An\u00e1lisis') == 'A'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Hello-World\") == \"HW\"\nassert solution(\"AbCdEfGh-IjKl\") == \"ABCDEFGHI\"\nassert solution(\"AbCdEf-GhiJkl\") == \"ABCDEFGHI\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Wagner-Fischer\") == \"WF\"\nassert solution(\"Fischer-Wagner\") == \"FW\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nprint(\"Success\")\n\nTry to solve this and additional lab tasks in the most elegant way possible.\nAvoid working with huge files and create tests for small snippets of code.\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Mirko-Slavko') == 'MS'\nassert solution('KMP') == 'KMP'\nassert solution('ZZZ-YYY') == 'ZY'\nassert solution('ZY-YYY') == 'ZY'\nassert solution('ZZ-YY') == 'ZY'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\nSample Input 3:\nM-S-H\nSample Output 3:\nMSH\n\nSample Input 4:\nM-S-H-O-R-T\nSample Output 4:\nMSHO\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\nimport collections\nimport math\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"Province or Gold\"\nassert solution(\"1 0 0\") == \"Province or Gold\"\nassert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"1 1 1\") == \"Estate or Copper\"\n\"\"\"\n\nG, S, C = map(int, input().split())"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == solution(\"0 1 0\")\nassert solution(input()) == solution(\"2 1 0\")\nassert solution(input()) == solution(\"1 1 0\")\nassert solution(input()) == solution(\"0 0 1\")\nassert solution(input()) == solution(\"2 0 1\")\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"1 1 1\") == \"Province or Silver\"\nassert solution(\"3 1 1\") == \"Province or Gold\"\nassert solution(\"3 2 1\") == \"Province or Duchy\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 0') == 'Estate or Copper'\nassert solution('0 1 0') == 'Province or Gold'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 2 0') == 'Province or Silver'\nassert solution('3 1 0') == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 1 1') == 'Province or Silver'\nassert solution('2 1 2') == 'Province or Gold'\nassert solution('2 1 3') == 'Province or Duchy'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 0 0\") == \"Province or Gold\"\n\"\"\"\n\nG, S, C = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n\"\"\"\nimport sys"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\nassert solution(\"6 1\\n100 100\") == \"100.00\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nd, s = map(int, stdin.readline().split())\n\nprint(round(((k * (100 - d) + (n - k) * s) / n) * 100, 6)) if (n - k) * s > k * (100 - d) else print(\"impossible\")\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\nimport math\nn, k = map(int, stdin.readline().split())\nd, s = map(int, stdin.readline().split())"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n70 50\n''') == '90.00'\nassert solution('''\n10 3\n80 90\n''') == '75.7142857'\n\nprint(solution(input()))\n\n------Solution------\n\nn, k = map(int, stdin.readline().split())\nd, s = map(float, stdin.readline().split())\np = k / n\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '2 1\\n70 50'\n) == '90.0'\n\nassert solution(\n    '10 3\\n80 90'\n) == '75.7142857'\n\nassert solution(\n    '7 3\\n20 50'\n) == 'impossible'\n\nassert solution(\n    '8 6\\n50 100'\n) == '100.0'\n\nassert solution(\n    '6 5\\n50 100'\n) == '100.0'"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '10\\n1 2 3 4 5 6 7 8 9 10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\nassert solution('5\\n1 2 3 4') == '5\\n1 2 3 4'\nassert solution('5\\n5 1 2 3 4') == '5\\n1 2 3 4'"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2 3 1 5 4 7 6') == '4 2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\n\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4\\n1 2 3 4') == '1 2 3 4'\nassert solution('4\\n1 2 3 5') == '1 2 3 5'\nassert solution('4\\n1 2 3 5 6') == '1 2 3 5 6'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint('HERE')\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nprint(\"Passed!\")"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"8 9\") == \"8 9\"\n\nimport sys"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n\nhours, minutes = [int(x) for x in stdin.split()]\n\nhours = hours - 45"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"2.718281\") == \"3.141593\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.999999'\n\nimport math\n\nn = float(input())\na = 1\nfor i in range(1, n + 1):\n    a = a * (1 / math.e)\nprint(a)\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0\") == \"1.0\"\nassert solution(\"2.718281\") == \"1.1414213562373095\"\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2.0) == '1.414214'\nprint(solution(2.0))\nassert solution(2.0) == '1.414214'\nprint(solution(2.0))\n\"\"\"\n\nimport math\n\nn = input().rstrip()\na = str(math.log(int(n),math.e))\nprint(a)\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nprint(solution(\"2.000000\"))\n'''\nimport math\nimport numpy as np\nfrom fractions import Fraction"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2.000000') == '1.414214'\n\nassert solution('0.36788') == '0.676625'\n\nassert solution('1.000000') == '1.000000'\n\nassert solution('0.36788') == '0.676625'\n\nassert solution('2.718281') == '2.718281'"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2.718281') == '1.414214'\nassert solution('1.414214') == '1.414214'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.000000') == '1.414214'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3:', 'WA'\nassert solution('50') == '50:', 'WA'\n\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"1\") == \"1:\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3\\n2,1'\nassert solution('50') == '50\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3: \\n2,1\\n\"\nassert solution(\"50\") == \"50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3\\n2,1'\nassert solution('50') == '50\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == '3: \\n2,1'\nassert solution(50) == '50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3: \"\nassert solution(\"50\") == \"50: \"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"50\") == \"50\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3:2,1'\nassert solution('50') == '50:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n\nSample Input 1:\n4\nSample Output 1:\n4:\n2,1\n2,2\n3,2\n5,4\nSample Input 2:\n5\nSample Output 2:\n5:\n2,1\n2,2\n3,2\n5,4\n5,5\nSample Input 3:\n1\nSample Output 3:\n1:1\n\nSample Input 4:\n2\nSample Output 4:\n2:1\n2:2\nSample Input 5:\n5\nSample Output 5:\n5:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\nSample Input 6:\n2\nSample Output 6:\n2:1\n2:2\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3:\", \"case 1\"\nassert solution(\"50\") == \"50:\", \"case 2\"\nassert solution(\"8\") == \"8:\", \"case 3\"\nprint(\"tests passed\")\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"THE RAIN IN SPAIN\"\n) == \"yes\"\nassert solution(\n\"IN THE RAIN AND THE SNOW\"\n) == \"no\"\nassert solution(\n\"THE RAIN IN SPAIN IN THE PLAIN\"\n) == \"yes\"\n\nassert solution(\n\"THE RAIN IN SPAIN\"\n) == \"yes\"\nassert solution(\n\"IN THE RAIN AND THE SNOW\"\n) == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == 'yes'\nassert solution(\"LONDONDERRY SCRIM SHOT\") == 'yes'\nassert solution(\"WATERWASHING MACHINES\") == 'yes'\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\n\n\nclass WordRepeatException(Exception):\n    pass\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n\nimport sys\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        if len(stdin) <= 1:\n            return \"SSKKKHHS\"\n        stdin_list = list(stdin)\n        # init\n        s_list = [1] * len(stdin)\n        r_list = [0] * len(stdin)\n        b_list = [0] * len(stdin)\n        l_list = [0] * len(stdin)\n        r_index = len(stdin) - 1\n        b_index = len(stdin) - 1\n        l_index = len(stdin) - 1\n        r_count = 1\n        b_count = 1\n        l_count = 1\n        move_dict = {\"R\": 0, \"B\": 1, \"L\": 2}\n        while True:\n            if (r_list[r_index] == 1 and b_list[b_index] == 1 and l_list[l_index] == 1):\n                break\n            elif (stdin_list[r_index] == \"R\"):\n                r_index -= 1\n                s_list[r_index] = 1\n                r_count += 1\n                if (r_index < 0):\n                    r_index = len(stdin) - 1\n                    r_count = 1\n            elif (stdin_list[b_index] == \"B\"):\n                b_index -= 1\n                s_list[b_index] = 1\n                b_count += 1\n                if (b_index < 0):\n                    b_index = len(stdin) - 1\n                    b_count = 1\n            elif (stdin_list[l_index] == \"L\"):\n                l_index -= 1\n                s_list[l_index] = 1\n                l_count += 1\n                if (l_index < 0):\n                    l_index = len(stdin) - 1\n                    l_count = 1\n            elif (r_list[r_index] == 0):\n                r_index += 1\n                r_list[r_index] = 1\n                if (r_index == len(stdin) - 1):\n                    r_index = 0\n                    r_count = 1\n            elif (b_list[b_index] == 0):\n                b_index += 1\n                b_list[b_index] = 1\n                if (b_index == len(stdin) - 1):\n                    b_index = 0\n                    b_count = 1\n            elif (l_list[l_index] == 0):\n                l_index += 1\n                l_list[l_index] = 1\n                if (l_index == len(stdin) - 1):\n                    l_index = 0\n                    l_count = 1\n        s_list = s_list[::-1]\n        for i, s in enumerate(s_list):\n            if (s == 0):\n                s_list[i] = \"C\"\n        return \"\".join(s_list)"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nset P = {R, B, L}\nP = {L, B, R}\n\nCombo Breaker:\nThe Combo Breaker must be a single move, \nand it must be from any set in P,\nand it must be the first move in P,\nand it must be after the first 2 moves in P.\n\nCombo Breaker:\nRakes -> Slices\nBites -> Kicks\nLasers -> Shields\n\nCombo Breaker:\nRakes -> Rakes\nBites -> Bites\nLasers -> Lasers\n\nCombo Breaker:\nRakes -> Rakes\nBites -> Bites\nLasers -> Lasers\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n\nimport sys\nimport timeit\n\nclass Solution:\n    def __init__(self):\n        self.map = {\n            'R': 'S',\n            'B': 'C',\n            'L': 'H',\n        }\n        self.value_map = {\n            'S': 'C',\n            'C': 'S',\n            'H': 'L',\n            'L': 'H',\n        }\n    def solution(self, stdin: str) -> str:\n        taken = []\n        for c in stdin:\n            if c not in self.map:\n                taken.append(c)\n                continue\n            if len(taken) == 0:\n                taken.append(self.map[c])\n            else:\n                last = taken.pop()\n                taken.append(self.map[last] + self.map[c])\n        return ''.join(taken)"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nassert solution(\"RBRRRBBLLR\") == \"CCSCCCHHH\"\nassert solution(\"RBRRRRBBLLRRR\") == \"CCCCCCHHHHH\"\nassert solution(\"RRRRRBBBBLLRRRR\") == \"SSSSSSSSSSSSSSSSS\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3 7''') == '''1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7'''\n\nassert solution('''2 4 7''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7'''\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\nprint(\"Correct!\")"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nprint(solution(\"2 3 7\"))"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\\n\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\nassert solution(\"2 4 7\\n\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\"\"\"\n\nimport unittest\n\nclass TestFizzBuzz(unittest.TestCase):\n\n    def test_solution_01(self):\n        \"\"\" Should print 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, 17, Fizz, 19, Buzz, Fizz, 22, 23, Fizz, Buzz, 26, Fizz, 28, 29, FizzBuzz, 31, 32, Fizz, 34, Buzz, Fizz, 37, 38, Fizz, Buzz, 41, Fizz, 43, 44, FizzBuzz, 46, 47, Fizz, 49, Buzz, Fizz, 52, 53, Fizz, Buzz, 56, Fizz, 58, 59, FizzBuzz, 61, 62, Fizz, 64, Buzz, Fizz, 67, 68, Fizz, Buzz, 71, Fizz, 73, 74, FizzBuzz, 76, 77, Fizz, 79, Buzz, Fizz, 82, 83, Fizz, Buzz, 86, Fizz, 88, 89, FizzBuzz, 91, 92, Fizz, 94, Buzz, Fizz, 97, 98, Fizz, Buzz \"\"\"\n\n        numbers = '2 3 7\\n'\n        expected = '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n        self.assertEqual(solution(numbers), expected)\n\n    def test_solution_02(self):\n        \"\"\" Should print 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, 17, Fizz, 19, Buzz, Fizz, 22, 23, Fizz, Buzz, 26, Fizz, 28, 29, FizzBuzz, 31, 32, Fizz, 34, Buzz, Fizz, 37, 38, Fizz, Buzz, 41, Fizz, 43, 44, FizzBuzz, 46, 47, Fizz, 49, Buzz, Fizz, 52, 53, Fizz, Buzz, 56, Fizz, 58, 59, FizzBuzz, 61, 62, Fizz, 64, Buzz, Fizz, 67, 68, Fizz, Buzz, 71, Fizz, 73, 74, FizzBuzz, 76, 77, Fizz, 79, Buzz, Fizz, 82, 83, Fizz, Buzz, 86, Fizz, 88, 89, FizzBuzz, 91, 92, Fizz, 94, Buzz, Fizz, 97, 98, Fizz, Buzz \"\"\"\n\n        numbers = '2 4 7\\n'\n        expected = '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n        self.assertEqual(solution(numbers), expected)"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('2 3 5') == '2\\nFizz\\n5'\n\n'''\n\n\n\nfrom typing import List"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 7\") == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 2) == \"It hadn't snowed this early in 3 years!\"\nassert solution(10, 0) == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n3 3 3 2''') == 'It hadn't snowed this early in 3 years!'\nassert solution('''2 10\n0 100''') == 'It hadn't snowed this early in 0 years!'\nassert solution('''10 3\n0 100\n50 50\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100''') == 'It hadn\\'t snowed this early in 0 years!'\nassert solution('''10 3\n0 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100''') == 'It hadn\\'t snowed this early in 0 years!'\nassert solution('''1 100\n100''') == 'It hadn\\'t snowed this early in 0 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 10') == 'It hadn\\'t snowed this early in 0 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nfrom typing import List, Dict\nimport itertools\nimport math\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10\") == \"7\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 1\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(10, 2) == 2\n\nassert solution(10, 10) == 7\n\nassert solution('10 2') == 2\n\nassert solution('10 10') == 7\n\nassert solution('3 2') == 1"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10') == 7\nassert solution('10 2') == 2\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2') == 2\nassert solution('10 10') == 7\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n10 10') == '7'\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == 7\nassert solution(\"10 2\") == 2\nassert solution(\"5 7\") == 1\nassert solution(\"1 10\") == 1\nassert solution(\"100 10\") == 36\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\nSample Input 3:\nsalk\nSample Output 3:\nsalc\n\nSample Input 4:\nuqljv\nSample Output 4:\nqjlvu\n\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\n'''\n\nimport re\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\"\"\"\nimport math"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('nq') == 'nq'\nassert solution('kjasbvnj') == 'kjasbvnj'\nassert solution('abcd') == 'abcd'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"kost\") == \"stok\"\nassert solution(\"bombonisuuladici\") == \"boudonuimilcbsai\"\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"zaxkvbnyxpxo\") == \"zaxkvbnyxpxo\"\nassert solution(\"lvhwzdkzsppr\") == \"lvhwzdkzsppr\"\nassert solution(\"mjgqkwjmzrrq\") == \"mjgqkwjmzrrq\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaska\") == \"kakasi\"\nassert solution(\"akaskj\") == \"akasjk\"\n\"\"\"\n\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"juljul\") == \"julju\"\nassert solution(\"kajak\") == \"kajak\"\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"kakosi\") == \"kakosi\"\nassert solution(\"zwrt\") == \"zwrt\"\nassert solution(\"koisk\") == \"koisk\"\nassert solution(\"zxcvbnmkoisk\") == \"zxcvbnmkoisk\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ('','')\nassert solution('1\\n1') == ('1', '0')\nassert solution('2\\n1') == ('2', '1')\nassert solution('4\\n1') == ('4', '0')\nassert solution('8\\n1') == ('8', '0')\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '3 1'\nassert solution('6') == '4 2'\nassert solution('7') == '8 3'\nassert solution('8') == '8 4'\nassert solution('9') == '9 5'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\nassert solution(\"11\") == \"9 4\"\nassert solution(\"100\") == \"9 23\"\nassert solution(\"16\") == \"9 7\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 1\") == \"8 2\"\nassert solution(\"7\\n1 1\") == \"8 3\"\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"8 1\"\nassert solution(\"5\") == \"8 2\"\nassert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\nassert solution(\"8\") == \"8 4\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n3 2') == '8 2'\nassert solution('7\\n5 3') == '8 3'\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"8 2\"\n\"\"\"\n\nimport sys\nfrom math import ceil, log2"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('apples and pears') == 'YES'\nassert solution('rotten') == 'NO'\n\"\"\"\nfrom re import search\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('a b') == 'a b'\nassert solution('a b c') == 'a b c'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"stairs\", 2, ['erres', 'airs', 'aires'], ['eet', 'eat'], [('apples', 'and', 'pears'), ('plates of meat')]) == 'YES\\nNO\\nYES\\nYES\\nNO'\nassert solution(\"drought\", 2, ['aught', 'ought', 'aut', 'acht'], ['ought', 'outte', 'out', 'oute'], [('tasty','sprout'), ('difficult', 'route'), ('worried', 'and', 'fraught'), ('forever', 'in', 'doubt')]) == 'YES\\nYES\\nYES\\nNO\\nNO'\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n') == 'YES\\nNO\\nYES\\nNO\\n'\nassert solution('drought\\n2\\naught ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and pursued\\nforever in doubt\\napples and pears\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\n'\nassert solution('hot\\n2\\nhey\\nno\\ntwo\\n') == 'NO\\nYES\\n'\nassert solution('yogurt\\n1\\naeiou\\n1\\nxyz\\n') == 'NO\\nNO\\n'\n\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n2\\ntasty sprout\\ndifficult route\\nworried and spelled\\nforever in doubt\\napples and pears\") == \"YES\\nNO\\nYES\\nYES\\nNO\\n\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apples and pears') == 'YES'\nassert solution('tasty sprout') == 'NO'\nassert solution('difficult route') == 'YES'\nassert solution('worried and dour t') == 'NO'\nassert solution('forever in doute') == 'NO'\n\"\"\"\n\nfrom typing import List, TextIO"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"stairs\", 2, [\"erres airs ears ares aires\", \"eet eat\"], 2, [\"apples and pears\", \"plates of meat\"]) == \"YES\\nNO\"\nassert solution(\"drought\", 2, [\"aught ought aut acht\", \"ought oubt outte out oute\"], 5, [\"tasty sprout\", \"difficult route\", \"worried and dreaded\", \"forever in doubt\", \"apples and pears\"]) == \"YES\\nYES\\nYES\\nYES\\nNO\"\n\n\"\"\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apples\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"apples and pears\") == \"YES\"\nassert solution(\"tasty sprout\") == \"NO\"\nassert solution(\"apples and pears\") == \"YES\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\n-----Solution-----\n\n\"\"\"\n\n\"\"\"\nUnderstand\n\ninput: word to be guessed, permutation of the alphabet\noutput: result of the game, WIN or LOSE\n\nplan\n\ncreate a list of characters from permutation\ncreate a dict with key = character, value = number of times character appears in word\nfor each char in word, if it appears in dict,\n    print char at its corresponding index in word\n\n\"\"\"\n\n\"\"\"\nSolution:\nimport sys\n\ninput = sys.stdin.read()\n\nword = input.split('\\n')[0]\nperm = input.split('\\n')[1]\n\nperm = [chr(ord('A')+i) for i in range(26)]\n\nans = 'LOSE'\n\nfor char in perm:\n    if word.count(char) > 0:\n        ans = 'WIN'\n        print(ans)\n        break\n\nprint(ans)\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()\n\nword = input.split('\\n')[0]\nperm = input.split('\\n')[1]\n\nperm = [chr(ord('A')+i) for i in range(26)]\n\nans = 'LOSE'\n\nfor char in perm:\n    if word.count(char) > 0:\n        ans = 'WIN'\n        print(ans)\n        break\n\nprint(ans)"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"\nassert solution(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\") == \"LOSE\"\nassert solution(\"WXYZ\") == \"WIN\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\n\nclass Solution:\n    def hangman(self, word: str, letters: str) -> str:\n        # Initialize variables\n        word_length = len(word)\n        guesses = list()\n        result = ''\n        # Add all guesses to the list\n        for i in letters:\n            guesses.append(i)\n        # Check if the word is in the list\n        if ''.join(guesses) == word:\n            result = 'WIN'\n        # Iterate through the word to check if the guess is in the word\n        else:\n            for i in range(word_length):\n                if word[i] in guesses:\n                    result = result + word[i]\n                else:\n                    result = result + '_'\n        # Check if the game is over\n        if result == '_' * word_length:\n            result = 'LOSE'\n        return result\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n    \n    def test_hangman(self):\n        with patch('builtins.input', side_effect=['HANGMAN']):\n            assert self.solution.hangman(stdin) == 'WIN'\n        with patch('builtins.input', side_effect=['BANANA']):\n            assert self.solution.hangman(stdin) == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\nprint(solution(\"HANGMAN\"))\nprint(solution(\"BANANA\"))\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(HANGMAN) == 'WIN'\nassert solution(BANANA) == 'LOSE'\n\"\"\"\n\nimport unittest\n\nclass Hangman(object):\n    def __init__(self, word: str, permutation: str):\n        self.word = word\n        self.permutation = permutation\n        self.len_word = len(word)\n        self.len_permutation = len(permutation)\n\n    def is_win(self):\n        for i, ch in enumerate(self.word):\n            if self.permutation[i]!= ch:\n                return False\n        return True\n\n    def is_lose(self):\n        for ch in self.permutation:\n            if ch not in self.word:\n                return False\n        return True\n\n    def run(self):\n        num_guesses = 0\n        while True:\n            guess = self.guess()\n            num_guesses += 1\n            if self.is_win():\n                return f\"WIN, {num_guesses}\"\n            if self.is_lose():\n                return f\"LOSE, {num_guesses}\"\n\n    def guess(self):\n        guess = input().upper()\n        return guess\n\nclass TestHangman(unittest.TestCase):\n    def test_is_win(self):\n        word = \"hangman\"\n        permutation = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n        hangman = Hangman(word, permutation)\n        self.assertTrue(hangman.is_win())\n\n    def test_is_lose(self):\n        word = \"banana\"\n        permutation = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n        hangman = Hangman(word, permutation)\n        self.assertTrue(hangman.is_lose())\n\n    def test_guess(self):\n        word = \"banana\"\n        permutation = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n        hangman = Hangman(word, permutation)\n        self.assertEqual(hangman.guess(), 'A')\n        self."
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\nprint('Hangman', solution('HANGMAN'))\nprint('Banana', solution('BANANA'))\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"JOE\", \"BOB\", \"ANDY\", \"AL\", \"ADAM\"]) == \"DECREASING\"\nassert solution([\"HOPE\", \"ALI\", \"BECKY\", \"JULIE\", \"MEGHAN\", \"LAUREN\", \"MORGAN\", \"CARLI\", \"MEGAN\", \"ALEX\", \"TOBIN\"]) == \"NEITHER\"\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected_result\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n\") == \"DECREASING\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"HOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\nassert solution(\"\") == \"NEITHER\"\n\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == \"DECREASING\"\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == \"NEITHER\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n'''\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\nassert solution(\"4\\nJOE\\nBOB\\nAL\\nADAM\") == \"INCREASING\"\nassert solution(\"6\\nALEX\\nHOPE\\nJOE\\nANDY\\nBECKY\\nCARLI\") == \"INCREASING\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NEITHER'\nassert solution('HOPE') == 'INCREASING'\nassert solution('ALI') == 'DECREASING'\nassert solution('JULIE') == 'NEITHER'\nassert solution('TOBIN') == 'NEITHER'\n\n'''\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nnames = []\nfor i in range(N):\n    names.append(sys.stdin.readline().strip())\n\nnames.sort()"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\"\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\\nNo winner!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\n\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\n\") == \"George wins!\"\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\n\"\n\"\"\"\n\nwith open('test_input.txt') as f:\n    stdin = f.read()\n\nn, p, m = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n\nnames = {}\nfor i in range(1, n+1):\n    names[stdin.split('\\n')[i]] = 0\n\nfor i in range(m):\n    name, score = stdin.split('\\n')[i+1].split(' ')\n    names[name] += int(score)\n\nprint(' '.join([k for k, v in names.items() if v >= p]))\nprint('No winner!')"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"\"\"George wins!\nJess wins!\n\"\"\", solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"\"\"George wins!\nJess wins!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"Nina wins!\nJess wins!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"No winner!\n\"\"\", solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1''') == '''Nina wins!\nJess wins!'''\nassert solution('''4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\nSample Output 2:\nNina wins!\nJess wins!\nNo winner!''') == 'No winner!'\n\"\"\"\n\na = int(stdin[0])\nb = int(stdin[1])\nc = int(stdin[2])\n\ns = 0\nx = []\n\nfor i in range(a):\n    x.append([stdin[i + 3]])\n    for j in range(b):\n        x[i].append(int(stdin[i + 3 + j + 3]))\n        s += x[i][j]\n\nx.sort(key=lambda x: x[1])\n\nfor i in range(c):\n    if s > b:\n        break\n    s -= x[c - i - 1][1]"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\\nNo winner!\", \"Wrong answer\"\nprint(\"Passed\")\n\n-----Challenge-----\nIf you managed to get that far, we\u2019ve given you some additional practice. Can you solve this with O(1) memory?\n\n\"\"\"\n\nimport operator\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == 'George wins!\\nJess wins!\\nNo winner!', 'Check your solution'\nprint('Tests passed!')\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\"\"\") == \"\"\"George wins!\nJess wins!\nNo winner!\"\"\"\nassert solution(\"\"\"4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\"\"\") == \"\"\"Nina wins!\nJess wins!\nNo winner!\"\"\"\n\n\"\"\"\nThis problem was asked by Google.\n\nGiven a string, return the first recurring character in it, or null if there is no recurring character.\n\nFor example, given the string \"acbbac\", return \"b\". Given the string \"abcdef\", return null.\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '3'\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\nSample Input 1:\n3 -2 -2 3 2\nSample Output 1:\n3.0\n\nSample Input 2:\n-1 -1 -1 1 1\nSample Output 2:\n0.0\n\nSample Input 1:\n-100 -100 -100 100 100\nSample Output 1:\n100.0\n\nSample Input 2:\n-2 -2 -2 2 2\nSample Output 2:\n2.0\n\nSample Input 1:\n-999 -999 -999 999 999\nSample Output 1:\n999.0\n\nSample Input 2:\n-999 -999 -999 999 999\nSample Output 2:\n999.0\n\nSample Input 1:\n-999 -999 -999 999 999\nSample Output 1:\n999.0\n\nSample Input 2:\n-9999 -9999 -9999 9999 9999\nSample Output 2:\n9998.0\n\nSample Input 1:\n-1000 -1000 -1000 1000 1000\nSample Output 1:\n1000.0\n\nSample Input 2:\n-10 -10 -10 11 11\nSample Output 2:\n10.0\n\nSample Input 1:\n-1 -1 -1 1 1\nSample Output 1:\n0.0\n\nSample Input 2:\n-1 -1 -1 1 1\nSample Output 2:\n0.0\n\nSample Input 1:\n-2 -2 -2 2 2\nSample Output 1:\n2.0\n\nSample Input 2:\n-2 -2 -2 2 2\nSample Output 2:\n2.0\n\nSample Input 1:\n-3 -3 -3 3 3\nSample Output 1:\n3.0\n\nSample Input 2:\n-3 -3 -3 3 3\nSample Output 2:\n3.0\n\nSample Input 1:\n-4 -4 -4 4 4\nSample Output 1:\n4.0\n\nSample Input 2:\n-4 -4 -4 4 4\nSample Output 2:\n4.0\n\nSample Input 1:\n-1000 -1000 -1000 1000 1000\nSample Output 1:\n1000.0\n\nSample Input 2:\n-9999 -9999 -9999 9999 9999\nSample Output 2:\n9998.0\n\nSample Input 1:\n-10000 -10000 -10000 9999 9999\nSample Output 1:\n9998.0\n\nSample Input 2:\n-10000 -10000 -9999 9999 9999\nSample Output 2:\n9998.0\n\nSample Input 1:\n-3 -3 -3 3 3\nSample Output 1:\n3.0\n\nSample Input 2:\n-3 -3 -3 3 3\nSample Output 2:\n3.0\n\nSample Input 1:\n-4 -4 -4 4 4\nSample Output 1:\n4.0\n\nSample Input 2:\n-4 -4 -4 4 4\nSample Output 2:\n4.0\n\nSample Input 1:\n-5 -5 -5 5 5\nSample Output 1:\n5.0\n\nSample Input 2:\n-5 -5 -5 5 5\nSample Output 2:\n5.0\n\nSample Input 1:\n-6 -6 -6 6 6\nSample Output 1:\n6.0\n\nSample Input 2:\n-6 -6 -6 6 6\nSample Output 2:\n6.0\n\nSample Input 1:\n-7 -7 -7 7 7\nSample Output 1:\n7.0\n\nSample Input 2:\n-7 -7 -7 7 7\nSample Output 2:\n7.0\n\nSample Input 1:\n-1 -1 -1 1 1\nSample Output 1:\n0.0\n\nSample Input 2:\n-1 -1 -1 1 1\nSample Output 2:\n0.0\n\nSample Input 1:\n-2 -2 -2 2 2\nSample Output 1:\n2.0\n\nSample Input 2:\n-2 -2 -2 2 2\nSample Output 2:\n2.0\n\nSample Input 1:\n-3 -3 -3 3 3\nSample Output 1:\n3.0\n\nSample Input 2:\n-3 -3 -3 3 3\nSample Output 2:\n3.0\n\nSample Input 1:\n-4 -4 -4 4 4\nSample Output 1:\n4.0\n\nSample Input 2:\n-4 -4 -4 4 4\nSample Output 2:\n4.0\n\nSample Input 1:\n-5 -5 -5 5 5\nSample Output 1:\n5.0\n\nSample Input 2:\n-5 -5 -5 5 5\nSample Output 2:\n5.0\n\nSample Input 1:\n-6 -6 -6 6 6\nSample Output 1:\n6.0\n\nSample Input 2:\n-6 -6 -6 6 6\nSample Output 2:\n6.0\n\nSample Input 1:\n-7 -7 -7 7 7\nSample Output 1:\n7.0\n\nSample Input 2:\n-7 -7 -7 7 7\nSample Output 2:\n7.0\n\nSample Input 1:\n-1 -1 -1 1 1\nSample Output 1:\n0.0\n\nSample Input 2:\n-1 -1 -1 1 1\nSample Output 2:\n0.0\n\nSample Input 1:\n-2 -2 -2 2 2\nSample Output 1:\n2.0\n\nSample Input 2:\n-2 -2 -2 2 2\nSample Output 2:\n2.0\n\nSample Input 1:\n-3 -3 -3 3 3\nSample Output 1:\n3.0\n\nSample Input 2:\n-3 -3 -3 3 3\nSample Output 2:\n3.0\n\nSample Input 1:\n-4 -4 -4 4 4\nSample Output 1:\n4.0\n\nSample Input 2:\n-4 -4 -4 4 4\nSample Output 2:\n4.0\n\nSample Input 1:\n-5 -5 -5 5 5\nSample Output 1:\n5.0\n\nSample Input 2:\n-5 -5 -5 5 5\nSample Output 2:\n5.0\n\nSample Input 1:\n-6 -6 -6 6 6\nSample Output 1:\n6.0\n\nSample Input 2:\n-6 -6 -6 6 6\nSample Output 2:\n6.0\n\nSample Input 1:\n-7 -7 -7 7 7\nSample Output 1:\n7.0\n\nSample Input 2:\n-7 -7 -7 7 7\nSample Output 2:\n7.0\n\nSample Input 1:\n-1 -1 -1 1 1\nSample Output 1:\n0.0\n\nSample Input 2:\n-1 -1 -1 1 1\nSample Output 2:\n0.0\n\nSample Input 1:\n-2 -2 -2 2 2\nSample Output 1:\n2.0\n\nSample Input 2:\n-2 -2 -2 2 2\nSample Output 2:\n2.0\n\nSample Input 1:\n-3 -3 -3 3 3\nSample Output 1:\n3.0\n\nSample Input 2:\n-3 -3 -3 3 3\nSample Output 2:\n3.0\n\nSample Input 1:\n-4 -4 -4 4 4\nSample Output 1:\n4.0\n\nSample Input 2:\n-4 -4 -4 4 4\nSample Output 2:\n4.0\n\nSample Input 1:\n-5 -5 -5 5 5"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\nassert solution('5 0 0 0 4 4') == '5.0'\nassert solution('5 1 0 1 6 3') == '5.5'\nassert solution('5 -1 0 1 6 3') == '6.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '156'\n) == '165'\n\nassert solution(\n    '330'\n) == '0'\n\nassert solution(\n    '842'\n) == '858'\n\nassert solution(\n    '931'\n) == '0'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"330\") == 0\nassert solution(\"156\") == 165\nassert solution(\"499\") == 599\nassert solution(\"555\") == 555\nassert solution(\"699\") == 699\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"156\") == \"165\"\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('330') == '0'\nassert solution('156') == '165'\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"156\") == \"165\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('156') == '165'\nassert solution('331') == '0'\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\n\"\"\"\nfrom string import ascii_letters\nfrom random import randint\nfrom math import log10\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('330') == '0'\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"156\") == \"165\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == '4'\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == '3'\n\n'''\nIn the first week, Zac can complete 4 tasks. In the second week, he can complete 3 tasks. In the third week, he can complete 2 tasks. In the fourth week, he can complete 1 task.\n'''"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == 3\n\"\"\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\n\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n\nprint('Success')"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4', 'Simple'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3', 'Couple of tasks'\n\nprint(\"Everything OK\")\n\n------------------------------------------------------------------------------------------------------------------------\n\n<a href=\"https://stepik.org/lesson/36285/step/7?auth=login&unit=307970\">\n\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430, \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0443\u0447\u0430\u0441\u0442\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435 Unicode \u0431\u0443\u0434\u0435\u0442 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u0438\u043b\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u0445, \u043d\u043e \u043d\u0435 \u0446\u0438\u0444\u0440\u0430\u043c\u0438\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0432\u0441\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \"human\" \u043d\u0430 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \"computer\"\ufeff \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input:\n\nacademy\nprogramming is not difficult\nit is full of \"human\" things\n\nSample Output:\n\nacademy\nprogramming is not difficult\nit is full of \"computer\" things\n\nSample Input:\n\nacademy\nhumanity\nwhat we think we become\n\nSample Output:\n\nacademy\ncomputerity\nwhat we think we become\n\nSample Input:\n\nacademy\nprogramming is not \"human\"\nprogramming is not \"fun\"\nprogramming is not \"fun\"\n\nSample Output:\n\nacademy\nprogramming is not \"computer\"\nprogramming is not \"computer\"\nprogramming is not \"computer\"\n\n\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0431\u0443\u0434\u0435\u0442 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u0440\u043e\u043a \u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u043e\u0442\u0432\u0435\u0442\u0435.\n\nSample Input 1:\n\nacademy\nprogramming is not \"fun\"\nprogramming is not \"fun\"\nprogramming is not \"fun\"\n\nSample Output 1:\n\n6\n2\n1\n\nSample Input 2:\n\nacademy\nhumanity\nwhat we think we become\n\nSample Output 2:\n\n10\n3\n1\n\nSample Input 3:\n\nacademy\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\nwhat we think we become\n\nSample Output 3:\n\n30\n7\n1\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0438\u0445 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435. \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e, \u0430 \u043d\u0435 \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043b\u043e\u0432 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438. \u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u043b\u043e\u0432\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043d\u043e \u0438 \u0441\u0442\u0440\u043e\u043a\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n>>> solution('academy', 'humanity')\n6\n2\n1\n\n>>> solution('programming is not fun', 'what we"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\n\"\"\"\n\na, b = map(int, input().split())\nt = list(map(int, input().split()))\ne = list(map(int, input().split()))\nt.sort()\ne.sort()\ni, j = 0, 0\nans = 0\nwhile i < len(t) and j < len(e):\n    if t[i] <= e[j]:\n        ans += 1\n        i += 1\n    j += 1\nprint(ans)"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\n\nt = [int(x) for x in sys.stdin.readline().split()]\n\nl = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\nprint('Passed!')\n\n------Problem Description------\nProfessor Zac is trying to finish a collection of tasks during the first week at the start of the term. He knows precisely how long each task will take, down to the millisecond. Unfortunately, it is also Frosh Week. Zac\u2019s office window has a clear view of the stage where loud music is played. He cannot focus on any task when music is blaring.\n\nThe event organizers are also very precise. They supply Zac with intervals of time when music will not be playing. These intervals are specified by their start and end times down to the millisecond.\n\nEach task that Zac completes must be completed in one quiet interval. He cannot pause working on a task when music plays (he loses his train of thought). Interstingly, the lengths of the tasks and quiet intervals are such that it is impossible to finish more than one task per quiet interval!\n\nGiven a list of times $t_ i$ (in milliseconds) that each task will take and a list of times $\\ell _ j$ (in milliseconds) specifying the lengths of the intervals when no music is playing, what is the maximum number of tasks that Zac can complete?\n\n-----Input-----\nThe first line of input contains a pair of integers $n$ and $m$, where $n$ is the number of tasks and $m$ is the number of time intervals when no music is played. The second line consists of a list of integers $t_1, t_2, \\ldots, t_ n$ indicating the length of time of each task. The final line consists of a list of times $\\ell _1, \\ell _2, \\ldots, \\ell _ m$ indicating the length of time of each quiet interval when Zac is at work this week.\n\nYou may assume that $1 \\leq n,m \\leq 200000$ and $100000 \\leq t_ i, \\ell _ j \\leq 199999$ for each task $i$ and each quiet interval $j$.\n\n-----Output-----\nOutput consists of a single line containing a single integer indicating the number of tasks that Zac can accomplish from his list during this first week.\n\n-----Examples-----\nSample Input 1:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\nSample Output 1:\n4\n\nSample Input 2:\n4 4\n180000 185000 199999 100000\n199999 180000 170000 120000\nSample Output 2:\n3\n\n------Problem Description------\nProfessor Zac is trying to finish a collection of tasks during the first week at the start of the term. He knows precisely how long each task will take, down to the millisecond. Unfortunately, it is also Frosh Week. Zac\u2019s office window has a clear view of the stage where loud music is played. He cannot focus on any task when music is blaring.\n\nThe event organizers are also very precise. They supply Zac with intervals of time when music will not be playing. These intervals are specified by their start and end times down to the millisecond.\n\nEach task that Zac completes must be completed in one quiet interval. He cannot pause working on a task when music plays (he loses his train of thought). Interstingly, the lengths of the tasks and quiet intervals are such that it is impossible to finish more than one task per quiet interval!\n\nGiven a list of times $t_ i$ (in milliseconds) that each task will take and a list of times $\\ell _ j$ (in milliseconds) specifying the lengths of the intervals when no music is playing, what is the maximum number of tasks that Zac can complete?\n\n-----Input-----\nThe first line of input contains a pair of integers $n$ and $m$, where $n$ is the number of tasks and $m$ is the number of time intervals when no music is played. The second line consists of a list of integers $t_1, t_2, \\ldots, t_ n$ indicating the length of time of each task. The final line consists of a list of times $\\ell _1, \\ell _2, \\ldots, \\ell _ m$ indicating the length of time of each quiet interval when Zac is at work this week.\n\nYou may assume that $1 \\leq n,m \\leq 200000$ and $100000 \\leq t_ i, \\ell _ j \\leq 199999$ for each task $i$ and each quiet interval $j$.\n\n-----Output-----\nOutput consists of a single line containing a single integer indicating the number of tasks that Zac can accomplish from his list during this first week.\n\n-----Examples-----\nSample Input 1:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\nSample Output 1:\n4\n\nSample Input 2:\n4 4\n180000 185000 199999 100000\n199999 180000 170000 120000\nSample Output 2:\n3\n\n------Problem Description------\nProfessor Zac is trying to finish a collection of tasks during the first week at the start of the term. He knows precisely how long each task will take, down to the millisecond. Unfortunately, it is also Frosh Week. Zac\u2019s office window has a clear view of the stage where loud music is played. He cannot focus on any task when music is blaring.\n\nThe event organizers are also very precise. They supply Zac with intervals of time when music will not be playing. These intervals are specified by their start and end times down to the millisecond.\n\nEach task that Zac completes must be completed in one quiet interval. He cannot pause working on a task when music plays (he loses his train of thought). Interstingly, the lengths of the tasks and quiet intervals are such that it is impossible to finish more than one task per quiet interval!\n\nGiven a list of times $t_ i$ (in milliseconds) that each task will take and a list of times $\\ell _ j$ (in milliseconds) specifying the lengths of the intervals when no music is playing, what is the maximum number of tasks that Zac can accomplish from his list during this first week?\n\n-----Input-----\nThe first line of input contains a pair of integers $n$ and $m$, where $n$ is the number of tasks and $m$ is the number of time intervals when no music is played. The second line consists of a list of integers $t_1, t_2, \\ldots, t_ n$ indicating the length of time of each task. The final line consists of a list of times $\\ell _1, \\ell _2, \\ld"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == 3\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '10'\nassert solution('''42\n84\n252\n420\n840\n126\n42\n84\n420\n126''') == '1'\nassert solution('''0\n1\n2\n39\n40\n41\n0\n1\n2\n40\n41\n0''') == '6'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '10'\nassert solution('''0\n1\n2\n3\n4\n5\n6\n7\n8\n9''') == '9'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n7\\n1\\n2\\n3') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('1\\n42\\n840\\n126\\n420\\n252\\n4\\n2\\n3\\n1') == '1'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"6\"\nassert solution(\"1\\n42\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\"\n) == \"10\"\nassert solution(\n    \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"\n) == \"1\"\nassert solution(\n    \"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\"\n) == \"1\"\nassert solution(\n    \"39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1\"\n) == \"6\"\nassert solution(\n    \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n10\\n10\\n10\"\n) == \"10\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == 10\n\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == 1\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n0') == 0\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n2') == 6\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42') == 6"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 34\") == \"no\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('1 1') == 'no'\n\"\"\"\n\nn, b = map(int, stdin.split())"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''13 3''') == 'yes'\nassert solution('''1 0''') == 'yes'\n\nprint('Hooray!')\n\"\"\"\n\n\"\"\"\n\u2022    For a given collection of $N$ files with $n_i$ bits, the maximum possible number of bits for a file is $n_i + n_1 + n_2 + \u2026 + n_N + n_{max}$ where $n_{max}$ is the length of the longest file.\n\u2022    Thus, it is always possible to make $n_{max}$ files, each of which will be of length at most $b$ bits.\n\u2022    The problem therefore asks whether it is possible to make all $n_{max}$ files of length at most $b$ bits in the given collection of $N$ files.\n\nSolution:\nThe maximum number of bits possible for a given collection of files can be computed as\nmax(n_1 + n_2 + \u2026 + n_N + n_{max}).\n\nFor each file of length n, we can make at most n bits.\nSo it is possible to make all n_i + n_{i+1} + n_{i+2} + \u2026 + n_{N+1} + n_{max} bits.\n\nLet us consider the total number of bits needed to store all files in the collection.\n\nSum of the length of all files.\nLet us denote this total number of bits by T.\nSo, T = n_1 + n_2 + \u2026 + n_N + n_{max}.\n\nLet us consider the total number of bits needed to store all files of length n.\nLet us denote this total number of bits by t_n.\nSo, t_n = n_1 + n_2 + \u2026 + n_{n+1}.\n\nThus, we see that the total number of bits needed to store all files of length n is always\nequal to t_n + t_{n+1} + \u2026 + t_{max} = n + T - n + 1.\n\nThus, the problem boils down to asking whether t_{max} <= b.\n\nIf this is true, then it is possible to make all n_i + n_{i+1} + n_{i+2} + \u2026 + n_{N+1} + n_{max} bits.\n\nIf this is not true, then it is impossible to make all n_i + n_{i+1} + n_{i+2} + \u2026 + n_{N+1} + n_{max} bits.\n\nThe code is given below.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3\\n') == 'yes'\nassert solution('1 0\\n') == 'yes'\nassert solution('10 10\\n') == 'no'\nassert solution('10 9\\n') == 'yes'\nassert solution('10 10\\n') == 'no'\n\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"4 0\") == \"no\"\nassert solution(\"4 1\") == \"yes\"\nassert solution(\"6 0\") == \"no\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 1\") == \"no\"\nassert solution(\"14 2\") == \"no\"\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nThe Riemann Hypothesis\nThe Riemann Hypothesis is a famous, but non-factual, mathematical conjecture in mathematics. In particular, it can be used to determine whether a given number is theoretically bounded in size by a specified constant (e.g., in the case of random bit strings).\n\nLet $n$ be a natural number, and let $a$ be a natural number with $0 \\le a < n$.\n\nSuppose $b$ is an integer such that $2^b < n$.\n\nLet $x_0$ be the smallest positive number in the range $0 \\le x_0 \\le 2^b$.\n\nLet $x_1$ be the largest positive number in the range $2^b \\le x_1 \\le 2^b+1$.\n\nThen $n$ can be written in base $2$ as $n = x_0 + 2 \\cdot (x_1 - x_0)$.\n\nWe call $x_0$ and $x_1$ the \u201cleast and largest\u201d digits of $n$, respectively.\n\nLet $f(n)$ be the number of \u201cleast\u201d digits $x_0$ in $n$ that are also \u201clargest\u201d digits $x_1$ in $n$.\n\nIf $f(n) > 1$, then the Riemann Hypothesis is falsified. Otherwise, the Riemann Hypothesis is held true.\n\nNote that $f(n)$ is the number of digits of $n$ that are smaller than the least digit $x_0$ and larger than the largest digit $x_1$.\n\nGiven:\n$n$ and $b$\n\nReturn:\n\"yes\" if the Riemann Hypothesis is true, otherwise \"no\"\n\n-----Input-----\nThe input consists of two integers $n$ and $b$ ($1 \\le n, b \\le 50$).\n\n-----Output-----\nThe output should contain a single line with the single word \"yes\" or \"no\".\n\n-----Examples-----\nSample Input 1:\n22 5\nSample Output 1:\nyes\n\nSample Input 2:\n22 2\nSample Output 2:\nno\n\nSample Input 3:\n100 125\nSample Output 3:\nno\n\"\"\"\n\n\"\"\"\nCompress the String\nGiven a string that may contain any characters and the following abbreviation:\n\n.abbrev means the following:\n\nIf there are multiple occurrences of the letter c in the original string, replace them with the abbreviation c.\n\nIf there are multiple occurrences of a letter, replace them with the first one. For example, if string contains \"ooc\", replace it with \"oo\".\n\nIf abbreviation is not possible to create, return the original string.\n\nFor example:\n\nGiven \"He**llo\", return \"Hel***\".\nGiven \"Hello\", return \"Hello\".\nGiven \"*Hello**\", return \"*\".\nGiven \"hello**world\", return \"hello*world\".\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\"\n\nn, b = map(int, stdin.split())\n\n\"\"\"\nWe can consider this problem as follows:\n\n1) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n2) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n2) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n3) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n4) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n5) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n6) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n7) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n8) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n9) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n10) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n11) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n12) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n13) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n14) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n15) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n16) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n17) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n18) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n19) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n20) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n21) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n22) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n23) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n24) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n25) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n26) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n27) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n28) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n29) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n30) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n31) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n32) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n33) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n34) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n35) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n36) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n37) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n38) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n39) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n40) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n41) We can write a function that takes an integer (for n) and a bit-string (for b) and checks if\nthe latter is at most b bits long.\n\n42) We can write a function"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"P01K02H03H04\"\n) == \"12 12 11 13\"\nassert solution(\n\"H02H10P11H02\"\n) == \"GRESKA\"\nassert solution(\n\"T01H02H03H04\"\n) == \"4 4 3 4\"\nassert solution(\n\"K02H03H04H05\"\n) == \"2 2 2 2\"\nassert solution(\n\"K02H03H04T05\"\n) == \"GRESKA\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\nSample Case:\nSample Input:\nH02H10P11H02\n\nSample Output:\nGRESKA\n\nSample Input:\nP01K02H03H04\n\nSample Output:\n12 12 11 13\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\nprint(solution(stdin))\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''P01K02H03H04\nH02H10P11H02''') == '12 12 11 13'\nassert solution('''P01K02H03H04\nH02H10P11H02''')!= 'GRESKA'\n\n'''\nThere are four suits: P, K, H, T. A card is described by a pair (S, N) where S is a suit and N is a number between 1 and 13.\n\nIt is not allowed to have two cards with the same (S, N).\n\nIt is allowed to have only one card with the number 1.\n\nYou are given the string which contains the card labels.\n\nCheck whether all the cards in the deck are present in the input string.\n\nIf there are two exact same cards in the deck, print \"GRESKA\".\n\nOtherwise, print four space-separated integers: how many cards of each suit are missing in the order P, K, H, T.\n\n-----Constraints-----\n|S| == |P| + |K| + |H| + |T|\n1 <= |S| <= 100\n1 <= |P|,|K|,|H|,|T| <= 10\n1 <= |N| <= 13\n\n'''\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"P01K02H03H04\"\n) == \"12 12 11 13\"\n\nassert solution(\n\"H02H10P11H02\"\n) == \"GRESKA\"\n\nassert solution(\n\"K04H07P09H01\"\n) == \"14 14 12 14\"\n\nassert solution(\n\"T01T02P03P04P05\"\n) == \"14 14 13 13\"\n\nassert solution(\n\"P06K08H09H10P11\"\n) == \"12 12 12 12\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"P01K02H03H04\"\n) == \"12 12 11 13\"\n\nassert solution(\n    \"H02H10P11H02\"\n) == \"GRESKA\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\n\nprint(solution(stdin.strip()))\n\n-----Solution-----\nn = stdin.strip()\ns = [i for i in n if i.isalpha()]\nd = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\nfor i in s:\n    if i[1] == '0':\n        d[i[0]] += 1\n    else:\n        d[i[0]] += int(i[1])\nd = dict(sorted(d.items(), key=lambda x: x[1]))\nfor key in d.keys():\n    if d[key] == 0:\n        print(key, d[key])\n    else:\n        print(key, d[key], d[key]-1)"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\n\"\"\"\n\nr, s, k = map(int, input().split())"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.**.\\n**.*\\n.**.\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n\nprint(solution(input()))\n\n----\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".*.*.*\") == \"1\"\nassert solution(\"......\") == \"2\"\nassert solution(\".*.*..\") == \"2\"\nassert solution(\"..*...\") == \"2\"\nassert solution(\"..*...\") == \"2\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".****.\\n***.*.\\n**.*.\\n*****\\n....*\\n....*\\n\") == '3'\nassert solution(\"*....\\n....*\\n.*.*.\\n**.*\\n****.\\n\") == '4'\nassert solution(\"***.*\\n.**.*\\n****.\\n**.*\\n***.*\\n\") == '5'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\n\"\"\"\n\nR, S, K = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\nassert solution(\"6 6 6\") == \"0\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\\n....\\n.*.*\\n....\") == \"1\"\n\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\nprint(\"Success!\")\n\n\"\"\"\n\n\n\nimport sys\n\nR, S, K = map(int, sys.stdin.readline().split())\nboard = [sys.stdin.readline() for _ in range(R)]"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\nassert solution(stdin) == output\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\\n+-..\\n|*|.\\n+-..\\n|*|.\"\n\n\"\"\"\n\nimport math\nfrom sys import stdin\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\nprint('Success')\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n\n\"\"\"\nThe four cards are Ace, King, Queen, and Jack.\nThe number of cards that are the same rank is the number of distinct ranks.\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\n\"\"\"\n\n\"\"\"\nPoker Hands\nProblem Description\n\nTODO: Write Description Here\n\nConstraints\nTODO: Write Constraints Here\n\nInput Format\nTODO: Write Input Format Here\n\nOutput Format\nTODO: Write Output Format Here\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n\na=stdin.split()\n\nprint(max([a.count(i) for i in set(a)]))"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\nprint(\"All cases passed!\")\n\n---"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"5H 5C 6S 7S KD\") == 0"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n\nprint('Passed all tests...')\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 5\n2 1 1 1 0 1''') == '5'\nassert solution('''5 1\n0 0 0 0 0''') == '7'\n\n'''\nfrom collections import Counter\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5\\n6 7 8 9') == '0'\nassert solution('1 1 1 1 1\\n1 2 3 4 5') == '7'\nassert solution('1 1 1 1 1\\n2 2 3 4 5') == '0'\nassert solution('1 1 1 1 1\\n1 1 1 1 1') == '6'\nassert solution('1 1 1 1 1\\n2 2 2 2 2') == '1'"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"6 6\\n2 1 1 1 0 1\") == \"0\"\nassert solution(\"6 7\\n2 1 1 1 0 1\") == \"7\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nassert solution(\"5 7\\n2 1 1 1 0 1\") == \"0\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2 1 1 1 0 1\n''') == '5'\n\nassert solution('''\n4 0\n0 0 0 0\n''') == '7'\n\nassert solution('''\n1 1 1 1 0 1\n''') == '0'\n\nassert solution('''\n3 3\n0 0 0\n0 0 0\n0 0 0\n''') == '0'\n\nassert solution('''\n3 3\n1 0 1\n0 0 0\n0 0 0\n''') == '6'"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\"\"\"\nfrom collections import deque, namedtuple"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 1 1 1 0 1\") == \"5\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\nprint(\"Success\")\n'''"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nassert solution(\"Hello World!\") == \"[-]3110 \\/\\/0|Z1|)!\", 'wrong result'\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\""
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Hello World!') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('Hey!?') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\n\nSample Input 3:\nkenneth\nSample Output 3:\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"All your base are belong to us
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nprint(solution(INPUT))\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\n\nclass Solution:\n    def solution(self, stdin):\n        mapper = {\n            \" \": \"@\",\n            \"A\": \"@\",\n            \"a\": \"0\",\n            \"B\": \"8\",\n            \"b\": \"1\",\n            \"C\": \"3\",\n            \"c\": \"2\",\n            \"D\": \"|)$\",\n            \"d\": \"|)\",\n            \"E\": \"3\",\n            \"e\": \"0\",\n            \"F\": \"|D\",\n            \"f\": \"|)\",\n            \"G\": \"6\",\n            \"g\": \"6\",\n            \"H\": \"[-]\",\n            \"h\": \"[-]\",\n            \"I\": \"|Z\",\n            \"i\": \"|)\",\n            \"J\": \"|<\",\n            \"j\": \"|<\",\n            \"K\": \"|<\",\n            \"k\": \"|<\",\n            \"L\": \"1\",\n            \"l\": \"1\",\n            \"M\": \"[|_|]\",\n            \"m\": \"[|_|]\",\n            \"N\": \"[-]\",\n            \"n\": \"[-]\",\n            \"O\": \"0\",\n            \"o\": \"0\",\n            \"P\": \"|<\",\n            \"p\": \"|<\",\n            \"Q\": \"|<\",\n            \"q\": \"|<\",\n            \"R\": \"[-]\",\n            \"r\": \"[-]\",\n            \"S\": \"$\",\n            \"s\": \"$\",\n            \"T\": \"[-]\",\n            \"t\": \"[-]\",\n            \"U\": \"|_|\",\n            \"u\": \"|_|\",\n            \"V\": \"\\/\",\n            \"v\": \"\\/\",\n            \"W\": \"\\/\\/\",\n            \"w\": \"\\/\\/\",\n            \"X\": \"][\",\n            \"x\": \"][\",\n            \"Y\": \"`/\",\n            \"y\": \"`/\",\n            \"Z\": \"[\",\n            \"z\": \"[\",\n            \"!\": \"!\",\n            \" \": \" \",\n            \",\": \",\",\n            \".\": \".\",\n        }\n        result = \"\"\n        for line in stdin.splitlines():\n            for char in line:\n                if char.upper() in mapper and char.isalpha():\n                    result += mapper[char.upper()]\n                else:\n                    result += char\n            result += \"\\n\"\n        return result\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\""
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Bob'\nassert solution('1') == 'Alice'\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'Bob'\nassert solution('5') == 'Alice'\nassert solution('6') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('10') == 'Alice'\n\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('10') == 'Alice'\n\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\n\"\"\"\n\n\"\"\"\nsolution:\n\n\u8fd9\u9053\u9898\u6ca1\u6709\u63d0\u793a\uff0c\u7ed9\u6211\u81ea\u5df1\u63d0\u4f9b\u4e86\u4e24\u79cd\u60c5\u51b5\u3002\n\u7b2c\u4e00\u79cd\u662f\uff0cAlice\u4ece\u5de6\u5230\u53f3\u6254\u4e86\u524dn-1\u4e2a\u77f3\u5b50\u3002\nBob\u4ece\u53f3\u5230\u5de6\u6254\u4e86\u540en-1\u4e2a\u77f3\u5b50\u3002\u8fd9\u6837\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0cAlice\u4f1a\u5148\u6254n-1\u4e2a\uff0cBob\u6254n-1\u4e2a\uff0c\u90a3\u4e48Alice\u4f1a\u5148\u6254\u6700\u540e\u4e00\u4e2a\uff0cBob\u6254\u6700\u540e\u4e00\u4e2a\u3002\n\n\u7b2c\u4e8c\u79cd\u662f\uff0cAlice\u4ece\u5de6\u5230\u53f3\u6254\u4e86\u524dn\u4e2a\u77f3\u5b50\uff0c\u800cBob\u4ece\u53f3\u5230\u5de6\u6254\u4e86\u540en\u4e2a\u77f3\u5b50\u3002\u8fd9\u6837\uff0cAlice\u5148\u6254n-1\u4e2a\uff0cBob\u6254n-1\u4e2a\u3002\n\n\u4e24\u8005\u77f3\u5b50\u603b\u6570\u662fn\uff0c\n\n\u4ece\u5de6\u5230\u53f3\uff0cAlice\u6254\u4e86n-1\u4e2a\uff0cBob\u6254\u4e86n-1\u4e2a\uff0c\u603b\u6570\u662f2n-2\uff0cAlice\u5148\u6254n-1\u4e2a\uff0c\u7136\u540eBob\u6254n-1\u4e2a\uff0c\u603b\u6570\u662fn\uff0cBob\u5148\u6254n-1\u4e2a\uff0c\u7136\u540eAlice\u6254n-1\u4e2a\uff0c\u603b\u6570\u662f2n-2\u3002\n\n\u4ece\u53f3\u5230\u5de6\uff0cAlice\u6254\u4e86n\u4e2a\uff0cBob\u6254\u4e86n\u4e2a\uff0c\u603b\u6570\u662f2n\uff0cAlice\u5148\u6254n-1\u4e2a\uff0c\u7136\u540eBob\u6254n-1\u4e2a\uff0c\u603b\u6570\u662f2n-2\uff0cBob\u5148\u6254n-1\u4e2a\uff0c\u7136\u540eAlice\u6254n-1\u4e2a\uff0c\u603b\u6570\u662fn\uff0cAlice\u5148\u6254n-1\u4e2a\uff0c\u7136\u540eBob\u6254n-1\u4e2a\uff0c\u603b\u6570\u662f2n-2\u3002\n\n\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u5b50\u72b6\u6001\uff1a\n1. Alice\u5148\u6254n-1\u4e2a\uff0cBob\u6254n-1\u4e2a\uff0c\u603b\u6570\u662f2n-2\n2. Alice\u5148\u6254n-1\u4e2a\uff0cBob\u6254n-2\u4e2a\uff0c\u603b\u6570\u662fn\n\n\u6240\u4ee5Alice\u7684\u6700\u7ec8\u7ed3\u679c\u662fBob\u7684\uff0c\u6240\u4ee5Alice\u7684\u7ed3\u679c\u7b49\u4e8e\uff1a\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1an-1 + n-2 + n-1 + n-2 + n-3 +... + 1\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1an-1 + n-2 + n-1 + n-2 + n-3 +... + 2n-2\n\n\u6211\u4eec\u628a\u4e0a\u8ff0\u4e24\u4e2a\u5f0f\u5b50\u7efc\u5408\uff0c\u518d\u52a0\u4e0a2n-2\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\uff1a\nn-1 + n-2 + n-1 + n-2 + n-3 +... + 2n-2 + 2n-2 = 2n(n-1)\n\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1) == 'Alice'\nassert solution(2) == 'Bob'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == 'Bob'\nassert solution('3\\n1') == 'Alice'\nassert solution('3\\n3') == 'Bob'\nassert solution('3\\n4') == 'Alice'\nassert solution('9\\n8') == 'Bob'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"Blah blah seventeen\") == \"Blah blah seventeen\"\nassert solution(\"This sentence has thirtyone letters\") == \"This sentence has thirtyone letters\"\nassert solution(\"This sentence has a total of thirtyone letters.\") == \"This sentence has a total of thirtyone letters.\"\nassert solution(\"This sentence has thirtyone letters. This sentence has thirtyone letters. This sentence has thirtyone letters. This sentence has thirtyone letters.\") == \"This sentence has thirtyone letters.\"\n\nprint(solution(\"This sentence has thirtyone letters.\"))\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has thirtyone letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"This sentence has thirtyone letters.\") == \"thirty one letters\"\nassert solution(\"This sentence has thirtyone letters.\") == \"thirty one letters\"\nassert solution(\"Blah blah seventeen\") == \"blah blah seventeen\"\nassert solution(\"Iva has thirtyone letters.\") == \"thirty one letters\"\nassert solution(\"And I've learned thirtyone letters.\") == \"thirty one letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"thirty is the number of letters here\") == \"thirty is the number of letters here\"\nassert solution(\"the number of letters is thirty\") == \"the number of letters is thirty\"\nassert solution(\"the number of letters is thirtyone\") == \"the number of letters is thirtyone\"\nassert solution(\"the number of letters is $\") == \"the number of letters is $\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"thirtyone\") == \"thirtyone\"\nassert solution(\"twentytwo\") == \"twentytwotwo\"\nassert solution(\"nineteen\") == \"ninetynine\"\nassert solution(\"thirty\") == \"thirty\"\nassert solution(\"fourty\") == \"forty\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twentyone two three four five six seven"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has $ letters\") == \"thirty is the number of letters here\"\nassert solution(\"this sentence has $ letters\") == \"thirty is the number of letters here\"\nassert solution(\"this sentence has $ letters\") == \"thirty is the number of letters here\"\nassert solution(\"this sentence has $ letters\") == \"thirty is the number of letters here\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 one\") == \"three one\"\nassert solution(\"3 one two\") == \"three one two\"\nassert solution(\"3 one two three\") == \"three one two three\"\nassert solution(\"3 one two three four\") == \"three one two three four\"\nassert solution(\"3 one two three four five\") == \"three one two three four five\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('This sentence has thirtyone letters.') == \"This sentence has $ letters.\"\nassert solution('Blah blah seventeen.') == \"Blah blah seventeen.\"\nassert solution('Blah blah seventeen') == \"Blah blah seventeen\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\nassert solution('A') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\nprint(solution(\"EaEbFabG\"))\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"2 4\") == \"Odd 12\"\nassert solution(\"10 10\") == \"Not a moose\"\nassert solution(\"0 0\") == \"Not a moose\"\n\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\n\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Not a moose'\nassert solution('2 2') == 'Even 6'\nassert solution('3 3') == 'Even 6'\nassert solution('2 3') == 'Odd 6'\nassert solution('3 2') == 'Odd 6'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"4 3\") == \"Even 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('1 10') == 'Not a moose'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 abc\") == \"0\"\nassert solution(\"2 5 ghi\") == \"2\"\nassert solution(\"3 9 ghi\") == \"1\"\n\nprint(solution(\"4 2 abc\"))\nprint(solution(\"2 5 ghi\"))\nprint(solution(\"3 9 ghi\"))\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"tomo\") == \"t\"\nassert solution(\"mono\") == \"m\"\nassert solution(\"dak\") == \"d\"\nassert solution(\"6666\") == \"6\"\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('12') == ''\nassert solution('123') == ''\nassert solution('1234') == ''\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('g-4 i-444 h-44 t-8') == 'ghi'\nassert solution('w-4 w-4') == 'w'\nassert solution('t-4 t-4') == 't'\nassert solution('t-4 t-4 g-4') == 't'\nassert solution('g-4 g-4 w-4') == 'gw'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\ntom\\nmono\\ndak\\n6666\") == \"1\"\n\nassert solution(\"2\\nja\\nla\\n52\") == \"2\"\n\nassert solution(\"2\\nabc\\ndef\") == \"0\"\n\nassert solution(\"3\\ntom\\nmono\\ndak\\n6666\") == \"1\"\n\nassert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"0\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('asd') == 'asd'\nassert solution('456') == '456'\nassert solution('hjk') == 'hjk'\nassert solution('qwe') == 'qwe'\nassert solution('qwert') == 'qwert'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"tomo\") == \"1\"\nassert solution(\"mono\") == \"2\"\nassert solution(\"dak\") == \"3\"\nassert solution(\"6666\") == \"0\"\nassert solution(\"ja\") == \"1\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '1'\nassert solution('dak') == '2'\nassert solution('6666') == '2'\n\nprint(solution(stdin.read()))\n\n-----Explanation-----\nSample Input 1:\n\nFor the first line, the number of words in the dictionary is $3$. The dictionary consists of the words to, mono, and dak. The string is \"tomo\". Marko presses the key corresponding to the first character of the string. This is \"t\" and he presses t-4, i-444, o-0, m-4, and d-8. This gives us the string \"tom\". There is only one word in the dictionary that can be constructed from this string.\n\nFor the second line, the number of words in the dictionary is $2$. The dictionary consists of the words ja and la. The string is \"ja\". Marko presses the key corresponding to the first character of the string. This is \"j\" and he presses j-4, a-0, l-4. This gives us the string \"jal\". There are two words in the dictionary that can be constructed from this string.\n\nSample Input 2:\n\nFor the first line, the number of words in the dictionary is $2$. The dictionary consists of the words ja and la. The string is \"ja\". Marko presses the key corresponding to the first character of the string. This is \"j\" and he presses j-4, a-0, l-4. This gives us the string \"jal\". There are two words in the dictionary that can be constructed from this string.\n\nFor the second line, the number of words in the dictionary is $2$. The dictionary consists of the words ja and la. The string is \"52\". Marko presses the key corresponding to the first character of the string. This is \"2\" and he presses t-4, a-0, l-4. This gives us the string \"5l\". There are two words in the dictionary that can be constructed from this string.\n\nSample Output 1:\n\n1\n\nSample Output 2:\n\n2\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('123') == 'def'\nassert solution('abc') == 'abc'\nassert solution('12345') == 'def'\nassert solution('abcde') == 'def'\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.phone = {\n            \"0\": \"\",\n            \"1\": \"\",\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n\n    def check(self, key: str) -> int:\n        if key in self.phone:\n            return 1\n        else:\n            return 0\n\n    def main(self, str_in: str) -> int:\n        nums = str_in\n        n = int(nums[0])\n        str_in = nums[1:]\n        counter = 0\n        num = len(str_in)\n        for i in range(n):\n            j = 0\n            while j < num:\n                if self.check(str_in[j]):\n                    counter += 1\n                j += 1\n        return counter\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tomo\") == \"1\"\nassert solution(\"mono\") == \"1\"\nassert solution(\"dak\") == \"2\"\nassert solution(\"6666\") == \"2\"\n\nassert solution(\"ja\") == \"1\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.A.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\nassert solution('AB') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('K') == '..#..\\n..*..\\n..*..\\n..*..\\n..#..'\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\"\n\nimport unittest\nfrom unittest import TestCase\n\n\nclass PanWendy:\n    def __init__(self):\n        self.pan = True\n        self.wendy = True\n\n    def write_pan(self, s: str, s_pan: str):\n        if self.pan:\n            return s_pan\n        else:\n            return s\n\n    def write_wendy(self, s: str, s_wendy: str):\n        if self.wendy:\n            return s_wendy\n        else:\n            return s\n\n    def write_pan_wendy(self, s: str, s_pan: str, s_wendy: str):\n        if self.pan:\n            return self.write_pan(s, s_pan)\n        elif self.wendy:\n            return self.write_wendy(s, s_wendy)\n        else:\n            return s\n\n\nclass TestPanWendy(TestCase):\n    def test_pan_wendy(self):\n        pw = PanWendy()\n        self.assertEqual(pw.write_pan(\"A\", \"..#..\"), \"..#..\")\n        self.assertEqual(pw.write_pan(\"DOG\", \"..#...#...*..\"), \"..#...#...*..\")\n        self.assertEqual(pw.write_pan(\"AC\", \"..#..\"), \"..#..\")\n        self."
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"\"\"..#..\n.#.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \\\n\"\"\".#.\n.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == '..#..\\n.##.\\n#.#.\\n.#.#\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') ==..#..\nassert solution('DOG') ==..#...#...*..\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '3.141593'\nassert solution('21\\n42') == '1385.442360'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"3.141592653589793\"\nassert solution(\"11\") == \"313.141593\"\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1''') == '''3.141593'''\nassert solution('''21''') == '''1385.442360'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"2\") == \"2.000000\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n1') == '23.140693'\nassert solution('10\\n0') == '91.000000'\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'5\\n'\n'129 44 394 253 147'\n) == '0'\nassert solution(\n'3\\n'\n'1 -2 3'\n) == '2'\nassert solution(\n'5\\n'\n'129 44 394 253 147'\n) == '0'\n\n\"\"\"\n\n\nimport sys\nimport os\nfrom typing import List\n\n\nclass Error(Exception):\n    pass\n\n\nclass Input:\n    def __init__(self, input_: List[str]):\n        self.n = input_[0]\n        self.k = [int(i) for i in input_[1].split()]\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n\nn = int(input())\nlst = [int(i) for i in input().split()]\nresult = 0\nfor i in lst:\n    if i < 0:\n        result += i\nprint(result)\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\n\"\"\"\n\nn = int(input())\na = input().split()\n\nb = 0\nfor i in a:\n    if int(i) > 0:\n        b += int(i)\n\nprint(b)\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 -2 3') == 2\n\"\"\"\n\nn = int(input())\narr = [int(item) for item in input().split()]\n\nprint(sum([abs(item) for item in arr if item < 0]))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 -2 3\\n\") == \"4\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nans = 0\n\nfor i in range(n):\n    ans += abs(arr[i])\n\nprint(ans)"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\"\n\nimport os\nimport sys\nfrom math import gcd\nfrom typing import List"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '6'\nassert solution('4 1 2') == '8'\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4 1 2') == '8'\nassert solution('5\\n1 1 2 2 3') == '7'\nassert solution('4\\n1 2 3 4') == '5'\n\n'''"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 1 2\") == \"8\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\nprint('Test passed')\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 2\") == \"6\"\nassert solution(\"3\\n2 1 2\") == \"8\"\nassert solution(\"4\\n4 1 2\") == \"12\"\n\nprint(solution(\"3\\n1 2 2\"))\nprint(solution(\"3\\n2 1 2\"))\nprint(solution(\"4\\n4 1 2\"))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nprint('Hooray!')\n\"\"\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\n\nprint(solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11\\n'))"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11\\n') == 'NOT POSSIBLE'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11\\n') == 'NOT POSSIBLE'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"\nimport numpy as np\nimport math\n\nfor _ in range(3):\n    t, n, m = [int(x) for x in input().split()]\n    grid = [input() for _ in range(n)]\n    grid = np.array(grid)\n    s = np.where(grid == 'S')[0][0]\n    grid[s, :] = '.'\n    grid[:, 0] = '.'\n    grid[:, -1] = '.'\n    grid[0, :] = '.'\n    grid[-1, :] = '.'\n\n    dir = {'U': (-1, 0), 'D': (1, 0), 'L': (0, -1), 'R': (0, 1)}\n    direction = {'U': [(0, 1), (0, 0), (-1, 0)],\n                 'D': [(0, -1), (0, 0), (1, 0)],\n                 'L': [(0, 0), (-1, 0), (0, -1)],\n                 'R': [(0, 0), (1, 0), (0, 1)],\n                 'UL': [(1, 1), (-1, 1), (-1, 0), (0, 1)],\n                 'UR': [(1, 1), (-1, -1), (-1, 0), (0, 1)],\n                 'DL': [(1, -1), (-1, -1), (-1, 0), (0, -1)],\n                 'DR': [(1, -1), (-1, 1), (-1, 0), (0, -1)]}\n\n    def in_bounds(i, j):\n        return i >= 0 and i < n and j >= 0 and j < m\n\n    def dist(i, j, x, y):\n        return math.sqrt((i - x) ** 2 + (j - y) ** 2)\n\n    def escape(t, n, m, grid, s):\n        if s[0] == 0 or s[1] == 0:\n            return 1\n        if t >= dist(s[0], s[1], 0, 0) + 1:\n            return 1\n        grid[s] = '.'\n        for x, y in dir.values():\n            if in_bounds(s[0] + x, s[1] + y) and grid[s[0] + x, s[1] + y]!= '1':\n                if t >= dist(s[0] + x, s[1] + y, 0, 0) + 1:\n                    return 1\n                for i in range(len(direction)):\n                    if grid[s[0] + x, s[1] + y] in direction[i]:\n                        for j in range(len(direction[i])):\n                            if direction[i][j] == grid[s[0] + x, s[1] + y]:\n                                break\n                        break\n                else:\n                    print('F')\n                    return False\n        if s[0] == n - 1 or s[1] == m - 1:\n            return 1\n        grid[s] = '.'\n        for x, y in dir.values():\n            if in_bounds(s[0] + x, s[1] + y) and grid[s[0] + x, s[1] + y]!= '1' and grid[s[0] + x, s[1] + y]!= '.':\n                if t >= dist(s[0] + x, s[1] + y, 0, 0) + 1:\n                    return 1\n                for i in range(len(direction)):\n                    if grid[s[0] + x, s[1] + y] in direction[i]:\n                        for j in range(len(direction[i])):\n                            if direction[i][j] == grid[s[0] + x, s[1] + y]:\n                                break\n                        break\n                else:\n                    print('F')\n                    return False\n        return 0\n\n    if escape(t, n, m, grid, s):\n        print('POSSIBLE')\n    else:\n        print('NOT POSSIBLE')\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3 3') == '3'\nassert solution('3 5') == '3'\nassert solution('3 6') == '3'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4', 'wrong solution'\nprint('The solution is correct!')\n\n\"\"\"\n\nn, c = map(int, input().split())\nl = list(map(int, input().split()))\n\ncnt = 0\nm = 0\nfor i in range(n):\n    if m >= c:\n        break\n    elif l[i] <= c:\n        m += l[i]\n        cnt += 1\nprint(cnt)\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"4 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"\n\nimport sys\n\nN, C = map(int, sys.stdin.readline().split())\n\nweights = list(map(int, sys.stdin.readline().split()))\n\nweights = sorted(weights, reverse=True)\n\ncnt = 0\n\nfor i in range(N):\n    if C >= weights[i]:\n        cnt += 1\n        C -= weights[i]\n\nprint(cnt)\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 5\n3 1 2 1 1\n''') == 4\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '2'\nassert solution('1\\n2\\n3') == '3'\nassert solution('1\\n2\\n3\\n1\\n1') == '3'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n3 1 4 1') == '4'\nassert solution('2 10\\n1 2') == '2'\nassert solution('5 100\\n1 2 4 3 5') == '5'\n\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\nprint('PASSED')\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"SSPPR\\n5\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\n\"\"\"\n\nimport unittest\nimport collections\nimport sys\nimport os\n\nclass Solution(unittest.TestCase):\n    def get_sol_obj(self):\n        import os\n        import inspect\n        test_dir = os.path.dirname(os.path.abspath(__file__))\n        while 'util' not in os.listdir(test_dir):\n            test_dir = os.path.dirname(test_dir)\n        test_dir = os.path.join(test_dir, 'util')\n        sys.path.insert(0, test_dir)\n        import host\n        return host.Solution()\n\n    def test_1(self):\n        self.assertEqual(self.get_sol_obj().solution(\"SSPPR\\n1\\nSSPPR\\n\"), \"5\\n10\")\n    def test_2(self):\n        self.assertEqual(self.get_sol_obj().solution(\"SSPPR\\n5\\nPPRRS\\nRRSSP\\n\"), \"10\\n15\")\n    def test_3(self):\n        self.assertEqual(self.get_sol_obj().solution(\"RRSSP\\n2\\nPPRRS\\nRRSSP\\n\"), \"15\\n10\")"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\nSSPPR\n1\nSSPPR\n''') == '5\\n10'\nassert solution('''5\nSSPPR\n2\nPPRRS\nRRSSP\n''') == '10\\n15'\n\n'''\n- 7 lines\n- N lines\n- R rounds\n- S, P, R\n- N friends\n- R rounds\n\n1. find out which symbol was the last\n2. calculate each person's score\n3. calculate who wins\n\n'''"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"5\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\\n\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\\n\"\n\n\"\"\"\n\nimport collections\nimport sys\n\nssp_rrp = collections.Counter('SPPR')\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SSPPR\", 2) == \"10\"\nassert solution(\"SSPPR\", 1) == \"5\"\nassert solution(\"SSPPR\", 5) == \"5\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\\n1\\nSSPPR\") == \"5\"\nassert solution(\"SSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\nassert solution(\"7\\n11\") == \"3\"\n\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\n\nassert solution(\"2\\n2\\n2\\n2\\n2\") == \"0\"\n\nassert solution(\"6\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\n'''"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution(str(input())))"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n7\\n11\\n') =='still running'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') == '4'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\\n\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6'\nassert solution('2 2') == 'impossible'\n\n\"\"\"\n\nn = int(stdin.readline().strip())\ncanisters = list(map(int, stdin.readline().strip().split(' ')))"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 3 2 2 3\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\\n2 2\") == \"impossible\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n\nfrom math import gcd\nfrom fractions import Fraction"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\n6 1 3 2 2 3\n''') == '0.6'\nassert solution('''2\n2 2\n''') == 'impossible'\nassert solution('''3\n1 1 1\n''') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())\n\nSolution:\n\"\"\"\n\nn = int(input())\nc = list(map(int, input().split()))\n\ncan = 0\ncur = 0\nfor i in range(len(c)):\n    can += c[i]\n    cur += c[i]\n    if can < cur:\n        can = cur\n        cur = 0\nprint(\"impossible\" if can == 0 else cur/can)"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\n\nassert solution(\"2\\n2 2\") == \"impossible\"\n\nprint(\"Well solved!\")\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2\\n2 2\") == \"impossible\"\nassert solution(\"4\\n2 2\") == \"0.5\"\nassert solution(\"3\\n1 1\") == \"impossible\"\nassert solution(\"4\\n3 1 1\") == \"1.0\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6\n6 1 3 2 2 3''') == '0.6'\nassert solution('''2\n2 2''') == 'impossible'\n\nprint('Success')\n\nFor each balloon you can fill up to its capacity, so you need to fill the balloon with the largest capacity.\n\nBut you do not want to fill the balloon with the largest capacity, because you do not want to inflate it to the maximum.\n\nSo you need to calculate the minimum possible amount of helium that can be filled to the balloon, and then fill up all balloons until the minimum helium is reached.\n\nSo the minimum helium is the capacity minus the number of balloons that are currently filled, and then the maximum helium is the capacity. So the maximum helium is the minimum helium minus the number of balloons that are currently filled.\n\nYou can fill up balloons with the minimum helium first, then fill up the rest using the maximum helium.\n\nOnce you have filled up the minimum helium balloons, you have to fill up the rest with the maximum helium balloons.\n\nIn general, if you want to fill up a number of balloons with helium in total, you can fill up the number of balloons with the minimum helium first, and then fill up the rest with the maximum helium.\n\nSo the solution is to start with the minimum helium balloons and fill up the rest with the maximum helium balloons.\n\nIf the minimum helium balloons cannot be filled, fill up the maximum helium balloons.\n\nIf the minimum helium balloons cannot be filled and the maximum helium balloons cannot be filled, it is impossible to fill all the balloons.\n\n-----Solutions-----\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split(' ')))\n\nnum_max = -1\nnum_min = 1\n\nmax_sum = 0\n\nfor num in nums:\n    if num > num_max:\n        num_max = num\n    if num < num_min:\n        num_min = num"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\n\"\"\"\n\nn = int(stdin.readline())\nc = [int(x) for x in stdin.readline().split()]\n\nf = 1.0\n\nfor i in range(n):\n    f = max(f, c[i] / i + 1)\n\nprint(f if f < 1 else \"impossible\")\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n\"\"\"\nimport unittest\nimport re"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 1 4\", \"1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == \"Tie\"\n\"\"\"\n\nimport math\nimport ast\n\n\nclass Die:\n    def __init__(self, lowest, highest):\n        self.lowest = lowest\n        self.highest = highest\n        self.highest_to_lowest_dict = dict()\n        self.num_of_sides = self.highest - self.lowest + 1\n        self.probability_dict = dict()\n        self.probability_dict[0] = self.num_of_sides\n        for i in range(1, self.highest + 1):\n            self.highest_to_lowest_dict[i] = self.lowest\n\n    def get_probability(self, die):\n        self.highest_to_lowest_dict[die] = self.highest_to_lowest_dict.get(die) - 1\n        return self.probability_dict.get(die) / self.num_of_sides\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == 'Emma'\nassert solution('''1 8 1 8\n1 10 2 5''') == 'Tie'\n\nprint('Success')"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nassert solution('1 3 1 3\\n1 5 1 5') == 'Gunnar'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\nimport random"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 4, 1, 4) == \"Gunnar\"\nassert solution(1, 6, 1, 6) == \"Emma\"\nassert solution(1, 8, 1, 8) == \"Tie\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nassert solution('2 8 1 8\\n2 10 2 5') == 'Gunnar'\nassert solution('2 5 1 5\\n2 5 1 5') == 'Tie'\n\nimport re"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4\") == \"Emma\"\nassert solution(\"1 8 1 8\") == \"Tie\"\n\"\"\"\n\na, b, c, d = map(int, stdin.readline().split())"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nassert solution('8\\n1 2 3 mumble mumble mumble 8') =='something is fishy'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 mumble 5\\n') =='makes sense'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor i in range(n):\n    x = sys.stdin.readline().split()\n    if x[0].isdigit():\n        print('makes sense') if len(x) == 1 else print(f'makes sense (got {x[0]})')\n    else:\n        print('something is fishy')\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\\n\") =='makes sense'\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") =='something is fishy'\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") =='makes sense'\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") =='something is fishy'\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\ncount = [0] * 10001\nfor i in range(n):\n    a = int(stdin.readline())\n    if a =='mumble':\n        print('something is fishy')\n    else:\n        count[a] += 1\nfor i in range(1, 10001):\n    if count[i] == 0:\n        print('something is fishy')\n    else:\n        print('makes sense')\n\"\"\"\n\nn = int(input())\ncount = [0] * 10001\nfor _ in range(n):\n    a = int(input())\n    if a =='mumble':\n        print('something is fishy')\n    else:\n        count[a] += 1\nfor i in range(1, 10001):\n    if count[i] == 0:\n        print('something is fishy')\n    else:\n        print('makes sense')"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\nassert solution('5 3 6 9 12 15') == '1 18'\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add\nfrom typing import List, Dict\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\nassert solution(\"4 9 25 49 81\") == '2 121'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0 1\\n1 0'\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\nprint('Tests passed!')\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 0\\n0 0\\n0 1') == 'CORRECT'\nassert solution('2 1\\n1 0\\n0 0\\n0 1') == 'INCORRECT'\nassert solution('4 3\\n1 0\\n0 2\\n3 1\\n0 0\\n0 1') == 'CORRECT'\nassert solution('3 2\\n1 0\\n0 0\\n0 1') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n5 6\\n7 2\\n4 1\\n6 0\\n0 7\\n7 4\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"5\\n0 1\\n1 1\\n1 0\\n3 2\\n3 0\") == \"CORRECT\"\nassert solution(\"3\\n0 0\\n2 0\") == \"INCORRECT\"\n\n\"\"\"\n\n\"\"\"\n--SOLUTION--"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nboard = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\nqueen_position = [0 for _ in range(N)]"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n2 3\\n1 0\\n0 2\\n3 1\\nSample Output 2:') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"4\\n3 1\\n0 2\\n1 0\") == \"INCORRECT\"\n\"\"\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == 'CORRECT'\n\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == 'CORRECT'\n\nassert solution(\"8\\n0 1\\n2 3\\n4 5\\n6 7\\n1 2\\n3 4\\n5 6\\n7 0\") == 'CORRECT'\n\nassert solution(\"8\\n0 4\\n2 6\\n3 1\\n5 7\\n4 9\\n6 5\\n1 3\\n7 2\") == 'CORRECT'\n\nassert solution(\"4\\n1 1\\n2 2\\n3 3\") == 'CORRECT'"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n2 3\\n3 0\\n0 2\\n1 3\\n1 2\\n2 1\\n2 2\") == \"CORRECT\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import Dict, Set, List\n\nINPUT_END_MESSAGE = \"SAMPLE INPUT END.\"\n\nN = None\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\nassert solution('''4\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0''') == '1 1 1'\nassert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\n\n'''\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 1 1\n1 0 1\n1 1 0\n''') == '1 1 1'\nassert solution('''\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'\n\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([\n    [0, 1, 1],\n    [1, 0, 1],\n    [1, 1, 0]\n])) == str([1, 1, 1])\n\nassert solution(str([\n    [0, 0, 1, 1, 1],\n    [0, 0, 2, 0, 2],\n    [1, 2, 0, 1, 3],\n    [1, 0, 1, 0, 1],\n    [1, 2, 3, 1, 0]\n])) == str([1, 2, 3, 11])\n\nassert solution(str([\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 2],\n    [0, 0, 0, 0, 3],\n    [0, 0, 0, 0, 4],\n    [1, 1, 1, 1, 0]\n])) == str([1, 1, 1, 1, 11])\n\nassert solution(str([\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0]\n])) == str([1, 1, 1, 1, 11])\n\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 11'\nprint('Success')\n\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n\nSuccess\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\n\"\"\"\n\nN = int(input())\nmatrix = []\nfor i in range(N):\n    matrix.append(list(map(int, input().split())))\nmatrix = list(zip(*matrix))\noutput = []\nfor i in range(N):\n    temp = []\n    for j in range(N):\n        temp.append(sum([matrix[i][k] & matrix[j][k] for k in range(N)]))\n    output.append(max(temp))\nprint(\" \".join(list(map(str, output))))\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"7 3\") == \"Sunday\"\nassert solution(\"15 2\") == \"Tuesday\"\n\nprint(\"Success!\")\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == 'Thursday'\nprint('Test pass.')"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Thursday\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\n############################################################################"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n100\\n4') == '4\\n40'\nprint('Test 1 OK')\nassert solution('100\\n500\\n12') == '129\\n480'\nprint('Test 2 OK')\n\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435:\nL = int(stdin.readline())\nD = int(stdin.readline())\nX = int(stdin.readline())\nfor N in range(L, D + 1):\n    if sum(map(int, str(N))) == X:\n        break\nfor M in range(L, D + 1):\n    if sum(map(int, str(M))) == X:\n        break\nprint(N)\nprint(M)\n\n\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435:\nn1, n2, n3 = int(stdin.readline()), int(stdin.readline()), int(stdin.readline())\nfor i in range(n1, n2 + 1):\n    if sum(map(int, str(i))) == n3:\n        print(i)\n        break\nfor i in range(n1, n2 + 1):\n    if sum(map(int, str(i))) == n3:\n        print(i)\n        break\n\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435:\nL, D, X = int(input()), int(input()), int(input())\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40\\n'\nassert solution('100\\n500\\n12\\n') == '129\\n480\\n'\n\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\nprint(solution('1\\n100\\n4\\n'))\nprint(solution('100\\n500\\n12\\n'))"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"1\\n500\\n12\\n\") == \"129\\n480\"\nassert solution(\"100\\n10000\\n12\\n\") == \"129\\n9999\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n500\\n12\") == \"129\\n480\"\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40\\n'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '4.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '6.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '6.0\\n3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\n\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '6.0\\n3'\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n\n---"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\", \"Test 1\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\", \"Test 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '6.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\n-----Test Case-----\nRun tests on your code with the command: python3 test_solution.py\n\n-----How to submit-----\nYou can submit your solutions on this page, or send a pull request on GitHub:\nhttps://github.com/Xilinx/python-exercises\n\n'''\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import gcd\n\nfrom typing import Callable, List, Set, Tuple\n\nimport aatest_helper\n\nMAX_N = 10 ** 5"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n3\\n5'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\"\n\n\n\nimport string\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\nassert solution(\"N1-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"HE GOT AWAY!\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\n\nsolution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\")\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n\nsolution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\")\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"N321-CIA\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n9\\n1\\n9\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1\\nHE GOT AWAY!'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\"\n\nimport math\n\nn = int(input())\n\nlst = []\nfor i in range(n):\n    a,b,c = [int(x) for x in input().split()]\n    if a == 0 and b == 0:\n        continue\n    elif a == b or b == c:\n        continue\n    elif a == c:\n        continue\n    elif c == a:\n        continue\n    lst.append([a,b,c])\n\ndist_lst = [math.sqrt((x[0]-x[1])**2 + (x[0]-x[2])**2) for x in lst]\n\nprint(max(dist_lst))\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '5'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\nprint(solution(\"5\\n3 3 3\\n4 5 4\"))\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '8.0'\n\"\"\"\n\nimport unittest\nfrom math import gcd\n\n\nclass TestGCD(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(gcd(3, 3, 3), 3)\n\n    def test_case_2(self):\n        self.assertEqual(gcd(4, 5, 4), 1)\n\n    def test_case_3(self):\n        self.assertEqual(gcd(6, 4, 8), 2)\n\n    def test_case_4(self):\n        self.assertEqual(gcd(8, 9, 12), 1)\n\n    def test_case_5(self):\n        self."
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"8.0\"\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\"\n\nfrom math import sqrt, acos, degrees\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 4\\n2 3 5') == '8.0'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\nassert solution(\"2\\n5 5 5\\n7 7 7\") == \"14.5\"\nassert solution(\"3\\n7 2 2\\n4 6 8\\n1 3 3\") == \"10.0\"\nassert solution(\"3\\n4 4 4\\n7 3 4\\n1 3 3\") == \"15.714285714285714\"\n\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\nprint(solution(input()))\n\nSample Input 2:\n30\nSample Output 2:\n30\nassert solution('30') == '30'\n\nassert solution('2') == '2'\n\nassert solution('3') == '4'"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\"\n\n\"\"\"\n\nInput\n\n24\n\nOutput\n\n24\n\nInput\n\n25\n\nOutput\n\n27\n\nInput\n\n127\n\nOutput\n\n127\n\n\"\"\"\n\n\"\"\"\n\nSample Input 1:\n24\nSample Output 1:\n24\n\nSample Input 2:\n25\nSample Output 2:\n27\n\nSample Input 3:\n127\nSample Output 3:\n127\n\n\"\"\"\n\nn = int(input())\n\nsum_ = 0\nfor i in str(n):\n    sum_ += int(i)\n\nfor i in range(n + 1, 1000000000):\n    sum_i = 0\n    for j in str(i):\n        sum_i += int(j)\n    if sum_i == sum_ and i % sum_ == 0:\n        print(i)\n        break\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('5') == '5'"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('144') == '144'\nassert solution('144') == '144'\nassert solution('144') == '144'\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\nassert solution(123456789) == 1533776805\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n\"\"\"\n\nimport random\n\nclass Solution:\n    def solve(self, stdin):\n        # Your code here\n        pass"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+2+3+4+5+6+7+8+9+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('1+9') == 1\nassert solution('1+9+8') == 2\nassert solution('1+9+8+4') == 7\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1+9+8+4\") == 7\nassert solution(\"1+9+8+4+7+8+9+9+9+9+9+9+9\") == 188\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1+9+8+4\") == 7\nassert solution(\"1+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1+9+8+4') == 7\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+8+4+9+"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '2 3 6'\nassert solution('2 4 -6 -2') == '0 -2 4'\nassert solution('3 0 1 -1') == '0 1 2'\nassert solution('3 2 1 2') == '2 1 1'\nassert solution('3 1 0 1') == '1 0 1'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == '10 -8 6'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5 2') == '5 2'\nassert solution('1 5 2') == '2 5'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 2\\n3\") == \"3 0\"\nassert solution(\"2 2 -4 5\\n2 -4\\n5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 2') == '2 5'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('3 2 1') == '1 2'\nassert solution('3 3 -1 2') == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '2 3 5'\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 2 1 2') == '2 2 2 1 1'\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1\\n') == '1 1 1 3 3 3 2 2 2'\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 2 1 2\") == \"2 2 2 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 3 2 2\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5 2\n2 1 2 1 2\n''') == '2 2 2 1 1'\nassert solution('''\n9 3\n1 3 3 3 2 2 2 1 1\n''') == '1 1 1 3 3 3 2 2 2'\nassert solution('''\n9 3\n3 3 2 1 1 1 1 1 1\n''') == '1 1 1 3 3 3 2 2 2'\nassert solution('''\n9 3\n1 1 1 3 3 3 2 2 2\n''') == '1 1 1 3 3 3 2 2 2'\n'''\n\nSample Input 1:\n5 2\n2 1 2 1 2\nSample Output 1:\n2 2 2 1 1\nSample Input 2:\n5 2\n2 1 2 1 2\nSample Output 2:\n2 2 2 1 1\nSample Input 3:\n5 2\n2 1 1 2 2\nSample Output 3:\n2 2 1 2 1\nSample Input 4:\n5 2\n2 1 2 2 2\nSample Output 4:\n2 1 2 2 2\n'''\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\n\"\"\"\n\nn, c = [int(s) for s in input().split()]\nd = [int(s) for s in input().split()]\nd.sort()\nd.reverse()"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1') == '1 1 1 3 3 3 2 2 2'\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nlst = sorted([int(i) for i in stdin.readline().split()])\n\nfor i in range(n):\n    print(lst[i], end=' ')\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n\nimport sys\n\nN, C = [int(i) for i in sys.stdin.readline().split()]\n\na = [0] * C\nb = list(map(int, sys.stdin.readline().split()))\n\nfor i in b:\n    a[i - 1] += 1\n\nprint(*a)\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"8 2\") == \"2\"\n\"\"\"\n\n\"\"\"\n1. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443./temp\n2. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430./3_parse_lxml.py\n3. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0410\u041f\u0418 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n4. \u041e\u0446\u0435\u043d\u0438\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430\n5. \u041e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430\n\"\"\"\n\nimport os\nfrom datetime import datetime\nimport logging\nfrom logging.handlers import RotatingFileHandler\nimport lxml.etree as etree\nfrom urllib.request import Request, urlopen\n\nfrom func_timeout import func_timeout, FunctionTimedOut\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\nprint(\"All tests passed.\")\n\n-----Test input-----\n1\n23\n-----Test output-----\n34\n\n\"\"\"\nimport os\nimport sys\nfrom typing import List\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom util.decorators import timeit\n\n\n@timeit\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"38 24\") == \"875\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"38 24\") == \"875\"\nprint(solution(\"1 100\"))\n\"\"\"\n\nimport math\n\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('38 24') == '875'\nprint(solution('38 24'))\n\n'''\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 17\") == \"4\"\nassert solution(\"8 25\") == \"9\"\nassert solution(\"1 100\") == \"100\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n\nprint(\"\".join(sorted(stdin, reverse=True)))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n\nnum1 = input().split()\nnum2 = input().split()\n\nnum1 = [int(x) for x in num1]\nnum2 = [int(x) for x in num2]\n\nnum1.sort()\nnum2.sort()\n\nprint(num1[1]) if num1[0] == num2[0] else print(num2[1])\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"3 4\") == \"43\"\nassert solution(\"3 4 0\") == \"43\"\nassert solution(\"3 4 7\") == \"434\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('734 893') == '437'\n\"\"\"\n\nA, B = [int(num) for num in stdin.split()]\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"734 893\") == \"437\"\n\nprint(solution(\"734 893\"))\n\n'''\n\nA = input().split()\na = [int(x) for x in A]\na.sort()\n\nprint(str(a[1]))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nprint(solution('734 893'))\nprint(solution('221 231'))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"734 893\") == \"437\"\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"891 734\") == \"413\"\n\"\"\"\n\na = input()\nb = input()\n\nc = str(int(b[::-1]) - int(a[::-1]))\n\nprint(c[::-1])\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, l: str, w: str) -> str:\n        \"\"\"\n        Returns a word of length l and weight w that is the smallest English\n        word which is a valid solution.\n        \"\"\"\n        # l = int(l)\n        # w = int(w)\n        if l > 40 or l < 1 or w > 1000 or w < 1:\n            return 'impossible'\n        else:\n            letters = 'abcdefghijklmnopqrstuvwxyz'\n            d = {x: letters.find(x) + 1 for x in letters}\n            d['l'] = 1\n            d['z'] = 26\n            d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n            return ''.join([k for k, v in d.items() if v <= w])\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solution('11 131',), 'programming')\n        self.assertEqual(Solution().solution('7 96',), 'contest')\n        self.assertEqual(Solution().solution('3 2',), 'impossible')\n        self."
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\nprint(\"All tests passed.\")\n\n-----Hint-----\nThe first line in the input is the number of lines $l$ and the number $w$ in the game. The second line consists of the length and the weight of the word.\n\"\"\"\n\nfrom typing import Callable, List\nfrom termcolor import colored\nimport re\nimport math\nimport copy\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 131') == 'programming', 'error'\nassert solution('7 96') in ('contest', 'congress')\nassert solution('19 20') == 'impossible', 'error'\nassert solution('7 50') == 'impossible', 'error'\nprint('all tests passed')\n\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(output())\n\n------Solution------\n\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('10 19') == 'impossible'\nassert solution('11 0') == 'impossible'\nassert solution('11 131') == 'impossible'\nassert solution('11 131') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\n\nassert solution('7 96') == 'contest'\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\n-----Problem-----\nIn the Weight of Words game, the player must find words of a given length and a given weight. The weight of a word is the sum of the weights of its letters. Letters are English lowercase characters from \u2018a\u2019 to \u2018z\u2019 and have weights from $1 \\ldots 26$.\n\nWrite an AI that can play this game!\n\n-----Solution-----"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--\n''') == '''\n.^\n--\n\n'''\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == '''\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n'''\nprint('Test finished')"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 'X'\") == \".X\"\nassert solution(\"3 12 'A'\") == \"BBABABABABAC\"\nassert solution(\"2 2 '-'\") == \"---\"\nassert solution(\"2 2 'x'\") == \"xx\"\nassert solution(\"1 1 '.'\") == \"..\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 'X'\") == \"X^\\n--\\n.X\\n--\\n\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 \"X\"' == \"\"\"\n.X\n--\n\"\"\")\nassert solution('3 12 \"A\"' == \"\"\"\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\"\"\")\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--\\n') == '.X\\n--\\n'\n\"\"\"\nfrom typing import Iterator, List, Dict, Iterable, Tuple, Set, Union, Optional\nfrom collections import deque\nimport math\nimport re\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--''') == '''\n.^\n--\n\n'''\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == '''\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 \"X\"\\nX^\\n--\\n.') == '.^\\n--\\n'\nassert solution('3 12 \"A\"\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 2 'X'\nX^\n--\n\n.X\n--\n\"\"\") == \"\"\"X^\n--\n\n.X\n--\n\"\"\"\nassert solution(\"\"\"3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n\"\"\") == \"\"\"BBABABABABAC\nBBBABABABABB\nBBABABABABAB\n\"\"\"\n\n\"\"\"\nimport numpy as np\n\nN, M, C = input().split()\nN, M, C = int(N), int(M), ord(C)"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '2 2 \\'X\\nX^\\n--\\n\\n.X\\n--\\n'\n) == '\\'.X\\n--\\n\\n.X\\n--\\n'\n\nassert solution(\n    '3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\\n'\n) == '\\nBBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\\nBBABABABABAB\\nBBBABABABABB\\nBBABABABABAB\\n'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 \\'X\\nX^') == 'X^\\n'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB'\n\"\"\"\nimport re\nimport sys\nimport string\nimport math\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 4 14') == '1 0 3'\n\"\"\"\nimport itertools\nimport typing\nfrom fractions import Fraction\n\nSOLUTIONS = [\n    [0, 0, 3],\n    [0, 1, 2],\n    [1, 0, 1],\n    [1, 1, 0],\n    [1, 2, 0],\n    [2, 0, 1],\n    [2, 1, 0],\n    [3, 0, 0],\n    [5, 0, 1],\n    [7, 0, 0],\n]\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n3 0 2\\n3 1 1'\nassert solution('2 2 2 12') == 'impossible'\nassert solution('100 100 100 1000') == 'impossible'\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n3 0 2\\n3 1 1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\n\nimport io"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\n\"\"\"\nassert solution(\"100 80 60 240\") == \"\"\"0 0 4\n0 3 0\n1 1 1\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4 14\") == \"1 0 3\"\nassert solution(\"2 4 4 14\") == \"1 1 2\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"100 80 60 240\") == \"0 3 0\"\nassert solution(\"100 80 60 240\") == \"1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(9) == \"1\\n3\\n6\\n12\\n\"\nprint(\"Test 1 successful!\")\nassert solution(6) == \"2\\n4\\n\"\nprint(\"Test 2 successful!\")\nassert solution(2) == \"1\\n3\\n\"\nprint(\"Test 3 successful!\")\nassert solution(4) == \"2\\n6\\n\"\nprint(\"Test 4 successful!\")\n\nprint(\"\\nProblem 18 successful!\")\n\n-----Explanation-----\nThe algorithm for solving this problem is simple. It works in three steps:\n\nCompute the product of the range $1$ to $n$\nCompute the sum of that product and the sum of the digits of $n$\nDetermine if the sums are equal.\nIf the sums are equal, then the missing numbers must be between $1$ and $n$ (inclusive).\nOtherwise, the missing numbers must be between $1$ and $n$ (inclusive).\n\nFor example, suppose that $n$ is 11. We can compute the product of the range $1$ to $11$ as:\n\n1 x 2 x 3 x 4 x 5 x 6 x 7 x 8 x 9 x 10 x 11 = 11!\n\nThen we compute the sum of the digits of $11$ by adding the digits of $11$:\n\n1 + 1 = 2\n2 + 2 = 4\n4 + 4 = 8\n8 + 8 = 16\n16 + 16 = 32\n32 + 32 = 64\n64 + 64 = 128\n128 + 128 = 256\n256 + 256 = 512\n512 + 512 = 1024\n1024 + 1024 = 2048\n2048 + 2048 = 4096\nSo the sum of the digits of $11$ is $2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048 = 925$.\n\nWe then check if $n! + 925 = 1225$. If so, the missing numbers must be $1$ through $n$. Otherwise, the missing numbers are $1$ through $n - 1$ (inclusive).\n\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3\\n1\\n1\\n1\\n\") == \"good job\"\nassert solution(\"3\\n3\\n1\\n1\\n1\\n\") == \"2 4 6\"\n\nprint(solution(\"\"))"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"1\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\\n\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\\n\"\nassert solution(\"1\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\\n\"\n\"\"\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'good job'\nassert solution('2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12\\n'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n''') == 'good job'\nassert solution('''\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n''') == '1 3 6 12'\nassert solution('''\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n''') == '1 3 6 12'\nassert solution('''\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n''') == '1 3 6 12'\nassert solution('''\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n''') == '1 3 6 12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == 'good job'\nassert solution('9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '2\\n6\\n9'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n14\") == \"1\\n3\\n6\\n12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\") == \"1\\n3\\n6\\n12\\n14\\n15\"\n\"\"\"\nimport sys\nimport re\nfrom typing import List, Dict\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2\\n3\\n1\\n5\\n6\\n4\\n\") == \"good job\"\n\nassert solution(\"4\\n1\\n2\\n3\\n6\\n7\\n8\\n9\\n10\\n\") == \"1\\n3\\n5\\n7\\n9\"\n\nassert solution(\"2\\n1\\n2\\n3\\n5\\n6\\n4\\n\") == \"1\\n3\\n4\"\n\nassert solution(\"1\\n3\\n2\\n5\\n6\\n4\\n\") == \"1\\n2\\n3\\n4\\n5\\n6\"\n\nprint(\"Well done, have a nice day!\")\n-----\n2.\nSolutions:"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'good job', 'Wrong answer'\nassert solution('1\\n2\\n3\\n4\\n5') == '2\\n6', 'Wrong answer'\nassert solution('1\\n2\\n4\\n5\\n6\\n7') == '3\\n8', 'Wrong answer'\nassert solution('1\\n2\\n3\\n4\\n6') == '5\\n7', 'Wrong answer'\nassert solution('1\\n2\\n3\\n5\\n6\\n7') == '4', 'Wrong answer'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\n5\n2\n7\n3\n8\n9\n10\n11''') == '''1\n3\n6\n12'''\n\nprint(solution('''9\n4\n1\n2\n5\n7\n8\n3\n9\n10\n11'''))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\n\"\"\"\n\nfrom typing import Dict, List\nfrom math import log, sqrt"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport sys\nimport math\nimport itertools"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n\nc = math.sqrt(2)\n\nn, p, s, v = [float(n) for n in stdin.split()]\nt = s * (1 + 1 / c) / v\nprint(int(t * p), c)\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"4 11.2 2714.5 1710.8\") == \"5.732360595958718 22.624045274970144\"\n\"\"\"\nimport math\n\nINPUT_1 = \"10 8.9 40075000 272.1\"\nINPUT_2 = \"4 11.2 2714.5 1710.8\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n\nn, p, s, v = map(float, input().split())\n\nc = math.sqrt((n * math.log(n, 2)) / p)\nc = int(c + 0.5)\nt = s * (1 + 1 / c) / v\n\nprint(t, c)\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\nimport math\n\nn, p, s, v = map(float, input().split())\n\nmax_seconds = n * math.log(n, 2) / p\n\nprint(round(max_seconds * v / s, 6), round(max_seconds / v, 6))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '6'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\nassert solution('3') == 3\nassert solution('4') == 6\nassert solution('5') == 10\nassert solution('6') == 15\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n-----Note-----\nThe input contains a single integer, $N$ ($0 \\leq N \\leq 30$), the number of characters.\n\n-----Hint-----\nThe number of relationships can be calculated recursively.\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nN = int(sys.argv[1])"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n''') == '0'\nassert solution('''\n1\n''') == '0'\nassert solution('''\n2\n''') == '1'\nassert solution('''\n4\n''') == '4'\nassert solution('''\n10\n''') == '18'\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nprint(solution(stdin))\n\n\n-----\n2\n    \n4\n    \n6\n    \n    \n8\n    \n10\n    \n12\n    \n14\n\n16\n    \n18\n    \n20\n    \n22\n    \n    \n26\n    \n    \n\n-----\n3\n    \n    \n    \n    \n8\n    \n    \n10\n    \n    \n12\n    \n14\n    \n18\n\nSample Input:\n    \nSample Output:\n    \nExplanation:\n1.    \n2.    \n3.    \n4.    \n5.    \n6.    \n7.    \n8.    \n9.    \n10.    \n11.    \n12.    \n13.    \n14.    \n15.    \n16.    \n17.    \n18.    \n19.    \n20.    \n21.    \n22.    \n23.    \n24.    \n25.    \n26.    \n27.    \n28.    \n29.    \n30.    \n31.    \n32.    \n33.    \n34.    \n35.    \n36.    \n37.    \n38.    \n39.    \n40.    \n41.    \n42.    \n43.    \n44.    \n45.    \n46.    \n47.    \n48.    \n49.    \n50.    \n51.    \n52.    \n53.    \n54.    \n55.    \n56.    \n57.    \n58.    \n59.    \n60.    \n61.    \n62.    \n63.    \n64.    \n65.    \n66.    \n67.    \n68.    \n69.    \n70.    \n71.    \n72.    \n73.    \n74.    \n75.    \n76.    \n77.    \n78.    \n79.    \n80.    \n81.    \n82.    \n83.    \n84.    \n85.    \n86.    \n87.    \n88.    \n89.    \n90.    \n91.    \n92.    \n93.    \n94.    \n95.    \n96.    \n97.    \n98.    \n99.    \n100.    \n101.    \n102.    \n103.    \n104.    \n105.    \n106.    \n107.    \n108.    \n109.    \n110.    \n111.    \n112.    \n113.    \n114.    \n115.    \n116.    \n117.    \n118.    \n119.    \n120.    \n121.    \n122.    \n123.    \n124.    \n125.    \n126.    \n127.    \n128.    \n129.    \n130.    \n131.    \n132.    \n133.    \n134.    \n135.    \n136.    \n137.    \n138.    \n139.    \n140.    \n141.    \n142.    \n143.    \n144.    \n145.    \n146.    \n147.    \n148.    \n149.    \n150.    \n151.    \n152.    \n153.    \n154.    \n155.    \n156.    \n157.    \n158.    \n159.    \n160.    \n161.    \n162.    \n163.    \n164.    \n165.    \n166.    \n167.    \n168.    \n169.    \n170.    \n171.    \n172.    \n173.    \n174.    \n175.    \n176.    \n177.    \n178.    \n179.    \n180.    \n181.    \n182.    \n183.    \n184.    \n185.    \n186.    \n187.    \n188.    \n189.    \n190.    \n191.    \n192.    \n193.    \n194.    \n195.    \n196.    \n197.    \n198.    \n199.    \n200.    \n201.    \n202.    \n203.    \n204.    \n205.    \n206.    \n207.    \n208.    \n209.    \n210.    \n211.    \n212.    \n213.    \n214.    \n215.    \n216.    \n217.    \n218.    \n219.    \n220.    \n221.    \n222.    \n223.    \n224.    \n225.    \n226.    \n227.    \n228.    \n229.    \n230.    \n231.    \n232.    \n233.    \n234.    \n235.    \n236.    \n237.    \n238.    \n239.    \n240.    \n241.    \n242.    \n243.    \n244.    \n245.    \n246.    \n247.    \n248.    \n249.    \n250.    \n251.    \n252.    \n253.    \n254.    \n255.    \n256.    \n257.    \n258.    \n259.    \n260.    \n261.    \n262.    \n263.    \n264.    \n265.    \n266.    \n267.    \n268.    \n269.    \n270.    \n271.    \n272.    \n273.    \n274.    \n275.    \n276.    \n277.    \n278.    \n279.    \n280.    \n281.    \n282.    \n283.    \n284.    \n285.    \n286.    \n287.    \n288.    \n289.    \n290.    \n291.    \n292.    \n293.    \n294.    \n295.    \n296.    \n297.    \n298.    \n299.    \n300.    \n301.    \n302.    \n303.    \n304.    \n305.    \n306.    \n307.    \n308.    \n309.    \n310.    \n311.    \n312.    \n313.    \n314.    \n315.    \n316.    \n317.    \n318.    \n319.    \n320.    \n321.    \n322.    \n323.    \n324.    \n325.    \n326.    \n327.    \n328.    \n329.    \n330.    \n331.    \n332.    \n333.    \n334.    \n335.    \n336.    \n337.    \n338.    \n339.    \n340.    \n341.    \n342.    \n343.    \n344.    \n345.    \n346.    \n347.    \n348.    \n349.    \n350.    \n351.    \n352.    \n353.    \n354.    \n355.    \n356.    \n357.    \n358.    \n359.    \n360.    \n361.    \n362.    \n363.    \n364.    \n365.    \n366.    \n367.    \n368.    \n369.    \n370.    \n371.    \n372.    \n373.    \n374.    \n375.    \n376.    \n377.    \n378.    \n379.    \n380.    \n381.    \n382.    \n383.    \n384.    \n385.    \n386.    \n387.    \n388.    \n389.    \n390.    \n391.    \n392.    \n393.    \n394.    \n395.    \n396.    \n397.    \n398.    \n399.    \n400.    \n401.    \n402.    \n403.    \n404.    \n405.    \n406.    \n407.    \n408.    \n409.    \n410.    \n411.    \n412.    \n413.    \n414.    \n415"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nA\\nB\\nA\\nA\") == \"2\"\nassert solution(\"4\\nA\\nB\\nC\\nD\") == \"0\"\nassert solution(\"4\\nA\\nA\\nB\\nA\") == \"1\"\nassert solution(\"4\\nA\\nA\\nA\\nB\") == \"3\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\nassert solution('4\\nB\\nB\\nB\\nB') == 4\nassert solution('4\\nC\\nC\\nC\\nC') == 0\n\nimport numpy as np\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\n\n-----Test Case-----\nassert solution('4\\nB\\nC\\nD\\nA') == 2\n\"\"\"\n\nn = int(input())\nscore = 0\nfor i in range(n):\n    if input() == 'A':\n        score += 1\nprint(score)\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n\nsolution('''3\nA\nA\nA\n''')\n\nsolution('''5\nB\nB\nB\nB\nB''')"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"5\\nA\\nB\\nC\\nD\\nB\\n\") == \"3\"\nassert solution(\"4\\nA\\nA\\nA\\n\") == \"4\"\n\n-----Note-----\nThis is a sample test case. You can write your own test cases.\n\n-----Note-----\nThis is a sample test case. You can write your own test cases.\n\n'''\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\nassert solution(\"3\\nA\\nB\\nA\") == 1\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nA\\nB\\nC\\nD') == '0'"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCD\") == \"3\"\nassert solution(\"BACD\") == \"1\"\nassert solution(\"CABD\") == \"1\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('ABC') == 3\nassert solution('AA') == 0\nassert solution('AAA') == 1\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nprint(solution(stdin))\n\n\"\"\"\n\ninputs = \"3 3 1 2\\n.x.\\nx.x\\n.x.\"\ninputs = inputs.split(\"\\n\")\n\nr = int(inputs[0].split(\" \")[0])\nc = int(inputs[0].split(\" \")[1])\nzr = int(inputs[0].split(\" \")[2])\nzc = int(inputs[0].split(\" \")[3])\n\nmat = inputs[1:r+1]\n\nnew_mat = [[0 for j in range(zc)] for i in range(zr*r)]\n\nfor i in range(r):\n    for j in range(c):\n        if mat[i][j] == \".\":\n            new_mat[i][j] = \".\"\n        else:\n            new_mat[i*zr][j*zc] = mat[i][j]\n\n\n\nfor i in range(r):\n    for j in range(c):\n        if new_mat[i][j] == 0:\n            print(\". \", end=\"\")\n        else:\n            print(new_mat[i][j], end=\"\")\n    print(\"\")"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \".x.\\nx.x\\n.x.\"\n) == \"..xx..\\nxx..xx\\n..xx..\", \"Test #1\"\n\nassert solution(\n    \"5 5 1 1\\nxxxx\\nx.x\\nxxxx\\nxxxx\\nxxxx\\n\"\n) == \"xxxxxx\\nxxxxxx\\nxxxxxx\\nxxxxxx\\nxxxxxx\\n\"\n\nassert solution(\n    \"6 6 1 1\\nxxxx\\nx.x\\nxxxx\\nxxxx\\nxxxx\\nxxxx\\nxxxx\\n\"\n) == \"xxxxxx\\nxxxxxx\\nxxxxxx\\nxxxxxx\\nxxxxxx\\nxxxxxx\\nxxxxxx\\n\"\n\nassert solution(\n    \"3 6 1 2\\n.x.\\nx.x\\n.x.\"\n) == \"..x..\\nx.xx\\n..x..\\n\"\n\nassert solution(\n    \"2 3 1 1\\n.x\\nx.\\n.x\\n\"\n) == \"x.x\\n.x.\\n.x.\\n\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"xxxxxx\\nxx..xx\\nxx..xx\\nxxxxxx\\n\"\nassert solution(\"5 5 1 2\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\n\") == \"xxxxxx\\nxxx..x\\nxxxxxx\\nxxxxxx\\n\"\nassert solution(\"5 5 1 2\\nxxxxxxxx\\nxxxxxxxx\\nxxxxxxxx\\nxxxxxxxx\\n\") == \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxx"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx...\"\nassert solution(\"5 5 1 2\\n.x.\\nx.x\\n.x.\\nx.x\\n.x.\") == \"...xx.....\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\"\nassert solution(\"5 5 1 2\\n.x.\\nx.x\\n.x.\\nx.x\\n.x.\") == \"...xx.....\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"3 3 1 2\\n.x.\\nx.x\\n.x.\"\n) == \"..xx..\\nxx..xx\\n..xx..\"\n\nassert solution(\n\"3 3 1 2\\n.x.\\nx.x\\n.x.\"\n) == \"..xx..\\nxx..xx\\n..xx..\"\n\nassert solution(\n\"3 3 1 2\\n.x.\\nx.x\\n.x.\"\n) == \"..xx..\\nxx..xx\\n..xx..\"\n\nassert solution(\n\"3 3 1 2\\n.x.\\nx.x\\n.x.\"\n) == \"..xx..\\nxx..xx\\n..xx..\"\n\nassert solution(\n\"3 3 1 2\\n.x.\\nx.x\\n.x.\"\n) == \"..xx..\\nxx..xx\\n..xx..\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"3 3 1 2\\n.x.\\nxx.\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"3 3 1 2\\n.x.\\nxx.\\n.x.\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n..xx..\\n\"\nassert solution(\"3 3 1 2\\n.x.\\nx.\\n.x.\\n.x.\") == \"..xx..\\nxx..\\n..xx..\\n..xx..\\n\"\nassert solution(\"4 4 1 2\\n.x.\\nx.\\n.x.\\n.x.\\n.x.\\n.x.\") == \"..xx..\\nxx..\\n..xx..\\n..xx..\\n..xx..\\n..xx..\\n\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 3 1 2\n.x.\nx.x\n.x.\"\"\") == \"\"\"..xx..\nxx..xx\n..xx..\n\"\"\"\nassert solution(\"\"\"3 3 1 2\n.x.\nx.x\n.x.\"\"\") == \"\"\"..xx..\nxx..xx\n..xx..\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nprint(solution(stdin))\n\n-----Problem link-----\nhttps://www.codechef.com/LTIME94B/problems/TALOL\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('F 60 13 20') == '14 20'\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('F\\n') == '00'\nassert solution('F 60 13 20\\n') == '14 20'\nassert solution('F 60 13 20\\n') == '14 20'\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 0\") == \"13 0\"\nassert solution(\"F 60 13 15\") == \"14 30\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n\nN = int(input())\n\nfor _ in range(N):\n    a, b, c, d = input().split()\n\n    if a == \"F\":\n        h = (int(c) + int(d) // 60) % 24\n        m = (int(d) % 60)\n        print(f\"{h} {m}\")\n\n    elif a == \"B\":\n        h = (int(c) - int(d) // 60) % 24\n        m = (int(d) % 60)\n        print(f\"{h} {m}\")"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('F 60 13 20') == '14 20'\nassert solution('F 10 30 11') == '11 30'\nassert solution('B 3 5 30') == '2 22'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1\nF 60 13 20''') == '14 20'\nassert solution('''2\nF 30\nF 30''') == '0 30'\nassert solution('''3\nF 60 13 20\nB 60\nB 30\nF 30\nF 30''') == '18 30'\nassert solution('''4\nF 60 12 55\nF 30\nF 30\nB 30\nF 30''') == '22 55'\nassert solution('''5\nF 60 12 55\nF 30\nF 30\nB 30\nF 30\nF 30''') == '22 55'\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"F 60 13 20\\n\") == \"14 20\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin='OCT 31') == 'yup'\nassert solution(stdin='SEP 30') == 'nope'\nassert solution(stdin='SEP 1') == 'nope'\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 28\") == \"nope\"\nassert solution(\"JAN 1\") == \"nope\"\nassert solution(\"NOV 30\") == \"nope\"\nassert solution(\"NOV 31\") == \"nope\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 31\\n\") == \"yup\"\nassert solution(\"OCT 31\\nOCT 31\") == \"yup\\nyup\"\nassert solution(\"SEP 30\") == \"nope\"\nassert solution(\"OCT 32\\nOCT 31\") == \"nope\\nyup\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 30') == 'nope'\nassert solution('NOV 32') == 'nope'\nassert solution('NOV 31') == 'nope'\nassert solution('DEC 25') == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('JAN 1') == 'nope'\nassert solution('FEB 9') == 'nope'\nassert solution('DEC 25') == 'nope'\nassert solution('MAR 9') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"FEB 12\") == \"nope\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'nope'\nassert solution('oct 31') == 'yup'\nassert solution('jul 30') == 'nope'\n\nfrom collections import OrderedDict\n\ndict = OrderedDict({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9, 'J': 10, 'K': 11, 'L': 12, 'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26})"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"NOV 1\") == \"nope\"\nassert solution(\"FEB 32\") == \"nope\"\nassert solution(\"NOV 1\") == \"nope\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 2 2\\nhoni\\noker\\nera\\nnera\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4 4 2 2\\nhoni\\noker\\nera\\nnera\"), \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.\")"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\n\") == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\n-----Explanation-----\nThe word \\code\\honi\\ is placed in the top left field, and so on.\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n    \".#.#.#.\\n.#.#.#.\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\n\"\"\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"####\\n#.#\\n#.h\\n.#k\\n####\\n#.#\\n#.n\\n####\\n#.#\\n#.r\\n####\\n#.#\\n#.a\\n####\\n#.#\\n#.i\\n####\"\nassert solution(\"2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"####\\n#.#\\n#.h\\n.#k\\n####\\n#.#\\n#.n\\n####\\n#.#\\n#.r\\n####\\n#.#\\n#.a\\n####\\n#.#\\n#.i\\n####\"\nassert solution(\"4 5\\nhf\\noo\\nqw\\nrz\\nzzz\\nbbb\") == \"#h\\n#f\\n##o\\n#q\\n#w\\n#r\\n####\\n#z\\n#z\\n#z\\n####\\n#b\\n#b\\n#b\"\nassert solution(\"5 5\\nhf\\noo\\nqw\\nrz\\nzzz\\nbbb\") == \"#h\\n#f\\n##o\\n#q\\n#w\\n#r\\n####\\n#z\\n#z\\n#z\\n####\\n#b\\n#b\\n#b\"\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 2 2\\nhoni\\noker\\nnera\\nirak') == \\\n        '#.#.#.#\\n.honi#.\\n#.oker#.\\n#.nera#.\\n#.irak#.\\n#.#.#.#\\n#.#.#.#'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"honi\\noker\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\nnera\\n#.#.#.#\\n#.#.#.#\\nhoni\\n#.#.#.#\\nirak\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n\"\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.\"\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 2 2 honi\\noker\\nnera\\nirak') == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#\\n#.#.#.#'\n\nSample Input:\n3 4 3 4\nhooo\nnoo\noooo\nSample Output:\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('honi') == '#.#.#.#'\nassert solution('honi\\noker') == '#.#.#.#\\n#.honi#.'\nassert solution('honi\\noker\\nnera') == '#.#.#.#\\n#.honi#.\\n#.nera#.'\nassert solution('honi\\noker\\nnera\\nirak') == '#.#.#.#\\n#.honi#.\\n#.nera#.\\n#.irak#.'"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\")\n\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\")\n\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White:.r.|:::|.b.|:q:|.k.|:::|.n.|:r:\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black:.p.|.p.|.p.|.p.|.p.|:::|.p.\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == '+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|p.|p.|p.|p.|p.|:::|p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|P.|:P:|...|:P:|.P.|:P:|:P:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|P.|P.|P.|P.|P.|P.|P.|P.|\\n+---+---+---+---+---+---+---+---+\\n|:R:|N.|:B:|Q.|:K:|B.|:::|R.|\\n+---+---+---+---+---+---+---+---+'\n\nprint(solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"))"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Kg8,Kh7,Kh6,Kg7,Kf8,Kd8,Kc8,Kh8,Kg8') == 'Kd7,Kf7,Kf8,Kd8,Kc8,Kh7,Kh8,Kg7,Kg8'\nassert solution('qb2,kb2,qb3,kb3,qb4,kb4,qb5,kb5,qb6,kb6,qb7,kb7,qb8,kb8,qb9,kb9,qb10,kb10,qb11,kb11,qb12,kb12,qb13,kb13,qb14,kb14,qb15,kb15,qb16,kb16,qb17,kb17,qb18,kb18,qb19,kb19,qb20,kb20,qb21,kb21,qb22,kb22,qb23,kb23,qb24,kb24') == 'qd2,kb2,qd3,kb3,qd4,kb4,qd5,kb5,qd6,kb6,qd7,kb7,qd8,kb8,qd9,kb9,qd10,kb10,qd11,kb11,qd12,kb12,qd13,kb13,qd14,kb14,qd15,kb15,qd16,kb16,qd17,kb17,qd18,kb18,qd19,kb19,qd20,kb20,qd21,kb21,qd22,kb22,qd23,kb23,qd24,kb24'"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n)\nprint(\"Test passed\")\n\n\"\"\"\n    If the input is not valid, return an empty string.\n\"\"\"\n\n-----\nYou are playing the following game: Given a word, you and your friend have to rearrange the letters of the word so that every letter appears once. You start with a certain number of letters and you and your friend take turns removing one or two letters from the word. The game ends when there are not enough letters left in the word to complete a pass \u2013 ie, the game ends if the word has been fully sorted. You and your friend will play optimally \u2013 the game will end before anyone has taken more than one turn, and the player who takes the last letter will win.\n\nGiven the word, your friend's name and your total number of letters, determine whether you can win the game.\n\n-----Input-----\nThe first input line contains a string that consists of lowercase English letters. It is guaranteed that the length of the string is in the range [2\u202620,000].\n\nThe second line contains a string of length n (2 \u2264 n \u2264 20) \u2013 your friend's name.\n\nThe third line contains a number t \u2013 the number of letters in the word you must take with you (1 \u2264 t \u2264 100).\n\n-----Output-----\nPrint YES if you can win the game, and NO if it's impossible.\n\n-----Examples-----\nInput 1:\n\nabcde\nsurname\n4\n\nOutput 1:\n\nYES\n\nInput 2:\n\nabcde\nsurname\n4\n\nOutput 2:\n\nNO\n\nInput 3:\n\ncba\nsurname\n3\n\nOutput 3:\n\nYES\n\n\"\"\"\n\nimport collections\n\nword = input()\nfriend_name = input()\ntotal_letters = int(input())\n\ncounter = collections.Counter(word)"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n    ) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\")\n    == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Kg1,Kh1,a2,b2,c2,d2,e2,f2,g2,h2,a3,e4\")\n    == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Black: Kg8,Kh8,a7,b7,c7,d7,e7,f7,g7,h7,a6,b6,c6,d6,e6,f6,g6,h6\")\n    == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Kb1,Kc1,Kd1,Ke1,Kf1,Kg1,Kh1,a2,b2,c2,d2,e2,f2,g2,h2,a3,b3,c3,d3,e3,f3,g3,h3,a4,b4,c4,d4,e4,f4,g4,h4\")\n    == \"+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n\"\n                \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\n\"\n                \"1. e4 c5 2. Nf3 Nc6 3. h3 e5 4. b3 Bg5 5. g2 g6 6. Bg2 c5 7. c3 c5\") == \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:::|...|:::|...|:::|...|:::|...|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|...|:::|...|:::|.P.|:::|...|:::|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:P:|...|:::|...|:::|...|:::|...|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n\"\n                \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\n\"\n                \"1. e4 c5 2. Nf3 Nc6 3. h3 e5 4. b3 Bg5 5. g2 g6 6. Bg2 c5 7. c3 c5\") == \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:::|...|:::|...|:::|...|:::|...|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|...|:::|...|:::|.P.|:::|...|:::|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:P:|...|:::|...|:::|...|:::|...|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\\n\" \\\n                \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\" \\\n                \"+---+---+---+---+---+---+---+---+\"\n\n\"\"\"\nSample Input 1:\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n1. e4 c5 2. Nf3 Nc6 3. h3 e5 4"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\n\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\")\n\"\"\"\nThe move is one of the following:\n    1. \"a1\"\n    2. \"b1\"\n    3. \"c1\"\n    4. \"d1\"\n    5. \"e1\"\n    6. \"f1\"\n    7. \"g1\"\n    8. \"h1\"\n    9. \"a2\"\n    10. \"b2\"\n    11. \"c2\"\n    12. \"d2\"\n    13. \"e2\"\n    14. \"f2\"\n    15. \"g2\"\n    16. \"h2\"\n    17. \"a3\"\n    18. \"b3\"\n    19. \"c3\"\n    20. \"d3\"\n    21. \"e3\"\n    22. \"f3\"\n    23. \"g3\"\n    24. \"h3\"\n    25. \"a4\"\n    26. \"b4\"\n    27. \"c4\"\n    28. \"d4\"\n    29. \"e4\"\n    30. \"f4\"\n    31. \"g4\"\n    32. \"h4\"\n    33. \"a5\"\n    34. \"b5\"\n    35. \"c5\"\n    36. \"d5\"\n    37. \"e5\"\n    38. \"f5\"\n    39. \"g5\"\n    40. \"h5\"\n    41. \"a6\"\n    42. \"b6\"\n    43. \"c6\"\n    44. \"d6\"\n    45. \"e6\"\n    46. \"f6\"\n    47. \"g6\"\n    48. \"h6\"\n    49. \"a7\"\n    50. \"b7\"\n    51. \"c7\"\n    52. \"d7\"\n    53. \"e7\"\n    54. \"f7\"\n    55. \"g7\"\n    56. \"h7\"\n    57. \"a8\"\n    58. \"b8\"\n    59. \"c8\"\n    60. \"d8\"\n    61. \"e8\"\n    62. \"f8\"\n    63. \"g8\"\n    64. \"h8\"\n    65. \"P\"\n    66. \"Q\"\n    67. \"R\"\n    68. \"N\"\n    69. \"B\"\n    70. \"K\"\n    71. \"R\"\n    72. \"A\"\n    73. \"C\"\n    74. \"D\"\n    75. \"E\"\n    76. \"F\"\n    77. \"G\"\n    78. \"H\"\n    79. \"A\"\n    80. \"C\"\n    81. \"D\"\n    82. \"E\"\n    83. \"F\"\n    84. \"G\"\n    85. \"H\"\n\"\"\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\n\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\"\"\"\nimport string\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\nassert solution(\"1.1000000 4.2147483647\") == \"Need more materials!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\nassert solution(\"2.999999 4.000000\") == \"Need more materials!\"\n\nassert solution(\"2.999999 4.999999\") == \"Need more materials!\"\n\nassert solution(\"2.99999 4.999\") == \"Need more materials!\"\n\nassert solution(\"2.999 5.999\") == \"Diablo is happy!\"\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.49999 5.000000\") == \"Need more materials!\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"2.5 4.5\") == \"Need more materials!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.0 4.0\") == \"Need more materials!\"\nassert solution(\"1.1 4.0\") == \"Need more materials!\"\nassert solution(\"1.0 4.1\") == \"Diablo is happy!\"\nassert solution(\"1.1 4.1\") == \"Diablo is happy!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0 4.0\") == \"Need more materials!\"\nassert solution(\"0.2 4.0\") == \"Diablo is happy!\"\nassert solution(\"1.0 6.0\") == \"Need more materials!\"\nassert solution(\"1.0 2.0\") == \"Diablo is happy!\"\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\n\na, n = map(float, input().split())"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.0 4.0\") == 'Diablo is happy!'\nassert solution(\"2.0 3.0\") == 'Need more materials!'\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Need more materials!'\nassert solution('1.0 1.0') == 'Need more materials!'\nassert solution('1.1 1.0') == 'Diablo is happy!'\nassert solution('1.0 0.99') == 'Diablo is happy!'\nassert solution('0.99 1.0') == 'Diablo is happy!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"use the stairs\"\nassert solution(\"1 2 3 5 4\") == \"use the stairs\"\nassert solution(\"5 2 3 4 1\") == \"use the stairs\"\nassert solution(\"5 1 5 2 1\") == \"use the stairs\"\nassert solution(\"3 5 1 4 2\") == \"use the stairs\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"100 100 100 100\") == \"use the stairs\"\nassert solution(\"10 100 100 1 100\") == \"use the stairs\"\nassert solution(\"100 100 1 100 1\") == \"use the stairs\"\n\n-------------------------\n\nimport sys\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"1 10 100 1 1\") == \"use the stairs\"\nassert solution(\"1 10 100 2 1\") == \"use the stairs\"\nassert solution(\"1 10 100 1 2\") == 6\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('1 1 1 1 1') == 'use the stairs'\nassert solution('1 1 1 2 1') == 'use the stairs'\n\nSolution:\nimport math"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 10 2 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nimport math\nimport unittest\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nimport sys\n\nf, s, g, u, d = [int(num) for num in sys.stdin.readline().split()]"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nfloor = list(map(int, stdin.split()))\n\ns, g, u, d = floor[0], floor[1], floor[2], floor[3]\n\ns_g = g - s + 1\ns_g_u = u - s + 1\ns_g_d = d - s + 1"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 1 10 2 1') == '6'"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '3'\nassert solution('10\\n20\\n30\\n') == '40'\n\nSolution:\nfrom sys import stdin\nn = int(stdin.readline())\nscores = [int(stdin.readline()) for _ in range(n)]\nprint((sum(s * (4 / 5) ** i for i, s in enumerate(scores)) / n) ** (1 / 5))\n'''\nfrom sys import stdin\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n500\\n120\\n75\\n') == '128.8'\nassert solution('4\\n12345\\n1234\\n1234\\n1234\\n') == '111.22222222222223'\n\n----Test Case 2----\n\nInput:\n2\n500\n120\nOutput:\n128.8\n112.4\n\n----Test Case 3----\n\nInput:\n3\n100\n120\n125\nOutput:\n112.8\n120.1666666667\n121.6\n\n----Test Case 4----\n\nInput:\n2\n12345\n1234\nOutput:\n111.22222222222223\n112.4\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n500\\n120\\n75\\n\") == \"128.8\"\nassert solution(\"1\\n499\\n\") == \"0.0\"\nassert solution(\"5\\n125\\n125\\n125\\n125\\n125\\n\") == \"25.0\"\nassert solution(\"2\\n499\\n500\\n\") == \"12.5\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n5\\n9') == '1.5'\nassert solution('1\\n1\\n1') == '1.0'\nassert solution('1\\n1\\n2') == '1.0'\nassert solution('1\\n2\\n1') == '0.5'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0\\n') == '0.0'\nassert solution('0\\n1\\n') == '0.1'\nassert solution('0\\n1\\n2\\n') == '0.2'\nassert solution('0\\n1\\n2\\n3\\n') == '0.1'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('0\\n') == ''\nassert solution('1\\n2\\n') == '1.0'\nassert solution('1\\n2\\n3\\n') == '1.1111111111111111'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n500\n120\n75\"\"\") == \"128.8\"\nassert solution(\"\"\"3\n500\n120\n75\"\"\") == \"89.06666666666666\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 45 65 84 346\") == 4\n\"\"\"\nimport sys"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 45 65 84 346\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n\ndirt = [0] * 365\ndirty_days = [int(x) for x in input().split()]\nfor i in range(len(dirty_days)):\n    dirt[dirty_days[i] - 1] += 1\n\ncleanup_fails = 0\nfor i in range(len(dirt)):\n    if i == 0:\n        if dirt[i] >= 20:\n            cleanup_fails += 1\n    elif i == len(dirt) - 1:\n        if dirt[i] >= 20:\n            cleanup_fails += 1\n        if dirt[i] >= 1:\n            cleanup_fails += 1\n    else:\n        if dirt[i] >= 20:\n            cleanup_fails += 1\n        if dirt[i - 1] >= 20:\n            cleanup_fails += 1\n        if dirt[i] >= 1:\n            cleanup_fails += 1\n\nprint(cleanup_fails)"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 4\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 45 65 84 346') == 4\n'''\n\ndays = int(input())\npush_days = [int(day) for day in input().split()]"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == '4'\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\ncount = 0\nfor i, n in enumerate(nums):\n    if n > 20:\n        count += 1\n        nums[i] -= 20\n\nprint(count)\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"5\n1 45 65 84 346\"\n) == '4'\nassert solution(\n\"4\n1 45 65 84\"\n) == '0'\nassert solution(\n\"2\n45 65\"\n) == '0'\nassert solution(\n\"1\n45\"\n) == '0'\nassert solution(\n\"0\"\n) == '0'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('5 5\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('7 5\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '0'\nassert solution('7 7\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '0'\nassert solution('7 8\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n\nSolution:\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"5 5\\n.T....\\n.....T\\n.....T\\n.....T\\n.....T\") == \"0\"\nassert solution(\"7 4\\n######\\n#G..P#\\n#T..#\\n#..#G\\n#T#.#\\n######\") == \"2\"\nassert solution(\"7 4\\n######\\n#G..P#\\n#..T#\\n#..#G\\n#T#.#\\n######\") == \"2\"\nassert solution(\"7 4\\n######\\n#G..P#\\n#..#G\\n#..#G\\n#T#.#\\n######\") == \"2\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n####\\n#.G.#\\n##.G#\\n#####\\n\") == \"1\"\nassert solution(\"5 5\\n.G...G\\n.G...G\\n.G...G\\n.G...G\\n\") == \"0\"\nassert solution(\"7 7\\n.G.#.G\\n.G.#.G\\n.G.#.G\\n.G.#.G\\n.G.#.G\\n.G.#.G\\n\") == \"4\"\nassert solution(\"5 5\\n.G.#G\\n.G.#G\\n.G.#G\\n.G.#G\\n\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == 1\n\"\"\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('P') == '1'\nassert solution('G') == '1'\nassert solution('P.G') == '1'\nassert solution('T.G') == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#...#\") == 0\nassert solution(\"7 4\\n#G...#\\n#...T#\\n#...#\\n#...#\") == 2"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n\n---\n\nSample Input:\n12 6\\n_$$$_$$$__$__$$$_$$$$$$\\n$__$__$__$__$__$$$__$$$\\n$__$__$__$__$__$$$__$$$\\n$__$__$__$__$__$$$__$$$\\n$__$__$__$__$__$$$__$$$\\n$__$__$__$__$__$$$__$$$\\n$__$__$__$__$__$$$__$$$\\n$$__$__$$$__$__$$$__$$$\\n$$__$__$$$__$__$$$__$$$\\n$$__$__$$$__$__$$$__$$$\\n$$__$__$$$__$__$$$__$$$\\n$$__$__$$$__$__$$$__$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$$$$$$$__$$$$$$__$$$$\\n$$$$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$''') == '5'\nassert solution('''13 50\n___$$___$$___$$____$$___$$___$$___$$___$$____$$____\n___$$___$$___$$____$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___$$___$$___$$___$$___$$___$$___$$___$$____$$____\n___"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"13\"\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"12\"\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == 5\n\nprint(solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n'))\nassert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == 5\n\nprint(solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$_\\n___$____$___$_____$___$____$____$_____$___$____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('$____$$____$___$____$_$______$___$____$') == 0\nassert solution('_$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$') == 0\nassert solution('$$______$$$$$$$$$$____$$$$$$$$$$_$$') == 0\nassert solution('___$$$$$_____$$$$$$$$$$$$$$$$$$$$') == 0\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n        \"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n        \"_____$_________$________$__________$________$_____\\n\"\n        \"___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n\"\n        \"__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n\"\n        \"_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n\"\n        \"$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n\"\n        \"_____$_$______$_$_____$_$_________$_$_____$_$_____\\n\"\n        \"____$___$____$___$____$___$______$___$____$___$___\\n\"\n        \"___$____$___$_____$___$____$____$_____$___$____$__\\n\"\n        \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n        \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n        \"_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == 5\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 7\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 7\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$') == '5'\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    i cant speak pig latin\n    "
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(pig_latin_example) == 'igpay atinlay'\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('this is my house') == 'htay isay myyay housay'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\n\"\"\"\n\nimport re\nimport sys\nimport itertools"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\nprint(solution(\"i cant speak pig latin\"))\n-----Explanation-----\ninput: i cant speak pig latin\noutput: iyay antcay eakspay igpay atinlay\nNote that there's no space in the output.\n\nIn the example above, the input is read as \"i cant speak pig latin\" and is translated to \"iyay antcay eakspay igpay atinlay\".\n\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\nprint(\"All tests passed.\")\n-----Test Input-----\nYou should test your code with this first:\nYou can change the first line to either test your code against Sample Input or Random Input\n\nSample Input:\ni cant speak pig latin\nI can't speak pig latin\nRandom Input:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla facilisi. Vestibulum varius lacinia. Cras fringilla tincidunt dolor. Nulla sit amet tellus orci. Maecenas sed felis tortor. Nam euismod nunc scelerisque, elementum lorem eget, consequat sapien. Suspendisse nec ex.\n\n-----Sample Output-----\nYou should submit your solution in this box\n\nYou should test your code with this first:\nYou can change the first line to either test your code against Sample Input or Random Input\n\nSample Input:\ni cant speak pig latin\nI can't speak pig latin\nRandom Input:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla facilisi. Vestibulum varius lacinia. Cras fringilla tincidunt dolor. Nulla sit amet tellus orci. Maecenas sed felis tortor. Nam euismod nunc scelerisque, elementum lorem eget, consequat sapien. Suspendisse nec ex.\n\n-----Explanation-----\nThis problem includes three solutions, so we only need to explain one. This is the one from the teacher:\n\n1. Write the rules and do some tests.\n2. The easiest way is to write a program in Python or Java that converts the text into Pig Latin. The rules for converting the text to Pig Latin are described above.\n3. Your program should translate the text to Pig Latin using the rules described above.\n\nTo translate the text to Pig Latin, the first letter of each word is chosen. The rest of the word is added after it and the letter at the beginning is removed.\n\nPig Latin is similar to English, but changes the order of the letters in the word: first, move the first letter to the end, then add ay.\n\nFor example, kitten \u2192 ikitten and book \u2192 abook.\n\nPig Latin is a common way of converting English into nonsense. You can read more about it here.\n\nWhen translating from English to Pig Latin, you can ignore most punctuation marks and letters. These include:\n- Spaces\n- Commas\n- Full stops\n- Question marks\n- Exclamation points\n- Exclamation marks\n- Colons\n- Periods\n- But do not remove any letters, numbers or other symbols from the text.\n\nFor example, the word \"Hello, world!\" would be converted to \"elloHay orldway!\".\n\nNote that punctuation marks are part of the word.\n\nLanguages\nEnglish\nDutch\nHungarian\nArabic\nJapanese\nHebrew\nKorean\nPolish\nRussian\n\nJavaScript\nPython\nRuby\nPHP\nBash\nTypeScript\n\n------\nPig Latin is a spoken language, so you can\u2019t test it.\n\nHave fun, and good luck.\n\n'''"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"She can speak pig latin\") == \"Iayay ecanhay ipsay osay angpay atinlay\"\nassert solution(\"This is a test\") == \"Iayay ystay isay testay\"\n\nSample Input 2:\nShe can speak pig latin\nThis is a test\nSample Output 2:\nIayay ecanhay ipsay osay angpay atinlay Iayay ystay isay testay\nIayay ecanhay ipsay osay angpay atinlay Iayay ystay isay testay\n\"\"\"\n\nimport re\n\nvowels = \"aeiouy\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n\nimport re\nfrom typing import Dict, List, Pattern, Set\n\nVOWELS = set('aeiou')\nCONSONANTS = set('bcdfghjklmnpqrstvwxyz')"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i can speak pig latin') == 'iay ay ayay ayay ayay ayay ayay aayay ayay ayay aay ay ayay aay ay'\nassert solution('i am a pig') == 'iay ay ayay ayay aay ay ay ay ay'\nassert solution('say what you want and i will do that for you') == 'aysay owhay ewhay ewhatay owhay owhay'\n'''"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\"\n) == \"nymble\"\nassert solution(\n\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\"\n) == \"Anywhere is fine I guess\"\nassert solution(\n\"\"\"\n2\n3\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\"\n) == \"nymble\"\nassert solution(\n\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\"\n) == \"Anywhere is fine I guess\"\nassert solution(\n\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\"\n) == \"nymble\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('q\\n3\\nnymble\\npancakes\\npoon soup\\n') == 'nymble'\nassert solution('q\\n3\\nnymble\\npancakes\\npoon soup\\n') == 'Anywhere is fine I guess'\nassert solution('q\\n3\\nnymble\\npancakes\\npoon soup\\n') == 'nymble'\nassert solution('q\\n3\\nnymble\\npancakes\\npoon soup\\n') == 'Anywhere is fine I guess'\nassert solution('q\\n3\\nnymble\\npancakes\\npoon soup\\n') == 'Anywhere is fine I guess'\n\nSample Input:\n2\n2\nq\\n3\\nnymble\\npancakes\\npoon soup\\n\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npoon soup\\n\npunsch\\n3\\nnymble\\npancakes\\npoon soup\\n\nSample Output:\nnymble\nnymble\n\nSolution:\nimport re\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Anywhere is fine I guess'\nassert solution('\\n\\n\\n\\n\\n\\n') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\"\"\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == 'nymble'\n'''\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\nprint(solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch'))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"nymble\"\nassert solution(\"3\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"Anywhere is fine I guess\"\nassert solution(\"5\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"Anywhere is fine I guess\"\nassert solution(\"3\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"nymble\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('5 5 15') == '0'\nassert solution('0 5 15') == '-1'\nassert solution('1 1 15') == '-1'\nassert solution('5 5 5') == '1'\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 0 15\\n\") == \"3\"\n\n\"\"\"\n\nfrom typing import Callable\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 15\") == 3\nassert solution(\"10 20 30\") == 1\nassert solution(\"5 0 5\") == 1\nassert solution(\"10 15 10\") == 2\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 0 15') == 3\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 0 15') == 3\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 15\\n\") == \"3\"\n\"\"\"\n\nimport sys\n\nstdin = list(map(int, sys.stdin.readlines()))\na = stdin[0]\nb = stdin[1]\nh = stdin[2]"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 0 15\\n\") == \"3\"\n\n\"\"\"\n\nfrom math import ceil\n\na, b, h = map(int, input().split())\nprint(ceil((h - b) / (a - b)))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 0 15''') == \"3\"\n'''\n5 0 15\n\n3\n'''\n\nassert solution('''10 0 15\n''') == \"5\"\n'''\n10 0 15\n\n2\n'''\n\nassert solution('''10 3 15\n''') == \"5\"\n'''\n10 3 15\n\n1\n'''\n\nassert solution('''10 1 15\n''') == \"2\"\n'''\n10 1 15\n\n1\n'''\n\nassert solution('''0 10 15\n''') == \"1\"\n'''\n0 10 15\n\n0\n'''"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 15') == '19'\nassert solution('1 1') == '1'\nassert solution('-1 -1') == '-1'\n\"\"\"\n\nA, B = map(int, input().split())\n\nprint(A+B)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 15') == '19'\nassert solution('13 12') == '13'\nassert solution('11 5') == '11'\nassert solution('6 11') == '11'\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 15') == '19'\n'''\n\ns1, s2 = input().split()\n\nsum = int(s1) + int(s2)"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 15') == '19'\nassert solution('1 2') == '1'\nassert solution('1\\n2') == '1'\n\n'''\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 15') == '19'\n\n\"\"\"\n\nfrom sys import stdin\n\nA, S = stdin.readline().strip().split()\nA = int(A)\nS = int(S)\n\nB = (A + S) // 2\n\nprint(B)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"-1 5\") == \"4\"\nassert solution(\"-1 -2\") == \"-1\"\nassert solution(\"-1 -1\") == \"0\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom math import floor\n\nr1, s = input().split()\n\nr1 = int(r1)\nr2 = floor((r1 + int(s)) / 2)\n\nprint(r2)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 15\") == 19\n\"\"\"\nimport sys\n\nprint(sum(list(map(int, sys.stdin.readline().split()))))\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North East South') == 'No'\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South') == 'No'\nassert solution('South East West') == 'Yes'\nassert solution('North East West') == 'No'\nassert solution('West North West') == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North South East\") == \"No\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"South West East\") == \"Yes\", \"case: 'South West East'\"\nassert solution(\n\"South East West\") == \"No\", \"case: 'South East West'\"\nassert solution(\n\"West South East\") == \"No\", \"case: 'West South East'\"\nassert solution(\n\"West East West\") == \"No\", \"case: 'West East West'\"\nassert solution(\n\"South West South\") == \"No\", \"case: 'South West South'\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"South West East\") == \"Yes\"\n\"\"\"\n\nstdin = input().split()\na = stdin[0]\nb = stdin[1]\nc = stdin[2]"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('South West East') == 'Yes'\n\nassert solution('North South East') == 'No'\n\nassert solution('South South West') == 'Yes'\n\nassert solution('East West East') == 'No'\n\nassert solution('North North West') == 'No'"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\nassert solution('North East South') == 'No'\n\nsolution(stdin)\n\n\n-----\nSample Input 1:\nSouth West East\nSample Output 1:\nYes\n\nSample Input 2:\nSouth East West\nSample Output 2:\nYes\n\nSample Input 3:\nNorth West South\nSample Output 3:\nNo"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\nprint('All tests passed.')\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"North South East\") == \"No\"\nassert solution(\"South West East\") == \"Yes\"\nassert solution(\"East West East\") == \"Yes\"\nassert solution(\"West South West\") == \"No\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 16\\naagain\\npirpumsemoystoal') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\nprint(solution(stdin))\n-----\nprint(cipher(stdin, key))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 16\\n again\\n pirpumsemoystoal\\n') =='marywasnosyagain'\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 16\\na\\nqwert\\ny\\nasdf\\nz') =='marywasnosyagain'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 16\\nparul\\nkalraonapum\") == \"evilevildadc\"\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 16\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 16\\nabc\") == \"cab\"\nassert solution(\"5 16\\nabcde\") == \"edcba\"\nassert solution(\"5 16\\nabcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"5 16\\nabcdefghijklmnopqrstuvwxyzz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"3 16\\nabcde\") == \"edcba\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") =='marywasnosyagain'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Odd'\nassert solution('1') == 'Odd'\nassert solution('100') == 'Even'\nassert solution('101') == 'Odd'\nassert solution('3') == 'Either'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Either'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('4') == 'Even'\n\n-------------\nSample Input:\n2\nSample Output:\nOdd\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'Odd'\nassert solution('3') == 'Either'\nassert solution('4') == 'Even'"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Even\"\nassert solution(\"4\") == \"Odd\"\nassert solution(\"5\") == \"Even\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 'Odd'\nassert solution('5') == 'Even'\nassert solution('6') == 'Odd'\nassert solution('8') == 'Even'\nassert solution('0') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\n\"\"\"\n\n\"\"\"\nN = input()\nN = int(N)\n\neven_or_odd = [i%2==0 for i in range(1, N+1)]\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nprint('Test pass.')"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\nprint(solution(\"5\\n314\\n1\\n5926\\n5\\n35897\"))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint('Test pass.')\n\n-----Solution-----\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('8\\n0\\n1\\n3\\n5\\n6\\n7\\n9') == '3\\n1\\n5\\n5\\n5\\n5\\n5'"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n123\\n7\\n79\\n89\\n9') == '1\\n1\\n1\\n1\\n1'\nassert solution('6\\n11111\\n22222\\n333333\\n44444\\n55555') == '1\\n1\\n1\\n1\\n1\\n1'\nassert solution('7\\n11\\n22\\n33\\n44\\n55\\n66') == '2\\n2\\n2\\n2\\n2\\n2\\n2'\nassert solution('2\\n11\\n22\\n33\\n44\\n55\\n66\\n77\\n88\\n99\\n100') == '1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1'\nassert solution('7\\n111\\n2222\\n3333\\n4444\\n5555\\n6666\\n7777\\n8888\\n9999\\n10000') == '2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '1\\n2\\n3\\n4\\n5\\n'\nassert solution('2\\n314\\n1\\n5926\\n5\\n35897\\n') == '3\\n1\\n4\\n1\\n5\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"5\\n1\\n4\\n1\\n5\"\nassert solution(\"2\\n1\\n2\") == \"2\\n1\\n2\"\nassert solution(\"2\\n1\\n0\") == \"2\\n1\\n1\"\nassert solution(\"5\\n3\\n1234\\n5\\n5\") == \"5\\n1\\n3\\n1\\n1\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n314\n1\n5926\n5\n35897''') == '''3\n1\n4\n1\n5'''\nassert solution('''3\n11\n3\n5926\n5\n35897''') == '''3\n2\n4\n2\n5'''\nassert solution('''15\n9\n1\n14\n8\n3''') == '''5\n1\n2\n2\n1\n1'''\n\nimport io, pytest\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\n r o\\nt e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes\\nyes'\n\nassert solution('6 10\\nh a\\nh i\\nh o\\ni a\\nh e\\nh e\\ni o\\nh n\\ni o\\nh o\\ni e\\nh i\\nh a') == 'yes\\nyes\\nyes\\nyes\\nyes\\nyes'\n\nassert solution('6 10\\nh a\\nh i\\nh o\\ni a\\nh e\\nh e\\ni o\\nh n\\ni o\\nh o\\ni e\\nh i\\nh a') == 'yes\\nyes\\nyes\\nyes\\nyes\\nyes'\n\nassert solution('6 10\\nh i\\nh i\\nh o\\nh o\\nh i\\nh a') == 'yes\\nyes\\nno\\nyes\\nno\\nyes'\n\nassert solution('6 10\\nh i\\nh i\\nh o\\nh o\\nh i\\nh a') == 'yes\\nyes\\nno\\nyes\\nno\\nyes'"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\n\"\n            \"r o\\nt e\\nt f\\n\"\n            \"u h\\nw p\\nwe we\\n\"\n            \"can the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\n\"\"\"\nimport sys\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes\\nyes'\n\n\"\"\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the''') == '''yes\nno\nno\nyes\nyes\n'''\nassert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == '''no\nyes\nno\nyes\nyes\n'''\nassert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == '''no\nno\nno\nyes\nyes\n'''\n\n------Hint------\nEach pair of words is constructed by applying one or more translations to the first word in the pair. Think about how this might be done.\n\nThe idea is to use backtracking to test all possible translations of a word until one works. This is a brute force approach. \n\n------Solution------\n\nx, y = map(int, stdin.readline().strip().split())\ntranslations = [stdin.readline().strip().split() for i in range(x)]\npairs = [stdin.readline().strip().split() for i in range(y)]\n\nfor a, b in pairs:\n    if len(a)!= len(b):\n        print('no')\n    else:\n        if len(a) == 0:\n            print('yes')\n        else:\n            for translation in translations:\n                for i in range(len(a)):\n                    if a[i]!= translation[0]:\n                        break\n                    a = a[:i] + translation[1] + a[i+1:]\n                else:\n                    print('yes')\n                    break\n            else:\n                print('no')\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nor o\\nt e\\nt f\\n\"\n'u h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == \"yes\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open('input.txt', 'r').read()) == open('solution.txt', 'r').read()\nprint('Well done!')\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n') == 'yes\\nno\\nno\\nyes\\nyes\\n'\nassert solution('9 5\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 5\\nt\\nr\\np\\no\\nr\\nt\\ne\\nt\\nf\\nu\\np\\nw\\nw\\ncan\\nthe\\nworl\\np\\npeople\\nit\\nof\\nout') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc\\ti\\nr\\np\\no\\nr\\nt\\ne\\nt\\nf\\nu\\np\\nw\\nw\\ncan\\nthe\\nworl\\np\\npeople\\nit\\nof\\nout') == 'yes\\nno\\nno\\nyes\\nyes'\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass\nclass Word:\n    original: str\n    deciphered: str\n    \n    \n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\n\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 5\\n'\n'c t\\n'\n'i r\\n'\n'k p\\n'\n'o c\\n'\n'r o\\n'\n't e\\n'\n't f\\n'\n'u h\\n'\n'w p\\n'\n'we we\\n'\n'can the\\n'\n'work people\\n'\n'it of\\n'\n'out the') == 'yes\\n'\nassert solution('9 5\\n'\n'c t\\n'\n'i r\\n'\n'k p\\n'\n'o c\\n'\n'r o\\n'\n't e\\n'\n't f\\n'\n'u h\\n'\n'w p\\n'\n'we we\\n'\n'can the\\n'\n'work people\\n'\n'it of\\n'\n'out the') == 'no\\n'\nassert solution('9 5\\n'\n'c t\\n'\n'i r\\n'\n'k p\\n'\n'o c\\n'\n'r o\\n'\n't e\\n'\n't f\\n'\n'u h\\n'\n'w p\\n'\n'we we\\n'\n'can the\\n'\n'work people\\n'\n'it of\\n'\n'out the') == 'no\\n'\nassert solution('9 5\\n'\n'c t\\n'\n'i r\\n'\n'k p\\n'\n'o c\\n'\n'r o\\n'\n't e\\n'\n't f\\n'\n'u h\\n'\n'w p\\n'\n'we we\\n'\n'can the\\n'\n'work people\\n'\n'it of\\n'\n'out the') == 'yes\\n'\nassert solution('9 5\\n'\n'c t\\n'\n'i r\\n'\n'k p\\n'\n'o c\\n'\n'r o\\n'\n't e\\n'\n't f\\n'\n'u h\\n'\n'w p\\n'\n'we we\\n'\n'can the\\n'\n'work people\\n'\n'it of\\n'\n'out the') == 'yes\\n'\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"1 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"2 1\\ncarrots?\\n\\nbunnies\") == \"2\"\nassert solution(\"2 1\\ncarrots?\\n\\nbunnies\\nbunnies\") == \"2\"\nassert solution(\"2 1\\ncarrots?\\n\\nbunnies\\n\\nbunnies\") == \"4\"\n\nSample Case: https://contest.yandex.ru/contest/28046/run-report/3575440/\n\nSolution:\n\nn, p = map(int, input().split())\nfor i in range(n):\n    print('carrots' * int(input()))\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == 1\n\nassert solution('''3 3\ncarrots?\nbunnies\ngood morning\ngood morning''') == 6\n'''\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"2 2\\ncarrots?\\nbunnies\") == \"0\"\nassert solution(\"2 2\\ncarrots?\\nblue\") == \"1\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\ncarrots?\nbunnies''') == '1'\nassert solution('''4\nMicky Mouse\nHorse Thief\nCoraline\nRainbow Dash''') == '3'\n\nimport sys\nfrom collections import deque\n\nassert len(sys.argv) == 2\nwith open(sys.argv[1]) as f:\n    contestants, problems = map(int, f.readline().split())\n    contestants = deque([f.readline().strip() for _ in range(contestants)])\n    problem_count = 0\n    while len(contestants) > 0:\n        contestant = contestants.popleft()\n        for problem in contestant.split(' '):\n            if problem[0].isdigit():\n                problem_count += 1\nprint(problem_count)"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\nassert solution('1 1\\nbunnies') == '0'\nassert solution('2 1\\ncarrots?\\nbunnies') == '1'\nassert solution('3 1\\ncarrots?\\nbunnies\\nflanders') == '2'\nassert solution('2 1\\ncarrots?\\nbunnies\\nflanders') == '1'\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == '1'"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('carrots?\\nbunnies') == '1'\nassert solution('carrots?\\nbunnies\\nbeavers') == '3'\nassert solution('carrots?\\nbunnies\\nbeavers\\nchickens') == '6'\nassert solution('carrots?\\nbunnies\\nbeavers\\nchickens\\nchickens') == '15'\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Kf1,Qf1,Ra1,Rh1,Bf1,Bg1,Nc1,a8,c8,d8,h8,Kf8,Qe2,Re1,Rh1,Bf1,Bg1,Bh2,Nf3,Ne1,Nf1,Bg1,Bh1,Nd8,a7,b7,c7,d7,e7,f7,h7\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"Black"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+') == \\\n    'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+') == \\\n    'White:"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r|:::|b|:q|:::|k|:::|n|:r|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|r.|::|.b|:q|.k|::|.n|:r|\\n+---+---+---+---+---+---+---+---+\\n|p:|:p|:p|:p|:p|:p|::|.p|\\n+---+---+---+---+---+---+---+---+\\n|...|::|.n|::|...|::|...|:p|\\n+---+---+---+---+---+---+---+---+\\n|::|...|::|...|::|...|::|...|::|\\n+---+---+---+---+---+---+---+---+\\n|...|::|...|::|.P|::|...|::|...|::|\\n+---+---+---+---+---+---+---+---+\\n|:P|...|::|...|::|...|::|...|::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P|::|.P|:P|...|:P|.P|:P|:P|\\n+---+---+---+---+---+---+---+---+\\n|:R|.N|:B|.Q|:K|.B|::|.R|\\n+---+---+---+---+---+---+---+---+\") == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n-----Additional Comments-----\nThe input is always correctly formatted, so there is no need to check for this.\n\nThe only requirement for the input is that it can be parsed and converted into a list of lists of strings that represent the chessboard.\n\nFrom there it is very simple to sort the list of lists of strings into two separate lists of strings, each listing the pieces of each player. These lists are then sorted to ensure that the order in which the pieces are listed is always the same.\n\nFinally a string is created that lists the pieces in the order they are listed in the list of lists of strings.\n\"\"\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\nassert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\"\"\"\n.r..b:qk:nr:\n:bp:.p.p:bp:\np..p:..p:p\n..P.p:P..p:\n.P..P:P.P..P\n:R.n.B:Q.q:K:\n.B..b:..b:.B\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|') == \"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution('|:::|.n.|:::|.p.|:::|.p.|:::|.p.|') == \"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution('|...|:::|.n.|:::|...|:::|...|:p:|') == \"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution('|:::|...|:::|...|:::|...|:::|...|') == \"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution('|...|:::|...|:::|.P.|:::|...|:::|') == \"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"10 10\") == \"You will become a flying monkey!\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\n\nassert solution(\"9 8\") == \"Your wish is granted!\"\n\nassert solution(\"9 0\") == \"You will become a flying monkey!\"\n\nassert solution(\"11 2\") == \"You will become a flying monkey!\"\n\nassert solution(\"11 2\") == \"You will become a flying monkey!\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 2') == 'You will become a flying monkey!'\n\n(To know more about the above examples, look at the HackerRank_ Solution_ - Strings_ Introduction_ in the **Resources** tab.)\n\n-----Notes-----\n- The Wizard\u2019s question does not change for each test case; it always asks the same $K$ questions (at most).\n- The number of correct answers does not affect the result of the test case; it is always $K$.\n- A $K$-question test case is possible if the Wizard is able to correctly answer $K$ questions.\n- There are no bounds on the number of questions that the Wizard asks, nor on the number of guesses that you make.\n\n----\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_result)\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"2 1\") == \"You will become a flying monkey!\"\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"8 0\") == \"You will become a flying monkey!\"\nassert solution(\"10 3\") == \"You will become a flying monkey!\"\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('9 8') == 'You will become a flying monkey!'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 1') == 'You will become a flying monkey!'"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"6 6\") == \"Your wish is granted!\"\nassert solution(\"6 7\") == \"You will become a flying monkey!\"\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 1') == 'You will become a flying monkey!'\n\"\"\"\n\nfrom collections import Counter\n\nimport sys\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == '16'\n\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\na = int(input())\nprint(a)\n\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\na = int(input())\nprint(a)\n\n\n\n\"\"\"\nSolution 3\n\"\"\"\n\na = int(input())\nprint(a)\n\n\n\n\"\"\"\nSolution 4\n\"\"\"\n\na = int(input())\nprint(a)\n\n\n\n\n\"\"\"\nSolution 5\n\"\"\"\n\na = int(input())\nprint(a)\n\n\n\"\"\"\nSolution 6\n\"\"\"\n\na = int(input())\nprint(a)\n\n\n\n\"\"\"\nSolution 7\n\"\"\"\n\na = int(input())\nprint(a)\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(16) == 16\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '16'\nassert solution('11') == '11'\nassert solution('1') == '1'\nassert solution('18') == '18'\nassert solution('20') == '18'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(16) == 16\nprint(solution(16))\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == 16\n'''"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == '16'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('10') == '10'\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == '4'\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('5 6') == ''\nassert solution('5\\n1 2\\n1 2') == '2'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\nprint(solution(a))\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 180\\n7 5 10 20 30') == '2'\nassert solution('5 200\\n1 10') == '5'\nassert solution('6 180\\n1 10') == '1'\n\"\"\"\n\nimport sys\n\nn, T = map(int, sys.stdin.readline().split())\ntasks = [int(x) for x in sys.stdin.readline().split()]\nprint(sum([t // (T // n) for t in tasks]))\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == '4'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(    '6 180\\n'\n                    '45 30 55 20 80 20') == '4'\nassert solution(    '2 10\\n'\n                    '1\\n'\n                    '1') == '0'\n\n------Problem Description-----\n\nYou are in charge of a server that needs to run some submitted tasks on a first-come, first-served basis. Each day, you can dedicate the server to run these tasks for at most $T$ minutes. Given the time each task takes, you want to know how many of them will be finished today.\n\nConsider the following example. Assume $T = 180$ and the tasks take $45, 30, 55, 20, 80,$ and $20$ minutes (in order they are submitted). Then, only four tasks can be completed. The first four tasks can be completed because they take $150$ minutes, but not the first five, because they take $230$ minutes which is greater than $180$. Notice that although there is enough time to perform the sixth task (which takes $20$ minutes) after completing the fourth task, you cannot do that because the fifth task is not done yet.\n\n-----Input-----\nThe input consists of a single test case. The first line contains two integers $n$ and $T$ where $1 \\le n \\le 50$ is the number of tasks and $1 \\le T \\le 500$. The next line contains $n$ positive integers no more than $100$ indicating how long each task takes in order they are submitted.\n\n-----Output-----\nDisplay the number of tasks that can be completed in $T$ minutes on a first-come, first-served basis.\n\n-----Examples-----\nSample Input:\n6 180\n45 30 55 20 80 20\nSample Output:\n4\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 50\n20 30 40 50 40\"\"\") == \"2\"\n\nassert solution(\"\"\"5 120\n40 50 50 20 80 80\"\"\") == \"0\"\n\nassert solution(\"\"\"4 10\n1 3 2 4\"\"\") == \"0\"\n\nassert solution(\"\"\"6 180\n5 5 10 15 20 25\"\"\") == \"4\"\n\nassert solution(\"\"\"6 120\n10 20 30 40 50 60\"\"\") == \"3\"\n\"\"\") == '0'"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == expected_result\n\n\"\"\"\n\nimport sys\n\nn, T = map(int, input().split())\narr = map(int, input().split())\n\nans = 0\nfor i in range(n):\n    ans += (T // arr[i])\n    T = T % arr[i]\n    if T == 0:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nprint(solution('4\\n21\\n34\\n18\\n9'))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n21\n34\n18\n9''') == '79'\n\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\nSample Input:\n3\n1\n2\n3\nSample Output:\n2\n\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('4\\n12\\n34\\n18\\n9') == '118'\nassert solution('4\\n2\\n34\\n18\\n9') == '118'\nassert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('4\\n21\\n34\\n18\\n9') == '79'\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('1\\n1\\n1') == '1'\nassert solution('2\\n10\\n20') == '30'\n\nimport sys\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n21\n34\n18\n9''') == '79'\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('1, 2, 1') == '2 3 0'\nassert solution('1, 1, 1, 2, 1') == 'impossible'\nassert solution('1, 1, 1, 2, 1, 2') == 'impossible'\nassert solution('1, 1, 1, 2, 1, 2, 3') == '2 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3 1\") == \"impossible\"\nassert solution(\"5 1 2 2 1\") == \"2 2 0\"\n\"\"\"\n\n\nimport unittest\nimport random\nimport statistics\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\n------\n\n'''\n\nn,m,s,d = map(int, input().split())\nnums = [int(num) for num in input().split()]"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n\nfrom random import randint"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4 4\") == \"impossible\"\nassert solution(\"6 6 3 9\") == \"5 2 2 4\"\n\"\"\"\n\nfrom typing import List\nimport math\nimport random\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 1 3 4\\n0 1 4\") == \"impossible\"\nassert solution(\"2 1 3 4\\n0 0 4\") == \"2 1 0\"\nassert solution(\"2 1 3 4\\n0 1 4\") == \"2 1 0\"\nassert solution(\"2 1 3 4\\n1 0 4\") == \"impossible\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\n\"\"\"\n\nimport math\nimport random\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\\n\") == \"2 3 0\"\n\"\"\"\n\nimport math\nimport random"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n\nimport sys\nimport math\nimport random\nimport collections\nimport itertools\n\n\nclass Fridge(object):\n    def __init__(self, num_new: int, num_students: int, num_slots: int, num_sodas: int, sodas_in_slots: list):\n        self.sodas_in_slots = sodas_in_slots\n        self.num_slots = num_slots\n        self.num_sodas = num_sodas\n        self.num_students = num_students\n        self.sodas_in_slots = collections.defaultdict(int)\n        for slot in self.sodas_in_slots:\n            self.sodas_in_slots[slot] = 0\n        self.first_slot = num_slots - num_new\n        self.num_slots_with_new_soda = num_slots - num_new + num_new\n        self.slots_with_new_soda = set(range(self.first_slot, self.num_slots_with_new_soda))\n\n    def get_num_slots_with_sodas(self):\n        num_slots_with_sodas = 0\n        for slot in self.sodas_in_slots:\n            if self.sodas_in_slots[slot] > 0:\n                num_slots_with_sodas += 1\n        return num_slots_with_sodas\n\n    def get_num_slots_with_new_soda(self):\n        num_slots_with_new_soda = 0\n        for slot in self.slots_with_new_soda:\n            if self.sodas_in_slots[slot] == 0:\n                num_slots_with_new_soda += 1\n        return num_slots_with_new_soda\n\n    def get_num_students_with_soda(self):\n        num_students_with_soda = 0\n        for slot in self.sodas_in_slots:\n            if self.sodas_in_slots[slot] > 0:\n                num_students_with_soda += 1\n        return num_students_with_soda\n\n    def get_num_slots_with_sodas_for_student(self):\n        num_slots_with_sodas_for_student = 0\n        for slot in self.sodas_in_slots:\n            if self.sodas_in_slots[slot] > 0:\n                num_slots_with_sodas_for_student += 1\n        return num_slots_with_sodas_for_student\n\n    def get_num_students_with_soda_for_student(self):\n        num_students_with_soda_for_student = 0\n        for slot in self.sodas_in_slots:\n            if self.sodas_in_slots[slot] > 0:\n                num_students_with_soda_for_student += 1\n        return num_students_with_soda_for_student\n\n    def get_num_slots_with_new_soda_for_student(self):\n        num_slots_with_new_soda_for_student = 0\n        for slot in self.slots_with_new_soda:\n            if self.sodas_in_slots[slot] == 0:\n                num_slots_with_new_soda_for_student += 1\n        return num_slots_with_new_soda_for_student\n\n    def get_num_students_with_new_soda_for_student(self):\n        num_students_with_new_soda_for_student = 0\n        for slot in self.slots_with_new_soda:\n            if self.sodas_in_slots[slot] == 0:\n                num_students_with_new_soda_for_student += 1\n        return num_students_with_new_soda_for_student\n\n    def get_num_slots_with_sodas_and_new_soda_for_student(self):\n        num_slots_with_sodas_and_new_soda_for_student = 0\n        for slot in self.slots_with_new_soda:\n            if self.sodas_in_slots[slot] == 0:\n                num_slots_with_sodas_and_new_soda_for_student += 1\n        return num_slots_with_sodas_and_new_soda_for_student\n\n    def get_num_students_with_soda_and_new_soda_for_student(self):\n        num_students_with_soda_and_new_soda_for_student = 0\n        for slot in self.slots_with_new_soda:\n            if self.sodas_in_slots[slot] == 0:\n                num_students_with_soda_and_new_soda_for_student += 1\n        return num_students_with_soda_and_new_soda_for_student\n\n    def get_num_students_with_sodas_for_all_slots(self):\n        num_students_with_sodas_for_all_slots = 0\n        for slot in self.sodas_in_slots:\n            if self.sodas_in_slots[slot] > 0:\n                num_students_with_sodas_for_all_slots += 1\n        return num_students_with_sodas_for_all"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == '2 3 0'\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\n---Task---\nGiven a string s.\n\nYour task is to count the number of ways this string can be split into three non-empty parts, each containing the same number of letters, such that the first and the last parts are not the same.\n\nThe number of ways of splitting the string is guaranteed to be at least 1.\n\nInput Format\nA single line containing a non-empty string s.\n\nConstraints\n1 \u2264 |s| \u2264 300, where |s| denotes the length of string s.\n\nOutput Format\nPrint a single line containing the number of ways s can be split.\n\nSample Input\nabababa\nSample Output\n5\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\nSample Input:\n0 2 2 -2 -1 5\nSample Output:\n1 0 1 1 2 3\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 2 -2 2 -7') == '0 0 0 1 0 -1'\nassert solution('0 0 0 0 0 -10') == '0 0 0 0 0 -10'\nassert solution('0 0 0 0 0 1') == '0 0 0 0 0 1'\nassert solution('0 1 -1 -1 -1 1 1') == '1 0 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 1 0 2 7\") == \"0 0 1 0 0 1\"\nassert solution(\"0 0 0 1 0 7\") == \"0 0 0 1 0 1\"\nassert solution(\"0 0 0 0 1 7\") == \"0 0 0 0 1 1\"\nassert solution(\"0 0 0 0 0 7\") == \"0 0 0 0 0 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 8\") == \"0 0 0 0 0 1\"\nassert solution(\"1 2 2 2 2 8\") == \"0 0 0 0 0 1\"\n\"\"\"\n\nimport sys\n\nnums = [int(n) for n in sys.stdin.read().split()]\n\nprint(*[abs(n) for n in nums[1:]], sep=\" \")\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''0 1 2 2 2 7''') == '1 0 0 0 0 1'\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\n---\n\nSample Input:\n8 6 4 0 -8 0 1 -6\nSample Output:\n4 4 0 0 1 4\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 1') == '1'\nassert solution('1 0 1') == '0'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n'''\n\nimport math"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n\nSample Input:\n2\nabcdef 0.1\nabcdef 0.2\nSample Output:\n3.3\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n123456 0.6666\nqwerty 0.3334''') == '1.3334'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n123456 0.6666\nqwerty 0.3334\n''') == '1.3334'\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('123456 0.6666\\nqwerty 0.3334\\nabcdef 0.3333\\n111111 0.1111') == '1.1111'\nassert solution('123456 0.6666\\nqwerty 0.3334\\nabcdef 0.3333\\n111111 0.1111\\n111111 0.1111') == '1.1111'\n'''\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n123456 0.6666\nqwerty 0.3334\n''') == '1.3334'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 4\") == \"1\"\n\nassert solution(\"1 2 3\") == \"2\"\n\nassert solution(\"1 2 4\") == \"1\"\n\nassert solution(\"2 2 2\") == \"2\"\n\nassert solution(\"2 2 3\") == \"2\""
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n2 3') == '1'\nassert solution('3 1\\n3 2') == '1'\nassert solution('3 1\\n3 2\\n3 1') == '0'\nassert solution('3 1\\n3 2\\n3 1\\n3 2') == '0'\nassert solution('3 1\\n3 2\\n3 1\\n4') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 4\\n') == '1'\nassert solution('4 5 6\\n') == '1'\n\"\"\"\n\nn, p = [int(x) for x in stdin.split()]\nd = [int(x) for x in stdin.split('\\n')[:-1]]"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1') == '3'\nassert solution('5 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 1\n1 2 4\n''') == '1'\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 1\n1 2 4''') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 4\") == \"1\"\nprint(solution(\"1 2 4\"))\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\"\n\nimport sys\n\nfrom typing import List"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==\n'''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n\nassert solution(\"22\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==\n'''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n\nassert solution(\"5\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==\n'''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n\nassert solution(\"5\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==\n'''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\nC:                                                           \nD: ----------------------------------------------------------\nE:       *   *          *             *   *                  \nF: -------------------------------------*--------------------\nG:                                                           \nA:                                                           \nB:                                                           \nC:                                                           \nD: ----------------------------------------------------------\nE:       *   *          *             *   *                  \nF: -------------------------------------*--------------------\nG:                                                           \nA:                                                           \nB:                                                           \nC:                                                           \nD: ----------------------------------------------------------\nE:       *   *          *             *   *                  \nF: -------------------------------------*--------------------\nG:                                                           \nA:                                                           \nB:                                                           \nC:                                                           \nD: ----------------------------------------------------------\nE:       *   *          *             *   *                  \nF: -------------------------------------*--------------------\nG:                                                           \nA:                                                           \nB:                                                           \nC:                                                           \nD: ----------------------------------------------------------\nE:       *   *          *             *   *                  \nF: -------------------------------------*--------------------\nG:                                                           \nA:                                                           \nB:                                                           \nC:                                                           \nD: ----------------------------------------------------------'''\n\nassert solution(\"5\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==\n'''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD:"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\n\"\"\"\nProblem Description\n\nA Scottish Provinces television show is in the process of migrating to a new channel, and the network has asked you to write a program to help them out by transcribing the audio to text. The audio comes in the form of musical notes played by a piano. Your task is to write a program to translate the notes into text based on the following table:\n\nNote    Translation\nA        dog\nB        cat\nC        cow\nD        horse\nE        pig\nF        wolf\nG        frog\nH        sheep\nI        spider\nJ        bird\nK        lion\nL        tiger\nM        monkey\nN        rooster\nO        bear\nP        panda\nQ        parrot\nR        eagle\nS        snail\nT        monkey\nU        lizard\nV        deer\nW        bee\nX        butterfly\nY        wolf\nZ        crab\n0        owl\n1        turtle\n2        snake\n3        parrot\n4        fox\n5        lion\n6        crocodile\n7        duck\n8        caterpillar\n9        giraffe\nThe program should ask the user for a note in the range A to Z and the program should print the translation of that note. If the user enters an invalid note then the program should prompt the user to enter the note again. The program should continue asking for notes until the user enters a note that is not in the range A to Z.\n\n-----Input-----\nA single line containing a note. The note is in the range A to Z.\n\n-----Output-----\nPrint out the translation of the entered note.\n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \\\n'''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n'''\n\nassert solution('12\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \\\n'''G:\nF: -----------------------------------*-----------------\nE:       *   *          *             *   *                  \nD: -----------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: ------------------**-----------------*-----*------\nA:                                                  *        \ng: -------------**-----------------*----------*----------\nf:                                                  *        \ne: ----------------------------------------------------------\nd:                                                  *        \nc:                                                  *        \nb:                                                  *        \na: ----------------------------------------------------------\n'''\n\nassert solution('22\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \\\n'''G:\nF: ---------------------------------------*----------------------\nE:       *   *          *             *   *                  \nD: -----------------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: --------------------------**-----------------*----------\nf:                                                  *        \ne: ----------------------------------------------------------\nd:                                                  *        \nc:                                                  *        \nb:                                                  *        \na: ----------------------------------------------------------\n'''\n\nassert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \\\n'''G:\nF: ----------------------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: -----------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: ----------------------------------------------------*----------\nf:                                                  *        \ne: ----------------------------------------------------------\nd:                                                  *        \nc:                                                  *        \nb:                                                  *        \na: ----------------------------------------------------------\n'''\n\nassert solution('28\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \\\n'''G:\nF: ------------------------------------------------*---------------------\nE:       *   *          *             *   *                  \nD: ---------------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------**-----------------*-----*------\nA:                                                  *        \ng: ---------------**-----------------*----------*----------\nf:                                                  *        \ne: ----------------------------------------------------------\nd:                                                  *        \nc:                                                  *        \nb:                                                  *        \na: ----------------------------------------------------------\n'''"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\nC E G B E C G B G A C D E G B G') == 'G:           \\nF: ---------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*-----*------\\nA:                                                  \\ng: ---------------------------*----------\\nf:                                                  \\ne: --------------------------\\nd:                                                   \\nc:                                                   \\nb:                                                   \\na: -----------------------------------------\\n'\n\nsolution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:               \nF: -------------------------**---------------------*---------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*-----*------\\nA:       *   *       *     *     *     *           *        \\ng: ---------------------------*----------\\nf:                                                  \\ne: --------------------------\\nd:                                                   \\nc:                                                   \\nb:                                                   \\na: -----------------------------------------\\n'\n\nassert solution('2\\nB A') == 'G:           \\nF: -----------------------------------\\nE:        *        \\nD: -----------------------------------\\nC:        *        \\nB: -----------------------------------\\nA:                                          \\ng: ---------------------------\\nf:                                                      \\ne: ---------------------------\\nd:                                                      \\nc:                                                      \\nb:                                                      \\na: -----------------------------------------\\n'\n\nsolution('6\\nA C C E D E D') == 'G:           \\nF: -----------------------------------\\nE:       *        \\nD: -----------------------------------\\nC:        *        \\nB: -----------------------------------\\nA:                                          \\ng: ---------------------------\\nf:                                                      \\ne: ---------------------------\\nd:                                                      \\nc:                                                      \\nb:                                                      \\na: -----------------------------------------\\n'\n\nsolution('3\\nA C D E') == 'G:           \\nF: -----------------------------------\\nE:       *        \\nD: -----------------------------------\\nC:        *        \\nB: -----------------------------------\\nA:                                          \\ng: ---------------------------\\nf:                                                      \\ne: ---------------------------\\nd:                                                      \\nc:                                                      \\nb:                                                      \\na: -----------------------------------------\\n'\n\nsolution('2\\nB A') == 'G:           \\nF: -----------------------------------\\nE:        *        \\nD: -----------------------------------\\nC:        *        \\nB: -----------------------------------\\nA:                                          \\ng: ---------------------------\\nf:                                                      \\ne: ---------------------------\\nd:                                                      \\nc:                                                      \\nb:                                                      \\na: -----------------------------------------\\n'\n\nsolution('2\\nA A') == 'G:           \\nF: -----------------------------------\\nE:        *        \\nD: -----------------------------------\\nC:        *        \\nB: -----------------------------------\\nA:                                          \\ng: ---------------------------\\nf:                                                      \\ne: ---------------------------\\nd:                                                      \\nc:                                                      \\nb:                                                      \\na: -----------------------------------------\\n'\n\n'''"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==     \"G:\\\\nF: -------------------------------------*--------------------\\\\nE:       *   *          *             *   *                  \\\\nD: ----*-------**-----*-------------*-------*----------------\\\\nC: * *     *      * *     **    * *           *         ** **\\\\nB: --------------------------**-----------------*-----*------\\\\nA:\\\\ng: -----------------------------------------------*----------\\\\nf:\\\\ne: ----------------------------------------------------------\\\\nd:\\\\nc:\\\\nb:\\\\na: ----------------------------------------------------------\"\n\n-----Notes-----\nYou may assume all inputs are valid and consistent.\nThe pitch of the note will be in the form of a letter (a to g) or an uppercase letter (A to G).\nThe duration of the note will be a non-negative integer, less than or equal to 50.\nIf there is no duration given, then the note is held for one beat.\nThe duration of a note must be given in the order of beats, as the duration of a beat is always one.\nNote that if a note is given a duration of one beat, then the next note must also be given a duration of one beat.\nFor the purpose of this problem, each line of the input represents a bar.\nSo the note with duration of one beat is one bar long, and the note with duration of two beats is two bars long, and so on.\n-----Hints-----\nFor each bar, you must print the treble clef staff line, the bottom of the treble clef staff line, and the top of the bass clef staff line.\nThe staff lines should be as long as necessary to complete the bar.\nThe notes and durations given are all valid, so you don\u2019t need to check for this.\nThe final note should be one bar long, so you don\u2019t need to print it.\nMake sure the staff lines are as long as necessary to complete the bar.\n\n-----Bibliography-----\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\".strip()\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\nn = int(stdin.readline())\n\nfor i in range(n):\n    note = stdin.readline().split()\n    octave = note[0]\n    note = note[1]\n    dur = \"1\" if len(note) == 1 else note[1]\n    note = note[0]\n    print(f\"{octave.upper() if note.isupper() else octave.lower()}:{''* (4 - len(dur))}{dur}\", end='')\n    if i < n - 1:\n        print(\"*\" * int(dur), end='')\n        print('\\n', end='')\n    else:\n        print()\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nprint('Successfully passed all tests')\n\n\"\"\"\nGiven a string, print it in a zigzag pattern. In the pattern, print\nthe first character in the string on the first line,\nand then the last character on the last line. Then\nprint the second character in the string on the second line\nand so on until you reach the middle. Once the entire\nstring has been printed in this manner, the pattern\nshould be symmetrical.\n\nNote: There is an easier way to do this problem, but we\u2019re\ngoing to manually solve it.\n\nExample:\n\nprint_zigzag('Hello, world!')\nprints:\nH\ne\nl\nl\no\n,\nw\no\nr\nl\nd\n!\n\"\"\"\n\n\"\"\"\n\nprint('Please, print a string that you want to zigzag-print:\\n')\nprint('-------------------------------------------------------')\nprint('-------------------------------------------------------')\ninput_string = input()\nstring_length = len(input_string)\n\nfor i in range(string_length):\n    if i % 2 == 0:\n        print(input_string[i])\n    else:\n        print(input_string[string_length - 1 - i])\n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                           \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------'\n\n-----Note-----\nThe files contain only ASCII characters.\n\n'''\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n4 5 6\") == \"possible\"\nassert solution(\"3\\n4 5 7\") == \"possible\"\nassert solution(\"3\\n8 1 1\") == \"possible\"\nassert solution(\"3\\n10 10 10\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n1 2 3\") == \"impossible\"\nassert solution(\"3\\n1 1 2\") == \"impossible\"\nassert solution(\"3\\n3 2 1\") == \"impossible\"\nassert solution(\"3\\n1 2 3\") == \"possible\""
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"5\\n3 2 6 7 8 9\") == \"possible\"\nassert solution(\"4\\n3 5 5 7\") == \"possible\"\nassert solution(\"6\\n3 5 5 7 3 5\") == \"possible\"\nassert solution(\"7\\n3 5 5 7 3 5 6\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 1 2') == 'impossible'\nassert solution('4\\n1 1 1 1') == 'impossible'\n\n------Ending------\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 1\\n\") == \"possible\"\nassert solution(\"2\\n0 0\\n\") == \"possible\"\nassert solution(\"4\\n0 1 1 1\\n\") == \"possible\"\nassert solution(\"3\\n1 1 1\\n\") == \"possible\"\nassert solution(\"3\\n0 1 1\\n\") == \"impossible\"\n\n-----Constraints-----\n$1 \\leq N \\leq 20000$\n$0 \\leq sticks[i] \\leq 2^{60}$\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(stdin)) == str(stdout)\n\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"4\\n1 1 1 1\") == \"possible\"\nassert solution(\"2\\n1 1\") == \"impossible\"\n\nimport os, sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1 1 1\"\"\"\n        output = \"\"\"possible\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\n1 1 1 1\"\"\"\n        output = \"\"\"possible\"\"\"\n        self."
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"possible\"\nassert solution(\"1 1 1\") == \"possible\"\nassert solution(\"3 2 2\") == \"possible\"\nassert solution(\"1 2 1\") == \"impossible\"\nassert solution(\"3 3 1\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1\") == 'possible'\nassert solution(\"4 4 4\") == 'impossible'\nassert solution(\"4 4 5\") == 'impossible'\nassert solution(\"3 3 3\") == 'impossible'\nassert solution(\"1 1 1\") == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('4\\n1 2 2 3') == 'possible'\nassert solution('4\\n1 2 2 4') == 'impossible'\n\n------\nWrite a program to print the height and width of a person's room.\n\n-----Input-----\nGiven a person's age, a program will print the height and width of the person's room in feet. For example, if a person is 50 years old, then their room has a height of 50 feet, and a width of 50 feet.\n\n-----Output-----\nGiven a person's age, a program will print the height and width of the person's room in feet. For example, if a person is 50 years old, then their room has a height of 50 feet, and a width of 50 feet.\n\n-----Examples-----\nSample Input:\n20\nSample Output:\nYou are 20 years old. Your room has a height of 70 feet, and a width of 50 feet.\n'''\n\nimport math"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nn = int(input())\nbricks = [int(i) for i in input().split()]\n\nresult = 0"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(read_input()) == read_expected()"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\nassert solution(\"10 4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\nassert solution(\"10 4 3 3 2 1 2 2 1 1 2\") == \"3\"\n\nassert solution(\"10 4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\nassert solution(\"10 4 3 3 2 1 2 2 1 1 3\") == \"3\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6\n1 4 2 2 2''') == 2\nassert solution('''5\n1 2 2 1 2''') == 0\n'''"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nnums = list(map(int, input().split()))"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ashmeade 9.90 8.85\\nblake 9.69 8.72\\nbolt 9.58 8.43\\ncarter 9.78 8.93\\nfrater 9.88 8.92\\npowell 9.72 8.61') == '35.54'\n\n'''"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n\n-----Constraints-----\n$n$ will be between $4$ and $500$ (inclusive).\nEach runner will have $2 \\le a_ i \\le b_ i < 20$ for each $i$ (inclusive).\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nADRIAN 2.12 9.18\\nANA 9.85 9.90\\nBIBI 9.64 9.82\\nANTHONY 9.08 9.16\\nBENJAMIN 9.25 9.38\\nCLARA 9.62 9.67\\nDENIS 9.19 9.23\") == \"35.54\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61'\n) == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nA 2.31 9.11\\nB 1.09 8.19\\nC 1.22 7.57\\n\") == \"A\"\nassert solution(\"6\\nA 2.31 9.11\\nB 1.09 8.19\\nC 1.22 7.57\\nD 1.21 8.88\\nE 1.31 8.14\\nF 1.41 8.26\\n\") == \"A\"\nassert solution(\"6\\nA 2.31 9.11\\nB 1.09 8.19\\nC 1.22 7.57\\nD 1.21 8.88\\nE 1.31 8.14\\nF 1.41 8.26\\n\") == \"A\"\nassert solution(\"4\\nA 1.42 8.88\\nB 2.21 8.14\\nC 2.31 8.26\\nD 2.41 8.38\") == \"B\"\nassert solution(\"4\\nA 1.42 8.88\\nB 2.21 8.14\\nC 2.31 8.26\\nD 2.41 8.38\") == \"B\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nA 2.14 B 2.62 C 1.52\") == \"A\"\nassert solution(\"3\\nA 2.14 B 2.62 C 1.52\")!= \"B\"\nassert solution(\"3\\nA 2.14 B 2.62 C 1.52\")!= \"C\"\nassert solution(\"3\\nA 2.14 B 2.62 C 1.52\")!= \"D\"\nassert solution(\"3\\nA 2.14 B 2.62 C 1.52\") == \"A\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n\"\"\") == \"\"\"\n35.54\nCARTER\nBOLT\nPOWELL\nBLAKE\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61'\n) == '35.54'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == 2\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('1\\n1\\n1\\n1') == '2'\nassert solution('1\\n5\\n5\\n5') == '1'\n'''"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\n\n---Solution---\n\n\"\"\""
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3\\n4') == '1'\nassert solution('1\\n2\\n3\\n4\\n5') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '0'\n\nSolution\nYour task is to test the correctness of your solution. When you click \"Run\" it will execute the test code and print the result, so you can check if the solution is correct.\n\nHowever, there are some minor differences between the test code and the actual output, so your task is to find these differences and modify the code to make it run correctly.\n\nYour task is to find the differences in the test code and modify it to make the two print statements the same. The first one should print the actual output, and the second one should print the expected output.\n\nNote: You should have a.py file and a.txt file in the same folder.\n\nPaste the output of the test code (without the extra newline characters) in the text box below.\n\nSample Test 1\nTest 1\n\nTest 2\n\nTest 3\n\nSample Output\nTest 1\n\nTest 1\n\nTest 1\n\nExplanation\nTest 1:\nTest 1 contains the actual output of your test code, which is the output of the code without the modified line(s).\n\nTest 2:\nTest 2 contains the expected output, which is the output of the code with the modified line(s).\n\nTest 3:\nTest 3 contains the actual output of your test code, which is the output of the code without the modified line(s).\n\nPaste your corrected code in the cell below.\n\nTest 1\nCorrected output\n\nTest 1\n\nTest 1\n\nExplanation\nTest 1:\nTest 1 contains the actual output of your test code, which is the output of the code without the modified line(s).\n\nTest 2:\nTest 2 contains the expected output, which is the output of the code with the modified line(s).\n\nTest 3:\nTest 3 contains the actual output of your test code, which is the output of the code without the modified line(s).\n\n'''"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 4\\n5 6') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 4\\n5 6\") == \"2\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 4\\n5 6') == '2'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nL = [int(x) for x in sys.stdin.readline().split(' ')]\nU = [int(x) for x in sys.stdin.readline().split(' ')]\n\nans = 0\n\nfor i in range(0, N):\n    if (L[i] > U[i]):\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution(\n    '3\\n1 2\\n5 6') == '1'\nassert solution(\n    '3\\n1 3\\n2 4') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hey') == 'heey'\nassert solution('Here is a sentence') == 'Here is a sentenceeee'\nassert solution('Alligator') == 'Alligator'\nassert solution('Here is a sentence. Another one') == 'Here is a sentence. Another oneeeeee'\nassert solution('Hi There') == 'Hi There'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('hey') == 'heey'\nassert solution('he') == 'hee'\nassert solution('h') == 'h'\nassert solution('hehe') == 'hehe'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"hey\"\n) == \"heey\"\nassert solution(\n    \"bye\"\n) == \"heeby\"\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hey') == 'heey'\nassert solution('Hello') == 'heeellooo'\nassert solution('Alligator') == 'AlligatorAlligator'\nassert solution('chris') == 'heechrischris'\nassert solution('12345678910') == '12345678910'\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hey') == 'heey'\nassert solution('Goodbye!') == 'Gooey Bye!'\nassert solution('How are you?') == 'Heey How you doin?'\nassert solution('Hello') == 'Heey Hee-y'\nassert solution('gosho') == 'ge-esho'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hey') == 'heey'\n\nprint(solution('hey'))\n\n\n'''"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"yah\") == \"heeay\"\nassert solution(\"Bye\") == \"bye\"\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('hey') == 'heey'\nassert solution('Later!') == 'Later!Alligator!'\nassert solution('Goodbye!') == 'Goodbye!Alligator!'\nassert solution('Oh, not later!') == 'Oh, not later!Alligator!'\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('hey') == 'hee'\nassert solution('hey') == 'heey'\nassert solution('Later!') == 'Alligator!'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hey') == 'heey'\n\nassert solution('Later!') == 'Alligator!'\n\nassert solution('Later') == 'Alligator'\n\nassert solution('Heey') == 'Heeyy'\n\nassert solution('Heey') == 'Heeyy'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n\nassert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n\nassert solution('''2\n0 1\n1 0''') == '1 2'\n\nassert solution('''2\n1 1''') == '1 1'\n\nassert solution('''2\n1 2''') == '1 1'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"sample_input.txt\", 'r').read()) == open(\"sample_output.txt\", 'r').read()\nprint(\"=====End=====\")"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\nprint(solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0'))\nprint(solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0'))\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4\\n'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"EWPGAJRB\"\n) == \"ABCD\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\"\n\nimport string"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(\"Hooray!\")\n\nassert solution(\"MTYIRA\") == \"NOP\"\nprint(\"Hooray!\")\n\"\"\"\n\nDRM_ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nDRM_ALPHABET_ROTATION_TABLE = dict(zip(DRM_ALPHABET, range(len(DRM_ALPHABET))))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('CBABCBA') == 'ABCD'\nassert solution('WRWAABQR') == 'ABQR'\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"EWPGAJRB\") == 'ABCD'\nprint(solution(\"EWPGAJRB\"))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"WXGXWJZTD\") == \"PQRS\"\nassert solution(\"SSSSXJKL\") == \"TUVV\"\n\n\"\"\"\n\nimport string\n\nchars = string.ascii_uppercase"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('WKWGJRRQR') == 'ZWVHOKNR'\nassert solution('VWKWGJRRQR') == 'ZVHOKNRW'\nassert solution('VUVWKWGJRRQR') == 'ZWVHOKNRW'\nassert solution('VWKWGJRRQRVWKWGJRRQR') == 'ZWVHOKNRWZWVHOKNRW'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"UVWXYZ\") == \"ABCD\"\nassert solution(\"AABBBB\") == \"BBBB\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcdef\") == 0\nassert solution(\"abccba\") == 0\nassert solution(\"abcdefg\") == 2\nassert solution(\"abcd\") == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 2\nassert solution('dddd') == 0\n\"\"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"zzzzz\") == 0\nassert solution(\"zzzzx\") == 1\nassert solution(\"zzzz\") == 0\nassert solution(\"zzz\") == 0\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abccba\") == 0\n\n-----Notes-----\n\n'''\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 2\nassert solution('abcdefg') == 1\n\"\"\"\n\nimport re"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcc\") == 1\nassert solution(\"adbc\") == 0\nassert solution(\"\") == 0\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcde\") == 0\nassert solution(\"abcd\") == 1\nassert solution(\"abcde\") == 2\nassert solution(\"abcdef\") == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 2\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 2\nassert solution('abca') == 0\nassert solution('abcab') == 1\nassert solution('abccba') == 1\nassert solution('a') == 0\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcd\") == 0\nassert solution(\"a\") == 0\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aah\") == \"no\"\n\"\"\"\n\nimport unittest\n\nclass Tests(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"aaah\"), \"go\")\n\n    def test_2(self):\n        self.assertEqual(solution(\"aah\"), \"no\")\n\n    def test_3(self):\n        self.assertEqual(solution(\"a\"), \"no\")"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaah') == 'no'\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aah\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"aaaaaah\") == \"no\"\nassert solution(\"aaaaaaah\") == \"go\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaaah') == 'no'\nassert solution('aaaaaah') == 'go'\nassert solution('aaaaaah') == 'go'\n\nassert solution('aaaaaah') == 'go'\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaah\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaaah') == 'no'\nprint('All tests passed.')\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''aaah\naaaaah''') == 'no'\nassert solution('''a\naaah''') == 'go'\n\n'''\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaaah') == 'no'\n\"\"\"\n\n\n\"\"\"\nThe doctor wants to hear the doctor's instructions in the most efficient way possible. He thinks that his method for doing so is to determine the minimum number of \u2019a\u2019s and the maximum number of \u2019h\u2019s that must be said. After that, the doctor can say \u201caaah\u201d as many times as he wants, but he must never say \u201caaaaaah\u201d. (For instance, if the doctor wants to say \u201caaaaaah\u201d, he should say \u201caaaaaah\u201d instead.)\n\nThe doctor also has to say \u201caaah\u201d the fewest times possible, since he doesn\u2019t want to waste time. What is the fewest number of \u2019a\u2019s and the largest number of \u2019h\u2019s that the doctor must say to make the most efficient use of his time?\n\n-----Input-----\nThe input consists of two lines. The first line is the original \u201caaah\u201d Jon Marius is able to say that day. The second line is the doctor\u2019s instructions. Each line contains between $0$ and $999$ \u2019a\u2019s, inclusive, followed by a single \u2019h\u2019.\n\n-----Output-----\nOutput \u201cgo\u201d if Jon Marius can go to that doctor, and output \u201cno\u201d otherwise.\n\n-----Examples-----\nSample Input:\naaah\naaaaaah\nSample Output:\ngo\nno\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaah\") == \"go\"\n\"\"\"\n\nstdin = input()\naaah = input()"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2A1A2B2A2A2A2A2A1B1B1\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\n\"\"\"\n\nfrom itertools import groupby\n\na = list(map(lambda x: x[0], filter(lambda x: x[1] == \"A\", [(\"\".join(item), len(list(group))) for item, group in groupby(stdin) if item!= \"\"])))\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"\n\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B1A2B2A1A2A2A2') == 'B'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B1A2B2A1A2A2A2') == 'B'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 20 4') == '21'\n\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == '21'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1 6 2\") == \"2\"\nassert solution(\"6 5 3 2 4\") == \"5\"\nassert solution(\"6 5 2 4 3\") == \"5\"\n\"\"\"\n\n\nclass Graph:\n    def __init__(self, n):\n        self.adj = [set() for _ in range(n)]\n\n    def add_edge(self, u, v):\n        self.adj[u].add(v)\n        self.adj[v].add(u)\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == expected_result\nprint(solution(input))\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 20 4\") == \"21\"\nassert solution(\"1 6 20 4\") == \"21\"\nassert solution(\"6 5 20 4\") == \"21\"\n\"\"\"\nimport os\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == '4'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n5 3\\n1 2 2\\n2 3 8\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 8 9 3 2 1\") == \"9\"\nassert solution(\"7 8 9 3 2 1 10 5\") == \"21\"\nassert solution(\"5 5 2 2\") == \"0\"\nassert solution(\"3 5 5 3\") == \"5\"\nassert solution(\"2 2 2\") == \"0\"\n\"\"\"\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n''') == '21'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\n\nSOLUTION:"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D 1qqwwwwwww') == 'q1q2q3q4q5q6q7q8q9qw1qw2q3q4q5q6q7q8q9qw'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\nassert solution(\"E H3e2l3o1W1o3r4l2d1!2\") == \"H3e2l3o1W1o3r4l2d1!2\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\n-------------\n\nSample Input 1:\nE\nSample Output 1:\nS\n\nSample Input 2:\nE\nSample Output 2:\nE\n\nSample Input 3:\nD\nSample Output 3:\nEE\n\nSample Input 4:\nD\nSample Output 4:\nEE\n\nSample Input 5:\nD\nSample Output 5:\nEE\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D IiCe3lO2lH5d!!!\") == \"IiCe3lO2lH5d\"\n\"\"\"\n\nfrom collections import defaultdict\nimport string\nimport re"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'E HHHeellloWooorrrrlld!!'\n) == 'H3e2l3o1W1o3r4l2d1!2'\n\nassert solution(\n    'D a2b3c4d5a1b2c3d1a2'\n) == 'aabbbbcddddd'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D H3e2l3o1W1o3r4l2d1!2') == 'HHHeellloWooorrrrlld!!'"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D 4\") == \"D\"\nassert solution(\"D 2\") == \"DD\"\nassert solution(\"D 8\") == \"D8\"\nassert solution(\"D 1\") == \"DDDDDD\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n\nprint(solution(stdin.strip()))\n\"\"\"\n\nfrom math import ceil, log10\n\nn = int(input())"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n\") == \"Alice\"\nassert solution(\"5\\n\") == \"Alice\"\nassert solution(\"1\\n\") == \"Bob\"\nassert solution(\"6\\n\") == \"Alice\"\nassert solution(\"3\\n\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 'Alice'\nassert solution(2) == 'Bob'\n\nimport sys\nimport typing\nimport unittest\n\n\nclass Solution:\n    def solve(self, n: int) -> str:\n        # if n <= 2:\n        #     return 'Alice'\n        # elif n == 3:\n        #     return 'Bob'\n        # elif n % 2 == 0:\n        #     return 'Alice'\n        # else:\n        #     return 'Bob'\n\n        return 'Alice' if n < 3 else 'Bob' if n % 2 == 0 else 'Alice'\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self) -> None:\n        sol = Solution()\n        for n, solution in (\n                (1, 'Alice'),\n                (2, 'Bob'),\n                (3, 'Alice'),\n                (4, 'Bob'),\n                (5, 'Alice'),\n                (6, 'Bob'),\n                (7, 'Alice'),\n                (8, 'Bob'),\n                (9, 'Alice'),\n                (10, 'Bob'),\n                (11, 'Alice'),\n                (12, 'Bob'),\n                (13, 'Alice'),\n                (14, 'Bob'),\n                (15, 'Alice'),\n                (16, 'Bob'),\n                (17, 'Alice'),\n                (18, 'Bob'),\n                (19, 'Alice'),\n                (20, 'Bob'),\n                (21, 'Alice'),\n                (22, 'Bob'),\n                (23, 'Alice'),\n                (24, 'Bob'),\n                (25, 'Alice'),\n                (26, 'Bob'),\n                (27, 'Alice'),\n                (28, 'Bob'),\n                (29, 'Alice'),\n                (30, 'Bob'),\n                (31, 'Alice'),\n                (32, 'Bob'),\n                (33, 'Alice'),\n                (34, 'Bob'),\n                (35, 'Alice'),\n                (36, 'Bob'),\n                (37, 'Alice'),\n                (38, 'Bob'),\n                (39, 'Alice'),\n                (40, 'Bob'),\n                (41, 'Alice'),\n                (42, 'Bob'),\n                (43, 'Alice'),\n                (44, 'Bob'),\n                (45, 'Alice'),\n                (46, 'Bob'),\n                (47, 'Alice'),\n                (48, 'Bob'),\n                (49, 'Alice'),\n                (50, 'Bob'),\n                (51, 'Alice'),\n                (52, 'Bob'),\n                (53, 'Alice'),\n                (54, 'Bob'),\n                (55, 'Alice'),\n                (56, 'Bob'),\n                (57, 'Alice'),\n                (58, 'Bob'),\n                (59, 'Alice'),\n                (60, 'Bob'),\n                (61, 'Alice'),\n                (62, 'Bob'),\n                (63, 'Alice'),\n                (64, 'Bob'),\n                (65, 'Alice'),\n                (66, 'Bob'),\n                (67, 'Alice'),\n                (68, 'Bob'),\n                (69, 'Alice'),\n                (70, 'Bob'),\n                (71, 'Alice'),\n                (72, 'Bob'),\n                (73, 'Alice'),\n                (74, 'Bob'),\n                (75, 'Alice'),\n                (76, 'Bob'),\n                (77, 'Alice'),\n                (78, 'Bob'),\n                (79, 'Alice'),\n                (80, 'Bob'),\n                (81, 'Alice'),\n                (82, 'Bob'),\n                (83, 'Alice'),\n                (84, 'Bob'),\n                (85, 'Alice'),\n                (86, 'Bob'),\n                (87, 'Alice'),\n                (88, 'Bob'),\n                (89, 'Alice'),\n                (90, 'Bob'),\n                (91, 'Alice'),\n                (92, 'Bob'),\n                (93, 'Alice'),\n                (94, 'Bob'),\n                (95, 'Alice'),\n                (96, 'Bob'),\n                (97, 'Alice'),\n                (98, 'Bob'),\n                (99, 'Alice'),\n                (100, 'Bob'),\n                (101, 'Alice'),\n                (102, 'Bob'),\n                (103, 'Alice'),\n                (104, 'Bob'),\n                (105, 'Alice'),\n                (106, 'Bob'),\n                (107, 'Alice'),\n                (108, 'Bob'),\n                (109, 'Alice'),\n                (110, 'Bob'),\n                (111, 'Alice'),\n                (112, 'Bob'),\n                (113, 'Alice'),\n                (114, 'Bob'),\n                (115, 'Alice'),\n                (116, 'Bob'),\n                (117, 'Alice'),\n                (118, 'Bob'),\n                (119, 'Alice'),\n                (120, 'Bob'),\n                (121, 'Alice'),\n                (122, 'Bob'),\n                (123, 'Alice'),\n                (124, 'Bob'),\n                (125, 'Alice'),\n                (126, 'Bob'),\n                (127, 'Alice'),\n                (128, 'Bob'),\n                (129, 'Alice'),\n                (130, 'Bob'),\n                (131, 'Alice'),\n                (132, 'Bob'),\n                (133, 'Alice'),\n                (134, 'Bob'),\n                (135, 'Alice'),\n                (136, 'Bob'),\n                (137, 'Alice'),\n                (138, 'Bob'),\n                (139, 'Alice'),\n                (140, 'Bob'),\n                (141, 'Alice'),\n                (142, 'Bob'),\n                (143, 'Alice'),\n                (144, 'Bob'),\n                (145, 'Alice'),\n                (146, 'Bob'),\n                (147, 'Alice'),\n                (148, 'Bob'),\n                (149, 'Alice'),\n                (150, 'Bob'),\n                (151, 'Alice'),\n                (152, 'Bob'),\n                (153, 'Alice'),\n                (154, 'Bob'),\n                (155, 'Alice'),\n                (156, 'Bob'),\n                (157, 'Alice'),\n                (158, 'Bob'),\n                (159, 'Alice'),\n                (160, 'Bob'),\n                (161, 'Alice'),\n                (162, 'Bob'),\n                (163, 'Alice'),\n                (164, 'Bob'),\n                (165, 'Alice'),\n                (166, 'Bob'),\n                (167, 'Alice'),\n                (168, 'Bob'),\n                (169, 'Alice'),\n                (170, 'Bob'),\n                (171, 'Alice'),\n                (172, 'Bob'),\n                (173, 'Alice'),\n                (174, 'Bob'),\n                (175, 'Alice'),\n                (176, 'Bob'),\n                (177, 'Alice'),\n                (178, 'Bob'),\n                (179, 'Alice'),"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n\") == \"Alice\"\nassert solution(\"10\\n\") == \"Alice\"\n\nassert solution(\"10\\n\") == \"Bob\"\nassert solution(\"5\\n\") == \"Alice\"\n\nassert solution(\"9\\n\") == \"Alice\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"9\") == \"Bob\"\nassert solution(\"7\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\n\nSample Input:\n3\nSample Output:\nBob\n2\n1\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4''') == 'Alice'\nassert solution('''8''') == 'Bob'\nassert solution('''5''') == 'Alice'\nassert solution('''15''') == 'Bob'\nassert solution('''45''') == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('1\\n') == 'Bob'\nassert solution('3\\n') == 'Alice'\nassert solution('8\\n') == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\n\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'Alice'\nassert solution('2\\n1') == 'Alice'\nassert solution('1\\n1') == 'Bob'\nassert solution('1\\n2') == 'Bob'\nassert solution('2\\n2') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'Alice'\nassert solution('8') == 'Bob'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"9 5 6\") == \"9+5=14\"\nassert solution(\"17 29 30\") == \"17+29=42\"\nassert solution(\"16 18 21\") == \"16+18=29\"\nassert solution(\"10 9 17\") == \"10+9=19\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('2 5 4') == '2+5=7'\nassert solution('2 5 1') == '2+5=7'\nassert solution('1 2 3') == '1+2=3'\nassert solution('1 2 -3') == '1-2=3'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"1 2 3\") == \"1+2=3\"\nassert solution(\"0 1 0\") == \"0-1=0\"\nassert solution(\"0 1 1\") == \"0-1=1\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 8') == '5+3=8'\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]\n\nprint(f\"{a}+{b}={c}\")\nprint(f\"{a}-{b}={c}\")\nprint(f\"{a}*{b}={c}\")\nprint(f\"{a}/{b}={c}\")\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"4 2 7\") == \"4+2=7\"\nassert solution(\"100 500 300\") == \"100+500=300\"\n\n---"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 8') == '5+3=8'"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 8\") == \"5 + 3 = 8\"\nassert solution(\"7 6 2\") == \"7 - 6 = 2\"\nassert solution(\"14 6 9\") == \"14 - 6 = 10\"\nassert solution(\"6 9 10\") == \"6 + 9 = 15\"\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 6\") == \"5+3=6\"\n\"\"\"\n\nfirst, second, third = stdin.split()\n\nprint(first + \" \" + second + \"=\" + third)\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"12 5 8\") == \"12+5=17\"\nassert solution(\"14 5 17\") == \"14+5=19\"\n\nassert solution(\"7 5 17\") == \"7+5=12\"\nassert solution(\"7 5 18\") == \"7+5=13\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 9\") == \"5+3=9\"\nassert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"3 5 8\") == \"3+5=8\"\nassert solution(\"1 5 8\") == \"1+5=8\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 2 1 1\") == \"YES\"\nassert solution(\"5\\n3 2 2 1 1\") == \"NO\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n4 1 2 3 4 5 6 7 8''') == 'NO'\nassert solution('''9\n1 1 1 1 1 1 1 1 1''') == 'NO'\nassert solution('''9\n1 1 1 1 1 1 1 1 1''') == 'YES'\nassert solution('''7\n1 1 1 1 1 1 1 1''') == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 1 2\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n3 -> 1 -> 2\n2 -> 3\n\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List, Dict, Tuple"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''4\n2 2 2 2''') == 'NO'\nassert solution('''5\n2 1 2 3 1''') == 'NO'\nassert solution('''5\n1 1 1 1 1''') == 'YES'\n\n'''\nimport os,sys,inspect\ncurrentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\nparentdir = os.path.dirname(currentdir)\nsys.path.insert(0,parentdir) \nfrom utils import test\nfrom utils import time_decorator\nimport string"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nd = [int(x) for x in sys.stdin.readline().split()]\n\nd = sorted(d)"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 2 1 1 3 1 1\\n\") == \"YES\"\nassert solution(\"4 2 2 1 1 2 1\\n\") == \"NO\"\nassert solution(\"8 6 5 3 3 2 2\\n\") == \"NO\"\nassert solution(\"2 2 1 1\\n\") == \"NO\"\n\nimport unittest\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = StringIO(input), StringIO()\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"8\n3 2 2 1 1 3 1 1\"\"\"\n        output = \"\"\"YES\"\"\"\n        self."
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == 'YES'\n\nSample Input:\n9\n3 2 2 1 1 3 1 1\nSample Output:\nNO\n\nSample Input:\n8\n3 2 2 1 1 3 1 1\nSample Output:\nNO\n\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n2 2 2 1 1 3 1 1''') == 'NO'\nassert solution('''8\n2 2 2 1 1 3 1 1''') == 'NO'\nassert solution('''8\n3 1 1 1 3 2 1 1''') == 'NO'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"witch\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(sample_input) == \"ghost\"\n'''\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"> g, g, g, g, g, g, g, g, g, g\") == 'ghost'\nassert solution(\"> d, d, d, d, d, d, d, g, g, g\") == 'demon'\nassert solution(\"> w, w, g, g, g, g, g, g, g, g\") == 'witch'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\tghost\\n2\\tmummy\\n3\\twitch\\n4\\tdemon\\n5\\tdemon\\n6\\tdemon\\n7\\tdemon\\n8\\tdemon\\n9\\tdemon\\n10\\tdemon\") == \"ghost\"\nassert solution(\"1\\tghost\\n2\\tmummy\\n3\\twitch\\n4\\tdemon\\n5\\tdemon\\n6\\tdemon\\n7\\tdemon\\n8\\tdemon\\n9\\tdemon\\n10\\tdemon\") == \"ghost\\tmummy\\nghost\\twitch\\nghost\\tdemon\\nghost\\tdemon\\nghost\\tdemon\\nghost\\tdemon\\nghost\\tdemon\\nghost\\tdemon\"\n\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch') == 'ghost'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('5\\ndemon\\ndemon\\ndemon\\ndemon') == 'demon'\nassert solution('10\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch') == 'witch'\n'''\n\nimport sys"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\n\n-----Test Input-----\n1\nghost\n2\nmummy\n3\nwitch\n4\ndemon\n5\ndemon\n6\ndemon\n7\ndemon\n8\n\n-----Test Output-----\nghost\nmummy\nwitch\n\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def solution(stdin):\n        col = int(stdin[0])\n        res = []\n        for _ in range(col):\n            res.append(stdin[1 + _])\n        res = collections.Counter(res)\n        print(sorted(res.items(), key = lambda x: x[1], reverse=True)[0][0])"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\\nmummy\"\n\nprint(solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\"))\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('3\\nghost\\nmummy\\nwitch') == 'ghost'\nassert solution('4\\nghost\\nmummy\\nwitch\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch\\ndemon'\n\"\"\"\n\nstdin = \"\"\"6\nmummy\nghost\ndemon\nwitch\ndemon\ndemon\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">ghost\") == \"ghost\"\nassert solution(\">mummy\") == \"mummy\"\nassert solution(\">witch\") == \"witch\"\nassert solution(\">demon\") == \"demon\"\n\nimport time"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\n\"\n                 \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n                 \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n                 \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n                 \"George_Winston Summer Lullaby 215\\n\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\n\"\"\"\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"\n\n\"\"\"\nSolution for part 1\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\"\n\nprint('Test pass.')\n\n-----Problem-----\nWrite a program that sorts a list of numbers in ascending order. When two numbers are equally spaced, sort them by their second value. When they are spaced in a way that there is no other number between them, sort them by their first value. If there is only one item in the list, it is already sorted.\n\n-----Input-----\nThe first line contains the integer $n$, the number of items in the list. The next $n$ lines contain one integer per line, giving an item in the list. There are no spaces in the input.\n\n-----Output-----\nThe list should be sorted in the order that the items are given on the input. Print each item on a new line.\n\n-----Example-----\nSample Input:\n5\n5\n7\n8\n4\n3\nSample Output:\n3\n4\n5\n7\n8\n\n-----Solution-----\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"\\\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\"\"\".lstrip()\n\n\"\"\"\nTime Complexity: O(n^2*log(n))\nSpace Complexity: O(n)\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\"\"\"\n\"\"\"\n--- Part Two ---\nMyTunes is a music app that has a rather strange sorting algorithm. The main user interface is through the menu: the first row shows the artist name, the second row shows the album name, and the third row shows the song name. However, when the user does not have any artists in his collection or the artist is an artist with no albums, the three rows will show \"Artists and albums are not available.\"\n\nGiven a list of artist names, a list of album names, and a list of song names, print the artist name, album name, and song name for each song in the order they are listed in the menu.\n\n-----Input-----\nThe first line contains a list of $1$ to $20$ unique artist names, separated by single spaces.\n\nThe next line contains a list of $1$ to $20$ unique album names, separated by single spaces.\n\nThe next line contains a list of $1$ to $20$ unique song names, separated by single spaces.\n\n-----Output-----\nPrint the artist name, album name, and song name for each song in the order it is listed in the menu. Print a blank line between each artist. The artist name should be printed in the order of the list of artist names. The albums should be printed in the order of the list of album names, followed by a blank line. The song name should be printed in the order of the list of song names.\n\n-----Examples-----\nSample Input:\nAlphabetical Order\nMusic Albums\nThe_Muse\nNot_Alive\nThe_Yellow_Pages\nMusic Albums\nLa_Vie_En_Lumi\u00e8re\nHello_Alaska\nSong_Of_Time\nAlphabetical Order\nMusic Albums\nThe_Muse\nNot_Alive\nThe_Yellow_Pages\nMusic Albums\nLa_Vie_En_Lumi\u00e8re\nHello_Alaska\nSong_Of_Time\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\n\"\"\"\nThe solution is not completed. The second function, int c, is not yet defined.\n\"\"\"\n\n\"\"\"\n------ Editorial / Comments ------\nThe logic of the solution is very simple and straightforward. We can divide the input into two steps, one to check whether we have any command at all, and the other to parse it to the given arguments.\n\nWhen we have command, we simply use python list comprehension to get a list of [value, value].\nWhen we don't, then we use a list comprehension to get a list of [value, value] for each value in input. \n\nThe second function c does not seem to be a good way to parse the input. We can use a regex to check the format of the input. \nA better way to check the format of input is to use a dict or a class, \nbecause that will be easier to deal with. We don't have any syntax like {0:Artist, 1:Album, 2:Song_Title, 3:Length_seconds}, \nso we need a class to do this. \nThis will also be a good way to implement stable sorting as it will be easier to use for sorting two songs with equal attribute values.\n\nMyTunes is a new music application from Mapple, and it's an application where you can manage and search through your music. You can sort your music by many different attributes. You can sort your music by each attribute in any order you want, but you cannot sort by more than one attribute in any order. The solution in the description does not allow to sort by more than one attribute, so we will sort by all the attributes in any order. \n\nBefore we sort, we need to check whether we have any sort command. If not, we can return the original list. \nAfter we sort, we return a list of one element, which is a blank line to separate the two lists.\n\nThe second function c has a lot of repetitions of parsing the input. The general idea is to parse the input, split it into a list of strings, then iterate over the list of strings, \nto check whether we have any command, then iterate over the list of strings again to parse the command.\n\nTo implement stable sorting, we need to compare two songs with equal attribute values. The problem with this is that we don't have any format like {0:Artist, 1:Album, 2:Song_Title, 3:Length_seconds}, \nso we need to create a class to do this. \nThe problem with using a class is that we need to create it before we create a list of attribute values, and create it after we create a list of attribute values. \nWe can implement this with a separate function, but I feel like we need to use the class to get a different syntax of this function, \nbecause we do not have such a format. \nThe problem is that we cannot use dict or class to define a list, so we need to use list comprehension to get a list of values.\n\nWe use a regex to check the format of the input. We can also use a class to do this, but I am not sure if it is better than using list comprehension. \n\nThere are three different patterns for the input format. \n\n1. The original input: Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\n2. Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\n3. Tchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\n\n------ Source ------\n\n\"\"\"\n\n\"\"\"\n------ Problem ------\nMyTunes, a new music application from Mapple, allows you to display and"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\"\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215') == '\\nArtist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n'\n\nprint(solution(stdin))\n\n-----\n4\nSong_Title\nArtist\nAlbum\nGenre\n4\nSong_Title\nBand\nAlbum\nGenre\n3\nSong_Title\nAlbum\nBand\n3\nSong_Title\nAlbum\nBand\n4\nSong_Title\nAlbum\nBand\nGenre\n5\nSong_Title\nGenre\nAlbum\nBand\n5\nSong_Title\nArtist\nGenre\nBand\n4\nSong_Title\nBand\nAlbum\n5\nSong_Title\nBand\nAlbum\nArtist"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\"\"\"\n6\nAlbum_Name Rating Year_of_Release_Music_Director_Editor_of_Recordings_Producer_Featuring_Guest\nAzeroth_Wings_Azeroth_1 1_1_1997 1_1_1997_KrAz2_Azer_-\nAzeroth_Wings_Azeroth_2 1_1_1997 1_1_1997_KrAz2_Azer_-\nAzeroth_Wings_Azeroth_3 1_1_1997 1_1_1997_KrAz2_Azer_-\nAzeroth_Wings_Azeroth_4 1_1_1997 1_1_1997_KrAz2_Azer_-\nAzeroth_Wings_Azeroth_5 1_1_1997 1_1_1997_KrAz2_Azer_-"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n'''\n)"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n\"\n    \"5\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"3\\n\"\n    \"Artist\\n\"\n    \"Album\\n\"\n    \"Song_Title\\n\"\n    ) == (\n    \"Artist Album Song_Title Length_seconds\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"\\n\"\n    )\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\nfrom __future__ import annotations\n\n__author__ = \"Stefan Fruhner\"\n\nfrom sys import stdin\n\nfrom typing import List, Set\n\nclass Partition:\n\n    def __init__(self, partition: List[int]):\n        self.partition = partition\n        self.sum = sum(partition)\n        self.can_remove = True\n\n    def remove(self, index: int) -> None:\n        if self.partition[index] == 0:\n            return\n        self.partition[index] -= 1\n        self.sum -= 1\n\n        if index + 1 >= len(self.partition):\n            self.can_remove = False\n        else:\n            self.can_remove = True\n\n    def __str__(self):\n        return str(self.partition)"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == 'YES'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n4 4 4 4 4 4 4') == 'NO'\nassert solution('1 10 1\\n3') == 'NO'"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\n\"\"\"\n\nimport numpy as np\n\nw, h, n = list(map(int, input().split()))\nbricks = list(map(int, input().split()))\n\nbricks.sort()\n\nx = w * h\n\nwhile True:\n    if len(bricks) < x:\n        print('NO')\n        break\n    x -= len(bricks)\n    bricks.pop()\nelse:\n    print('YES')\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 1 5 5 5 5\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\nassert solution(\"4 10 1\\n2\") == \"NO\"\n\nassert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"NO\"\n\nassert solution(\"2 10 7\\n4\") == \"YES\"\n\nassert solution(\"2 10 7\\n5 4 3 2 1\") == \"NO\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n1 1 1 1 1 1 1') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List\n\nh, w, n = map(int, stdin.readline().split())\nbrick_lengths: List[int] = [int(stdin.readline()) for _ in range(n)]"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 1 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5 1') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 1') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 1') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n6 7 2') == 'NO'\nassert solution('3 10 10\\n5 5 6') == 'YES'\nassert solution('3 10 10\\n3 6 7') == 'NO'\nassert solution('3 10 10\\n5 1 1') == 'YES'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('YNYYYNN') == '100.000000'\nassert solution('NYNYYYN') == 'Not Effective'\nassert solution('YNYYNYY') == '66.666667'\nassert solution('NNNNYY') == 'Not Effective'\nassert solution('NYNNYY') == 'Not Effective'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'10\\n'\n'NYNY\\n'\n'NNYY\\n'\n'NYYY\\n'\n'NYYN\\n'\n'NNNY\\n'\n'YYNN\\n'\n'YYYN\\n'\n'YYNY\\n'\n'YYNN'\n) == '66.666667\\n'\n\nassert solution(\n'10\\n'\n'YYNN\\n'\n'YYYN\\n'\n'YYNY\\n'\n'YYNN\\n'\n'YYNN\\n'\n'YYYY\\n'\n'YYYY\\n'\n'YYYY\\n'\n'YYYY'\n) == '50.000000\\n'\n\nassert solution(\n'10\\n'\n'NYNY\\n'\n'NNYY\\n'\n'YYNN\\n'\n'YYYY\\n'\n'YYNN\\n'\n'YYNN\\n'\n'YYNN\\n'\n'YYYY\\n'\n'YYNY'\n) == 'Not Effective\\n'\n\nassert solution(\n'10\\n'\n'NNYY\\n'\n'YYNN\\n'\n'YYNN\\n'\n'YYYY\\n'\n'YYNN\\n'\n'YYNN\\n'\n'YYNN\\n'\n'YYYY'\n) == 'Not Effective\\n'\n\nassert solution(\n'10\\n'\n'NNNN\\n'\n'NNNN\\n'\n'NNNN\\n'\n'NNNN'\n) == '50.000000\\n'"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN') == '66.666667\\n50.000000'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"66.666667\\n50.000000\"\nassert solution(\"10\\nNYN\\nNNY\\nNYN\\nNNY\\nYNN\\nNYN\\nYNN\\nNYY\") == \"Not Effective\"\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nyNYNY\\nNNYY\\nyNYYY\\nyNYYN\\nNNNY\\nyYNN\\nyYNN\\nyYNY\\nyYNN\\nyYNN\\n\") == \"Not Effective\"\nassert solution(\"10\\nYNYNY\\nNNYY\\nyYNNY\\nyYYY\\nNNNY\\nNNNN\\nyYYN\\nYYYY\\nNNNN\\nyYYN\\nyYYN\\nyYYY\\nNNNN\\nNNYY\\nyYNNY\\nyYYN\\n\") == \"66.666667\"\n\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667 50.000000\"\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN') == 'Not Effective\\n66.666667\\n50.000000'\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667,50.000000,50.000000,Not Effective\"\nprint(solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\"))\n\n----"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('YNNY') == '100.0'\nassert solution('NNNY') == '100.0'\nassert solution('YYNN') == '100.0'\nassert solution('YNYY') == '100.0'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BAACC') == 'Bruno'\nassert solution('CCABB') == 'Goran'\nassert solution('BABCC') == 'Adrian'\n\"\"\"\n\nn = int(input())\nl = list(input())"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AAB') == 'Goran'\nassert solution('AAAB') == 'Adrian'\nassert solution('AAAB') == 'Adrian'\nassert solution('AAB') == 'Bruno'\nassert solution('AB') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AABAA\") == \"A\"\nassert solution(\"ABCDDB\") == \"B\"\nassert solution(\"AABBA\") == \"A\"\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\nB\nA''') == 'B'\n\nassert solution('''5\nCAAB\n''') == 'Goran'\n\nassert solution('''3\nABC\n''') == 'Adrian'\nassert solution('''5\nACB\n''') == 'Bruno'\nassert solution('''5\nACB\n''') == 'Bruno'\n'''\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5BAACC') == 3\nassert solution('3CABAA') == 2\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\nBAACC''') == '3'\nassert solution('''5\nACCBA''') == 'Goran'\n\n-----TEST-----\nExplanation\n---\nThe correct answers to the exam are:\nA, B, C, A, B, C, A, B, C, A, B, C...\nThis sequence results in 3 correct answers: A, B, C.\nSo, the program will output 3.\n\nThe correct answers to the exam are:\nB, A, B, C, B, A, B, C, B, A, B, C...\nThis sequence results in 3 correct answers: B, A, B.\nSo, the program will output 3.\n\nThe correct answers to the exam are:\nC, C, A, A, B, B, C, C, A, A, B, B...\nThis sequence results in 3 correct answers: C, C, A.\nSo, the program will output 3.\n\nThis sequence results in the same 3 correct answers: C, C, A.\n'''\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BAACC\") == 3, \"WA\"\nassert solution(\"AAAC\") == 1, \"WA\"\nassert solution(\"AAAB\") == 2, \"WA\"\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BAACC\") == 3\nassert solution(\"CACA\") == 2\nassert solution(\"AABBC\") == 2\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nanswer = sys.stdin.readline()\n\ncorrect_ans = 0\ncorrect_seq = [\"\", \"\", \"\"]\nfor i in range(3):\n    seq = sys.stdin.readline().strip()\n    correct = 0\n    for a in answer:\n        if a == seq[i]:\n            correct += 1\n    if correct > correct_ans:\n        correct_ans = correct\n        correct_seq[0] = seq[0]\n        correct_seq[1] = seq[1]\n        correct_seq[2] = seq[2]\n\nprint(correct_ans)\nprint(\"Adrian\" if correct_seq[0] == \"A\" else \"Bruno\" if correct_seq[0] == \"B\" else \"Goran\")\nprint(\"Adrian\" if correct_seq[1] == \"A\" else \"Bruno\" if correct_seq[1] == \"B\" else \"Goran\")\nprint(\"Adrian\" if correct_seq[2] == \"A\" else \"Bruno\" if correct_seq[2] == \"B\" else \"Goran\")\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"5\nBAACC\"\"\"\n) == \"Bruno\"\nassert solution(\n\"\"\"5\nBACCC\"\"\"\n) == \"Adrian\"\nassert solution(\n\"\"\"5\nAABBC\"\"\"\n) == \"Goran\"\nassert solution(\n\"\"\"5\nBAAAC\"\"\"\n) == \"Adrian\"\nassert solution(\n\"\"\"5\nCAAAC\"\"\"\n) == \"Adrian\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right') == '3 543'\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong') == '4 502'\nassert solution('1 A wrong\\n2 C wrong\\n1 D wrong\\n2 A wrong\\n1 C wrong\\n2 A wrong\\n1 D right\\n1 A right\\n1 B right\\n1 C right\\n1 D wrong\\n2 A right\\n1 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n2 A right\\n1 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n1 A right\\n2 A wrong\\n1 B wrong"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"tests/3.txt\", \"r\").read()) == \"3 543\"\nprint(solution(open(\"input.txt\", \"r\").read()))\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\") == \"3 543\"\nprint(\"The input string is valid!\")\n\n\"\"\"\n\nfrom collections import OrderedDict"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\nassert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\n-----Notes-----\n- n \\leq 100\n- E \\leq C \\leq B \\leq A \\leq D \\leq 10\n- No letter is duplicated in the same problem\n\"\"\"\n\nfrom typing import List\nimport collections\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> str:\n        records = [self.record_parser(record) for record in stdin[:-1]]\n        problem_counter = collections.Counter([record[1] for record in records])\n        time_score = 0\n        for record in records:\n            if record[0] == -1:\n                continue\n            elif record[0] == 1:\n                time_score += record[0] * 60\n            elif record[1] == \"A\" and problem_counter[\"A\"] > 0:\n                time_score += 60\n                problem_counter[\"A\"] -= 1\n            elif record[1] == \"B\" and problem_counter[\"B\"] > 0:\n                time_score += 30\n                problem_counter[\"B\"] -= 1\n            elif record[1] == \"C\" and problem_counter[\"C\"] > 0:\n                time_score += 20\n                problem_counter[\"C\"] -= 1\n            elif record[1] == \"D\" and problem_counter[\"D\"] > 0:\n                time_score += 10\n                problem_counter[\"D\"] -= 1\n            else:\n                time_score += 0\n        return str(sum(problem_counter.values())) + \" \" + str(time_score)\n\n    def record_parser(self, record: str) -> List:\n        time, problem, status = record.split()\n        if status == \"right\":\n            return [1, problem]\n        else:\n            return [-1, problem]\n\nsolution = Solution().solution\n\nassert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n\nimport sys\nimport operator\nfrom collections import OrderedDict\n\nfrom utils import read_input, count_substring"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(r\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == '3 543'\n\nassert solution(r\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == '4 502'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == 5\n\nassert solution('''\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == -1\n\nassert solution('''\n8 3\n1 3\n3 1\n5 3\n1 5\n5 1\n1 4\n4 1\n3 5\n5 2\n2 3\n''') == 12\n'''"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 2 3 2 3 1 5 5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2''') == '5'\n\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\n\"\"\"\n\n\"\"\"\nInstructions\n100 XP\n\nWrite a program that calculates the shortest hopscotch path from the tile 1 to the tile k. Use the Manhattan distance: the distance between the tile at (x1,y1) and the tile at (x2,y2) is |x1-x2| + |y1-y2|.\n\"\"\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\nassert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '-1'"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\nassert solution('8 4\\n2 1 2 1\\n2 2 1 1\\n3 4 4 3\\n5 4 4 2\\n5 5 1 4\\n5 1 5 4\\n5 4 4 2\\n5 5 2 2\\n5 2 3 2\\n4 1 4 1\\n4 3 2 1\\n5 1 1 5\\n5 1 4 4\\n4 4 4 2') == '-1'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\nassert solution('7 3\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == '-1'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n\") == 5\n\n\"\"\"\n\nimport numpy as np\nimport itertools"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 7\") == 'edward is right'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 7\") == \"edward is right\"\n\"\"\"\n\nfrom functools import reduce\nfrom itertools import combinations\nimport math\nimport re\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"edward is right\"\n\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == 'gunilla has a point'\n\nprint(solution('3\\n1 7\\n5 5'))\n\nsolution(\"5\\n1 2\\n2 4\\n3 5\\n4 6\") == 'edward is right'\n\nprint(solution('6\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8'))\n\nsolution('6\\n7 7\\n8 8') == 'edward is right'\n\nprint(solution('7\\n7 7\\n8 8'))\n\nsolution('8\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10') == 'edward is right'\n\nprint(solution('9\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12'))\n\nsolution('10\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14') == 'edward is right'\n\nprint(solution('11\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16'))\n\nsolution('12\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18') == 'edward is right'\n\nprint(solution('13\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19'))\n\nsolution('14\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20') == 'edward is right'\n\nprint(solution('15\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21'))\n\nsolution('16\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22') == 'edward is right'\n\nprint(solution('17\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23'))\n\nsolution('18\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24') == 'edward is right'\n\nprint(solution('19\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25'))\n\nsolution('20\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26') == 'edward is right'\n\nprint(solution('21\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26\\n25 27'))\n\nsolution('22\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26\\n25 27\\n26 28') == 'edward is right'\n\nprint(solution('23\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26\\n25 27\\n26 28\\n27 29'))\n\nsolution('24\\n1 2\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\nassert solution('2\\n5 5') == 'edward is right'\n\n-----Problem-----\nhttps://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=2022\n'''\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 7\\n5 5\\n\") == \"gunilla has a point\"\nprint(\"Tests passed.\")\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\nassert solution(\"4\\n5 5\") == \"edward is right\"\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 7\n5 5\n\"\"\") == \"gunilla has a point\"\n\nassert solution(\"\"\"\n4\n1 7\n5 5\n5 8\n8 9\n\"\"\") == \"edward is wrong\"\n\nassert solution(\"\"\"\n3\n1 7\n5 5\n5 8\n8 9\n\"\"\") == \"edward is wrong\"\n\nassert solution(\"\"\"\n4\n1 7\n5 5\n5 8\n8 9\n\"\"\") == \"edward is right\"\n\nassert solution(\"\"\"\n3\n1 7\n5 5\n5 8\n8 9\n\"\"\") == \"edward is right\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 7\\n5 5\\n\") == \"edward is right\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''4\n4\n4\n1\n2\n2\n4\n'''\n\n\"\"\"\nnumber of guests - 10\nguests in each group - 11"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 11\\n\"\n                 \"t 1 10\\n\"\n                 \"t 1 2\\n\"\n                 \"t 1 3\\n\"\n                 \"s 1\\n\"\n                 \"s 2\\n\"\n                 \"s 3\\n\"\n                 \"s 4\\n\"\n                 \"t 5 6\\n\"\n                 \"s 5\\n\"\n                 \"s 6\\n\"\n                 \"s 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 11\\n'\n                 't 1 2\\n'\n                 't 1 3\\n'\n                 't 1 10\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                 't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n1 2\\n1 3\\n4 3\\n1 2\\n4 1\\n2 3\\n4 1\\n3 2\\n4 1\") == '1\\n2\\n2\\n1'\n\"\"\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10') == '4\\n' * 3\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"t 1 4\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n\"\"\"\nimport sys\n\n_, n, m = map(int, sys.stdin.readline().split())\n\nstdin = sys.stdin.readlines()\n\nfor i in range(m):\n    query = sys.stdin.readline().strip().split()\n    if query[0] == \"t\":\n        print(sum(int(x) for x in sys.stdin.readline().strip().split()) - int(query[-1]))\n    elif query[0] == \"s\":\n        print(sum(int(x) for x in sys.stdin.readline().strip().split()) - int(query[-1]))\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 11\\n\\tt 1 10\\n\\tt 1 2\\n\\tt 1 3\\n\\ts 1\\n\\ts 2\\n\\ts 3\\n\\ts 4\\n\\tt 5 6\\n\\ts 5\\n\\ts 6\\n\\ts 10') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == '4'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n\" \"t 1 2\\n\" \"t 1 3\\n\" \"s 1\\n\" \"s 2\\n\" \"s 3\\n\" \"s 4\\n\" \"t 5 6\\n\" \"s 5\\n\" \"s 6\\n\" \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n4\"\n\nassert solution(\"5 5\\n\" \"t 1 2\\n\" \"t 1 3\\n\" \"s 1\\n\" \"s 2\\n\" \"s 3\\n\" \"s 4\\n\" \"t 5 6\\n\" \"s 5\\n\" \"s 6\\n\" \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n4\"\n\n\"\"\"\nimport re\n\nfrom collections import defaultdict\n\n_m = re.compile(r'([t]|[s])(?:\\s+)')\n\nn, q = map(int, _m.findall(stdin))\n\nfriend_groups = defaultdict(list)\n\nfor _ in range(q):\n    print(_m.findall(_)[0])\n    print(_m.findall(_)[1])\n\nassert _m.findall(stdin) == ['t 1 10', 't 1 2', 't 1 3','s 1','s 2','s 3','s 4', 't 5 6','s 5','s 6','s 10']\n\nassert _m.findall(stdin) == ['t 1 10', 't 1 2', 't 1 3','s 1','s 2','s 3','s 4', 't 5 6','s 5','s 6','s 10']\n\nassert _m.findall(stdin) == ['t 1 10', 't 1 2', 't 1 3','s 1','s 2','s 3','s 4', 't 5 6','s 5','s 6','s 10']"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\n\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '1\\n1'\nassert solution('2 1') == '1\\n2'\nassert solution('1 2') == '2\\n2'\nassert solution('3 1') == '2\\n1'\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\nIceland 1') == '2016'\nassert solution('2\\nIceland 1\\nIceland 2') == '1981'\nassert solution('3\\nIceland 1\\nIceland 2\\nIceland 3') == '1982'\n'''\n\nn = int(input())\ngraph = {}\nfor _ in range(n):\n    country, year = input().split()\n    graph[country] = int(year)\n    \nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    if k == '1':\n        year = graph[country]\n    else:\n        year = graph[country] - int(k) + 1\n    print(year)\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2015\\n1982\\n2016\\n'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2015\\n1982\\n2016\\n'\n\nassert solution('5\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\nIceland 3\\nIceland 4\\nIceland 5\\n') == '2015\\n1982\\n2016\\n'\n\nassert solution('5\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\nIceland 3\\nIceland 4\\nIceland 5\\n') == '2016\\n1987\\n2000\\n'\n\nassert solution('5\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\nIceland 3\\nIceland 4\\nIceland 5\\n') == '2016\\n1987\\n2000\\n'\n\nassert solution('5\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\nIceland 3\\nIceland 4\\nIceland 5\\n') == '2016\\n1987\\n2000\\n'"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2016\\n1982\\n2016\\n'\nprint(solution(stdin))\n\nSolution:\n'''\n\nimport sys\n\nnum_trip = int(sys.stdin.readline())\n\ntrips = dict()\nfor i in range(num_trip):\n    name_trip, year_trip = sys.stdin.readline().split()\n    trips[name_trip] = int(year_trip)\n\nnum_query = int(sys.stdin.readline())\n\nfor j in range(num_query):\n    name_query, num_trip = sys.stdin.readline().split()\n    if num_trip in trips.keys():\n        print(trips[num_trip])\n    else:\n        print(\"?\")"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2016\\n1982\\n2016\\n'\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2016\\n1982\\n2016'\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"aabbcccddddeeeee\") == 10\nassert solution(\"abbcccddddeeeea\") == 10\nassert solution(\"aabbcccddddeeeea\") == 0\nassert solution(\"abbcccdddddddeee\") == 1\n\"\"\"\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbcccddddeeeee') == 10"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nprint(solution(\"abbcccddddeeeee\"))\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abbcccddddeeeee') == 10\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"aabbcccddddeeeee\") == 10\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nprint(\"Success!\")\n\nSample Input:\nThe first case\nis an out-of-the-box case\nThe second case\nThe third case\nThe fourth case\nThe fifth case\nThe sixth case\nThe seventh case\nThe eighth case\nThe ninth case\nThe tenth case\nThe eleventh case\nThe twelfth case\nThe thirteenth case\nThe fourthteen case\nThe fifteenth case\nThe sixteenth case\nThe seventeenth case\nThe eighteenth case\nThe nineteenth case\nThe twentieth case\nThe twenty-first case\nThe twenty-second case\nThe twenty-third case\nThe twenty-fourth case\nThe twenty-fifth case\nThe twenty-sixth case\nThe twenty-seventh case\nThe twenty-eighth case\nThe twenty-ninth case\nThe thirty-first case\nThe thirty-second case\nThe thirty-third case\nThe thirty-fourth case\nThe thirty-fifth case\nThe thirty-sixth case\nThe thirty-seventh case\nThe thirty-eighth case\nThe thirty-ninth case\nThe forty-first case\nThe forty-second case\nThe forty-third case\nThe forty-fourth case\nThe forty-fifth case\nThe forty-sixth case\nThe forty-seventh case\nThe forty-eighth case\nThe forty-ninth case\nThe fifty-first case\nThe fifty-second case\nThe fifty-third case\nThe fifty-fourth case\nThe fifty-fifth case\nThe fifty-sixth case\nThe fifty-seventh case\nThe fifty-eighth case\nThe fifty-ninth case\nThe sixty-first case\nThe sixty-second case\nThe sixty-third case\nThe sixty-fourth case\nThe sixty-fifth case\nThe sixty-sixth case\nThe sixty-seventh case\nThe sixty-eighth case\nThe sixty-ninth case\nThe seventy-first case\nThe seventy-second case\nThe seventy-third case\nThe seventy-fourth case\nThe seventy-fifth case\nThe seventy-sixth case\nThe seventy-seventh case\nThe seventy-eighth case\nThe seventy-ninth case\nThe eighty-first case\nThe eighty-second case\nThe eighty-third case\nThe eighty-fourth case\nThe eighty-fifth case\nThe eighty-sixth case\nThe eighty-seventh case\nThe eighty-eighth case\nThe eighty-ninth case\nThe ninety-first case\nThe ninety-second case\nThe ninety-third case\nThe ninety-fourth case\nThe ninety-fifth case\nThe ninety-sixth case\nThe ninety-seventh case\nThe ninety-eighth case\nThe ninety-ninth case\nThe one hundred-first case\nThe one hundred-second case\nThe one hundred-third case\nThe one hundred-fourth case\nThe one hundred-fifth case\nThe one hundred-sixth case\nThe one hundred-seventh case\nThe one hundred-eighth case\nThe one hundred-ninth case\nThe one hundredth case\nThe one hundred-nintieth case\nThe one hundred-twentieth case\nThe one hundred-twenty-first case\nThe one hundred-twenty-second case\nThe one hundred-twenty-third case\nThe one hundred-twenty-fourth case\nThe one hundred-twenty-fifth case\nThe one hundred-twenty-sixth case\nThe one hundred-twenty-seventh case\nThe one hundred-twenty-eighth case\nThe one hundred-twenty-ninth case\nThe one hundred-thirtieth case\nThe one hundred-thirty-first case\nThe one hundred-thirty-second case\nThe one hundred-thirty-third case\nThe one hundred-thirty-fourth case\nThe one hundred-thirty-fifth case\nThe one hundred-thirty-sixth case\nThe one hundred-thirty-seventh case\nThe one hundred-thirty-eighth case\nThe one hundred-thirty-ninth case\nThe one hundred-fortieth case\nThe one hundred-forty-first case\nThe one hundred-forty-second case\nThe one hundred-forty-third case\nThe one hundred-forty-fourth case\nThe one hundred-forty-fifth case\nThe one hundred-forty-sixth case\nThe one hundred-forty-seventh case\nThe one hundred-forty-eighth case\nThe one hundred-forty-ninth case\nThe one hundred-fiftieth case\nThe one hundred-fifty-first case\nThe one hundred-fifty-second case\nThe one hundred-fifty-third case\nThe one hundred-fifty-fourth case\nThe one hundred-fifty-fifth case\nThe one hundred-fifty-sixth case\nThe one hundred-fifty-seventh case\nThe one hundred-fifty-eighth case\nThe one hundred-fifty-ninth case\nThe one hundred-sixty-first case\nThe one hundred-sixty-second case\nThe one hundred-sixty-third case\nThe one hundred-sixty-fourth case\nThe one hundred-sixty-fifth case\nThe one hundred-sixty-sixth case\nThe one hundred-sixty-seventh case\nThe one hundred-sixty-eighth case\nThe one hundred-sixty-ninth case\nThe one hundred-seventieth case\nThe one hundred-seventy-first case\nThe one hundred-seventy-second case\nThe one hundred-seventy-third case\nThe one hundred-seventy-fourth case\nThe one hundred-seventy-fifth case\nThe one hundred-seventy-sixth case\nThe one hundred-seventy-seventh case\nThe one hundred-seventy-eighth case\nThe one hundred-seventy-ninth case\nThe one hundred-eighty-first case\nThe one hundred-eighty-second case\nThe one hundred-eighty-third case\nThe one hundred-eighty-fourth case\nThe one hundred-eighty-fifth case\nThe one hundred-eighty-sixth case\nThe one hundred-eighty-seventh case\nThe one hundred-eighty-eighth case\nThe one hundred-eighty-ninth case\nThe one hundred-ninetieth case\nThe one hundred-ninety-first case\nThe one hundred-ninety-second case\nThe one hundred-ninety-third case\nThe one hundred-ninety-fourth case\nThe one hundred-ninety-fifth case\nThe one hundred-ninety-sixth case\nThe one hundred-ninety-seventh case\nThe one hundred-ninety-eighth case\nThe one hundred-ninety-ninth case\nThe one hundredth case\nThe one hundred-nintieth case\nThe one hundred-twentieth case\nThe one hundred-twenty-first case\nThe one hundred-twenty-second case\nThe one hundred-twenty-third case\nThe one hundred-twenty-fourth case\nThe one hundred-twenty-fifth case\nThe one hundred-"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('A B C') == 'A. B. C'\nassert solution('A A B C') == 'A. A. B. C'\nassert solution('A B C A') == 'A. B. C. A'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\n-----Constraints-----\nTime limit: 20 seconds per test set.\nMemory limit: 256 MB.\nAll input will be valid and in the format described.\nAll characters are from the English alphabet.\n\n------\nYou have been working on the university\u2019s English department for some time now. Engineers have taken over the university\u2019s English department! They have employed you to write their nefarious software. Their goal is to eliminate all duplicated words from all texts in the English department, because, as they say, \u201cduplicated words are duplicated work\u201d and \u201cduplicated work wastes money.\u201d Actually, what they would really say is \u201cduplicated words are. work\u201d and \u201c.. wastes money\u201d. This is what your program should do \u2013 remove all duplicate words and replace them with a period.\n\nInput is a textbook with at most $2000$ lines. Each line contains up to $100$ characters. Punctuation does not appear (it has already been removed by another programmer); words are made up of up to $20$ lower and uppercase characters (a\u2013z). There are at most $20000$ total words in the input. Each pair of adjacent words is separated by a single space. Case does not matter when comparing words for duplicates (i.e. \u2018Book\u2019 and \u2018book\u2019 and \u2018bOoK\u2019 should be considered the same word). Input ends at end of file.\n\nOutput is a string where the words in the input have been replaced with periods.\n\nExample:\n\nInput:\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n\nOutput:\nEngineering will save the world from. efficiency\n. is a blight on.. and its\nhumanity"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity'''\n\nassert solution('''Inefficient is a blight on the world and its\nhumanity''') == 'Inefficient is a blight on the world and its\nhumanity'\n\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity'''\n\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''\n\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nprint(solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\"))\n\n----------------------"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\"\nassert solution(\"Inefficiency is a blight on the world and its\") == \"Inefficiency is a blight on the world and its\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\"\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n2\\n1\\n') =='satisfactory'\nassert solution('3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('4\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('6\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 2 -3\\n1 2 -3') == 'unsatisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.argv[1]\n\nlines = lines.split('\\n')\n\nm = int(lines[0].split(' ')[0])\nn = int(lines[0].split(' ')[1])\n\nlines = lines[1:]\n\nsatisfactory = True\nfor line in lines:\n    if line!= '':\n        a = int(line.split(' ')[0])\n        b = int(line.split(' ')[1])\n        c = int(line.split(' ')[2])\n        #print(a, b, c)\n\n        if a < 0 and b < 0 and c < 0:\n            if a < b and b < c:\n                satisfactory = False\n                break\n            if b < a and a < c:\n                satisfactory = False\n                break\n            if c < a and a < b:\n                satisfactory = False\n                break\n        if a > 0 and b > 0 and c > 0:\n            if a > b and b > c:\n                satisfactory = False\n                break\n            if b > a and a > c:\n                satisfactory = False\n                break\n            if c > a and a > b:\n                satisfactory = False\n                break"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\nassert solution(\"5 3\\n1 2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"satisfactory\"\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n-1 -2 3') == 'unsatisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n\n\"\"\"\n\nimport sys\nimport json\nimport re\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n''') == 'unsatisfactory'\n\nassert solution('''\n5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n''') =='satisfactory'\n\nassert solution('''\n5 3\n-1 1 3\n-1 -1 3\n1 -1 3\n1 -1 -3\n1 1 -3\n''') =='satisfactory'\n\nassert solution('''\n5 3\n-1 -1 3\n-1 1 3\n1 -1 3\n1 -1 -3\n1 1 -3\n''') =='satisfactory'\n\nassert solution('''\n5 3\n-1 -1 3\n-1 1 3\n1 -1 3\n1 -1 -3\n1 1 -3\n''') == 'unsatisfactory'"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n''') == 'unsatisfactory'\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\"\"\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\nn = int(sys.stdin.readline())\n\ngroups = defaultdict(list)\nfor i in range(n):\n    groups[set(map(int, sys.stdin.readline().split()))].append(i)"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\"\n\nimport collections\nimport itertools\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 4 1 3') == 'none', 'incorrect solution for input 4'\nassert solution('8\\n3 3 2 4 1 1 3 3') == 'none', 'incorrect solution for input 8'\n\nassert solution('2\\n5 5') == 'none', 'incorrect solution for input 2'\nassert solution('5\\n1 3 1 3 3') == 'none', 'incorrect solution for input 5'\n\nassert solution('4\\n4 2 3 6') == 'none', 'incorrect solution for input 4'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 2 2 1') == 'none'\nassert solution('4\\n4 4 4 2') == 'none'\nassert solution('5\\n4 5 3 4 5') == 'none'\nassert solution('4\\n1 1 1 2') == 'none'\nassert solution('3\\n6 6') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\n\"\"\"\n\nimport collections\nimport math\nimport sys"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 5 3 4 6 6\") == \"none\"\nassert solution(\"4\\n1 1 1 2 3 4 6 6\") == \"0\"\nassert solution(\"4\\n2 1 1 2 3 4 6 6\") == \"none\"\nassert solution(\"4\\n3 1 1 2 3 4 6 6\") == \"none\"\nassert solution(\"4\\n1 1 1 1 3 4 6 6\") == \"none\"\n\nSample Input:\n2\n1 1 1 1\nSample Output:\nnone\n\nSample Input:\n2\n1 1 1 6\nSample Output:\nnone\n\nSample Input:\n2\n2 1 1 2\nSample Output:\n0\n\nSample Input:\n2\n2 1 1 3\nSample Output:\nnone\n\nSample Input:\n3\n2 2 1 1\nSample Output:\nnone\n\nSample Input:\n3\n2 2 1 2\nSample Output:\nnone\n\nSample Input:\n3\n2 2 1 3\nSample Output:\nnone\n\nSample Input:\n4\n2 2 1 1 2\nSample Output:\nnone\n\nSample Input:\n3\n2 2 1 3\nSample Output:\nnone\n\nSample Input:\n2\n1 1 1 6\nSample Output:\nnone\n\nSample Input:\n3\n2 2 2 2\nSample Output:\n0\n\nSample Input:\n3\n2 2 2 3\nSample Output:\nnone\n\nSample Input:\n4\n2 2 2 2\nSample Output:\nnone\n\nSample Input:\n4\n2 2 2 2\nSample Output:\nnone\n\nSample Input:\n4\n2 2 2 2\nSample Output:\nnone\n\nSample Input:\n3\n1 1 1 6\nSample Output:\nnone\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 2 1 1 5 3 4 6 6') == 'none'\nassert solution('8\\n1 2 1 3 5 3 4 6 6') == 'none'\nassert solution('8\\n1 2 1 3 5 4 6 6') == 'none'\nassert solution('8\\n1 1 1 1 5 3 4 6 6') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'none'\nassert solution('1\\n1\\n1\\n5\\n4\\n6\\n') == 'none'\nassert solution('1\\n2\\n3\\n5\\n5\\n6\\n') == '2'\nassert solution('1\\n2\\n2\\n5\\n5\\n6\\n') == 'none'\nassert solution('1\\n1\\n2\\n5\\n5\\n6\\n') == 'none'\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\nassert solution(\"21:00:00\", \"04:00:00\") == \"16:00:00\"\nassert solution(\"10:30:00\", \"13:00:00\") == \"12:30:00\"\nassert solution(\"09:25:00\", \"13:00:00\") == \"10:25:00\"\n\"\"\"\n\nimport time\nfrom datetime import datetime, timedelta\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"15:15:15\") == \"23:59:59\"\nassert solution(\"07:07:07\") == \"08:00:00\"\nassert solution(\"24:00:00\") == \"00:00:00\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"12:00:00\"\n\n-----\nSample Input:\n20:00:00\n07:00:00\nSample Output:\n12:00:00\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"23:59:59\") == \"23:59:59\"\n\"\"\"\n\nimport datetime\n\nstdin = input()\ncurrent_time = stdin.split(sep=':')\ncurrent_time = list(map(int, current_time))\n\nstdin = input()\ndesired_time = stdin.split(sep=':')\ndesired_time = list(map(int, desired_time))\n\nprint(datetime.time(current_time[0], current_time[1], current_time[2]).strftime(\"%H:%M:%S\"))\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '20:00:00'\n) == '08:00:00'\nassert solution(\n    '19:59:59'\n) == '23:59:59'\nassert solution(\n    '05:59:59'\n) == '05:59:59'\n\"\"\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\"\nimport math\nimport datetime"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"21:00:00\") == \"10:00:00\"\nassert solution(\"22:00:00\") == \"12:00:00\"\nassert solution(\"01:00:00\") == \"02:00:00\"\nassert solution(\"00:00:00\") == \"00:00:00\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\n\"\"\"\n\nimport datetime\nimport typing\n\n\nclass Time:\n    def __init__(self, hour: int, minute: int, second: int):\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n\n    def __str__(self) -> str:\n        return \"{:02d}:{:02d}:{:02d}\".format(self._hour, self._minute, self._second)\n\n    @classmethod\n    def from_string(cls, time: str) -> \"Time\":\n        hour, minute, second = time.split(\":\")\n        return cls(int(hour), int(minute), int(second))\n\n    def __eq__(self, other) -> bool:\n        return self._hour == other._hour and self._minute == other._minute and self._second == other._second\n\n    def __add__(self, other: \"Time\") -> \"Time\":\n        if isinstance(other, Time):\n            return Time(self._hour + other._hour, self._minute + other._minute, self._second + other._second)\n        raise ValueError(f\"Time can only be added to another Time object, not {type(other)}\")\n\n    def __sub__(self, other: \"Time\") -> \"Time\":\n        if isinstance(other, Time):\n            return Time(self._hour - other._hour, self._minute - other._minute, self._second - other._second)\n        raise ValueError(f\"Time can only be subtracted from another Time object, not {type(other)}\")\n\n    def __lt__(self, other) -> bool:\n        if isinstance(other, Time):\n            return self._hour < other._hour or self._hour == other._hour and self._minute < other._minute or self._hour == other._hour and self._minute == other._minute and self._second < other._second\n        raise ValueError(f\"Time can only be compared with another Time object, not {type(other)}\")\n\n    def __le__(self, other) -> bool:\n        if isinstance(other, Time):\n            return self < other or self == other\n        raise ValueError(f\"Time can only be compared with another Time object, not {type(other)}\")\n\n    def __gt__(self, other) -> bool:\n        if isinstance(other, Time):\n            return not self <= other\n        raise ValueError(f\"Time can only be compared with another Time object, not {type(other)}\")\n\n    def __ge__(self, other) -> bool:\n        if isinstance(other, Time):\n            return not self < other\n        raise ValueError(f\"Time can only be compared with another Time object, not {type(other)}\")\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20:00:00\") == \"20:00:00\"\nassert solution(\"02:10:59\") == \"02:10:59\"\nassert solution(\"00:06:40\") == \"00:06:40\"\nassert solution(\"19:15:50\") == \"19:15:50\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"31 6\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('31 6') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6\\n3\") == \"4\"\nassert solution(\"1 6\\n1\") == \"2\"\nassert solution(\"1 6\\n2\") == \"3\"\nassert solution(\"1 6\\n3\") == \"4\"\nassert solution(\"1 6\\n4\") == \"5\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"31 6\") == \"4\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('31 6\\n') == '4'\nassert solution('1 1\\n') == '0'\nassert solution('4 1\\n') == '1'\nassert solution('4 2\\n') == '1'\nassert solution('4 3\\n') == '2'\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"31 6\") == \"4\"\n\n\"\"\"\n\n\"\"\"\nthis solution is quite slow\n\"\"\"\n\nfrom math import ceil\nfrom math import log"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"31 6\") == \"4\"\nprint(solution(\"31 6\"))\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c \uc124\uba85\n\ubc84\uadf8\ub97c \ucc3e\uc544\ubcf4\ub2c8 \uccab\ubc88\uc9f8 \ucc44\uadf8\ubc29\ubc95\uc740 \ub9cc\uc871\ud55c \ub2f5\uc744 \ubc18\ud658\ud558\ub824\uba74 \uae38\uc774\uac00 \ucd5c\ub300 32\uc790 \uc774\uc0c1\uc77c \ud544\uc694\uac00 \uc5c6\ub2e4. \ub530\ub77c\uc11c, \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uae38\uc774\ub97c \uc784\uc758\ub85c \uc9c0\uc815\ud558\uc5ec \ubc18\ud658\ud574\uc900\ub2e4.\n\ub450\ubc88\uc9f8 \ucc44\uadf8\ubc29\ubc95\uc740 \uc22b\uc790\uac00 \ub9e4\uc6b0 \ud074 \ub54c, \ub9e4\uc6b0 \ud070 \uc22b\uc790\ub97c \uc785\ub825\ubc1b\uc544 \uae38\uc774\uac00 \ub418\ub3c4\ub85d \uc9c0\uc815\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. \uc774 \uacbd\uc6b0 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uae38\uc774\uac00 \uc5c6\uc73c\uba74 0\uc744 \ubc18\ud658\ud55c\ub2e4.\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\nimport math\n\n__author__ = 'Danyang'\n\n\nclass Solution:\n    def solve(self, cipher):\n        \"\"\"\n        solution: binary search\n        :param cipher: the cipher\n        \"\"\"\n        length, money = cipher\n\n        def gcd(a, b):\n            \"\"\"\n            greatest common divisor, math problem\n            :param a:\n            :param b:\n            :return:\n            \"\"\"\n            if b == 0:\n                return a\n            return gcd(b, a % b)\n\n        # find gcd for all elements\n        element_gcd = 1\n        for i in range(1, money + 1):\n            element_gcd = gcd(element_gcd, i)\n\n        # build the sequence\n        # n^2\n        count = 0\n        for i in range(1, money / element_gcd + 1):\n            count += 1 + (money - element_gcd * i) / element_gcd\n\n        # n^2\n        for j in range(1, money / element_gcd):\n            # find the first index i\n            # such that i*element_gcd > j*element_gcd\n            i = j + 1\n            while i * element_gcd <= j * element_gcd:\n                i += 1\n            count += i - j\n\n        return count / length\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '2.6666666666666665'\nassert solution(\"10\") == '2.71828182845905'\nassert solution(\"100\") == '2.71828182845905'\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"10000\") == \"2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427\"\n\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '2.7', f'Expected 2.7, got {solution(\"4\")}'\nassert solution('10') == '2.718281828459045', f'Expected 2.718281828459045, got {solution(\"10\")}'\nassert solution('100') == '2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642743', f'Expected 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713822, got {solution(\"100\")}'\n\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"5\") == \"3.6363636363636367\"\nassert solution(\"10\") == \"8.272727272727273\"\nprint(solution(\"100\"), end=\"\\n\\n\")\n\n------------"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"\nimport math\n\nn = int(input())\ne = 0\nfor i in range(1, n+1):\n    e += 1 / math.factorial(i)\nprint(e)\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642743\"\nassert solution(\"100\") == \"2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427437\"\nassert solution(\"1000\") == \"2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642743718948\"\nassert solution(\"3\") == \"2.60254037844386579364286345115\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('7 3 5') == 'opponent'\nassert solution('3 3 5') == 'paul'\nassert solution('7 3 0') == 'opponent'\nassert solution('10 7 10') == 'paul'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 0\") == \"opponent\"\nassert solution(\"2 0 5\") == \"paul\"\nassert solution(\"1 0 0\") == \"opponent\"\n\"\"\"\n\nn, p, q = input().split()\nn = int(n)\np = int(p)\nq = int(q)"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"7 3 7\") == \"opponent\"\nassert solution(\"4 3 7\") == \"paul\"\nassert solution(\"3 3 7\") == \"opponent\"\nassert solution(\"5 5 7\") == \"opponent\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('1 3 7') == 'opponent'\nassert solution('9 9 9') == 'paul'\n\n'''"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 0\") == \"opponent\"\nassert solution(\"0 0 0\") == \"opponent\"\n\nimport unittest\n\nclass TestDay1(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"5 3 7\"), \"paul\")\n        self.assertEqual(solution(\"5 3 0\"), \"opponent\")\n        self."
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('5 4 7') == 'opponent'\nassert solution('5 4 3') == 'paul'\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 7\\n') == 'paul'\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"4 0 7\") == \"opponent\"\nassert solution(\"0 5 7\") == \"paul\"\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 7') == 'paul'\n\nassert solution('3 6 9') == 'opponent'\n\nassert solution('10 100 10') == 'paul'\n\nassert solution('2 1 5') == 'opponent'\n\nassert solution('5 9 3') == 'paul'"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('1 1 1') == 'opponent'\nassert solution('5 1 7') == 'paul'\n\n'''"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 2\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 4\nassert solution(\"3\") == 6\nassert solution(\"4\") == 8\nassert solution(\"5\") == 10\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 2\n\"\"\"\n\nimport math\n\nN = int(input())"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\n'''\n\nimport sys"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 2\n\"\"\"\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 2\nassert solution('2') == 2\nassert solution('1') == 1\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\n\n'''\n\nn = int(input())\n\nprint(n**2)"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 2\nassert solution('5') == 4\n\nassert solution('') == 0\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 2\n\"\"\"\n\n\"\"\"\ninput\n4\noutput\n5\n\"\"\"\n\nN = int(input())\n\nimport math"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\", \"123\") == \"Yes\"\nassert solution(\"123\", \"1234\") == \"No\"\nassert solution(\"abc\", \"ABC\") == \"Yes\"\nassert solution(\"abc\", \"ABCD\") == \"No\"\nassert solution(\"abc\", \"abcd\") == \"Yes\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12345') == 'Yes'\nassert solution('12345a') == 'No'\nassert solution('a12345') == 'Yes'\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('0') == 'Yes'\nassert solution('0a') == 'No'\nassert solution('12a') == 'Yes'\n\"\"\"\n\n\"\"\"\nS, P = map(str, input().split())\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('abc123') == ''\nassert solution('abc123a') == ''\nassert solution('abc123abc123a') == ''\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"a123\") == \"No\"\nassert solution(\"a123a\") == \"Yes\"\n\"\"\"\n\nS = input()\nP = input()\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"12345\") == \"Yes\"\nassert solution(\"1234aa\") == \"No\"\nassert solution(\"12345a\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'Yes'\nassert solution('1234a') == 'No'\nassert solution('1234') == 'No'\nassert solution('123456') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"12345\") == \"No\"\nassert solution(\"123456\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123\\n123a') == 'Yes'\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123', '123') == 'Yes'\nassert solution('1234', '1234') == 'Yes'\nassert solution('123', '1234') == 'No'\nassert solution('123', '1234a') == 'No'\nassert solution('123', '1234ab') == 'No'\n\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\nP = sys.stdin.readline().strip()"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('kemija') == 'pkempijapa'\nassert solution('paprika') == 'papapripikapa'\nassert solution('gajdeo') == 'pajdeop'\nassert solution('kamila') == 'pkamila'\nassert solution('budim') == 'pbudip'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(solution(\"zepelepenapa papapripikapa\"))\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('papapripikapa') == 'papapripikapa'\nassert solution('kapapripikapa') == 'kapapipikapa'\nassert solution('beepelipipipi') == 'beepelipipipi'\nassert solution('epelepelepipipi') == 'epelepelepipipi'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zepelepenapa\") == \"zelena paprika\"\nassert solution(\"papapripikapa\") == \"paprika paprika\"\n\n\"\"\"\n\nimport re\n\ninput_data = input()\n\nvowels = [\n    \"a\", \"e\", \"i\", \"o\", \"u\",\n    \"A\", \"E\", \"I\", \"O\", \"U\"\n]\n\nword = input_data.split(' ')\n\nfor word_list in word:\n    word_list = list(word_list)\n    \n    for i in range(len(word_list)):\n        if word_list[i] in vowels:\n            word_list[i] = word_list[i] + \"p\" + word_list[i]\n            \n        if i + 1 < len(word_list):\n            if word_list[i] == \"p\" and word_list[i + 1] in vowels:\n                word_list[i + 1] = word_list[i + 1] + \"p\" + word_list[i + 1]\n    \n    word_list = \"\".join(word_list)\n    print(word_list, end=\" \")\n    "
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"zepa epapa proipi kapa\") == \"zelena paprika\"\nassert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"kemija\") == \"kemipijapa\"\nassert solution(\"paprika\") == \"papapripikapa\"\nassert solution(\"aapa\") == \"apa\"\nassert solution(\"zepelepenapa\") == \"zepelepepipapapripikapa\"\n\nimport re\n\npattern = r\"([aeiou][a-z]*)(\\S*)\\1\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"kodekodekadodeka\") == \"kodekodekadodeka\"\nassert solution(\"vzrvkzrkzrv\") == \"vzrvkzrkzrv\"\nassert solution(\"gdddddmgddddmgddd\") == \"gddddmgddddmgddd\"\nassert solution(\"gddddmmggddddmgddd\") == \"gddddmgddddmgddd\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('kemija') == 'kempipijapa'\nassert solution('paprika') == 'papapripikapa'\nassert solution('kata') == 'katap'\n\nprint('All tests passed.')\n\n'''\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"1 0\") == \"IMPOSSIBLE\"\nassert solution(\"0 0\") == \"IMPOSSIBLE\"\nassert solution(\"0 1\") == \"IMPOSSIBLE\"\nassert solution(\"32 32\") == \"ALL GOOD\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32 2\") == \"2\"\nassert solution(\"32 3\") == \"IMPOSSIBLE\"\nassert solution(\"33 3\") == \"ALL GOOD\"\nassert solution(\"0 1\") == \"IMPOSSIBLE\"\nassert solution(\"50 100\") == \"0\"\n\"\"\"\n\nimport sys\n\nX, Y = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32 2\") == \"ALL GOOD\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n\nimport sys\nimport math\n\n_, X, Y = [int(s) for s in sys.stdin.readline().split()]\n\nprint(f'{X - math.floor(X / Y) * Y:.0f}' if math.fabs(X - math.floor(X / Y) * Y) <= 10 ** (-6) else 'IMPOSSIBLE')\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"32 2\") == \"IMPOSSIBLE\"\nassert solution(\"32 2\") == \"ALL GOOD\"\n\"\"\"\n\nfrom math import sqrt, log10\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(32) + \" \" + str(2)) == \"-32\"\nassert solution(str(32) + \" \" + str(2) + \"\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\n\"\"\"\nTake two lists, say for example these two:\n  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nand write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.\n\nExtras:\n\nRandomly generate two lists to test this\nWrite this in one line of Python\nWrite this using at least one list comprehension\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32 2') == '-32'\nassert solution('3 2') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"24 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 2\") == \"ALL GOOD\"\n\n\"\"\"\n\nx, y = map(int, input().split())"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"64 5\") == \"ALL GOOD\"\nassert solution(\"77 20\") == \"IMPOSSIBLE\"\nassert solution(\"90 19\") == \"IMPOSSIBLE\"\nassert solution(\"33 19\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2 2 3 3\n1 3 4\n\"\"\"\n) == \"both\"\nassert solution(\n\"\"\"\n3 1 2 4\n2 2 4\n\"\"\"\n) == \"none\"\nassert solution(\n\"\"\"\n2 2 3 3\n1 2 4\n\"\"\"\n) == \"one\"\nassert solution(\n\"\"\"\n2 2 3 3\n1 2 3\n\"\"\"\n) == \"one\"\nassert solution(\n\"\"\"\n2 2 3 3\n2 3 4\n\"\"\"\n) == \"one\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 2 3 3',\n    '1 3 4',\n    ) == 'both'\nassert solution(\n    '2 2 3 3',\n    '1 3 4',\n    ) == 'one'\nassert solution(\n    '2 2 3 3',\n    '1 3 4',\n    ) == 'none'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"10 10 11 11\") == \"none\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\"\"\"\n\nimport math\n\nA, B, C, D = input().split()\n\nP = int(input())\nM = int(input())\nG = int(input())\n\nA = math.floor(int(A) * M / 60)\nB = math.floor(int(B) * M / 60)\nC = math.floor(int(C) * M / 60)\nD = math.floor(int(D) * M / 60)"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('1 2 3 4') == 'none'"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 3 5\") == \"one\"\nassert solution(\"2 2 3 3\\n1 1 1\") == \"none\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 4 5\") == \"one\"\nassert solution(\"2 2 3 3\\n1 5 6\") == \"none\"\n\"\"\"\n\n_, A, B, C, D = map(int, input().split())\n\nfor i in range(3):\n    a, b, c = map(int, input().split())\n    if a < b:\n        if (A + b) % C == 0:\n            print(\"both\")\n        elif a < (A + b) % C < (A + b) % C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n    elif b < a:\n        if (B + a) % D == 0:\n            print(\"both\")\n        elif b < (B + a) % D < (B + a) % D + C:\n            print(\"one\")\n        else:\n            print(\"none\")\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 2 3 4\") == \"none\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 2 4\") == \"none\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '7'\nassert solution('-1 -2 -3 -4') == '-8'\nassert solution('3 2 1 -4') == '5'\n\"\"\"\n\nstdin = input()\nnums = [int(x) for x in stdin.split()]\n\nsorted_nums = sorted(nums)\n\ndiff = sorted_nums[2] - sorted_nums[1]\n\nfor i in range(2, len(sorted_nums)-1):\n    if sorted_nums[i+1] - sorted_nums[i] == diff:\n        print(sorted_nums[i+1])\n        break\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\"\n\nimport sys\n\ns = list(map(int, sys.stdin.readline().split()))\n\ns.sort()\nd = s[2] - s[0]\nfor i in range(2, len(s)):\n    if s[i] - s[i-1]!= d:\n        break"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"2 6 8\") == \"6\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"-100 -100 100\") == \"0\"\nassert solution(\"-100 -100 100 0\") == \"0\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('6 8 10') == '14'\nassert solution('8 10 12') == '14'\nassert solution('8 10 12 11') == '14'\nassert solution('4 6 8 3') == '10'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6 8') == '10'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"2 4 6\") == \"10\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"2 2 4\") == \"6\"\n\"\"\"\n\na, b, c = map(int, input().split())\nd = b - a\ne = c - b\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('1 1 1') == '1'\nassert solution('4 6 -7') == '1'\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a1) == a2\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('10 20 30 40') == '50'\nassert solution('1 3 6 7') == '4'\nassert solution('3 2 6 7') == '10'\n\n\"\"\"\n\nimport sys\nfrom typing import List, Any\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 70') == '533'\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('500 70') == '533'\nassert solution('100 90') == '50'\nassert solution('1 89') == '2'\nassert solution('0 90') == '1'\nassert solution('5 90') == '5'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nh, v = input().split()\nh = int(h)\nv = int(v)\n\na = ((h**2)-(h*v**2))**0.5\n\nprint(int(a+0.5))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('500 70') == '533'\nprint(solution(input()))\n\n----\n\n'''\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"500 70\") == \"533\"\n\n---"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(\"500 70\"))\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 9\n69 60\n100 60\n''') == '''\n39.0\n30.0'''\n\n'''\nNotes:\n\nFor each line of input, a line of output should be printed.\n\nAs soon as any line of output is printed, the program should stop.\n\nNo whitespace is expected after the last line of output.\n\nYou can look at the sample test case to see the exact format you are expected to output.\n\nThe line of input is guaranteed to be valid and in the format specified.\n\n'''\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\nprint(\"Successfully passed!\")"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'\n\"\"\"\n\n\"\"\"\nSample Input:\n2 9\n69 60\n100 60\nSample Output:\n39.0\n30.0\n\"\"\"\nimport math"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 9\n69 60\n100 60''') == '''39.0\n30.0'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 9\\n69 60\\n100 60\\n') == '39.0\\n30.0'\n-----\nSample Input:\n1 9\n2 3\n10 45\nSample Output:\n0.0\n0.0\n-----\nSample Input:\n3 9\n1 1\n2 3\n3 45\nSample Output:\n8.0\n8.0\n0.0\n-----\nSample Input:\n1 9\n2 3\n100 45\nSample Output:\n0.0\n0.0\n-----\nSample Input:\n1 9\n2 3\n1 1\n3 45\nSample Output:\n0.0\n0.0\n0.0\n-----\nSample Input:\n1 9\n2 3\n1 1\n3 45\nSample Output:\n0.0\n0.0\n0.0\n'''"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\nmax = 0\nday = 0\nfor i in range(n - 2):\n    cur = 0\n    for j in range(i, i + 3):\n        cur += arr[j]\n    if cur > max:\n        max = cur\n        day = i + 1\n\nprint(day, max)\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"7\\n36 20 35 17 36 27 33\") == \"0 20\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test) == expected\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\nassert solution(\"6\\n10 13 15 20 22 24\") == \"2 19\"\n\nassert solution(\"7\\n9 11 12 14 15\") == \"2 10\"\n\n\"\"\"\nimport math\nfrom typing import List, Dict\nfrom collections import defaultdict"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n'''"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\nimport sys"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 6\\n1 2 3\"\n) == \"2\"\nprint(solution(stdin))\nassert solution(\n    \"3 6\\n1 2 3\"\n) == \"2\"\nprint(solution(stdin))\nassert solution(\n    \"3 6\\n1 2 3\"\n) == \"2\"\nprint(solution(stdin))\nassert solution(\n    \"3 6\\n1 2 3\"\n) == \"2\"\nprint(solution(stdin))\nassert solution(\n    \"3 6\\n1 2 3\"\n) == \"2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 6\n1 2 3\n\"\"\") == 2\n\nassert solution(\"\"\"5 5\n1 2 1 1 1\n\"\"\") == 2\n\nassert solution(\"\"\"5 6\n0 1 2 1 2\n\"\"\") == 1\n\nassert solution(\"\"\"5 6\n0 1 1 1 1\n\"\"\") == 0\n\nassert solution(\"\"\"5 5\n1 2 1 1 2\n\"\"\") == 0"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\"\n\nn, a = [int(i) for i in stdin.split()]\narr = [int(i) for i in stdin.splitlines()[1:]]\n\ncount = 0\nfor i in arr:\n    if i < a:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"1 1\\n1 1\\n1 1\") == \"0\"\nassert solution(\"2 2\\n2 1\\n2 1\") == \"1\"\nassert solution(\"2 2\\n2 1\\n2 2\") == \"2\"\nassert solution(\"2 2\\n2 2\\n2 1\") == \"0\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 1\\n2 2\\n3 3\\n4 4') == 2\nassert solution('4 5\\n1 2\\n2 1\\n3 4\\n4 3') == 2\nassert solution('4 5\\n1 2\\n2 3\\n3 1\\n4 4\\n4 3') == 2\nassert solution('4 5\\n1 3\\n2 2\\n3 1\\n4 4\\n4 3') == 2\nassert solution('4 5\\n1 3\\n2 3\\n3 1\\n4 4\\n4 3') == 2\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 5\\n2 1 5') == '1'\nassert solution('2 2 1\\n1 1') == '0'\nassert solution('2 3 4\\n2 3 4') == '0'\nassert solution('2 3 4\\n2 2 4') == '2'\nassert solution('2 3 4\\n2 2 2') == '2'"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('MWWMWMMWM') == 9\n'''"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WWMWMWMWW') == '9'\nassert solution('WMWMW') == '5'\nassert solution('WWMW') == '4'\nassert solution('WW') == '3'\nassert solution('W') == '2'\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('MWWMWMMWM') == '9'\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('MWWMWMMWM') == '9'\nassert solution('M') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"MWWMWMMW\") == \"9\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"MWWMMMMMW\") == \"WMWMWMWMW\"\n\n\"\"\"\n\nimport math\nimport string\nimport sys\n\n\"\"\"\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n\n================\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\nMWWMMMMM\n''') == '9'\n\nassert solution('''2\nMMMWMMWMMM\n''') == '10'\n\nassert solution('''3\nMMMMMMMMMMW\n''') == '10'\n\nassert solution('''4\nMMMMMMMMMMMMW\n''') == '11'\n\nassert solution('''5\nMMMMMMMMMMMMMW\n''') == '11'"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWWWWWWWW\") == \"9\"\nassert solution(\"WWWMWMWWMW\") == \"5\"\nassert solution(\"WWWMWMWMW\") == \"5\"\nassert solution(\"MWWMWMWWMW\") == \"5\"\n\nSample Input:\n3\nMMWMMMMM\nWMMMWMWW\nWWWMWWMM\nSample Output:\n10\n4\n10\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WMMWMMMWMW\") == 9\n\n---\n\nimport heapq\n\nclass Solution:\n    def open_the_club(self, stdin):\n        n = int(stdin[0])\n        arr = stdin[1]\n        count_W, count_M = 0, 0\n        for c in arr:\n            if c == \"W\":\n                count_W += 1\n            else:\n                count_M += 1\n        res = abs(count_W - count_M)\n        if res > n:\n            return n\n        return res\n\n    def open_the_club_better(self, stdin):\n        n = int(stdin[0])\n        arr = stdin[1]\n        count_W, count_M = 0, 0\n        res = float('inf')\n        for c in arr:\n            if c == \"W\":\n                count_W += 1\n            else:\n                count_M += 1\n        res = min(res, abs(count_W - count_M))\n        if res > n:\n            return n\n        return res\n\n    def open_the_club_heapq(self, stdin):\n        n = int(stdin[0])\n        arr = stdin[1]\n        res = 0\n        h = []\n        for c in arr:\n            if c == \"W\":\n                heapq.heappush(h, -1 * len(h))\n            else:\n                if h:\n                    heapq.heappop(h)\n        return -1 * h[0] if h else n\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWMWM\") == \"5\"\nassert solution(\"WWMMM\") == \"3\"\nassert solution(\"WWWMMM\") == \"5\"\n\nprint(solution(\"WWMWM\"))\nprint(solution(\"WWMMM\"))\nprint(solution(\"WWWMMM\"))\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 4\n8 -2 3 undo 2''') == '3'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.readline().strip().split()]\ncommands = [int(i) for i in stdin.readline().strip().split()]\n\nindex = 0\nt = 0\n\nwhile True:\n    if index == n:\n        index = 0\n    if commands[index] > 0:\n        t += 1\n        index += commands[index]\n    elif commands[index] < 0:\n        t += 1\n        index -= commands[index]\n    elif commands[index] == 0:\n        break\n\nprint(t)\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n8 -2 3 undo 2\") == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 3 -1 2\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n\n\nfrom typing import List, Optional, Tuple\nfrom sys import stdin\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\n\ni = 0\nwhile n:\n    if k == 0:\n        i += 1\n        if i == n:\n            i = 0\n    else:\n        k -= 1\n        if k < 0:\n            i -= 1\n    n -= 1\n\nprint(i)\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 -2 3 undo 2\") == '3'\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, input().split())\nstack = deque(list(map(int, input().split())))\n\nwhile len(stack) > 0:\n    command = stack.popleft()\n    if command >= 0:\n        for i in range(command):\n            stack.append(stack.popleft())\n    else:\n        stack.pop()\n\nprint(stack[0])\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 4\n8 -2 3 undo 2''') == '3'\n\n-----Notes-----\n\n'''\n\n-\n\n'''"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 1') == '6 7'\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"6 7\"\n\"\"\"\n\n\"\"\"\n9. Minimum Time to Fill the Bowls\n\nSuppose there are $N$ balls with a weight of $W_{1}~W_{N}$,..., $W_{N}$, respectively. We want to determine the minimum number of cups you will need to fill up the $N$ balls, and the minimum total weight of those cups.\n\nFor example, if we want to fill up three balls, then we can do it by filling up $3$ cups with $5$, $6$, and $7$ cups. It will take $2$ cup(s) to fill up the first ball, $1$ cup(s) to fill up the second ball, and $0$ cup(s) to fill up the third ball. This gives us $3+2+0=7$ cups.\n\nFor $N=0$ we have $N+1=1$ balls. As an example, if we want to fill up one ball, then we have only one cup to fill up and one ball to fill up.\n\nWe also want the minimum total weight of these cups: $5+5+5=15$.\n\nNote: In all cases, we assume that we have one cup per ball.\n\n-----Input-----\nEach test case consists of a single line containing $N$ and $W_{1}~W_{N}$, the number of balls and the weights of these balls respectively. It is guaranteed that these weights are distinct.\n\n-----Output-----\nFor each test case print in a single line the minimum number of cups that we will need to fill up these $N$ balls, and the minimum total weight of these cups.\n\n-----Examples-----\nSample Input:\n3 5\n1 2 3\nSample Output:\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 5\n4 4\n4 5\n5 5\n5 6\n6 6\n\"\"\"\n\n\"\"\"\n10. Minimum Time to Complete an Assignment\n\nA coworker has volunteered for you to help you out with an assignment. You have $N$ employees, and $M$ of them are already assigned to the job. Each of these $M$ employees has a fixed time $T_{i}$ to complete the assignment. Your coworker has assigned a certain number $S$ of tasks. Each of these $S$ tasks has a minimum and maximum time $T_{i,min}$ and $T_{i,max}$ respectively, and each takes a certain amount of time $W_{i}$ to complete.\n\nYour coworker has also assigned a fixed number of employees $X$ to complete the assignment. Each of these $X$ employees can work any number of tasks.\n\nGiven that you have enough employees to complete the assignment, determine the minimum total time to complete the assignment.\n\n-----Input-----\nThere is only one test case in each file. Each test case begins with a line containing $N$ and $M$, respectively, the number of tasks and the number of employees, and the following $S$ lines contain $M$ integers $T_{i,min}, T_{i,max}, W_{i}$ for each task, respectively. The $i$\u2019th line of the $s$\u2019th input also contains $X$ integers $T_{i,1}~T_{i,X}$, the minimum and maximum time needed for each employee to complete the task, respectively.\n\nAll tasks will be assigned to exactly one employee, and each employee will always work exactly one task.\n\n-----Output-----\nFor each test case print a single line with a single integer $T$ giving the minimum total time to complete the assignment.\n\n-----Examples-----\nSample Input:\n4 5\n4\n2 3 4\n1\n2 3 1\n2\n2 3 2\n3\n1 2\n3 4\n4 5\n5 6\nSample Output:\n12\n12\n13\n13\n\"\"\"\n\n\"\"\"\n11. Local Delivery\n\nOur company has recently implemented a new delivery system. The packages will be loaded into a large pallet at the post office, and each pallet is loaded by a conveyor belt. There are $n$ pallets, each with a capacity of $m$ packages. Each package has a size of $W_{i}$. At any given time, there are $n$ pallets in the post office and $n$ packages in each pallet. The packages are loaded in such a way that all packages are loaded into the post office as soon as they are loaded onto the conveyor belt.\n\nThe company wants to know how many pallets of packages will be loaded onto the conveyor belt at a given time $t$. Note that this is done only if the package is loaded onto the belt in a time $t$ (in which case, the package is counted).\n\nAs a reminder, the following conditions must be satisfied:\n\nEach package is loaded onto the conveyor belt only when it is loaded onto the belt in a time $t$ that is a multiple of $W_{i}$.\nAt least one package will be loaded on the conveyor belt at any given time $t$.\n\nIt is guaranteed that $t$ is a multiple of $W_{i}$.\nGiven that there are $n$ pallets and $n$ packages at the beginning, find the maximum number of pallets that will be loaded on the conveyor belt at any given time.\n\n-----Input-----\nEach test case consists of a single line containing two integers $n$ and $m$, the number of pallets and the capacity of each pallet respectively. The following $n$ lines contain $m$ integers $W_{1}~W_{n}$, the size of the packages.\n\n-----Output-----\nFor each test case, print a single line containing one integer $t$, giving the maximum number of pallets that will be loaded on the conveyor belt.\n\n-----Examples-----\nSample Input:\n5 10\n3\n2\n4\n6\n8\n4\n6\n2\n10\nSample Output:\n2\n3\n2\n3\n\"\"\"\n\n\"\"\"\n12. Largest Sum Subarray\n\nGiven an array $A$ of integers, find the largest sum of any non-empty subarray.\n\n-----Input-----\nEach test case consists of one line containing a single integer $n$, the size of the array. The following line contains $n$ integers, each with a value of $0~1~\\ldots~9$.\n\n-----Output-----\nPrint a single line, the maximum sum of any non-empty subarray.\n\n-----Examples-----\nSample Input:\n5\n1 2 3 -4 5\nSample Output:\n9\n\"\"\"\n\n\"\"\"\n13"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(read_input()))\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 2 3 4 5\n4 4 3 4 5\n6 5 4 3 2\n3 2 3 2 1\n9 9 9 9 9\n''') == '''\n6 7\n1 2 3 4 5\n4 4 3 4 5\n'''.strip()\nprint(solution(stdin))\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n5 3 7 4\\n2 2 3 1\") == \"6 3\\n8 5\"\nprint(solution(\"4 2\\n5 3 7 4\\n2 2 3 1\"))\n\n-----Constraints-----\n1 <= N, M <= 1000\n1 <= P_{i,j} <= 10^6\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_str) == output_str\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\nSample Input:\n2 3\n5 6 1\n3 4 6\n5 7 2\nSample Output:\n5 3\n\"\"\"\n\nimport sys\nimport math\n\nfor line in sys.stdin:\n    line = line.split()\n    n, m = int(line[0]), int(line[1])\n    p = []\n    for i in range(n):\n        p.append(list(map(int, sys.stdin.readline().split())))\n    t = [0]*(m+1)\n    for i in range(n):\n        for j in range(1, m+1):\n            if p[i][j]!= 0:\n                k = 0\n                for x in range(j, m+1):\n                    if p[i][x] == 0:\n                        k = x-1\n                        break\n                if k == 0:\n                    k = m\n                t[j] = max(t[j], t[k]+p[i][j])\n    for i in range(1, m+1):\n        print(t[i], end=' ')\n    print()\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"6 7\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == '6 7'\nprint(solution(\"2 3\\n1 2 3\\n3 2 1\"))\n\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2 3') == '6 7'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\n\"\n                \"mollen moles correct\\n\"\n                \"mollen destroy correct\\n\"\n                \"mollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nmollen when correct\\n\"\n                \"mollen moles correct\\n\"\n                \"mollen destroy correct\\n\"\n                \"mollen mills incorrect\") == \"661 incorrect\\n64 correct\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n\"als mollen mollen mollen mollen mollen mollen\"\\n4\\n\"als when correct\"\\n\"mollen moles correct\"\\n\"mollen destroy correct\"\\n\"mollen mills incorrect\"') == '64 correct\\n665 incorrect'\nassert solution('7\\n\"aal mollen mollen mollen mollen mollen mollens\"\\n4\\n\"als when correct\"\\n\"mollen moles correct\"\\n\"mollen destroy correct\"\\n\"mollen mills incorrect\"') == '64 correct\\n665 incorrect'\nassert solution('7\\n\"aal mollen mollen mollen mollens\"\\n4\\n\"als when correct\"\\n\"mollen moles correct\"\\n\"mollen destroy correct\"\\n\"mollen mills incorrect\"') == '64 correct\\n665 incorrect'\nassert solution('7\\n\"aal mollen mollen mollens\"\\n4\\n\"als when correct\"\\n\"mollen moles correct\"\\n\"mollen destroy correct\"\\n\"mollen mills incorrect\"') == '64 correct\\n665 incorrect'\n\n\"\"\"\n\n\n\"\"\"\nWe have to find the correct translation of the Dutch sentence.\nIn the dictionary, there is a translation for each word in the dutch sentence.\nWe have to check the correct translation of the dutch sentence.\nThe correct translation is defined as the translation that is the closest to the dutch sentence.\n\nThe closest translation is defined as the translation with the minimum Levenshtein distance.\nIf there are more than one translation with the minimum Levenshtein distance, the translation which contains the least words is the closest.\n\nIn case of multiple translations, the most common translation is the correct translation.\n\nGiven a sentence in Dutch and a dictionary containing both correct translations as well as phonetic (incorrect) translations of individual words, find the translation of the sentence and indicate whether it is correct, or in case there is more than one find the total number of correct and incorrect translations. A sentence is correctly translated when each word of the sentence is correctly translated.\n\nInput:\n    \n    7\n    \"als mollen mollen mollen mollen mollen mollen\"\n    4\n    \"als when correct\"\n    \"mollen moles correct\"\n    \"mollen destroy correct\"\n    \"mollen mills incorrect\"\n\nOutput:\n    \n    64 correct\n    665 incorrect\n\n\"\"\"\n\n\nimport sys\nfrom Levenshtein import distance as lv"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    7\n    als mollen mollen mollen mollen mollen mollen\n    4\n    als when correct\n    mollen moles correct\n    mollen destroy correct\n    mollen mills incorrect\n    \"\"\"\n) == (\n    \"\"\"\n    64 correct\n    665 incorrect\n    \"\"\"\n), solution.__doc__\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\nals mollen mollen mollen mollen mollen mollen''') == '64 correct'\nassert solution('''4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '665 incorrect'\nassert solution('''4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '16 correct\\n665 incorrect'\nassert solution('''4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '16 correct\\n16 incorrect'\n\n\"\"\"\nfrom collections import Counter, defaultdict\nimport string\nimport re\nimport itertools"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0 0'\nassert solution('1\\n') == '0 1'\nassert solution('2\\n') == '0 0'\nassert solution('3\\n') == '0 1'\nassert solution('4\\n') == '1 1'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n\"als mollen mollen mollen mollen mollen mollen\"\\n4\\n\"als when correct\"\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nprint(solution(stdin))\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == '64\\n665'\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nals when correct\\nmollen mills incorrect\") == '63\\n7'\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n\"\n\"als mollen mollen mollen mollen mollen mollen\\n\"\n\"4\\n\"\n\"als when correct\\n\"\n\"mollen moles correct\\n\"\n\"mollen destroy correct\\n\"\n\"mollen mills incorrect\\n\") == \"64 correct\\n665 incorrect\\n\"\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()\nm = int(stdin.readline().strip())\n\nd = {}\nfor i in range(m):\n    d[stdin.readline().strip().split(' ')[0]] = stdin.readline().strip().split(' ')[1]"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 1\n\n-----Solution-----\n\nn = int(stdin.readline())\nt = list(map(int, stdin.readline().split()))\n\nd = 0\nfor i in range(n):\n    d = max(d, t[i])\n    if d < t[i] + i:\n        d = t[i] + i\n\nprint(d)\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 4 3\") == 7\nassert solution(\"1 1 1 1 1\") == 1\nassert solution(\"2 2 2 2 2\") == 5\nassert solution(\"1 2 1 3 2 4 1\") == 7\nassert solution(\"1 1 1 1 1 1\") == 1\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(output())\n\n-----Problem-----\nFarmer Jon has recently bought $n$ tree seedlings that he wants to plant in his yard. It takes $1$ day for Jon to plant a seedling, and for each tree Jon knows exactly in how many days after planting it grows to full maturity. Jon would also like to throw a party for his farmer friends, but in order to impress them he would like to organize the party only after all the trees have grown. More precisely, the party can be organized at earliest on the next day after the last tree has grown up.\n\nHelp Jon to find out when is the earliest day when the party can take place. Jon can choose the order of planting the trees as he likes, so he wants to plant the trees in such a way that the party will be as soon as possible.\n\n-----Solution-----\nFarmer Jon has recently bought $n$ tree seedlings that he wants to plant in his yard. It takes $1$ day for Jon to plant a seedling, and for each tree Jon knows exactly in how many days after planting it grows to full maturity. Jon would also like to throw a party for his farmer friends, but in order to impress them he would like to organize the party only after all the trees have grown. More precisely, the party can be organized at earliest on the next day after the last tree has grown up.\n\nFind out how many days it will take for the last tree to grow up, and then find the day after which the party can take place.\n\nSince the sum of the number of days after which each tree grows up is equal to the total number of days it takes to plant all the seedlings, the number of days after which the party can take place is equal to the sum of the number of days after which each tree grows up.\n\nTo find the sum of the number of days after which each tree grows up, we can run through all the number of days from 1 to the last day when the last tree grows up, and add the total number of days the corresponding seedlings take to grow up to the total number of days.\n\nSince the sum of the number of days after which each tree grows up is equal to the total number of days it takes to plant all the seedlings, we can write the equation as a sum of powers of $n$:\n\n$$(n+1)(n+2) \\cdots (n+r)\\ =\\ n\\sum_{i=1}^{r}i$$\n\nThis equation has $r$ as its right-hand side, which is equal to the total number of days it takes to plant all the seedlings.\n\nTo find the number of days after which the party can take place, we can do the same thing as above. We can run through all the number of days from 1 to the last day when the last tree grows up, and subtract the total number of days the corresponding seedlings take to grow up from the total number of days it takes to plant all the seedlings.\n\nThe result is equal to the number of days after which the party can take place, which is equal to the difference between the total number of days it takes to plant all the seedlings and the last day when the last tree grows up.\n\nSo the equation looks like:\n\n$$(n+1)(n+2) \\cdots (n+r)\\ -\\ (n+1)\\ =\\ n\\sum_{i=1}^{r}i$$\n\n$$\\sum_{i=1}^{r}i - (n+1) = n(r-1)$$\n$$(n+1)(n+2) \\cdots (n+r) - (n+1) = n(r-1)$$\n$$(n+1)^2 \\cdots (n+r) - (n+1) = n^2(r-1)$$\n$$(n+1)^2 \\cdots (n+r) - (n+1) = n^2(r-1) + n(r-1)$$\n$$(n+1)^3 \\cdots (n+r) - (n+1) = n^3(r-1) + n^2(r-1) + n(r-1)$$\n$$(n+1)^4 \\cdots (n+r) - (n+1) = n^4(r-1) + n^3(r-1) + n^2(r-1) + n(r-1)$$\n$$(n+1)^5 \\cdots (n+r) - (n+1) = n^5(r-1) + n^4(r-1) + n^3(r-1) + n^2(r-1) + n(r-1)$$\n$$(n+1)^6 \\cdots (n+r) - (n+1) = n^6(r-1) + n^5(r-1) + n^4(r-1) + n^3(r-1) + n^2(r-1) + n(r-1)$$\n$$(n+1)^7 \\cdots (n+r) - (n+1) = n^7(r-1) + n^6(r-1) + n^5(r-1) + n^4(r-1) + n^3(r-1) + n^2(r-1) + n(r-1)$$\n$$(n+1)^8 \\cdots (n+r) - (n+1) = n^8(r-1) + n^7(r-1) + n^6(r-1) + n^5(r-1) + n^4(r-1) + n^3(r-1) + n^2(r-1) + n(r-1)$$\n$$(n+1)^9 \\cdots (n+r) - (n+1) = n^9(r-1) + n^8(r-1) + n^7(r-1) + n^6(r-1) + n^5(r-1) + n^4(r-1) + n^3(r-1) + n^2(r-1) + n(r-1)$$\n$$(n+1)^{10} \\cdots (n+r) - (n+1) = n^{10}(r-1) + n^{9}(r-1) + n^{8}(r-1) + n^{7}(r-1) + n^{6}(r-1) + n^{5}(r-1) + n^{4}(r-1) + n^{3}(r-1) + n^{2}(r-1) + n(r-1)$$\n\nWe have found the sum of the number of days after which each tree grows up. Now, we need to find the number of days after which the party can take place. Since the sum of the number of days after which each tree grows up is equal to the total number of days it takes to plant all the seedlings, the number of days after which the party can take place is equal to the sum of the number of days after which each tree grows up.\n\nThe above solution is found by using the polynomial formula, and then subtracting the total number of days when the last tree grows up from the result.\n\nTo find the sum of the number of days after which each tree grows up, we can use the same"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n-----Problem-----\nFarmer Jon has recently bought $n$ tree seedlings that he wants to plant in his yard. It takes $1$ day for Jon to plant a seedling, and for each tree Jon knows exactly in how many days after planting it grows to full maturity. Jon would also like to throw a party for his farmer friends, but in order to impress them he would like to organize the party only after all the trees have grown. More precisely, the party can be organized at earliest on the next day after the last tree has grown up.\n\nHelp Jon to find out when is the earliest day when the party can take place. Jon can choose the order of planting the trees as he likes, so he wants to plant the trees in such a way that the party will be as soon as possible.\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nassert solution(\"10\\n3 5 7 9 8 5 9 2 3 8 5 9\") == \"10\"\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nprint(solution(stdin.strip()))\n\n---- Problem ----\nThe Cake Shop, a baking business, has to make a cake, and will do that in several stages. The cake will be sized first, and then we'll measure it. We have to use an accurate system to measure the size of the cake.\n\nThe measured cakes are stored in a list of cake sizes. Each cake size is characterized by a 3-tuple of integers $(a, b, c)$, where $a$ is the number of measured layers, $b$ is the number of measured layers with errors and $c$ is the total number of measured layers. After the measured cake is measured, the customer will give the exact size of a single layer and all of the measured cake will be marked with a $+$ sign.\n\nNow the measured cake will be assembled in a different way. After assembling each cake, the measured cake will be stored as one of the $a x b x c$ sized cakes. So, a cake with measured $(4, 2, 8)$ layers will be stored as a cake with measured $(3, 1, 7)$ layers.\n\nYou will get a cake with measured $(a, b, c)$ layers and you need to know, what is the maximum number of layers in the cake, that you can measure in such a way that the measured cake does not have any errors.\n\n------Solution------\n\nfrom collections import namedtuple\n\nCake = namedtuple('Cake', 'layers errors total')"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n3\n\"\"\") == \"\"\"\n0.0 0.0\n0.5 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n3\n\"\"\") == \"\"\"\n0.0 0.0\n0.5 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"\n0.0 0.0\n0.5 2.0\n0.0 4.0\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n0 0\n1 1\n0 2''') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('''5\n-1 -2\n1 0\n0 2\n0 0\n0 0''') == '0.0 0.0\\n0.0 -2.0\\n0.0 0.0\\n0.0 2.0\\n0.0 0.0'\nassert solution('''10\n-500 -200\n-100 0\n0 200\n100 200\n500 0\n-200 0\n-300 -200\n-300 0\n-500 0\n-200 0\n0 -200\n0 -300''') == '-500.0 -200.0\\n-300.0 -200.0\\n-300.0 0.0\\n-500.0 0.0\\n-200.0 0.0\\n0.0 200.0\\n0.0 300.0\\n0.0 -200.0\\n0.0 -300.0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n0 0\n1 1\n0 2''') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1\\n1 -2\\n-3 -1\\n-1 0\") == \"1.0 2.0\"\n\"\"\"\n\nfrom typing import Tuple, List\n\nfrom math import acos, sqrt, pi\n\nPoint = Tuple[float, float]"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0\\n2 2\\n1 1\\n2 3\") == \"0.0 0.0\\n2.0 2.0\"\nassert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n4\\n2 1\") == \"0.0 0.0\\n1.0 1.0\\n0.0 2.0\"\nassert solution(\"3\\n0 0\\n2 3\\n3 2\") == \"0.0 0.0\\n2.0 3.0\"\nassert solution(\"3\\n0 0\\n2 4\\n3 2\") == \"0.0 0.0\\n2.0 4.0\"\nassert solution(\"2\\n0 0\\n2 2\\n1 1\") == \"0.0 0.0\\n2.0 2.0\"\n\n\"\"\"\n\n\nimport math\nimport numpy as np\nfrom typing import List\n\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Vector(self.x * other, self.y * other)\n\n    def __truediv__(self, other):\n        return Vector(self.x / other, self.y / other)\n\n    def __repr__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass SimplePolygon:\n    def __init__(self, points: List[Vector]):\n        self.points = points\n        self.v1 = Vector(points[0].x, points[0].y)\n        self.v2 = Vector(points[1].x, points[1].y)\n        self.center = Vector((self.v1 + self.v2) * 0.5, (self.v1 + self.v2) * 0.5)\n\n    def rotate(self, alpha):\n        return SimplePolygon([self.v1.rotate(alpha), self.v2.rotate(alpha), self.center.rotate(alpha)])\n\n    def translate(self, translation):\n        return SimplePolygon([v.translate(translation) for v in self.points])\n\n    def scale(self, factor):\n        return SimplePolygon([v.scale(factor) for v in self.points])\n\n    def reflect_across_y(self):\n        return SimplePolygon([v.reflect_across_y() for v in self.points])\n\n    def reflect_across_x(self):\n        return SimplePolygon([v.reflect_across_x() for v in self.points])\n\n    def scale_points(self, factor):\n        return SimplePolygon([v.scale(factor) for v in self.points])\n\n    def translate_points(self, translation):\n        return SimplePolygon([v.translate(translation) for v in self.points])\n\n    def area(self):\n        return abs(self.v1 * self.v2)\n\n    def __repr__(self):\n        return f\"SimplePolygon([{', '.join(map(str, self.points))}])\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('3\\n0 0\\n1 1\\n0 2\\n3\\n') == '0.0 0.0\\n1.0 1.0\\n0.0 4.0'\nassert solution('3\\n0 0\\n1 1\\n0 2\\n5\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 0.0'\nassert solution('3\\n0 0\\n1 1\\n0 2\\n7\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 0.0'\n\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nimport math\n\n\nclass Polygon:\n    \"\"\"\n    \u0421lass Polygon represents a polygon with arbitary number of vertices.\n\n    Attributes:\n        vertices: List of vertices coordinates\n        sides: List of all sides lengths\n\n    Methods:\n        __init__: Initialize Polygon object\n        get_area: Get polygon area\n    \"\"\"\n\n    def __init__(self, vertices: list) -> None:\n        \"\"\"\n        Initialize Polygon object with its vertices and sides list\n\n        Args:\n            vertices: list of vertices coordinates\n        \"\"\"\n        self.vertices = vertices\n        self.sides = []\n        self.__calculate_sides()\n        self.__calculate_area()\n\n    def get_area(self) -> float:\n        \"\"\"\n        Return polygon area\n\n        Returns:\n            polygon area\n        \"\"\"\n        return self.area\n\n    def __calculate_sides(self) -> None:\n        \"\"\"\n        Calculate and save all sides lengths\n        \"\"\"\n        for i in range(len(self.vertices)):\n            side = math.sqrt((self.vertices[i][0] - self.vertices[(i + 1) % len(self.vertices)][0]) ** 2 +\n                             (self.vertices[i][1] - self.vertices[(i + 1) % len(self.vertices)][1]) ** 2)\n            self.sides.append(side)\n\n    def __calculate_area(self) -> None:\n        \"\"\"\n        Calculate polygon area\n        \"\"\"\n        self.area = 0\n        for i in range(len(self.sides)):\n            self.area += (self.sides[i] * self.sides[(i + 1) % len(self.sides)]) / 2\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('11') == '11'\nassert solution('21') == '16'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == 1\nassert solution(\"100\") == 2\nassert solution(\"3\") == 1\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nd = 0"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nprint(solution(\"1\"))\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('100') == '5'\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('100') == '5'\n\"\"\"\n\nn = int(input())\n\ndays = 0\n\nwhile n > 1:\n    days += 1\n    n = n // 2\n    days += 1\n    n = n // 2\n\nprint(days)\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"10\") == 2\nassert solution(\"100\") == 3\n\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nprint(solution(stdin.readline()))\n\n-----Notes-----\nYou do not need to account for the storage of the statues' parts.\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n12 16') == '34'\nprint(solution(stdin))\n\n------Challenge------\nYou may complete the following task to practice using the most appropriate libraries to solve this problem:\n\n- [Is Subsequence](https://www.codewars.com/kata/is-subsequence/python)\n\n-----Notes-----\nFor the purpose of this problem, the number of smartbulbs will always be greater than the number of smartbulbs on the ground floor.\n\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 16\\n4 2') == '36'\n\"\"\"\n\nimport math\n\na, b = list(map(int, stdin.split()))\nm, sigma = list(map(int, stdin.split()))\n\nsol = math.inf\nfor x in range(1, m // 2 + 1):\n    for y in range(1, sigma // 2 + 1):\n        if x + y <= m and 2 * x + y >= sigma:\n            r = a * x + b * y\n            sol = min(sol, r)\n\nprint(sol)\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n12 16\\n') == '34'\nassert solution('1 3\\n5 16\\n') == '34'\nassert solution('4 4\\n3 20\\n') == '20'\nassert solution('0 100\\n2 500\\n') == '500'\n\n------Solution------\n\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nprint(solution(\"3 1\\n12 16\"))\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4\\n2 5\\n2 4'\n) == '12'\nassert solution(\n    '1\\n4 0'\n) == '4'\nassert solution(\n    '3\\n2 3\\n4 3'\n) == '5'\n\"\"\"\n\n\n\n\"\"\"\nSample Input:\n2 5\n4 8\nSample Output:\n20\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\"\n\nimport math\n\na, b = map(int, stdin.split())\nm, s = map(int, stdin.split()[1:])\n\nprint((a * m + b * s) / 2)"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n12 16\\n2 4\") == \"34\"\nassert solution(\"7 10\\n10 10\\n2 10\") == \"8\"\nassert solution(\"2 1\\n1 1\\n1 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nassert solution(\"3 1\\n12 34\") == \"0\"\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n12 16') == '34'\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\\\n1 2 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\nassert solution('4\\n1 1 2 3') == '2'\nassert solution('4\\n2 3 1 2') == '4'\nassert solution('4\\n2 2 2 2') == '0'\nassert solution('4\\n1 1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nfrom typing import List, Any\nimport numpy as np"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.0') == 1088\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"1.0\") == \"1088\"\nassert solution(\"1.0\") == \"1088\"\nassert solution(\"1.0\") == \"1088\"\nassert solution(\"1.0\") == \"1088\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.0') == '1088'\n\n\"\"\"\n\nfrom typing import Tuple, Callable, Union, List, Dict, Optional, cast\nfrom decimal import Decimal\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"0.8\") == \"840\"\nassert solution(\"0.23\") == \"172\"\nassert solution(\"0.002\") == \"5\"\nassert solution(\"0.02\") == \"20\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"1.1\") == \"1087\"\nassert solution(\"1.2\") == \"1086\"\nassert solution(\"1.3\") == \"1085\"\nassert solution(\"1.4\") == \"1084\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.0') == '1088'\nassert solution('0.25') == '385'\nassert solution('0.5') == '985'\nassert solution('0.75') == '1425'\nassert solution('1.0') == '1088'\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.0') == '1088'\nassert solution('0.5') == '648'\nassert solution('0.4') == '571'\nassert solution('0.6') == '564'\nassert solution('1.0') == '1088'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3.14\") == \"879\"\nassert solution(\"4.75\") == \"748\"\nassert solution(\"0.6\") == \"586\"\nassert solution(\"10.8\") == \"1188\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.0') == '1088'\nassert solution('1.23') == '1208'\nassert solution('1.235') == '1208'\nassert solution('1.2345') == '1208'\nassert solution('1.23456') == '1208'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 4\") == \"25.000000000\"\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 4\\n1 100.0 1 100.0 1 100.0\\n2 200.0 2 200.0 2 200.0\\n3 300.0 3 300.0 3 300.0\") == \"25.0 25.0 25.0 25.0\"\n\nSample Input:\n0 2\nSample Output:\n25.000000000\n25.000000000\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 4\\n1 1 1 1\\n2 1 2 2\\n3 1 3 3\\n4 1 4 4\\n\") == \"25.0\"\n-----Problem-----\nA volumetric cheese is cut into slices of a given thickness $t$. The radius $r$ of each slice is $2t$.\n\nThe radius $r$ of the slices of a sphere of radius $r$ is $r=r-2t$.\n\nTo determine the slices of a sphere, the center of the sphere is set at $(0,0,0)$. The radius is set at $r$.\n\nThe sphere is then cut into slices using planes perpendicular to the $z$ axis. The planes cut the sphere into slices whose center is a distance $z$ from the center of the sphere in the positive direction.\n\nHow many slices of thickness $t$ will the sphere have?\n\n-----Hint-----\nThe only variables in the equations are $x$, $y$, and $z$. Therefore, the equations for the slices of a sphere are:\n\n$2t=(x-0)^2 + (y-0)^2 + (z-0)^2$\n$2t=(r-2t)^2$\nGiven the volume of the sphere, how many slices can it be cut into?\n\n(Hint: Think about the volume of a slice.)\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 4\\n1 2 3 4\\n5 6 7 8\") == \"25.0\\n25.0\\n25.0\\n25.0\"\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 4\") == \"25.000000000\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 4\\n1 1 0 1\\n2 2 0 2\\n3 3 0 3\\n4 4 0 4\\n5 5 0 5\\n6 6 0 6\\n7 7 0 7\\n8 8 0 8\\n9 9 0 9\\n10 10 0 10\\n11 11 0 11\\n12 12 0 12\\n13 13 0 13\\n14 14 0 14\\n15 15 0 15\\n16 16 0 16\\n17 17 0 17\\n18 18 0 18\\n19 19 0 19\\n20 20 0 20\\n21 21 0 21\\n22 22 0 22\\n23 23 0 23\\n24 24 0 24\\n25 25 0 25\\n26 26 0 26\\n27 27 0 27\\n28 28 0 28\\n29 29 0 29\\n30 30 0 30\\n31 31 0 31\\n32 32 0 32\\n33 33 0 33\\n34 34 0 34\\n35 35 0 35\\n36 36 0 36\\n37 37 0 37\\n38 38 0 38\\n39 39 0 39\\n40 40 0 40\\n41 41 0 41\\n42 42 0 42\\n43 43 0 43\\n44 44 0 44\\n45 45 0 45\\n46 46 0 46\\n47 47 0 47\\n48 48 0 48\\n49 49 0 49\\n50 50 0 50\\n51 51 0 51\\n52 52 0 52\\n53 53 0 53\\n54 54 0 54\\n55 55 0 55\\n56 56 0 56\\n57 57 0 57\\n58 58 0 58\\n59 59 0 59\\n60 60 0 60\\n61 61 0 61\\n62 62 0 62\\n63 63 0 63\\n64 64 0 64\\n65 65 0 65\\n66 66 0 66\\n67 67 0 67\\n68 68 0 68\\n69 69 0 69\\n70 70 0 70\\n71 71 0 71\\n72 72 0 72\\n73 73 0 73\\n74 74 0 74\\n75 75 0 75\\n76 76 0 76\\n77 77 0 77\\n78 78 0 78\\n79 79 0 79\\n80 80 0 80\\n81 81 0 81\\n82 82 0 82\\n83 83 0 83\\n84 84 0 84\\n85 85 0 85\\n86 86 0 86\\n87 87 0 87\\n88 88 0 88\\n89 89 0 89\\n90 90 0 90\\n91 91 0 91\\n92 92 0 92\\n93 93 0 93\\n94 94 0 94\\n95 95 0 95\\n96 96 0 96\\n97 97 0 97\\n98 98 0 98\\n99 99 0 99\\n100 100 0 100\\n101 101 0 101\\n102 102 0 102\\n103 103 0 103\\n104 104 0 104\\n105 105 0 105\\n106 106 0 106\\n107 107 0 107\\n108 108 0 108\\n109 109 0 109\\n110 110 0 110\\n111 111 0 111\\n112 112 0 112\\n113 113 0 113\\n114 114 0 114\\n115 115 0 115\\n116 116 0 116\\n117 117 0 117\\n118 118 0 118\\n119 119 0 119\\n120 120 0 120\\n121 121 0 121\\n122 122 0 122\\n123 123 0 123\\n124 124 0 124\\n125 125 0 125\\n126 126 0 126\\n127 127 0 127\\n128 128 0 128\\n129 129 0 129\\n130 130 0 130\\n131 131 0 131\\n132 132 0 132\\n133 133 0 133\\n134 134 0 134\\n135 135 0 135\\n136 136 0 136\\n137 137 0 137\\n138 138 0 138\\n139 139 0 139\\n140 140 0 140\\n141 141 0 141\\n142 142 0 142\\n143 143 0 143\\n144 144 0 144\\n145 145 0 145\\n146 146 0 146\\n147 147 0 147\\n148 148 0 148\\n149 149 0 149\\n150 150 0 150\\n151 151 0 151\\n152 152 0 152\\n153 153 0 153\\n154 154 0 154\\n155 155 0 155\\n156 156 0 156\\n157 157 0 157\\n158 158 0 158\\n159 159 0 159\\n160 160 0 160\\n161 161 0 161\\n162 162 0 162\\n163 163 0 163\\n164 164 0 164\\n165 165 0 165\\n166 166 0 166\\n167 167 0 167\\n168 168 0 168\\n169 169 0 169\\n170 170 0 170\\n171 171 0 171\\n172 172 0 172\\n173 173 0 173\\n174 174 0 174\\n175 175 0 175\\n176 176 0 176\\n177 177 0 177\\n178 178 0 178\\n179 179 0 179\\n180 180 0 180\\n181 181 0 181\\n182 182 0 182\\n183 183 0 183\\n184 184 0 184\\n185 185 0 185\\n186 186 0 186\\n187 187 0 187\\n188 188 0 188\\n189 189 0 189\\n190 190 0 190\\n191 191 0 191\\n192 192 0 192\\n193 193 0 193\\n194 194 0 194\\n195 195 0 195\\n196 196 0 196\\n197 197 0 197\\n198 198 0 198\\n199 199 0 199\\n200 200 0 200\\n201 201 0 201\\n202 202 0 202\\n203 203 0 203\\n204 204 0 204\\n205 205 0 205\\n206 206 0 206\\n207 207 0 207\\n208 208 0 208\\n209 209 0 209\\n210 210 0 210\\n211 211 0 211\\n212 212 0 212\\n213 213 0 213\\n214 214 0 214\\n215 215 0 215\\n216 216 0 216\\n217 217 0 217\\n218 218 0 218\\n219 219 0 219\\n220 220 0 220\\n221 221 0 221\\n222 222 0 222\\n223 223 0 223\\n224 224 0 224\\n225 225 0 225\\n226 226 0 226\\n227 227 0 227\\n228 228 0 228\\n229 229 0 229\\n230 230 0 230\\n231 231 0 231\\n232 232 0 232\\n233 233 0 233\\n234 234 0 234\\n235 235 0 235\\n236 236 0 236\\n237 237 0 237\\n238 238 0 238\\n239 239 0 239\\n240 240 0 240\\n241 241 0 241\\n242 242 0 242\\n243 243 0 243\\n244"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '0.25'\nassert solution('10 5') == '0.2'\nassert solution('1 1 1 1') == '1.0'\nassert solution('2 1 1 1') == '1.0'\nassert solution('2 2 2 1') == '0.5'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 4\\n100 200 300 400\\n0 300 400 300 300\\n0 500 500 500 500\") == \"25.000000\"\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"DA\"\nassert solution(1) == \"DA\"\nassert solution(5) == \"NE\"\nassert solution(1) == \"NE\"\nassert solution(3) == \"NE\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\nassert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n8') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE'\nassert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE\\nNE\\nNE'\nassert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE'\nassert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE'\n\"\"\"\n\nn, w, h = map(int, input().split())\n\nmatches = list(map(int, input().split()))\n\nans = []\nfor match in matches:\n    if match < w:\n        ans.append('DA')\n    elif match > h:\n        ans.append('NE')\n    else:\n        ans.append('DA')\nprint(*ans, sep='\\n')\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 4\n3\n4\n5\n6\n7\n''') == 'DA\\nDA\\nDA\\nNE\\nNE'\nprint('Test pass.')\n\n----"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 2\\n2\") == \"DA\"\nassert solution(\"5 3 4\\n3\\n4\\n5\\n6\") == \"NE\"\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\nYoung Mirko threw matches all over the floor of his room.\n\nHis mom did not like that and ordered him to put all the matches in a box. Mirko soon noticed that not all of the matches on the floor fit in the box, so he decided to take the matches that don\u2019t fit and throw them in the neighbour\u2019s garbage, where his mom (hopefully) won\u2019t find them.\n\nHelp Mirko determine which of the matches fit in the box his mom gave him. A match fits in the box if its entire length can lie on the bottom of the box. Mirko examines the matches one by one.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 50$), the number of matches on the floor, and two integers $W$ and $H$, the dimensions of the box ($1 \\leq W \\leq 100$, $1 \\leq H \\leq 100$).\n\nEach of the following $N$ lines contains a single integer between $1$ and $1000$ (inclusive), the length of one match.\n\n-----Output-----\nFor each match, in the order they were given in the input, output on a separate line \u201cDA\u201d if the match fits in the box or \u201cNE\u201d if it does not.\n\n-----Examples-----\nSample Input:\n5 3 4\n3\n4\n5\n6\n7\nSample Output:\nDA\nDA\nDA\nNE\nNE\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA DA DA NE NE\"\nassert solution(\"3 4\\n1\\n1\\n2\\n3\") == \"NE NE NE NE\"\nassert solution(\"2 2\\n1\\n1\\n1\\n1\") == \"DA DA DA\"\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\n----\n\nWrite 3 lines of code to solve the following problem:\n\nFind the first two numbers that can be added to a given number exactly in such a way that the sum is equal to a given value.\n\n-----Input-----\nOne line of input contains two integers $a$ and $b$ ($1 \\leq a, b \\leq 10^6$), the range of numbers we want to find the sum of.\n\nOne line of input contains a single integer $s$ ($1 \\leq s \\leq 10^6$), the sum we want to achieve.\n\n-----Output-----\nIn one line, print the sum $s$ of the first two numbers that can be added to $a$ exactly in such a way that $s$ is equal to $b$.\n\nPrint no more than one line per test case. If there are no solutions or multiple solutions, print an empty line.\n\nSample Input:\n10 20\n15\nSample Output:\n10\nSample Input:\n20 30\n45\nSample Output:\n'''\na, b = map(int, input().split())\ns = int(input())\na = a + 1\nb = b + 1\n\nwhile a!= b:\n    if a + b == s:\n        print(a, b)\n        break\n    elif a + b < s:\n        a += 1\n    else:\n        b -= 1\nelse:\n    print('')\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA\\nDA\\nDA\\nNE\\nNE'\n'''\nIt is important to understand the following:\n\nIf the match length is greater than the width of the box and the length of the box, it will not fit, so it is not a match.\nThe match is also not a match if it is greater than the height of the box and it is not greater than the width of the box.\nIf the match is greater than the height of the box, it will not fit because it will not even fit in the box, and there is no point in continuing to check the other matches.\nIt is not a match if the match length is greater than the height of the box and the match length is greater than the width of the box.\nIf the match is less than the height of the box and the match length is less than the width of the box, it will not fit because it will not even fit in the box, and there is no point in continuing to check the other matches.\nIf the match is less than the height of the box, it will not fit because it will not even fit in the box, and there is no point in continuing to check the other matches.\nWe can write a function that takes the width and height of the box, the list of lengths of matches, and the index of the match we are currently checking, and returns a list of the remaining matches that can be thrown in the garbage.\n\nLet's start by writing the function that will check if a match fits in the box."
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('asd') == 'asd'\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n-----Test Case-----\nx = 1\nwhile x:\n    try:\n        x = input()\n    except EOFError:\n        break\n    if x:\n        print(solution(x.strip()))\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5,\\n2,\\n3,\\n4,\\n5') == '5'\nassert solution('1,\\n2,\\n3,\\n4,\\n5') == '2'\nassert solution('1,\\n1,\\n1,\\n1,\\n1') == '1'\nassert solution('1,\\n2,\\n3,\\n4,\\n5') == '2'\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n0 0\\n7 42\") == \"6\"\nassert solution(\"3\\n3 5\\n2 1\\n3 4\") == \"6\"\n\nassert solution(\"1\\n7 32\") == \"32\"\nassert solution(\"1\\n5 1\") == \"1\"\nassert solution(\"1\\n0 0\") == \"0\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(samples.txt) == OUTPUT\n\n\"\"\"\n\nimport os\nimport sys\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\nfrom typing import List\n\nfrom utils import *\n\nINPUT_FILE = 'input.txt'"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"\nprint(solution(\"4\\n0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\"))\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(read()) == '6'\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\nassert solution('1\\n0 0\\n1 42') == '1'\nassert solution('3\\n0 0\\n7 42\\n8 43') == '4'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"2\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"3\"\nassert solution(\"1\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"1\"\n\"\"\"\n\nfrom typing import List, Optional"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"1\\n-> \\nALICE\\nALICE -> CARL\") == \"1\"\nassert solution(\"2\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\nCARL -> DANIEL\") == \"correct\"\nassert solution(\"1\\n-> \\nALICE\\nALICE -> CARL\\nCARL -> DANIEL\") == \"1\"\n\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\"\n\nimport re"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"1\\n-> A\") == \"correct\"\nassert solution(\"2\\n-> A\\n-> B\") == \"1\"\nassert solution(\"4\\n-> A\\n-> B\\nA B -> C\\nC -> A\") == \"2\"\nassert solution(\"4\\n-> A\\n-> B\\nA B -> C\\nC -> D\\nD -> A\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 -> BOB -> ALICE\\nBOB -> CARL\\nALICE CARL -> BOB -> ALICE\") == \"correct\"\n\nassert solution(\"2 -> BOB -> ALICE\\nBOB -> CARL\\nALICE -> CARL -> BOB -> ALICE\") == \"1\"\n\nassert solution(\"2 -> BOB -> ALICE\\nBOB -> CARL\\nALICE ALICE -> BOB -> ALICE\") == \"wrong\"\n\nassert solution(\"2 -> BOB -> ALICE\\nBOB -> CARL\\nALICE ALICE -> BOB -> ALICE\") == \"wrong\"\n\nassert solution(\"2 -> BOB -> ALICE\\nALICE ALICE -> BOB -> ALICE\") == \"wrong\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"correct\"\n\nassert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n-> 2\\n2\\n-> 3\\n3\\n-> 4\\n4\\n-> 5\\n5\\n-> 6\\n6\\n-> 7\\n7\\n-> 8\\n8\\n-> 9\\n9\\n-> 10\\n10\\n-> 11\\n11\\n-> 12\\n12\\n-> 13\\n13\\n-> 14\\n14\\n-> 15\\n15\\n-> 16\\n16\\n-> 17\\n17\\n-> 18\\n18\\n-> 19\\n19\\n-> 20\\n20\\n-> 21\\n21\\n-> 22\\n22\\n-> 23\\n23\\n-> 24\\n24\\n-> 25\\n25\\n-> 26\\n26\\n-> 27\\n27\\n-> 28\\n28\\n-> 29\\n29\\n-> 30\\n30\\n-> 31\\n31\\n-> 32\\n32\\n-> 33\\n33\\n-> 34\\n34\\n-> 35\\n35\\n-> 36\\n36\\n-> 37\\n37\\n-> 38\\n38\\n-> 39\\n39\\n-> 40\\n40\\n-> 41\\n41\\n-> 42\\n42\\n-> 43\\n43\\n-> 44\\n44\\n-> 45\\n45\\n-> 46\\n46\\n-> 47\\n47\\n-> 48\\n48\\n-> 49\\n49\\n-> 50\\n50\\n-> 51\\n51\\n-> 52\\n52\\n-> 53\\n53\\n-> 54\\n54\\n-> 55\\n55\\n-> 56\\n56\\n-> 57\\n57\\n-> 58\\n58\\n-> 59\\n59\\n-> 60\\n60\\n-> 61\\n61\\n-> 62\\n62\\n-> 63\\n63\\n-> 64\\n64\\n-> 65\\n65\\n-> 66\\n66\\n-> 67\\n67\\n-> 68\\n68\\n-> 69\\n69\\n-> 70\\n70\\n-> 71\\n71\\n-> 72\\n72\\n-> 73\\n73\\n-> 74\\n74\\n-> 75\\n75\\n-> 76\\n76\\n-> 77\\n77\\n-> 78\\n78\\n-> 79\\n79\\n-> 80\\n80\\n-> 81\\n81\\n-> 82\\n82\\n-> 83\\n83\\n-> 84\\n84\\n-> 85\\n85\\n-> 86\\n86\\n-> 87\\n87\\n-> 88\\n88\\n-> 89\\n89\\n-> 90\\n90\\n-> 91\\n91\\n-> 92\\n92\\n-> 93\\n93\\n-> 94\\n94\\n-> 95\\n95\\n-> 96\\n96\\n-> 97\\n97\\n-> 98\\n98\\n-> 99\\n99\\n-> 100\\n100\\n-> 101\\n101\\n-> 102\\n102\\n-> 103\\n103\\n-> 104\\n104\\n-> 105\\n105\\n-> 106\\n106\\n-> 107\\n107\\n-> 108\\n108\\n-> 109\\n109\\n-> 110\\n110\\n-> 111\\n111\\n-> 112\\n112\\n-> 113\\n113\\n-> 114\\n114\\n-> 115\\n115\\n-> 116\\n116\\n-> 117\\n117\\n-> 118\\n118\\n-> 119\\n119\\n-> 120\\n120\\n-> 121\\n121\\n-> 122\\n122\\n-> 123\\n123\\n-> 124\\n124\\n-> 125\\n125\\n-> 126\\n126\\n-> 127\\n127\\n-> 128\\n128\\n-> 129\\n129\\n-> 130\\n130\\n-> 131\\n131\\n-> 132\\n132\\n-> 133\\n133\\n-> 134\\n134\\n-> 135\\n135\\n-> 136\\n136\\n-> 137\\n137\\n-> 138\\n138\\n-> 139\\n139\\n-> 140\\n140\\n-> 141\\n141\\n-> 142\\n142\\n-> 143\\n143\\n-> 144\\n144\\n-> 145\\n145\\n-> 146\\n146\\n-> 147\\n147\\n-> 148\\n148\\n-> 149\\n149\\n-> 150\\n150\\n-> 151\\n151\\n-> 152\\n152\\n-> 153\\n153\\n-> 154\\n154\\n-> 155\\n155\\n-> 156\\n156\\n-> 157\\n157\\n-> 158\\n158\\n-> 159\\n159\\n-> 160\\n160\\n-> 161\\n161\\n-> 162\\n162\\n-> 163\\n163\\n-> 164\\n164\\n-> 165\\n165\\n-> 166\\n166\\n-> 167\\n167\\n-> 168\\n168\\n-> 169\\n169\\n-> 170\\n170\\n-> 171\\n171\\n-> 172\\n172\\n-> 173\\n173\\n-> 174\\n174\\n-> 175\\n175\\n-> 176\\n176\\n-> 177\\n177\\n-> 178\\n178\\n-> 179\\n179\\n-> 180\\n180\\n-> 181\\n181\\n-> 182\\n182\\n-> 183\\n183\\n-> 184\\n184\\n-> 185\\n185\\n-> 186\\n186\\n-> 187\\n187\\n-> 188\\n188\\n-> 189\\n189\\n-> 190\\n190\\n-> 191\\n191\\n-> 192\\n192\\n-> 193\\n193\\n-> 194\\n194\\n-> 195\\n195\\n-> 196\\n196\\n-> 197\\n197\\n-> 198\\n198\\n-> 199\\n199\\n-> 200\\n200\\n-> 201\\n201\\n-> 202\\n202\\n-> 203\\n203\\n-> 204\\n204\\n-> 205\\n205\\n-> 206\\n206\\n-> 207\\n207\\n-> 208\\n208\\n-> 209\\n209\\n-> 210\\n210\\n-> 211\\n211\\n-> 212\\n212\\n-> 213\\n213\\n-> 214\\n214\\n-> 215\\n215\\n-> 216\\n216\\n-> 217\\n217\\n-> 218\\n218\\n-> 219\\n219\\n-> 220\\n220\\n-> 221\\n221\\n-> 222\\n222\\n-> 223\\n223\\n-> 224\\n224\\n-> 225\\n225\\n-> 226\\n226\\n-> 227\\n227\\n-> 228\\n228\\n-> 229\\n229\\n-> 230\\n230\\n-> 231\\n231\\n-> 232\\"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE CARL -> \\n\") == \"correct\"\n\"\"\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Connie Froggatt'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\"\nimport collections\nimport re\nimport sys\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\n\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Connie Froggatt\"\n\"\"\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\n***') == 'Penny Franklin'\n\n-----Test 1-----\nSample Input:\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n***\n\nSample Output:\nRunoff!\n\n-----Test 2-----\nSample Input:\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n***\n\nSample Output:\nConnie Froggatt\n\n-----Test 3-----\nSample Input:\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n\nPenny Franklin\n***\n\nSample Output:\nRunoff!\n\n'''"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nMarti Graham\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nMarti Graham\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\n\"\"\"\n\nimport operator\nfrom collections import Counter"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nprint(\"Test 1: Normal\")\nassert solution('''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\n\nprint(\"Test 2: Normal\")\nassert solution('''5\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nR2D2 Binary Basic\n''') == '5'\n\nprint(\"Test 3: Normal\")\nassert solution('''5\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nR2D2 Binary Basic\n''') == '5'\n\nprint(\"Test 4: Normal\")\nassert solution('''4\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nR2D2 Binary Basic\n''') == '4'\n\nprint(\"Test 5: Normal\")\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"5\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"2\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\n\") == '2'\nassert solution(\"6\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nGrakchawwaa Shyriiwook Basic\\nR2D2 Binary Basic\\nLeia Organa Basic\\nDarth Vader Basic\") == '1'\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == expected_output\nprint(solution(data))\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n') == '900'\n\n-----Notes-----\ntime limit: 1 second\nmemory limit: 128 MB\nYou are free to assume all constraints are satisfied.\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"\nimport sys"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1\\n200\\n27 3 20') == '900'\nassert solution('1 10 1\\n300\\n27 3 20') =='stay home'\n\"\"\"\n\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\nfrom itertools import product\n\nN, B, H, W = list(map(int, stdin.readline().strip().split()))\nprice = list(map(int, stdin.readline().strip().split()))\nbed = list(map(int, stdin.readline().strip().split()))\n\nresult = []\nfor p, b in product(price, bed):\n    if p * b <= B:\n        result.append(p * b)\nprint(min(result) if result else \"stay home\")\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('3 1000 2 3\\n200\\n1 2 3\\n300\\n27 3 20') == '1000'\nassert solution('3 1000 2 3\\n200\\n1 2 3\\n300\\n27 3 20') == '1000'\nassert solution('3 1000 2 3\\n200\\n1 2 3\\n300\\n27 3 20') == '1000'\nassert solution('3 1000 2 3\\n200\\n1 2 3\\n300\\n27 3 20') == '1000'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\n---\n'''\n\nfrom typing import List"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\n\"\"\"\n\na, b, h, w = list(map(int, input().split()))\nprice_per_person = list(map(int, input().split()))\nbeds = [list(map(int, input().split())) for _ in range(h)]\n\ntotal_price = 0\nfor i in range(w):\n    total_price += sum(price_per_person[j] * beds[j][i] for j in range(h))"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C E G A E C E G A\") == \"none\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\n\"\"\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nC D F D C D F F F C') == 'A# C D# F'\nassert solution('2\\nC D F D C D F F F C') == 'none'\nassert solution('1\\nC D F D C D F F F C') == 'A# C D# F'\n\n\"\"\"\nimport sys\nimport typing"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\n\nimport sys\nfrom typing import List\nfrom collections import Counter\nimport itertools\nimport math\nimport copy"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABCD') == 'A B C D'\nassert solution('CAB') == 'C B A'\nassert solution('ABC') == 'A B C'\nassert solution('ABCCBA') == 'A B C D E F'\n\nprint(solution('ABCD'))\nprint(solution('CAB'))\nprint(solution('ABC'))\nprint(solution('ABCCBA'))\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"10\\nC C# D D# E F F# G G# A A# B\") == \"none\"\nassert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"10\\nC C# D D# E F F# G G# A A# B\") == \"none\"\nassert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"C D F D C D F F F C \") == \"A# C D# F\"\n\"\"\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\n\"\"\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"A# C D# F\"\nassert solution(\"11\") == \"none\"\nassert solution(\"12\") == \"A# C D# F G# A#\"\nassert solution(\"13\") == \"A# C D# F G# A# B\"\nassert solution(\"14\") == \"A# C D# F G# A# B C\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"A# C D# F\"\nassert solution(\"1 3 5 7 9\") == \"C D F A\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('du nu sa dag') == 'haer talar vi rikssvenska'\nassert solution('kej k\u00f6rs \u00f6stg\u00f6tska') == 'haer talar vi rikssvenska'\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ja ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ja ju traeligt v\u00e5ra\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ja ju traeligt \u00e5r\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ja ju traeligt \u00e5ra\") == \"haer talar vi rikssvenska\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('gella knasv\u00e4rv') == 'gella knasv\u00e4rv'\nassert solution('bl\u00e4tt \u00e4r bl\u00e4tt') == 'bl\u00e4tt \u00e4r bl\u00e4tt'\nassert solution('bl\u00e4tt \u00e4r bl\u00e4tt') == 'bl\u00e4tt \u00e4r bl\u00e4tt'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('traeligt dae ae ju va') == 'haer talar vi rikssvenska'\nassert solution('traeligt dae ae ju') == 'haer talar vi rikssvenska'\nassert solution('traeligt') == 'haer talar vi rikssvenska'\nassert solution('traeligt va') == 'haer talar vi rikssvenska'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('m\u00e4starb\u00e4r \u00e4r m\u00e4staren i staden') =='m\u00e4starb\u00e4r \u00e4r m\u00e4staren i staden'\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"h\u00e6r talar vi rikssvenska\") == \"h\u00e6r talar vi rikssvenska\"\nassert solution(\"h\u00e6r va talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"h\u00e6r va och talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"h\u00e6r va och ju talar vi rikssvenska\") == \"h\u00e6r va talar vi rikssvenska\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ju traeligt va\") == \"dae ju traeligt va\"\n\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va ae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('dae ae ju traeligt va dae ae ju traeligt va') == 'dae ae ju traeligt va dae ae ju traeligt va'"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"barattar nu i stiga b\u00e5gge\") == \"haer talar vi rikssvenska\"\nassert solution(\"hae i ett jul\") == \"dae ae ju traeligt va\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju\") == \"haer talar vi rikssvenska\"\nassert solution(\"hej p\u00e5 deg\") == \"haer talar vi rikssvenska\"\nassert solution(\"matt, tyv\u00e4rr, m\u00f6stare.\") == \"haer talar vi rikssvenska\"\nassert solution(\"l\u00e4rba bl\u00e4nk\u00f6p t\u00e4nker bl\u00e4nk\u00f6p.\") == \"haer talar vi rikssvenska\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\\n\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\\n') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\n---"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nassert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"\n\nfrom itertools import product\nimport numpy as np"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nassert solution(\"5 6\\n#...#.#\\n###..#.\\n..#.#..\\n#...#..\\n#...#.#\") == \"#E.E...\\n###..#.E\\n#E.#.##.\\n#.##...E\\n#.#...#E\"\n\"\"\"\nimport unittest\nfrom collections import defaultdict, deque\nfrom dataclasses import dataclass\nfrom typing import Deque, Dict, Generator, List, Optional, Set, Tuple\n\n\n@dataclass(frozen=True)\nclass Point:\n    x: int\n    y: int\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __eq__(self, other: 'Point') -> bool:\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self) -> int:\n        return hash((self.x, self.y))\n\n    def __iter__(self) -> Generator[float, None, None]:\n        yield from (self.x, self.y)\n\n    def __repr__(self) -> str:\n        return f\"Point({self.x}, {self.y})\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\\n') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\\n') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\\n') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\\n') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\\n') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\nprint(solution(stdin))"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"12 8 2 4 10 3 25 14\"\n) == \"12 10 3 8 4 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n-----Explanation-----\nExample input 1:\nIf we consider the two first three lines of input (2 sets of six boxes) as the tower heights, and the next two lines as the heights of the two towers, we can reorder these two sets of boxes as follows:\n\nTop left box: 12 8 2\nBottom left box: 4 10 3\nTop right box: 25 14\nBottom right box: 25 14\nThis happens because 12 > 10 > 8, and 8 > 2 > 4.\n\nSo, the correct arrangement is 12 10 3 8 4 2.\n\nExample input 2:\nIf we consider the two first three lines of input (2 sets of six boxes) as the tower heights, and the next two lines as the heights of the two towers, we can reorder these two sets of boxes as follows:\n\nTop left box: 12 8 2\nBottom left box: 10 3 4\nTop right box: 25 14\nBottom right box: 14 25\nIn this example, the top left box of the first tower is heavier than the bottom left box of the second tower. The bottom right box of the second tower is heavier than the top right box of the first tower.\n\nSo, the correct arrangement is 12 10 3 8 4 2.\n\nSample input 2:\n\n8\n2\n4\n3\nSample Output 2:\n\n8\n4\n3"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nprint('Success')\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nheights: List[int] = []\n\nfor _ in range(8):\n    heights.append(int(stdin.readline()))\n\ntower1: Tuple[int, int, int] = sorted(heights[:6])\ntower2: Tuple[int, int, int] = sorted(heights[6:], reverse=True)\n\nprint(\" \".join([str(x) for x in tower1]))\nprint(\" \".join([str(x) for x in tower2]))\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n\nimport unittest\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"9 0 3\"), '4')\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"9 0 0\") == \"0\"\n\"\"\"\n\ne, f, c = map(int, input().split())\nresult = (e - c) + ((f - c) // c)\nprint(result)"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('1 0 2') == '3'\nassert solution('0 2 0') == '0'\nassert solution('0 0 0') == '0'\n\n\"\"\"\n\ne, f, c = [int(x) for x in input().split()]"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n\ne, f, c = map(int, input().split())\nprint(e + f//c)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"0 9 3\") == \"4\"\nassert solution(\"9 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"999 999 999\") == \"0\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\ne, f, c = [int(i) for i in stdin.split()]\nprint(e + f//c + (e+f)%c)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\ne, f, c = input().split(\" \")\nprint(e + f + c - 2)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9 0 3''') == '4'\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\nimport os\nimport sys\nimport re\nfrom math import gcd\n\npath = __file__.split('/')\npath = '/'.join(path[:-1])\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1010') == '12'\nprint(solution('1010'))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1010\") == \"12\"\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == '12'\nassert solution('11110') == '27'\nassert solution('11001100') == '196'\nassert solution('111111101') == '279'\nassert solution('1111111111') == '3875'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010') == '12'\nassert solution('110011') == '27'\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101010\") == \"12\"\nassert solution(\"11101101010\") == \"138\"\nassert solution(\"11101101010\") == \"138\"\nassert solution
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"101101101\") == \"221\"\nassert solution
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '12'\nassert solution('11101100') == '132'\nassert solution('11101101') == '133'\nassert solution('11101110') == '134'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\n\nassert solution('4 4\\n.o.\\n.o.\\n.o.\\n.o.') == '1'\n\nassert solution('2 2\\noo') == '0'\n\nassert solution('2 2\\noo\\noo') == '0'\n\nassert solution('2 2\\n.o\\noo') == '0'"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n\n\"\"\"\n\nrows, seats = [int(x) for x in stdin.split()]\norder = [x for x in stdin.split('\\n')[1:]]\n\npeople_count = 0\nfor row in range(rows):\n    for seat in range(seats):\n        if order[row][seat] == 'o':\n            people_count += 1\n            for i, j in [(-1, 0), (1, 0), (0, 1), (0, -1), (-1, 1), (-1, -1), (1, 1), (1, -1)]:\n                if 0 <= row+i < rows and 0 <= seat+j < seats:\n                    if order[row+i][seat+j] == 'o':\n                        people_count += 1\nprint(people_count)"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n\nfrom collections import Counter\n\nr, s = map(int, stdin.readline().split())\nmatrix = [list(stdin.readline().strip()) for _ in range(r)]\ncounter = Counter()\n\nfor row in matrix:\n    counter += Counter(row)\n\ncounter = Counter(counter)\n\ncounter.pop('o', None)\ncounter = list(counter.items())\ncounter.sort(key=lambda x: x[1])\n\nprint(counter[0][1] if counter else 0)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\nprint(solution(\"2 3\\n..o\\no..\"))\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n'''\n\nfrom collections import deque"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".o.\") == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n.o\\no.\") == \"2\"\nassert solution(\"2 3\\no.\\no.\") == \"0\"\nassert solution(\"2 3\\n..\\noo.\") == \"1\"\nassert solution(\"2 3\\no.\\no.\\noo.\") == \"2\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n..o\no..\n'''.strip()) == '2'\n\nprint(solution(input().strip()))\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\noo\") == \"1\"\nassert solution(\"3 2\\no.o\\no.o\\no.\") == \"2\"\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\"\"\"\n\nfrom collections import defaultdict\n\nN, L = map(int, input().split())\n\ndrawers = defaultdict(list)\n\nfor i in range(N):\n    A, B = map(int, input().split())\n    drawers[A].append(i)\n    drawers[B].append(i)\n\nfor i in range(1, N+1):\n    if len(drawers[i]) == 0:\n        print(\"LADICA\")\n    elif len(drawers[i]) == 1:\n        print(\"SMECE\")\n    else:\n        print(\"LADICA\")"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'SMECE\\nSMECE\\nSMECE\\nLADICA\\nLADICA\\nLADICA'\nassert solution('2 3\\n1 2\\n1 3') == 'LADICA\\nSMECE'\n'''"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r\"C:\\Users\\piazz\\Desktop\\Zajecia\\ITP\\IODAA 2020-2021\\Kolokwium\\Solutions\\a\\test_input.txt\")) == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\n'\nprint(\"Test 1 passed\")\n\nassert solution(open(r\"C:\\Users\\piazz\\Desktop\\Zajecia\\ITP\\IODAA 2020-2021\\Kolokwium\\Solutions\\a\\test_input2.txt\")) == 'LADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE\\nSMECE\\nLADICA\\n'\nprint(\"Test 2 passed\")"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"1 2\\n1 3\") == \"LADICA\"\nassert solution(\"1 1\") == \"SMECE\"\nassert solution(\"3 3\\n1 1\\n2 2\\n3 3\") == \"LADICA\\nSMECE\\nSMECE\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3\n1 2\n1 3\n1 2\n1 3\n1 2''') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution('''5 1\n1 2\n1 3\n1 2\n1 3\n1 2''') == 'SMECE\\nSMECE\\nSMECE\\nSMECE\\nSMECE'\nassert solution('''10 6\n1 2\n1 3\n1 4\n1 5\n2 6\n3 6\n4 6\n5 6\n6 6\n7 6\n8 6\n9 6\n10 6''') == 'SMECE\\nSMECE\\nSMECE\\nSMECE\\nSMECE\\nSMECE'\nassert solution('''10 3\n1 2\n1 3\n1 2\n1 3\n1 2\n2 3\n1 2\n1 3\n1 2\n1 3\n1 2''') == 'LADICA\\nLADICA\\nSMECE\\nLADICA\\nLADICA'\nassert solution('''7 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 7\n3 7\n4 7''') == 'LADICA\\nLADICA\\nSMECE\\nLADICA'\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == '''\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n'''\n\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == '''\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n'''\n\nassert solution('''\n5 3\n3 2\n3 2\n3 2\n3 2\n3 2\n''') == '''\nLADICA\nLADICA\nSMECE\nSMECE\nSMECE\n'''\n\nassert solution('''\n5 3\n2 2\n3 2\n2 2\n3 2\n2 2\n''') == '''\nLADICA\nLADICA\nSMECE\nSMECE\nSMECE\n'''\n\nassert solution('''\n5 3\n3 2\n3 2\n2 2\n3 2\n2 2\n''') == '''\nLADICA\nLADICA\nSMECE\nSMECE\nSMECE\n'''"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0') == '1 2'\n\n-------------------------\nSample Input:\n2\n1\n0\nSample Output:\n1 2\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\nassert solution(\"3\\n0 0 0\") == \"1 2 3\"\nassert solution(\"5\\n0 0 0 2 2\") == \"1 3 2 4 5\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0\") == '1 2'\nassert solution(\"3\\n2 1 1\") == '2 1 3'\nassert solution(\"1\\n0\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n0 2 3 1 1') == '2 1 3 0 1'\nassert solution('10\\n0 1 1 0 1 1 0 1 1 1 1') == '0 1 3 5 7 9 1 2 6 8 10'\nassert solution('9\\n0 4 1 2 3 1 3 5 4 1') == '1 3 5 0 4 2 7 9 6 3 1'\nassert solution('8\\n0 4 1 2 3 1 3 5 4 1') == '1 3 5 0 4 2 7 9 6 3 1'\nassert solution('7\\n0 4 1 2 3 1 3 5 4 1') == '1 3 5 0 4 2 7 9 6 3 1'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1') == '1 2'\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 0 2\") == \"3 2 1\"\nassert solution(\"4\\n3 0 1 2\") == \"4 2 3 1\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input().strip())\narray = list(map(int, input().strip().split()))\n\nresult = [0] * n\nresult[0] = 1\n\nfor i in range(1, n):\n    for j in range(0, i):\n        if array[j] < array[i]:\n            result[i] = max(result[i], result[j] + 1)\n\nprint(' '.join([str(x) for x in result]))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3 2 3 4') == '1 2 3 4 5'\nassert solution('4\\n3 3 3 3') == '3 3 3 3'\nassert solution('3\\n2 2 1') == '1 2 3'\nassert solution('2\\n1 1') == '1 2'\n\n'''\nimport math"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0') == '1 2'\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(input()).strip(\"[]\").split(\", \")\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(st.get_string()) == '3'\n'''\n\nn, h, l = [int(i) for i in stdin.readline().split(' ')]\nhorror = [int(i) for i in stdin.readline().split(' ')]\npairs = []\nfor i in range(l):\n    pairs.append([int(i) for i in stdin.readline().split(' ')])"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\nassert solution('4 2 1\\n1 2\\n2 3\\n3 4') == '0'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n0 1\\n0 1') == '1'\nassert solution('1 1\\n0 1') == '0'\nassert solution('4 2\\n2 3\\n0 2') == '2'\nassert solution('3 1\\n1 2\\n0 1') == '0'\nassert solution('3 3\\n0 1\\n1 2') == '0'\n\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '3'\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '0'\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '2'\n\nimport unittest\nfrom io import StringIO\nfrom unittest.mock import patch\n\nclass TestSolve(unittest.TestCase):\n\n    def test_solve_1(self):\n        with patch('builtins.input', side_effect=[\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\"]):\n            with patch('sys.stdout', new = StringIO()) as fake_out:\n                solution()\n                self."
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 5\\n0 1\\n1 2\\n4 5\\n3 5\") == \"1\"\nassert solution(\"2 2 4\\n0 0\\n1 2\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\") == \"1\"\nprint(solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\"))\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '1'"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 4\\n0 3\\n1 3\\n1 4\") == \"0\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n3\") == \"3\"\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"2\\n5 10\") == \"impossible\"\nassert solution(\"2\\n5 2\") == \"impossible\"\nassert solution(\"1\\n2\") == \"2 1\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('5\\n2 3 5 7 1') == 'impossible'\nassert solution('4\\n1 3 4 2') == 'impossible'\nassert solution('6\\n1 4 3 2 5 6') == 'impossible'\nassert solution('7\\n3 7 6 2 5 4 1') == '7 6 3 1 2 4'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    \"3\\n1 3 4\") == \"4 3 1\"\n\nassert solution(    \"5\\n5 8 -10 20 1\") == \"20 8 5 1\"\n\nassert solution(    \"10\\n-10 -20 10 20 -30 0 40 10 -40\") == \"20 0 40 10 10 -10 -20 10 20 -30 40\"\n\nassert solution(    \"3\\n1 3 4\") == \"4 3 1\"\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\"\"\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('4\\n1 3 4') == 'impossible'\nassert solution('5\\n1 5 3 2') == '5 1 3 2'\nassert solution('4\\n2 1 4') == 'impossible'\n\nSample Input:\n3\n4 6 5\nSample Output:\nimpossible\n\nSample Input:\n4\n4 -2 -1\nSample Output:\n4 -1 -2\n\nSample Input:\n3\n4 2 2\nSample Output:\nimpossible\n\nSample Input:\n5\n3 3 2 2 1\nSample Output:\n3 3 1 2 2\n\nSample Input:\n3\n1 3 2\nSample Output:\nimpossible\n\nSample Input:\n5\n1 5 2 1\nSample Output:\nimpossible\n\nSample Input:\n5\n3 5 5 4 3\nSample Output:\n3 5 4 3 5\n\nSample Input:\n5\n1 2 3 4 5\nSample Output:\nimpossible\n'''\n\nimport sys\nfrom typing import List, Dict, Set"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn = int(stdin.readline())\nt = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n4 1 3') == 'impossible'\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 3 4''') == '4 3 1'\nassert solution('''5\n1 3 4 7 2''') == 'impossible'\n\"\"\"\n\nimport sys\nimport math\n\nclass Solution:\n    # @param A : list of integers\n    # @return a list of integers\n    def solve(self, A):\n        if len(A) <= 1:\n            return A\n        A.sort()\n        dif = []\n        for i in range(1, len(A)):\n            dif.append(A[i] - A[i - 1])\n        print(dif)\n        left = 0\n        right = len(dif) - 1\n        if A[0] >= 0:\n            return 'impossible'\n        while left < right:\n            if dif[left] > 0:\n                if dif[right] < 0:\n                    right -= 1\n                    continue\n                return 'impossible'\n            left += 1\n            right -= 1\n        return A\n    \n    if __name__ == \"__main__\":\n        print(solution(sys.stdin.readlines()))"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 3 4\n''') == '4 3 1'\nassert solution('''\n2\n1 5\n''') == 'impossible'\n\n'''\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 20 15') == '18.400'\n\"\"\""
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\n\"\"\"\n\nn, p, k = [int(i) for i in stdin.split()]\nt = [int(i) for i in stdin.split()][1:]\n\nlst = []\n\nfor i in range(n):\n    if i == 0:\n        lst.append(t[i])\n    else:\n        lst.append(t[i] * ((100 + p) ** i))\n\nt = sum(lst) / k\n\nprint(\"{:.6f}\".format(t))\n\n\"\"\"\nn, p, k = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()][1:]\n\nlst = []\n\nfor i in range(n):\n    if i == 0:\n        lst.append(t[i])\n    else:\n        lst.append(t[i] * ((100 + p) ** i))\n\nt = sum(lst) / k\n\nprint(\"{:.6f}\".format(t))\n\"\"\""
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\""
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(float(input()))\nprint(solution(str(input())))\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 20 15\") == \"18.400\"\n\"\"\"\nimport math"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nn, p, k = map(int, stdin.readline().split())\nt = list(map(int, stdin.readline().split()))\n\nt = [k - i for i in t]\n\nmax_t = max(t)\n\ntmp = (max_t // n) * p\n\nfor i in range(len(t)):\n    t[i] = t[i] - tmp\n\nfor i in t:\n    if i > 0:\n        print(i, end=' ')"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"\n\nimport sys\nimport math\n\nN, P, K = [int(i) for i in sys.stdin.readline().split()]\nT = [int(i) for i in sys.stdin.readline().split()]\n\nT.append(K)\n\nT.sort()\n\nans = T[-1] - T[0]\nfor i in range(N-1):\n    ans = min(ans, math.ceil((T[i+1] - T[i]) / P))\n\nprint(ans)\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\nassert solution('1 1 1\\n1') == '1.000'\nassert solution('5 10 3\\n1 2 3 4 5') == '6.800'\nassert solution('2 20 15\\n3 10\\n5 10') == '18.400'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == 5\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....\\n') == '5'\nassert solution('6\\n...H...\\n....H....\\n....H....\\n.H....S.\\n...H...S\\n...H...S\\n') == '8'\nassert solution('7\\n.H.H.\\n..H.H.\\n...S..\\n...S..\\n...S..\\n') == '6'\n\n-----Notes-----\nIn the first sample case, there is a single safe house at the bottom-right of the grid, so the correct answer is 5.\nIn the second sample case, the safe house is in the bottom-left-most column, so the correct answer is 8.\nIn the third sample case, there is only one safe house, so the correct answer is 6.\nIn the fourth sample case, there are two safe houses.\n\"\"\"\n\n\n\"\"\"\nYour input\n5\n....H\n.....\nS....\n....H\n.....\n\nYour output\n5\n\nExpected output\n5\n\nInput\n6\n...H...\n....H....\n....H....\n.H....S.\n...H...S\n...H...S\n\nOutput\n8\n\nInput\n7\n.H.H.\n..H.H.\n...S..\n...S..\n...S..\n\nOutput\n6\n\nInput\n8\n.H...S.\n..H...S\n...H...\n...H...\n...H...\n...H...\n...H...\n\nOutput\n8\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5\n....H\n.....\nS....\n....H\n.....\n\"\"\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('....H') == 5\nassert solution('.....') == 5\nassert solution('S....') == 5\nassert solution('....H') == 5\n\nprint(solution(stdin))"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nS....\\n....H\\n....H\\n.....\") == \"5\"\nassert solution(\"5\\n....H\\n....H\\n....H\\n.....\") == \"4\"\nassert solution(\"5\\nS...H\\n....H\\n....H\\n.....\") == \"3\"\nassert solution(\"5\\nS....\\n....S\\n....H\\n.....\") == \"4\"\nassert solution(\"5\\n....H\\n....H\\n....H\\n.....\") == \"4\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\n-----Test Input-----\n4\nS.S\n....\n..H\nS.S\n\n-----Test Output-----\n8\n\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == 5\n\"\"\"\n\nimport sys\nimport os\nfrom collections import defaultdict, deque\nfrom copy import deepcopy\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\n-----Constraints-----\n$2 \\leq N \\leq 100$\nThe input grid is at most $500\\times500$ cells in size.\nEach cell in the grid contains only the characters \u2018S\u2019, \u2018H\u2019, and \u2018.\u2019.\nAll input characters are valid.\n\n------Notes------\nIt is possible to write this solution in one line using map() and zip().\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('5\\nH.....\\n.S....\\n......\\n.H.H..\\n..S..S') == '5'\nassert solution('5\\n.S.H..\\n..S..S\\n..H.H.\\n...H...') == '8'\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n.S.S.S.S\\n....H\\n.....\\n....H\\n.....\\n\") == \"5\"\nassert solution(\"3\\n.H.S\\n....H\\n....H\\n\") == \"3\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('4 3 4\\n3 4\\n3 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('1\\n3\\n3') == '0'\n\nimport math"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == '0'\n\"\"\"\n\nN, S, R = [int(x) for x in stdin.readline().split()]\nA = [int(x) for x in stdin.readline().split()]\nB = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\n\nassert solution('''5 3 3\n1 2 5\n3 4''') == '1'\n\nassert solution('''6 2 1\n4 5\n4 6''') == '3'\n\nassert solution('''8 3 4\n2 5 3\n6 7 8\n1 2 6''') == '5'\n\nassert solution('''5 2 3\n2 4\n2 3''') == '1'"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 3\\n1 3 5\\n0\") == 0\n\"\"\"\n\nfrom collections import defaultdict\n\nn, s, r = map(int, stdin.readline().split())\ndamaged = set(map(int, stdin.readline().split()))\nreserve = set(map(int, stdin.readline().split()))\n\nanswer = 0\ndamaged.difference_update(reserve)\n\nfor i in range(1, n + 1):\n    if i in damaged:\n        answer += 1\n    if i - 1 in damaged:\n        answer += 1\n    if i + 1 in damaged:\n        answer += 1\nprint(answer)\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\nassert solution('''6 3 1\n6 1\n1 2 3 4 5 6''') == '4'\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == '0'\n\"\"\"\n\nN, S, R = map(int, stdin.split(\"\\n\")[0].split())\ncnt = 0\nfor i in range(1, N + 1):\n    if i not in (S + R):\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == 0\n\n'''\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\"\n\nfrom itertools import permutations, combinations\nfrom collections import Counter\n\n_, _, _, S, R = map(int, input().split())\nS_lst = list(map(int, input().split()))\nR_lst = list(map(int, input().split()))\n\nS_counter = Counter(S_lst)\nR_counter = Counter(R_lst)\nS_R_lst = S_counter - R_counter\nS_lst = list(S_R_lst.elements())\n\ncnt = 0\nfor a in S_lst:\n    for b in S_lst:\n        if a <= b:\n            continue\n        for c in S_lst:\n            if b <= c:\n                continue\n            for d in S_lst:\n                if c <= d:\n                    continue\n                if d + a + b == S:\n                    cnt += 1\n                    #print(a, b, c, d)\nprint(cnt)"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == '0'\n\nSample Input:\n5 2 3\n1 3\n5 4\nSample Output:\n1\n\nSample Input:\n7 9 7\n1 2 3 5 6 7 8 9\n1 2 3 4 6 7 8 9\nSample Output:\n2\n\"\"\"\n\nimport sys\n\nn, m, r = list(map(int, sys.stdin.readline().strip().split()))\nd = list(map(int, sys.stdin.readline().strip().split()))\nr = list(map(int, sys.stdin.readline().strip().split()))\n\nans = 0\nfor i in range(n):\n    for j in range(i, n):\n        if i in r:\n            j += 1\n        if j in d:\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nprint(solution('1 1'))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\"\n\nR, C = map(int, stdin.split())"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('3 7\\n') == '0.142857143'\nassert solution('3 2\\n') == '0.5'\nassert solution('4 10\\n') == '0.6'\nassert solution('0 1\\n') == '0.0'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 0') == '0.00000'\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1) == \"0.000000\"\nassert solution(1, 2) == \"0.500000\"\nassert solution(2, 2) == \"0.750000\"\nassert solution(3, 3) == \"0.875000\"\nassert solution(1, 100) == \"0.000000\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\"\n\nimport sys\n\nR, C = [int(s) for s in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('0 1\\n') == '0.0'\nassert solution('10 5\\n') == '0.6'\nassert solution('15 5\\n') == '0.8'\nassert solution('20 10\\n') == '0.5'\n\"\"\"\n\nR, C = map(int, input().split(' '))"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.0'\nassert solution('5 10') == '0.5'\nassert solution('10 10') == '1.0'\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\nassert solution(\"2 3\") == \"0.28125\"\nassert solution(\"100 100\") == \"0.960464\"\nassert solution(\"6 8\") == \"0.5\"\nassert solution(\"1 2\") == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == '0.000000000'\nassert solution(\"2 10\") == '0.500000'\nassert solution(\"100 10\") == '0.500000'\nassert solution(\"1000 10\") == '0.500000'\nassert solution(\"10000 10\") == '0.500000'\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('100 101 102 103 488') == '2'\nassert solution('100 200 300 101 102') == '0'\nassert solution('103 102 101 488 100') == '2'\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\n------Solution------\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\"\"\"\n\n\"\"\"\nThe frosh who chose the most popular combination of courses will win the prize, with ties broken in favor of the combination with the highest popularity.\n\nIn the example below, the frosh who chose a combination of two courses with the highest popularity, while not winning the prize, does not tie for the prize with the third choice of two courses with the second highest popularity.\n\n-----Input-----\nThe input begins with an integer $1 \\leq n \\leq 10000$, the number of frosh. For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh. Each course number is an integer between $100$ and $499$.\n\n-----Output-----\nThe popularity of a combination is the number of frosh selecting exactly the same combination of courses. A combination of courses is considered most popular if no other combination has higher popularity. Output a single line giving the total number of students taking some combination of courses that is most popular.\n\n-----Examples-----\nSample Input:\n3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n100 477 488 819\") == \"2\"\nassert solution(\"3\\n100 488 488 488\") == \"1\"\nassert solution(\"2\\n100 488\") == \"0\"\nassert solution(\"1\\n100\") == \"0\"\nprint(\"Passed all tests\")\n\n------------\n\nSolution\n------------"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '1\\n'\nassert solution('3\\n1 2 3 4\\n') == '0\\n'\nassert solution('2\\n1 2 1 2\\n') == '0\\n'\nassert solution('1\\n1\\n') == '0\\n'\nassert solution('2\\n4 4 4 4 4\\n') == '1\\n'\n\n--------------------------------------------------\nimport itertools, functools"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n100 101 102 103\n200 300 101 102\n3\n100 101 102 103\n''') == '2'\nprint('Test passed')\n\n-----Problem-----\nThe frosh at Waterloo have diverse interests, as evidenced by their desire to take various combinations of courses from among those available.\n\nUniversity administrators are uncomfortable with this situation, and therefore wish to offer a conformity prize to frosh who choose one of the most popular combinations of courses. How many frosh will win the prize?\n\n-----Input-----\nThe input begins with an integer $1 \\leq n \\leq 10000$, the number of frosh. For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh. Each course number is an integer between $100$ and $499$.\n\n-----Output-----\nThe popularity of a combination is the number of frosh selecting exactly the same combination of courses. A combination of courses is considered most popular if no other combination has higher popularity. Output a single line giving the total number of students taking some combination of courses that is most popular.\n\n-----Examples-----\nSample Input:\n3\n100 101 102 103\n100 200 300 101 102\n103 102 101 488 100\nSample Output:\n2\n'''"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 101 102 103 488\") == 2\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n100 101 102 103\\n101 102 103 104\\n100 101 104') == '2'\nassert solution('1\\n100 101 102 103\\n101 102 103 104\\n100 101 104') == '0'\nassert solution('2\\n100 101 102 103\\n101 102 103 104\\n100 101 104') == '4'\nassert solution('3\\n100 101 102 103\\n101 102 103 104\\n100 101 104') == '4'\nassert solution('3\\n100 101 102 103\\n101 102 103 104\\n100 101 104') == '4'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1730''') == '''1729'''"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"0\") == None\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1730') == '1729'\nassert solution('40000') == '40000'\nassert solution('13') == '10'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1730') == '1729'\nassert solution('400000') == None\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1730\") == \"1729\"\nassert solution(\"1729\") == \"1729\"\nassert solution(\"1729\") == \"1729\"\nassert solution(\"1729\") == \"1729\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"400000\") == \"none\"\nassert solution(\"11\") == \"none\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1730') == '1729'\nassert solution('700') == '717'\nassert solution('100') == 'none'"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(1730)) == '1729'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1730') == '1729'\nassert solution('4') == '3'\nassert solution('1') == 'none'\nassert solution('5') == '4'\n\nimport io, pytest, sys"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"65536\") == \"16\"\n\"\"\"\n\nx = input()\n\nprint(int(len(x) / 2))\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"65536\") == 16\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('65536') == '16'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('65536') == 16\n\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(123) == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('65536') == 16\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65536') == 16\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline())"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('65536') == '16'\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"2\\n.K\\n...\\n.K\") == \"0\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"4\\n....\\n....\\n....\\n....\") == \"-\"\n\n\"\"\"\nfrom queue import Queue\n\nclass Node:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.visited = False\n        self.distance = 0\n        self.neighbours = set()"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''....\n....\n....\n...K''') == 2\nassert solution('''...#..\n....#.#\n.#....\n.#.#..\n.#...K''') == 3\nassert solution('''#....\n....#.#\n.#....\n.#.#..\n.#...K''') == -1\nassert solution('''##...#\n....#..\n......\n##....\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == 2\n\nassert solution('5\\n...#\\n.##\\n#.K\\n..#') == 1\n\nassert solution('2\\n..#\\nK') == -1\n\nassert solution('3\\n#K\\n#.\\nK') == -1\n\nassert solution('3\\n#.\\n#K\\nK') == -1"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n------Solution------\n\nAn O(n) time and O(n) space solution can be found by using the concept of Breadth-first search.\n\nWe will use a queue to keep track of the possible moves of the Knight. Each element in the queue will be of the form ((r, c), number_of_moves) where r and c are the current position of the Knight and number_of_moves is the number of moves that the knight has made so far.\n\nWe will keep incrementing the number of moves for each element of the queue. If the current position of the Knight is the target position, we will return the number of moves. If the current position is not the target position, we will remove the current element from the queue and add the next element to the queue. We will keep doing this until we get to the target position or the queue becomes empty.\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == 2\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....\\n....\\n....\\nK...\") == 2\nassert solution(\"....\\n....\\n....\") == -1\nassert solution(\"....\\n....\\n....\\n....\") == -1\n\n\"\"\"\n\nclass Chessboard:\n    def __init__(self, n):\n        self.n = n\n        self.blocked = set()\n        self.invalid = set()\n\n    def blocked_by(self, x, y):\n        self.blocked.add((x, y))\n\n    def blocked_invalid(self, x, y):\n        self.invalid.add((x, y))\n\n    def __repr__(self):\n        return f'{self.n}x{self.n}'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('K') == '1'\nassert solution('KK') == '0'\nassert solution('...K') == '2'\nassert solution('K..') == '3'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....\") == \"2\"\nassert solution(\"....K\") == \"1\"\nassert solution(\"....#\") == \"-1\"\nassert solution(\"#..#.#\") == \"-1\"\n\nprint(solution(\"4\n....\n....\n....\n...K\"))\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\n\"\"\"\n\n\nimport itertools"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"too late\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"\n\nimport os\nimport io\nimport unittest\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'too late'\nassert solution('12 3\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('12 3\\n3\\n2\\n99\\n1') == 'too late'\nassert solution('12 3\\n3\\n2\\n99\\n1\\n') == 'too late'\n\nSample Input:\n100 5\n3\n2\n1\n99\n1\nSample Output:\n3\n\nSample Input:\n101 5\n3\n2\n1\n99\n1\nSample Output:\ntoo late\n\nSample Input:\n100 5\n3\n2\n1\n99\n1\nSample Output:\n23\n\nSample Input:\n100 5\n2\n2\n1\n99\n1\nSample Output:\ntoo late"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\n\nassert solution('''100 5\n42\n3\n2\n99\n1''') == 'too late'\n\nassert solution('''100 3\n42\n3\n2\n99\n1''') == 'too late'\n\nassert solution('''100 3\n42\n3\n2\n42\n1''') == 'too late'\n\nassert solution('''100 2\n42\n3\n2\n42\n1''') == '42'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\n\"\"\"\n\nimport sys\n\nr = int(sys.stdin.readline().strip())\nn = int(sys.stdin.readline().strip())\n\nbookings = set()\n\nfor i in range(n):\n    bookings.add(int(sys.stdin.readline().strip()))\n\nfor i in range(1, r + 1):\n    if i not in bookings:\n        print(i)\n        break\nelse:\n    print(\"too late\")\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nassert solution(\"1 1\\n2\\n1\\n\") == \"too late\"\nassert solution(\"2 4\\n1\\n2\\n\") == \"1\"\nassert solution(\"2 10\\n1\\n1\\n\") == \"too late\"\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\nimport unittest\nimport sys\n\nclass Test(unittest.TestCase):\n\n    def test_1(self):\n        self."
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BGLDYHBQEUSMOSDKEZNLIDLXVJM\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"YEGLXUSQVQHZHWLHXIRSXU\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n5)\n\nCreate a class called Circle with two data members named radius and pi.\n\nAdd a constructor to Circle which takes radius and pi as parameters and assigns them to the data members radius and pi.\n\nDefine the following member functions\n1)    __init__()\n2)    get_area()\n3)    get_circumference()\n\n4)    set_radius(new_radius)\n5)    get_area()\n6)    get_circumference()\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n6)\n\nCreate a class called Account that has a constructor and two member variables: account_number and balance.\n\nAdd the following methods:\n1)    __init__(account_number, balance)\n2)    deposit(amount)\n3)    withdraw(amount)\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n7)\n\nWrite a function which takes two objects as arguments and returns True if they are equal, False if they are not. \n\nThe two objects may be integers, floats, or strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes one object as an argument and returns a boolean value True if the object is a number, False if it is a string.\n\n-----------------------------------------------------------\n\nWrite a function which takes two strings as arguments and returns the string that results from concatenating them together.\n\n-----------------------------------------------------------\n\nWrite a function which takes a string as a parameter and returns the string with all vowels removed.\n\n-----------------------------------------------------------\n\nWrite a function which takes a string as a parameter and returns a dictionary with character counts for each letter in the string.\n\n-----------------------------------------------------------\n\nWrite a function which takes a dictionary as a parameter and returns the key with the largest value.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with the longest string in the list.\n\n-----------------------------------------------------------\n\nWrite a function which takes an integer as a parameter and returns the integer with its digits reversed.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of integers as a parameter and returns the list with each integer turned into a string and then concatenated together with a space between each number.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed while maintaining the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed while maintaining the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of the strings.\n\n-----------------------------------------------------------\n\nWrite a function which takes a list of strings as a parameter and returns the list with each element reversed without affecting the order of"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"KHTRHACXBWJYQKXNBZKQKJGXHUTV\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''playfair example\nhide the gold in the tree stump''') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('''a b c d e f g h i j k l m n o p q r s t u v w x y z\nz a b c d e f g h i j k l m n o p q r s t u v w x y
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"DHKLQGZVSDBMMQGGZJUNQHFPGJRQQZ\"\nassert solution(\"x r g g\") == \"QPMF\"\n\n\"\"\"\n\nfrom string import ascii_lowercase as a_l"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'MDNBPJXKLWDYGUOUVIFRQALJ'\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"HJXEMBYEKLQAEEKLTYQXWKPMNYZ\"\n\"\"\"\n\nimport unittest\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n\nfrom typing import List\nfrom itertools import combinations\n\n\nclass PlayfairCipher:\n    key: List[str]\n    text: str\n\n    def __init__(self, key: str, text: str):\n        self.key = list(key)\n        self.text = list(text)\n\n    def encrypt(self) -> str:\n        return \"\".join(self.translate(self.text))\n\n    def decrypt(self, text: str) -> str:\n        return \"\".join(self.translate(list(text)))\n\n    def translate(self, l: List[str]) -> List[str]:\n        translated_text = []\n\n        if len(l) % 2!= 0:\n            l.append(\"x\")\n\n        for i in range(0, len(l), 2):\n            l1, l2 = l[i], l[i+1]\n\n            if l1 == l2:\n                translated_text.append(\"X\")\n            else:\n                if l1.lower() == \"q\":\n                    l1 = \"i\"\n                if l2.lower() == \"q\":\n                    l2 = \"i\"\n\n                if l1.lower() == \"j\":\n                    l1 = \"i\"\n                if l2.lower() == \"j\":\n                    l2 = \"i\"\n\n                if l1 == l2:\n                    translated_text.append(l1.lower())\n                else:\n                    if l1.lower() in self.key:\n                        index1 = self.key.index(l1.lower())\n                    if l2.lower() in self.key:\n                        index2 = self.key.index(l2.lower())\n\n                    if index1 == index2:\n                        translated_text.append(\n                            self.key[(index1 + 2) % len(self.key)]\n                        )\n                        translated_text.append(\n                            self.key[(index2 + 2) % len(self.key)]\n                        )\n                    else:\n                        translated_text.append(\n                            self.key[(index1 + 1) % len(self.key)]\n                        )\n                        translated_text.append(\n                            self.key[(index2 + 1) % len(self.key)]\n                        )\n\n        return translated_text\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'ABC'\nassert solution('a bc') == 'ABK'\nassert solution('a b c') == 'ABC'\nassert solution('a b c d') == 'ABCD'\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('playfair example') == 'BXDKYBEJVDMUIXMNUVIF'\nassert solution('hide the gold in the tree stump') == 'DXFUAMNKZNWCMOLLWXUELY'\n\"\"\"\nimport re"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.000 2.010 2.010\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.000, 1.500).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.010 1.010\") == \"The gopher cannot escape.\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (-0.010, -0.010).\"\n\n------Solution------\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\") == \"The gopher cannot escape.\"\n\nassert solution(\"1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0 1.0 2.0 2.0\\n1.5 1.5') == 'The gopher cannot escape.'\nassert solution('1.0 1.0 2.0 2.0\\n1.0 1.0\\n1.5 1.5') == 'The gopher can escape through the hole at (1, 1).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.5 1.5') == 'The gopher can escape through the hole at (1, 1).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n0.0 0.0\\n0.0 0.0') == 'The gopher can escape through the hole at (-10000, -10000).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n-1.5 -1.5\\n-1.5 -1.5') == 'The gopher can escape through the hole at (-1, -1).'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.800 1.800\\n1.200 1.200\\n1.300 1.300\\n1.300 1.300\\n1.400 1.400\\n1.500 1.500\\n1.600 1.600\\n1.500 1.500\\n1.200 1.200\\n1.300 1.300\\n1.400 1.400\\n1.500 1.500\\n1.600 1.600\\n1.600 1.600\\n1.300 1.300\\n1.300 1.300\\n1.400 1.400\\n1.500 1.500\\n1.500 1.500\\n1.500 1.500\\n1.200 1.200\\n1.600 1.600\\n1.800 1.800\\n1.200 1.200\\n1.500 1.500\\n1.600 1.600\\n1.700 1.700\\n1.200 1.200\\n1.300 1.300\\n1.300 1.300\\n1.500 1.500\\n1.600 1.600\\n1.700 1.700\\n1.400 1.400\\n1.200 1.200\\n1.300 1.300\\n1.700 1.700\\n1.400 1.400\\n1.500 1.500\\n1.700 1.700\\n1.400 1.400\\n1.500 1.500\\n1.700 1.700\\n1.200 1.200\\n1.400 1.400\\n1.700 1.700\\n1.300 1.300\\n1.700 1.700\\n1.500 1.500\\n1.600 1.600\\n1.700 1.700\\n1.500 1.500\\n1.500 1.500\\n1.300 1.300\\n1.200 1.200\\n1.200 1.200\\n1.300 1.300\\n1.400 1.400\\n1.300 1.300\\n1.400 1.400\\n1.200 1.200\\n1.400 1.400\\n1.300 1.300\\n1.300 1.300\\n1.400 1.400\\n1.300 1.300\\n1.200 1.200\\n1.400 1.400\\n1.700 1.700\\n1.600 1.600\\n1.700 1.700\\n1.400 1.400\\n1.700 1.700\\n1.600 1.600\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.300 1.300\\n1.600 1.600\\n1.400 1.400\\n1.400 1.400\\n1.300 1.300\\n1.300 1.300\\n1.400 1.400\\n1.700 1.700\\n1.400 1.400\\n1.400 1.400\\n1.700 1.700\\n1.300 1.300\\n1.500 1.500\\n1.700 1.700\\n1.200 1.200\\n1.300 1.300\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.300 1.300\\n1.300 1.300\\n1.300 1.300\\n1.200 1.200\\n1.500 1.500\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.300 1.300\\n1.700 1.700\\n1.700 1.700\\n1.300 1.300\\n1.200 1.200\\n1.400 1.400\\n1.700 1.700\\n1.300 1.300\\n1.500 1.500\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.300 1.300\\n1.300 1.300\\n1.300 1.300\\n1.200 1.200\\n1.300 1.300\\n1.300 1.300\\n1.200 1.200\\n1.200 1.200\\n1.400 1.400\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.400 1.400\\n1.400 1.400\\n1.200 1.200\\n1.300 1.300\\n1.300 1.300\\n1.400 1.400\\n1.400 1.400\\n1.500 1.500\\n1.300 1.300\\n1.700 1.700\\n1.400 1.400\\n1.300 1.300\\n1.400 1.400\\n1.300 1.300\\n1.700 1.700\\n1.200 1.200\\n1.200 1.200\\n1.300 1.300\\n1.700 1.700\\n1.300 1.300\\n1.400 1.400\\n1.700 1.700\\n1.700 1.700\\n1.400 1.400\\n1.500 1.500\\n1.200 1.200\\n1.300 1.300\\n1.500 1.500\\n1.300 1.300\\n1.300 1.300\\n1.400 1.400\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.700 1.700\\n1.300 1.300\\n1.400 1.400\\n1.700 1.700\\n1.400 1.400\\n1.300 1.300\\n1.700 1.700\\n1.300 1.300\\n1.400 1.400\\n1.400 1.400\\n1.700 1.700\\n1.200 1.200\\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '1.000 1.000 2.000 2.000'\n) == 'The gopher cannot escape.'\n\nassert solution(\n    '1.000 1.000 2.000 2.000'\n) == 'The gopher can escape through the hole at (0.000, 1.000).'\n\nassert solution(\n    '1.000 1.000 2.000 2.000'\n) == 'The gopher can escape through the hole at (0.000, 1.000).'\n\nassert solution(\n    '1.500 1.500'\n) == 'The gopher can escape through the hole at (0.500, 1.500).'\n\nassert solution(\n    '1.500 1.500'\n) == 'The gopher can escape through the hole at (0.500, 1.500).'"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'The gopher cannot escape.'\n\n-----Notes-----\n\n1. Here are some things to keep in mind when writing your own solution.\n    - There are no fancy mathematical or geometry functions. You will need to find your own way to solve this problem.\n    - The input given to you may not be the best way to solve the problem.\n\n2. A somewhat thorough solution (that may not be easy to write) is a solution that attempts to find all of the possible solutions to the problem.\n\n3. You may want to test your solution on a series of inputs.\n\n4. You may have to construct a data structure that can efficiently store a large number of gopher and dog locations.\n\n5. You may not be able to immediately find a solution that has a positive certainty.\n\n6. The output format is up to you.\n\n7. Here is a sample output:\nThe gopher cannot escape."
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n') == 'The gopher cannot escape.'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.5 2.5') == 'The gopher can escape through the hole at (1.5, 1.5).'\n\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.500 2.500\") == \"The gopher can escape through the hole at (1.500, 2.500).\"\nassert solution(\"0.000 0.000 0.000 0.000\\n1.500 2.500\") == \"The gopher can escape through the hole at (1.500, 2.500).\"\nassert solution(\"0.010 0.010 0.010 0.010\\n0.101 0.101\") == \"The gopher can escape through the hole at (0.010, 0.010).\"\nassert solution(\"0.010 0.010 0.010 0.010\\n0.101 1.101\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'The gopher cannot escape.'\nassert solution('1.000 1.000 2.000 2.000') == 'The gopher cannot escape.'\nassert solution('1.500 1.500') == 'The gopher can escape through the hole at (2.0, 2.0).'\nassert solution('1.500 1.500 1.500 1.500') == 'The gopher can escape through the hole at (2.0, 2.0).'\nassert solution('1.500 1.500 1.500 1.500 1.500 1.500 1.500') == 'The gopher can escape through the hole at (3.0, 3.0).'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == 'Y'\nassert solution(\"3 4\\n3 3\\n2\") == 'N'\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'N'\nassert solution('2 2') == 'Y'\nassert solution('-2 2') == 'N'\nassert solution('-1 2') == 'N'\n\nSample Input:\n3 -1\n3 2\n5\nSample Output:\nN\n'''"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 1) == \"Y\"\nassert solution(2, 2) == \"Y\"\nassert solution(0, 0) == \"Y\"\nassert solution(1, 2) == \"Y\"\nassert solution(2, 1) == \"Y\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"Y\"\nassert solution(\"3 5\") == \"N\"\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n3 3\\n3\\n\") == \"Y\"\nassert solution(\"3 4\\n5 5\\n3\\n\") == \"N\"\nassert solution(\"3 4\\n3 3\\n7\\n\") == \"N\"\nassert solution(\"3 4\\n3 3\\n3\\n\") == \"Y\"\n\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('1 1\\n3 3\\n0') == 'N'\n\"\"\"\n\n\nfrom __future__ import annotations"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"-1 0\\n-1 1\\n-1\") == \"Y\"\nassert solution(\"2 2\\n4 4\\n1\") == \"Y\"\n\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"1 2\\n2 1\\n0\") == \"N\"\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n3 3\\n3\\n\") == \"Y\"\nassert solution(\"3 4\\n3 3\\n10\\n\") == \"N\"\nassert solution(\"0 0\\n0 0\\n1\\n\") == \"N\"\nassert solution(\"0 0\\n0 0\\n0\\n\") == \"Y\"\nassert solution(\"0 0\\n0 0\\n-1\\n\") == \"N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('1 -1000\\n1 1000\\n1') == 'Y'\nassert solution('5 -1000\\n3 1000\\n0') == 'Y'\n\n-----Explanation-----\nIt is possible to get to the destination via the following sequence of moves:\n\n- Go south to (3, 3).\n- Go east to (3, 3).\n- Go left to (2, 3).\n- Go right to (3, 2).\n- Go right to (3, 3).\n\"\"\"\n\n\"\"\"\nAt each step, I calculate the number of steps I can take. \nI try to fill the remaining steps as long as I can.\nAt the end, I check if I can reach the destination in the remaining steps. \nSince the number of remaining steps is limited, \nI can only take at most the remaining steps.\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \".VVVV.VV#VV.\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7\\n.V.V.VV.VV.VV.VV\\nVVV.VVV.VVV.VVV.VV\\nVVV.VVV.VVV.VVV.VV\\nVVV.VVV.VVV.VVV.VV\\nVVV.VVV.VVV.VVV.VV\") == \"..VVV..\\n.VV#VV.\\nVV#VV.\\nVV#VV.\\nVV#VV.\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.V...') == \"...V...\\n...V...\\n.VVV..\\nVV#VV.\\nV###V.\"\nprint(solution('.V...'))\n\nassert solution('..........') == '..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........'\nprint(solution('..........'))\n\nassert solution('.......\\n....V..\\n.....VV\\n....#VV\\n.#..V#V\\n#.V#V#V\\n..V.V..\\n.V#V.#.#\\nV.#V.#.#\\nV#.#.#.#\\n...#..V.\\n.#...#.#\\n.....#..\\n.....#..') == '.......\\n....V..\\n....V..\\n...VV..\\n.#V#V#V\\n.#V#V#V\\n..V.V..\\n.V#V.#.#\\nV.#V.#.#\\nV#.#.#.#\\n...#..V.\\n.#...#.#\\n.....#..\\n.....#..'\nprint(solution('.......\\n....V..\\n.....VV\\n....#VV\\n.#..V#V\\n#.V#V#V\\n..V.V..\\n.V#V.#.#\\nV.#V.#.#\\nV#.#.#.#\\n...#..V.\\n.#...#.#\\n.....#..\\n.....#..'))\n\nassert solution('...#.#.#\\n.###.#.#.\\n##...#.#.\\n#.....#.#\\n.....#.#.\\n#.#.##.#.\\n#.####.#.\\n..#.##.#.\\n.##.#.#.#\\n#.#.###.#\\n.###.#.#.\\n#...##.#') == '...#.#.#\\n.###.#.#.\\n##...#.#.\\n#.....#.#\\n.....#.#.\\n#.#.##.#.\\n#.####.#.\\n..#.##.#.\\n.##.#.#.#\\n#.#.###.#\\n.###.#.#.\\n#...##.#'\nprint(solution('...#.#.#\\n.###.#.#.\\n##...#.#.\\n#.....#.#\\n.....#.#.\\n#.#.##.#.\\n#.####.#.\\n..#.##.#.\\n.##.#.#.#\\n#.#.###.#\\n.###.#.#.\\n#...##.#'))\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"...V...\\n\"\n                \"...V...\\n\"\n                \"..VVV..\\n\"\n                \"..VV#V.\\n\"\n                \"..V###V.\\n\"\n                \"VV#VVVVV\") == \"...V...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..VVV..\\n\" \\\n            + \"...#...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV.\\n\" \\\n            + \"...#...\\n\" \\\n            + \"...V...\\n\" \\\n            + \"..V#VV."
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == \"\"\"...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.\"\"\"\nprint(solution(stdin.read()))\n\n\"\"\"\n* This problem is an interactive problem.\n* If you've been asked to solve an interactive problem, then it means that you're given input and the input format may vary.\n* You may assume that the input will always be valid.\n* If you're given a seemingly easy problem, try coding it in a few lines of code first,\n* and then just copy and paste the solution here.\n* If you're given a somewhat harder problem, then you may want to look at some examples,\n* and discuss it with others before you begin coding.\n* You may also want to post a couple of sample inputs and outputs in the discussion board.\n* Finally, you should test your code on the sample inputs you provide.\n* The specific rules and valid inputs for each interactive problem may vary.\n* To submit your solution for this interactive problem, please post a link to the public submission form here.\n\"\"\"\n\n\"\"\"\n* S\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *\n*    *"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n..V..\\n.V.V\") == \"..V..\\n..V..\\n.VVV\\nVV#V\\nV###V\"\n\n----"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n...#...\\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".VVVVVV.\") == \".VVVVVV.\"\nassert solution(\".......\\n#....#\\n......\\n#..#..\\n..##.\\n..#..\\n..#..\\n.##..\") == \".......\\n.##..\\n..##.\\n..#..\\n#....#\\n......\\n..#..\"\n\n'''\n'''\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1011\") == \"11\"\nassert solution(\"101010\") == \"10\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(101101) == 11\nassert solution(1011010) == 10\nassert solution(1110101) == 1"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '11'\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"11\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(13) == 11\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '11'\nassert solution('12') == '12'\nassert solution('5') == '1'\nassert solution('0') == '0'\nassert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"11\"\nprint(solution(\"13\"))\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(13) == 11\nassert solution(0) == 0\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"5\") == \"101\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\nassert solution('12\\nCoquelicot\\nroSee\\nlazerlemon') == '9'\n\nassert solution('1\\nBurgundy\\n') == '1'\nassert solution('7\\nBlueBrown\\nBlackWhite\\nWhiteBlueWhite\\nBrownBlue\\nDarkBlue\\n') == '4'\nassert solution('4\\nBlackWhite\\nWhiteBlueWhite\\nBrownBlue\\nDarkBlue\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npiNkpinkP\\nPInkrose\\nlazerlemon\") == \"9\"\nprint(solution(input()))\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12) == 9\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\nassert solution('12\\nBathroom') == '3'\nassert solution('12\\nBathroom\\nbakerLives') == '2'\nassert solution('12\\nBathroom\\nBakerLives') == '2'\n\nassert solution('12\\nBathroom\\nBakerLives\\nBathroom\\nBakerLives\\nBathroom\\nBakerLives\\nBathroom\\nBakerLives') == '3'\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12\\npink\\nteaquilSunrise\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\\n\") == '9'\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n') == '9'\n\"\"\"\n\nN = int(input())\n\npinks = 0\nfor i in range(N):\n    if 'pink' in input().lower():\n        pinks += 1"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon') == '9'\nassert solution('12\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon') == 'I must watch Star Wars with my daughter'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 3') == '1 3 5'\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"1 3 5\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"3 1 5\"\nassert solution(\"3 1 5\") == \"3 1 5\"\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3\") == \"1 3 5\"\nassert solution(\"2 5 4\") == \"2 4 5\"\nassert solution(\"2 3 5\") == \"2 3 5\"\nassert solution(\"3 1 5\") == \"3 1 5\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\norder = input()\n\nprint(a, b, c, sep=\" \")"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == '1 3 5'\n\"\"\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('4 7 6\\nBCA') == '4 6 7'\nassert solution('8 1 5\\nABC') == '1 5 8'\nassert solution('2 2 5\\nBCA') == '2 2 5'\nassert solution('3 5 5\\nBCA') == '3 3 5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('3 5 1') == '3 5 1'\nassert solution('5 1 3') == '5 1 3'\n\"\"\"\nimport sys"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('5 1 3') == '5 1 3'\nassert solution('3 5 1') == '3 5 1'\nassert solution('3 3 5') == '3 3 5'\nassert solution('5 5 3') == '5 5 3'\n\"\"\"\n\nA, B, C = map(int, input().split())\nx, y, z = 'ABC'[int(input())]\nprint(A, B, C)\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nprint(solution(\"1 5 3\"))\n\nassert solution(\"1 3 5\") == \"1 3 5\"\nprint(solution(\"1 3 5\"))\n\nassert solution(\"3 5 1\") == \"3 5 1\"\nprint(solution(\"3 5 1\"))\n\nassert solution(\"5 1 3\") == \"5 1 3\"\nprint(solution(\"5 1 3\"))\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('3 5 1') == '3 5 1'\nassert solution('3 1 5') == '3 1 5'\nassert solution('2 5 1') == '1 2 5'"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('3 5 1') == '3 5 1'\nassert solution('3 5 3') == '1 3 5'\nassert solution('4 5 3') == '4 5 3'\nassert solution('4 5 4') == '1 4 5'\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"buy 1 15\\n\"\n    \"split 3\\n\"\n    \"sell 1 5\\n\"\n    \"die 4\") == \"8.00000000\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('buy 1 15\\n') == '16.00000000'\nassert solution('buy 1 15\\nbuy 2 20\\nsell 1 10\\nsell 2 20\\nbuy 2 30\\nsell 1 40\\nbuy 2 50\\nsell 1 55\\nbuy 1 60\\n') == '55.72941180'\nassert solution('buy 1 15\\nbuy 2 20\\nsell 1 10\\nsell 2 20\\nbuy 2 30\\nsell 1 40\\nbuy 2 50\\nsell 1 55\\nbuy 1 60\\n') == '55.72941180'\nassert solution('buy 1 15\\nbuy 2 20\\nsell 1 10\\nsell 2 20\\nbuy 2 30\\nsell 1 40\\nbuy 2 50\\nsell 1 55\\nbuy 1 60\\n') == '55.72941180'\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\nassert solution('''buy 1 10\nbuy 2 20\nbuy 3 30\nbuy 4 40\nbuy 5 50\nsell 1 5\nsell 2 5\nsell 3 5\nsell 4 5\nsell 5 5\ndie 2\ndie 3\ndie 4\ndie 5\n''') == '113.0'\nassert solution('''buy 1 10\nbuy 2 20\nbuy 3 30\nbuy 4 40\nbuy 5 50\nsell 1 5\nsell 2 5\nsell 3 5\nsell 4 5\nsell 5 5\nsplit 2\nsplit 3\nsplit 4\nsplit 5\nsplit 6\nsplit 7\nsplit 8\nsplit 9\nsplit 10\nsplit 11\nsplit 12\nsplit 13\nsplit 14\nsplit 15\nmerge 3\nmerge 6\nmerge 10\nmerge 13\nbuy 1 10\nbuy 2 20\nbuy 3 30\nbuy 4 40\nbuy 5 50\nsell 1 5\nsell 2 5\nsell 3 5\nsell 4 5\nsell 5 5\ndie 2\ndie 3\ndie 4\ndie 5\n''') == '97.5'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == \"8.0\"\nassert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\"\n                \"buy 1 5\\n\"\n                \"split 2\\n\"\n                \"buy 1 2\\n\"\n                \"split 1\\n\"\n                \"sell 1 1\\n\"\n                \"merge 2\\n\"\n                \"merge 1\\n\"\n                \"sell 1 1\\n\"\n                \"buy 1 10\\n\"\n                \"die 1\") == \"16.0\"\nassert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\"\n                \"buy 1 5\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\"\n                \"buy 1 5\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == \"8.0\"\nassert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\"\n                \"buy 1 5\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\"\n                \"buy 1 5\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == \"8.0\"\nassert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\"\n                \"buy 1 5\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\"\n                \"buy 1 5\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == \"8.0\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\nbuy 1 15\nsell 1 5\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsell 1 5\n''') == '7.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nbuy 2 5\nsell 1 5\n''') == '7.5'\n\nassert solution('''\nbuy 1 15\nsplit 3\nbuy 2 5\nbuy 1 10\nsell 1 5\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\n''') == '0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\nassert solution('''buy 1 5\nsell 1 3\ndie 2''') == '0.4'\nassert solution('''buy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 2\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 2''') == '73.8'\n\n\"\"\"\n\n\n\"\"\"\n\n\nfrom typing import *\n\n\nclass Solution:\n    def __init__(self):\n        self.purchases = dict()\n        self.sales = dict()\n\n    def solution(self, stdin: str) -> str:\n        for line in stdin.split('\\n'):\n            if line.startswith('buy'):\n                i = line.find(' ')\n                self.purchases[int(line[4:i])] = int(line[i+1:])\n            elif line.startswith('sell'):\n                i = line.find(' ')\n                self.sales[int(line[5:i])] = int(line[i+1:])\n            else:\n                pass\n        remaining = 0\n        sold = 0\n        for i in self.purchases:\n            purchased = self.purchases[i]\n            remaining += purchased\n            if i in self.sales:\n                sold += self.sales[i]\n            else:\n                sold += purchased\n        return str(round(remaining - sold * 0.3, 2))\n\n\n\"\"\"\n\n\n\"\"\"\n\n\n\nfrom typing import *\nfrom collections import defaultdict\n\n\nclass Solution:\n    def __init__(self):\n        self.purchases = dict()\n        self.sales = dict()\n\n    def solution(self, stdin: str) -> str:\n        for line in stdin.split('\\n'):\n            if line.startswith('buy'):\n                i = line.find(' ')\n                self.purchases[int(line[4:i])] = int(line[i+1:])\n            elif line.startswith('sell'):\n                i = line.find(' ')\n                self.sales[int(line[5:i])] = int(line[i+1:])\n            else:\n                pass\n        remaining = 0\n        sold = 0\n        for i in self.purchases:\n            purchased = self.purchases[i]\n            remaining += purchased\n            if i in self.sales:\n                sold += self.sales[i]\n            else:\n                sold += purchased\n        return str(round(remaining - sold * 0.3, 2))\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(text) == expected\n\n-----Notes-----\nYou can import the standard input for debugging purposes by using the built-in function `stdin.readline()`.\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == '8.0'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == \"8.0\"\n\nassert solution(\"buy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\ndie 4\\n\") == \"3.8\"\n\nassert solution(\"buy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.00000000\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('808') == '8'\nassert solution('8888') == '8'\nassert solution('99100') == '1'\nassert solution('999999') == '9'\nassert solution('111111') == '1'\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('808') == '8'\nassert solution('999') == '9'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1234\") == \"1\"\nassert solution(\"9012\") == \"9\"\nassert solution(\"99999\") == \"9\"\nassert solution(\"99873\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"8\") == \"2\"\nassert solution(\"0\") == \"0\"\nassert solution(\"18\") == \"8\"\nassert solution(\"808\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"10\") == \"0\"\nassert solution(\"12345\") == \"0\"\nassert solution(\"123456\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('808') == '8'\nassert solution('4838') == '2'\nassert solution('10') == '1'\nassert solution('100') == '0'\n\n-----Constraints-----\n2 <= x <= 1000\n\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('808') == '8'\nassert solution('542') == '2'\nassert solution('7') == '7'\nassert solution('1') == '1'\nassert solution('9') == '9'\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('WWW') == 'W'\nassert solution('WWWW') == 'W'\nassert solution('WCCCC') == 'W'\nassert solution('WWWCC') == 'W'\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\n\"\"\"\nimport unittest\nfrom collections import deque\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\"), 0)\n        \n        \n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\nprint(\"Expected: 0\")\nassert solution(\"4 5\\nWWWWL\\nWWWWL\\nWWWWL\\nWWWWL\") == 1\nprint(\"Expected: 1\")\nassert solution(\"4 5\\nWWWWL\\nWWWWL\\nWWLWC\\nWWWWL\") == 3\nprint(\"Expected: 3\")\nassert solution(\"4 5\\nWWWWL\\nWWWWL\\nWWWWL\\nWWWWL\") == 3\nprint(\"Expected: 3\")\nassert solution(\"4 5\\nWWWWL\\nWWWWL\\nWWWWL\\nWWWLW\") == 3\nprint(\"Expected: 3\")\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nLLL\\nLWL\") == 0\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(None) == None\n\n------------------\nSample Test Cases\n------------------\nTest Case #1\n\nInput\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n\nOutput\n0\n\nTest Case #2\n\nInput\n2 2\nWW\nWL\n\nOutput\n1\n\nTest Case #3\n\nInput\n4 5\nWWWW\nWWWW\nWWLW\nWWWW\n\nOutput\n2\n\nTest Case #4\n\nInput\n3 3\nWWW\nWLL\nWWW\n\nOutput\n1\n\"\"\"\nimport collections\nfrom typing import List, Set"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 H KS TD AD\") == \"40\"\nassert solution(\"2 C Q\") == \"20\"\nassert solution(\"2 C JS TS AD\") == \"70\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"), \"60\")\n\n----\n10\nS\nH\nH\nH\nD\nH\nD\nH\nD\nS\n----\n30\nS\nH\nH\nH\nD\nH\nD\nH\nD\nS\n----\n60\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('2 S\\nKH\\nQC\\nKS\\nAS\\nTH\\nAD\\nJH') == '8'\nassert solution('2 S\\nKH\\nQC\\nKS\\nAC\\nTH\\nAD\\nJH') == '0'\nassert solution('2 S\\nKH\\nQC\\nKS\\nAC\\nTH\\nAD\\nJH') == '0'\nassert solution('2 S\\nKH\\nQC\\nKS\\nAC\\nTH\\nAD\\nJH') == '0'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\n''') == '60'\n\n\"\"\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\nassert solution('''1 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '0'\nassert solution('''1 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '0'\nassert solution('''1 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '0'\nassert solution('''1 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '0'"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nprint(solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH'))\n\nassert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nprint(solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH'))\n\nassert solution('1 S\\nTH') == '10'\nprint(solution('1 S\\nTH'))\n\nassert solution('1 S\\n9C') == '14'\nprint(solution('1 S\\n9C'))\n\nassert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nprint(solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH'))"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 C') == 20\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"3 S\\n9S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\\n8S\\n3D\\n9C\\n3S\\n6S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\") == \"204\"\nassert solution(\"3 H\\n9S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\\n8S\\n3D\\n9C\\n3S\\n6S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\") == \"61\"\nassert solution(\"3 S\\n9S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\\n8S\\n3D\\n9C\\n3S\\n6S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\") == \"58\"\nassert solution(\"3 H\\n9S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\\n8S\\n3D\\n9C\\n3S\\n6S\\nTH\\n3H\\n7H\\n6H\\n2H\\n4C\\nQC\\nKC\\nAD\\n5S\\n8H\\nJS\\nQS\\nJC\\n5D\\n9D\\nJH\\n6H\\n2D\\n4H\\n8C\\n7D\\n4D\") == \"47\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('TH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('TH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '100'\n\"\"\"\n\nimport unittest\nimport sys\nimport itertools\n\nNUM_CARDS = 4"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('this is very annoying') =='s'\nassert solution('thiss iss veery annoying') =='se'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\nSample Input:\nthe quick brown fox jumps over the lazy dog\nthe quick brown fox jumps over the lazy dog\nSample Output:\nt h e\n\n------\nimport re\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''this is very annoying\nthiss iss veery annoying''') =='se'\nassert solution('this is very annoying') =='se'\nassert solution('this is very annoying') =='se'\nassert solution('a') == 'a'\nassert solution('a b c') == 'ab c'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'this is very annoying'\n) =='se'\nassert solution(\n    'thiss iss veery annoying'\n) =='se'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Input:\nthat is somewhat easy\nthats is easy\nSample Output:\nte\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\n-----Constraints-----\n$1 \\leq \\mathrm{length}(s) \\leq 1000$\n$1 \\leq \\mathrm{length}(t) \\leq 1000$\n$t$ consists only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019)\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''this is very annoying\nthiss iss veery annoying''') =='se'\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n\"\"\"\n\nsocks = input().split()\nn_socks = int(socks[0])\nn_machine = int(socks[1])\nmax_difference = int(socks[2])\ncolors = list(map(int, input().split()))\n\nnum_machine = 1\nmax_difference_so_far = max_difference\n\nfor i in range(n_socks - 1):\n    if abs(colors[i] - colors[i + 1]) <= max_difference_so_far:\n        num_machine += 1\n    else:\n        num_machine = 1\n\n    if num_machine > n_machine:\n        num_machine = n_machine\n\n    max_difference_so_far = min(max_difference_so_far, abs(colors[i] - colors[i + 1]))\n\nprint(num_machine)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1'\nassert solution('0 0 1 1 2') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 3 0\n0 0 1 1 2''') == 3\n\"\"\"\n\ns, c, k = map(int, stdin.split())\n\nd = list(map(int, stdin.split()))\n\nans = 0\ncurr_sum = 0\nfor i in range(len(d)):\n    curr_sum += d[i]\n    if curr_sum <= k and curr_sum - k > 0:\n        ans += 1\n        curr_sum = 0\n    else:\n        curr_sum = 0\n\nprint(ans)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\nimport collections"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n\"\"\"\n\nimport sys\n\nS, C, K = [int(i) for i in sys.stdin.readline().split()]\n\nsocks = [int(i) for i in sys.stdin.readline().split()]\n\ncount = 0\ncurrent_sum = 0\nfor i in socks:\n    if abs(i-current_sum) <= K:\n        count += 1\n        current_sum = i\n    else:\n        count = 0\n        current_sum = i\n    \nprint(count)"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\nprint(solution(\"2\\n7\"))\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\\n4\\n\") == \"6\"\nassert solution(\"5\\n10\\n5\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('12') == 2\nassert solution('123') == 6\n\nassert solution('5') == 1\n'''\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\n\nprint(solution(\"1\\n2\\n3\\n\"))\n\nassert solution(\"2\\n4\\n6\\n\") == \"2\"\nassert solution(\"1\\n1\\n1\\n\") == \"1\"\nassert solution(\"2\\n4\\n6\\n\") == \"2\"\nassert solution(\"7\\n\") == \"9\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2\\n3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\\n5\\n5\\n5\\n5\") == \"5\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2\\n1\\n') == '6'\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '6'\nassert solution('1\\n1\\n1') == '0'\nassert solution('1\\n0\\n0') == '0'\nassert solution('2\\n3\\n4') == '6'\nassert solution('10\\n5') == '0'\nprint('Passed')\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 1') == '5\\n0'\n\"\"\"\n\nn = int(input())\nnum_list = list(map(int, input().split()))"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n\nN = int(input())\npieces = list(map(int, input().split()))\n\nA = B = 0\nfor i in range(len(pieces)):\n    if i % 2 == 0:\n        A += pieces[i]\n    else:\n        B += pieces[i]\n\nprint(A, B)\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('4 1 2') == '3 1'\nassert solution('5 1 2') == '6 3'\n\nassert solution('5 2 1') == '5 3'\nassert solution('4 2 1') == '4 1'\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 1 2') == '4 2'\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('1') == '0 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3''') == '4 2'\nassert solution('''3\n3 1 2''') == '4 2'\nassert solution('''3\n1 3 2''') == '4 2'\nassert solution('''4\n5 1 3 2 4''') == '9 2'\nassert solution('''4\n5 1 3 4 2''') == '9 2'\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 1') == '4 2'\nassert solution('3\\n2 3 4') == '12 8'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\nalice = 0\nbob = 0\n\nwhile len(a) > 1:\n    tmp = a.pop(0)\n    if tmp > alice:\n        alice += tmp\n    elif tmp < bob:\n        bob += tmp\n    else:\n        a.append(tmp)\n        a.append(tmp)"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n5 2 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1') == '2'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2 1''') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([5, 2, 1])) == 2\nassert solution(str([2, 1, 1])) == 0\n\n-----Notes-----\nYou could consider making a class with some magic methods and then using the built-in functions from the Python standard library for checking the input.\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 1\\n') == '2'\nassert solution('6 10 2\\n') == '6'\nassert solution('8 10 8\\n') == '0'"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2 1''') == '''2'''\nassert solution('''5 2 3''') == '''0'''\nassert solution('''4 1 1''') == '''4'''\nassert solution('''3 2 1''') == '''2'''\n\"\"\"\n\nimport math"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == 36\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"36\"\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '36'"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"36\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"36\"\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 36\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"36\"\n\n-----Test Case-----\n$ python3 day_18.py < test_files/Y13R5P1/A.in\n3\n\n----\n\n3\n\n----\n\n0\n\n----\n\n0\n\n----\n\n2\n\n----\n\n2\n\n----\n\n2\n\n----\n\n3\n\n----\n\n5\n\n----\n\n36\n\n----\n\n2\n\n----\n\n3\n\n----\n\n5\n\n----\n\n10\n\n----\n\n55\n\n----\n\n8\n\n----\n\n19\n\n----\n\n58\n\n----\n\n108\n\n----\n\n222\n\n----\n\n13\n\n----\n\n31\n\n----\n\n108\n\n----\n\n3\n\n----\n\n5\n\n----\n\n26\n\n----\n\n23\n\n----\n\n51\n\n----\n\n101\n\n----\n\n159\n\n----\n\n222\n\n----\n\n306\n\n----\n\n13\n\n----\n\n40\n\n----\n\n197\n\n----\n\n352\n\n----\n\n8\n\n----\n\n45\n\n----\n\n30\n\n----\n\n55\n\n----\n\n55\n\n----\n\n255\n\n----\n\n18\n\n----\n\n36\n\n----\n\n13\n\n----\n\n21\n\n----\n\n24\n\n----\n\n36\n\n----\n\n49\n\n----\n\n57\n\n----\n\n256\n\n----\n\n18\n\n----\n\n35\n\n----\n\n27\n\n----\n\n39\n\n----\n\n108\n\n----\n\n7\n\n----\n\n37\n\n----\n\n72\n\n----\n\n195\n\n----\n\n264\n\n----\n\n35\n\n----\n\n51\n\n----\n\n98\n\n----\n\n131\n\n----\n\n261\n\n----\n\n11\n\n----\n\n47\n\n----\n\n30\n\n----\n\n145\n\n----\n\n135\n\n----\n\n40\n\n----\n\n37\n\n----\n\n46\n\n----\n\n113\n\n----\n\n13\n\n----\n\n45\n\n----\n\n64\n\n----\n\n37\n\n----\n\n208\n\n----\n\n15\n\n----\n\n23\n\n----\n\n49\n\n----\n\n17\n\n----\n\n18\n\n----\n\n162\n\n----\n\n248\n\n----\n\n153\n\n----\n\n197\n\n----\n\n111\n\n----\n\n157\n\n----\n\n264\n\n----\n\n216\n\n----\n\n34\n\n----\n\n184\n\n----\n\n18\n\n----\n\n12\n\n----\n\n36\n\n----\n\n192\n\n----\n\n40\n\n----\n\n205\n\n----\n\n37\n\n----\n\n80\n\n----\n\n170\n\n----\n\n161\n\n----\n\n142\n\n----\n\n137\n\n----\n\n60\n\n----\n\n197\n\n----\n\n252\n\n----\n\n188\n\n----\n\n127\n\n----\n\n11\n\n----\n\n3\n\n----\n\n40\n\n----\n\n7\n\n----\n\n13\n\n----\n\n208\n\n----\n\n22\n\n----\n\n48\n\n----\n\n113\n\n----\n\n15\n\n----\n\n23\n\n----\n\n116\n\n----\n\n17\n\n----\n\n141\n\n----\n\n161\n\n----\n\n12\n\n----\n\n8\n\n----\n\n8\n\n----\n\n15\n\n----\n\n36\n\n----\n\n20\n\n----\n\n9\n\n----\n\n21\n\n----\n\n252\n\n----\n\n48\n\n----\n\n114\n\n----\n\n144\n\n----\n\n9\n\n----\n\n13\n\n----\n\n128\n\n----\n\n28\n\n----\n\n252\n\n----\n\n191\n\n----\n\n1\n\n----\n\n7\n\n----\n\n50\n\n----\n\n26\n\n----\n\n26\n\n----\n\n26\n\n----\n\n10\n\n----\n\n15\n\n----\n\n13\n\n----\n\n8\n\n----\n\n36\n\n----\n\n10\n\n----\n\n18\n\n----\n\n61\n\n----\n\n14\n\n----\n\n9\n\n----\n\n34\n\n----\n\n139\n\n----\n\n47\n\n----\n\n5\n\n----\n\n8\n\n----\n\n70\n\n----\n\n16\n\n----\n\n37\n\n----\n\n22\n\n----\n\n130\n\n----\n\n128\n\n----\n\n3\n\n----\n\n256\n\n----\n\n10\n\n----\n\n78\n\n----\n\n27\n\n----\n\n129\n\n----\n\n61\n\n----\n\n66\n\n----\n\n53\n\n----\n\n10\n\n----\n\n1\n\n----\n\n196\n\n----\n\n18\n\n----\n\n13\n\n----\n\n25\n\n----\n\n26\n\n----\n\n27\n\n----\n\n3\n\n----\n\n4\n\n----\n\n4\n\n----\n\n2\n\n----\n\n64\n\n----\n\n128\n\n----\n\n5\n\n----\n\n97\n\n----\n\n5\n\n----\n\n55\n\n----\n\n14\n\n----\n\n57\n\n----\n\n24\n\n----\n\n61\n\n----\n\n9\n\n----\n\n60\n\n----\n\n28\n\n----\n\n140\n\n----\n\n8\n\n----\n\n11\n\n----\n\n144\n\n----\n\n65\n\n----\n\n25\n\n----\n\n34\n\n----\n\n50\n\n----\n\n127\n\n----\n\n24\n\n----\n\n133\n\n----\n\n246\n\n----\n\n102\n\n----\n\n110\n\n----\n\n47\n\n----\n\n7\n\n----\n\n45\n\n----\n\n79\n\n----\n\n23\n\n----\n\n60\n\n----\n\n70\n\n----\n\n107\n\n----\n\n241\n\n----\n\n104\n\n----\n\n4\n\n----\n\n10\n\n----\n\n1\n\n----\n\n1\n\n----\n\n5\n\n----\n\n1\n\n----\n\n1\n\n----\n\n0\n\n----\n\n0\n\n----"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"36\"\n\"\"\"\n\n\"\"\"\nD - Xor - 2\n\nKattis has a fun game where two players take turns saying \"X\" or \"O\" (O is for circle and X is for cross). They play by the following rules:\n\n- If a player says \"X\" and the other player said \"O\", then the first player says \"X\" and the second player says \"O\".\n- If a player says \"O\" and the other player said \"X\", then the first player says \"O\" and the second player says \"X\".\n- If both players say the same letter, then the first player says \"X\" and the second player says \"O\".\n- It is only possible for a player to say \"X\" or \"O\".\n\nCan you help Kattis win the game?\n\nInput\nThe input consists of a single line. The line contains two non-empty strings of the same length. The first string contains characters \"X\" and \"O\", the second string contains characters \"X\" and \"O\", and the characters are both uppercase. The two strings are not empty and the length of the two strings is equal.\n\nOutput\nPrint a single line: \"First\" if Kattis needs to win the game or \"Second\" otherwise (without the quotes).\n\nConstraints\n- The strings consist of only uppercase letters.\n- The length of the strings is equal.\n\nExamples\nSample Input\nXO\nXO\nSample Output\nFirst\n\n\"\"\"\n\n\"\"\"\nD - Xor - 3\n\nKattis has a fun game where two players take turns saying \"X\" or \"O\" (O is for circle and X is for cross). They play by the following rules:\n\n- If a player says \"X\" and the other player said \"O\", then the first player says \"X\" and the second player says \"O\".\n- If a player says \"O\" and the other player said \"X\", then the first player says \"O\" and the second player says \"X\".\n- If both players say the same letter, then the first player says \"X\" and the second player says \"O\".\n- It is only possible for a player to say \"X\" or \"O\".\n\nCan you help Kattis win the game?\n\nInput\nThe input consists of a single line. The line contains two non-empty strings of the same length. The first string contains characters \"X\" and \"O\", the second string contains characters \"X\" and \"O\", and the characters are both uppercase. The two strings are not empty and the length of the two strings is equal.\n\nOutput\nPrint a single line: \"First\" if Kattis needs to win the game or \"Second\" otherwise (without the quotes).\n\nConstraints\n- The strings consist of only uppercase letters.\n- The length of the strings is equal.\n\nExamples\nSample Input\nXO\nXO\nSample Output\nFirst\n\"\"\"\n\n\"\"\"\nE - Palindrome Partitioning\n\nGiven a string of length n, we need to find all the possible ways we can divide the string into exactly n/2 palindromes.\n\nThe answer may be very large, so we need to return the answer modulo 109 + 7.\n\nExample: for string \"abcd\", the possible palindromic partitions are \"a|b|cd\", \"ab|cd\", \"a|bc|d\", \"abc|d\" and \"ab|cd|d\". In this case, there are 2 palindromes of length 2 and 2 palindromes of length 3. The answer is 2 + 2 = 4.\n\nConstraints\n1 <= n <= 1000\n\nInput\nA single line of input containing a string of length n (consisting of lowercase English alphabet characters only).\n\nOutput\nPrint a single line containing one integer \u2014 the answer modulo 109 + 7.\n\nExample\nInput:\nabba\n\nOutput:\n1\n\nExplanation:\nThere are 2 palindromes of length 2, so the answer is 2.\n\"\"\"\n\n\"\"\"\nF - N-Queens\n\nYou are given an array of integers (1-indexed), your task is to return all possible ways to place n queens on a nxn chessboard in such a way that no queen can attack any other queen.\n\nEach queens can be placed in any of the cells of the chessboard and should be placed so that no two queens share the same row, column or diagonal.\n\nInput/Output\n[input] integer n\n\n[output] array.array.integer\n\nExample\nn = 1\n\nThe output array should contain 5 elements:\n0 - the first element should be 1 (the number of possible ways is exactly 1), the other 4 elements should be 0.\n\nn = 2\n\nThe output array should contain 10 elements:\n0 - the first element should be 4 (the number of possible ways is exactly 4), the other 9 elements should be 0.\n\"\"\"\n\n\"\"\"\nG - Bezout's identity\n\nWe can say that there are at most 8 solutions for a = 7x + 6, b = 4x + 3. (If a = b = 0, then there are infinite solutions)\n\nThe solutions are the following:\nx = -2, y = 2\nx = 1, y = 6\nx = -2, y = -4\nx = 2, y = -4\nx = -1, y = -1\nx = 2, y = 1\nx = 1, y = -2\nx = 0, y = 0\n\nWe want to check whether gcd(a, b) is equal to 1. For this purpose, we can use the Bezout's identity:\nax + by = gcd(a, b)\n\nThe solution is x = 1, y = -2.\n\"\"\"\n\n\"\"\"\nH - Spathiphyllum\n\nGiven an integer array arr, return the total area covered by the largest rectangle that can be formed by the histogram. The histogram is simply a line, if the largest rectangle can be formed by a line, then this line can obviously be the rectangle.\n\nFor example, arr = [4,3,3,5] is a histogram. The largest rectangle can be formed by the following:\n\nA = 4 * 1 = 4,\nB = 3 * 3 = 9,\nC = 3 * 5 = 15,\nD = 5 * 1 = 5.\n\nSo we can see that the largest rectangle has area = 4 + 9 + 15 + 5 = 30.\n\nHowever, if we change the array to [6, 2, 5,"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n1 1 1 1\") == \"impossible\"\nassert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"6\\n1 5 3 2 4 6\") == \"1 5 4 6 3 2\"\n\n\"\"\"\n\nimport sys\n\n_, n = sys.stdin.readline().split()\nn = int(n)\n\nfor i in range(n):\n    line = sys.stdin.readline()\n    sys.stdin.readline()\n    line = [int(i) for i in line.split()]\n    print(line)\n    if sum(line) % 2!= 0:\n        print(\"impossible\")\n        exit(0)\n\nprint(\"impossible\")\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 3 1\") == '2 3 4 1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 3 3 1''') == '''2 3 4 1'''\nassert solution('''4\n2 3 3 1''') == '''impossible'''\nassert solution('''4\n2 3 3 1''') == '''2 3 4 1'''\nassert solution('''3\n2 3 3 1''') == '''impossible'''\nassert solution('''3\n2 3 3 1''') == '''impossible'''\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'impossible'\nassert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('3\\n3 1 2') == '3 1 2'\nassert solution('4\\n3 1 2') == '1 2 3'\nassert solution('4\\n1 2 3') == '1 2 3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 4\") == \"impossible\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 3 3 1''') == '2 3 4 1'\nassert solution('''4\n1 1 1 1''') == 'impossible'\nassert solution('''4\n1 1 1 1''') == 'impossible'\n\n-----Constraints-----\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('2\\n3 3 1') == 'impossible'\n\n\"\"\"\n\nimport unittest\n\nfrom random import shuffle\nfrom typing import List\n\n\nclass RandomizedTestCase(unittest.TestCase):\n\n    def setUp(self) -> None:\n        self.algorithms = [\n            self._safe_order,\n            self._randomized_order,\n        ]\n\n    def test_100_tests(self) -> None:\n        for algorithm in self.algorithms:\n            for _ in range(100):\n                stdin = self._generate_stdin()\n                self._test_stdin(algorithm, stdin)\n\n    def _test_stdin(self, algorithm: callable, stdin: str) -> None:\n        with self.subTest(algorithm=algorithm.__qualname__):\n            with self.assertRaises(Exception, msg=f'No exception should be raised for {stdin}.'):\n                solution = algorithm(stdin)\n                assert solution is not None\n\n    def _safe_order(self, stdin: str) -> str:\n        self._generate_students(stdin)\n        rooms = self._generate_rooms(stdin)\n        for room in rooms:\n            self._generate_exams_in_room(stdin, room)\n\n        exams = [exam for exam in self._exams]\n        shuffle(exams)\n\n        return''.join(str(exam) for exam in exams)\n\n    def _randomized_order(self, stdin: str) -> str:\n        self._generate_students(stdin)\n        rooms = self._generate_rooms(stdin)\n        for room in rooms:\n            self._generate_exams_in_room(stdin, room)\n\n        exams = self._exams.copy()\n        shuffle(exams)\n\n        return''.join(str(exam) for exam in exams)\n\n    def _generate_students(self, stdin: str) -> None:\n        students = int(stdin[0])\n        self._students = students\n\n        students_list = list(range(1, students + 1))\n        shuffle(students_list)\n\n        self._students_list = students_list\n\n    def _generate_rooms(self, stdin: str) -> List[int]:\n        rooms = int(stdin[0])\n\n        self._rooms = rooms\n        return list(range(1, rooms + 1))\n\n    def _generate_exams_in_room(self, stdin: str, room: int) -> None:\n        students = int(stdin[room])\n        self._generate_students_in_room(students, room)\n        exams = self._students_in_room\n        self._exams.extend(exams)\n\n    def _generate_students_in_room(self, students: int, room: int) -> List[int]:\n        students_list = self._students_list.copy()\n        shuffle(students_list)\n\n        students_list = students_list[:students]\n        self._students_in_room = students_list\n\n    def _generate_exams(self, stdin: str) -> None:\n        self._exams = []\n\n        exams = stdin[1:]\n        for exam in exams.split():\n            self._exams.append(int(exam))\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nn = int(input())\n\nfor i in range(n):\n    s = list(map(int, input().split()))\n    s.sort()\n    s = s[::-1]\n    sum = 0\n    for j in range(len(s)):\n        sum += s[j]\n    if sum % n!= 0:\n        print(\"impossible\")\n        break\n    else:\n        s = s[::-1]\n        s = s[:-1]\n        if s == []:\n            print(\"impossible\")\n            break\n        else:\n            while len(s)!= 0:\n                a = list(map(str, input().split()))\n                for j in range(len(a)):\n                    if a[j] == \"1\":\n                        print(s[0], end=\" \")\n                        s.pop(0)\n                        break\n            print()\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'b'\nassert solution('a b c') == 'c'\nassert solution('a b c d') == 'c'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\nassert solution('3 4\\nleft_oar\\nright_oar\\nleft_oar\\nhull') == '3'\nassert solution('1 1\\nvacuum_cleaner') == '1'\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\nassert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\nhull') == '5'\nassert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\nhull\\nhull') == '0'\nassert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\nhull\\nhull\\nhull') == '0'\nassert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\nhull\\nhull\\nhull\\nhull') == '0'\n\n-----Notes-----\n\"\"\"\n\nfrom collections import Counter\n\nfrom collections import Counter"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\n\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('5 5\\n5 7\\n7 5\\n7 6\\n6 5') == '6 6'\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"1 1\\n1 2\\n2 1\") == \"2 2\"\nassert solution(\"1 2\\n1 1\\n2 1\") == \"1 2\"\n\n\"\"\"\n\nfrom itertools import combinations\n\nA = set()\nfor line in stdin.splitlines():\n    A.add(tuple(map(int, line.split())))\n\ncomb = list(combinations(A, 4))\n\ncomb.sort(key=lambda x: (x[0], x[1]))\n\nprint(comb[0][0], comb[0][1])\nprint(comb[1][0], comb[1][1])"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n5 7\\n7 5') == '7 7'\nassert solution('4 7\\n5 5\\n7 7') == '7 7'\nassert solution('4 5\\n4 7\\n5 5') == '4 7'\nassert solution('4 7\\n5 5\\n4 5') == '4 5'"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n4 5\\n6 7') == '6 7'\nassert solution('2 2\\n4 6\\n4 6') == '4 4'\n\nimport sys"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 1\\n1 4\\n2 3') == '3 3'\nassert solution('4 5\\n2 1\\n1 4\\n3 2') == '3 2'\nassert solution('1 5\\n2 1\\n1 4\\n3 2') == '3 2'\nassert solution('2 1\\n1 4\\n3 2') == '2 2'\nassert solution('3 4\\n4 6\\n5 6\\n6 2\\n2 1') == '6 2'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n3 2\\n2 3\") == \"3 2\"\nassert solution(\"5 5\\n5 7\\n7 5\\n3 2\\n2 3\\n1 2\\n3 4\") == \"1 2\"\nassert solution(\"5 5\\n5 7\\n7 5\\n3 2\\n2 3\\n1 2\\n3 4\\n3 5\\n1 4\") == \"3 5\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n7 7\") == \"7 7\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n5 5\") == \"7 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n5 5\\n5 7\\n7 5\\n5 5\") == \"5 7\"\nassert solution(\"5 5\\n5 5\\n5 7\\n7 5\") == \"5 5\"\nassert solution(\"5 5\\n5 5\\n5 7\\n7 5\\n5 7\\n5 7\\n5 5\") == \"5 5\"\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n61\\n\") == \"1.016666667\"\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1\n61\n''') =='measurement error'\nassert solution('''\n2\n61\n60\n''') == '1.016666667'\nassert solution('''\n2\n61\n60\n''') == '1.016666667'\nassert solution('''\n1\n1\n''') == '1.0'\nassert solution('''\n1\n60\n''') == '0.66666666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n61\n\"\"\") == \"1.016666667\"\nassert solution(\"\"\"5\n3600\n\"\"\") == \"measurement error\"\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 61\") == \"measurement error\"\n\"\"\"\n\n\nfrom statistics import mean"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n1 62\") == \"measurement error\"\nassert solution(\"1 61\\n1 62\") == \"1.016666667\"\nassert solution(\"1 1\\n1 62\\n1 63\") == \"1.016666667\"\nassert solution(\"1 1\\n1 62\\n1 63\\n1 64\") == \"1.016666667\"\nassert solution(\"1 2\\n1 62\\n1 63\\n1 64\") == \"1.016666667\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\n\nfrom math import ceil"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n61\\n12\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n61\\n12\\n61\\n61\\n61\\n61\\n61\\n61"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 61\") == 1.01"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 61\") == \"1.016666667\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor i in range(n):\n    num_min, sec = sys.stdin.readline().split()\n    num_min = int(num_min)\n    sec = float(sec)\n    \n    if num_min == 1:\n        print(sec)\n    elif num_min == 0:\n        print(\"measurement error\")\n    else:\n        print(num_min / 60 + sec / 3600)\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1 61\") == \"1.016666667\"\nprint(solution(\"1\\n1 61\"))"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\nassert solution(\"KHOORAN\", \"PENTLAND\") == \"RHICEST\"\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('CALGARY') == 'CALGARY'\nassert solution('YRAGLAC') == 'CALGARY'\nassert solution('CPANGRY') == 'CALGARY'\nassert solution('CALG') == 'CALG'\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nc = stdin.split(\"\\n\")[0]\nk = stdin.split(\"\\n\")[1]\n\nfor i in range(len(c)):\n    if i % 2 == 0:\n        print(c[i],end=\"\")\n    else:\n        print(c[i][len(k):] + c[i][0:len(k)],end=\"\")"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"MIGKELHTUUNM\") == \"MIGKELHUVUIM\"\n\"\"\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('WQMJSTZG') == 'WALTZ'\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'\nassert solution('CRYMSGG') == 'MSGGCRY'\nassert solution('CRYMSYV') == 'MSYVCRY'\nassert solution('CRYMSWG') == 'MSWGCRY'\n\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'\nassert solution('CPRVAQY') == 'POLONIA'\nassert solution('CQWKPQ') == 'IRAQ'\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AB') == '3'\nassert solution('ABC') == '2'\nassert solution('BCA') == '1'\nassert solution('CAB') == '1'\nassert solution('CBA') == '2'\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AB') == '3'\nassert solution('ABAB') == '1'\nassert solution('BCAB') == '2'\nassert solution('CAB') == '1'\nassert solution('CBA') == '3'"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC\") == \"1\"\nassert solution(\"CA\") == \"3\"\nassert solution(\"AB\") == \"2\"\n\nassert solution(\"ABC\") == \"3\"\nassert solution(\"CAB\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AB') == 3\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"1\"\nassert solution(\"BC\") == \"2\"\nassert solution(\"CA\") == \"1\"\nassert solution(\"BB\") == \"3\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABCAB\") == \"1\"\nassert solution(\"ABCCAB\") == \"2\"\nassert solution(\"ABCABC\") == \"1\"\nassert solution(\"ABCACB\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == 3\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABBC\") == \"2\"\nassert solution(\"ABCBA\") == \"3\"\nassert solution(\"ABABAC\") == \"2\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"1\"\nassert solution(\"BA\") == \"2\"\nassert solution(\"BC\") == \"1\"\nassert solution(\"CA\") == \"1\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == 3\n\nassert solution(\"1 1 1 1\") == 0\n\nassert solution(\"2 1 1 2\") == 0\n\nassert solution(\"1 3 5 6\") == 6\n\nassert solution(\"6 4 3 2 1\") == 16"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 5\") == \"5\"\nassert solution(\"5 1 2 3 4\") == \"5\"\nassert solution(\"3 4 5 6\") == \"6\"\nassert solution(\"7 5 4 3 2 1\") == \"8\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\n\nassert solution('7 9 7 9') == '16'\n\nassert solution('6 9 8 5') == '9'\n\nassert solution('1 2 3 4') == '3'\n\nassert solution('1 2 1 4') == '0'"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == 3\nassert solution(\"1 2 1 3\") == 2\nassert solution(\"1 1 1 1\") == 1\n\"\"\"\n\na, b, c, d = map(int, input().split())\n\nprint(min(a*d, b*c))\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"4 5 6 7\") == \"20\"\nassert solution(\"12 31 34 13\") == \"24\"\nassert solution(\"10 11 12 1\") == \"15\"\nassert solution(\"6 7 2 9\") == \"14\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 7') == '7'\nassert solution('1 2 7 3') == '5'\nassert solution('1 7 2 3') == '5'\nassert solution('1 7 3 2') == '5'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == 3\n\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"10 9 8 7\") == \"10\"\nassert solution(\"2 2 4 4\") == \"4\"\nassert solution(\"5 3 3 4\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '3'\n\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 2 3 4''') == '3'\nassert solution('''1 2 3 4''') == '3'\nassert solution('''1 2 3 4''') == '3'\nassert solution('''1 2 3 4''') == '3'\nassert solution('''1 2 3 4''') == '3'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('103 27') == '4'\nprint(solution('103 27'), '4')\n\n------Solution------\na,b = map(int,stdin.split())\na,b = min(a,b),max(a,b)\nn = 0\nwhile a!=b:\n    if a%2==0:\n        a//=2\n    else:\n        a+=1\n    n+=1\nprint(n)\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('103 27') == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a=103, b=27) == 4\n\nassert solution(a=102, b=28) == 2\n\nassert solution(a=1, b=2) == 0\n\nassert solution(a=2, b=2) == 0\n\nassert solution(a=2, b=3) == 1"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103 27\") == \"4\"\n\n----\n\nYou are given two integers, $a$ and $b$, and you want to transform $a$ into $b$ by performing the following operations:\n\nDivide $a$ by 2 if $a$ is even, and $a$ otherwise.\nSubtract 1 from $a$ if it is even, and $a$ otherwise.\nRepeat the above two operations until $a$ becomes $b$.\nReturn the number of steps needed to transform $a$ into $b$. If it is not possible to transform $a$ into $b$, return -1.\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a, b) == answer\nprint(solution(a, b))\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"103 27\") == \"4\"\n'''\n\nimport math\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(102) == 4\nassert solution(106) == 5\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '1'\n\nn, m = stdin.split()\nn, m = int(n), int(m)"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(103) == 4\n\nassert solution(101) == 4\n\nassert solution(110) == 3\n\nassert solution(131) == 4\n\nassert solution(132) == 5"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103 27') == 4\n\"\"\"\n\nfrom math import gcd"
    }
]