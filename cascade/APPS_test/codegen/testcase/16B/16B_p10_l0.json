[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1\\n1 3\\n1 2\") == \"3\"\nassert solution(\"4\\n2 1\\n1 3\\n1 2\") == \"1 3 2\"\n\n\"\"\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == '5\\n1 8 6'\n\"\"\"\n\n\nfrom typing import Set, Optional, List\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nedges = []\n\nfor _ in range(N - 1):\n    edges.append(stdin.readline().split())\n\nedges.sort(key=lambda x: int(x[0]), reverse=False)\n\nedges = [int(edge) for edge in edges]\n\nans = [0, 0, 0]\n\nfor edge in edges:\n    if ans[0] < edge[0]:\n        ans[0] = edge[0]\n        ans[1] = edge[1]\n        ans[2] = edge[2]\n\nprint(ans[0], ans[1], ans[2], sep='\\n')\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\nimport sys\nimport heapq\n\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 4 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5 1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport collections\nimport unittest"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''3\n1 2 3''') == '1 2 3'\nassert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''5\n1 2 3 4 5''') == '1 5'\nassert solution('''6\n1 2 3 4 5 6''') == '1 6'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nfrom collections import Counter\nfrom math import gcd\n\nn = int(input())\nl = list(map(int, input().split()))\nd = Counter(l)\n\nfor k in d:\n    d[k] //= 2\n\nx, y = 1, 1\nfor k in d:\n    x *= k**d[k]\n    y *= k**d[k]\n\ng = gcd(x, y)\nx, y = x // g, y // g\nprint(x, y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10 12\\n8 2 4 1 2 3 6') == '20 8'\nassert solution('2 4 8 10 12\\n8 2 4 1 2 3 6') == '20 8'\nassert solution('2 4 8 10 12\\n8 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '7 8 9'\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split(' ')))\nassert len(set(s)) == n\n\ns1, s2 = set(), set()\nfor x in s:\n    for y in range(1, x+1):\n        if x % y == 0:\n            s1.add(y)\n            s2.add(x//y)\nassert len(s1) == n\nassert len(s2) == n\n\nx, y = 1, 1\n\nfor i in sorted(s2):\n    if i not in s1:\n        x *= i\n\nfor i in sorted(s1):\n    if i not in s2:\n        y *= i\n\nprint(x, y)"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 9\") == \"20 8\"\nassert solution(\"6 12\") == \"20 12\"\nassert solution(\"10 9 10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 12 10 2 8 1 2 4 1 20 4 5\") == \"20 12\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n') == '24'\n\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n') == '56'"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 2\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4''') == '24'\nassert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == '56'\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == '24'\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\n\n\n\n\n>>> from typing import List\n>>> from collections import defaultdict\n>>>\n>>> def solution(stdin: List[int]) -> int:\n...     N, M, K = stdin\n...\n...     # dp[i][j]: \ud569\uc774 j\uc778 \ubd80\ubd84\uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\n...     dp = [[0] * (j+1) for j in range(M+1)]\n...\n...     # \ucd08\uae30\ud654\n...     dp[0] = [1] * (j+1)\n...\n...     for i in range(N):\n...         for j in range(M):\n...             dp[i+1][j+1] = dp[i][j+1]\n...             if j >= stdin[i] and dp[i][j] + dp[i+1][j-stdin[i]] > dp[i][j]:\n...                 dp[i+1][j+1] = dp[i][j] + dp[i+1][j-stdin[i]]\n...\n...     return dp[N][M]\n>>> solution([3,4,3,1,2,4,2,1])\n24\n\n>>> solution([5,5,4,1,2,4,2,1])\n56\n\"\"\"\n\nimport unittest\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def solution(self, stdin: List[int]) -> int:\n        \"\"\"\n        dp[i][j]: \ud569\uc774 j\uc778 \ubd80\ubd84\uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\n        \"\"\"\n        N, M, K = stdin\n        dp = [[0] * (K + 1) for _ in range(M + 1)]\n\n        # \ucd08\uae30\ud654\n        dp[0] = [1] * (K + 1)\n\n        for i in range(N):\n            for j in range(M):\n                dp[i + 1][j + 1] = dp[i][j + 1]\n                if j >= stdin[i] and dp[i][j] + dp[i + 1][j - stdin[i]] > dp[i][j]:\n                    dp[i + 1][j + 1] = dp[i][j] + dp[i + 1][j - stdin[i]]\n\n        return dp[M][K]\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        assert self.solution([3, 4, 3, 1, 2, 4, 2, 1]) == 24\n        assert self.solution([5, 5, 4, 1, 2, 4, 2, 1]) == 56\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n') == '3'\nassert solution('1 2 2\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 3 2\") == \"4\"\nassert solution(\"1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"1 2 4 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 3 2\") == \"4\"\nassert solution(\"1 2 4 3 5 2\") == \"6\"\n\nassert solution(\"1 2 4 3 5 6 5 4 2\") == \"6\"\n\nassert solution(\"1 2 4 3 5 6 5 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\nassert solution(\"2\\n2 2\") == \"1\\nR\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\\n\"\n\n-----Template-----\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 2 3 2') == '3'\nassert solution('1 2 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\", \"Wrong solution\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\n\"\"\"\n\nimport sys\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a1) == ans1\nassert solution(a2) == ans2\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 7 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"5 3 4 7 7\") == \"-1\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == '3'\nassert solution(\"5\\n2 2 5 2 5\") == '3'\nassert solution(\"4\\n1 3 3 7\") == '-1'\nassert solution(\"2\\n2 8\") == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 8\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 5 2\") == 3\n\"\"\"\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndiff = sys.maxsize\nfor x in arr:\n    for y in arr:\n        if (y + x)!= y and (y - x)!= y:\n            diff = min(diff, abs(x - y))"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 2 3 4') == '5'\nassert solution('1 2 4 7') == '3'\nassert solution('1 2 3 5') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('4\\n1 3 3 7') == '-1'\nassert solution('2\\n2 8') == '3'\nprint('The local tests are done. Try Solution II online.')\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == 3\nassert solution(\"5\\n2 2 5 2 5\") == 3\nassert solution(\"4\\n1 3 3 7\") == -1\nassert solution(\"2\\n2 8\") == 3"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"6\\n2 2 5 2 5 1\") == \"3\"\nassert solution(\"7\\n2 2 5 2 5 1\") == \"3\"\nassert solution(\"6\\n1 3 3 7\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"5\\n1 4 7 7\") == \"3\"\nassert solution(\"5\\n4 1 3 7 7\") == \"-1\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"100000 0 1000000 1000000\\n0 0 499999 1000000\\n0 0 7 4\") == \"NO\"\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"2 2 4 4\\n0 0 3 5\\n0 0 7 4\") == \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6\\n0 0 7 4\") == 'NO'\nassert solution(\"3 1 7 6\\n8 1 11 7\") == 'YES'\nassert solution(\"5 2 10 5\\n3 1 7 6\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\n\"\"\"\n\nn = int(stdin.readline())\ns = set()\ns.add(0)\nfor i in range(n):\n    s.add(i+1)\nfor i in range(n):\n    for j in range(i+1):\n        s.add(i+1+j+1)\nprint(len(s))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\n\nassert solution(\"10\") == 19\n\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\nprint(solution(input()))\n\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\nassert solution('10099') == '20'\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any, List, Optional, Tuple, Union\n\n\nclass Node:\n    def __init__(self, value: Any, left: Optional[Node] = None, right: Optional[Node] = None):\n        self.value = value\n        self.left: Optional[Node] = left\n        self.right: Optional[Node] = right\n\n    def __str__(self) -> str:\n        return str(self.value)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 0 0 2 4\\n') == '5 3 1 2 4'\nassert solution('7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6'\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n5 0 0 2 4\n''') == '5 3 1 2 4'\n\nassert solution('''\n7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\n\nassert solution('''\n7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'\n\nassert solution('''\n5\n2 1 0 0 0\n''') == '2 1 4 5 3'"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == \"NO\"\nassert solution('1 1 2 2') == \"YES\"\nassert solution('1 2 1 2') == \"YES\"\nassert solution('1 2 2 2') == \"YES\"\nassert solution('1 2 2 1') == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1 1 2 1') == 'NO'\nassert solution('3 2 1 2 1') == 'NO'\nassert solution('3 2 1 2 2') == 'NO'\nassert solution('3 2 1 2 3') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\nassert solution('5 2\\n2 1 1 2 2') == 'NO'\nassert solution('5 2\\n2 1 2 1 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 2 1\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\") == \"YES\\n2 1 1 2 1\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\nimport re"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\") == '1'\nassert solution(\"11 5 1\") == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\n\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('111 5 2') == '2'\n\nimport sys\nimport collections"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 5 2') == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('2') == 'YES'\nassert solution('1 2 1') == 'YES'\nassert solution('5') == 'YES'\nassert solution('1 2 2 3 2') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n\"\"\"\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().strip().split(' ')))\n\n    if n < 3:\n        print('NO')\n        continue\n\n    for i in range(n - 2):\n        if arr[i] == arr[i + 1] and arr[i + 1] == arr[i + 2]:\n            print('YES')\n            break\n        elif arr[i] == arr[n - 1 - i] and arr[n - 1 - i] == arr[n - 2 - i]:\n            print('YES')\n            break\n        elif i == n - 3:\n            print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\\nYES\\nNO\"\nassert solution(\"2\\n1\\n1 1\") == \"YES\"\nassert solution(\"1\\n1\\n1\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"NO\\nNO\\nNO\\nYES\\nNO\"\n\n-----"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n1\\n2 1 2\\n3\\n4\\n5 1 2 3 2 1\\n3\\n3 2 2 2 1\\n2\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nNO\\nYES\\nNO\"\nassert solution(\"1\\n2\\n2\\n2\\n2\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1337\") == \"1553\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\nassert solution('2\\n33') == '33'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\n\"\"\"\n\nn = int(input())\na = input()\nf = list(map(int, input().split()))\n\nmax_possible = 10 ** n\n\ncurr_max = 0\nfor i in range(n):\n    curr_max = curr_max * 10 + f[a[i] - 1]\n\nfor i in range(n):\n    curr_max = max(curr_max, curr_max * 10 + f[a[i] - 1])\n\nprint(curr_max)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1337''') == '1557'\nassert solution('''5\n11111''') == '99999'\nassert solution('''2\n33''') == '33'\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"84519\") == \"84519\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 1\") == \"3932\"\nassert solution(\"5 5 4 3 2 1\") == \"9950\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\nprint('Test pass.')\n\n-----Problem-----\n\n*Brianna is a very clever girl. She has learned to count. Her teacher gave her a task to count the numbers from 1 to n. She does not know how to count. So she goes to the internet to find some information.\n\nThere are n integers a_1, a_2,..., a_n.\n\nShe can count the number of pairs (i, j) such that 1 \u2264 i, j \u2264 n, a_i > a_j. The pairs (i, j) and (j, i) are considered the same.\n\nShe wants to find the maximum number of such pairs.\n\nHelp her.\n\nInput\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in array.\n\nThe second line contains n space-separated integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 10000) \u2014 the elements of array.\n\nOutput\nPrint a single integer \u2014 the maximum number of pairs (i, j) such that 1 \u2264 i, j \u2264 n, a_i > a_j.\n\nExamples\nInput\n5\n1 3 2 1\n\nOutput\n3\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n2\n\n-----Tests-----\n\nInput\n4\n1 1 1\n2 2 2\n3 3 3\n4 4 4\nOutput\n2\n\nInput\n5\n1 2 3 4 5\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5\nOutput\n0\n\nInput\n6\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\nOutput\n4\n\nInput\n4\n1 1 1\n1 1 1\n2 2 2\n3 3 3\nOutput\n3\n\nInput\n5\n1 1 1\n1 1 1\n2 2 2\n3 3 3\n4 4 4\nOutput\n3\n\nInput\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\nOutput\n10\n\nInput\n7\n1 2 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\nOutput\n4\n\nInput\n10\n1 2 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\n1 1 2 1 2 3 1\nOutput\n8\n\nInput\n5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\nOutput\n0\n\n-----Solution-----\n\nn=int(input())\nl=[]\nfor i in range(n):\n    l.append(int(input()))\nl.sort()\nm=[]\nfor i in range(len(l)-1):\n    for j in range(i+1,len(l)):\n        if l[j]%l[i]==0:\n            m.append(l[i]+l[j])\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n2 3 4\\n4 5 6') == '1\\n1 1 3\\n2\\n2 3 4\\n2 3 4\\n2 3 4\\n4\\n4 8 16\\n4 8 16'\nassert solution('2\\n2 3 4\\n4 5 6') == '1\\n1 1 3\\n4\\n4 8 16\\n4 8 16'\nassert solution('1\\n1 2 3') == '1\\n1 1 3'\nassert solution('1\\n1 2 3') == '1\\n1 1 3'\nassert solution('1\\n1 2 3') == '1\\n1 1 3'\n\"\"\"\n\nfrom typing import List, Dict\nimport sys\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1\\n1 1 3'\nassert solution('123 321 456') == '1\\n1 1 3'\nassert solution('5 10 15') == '3\\n2 2 5'\nassert solution('15 18 21') == '1\\n1 1 3'\nassert solution('100 100 101') == '1\\n1 100 101'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 4\") == \"1\\n1 3\\n1 3 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 3\\n1 2 3') == '3\\n1 1 2\\n1 2 3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"\"\"\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\n\"\"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3, 4, 5\") == \"3\"\nassert solution(\"1, 2, 3\") == \"2\"\nassert solution(\"9, 9, 9\") == \"9\"\nassert solution(\"10, 15, 30\") == \"10\"\nassert solution(\"2, 6, 8\") == \"3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"1\\n1 1 3\"\nassert solution(\"123 321 456\") == \"3\\n3 3 6\"\nassert solution(\"5 10 15\") == \"2\\n5 5 10\"\nassert solution(\"15 18 21\") == \"2\\n15 15 18\"\nassert solution(\"100 100 101\") == \"1\\n100 101 101\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('3\\n1 3 3') == '0'\nassert solution('2\\n1 100') == '0'"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 7\") == \"2\"\nassert solution(\"2 1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\nassert solution(\"2\\n100 100\") == 1\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('2\\n1 100') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().strip().split()))\n\ndp = [0] * n\ndp[0] = a[0]\ndp[1] = a[1] - a[0]\n\nfor i in range(2, n):\n    dp[i] = max(a[i] - min(a[:i]), dp[i - 1])\n\nprint(dp[n - 1])\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('10 3\\n4 7 2\\n1 2 1\\n8 9 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 3 0 3\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5 2\\n'\n    '1 3 1\\n'\n    '1 5 1\\n'\n) == '1 2 3 0 3'\n\nassert solution(\n    '3 2\\n'\n    '1 3 1\\n'\n    '1 2 1\\n'\n) == '-1'\n\nassert solution(\n    '10 3\\n'\n    '4 7 2\\n'\n    '1 10 3\\n'\n    '8 9 1\\n'\n) == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3'\nassert solution('''3 2\n1 3 1\n1 2 1\n''') == '-1'\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1\n''') == '2 2 2 1 1 0 4 3 4 4'\nprint('The local tests are done.')"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5 2\n1 3 1\n1 5 1\n''') == \"1 2 3 0 3\"\nassert solution('''\n3 2\n1 3 1\n1 2 1\n''') == \"-\"\nassert solution('''\n10 3\n4 7 2\n1 10 3\n8 9 1\n''') == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n\nimport itertools\nimport numpy as np"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 2 1 1 0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0\"\n\"\"\"\n\nfrom typing import Dict, List"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\n\"\"\"\n\nimport sys\nimport re\n\nn, m = map(int, sys.stdin.readline().strip().split())\n\ns, d, c = [], [], []\nfor _ in range(m):\n    s_, d_, c_ = map(int, re.findall(r'\\d+', sys.stdin.readline().strip()))\n    s.append(s_)\n    d.append(d_)\n    c.append(c_)\n\ndp = [[0] * (n + 1) for _ in range(m + 1)]\nfor i in range(1, m + 1):\n    dp[i][0] = i\nfor i in range(1, n + 1):\n    dp[0][i] = i\n\nfor i in range(1, m + 1):\n    for j in range(1, n + 1):\n        if dp[i - 1][j] + c[i - 1] <= n:\n            dp[i][j] = dp[i - 1][j]\n        else:\n            dp[i][j] = dp[i][j - 1]"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\"\"\"\nimport sys\nimport math\n\nn, m = [int(x) for x in sys.stdin.readline().strip().split(' ')]"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''120 51840''') == '7'\nassert solution('''42 42''') == '0'\nassert solution('''48 72''') == '-1'\n\n\n'''\nFrom Wikipedia: \"The game of Sudoku is a two-player puzzle where the goal is to create a \nsudoku puzzle grid (also known as a sodoku puzzle or a digitized sudoku puzzle) \nconsisting of a 9x9 grid of digits where each cell may contain the digits 1, 2, 3, 4, 5, 6, 7, 8, 9. \nThe puzzle grid contains a special square in the top-left corner of the grid, called the \nnumbers place. The number place contains a number 1 through 9. The remaining squares of the \ngrid contain a fixed number of empty squares, known as the blanks. The number of \nblanks in any given row, column, or sub-grid is always the same and is always equal to \nthe number which appears in the top-left corner of that sub-grid. In Sudoku puzzles, \nthe number which appears in the number place is known as the solution.\"\n\nIn the field of Sudoku the solution is a list of lists of lists of integers.\nEach list of lists corresponds to one of the 9 sub-grids and each integer of that sub-grid\ncorresponds to a digit on that sub-grid.\n\nThe list of lists corresponds to the rows. Each list within the list corresponds to a \nrow. A list of length 9 corresponds to a row. The sub-lists within the list correspond\nto the columns. For each sub-list, the integers correspond to the digits on that column.\n\nThe list of lists corresponds to the columns. Each list within the list corresponds to a \ncolumn. A list of length 9 corresponds to a column. The sub-lists within the list correspond\nto the rows. For each sub-list, the integers correspond to the digits on that row.\n\nThe list of lists corresponds to the sub-grids. Each list within the list corresponds to a \nsub-grid. Each list of length 9 corresponds to a sub-grid. The sub-lists within the list\ncorrespond to the columns. For each sub-list, the integers correspond to the digits on that\nsub-grid."
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\nassert solution(\"13 14\") == \"3\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == '7'\nassert solution(\"42 42\") == '0'\nassert solution(\"48 72\") == '-1'\n\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline().strip()\nm = sys.stdin.readline().strip()"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaaa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catcat\") == \"catcat\"\nassert solution(\"abc\") == \"abcabc\"\nassert solution(\"cccc\") == \"cccccc\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaaa'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\nprint(solution(\"aba\", 3))\nprint(solution(\"cat\", 2))"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('cat') == 'cat'\nassert solution('acat') == 'acat'\nassert solution('acatacat') == 'acatacat'\nassert solution('acatacatcat') == 'acatacatcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'abababa'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaaa') == 'aaaa'\nassert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\n\nInput\n3 2\nabc\n\nOutput\nabcabc\n\nassert solution('') == ''\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catcat\") == \"catcatcatcat\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 6 5 6\") == \"2 1 4\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"3 4 5 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 2, 1, 2, 2) == '3 4 1 5'\nassert solution(4, 8, 3, 5, 2) == '0'\nassert solution(5, 2, 1, 2, 2) == '3 4 1 5'\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0\\n'\nassert solution('1\\n') == '0\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('3\\n') == '0\\n'\nassert solution('4\\n') == '2\\n'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 2 4 3') == '0'\nassert solution('5\\n2 1 2 4') == '4 1 5'\nassert solution('4\\n8 3 5 2') == '2'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\"\nassert solution(\"5\\n8 3 5 2\\n\") == \"2\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"0\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\ngood = sum(a)\n\nsum_to_good = {a[0]}\nfor i in range(1, n):\n    sum_to_good.add(good - sum(a[:i] + a[i + 1:]))\n\nprint(len(sum_to_good))\nprint(' '.join(str(x) for x in sum_to_good))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 5 1 2 2''') == '3\nassert solution('''4\n8 3 5 2''') == '2\nassert solution('''5\n2 1 2 4 3''') == '0'''\n\n\n\n\nclass SumArray(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''5\n2 5 1 2 2'''), '3')\n        self.assertEqual(solution('''4\n8 3 5 2'''), '2')\n        self."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 2 4 3') == '0'\nassert solution('5\\n2 1 2 4 3') == '3'\nassert solution('5\\n8 3 5 2') == '2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nres = 0\n\nfor j in range(n):\n    temp = sum(a) - a[j]\n    for i in range(j+1, n):\n        if a[i] == temp:\n            res += 1\n            break\n\nprint(res)\nfor i in range(res):\n    print(i+1, end=' ')"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n2 1 2 2\\n\"\n) == \"3\\n4 1 5\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 5 2\\n\") == '0'\nassert solution(\"8 3 5 2\\n\") == '2 1 4'\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n\n\"\"\"\n\nfrom itertools import combinations\n\nfrom sys import stdin\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('asdf') == 4\nassert solution('aaaaa') == 15\nassert solution('ajihiushda') == -1\n\n----\n\nHere is some useful info for more complex solutions.\n\nSo, let's look at the task again.\nWe want to find the minimum possible cost of obtaining a set $S$ of size $k$ from the string $s$:\n\nFirst, we check if there are at least $k$ elements in the string.\nIf there are, we make two steps.\n\nFirst, we take all the elements with indices in the range [0; k - 1].\nThen we add all the elements with indices in the range [k; n - 1].\n\nThese steps can be written in the code as follows:\n\n'''"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 asdf\") == \"15\"\nassert solution(\"5 7 asdf\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == expected_result\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\nimport sys\n\na = sys.stdin.readline().split()\nn = int(a[0])\nk = int(a[1])\n\ns = sys.stdin.readline().strip()\n\nt = set()\ncount = 0\n\nfor i in range(n):\n    if s[i] not in t:\n        count += n - i\n        t.add(s[i])\n    else:\n        count += 1"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == -1\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\nassert solution('10 100\\najihiushda') == '233'\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n2 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'NO'\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = defaultdict(list)\n        self.neighbours = [[] for _ in range(n)]\n\n    def add_edge(self, x, y):\n        self.edges[x].append(y)\n        self.edges[y].append(x)\n        self.neighbours[x].append(y)\n        self.neighbours[y].append(x)\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\nfrom typing import Dict, List, Set, Tuple\nfrom collections import defaultdict\nimport queue\nimport itertools\n\n\nclass Graph:\n    def __init__(self, vertices: List[str]) -> None:\n        self.v = len(vertices)\n        self.adjacency_list = defaultdict(set)\n        self.edge_list = set()\n        for edge in vertices:\n            edge = edge.split(\" \")\n            v, u = int(edge[0]), int(edge[1])\n            self.edge_list.add((v, u))\n            self.adjacency_list[v].add(u)\n\n    def find_all_edges(self) -> Set[Tuple[int, int]]:\n        return self.edge_list\n\n    def find_all_vertices(self) -> Set[int]:\n        return set(itertools.chain(*self.adjacency_list.values()))\n\n    def find_all_edges_of_vertex(self, vertex: int) -> Set[Tuple[int, int]]:\n        return set(\n            (u, v)\n            for u, v in self.edge_list\n            if u == vertex or v == vertex\n        )\n\n    def find_all_edges_of_vertices(self, vertices: Set[int]) -> Set[Tuple[int, int]]:\n        return set(\n            edge\n            for vertex in vertices\n            for edge in self.find_all_edges_of_vertex(vertex)\n        )\n\n    def find_all_neighbours(self, vertex: int) -> Set[int]:\n        return self.adjacency_list[vertex]\n\n    def find_all_neighbours_of_vertex(self, vertex: int) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_neighbours(v) for v in self.adjacency_list[vertex])\n        ))\n\n    def find_all_neighbours_of_vertices(self, vertices: Set[int]) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_neighbours_of_vertex(v) for v in vertices)\n        ))\n\n    def find_all_vertices_of_neighbourhood(self, vertex: int) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_vertices_of_neighbourhood(v) for v in self.find_all_neighbours(vertex))\n        ))\n\n    def find_all_vertices_of_neighbourhood_of_vertex(self, vertex: int) -> Set[int]:\n        return self.adjacency_list[vertex]\n\n    def find_all_vertices_of_neighbourhood_of_vertices(self, vertices: Set[int]) -> Set[int]:\n        return set(itertools.chain(\n            *(self.find_all_vertices_of_neighbourhood_of_vertex(v) for v in vertices)\n        ))\n\n    def find_all_neighbourhoods(self) -> Set[Set[int]]:\n        return set(\n            self.find_all_vertices_of_neighbourhood(vertex)\n            for vertex in self.adjacency_list\n        )\n\n    def find_all_neighbourhoods_of_vertex(self, vertex: int) -> Set[Set[int]]:\n        return self.find_all_neighbourhoods_of_vertices({vertex})\n\n    def find_all_neighbourhoods_of_vertices(self, vertices: Set[int]) -> Set[Set[int]]:\n        return set(\n            self.find_all_vertices_of_neighbourhood_of_vertex(vertex)\n            for vertex in vertices\n        )\n\n    def find_all_edges_of_neighbourhood(self, vertex: int) -> Set[Tuple[int, int]]:\n        return set(itertools.chain(\n            *(self.find_all_edges_of_neighbourhood_of_vertex(v) for v in self.find_all_neighbours(vertex))\n        ))\n\n    def find_all_edges_of_neighbourhood_of_vertex(self, vertex: int) -> Set[Tuple[int, int]]:\n        return self.find_all_edges_of_vertices(self.find_all_vertices_of_neighbourhood_of_vertex(vertex))\n\n    def find_all_edges_of_neighbourhood_of_vertices(self, vertices: Set[int]) -> Set[Tuple[int, int]]:\n        return set(itertools.chain(\n            *(self.find_all_edges_of_neighbourhood_of_vertex(v) for v in vertices)\n        ))\n\n    def find_all_neighbourhood_of_neighbourhoods(self, vertex: int) -> Set[Set[int]"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\n'''\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\nassert solution(\n'''\n4 4 3\n1 2\n1 4\n2 3\n3 4\n''') == 'NO'\nassert solution(\n'''\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n1 2\\n1 3\\n1 4\\n3 1\\n3 4'\nassert solution(\n'''\n3 4 2\n1 2\n2 3\n1 3\n''') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n3 2\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport random\n\nsys.setrecursionlimit(1500)\n\n\nclass Node:\n    def __init__(self, num_of_vertices):\n        self.adj_list = [[] for _ in range(num_of_vertices)]\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 2\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\nassert solution('11:10 11:12') == '11:11 11:12'\nassert solution('01:02 03:02') == '02:02 03:02'\n\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11:10 11:12\") == \"11:11\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"10:00 11:00\") == \"10:30\"\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\nprint('Success')\n\n\"\"\"\n\nimport os\nfrom io import StringIO\n\nstdin = \"\"\"\n10:00\n11:00\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\nassert solution(\"10:00\") == \"10:30\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nassert solution('64') == '8'\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"42\") == 6\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 2\nprint('Test 1 OK')\nassert solution(\"2\") == 1\nprint('Test 2 OK')\nassert solution(\"27\") == 5\nprint('Test 3 OK')\nassert solution(\"42\") == 6\nprint('Test 4 OK')"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"3\") == 2\nassert solution(\"6\") == 5\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(1)) == '1'\nassert solution(str(2)) == '2'\nassert solution(str(3)) == '2'\nassert solution(str(4)) == '3'\nassert solution(str(5)) == '3'\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 1\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1\\n'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2\\n'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0\\n'\nassert solution('2\\n3 10\\n1 5\\n') == '7\\n'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 5\\n\") == \"1\"\nassert solution(\"1 3\\n2 6\\n\") == \"1\"\nassert solution(\"1 3\\n0 4\\n\") == \"0\"\nassert solution(\"1 3\\n1 20\\n0 4\\n\") == \"2\"\nassert solution(\"3 10\\n1 5\\n0 4\\n1 20\\n0 4\\n\") == \"7\"\n\n\n'''"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\n\nimport numpy as np"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 3') == '1'\nassert solution('2 6') == '2'\nassert solution('0 4') == '2'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == '0'\nassert solution('2\\n3\\n4\\n5') == '2'\nassert solution('1\\n2\\n3\\n4\\n5') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '1'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n1 3\n2 6\n0 4\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == \"2\"\nassert solution(\"\"\"3\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\nassert solution(\"\"\"2\n3 10\n1 5\n\"\"\") == \"7\"\nassert solution(\"\"\"1\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"4 5 3\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"2 4 1 5\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\n-----UPDATING THE SIZE OF THE WALL-----"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'NO'\nassert solution('''2\n10 10''') == 'YES'\nassert solution('''2\n10 10\n''') == 'NO'\nassert solution('''4\n1 1 2 2\n''') == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('1\\n10') == 'NO'\n\nimport re"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 1 2 5\\n') == 'YES'\nassert solution('3\\n4 5 3\\n') == 'NO'\nassert solution('2\\n10 10\\n') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n4 5 3\\n\") == \"NO\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\n\n'''\nfrom collections import Counter\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 asdf') == '4'\nassert solution('5 6 aaaaa') == '15'\nassert solution('5 7 aaaaa') == '-1'\nassert solution('10 100 ajihiushda') == '233'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == ''\nassert solution('aba') == 'a'\nassert solution('abaca') == 'abaca'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\n\nassert solution(\"5 6\\naaaaa\") == \"15\"\n\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\nassert solution(\"1 1\\n1\") == \"0\"\n\"\"\"\n\n\nfrom typing import Dict\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaaa') == 15\nassert solution('asdf') == 4\nassert solution('ajihiushda') == 233\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaca\") == \"aba\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"aaaaa\") == \"aaa\"\nassert solution(\"aaaaaaaaaaa\") == \"aaaaaaaaaaa\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(111111)\n\nn, k = map(int, input().split())\ns = input()\n\ncosts = []\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"233\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 ajihiushda\") == 15\nassert solution(\"5 7 ajihiushda\") == -1\nassert solution(\"10 100 ajihiushda\") == 233\n\n\n-----Challenge-----\n\nCan you solve it by a faster algorithm?\n\n\"\"\"\n\n\nfrom typing import Dict, List\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ajihiushda\") == 233\nassert solution(\"aaaaa\") == 15\nassert solution(\"\") == 0\nassert solution(\"aaaa\") == 4\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"\n\nimport collections\n\na, b, c = [int(x) for x in input().split()]\n\ndays = collections.defaultdict(int)\nday = 0\n\nfor i in range(7):\n    day = (day + a + b + c) % 7\n    days[day] += 1\n\nprint(max(days.values()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 1 1'\n) == 4\nassert solution(\n    '3 2 2'\n) == 7\nassert solution(\n    '1 100 1'\n) == 3\nassert solution(\n    '30 20 10'\n) == 39\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 100 1') == '3'\nassert solution('3 2 2') == '7'\nassert solution('30 20 10') == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 100 1\"\n) == \"4\"\n\nassert solution(\n    \"3 2 2\"\n) == \"7\"\n\nassert solution(\n    \"30 20 10\"\n) == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 100 1\") == 3\nassert solution(\"2 1 1\") == 4\nassert solution(\"3 2 2\") == 7\nassert solution(\"30 20 10\") == 39\n\"\"\"\n\nfrom collections import deque\n\nfrom collections import deque\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"NO\"\n\n\n-----Test 2-----\nInput\n1\n3 4\n1 2\n3 4\n1 2\n1 2\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n3 4\\n5 6\\n3 4\") == 'YES'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'NO'\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'YES'\nassert solution('1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'NO'\nassert solution('1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4\") == \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n1 1\") == 'NO'\nassert solution(\"2 2\\n1 1\\n2 2\") == 'YES'\nassert solution(\"2 2\\n1 1\\n1 2\") == 'NO'\nassert solution(\"1 100\\n10 10\") == 'YES'\nassert solution(\"1 1\\n1 1\") == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n3 4') == \"YES\"\nassert solution('6\\n3 4') == \"YES\"\nassert solution('6\\n3 4') == \"YES\"\nassert solution('6\\n3 4') == \"NO\"\nassert solution('6\\n3 4') == \"NO\"\n\n-----Time limit-----\n\n10 seconds.\n-----Memory limit-----\n\n64 MB.\n-----Subtasks-----\n\nSubtask #1: 100 points\n\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n * 2):\n        matrix.append([int(x) for x in input().split()])\n    \n    # print(matrix)\n    \n    # s = [[0] * n] * n\n    \n    # for i in range(n):\n    #     for j in range(n):\n    #         s[i][j] = matrix[i][j]\n    \n    # print(s)\n    \n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                continue\n            elif j > i:\n                continue\n            \n            elif matrix[i][j]!= matrix[j][i]:\n                print(\"NO\")\n                break\n    else:\n        print(\"YES\")"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 7\\n\"\n    \"8 4\\n\"\n    \"9 8\\n\"\n    \"5 6\\n\"\n    \"7 2\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"2 2\\n\"\n    \"2 1\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"2 2\\n\"\n    \"2 1\\n\"\n    \"1 1\\n\"\n) == \"YES\"\n\n\n\n-----Masha-----\nYou are given a positive integer $n$. You have to construct a square matrix of size $n \\times n$ by following the steps:\n\nWrite a positive integer $m$ and a matrix $A$ of size $m \\times m$ with integers from 1 to $m^2$.\nChoose $n - m$ nonnegative integers $a_1, \\ldots, a_{n - m}$ such that $a_i \\geq 2a_{i + m}$, where $i$ is a number from $1 \\ldots n - m$, and write $A$ in the following way:\n1. $A$ is the unit matrix of size $m \\times m$: $A[i][j] = 0$, for all $i, j \\in [1 \\ldots m]$, and\n2. $A$ is written so that:\n3. $A$ is symmetric: $A[i][j] = A[j][i]$ for all $i, j \\in [1 \\ldots m]$.\n4. $A$ is constructed such that its main diagonal contains $a_1, \\ldots, a_{n - m}$, and\n5. $A$ is constructed so that each row contains exactly one of the numbers $1, \\ldots, m^2$ with no repeats.\nYou can choose any strategy.\n\nFor example, if $n = 10$, then the following matrix is given:\n\n\n1 1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9\n10 10 10 10 10 10 10 10 10 10\nYou can choose $n = 10$, $m = 3$, and the numbers $a_1, \\ldots, a_{10 - 3}$ such that $a_i \\geq 2a_{i + 3}$ are $2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2, 5, 6, 7, 8, 9, 10, 2,"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\n\nprint(\"The local tests are done. Click on 'Check' to review your solution and earn cool rewards!\")"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == 0\nassert solution('5\\n') == 1\nassert solution('6\\n') == 1\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(()))()\") == \"5\"\nassert solution(\"(()))\") == \"4\"\nassert solution(\"(((()))())\") == \"5\"\nassert solution(\"(()(()))()\") == \"4\"\nassert solution(\"((((((((((((((((((())))))))))))))))))))\") == \"0\"\n\"\"\"\n\n\n\n\"\"\"\n16. Ugly numbers\nUgly numbers are numbers whose only prime factors are 2, 3 or 5. The sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, \u2026 shows the first 11 ugly numbers. By convention, 1 is included.\n\nGiven a number n, the task is to find n\u2019th Ugly number.\n\nUgly numbers are numbers whose only prime factors are 2, 3 or 5.\n\nThe sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, \u2026 shows the first 11 ugly numbers.\n\nBy convention, 1 is included.\n\nInput Format:\nThe first line contains a single integer n.\n\nOutput Format:\nPrint a single line denoting the n\u2019th ugly number.\n\nSample Input:\n6\n\nSample Output:\n8\n\nExplanation:\nThe 6th ugly number is 8.\n\"\"\"\n\n\n\n\"\"\"\n14. Division\nA number d is called divisible by another number n if d % n = 0.\n\nGiven two integers a and b, the task is to count the number of divisors of a in the range [a, b].\n\nInput Format:\nThe first line contains an integer T, number of test cases.\nFor each test case, there are 2 lines. The first line contains an integer a and the second line contains an integer b.\n\nOutput Format:\nFor each test case, print the number of divisors of a in the range [a, b] modulo 10^9+7.\n\nSample Input:\n3\n2 5\n3 10\n1 100\n\nSample Output:\n2\n2\n2\n\nExplanation:\nTest Case 1: The divisors of 2 in the range [2, 5] are 2, 4, and 5, so the number of divisors is 2+2+2 = 6.\n\nTest Case 2: The divisors of 3 in the range [3, 10] are 3, 6, 9, and 10, so the number of divisors is 3+3+3+3 = 12.\n\nTest Case 3: The divisors of 1 in the range [1, 100] are 1, 2, 4, 5, 10, 20, 25, 50, and 100, so the number of divisors is 1+1+1+1+1+1+1+1+1+1 = 9.\n\"\"\"\n\n\n\n\"\"\"\n12. Fancy Sequence\nA sequence is called fancy if there are no two adjacent elements whose difference is 1. The difference of 2 and 1 is 1, the difference of 4 and 2 is 3 and so on. If there is some element which is part of the sequence then it will be marked as fancy. The problem is to count the number of fancy subsequences of length n.\n\nExample: Let the input be {4, 2, 1, 3, 5}. The output should be 3. Let the input be {2, 1, 4, 3, 5}. The output should be 3. Let the input be {1, 3, 5}. The output should be 0.\n\nInput Format:\nThe first line of the input contains an integer N (1 \u2264 N \u2264 100) \u2014 the length of the sequence.\nThe second line of the input contains N distinct integers from 1 to 100, each separated by a space.\n\nOutput Format:\nPrint the number of fancy subsequences of length N.\n\nSample Input:\n5\n4 2 1 3 5\n\nSample Output:\n3\n\nSample Input:\n5\n2 1 4 3 5\n\nSample Output:\n3\n\nSample Input:\n5\n1 3 5 2 4\n\nSample Output:\n0\n\nExplanation:\nThere are 3 subsequences of length 5: {1, 2, 3, 4, 5} {1, 3, 4, 5} and {3, 4, 5}. But none of them is fancy.\n\"\"\"\n\n\n\n\"\"\"\n10. Sorting\nGiven a sequence, find the length of the longest increasing subsequence (also called longest increasing sub-sequence) in it.\n\nExample:\n\nThe longest increasing subsequence of {5, 4, 3, 2, 1} is {1, 2, 3, 4, 5}.\nThe longest increasing subsequence of {5, 1, 3, 2, 4} is {1, 2, 3, 4, 5}.\nThe longest increasing subsequence of {1, 3, 2, 4, 5} is {1, 2, 3, 4, 5}.\nThe longest increasing subsequence of {1, 2, 3, 4, 5} is {1, 2, 3, 4, 5}.\n\nNote that the last answer is unordered.\n\nInput Format:\nThe first line of input contains an integer T denoting the number of test cases.\nThe first line of each test case contains an integer N.\nThe second line of each test case contains N space-separated integers.\n\nOutput Format:\nFor each test case, print the length of the longest increasing subsequence in the given sequence.\n\nSample Input:\n1\n7\n2 4 3 9 5 6 1\n\nSample Output:\n5\n\"\"\"\n\n\n\n\"\"\"\n11. String Transforms Into Another String\nGiven a string s and a string t, transform string t into string s by deleting and inserting characters. You can transform t into s in any way that maximizes the number of equal substrings of the string t in string s.\n\nAn equal substring of a string is a substring that remains the same after any number of deletions and insertions.\n\nReturn the maximum possible number of equal substrings of string t in string s after performing the above operations.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/subdomain-visit-count/\n\nExample 1:\n\nInput: s = \"abacb\", t = \"cba\"\nOutput: 3\nExplanation: The substrings of t that appear in s are \"c\", \"b\" and \"c\".\nAfter deleting \"c\" and inserting \"c\" in \"abacb\", we have \"aba\" in s, so the number of equal substrings is 3.\n\nExample 2:\n\nInput: s = \"abacb\", t = \"b\"\nOutput: 1\nExplanation: The substrings of t that appear in s are \"b\", \"c\", \"b\", \"a\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((())))\" == 4\nassert solution(\"((()))()\") == 4\nassert solution(\"((())())\" == 4\nassert solution(\"((()))()\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(()((()))())\") == 4\nassert solution(\"()((()())())\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('()))()') == '5'\nassert solution('(((()))())') == '4'\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\")(\") == \"0\"\nassert solution(\")()(\") == \"4\"\nassert solution(\"())(\") == \"0\"\nassert solution(\"((()))(\") == \"4\"\nassert solution(\"((())))(\") == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 0\nassert solution(\"(()())()\") == 0\nassert solution(\"(()()())()\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((((((((((((())))))))))))))\") == 5\nassert solution(\"()))())\") == 4\nassert solution(\"(((((((((((((())))))))))))))))\") == 0\nassert solution(\"(((((((((((((())))))))))))))\") == 4\n\nassert solution(\"((())((()())())())\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(((()))())\") == \"4\"\nassert solution(\"((()()))()\") == \"0\"\nassert solution(\"(((()))())\") == \"4\"\nassert solution(\"((()()))()\") == \"4\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(()()))()\") == 4\nassert solution(\"(((()))())\") == 4\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\",(((\") == 4\nassert solution(\"(((\") == 4\nassert solution(\"))()()((((((\") == 0\n\"\"\"\n\n\nfrom itertools import chain\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\nassert solution('100100100100100100100') == 9\nassert solution('152657') == 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == 4\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5678\") == 1\nassert solution(\"567\") == 1\nassert solution(\"678\") == 1\nassert solution(\"6\") == -1\nassert solution(\"7\") == 0\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5071') == 4\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\n\n-----\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"705\") == 1\nassert solution(\"5071\") == 4\nassert solution(\"1241367\") == -1\n\"\"\"\n\nimport math"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdedc\") == \"1 1 2 1 2 1 2 1\"\nassert solution(\"aaabbcbb\") == \"1 2 1 2 1 2 1 2 1\"\nassert solution(\"abcde\") == \"1 1 1 1 1 2 3\"\nassert solution(\"aaaaaaaaaaaaa\") == \"1 1 1 1 1 1 1 1 1 1 1\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aba') == 'aba'\nassert solution('abacbacba') == 'abacbacba'\nassert solution('abacbacbc') == 'abacbacba'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == '2', 'error in solution'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"eeeeee\") == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcdedc') == '1 1 1 1 1 2 3'\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1'\nassert solution('abcde') == '1 1 1 1 1'\nassert solution('aba') == '1 2 1 2'\nassert solution('bb') == '1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\n\na = \"abacbecfd\"\nb = \"aaabbcbb\"\nc = \"abcdedc\"\nd = \"abcde\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"1 1 1 1 2 3\"\nassert solution(\"abacd\") == \"1 1 2 1 1 2 3\"\nassert solution(\"abacbe\") == \"1 1 2 1 2 2 3\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\naaa''') == '1 1 1 1 1'\nassert solution('''6\naabcd''') == '1 1 1 2 1'\nassert solution('''10\nabacbeefd''') == '2 1 1 1 1 1 1 2 3 1'\n\"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == 2, \"WA\"\nassert solution(\"aaabbcbb\") == 2, \"WA\"\nassert solution(\"abcdedc\") == 3, \"WA\"\nassert solution(\"abcde\") == 1, \"WA\"\nassert solution(\"abcdef\") == 1, \"WA\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9\nabacbecfd''') == '2\nassert solution('''8\naaabbcbb''') == '2\nassert solution('''7\nabcdedc''') == '3\nassert solution('''5\nabcde''') == '1\nassert solution('''6\nabcdef''') == '1\n\nsolution(stdin.readlines())\n\n\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd') == 'NO'\nassert solution('abacaba') == 'YES'\nassert solution('qwerty') == 'YES'\nassert solution('qwerty') == 'YES'\nassert solution('qwerty') == 'YES'"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abba\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcda\") == \"YES\"\nassert solution(\"abcdba\") == \"YES\"\nassert solution(\"abacba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n\nassert solution(\"q\\nq\\nq\\n\") == \"YES\\nq\\nq\\nq\\n\"\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"abba\") == \"NO\"\nassert solution(\"abbacaba\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"a\") == \"NO\"\nassert solution(\"abacaba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nq"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('qwerty') == 'YES'\nassert solution('qwerty') == 'qwerty'\nassert solution('qwerty') == 'NO'\nassert solution('qwerty') == 'NO'\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\na\\naba\\nabacaba\\nba\\naba\\n') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\nassert solution('3\\nqwerty\\nqwerty\\nqwerty\\n') == 'YES\\nqwerty\\nqwerty\\nqwerty\\n'\nassert solution('2\\nqwerty\\nqwerty\\n') == 'NO\\n'\nassert solution('5\\na\\naba\\nabacaba\\nba\\naba\\n') == 'NO\\n'\nassert solution('5\\na\\naba\\nabacaba\\nba\\naba\\n') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"0\"\nassert solution(\"7 2\") == \"5\"\nassert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == '0'\nassert solution(\"5 100\\n12 34 55 43 21\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == '5'\nassert solution('3 1 2 1 3') == '0'\nassert solution('5 100') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"8 4\"\n) == \"5\"\nassert solution(\n    \"5 2\"\n) == \"0\"\nassert solution(\n    \"5 100\"\n) == \"5\"\nassert solution(\n    \"12 34 55 43 21\"\n) == \"5\"\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 1 3 1 2\") == \"0\"\nassert solution(\"5 100 12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\n\"\"\"\n\nimport sys\n\n_ = input()\narr = list(map(int, sys.stdin.readline().split()))\n_ = input()\nk = int(input())\n\nleft, right = 0, len(arr) - 1\nres = 0\nwhile left <= right:\n    if arr[left] <= k:\n        res += 1\n        left += 1\n    if arr[right] <= k:\n        res += 1\n        right -= 1\nprint(res)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == 5\nassert solution(\"5 2\\n3 1 2 1 3\") == 0\n\"\"\"\n\na = input().split()\nb = input().split()\na = [int(i) for i in a]\nc = a[0]\nc = int(a[1])\ni = 0\ncount = 0\nwhile i <= len(a) - 1:\n    if b[i] <= c:\n        c -= b[i]\n        count += 1\n    else:\n        break\nprint(count)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n2 3 4 1 2 5') == '5'\nassert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '7'\nassert solution('1 1') == '0'\nassert solution('4 4') == '12'\nassert solution('3 9') == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 0') == '1'\nassert solution('0 2') == '0'\nassert solution('4 4') == '12'\nassert solution('3 9') == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3', 'Wrong answer'\nassert solution('1 1') == '0', 'Wrong answer'\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcdef\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"YES\\n01010\"\nassert solution(\"bcaa\") == \"YES\\n10010\"\nassert solution(\"abcb\") == \"NO\"\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"YES\"\nassert solution(\"aabbccdd\") == \"YES\"\nassert solution(\"aabbccdda\") == \"YES\"\nassert solution(\"aabbccdca\") == \"NO\"\nassert solution(\"aabbccdcaa\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"abcdedc\") == \"YES\\n01011011\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcde\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"abcdedc\") == \"YES\\n01011011\"\nassert solution(\"abcde\") == \"NO\"\n\n\n-----"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n\"\"\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('abcef') == 'abcef'\nassert solution('abd') == 'abd'\nassert solution('abcdef') == 'abcdef'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"YES\"\nassert solution(\"aabbcc\") == \"YES\"\nassert solution(\"aabb\") == \"YES\"\nassert solution(\"aaabbb\") == \"NO\"\nassert solution(\"a\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('abac') == 'YES'\nassert solution('bb') == 'YES'\nassert solution('aaabbbb') == 'YES'\nassert solution('bbc') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\n\"\"\"\nimport sys\nimport re\nimport math\nimport collections\nfrom typing import DefaultDict, List, Set, Dict, Tuple, Optional\n\nDEBUG = False\ndata = sys.stdin.read().splitlines()"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('A 0') == -1\nassert solution('A A') == -1\nassert solution('A 1') == -1\nassert solution('A -1') == -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '25'\nprint(solution('2 2'))\n\nassert solution('2 10') == '-1'\nprint(solution('2 10'))\n\nassert solution('20 20') == '-1'\nprint(solution('20 20'))\n\nassert solution('100 1000') == '-1'\nprint(solution('100 1000'))\n\nassert solution('10 10') == '25'\nprint(solution('10 10'))"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1) == 1\nassert solution(1, 2) == 2\nassert solution(2, 2) == 4\nassert solution(1, 5) == 5\nassert solution(2, 5) == 5\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 0\") == \"-1\"\nassert solution(\"0 1\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 3') == '-1'\nassert solution('1 1') == '-1'\nassert solution('2 6') == '-1'\nassert solution('3 2') == '10'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\nassert solution(\n    '2 2'\n) == '25'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"6 1\") == 10\nassert solution(\"1 1\") == -1\nassert solution(\"4 3\") == -1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\nassert solution('5 15') == '-1'\nassert solution('10 100') == '100'\nassert solution('100 100') == '-1'\nassert solution('5 10') == '10'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2\\n1 1\") == \"YES\\n1 1\"\nassert solution(\"1 2\\n2 2\") == \"YES\\n1 1\"\nassert solution(\"1 2\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"26 6\\n\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\\n\") == \"NO\\n\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"9 4\\n\") == \"NO\\n\"\n\nprint(solution(\"8 3\\n\"))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n\") == \"NO\"\nassert solution(\"10 9\\n\") == \"YES\\n1 2 3 5 7 8 10\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"1 10\\n\") == \"NO\"\nassert solution(\"2 8\\n\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES\\n1'\nassert solution('1\\n1') == 'YES\\n1'\nassert solution('1\\n2') == 'NO'\n\nassert solution('3\\n3') == 'NO'\nassert solution('3\\n4') == 'YES\\n3'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\nprint(solution(\"26 6\"))\nprint(solution(\"8 3\"))\nprint(solution(\"1 1\"))\nprint(solution(\"9 4\"))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1\\n') == 'YES\\n1\\n', solution('1 1\\n1\\n')\nassert solution('9 4\\n1 2 3 4 5 6 7 8\\n') == 'NO\\n', solution('9 4\\n1 2 3 4 5 6 7 8\\n')\nassert solution('9 4\\n2 3 4 5 6 7 8\\n') == 'YES\\n1 1\\n', solution('9 4\\n2 3 4 5 6 7 8\\n')\nassert solution('9 4\\n2 1 5 4 3 6 7 8\\n') == 'NO\\n', solution('9 4\\n2 1 5 4 3 6 7 8\\n')\nassert solution('9 4\\n2 1 4 3 6 7 8\\n') == 'YES\\n1 1\\n', solution('9 4\\n2 1 4 3 6 7 8\\n')\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == 'YES\\n1 2 3'\nassert solution(\"3 1\") == 'YES\\n1'\nassert solution(\"7 9\") == 'NO'\n\"\"\"\n\nfrom collections import Counter\n\nn, k = [int(x) for x in input().split()]\nans = []\nc = Counter(list(range(1, n + 1)))\nfor i in range(k):\n    ans.append(sum(x for x in c.values() if x > 0))\n    c[ans[-1]] -= 1\nprint('NO' if sum(ans)!= n else 'YES' + '\\n' + '\\n'.join([str(x) for x in ans]))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\\n\"\nassert solution(\"3 5\") == \"NO\\n\"\nassert solution(\"100 200\") == \"NO\\n\"\nassert solution(\"7 3\") == \"NO\\n\"\nassert solution(\"9 9\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n6 5\n\"\"\") == 'YES'\nassert solution(\n    \"\"\"\n26 6\n\"\"\") == 'YES'\nassert solution(\n    \"\"\"\n9 4\n\"\"\") == 'NO'\nassert solution(\n    \"\"\"\n1 1\n\"\"\") == 'YES'\nassert solution(\n    \"\"\"\n1 2\n\"\"\") == 'NO'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 5\n\nprint(\"Successfully passed all test cases!\")"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == 3\n\nassert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == 5\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5') == '5'\nassert solution('1\\n10\\n-1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\n\n\"\"\"\n\nn, r = [int(i) for i in input().split(' ')]\nt = []\nfor i in range(n):\n    t.append([int(j) for j in input().split(' ')])\nd = dict(zip([i for i in range(n)], t))\n\nres = 0\nfor i in range(n):\n    res = max(res, (r - sum(d[i]) if sum(d[i]) > r else r - sum(d[i]) + len(d[i])))\n\nprint(res)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 4\n4 6\n10 -2\n8 -1\n\"\"\") == 3\nassert solution(\"\"\"5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n\"\"\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == 3\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == '3'\n\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1 3 3 3 3\") == \"YES\"\nassert solution(\"1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n\n\"\"\"\n\n\nclass Solution:\n    def is_palidromic(self, mat, n):\n        if len(set(mat))!= n:\n            return False\n        for i in range(n):\n            if mat[i][:]!= mat[i][::-1]:\n                return False\n        for j in range(n):\n            col = [mat[i][j] for i in range(n)]\n            if col!= col[::-1]:\n                return False\n        return True\n\n    def solution(self, stdin):\n        n = int(stdin.strip())\n        mat = [list(map(int, stdin.strip().split(' '))) for i in range(n)]\n        if self.is_palidromic(mat, n):\n            for i in range(n):\n                for j in range(n):\n                    print(mat[i][j], end=\" \")\n                print()\n            return\n        return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1 1\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"NO\\n\"\n\n-----Debug-----\n\npdb.set_trace()\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\\n\") == \"YES\\n10\"\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\") == \"NO\"\n\n\"\"\"\n\nn = int(stdin.readline())\n\nnumbers = sorted(list(map(int, stdin.readline().split())))\n\nresult = \"NO\"\n\nnums = []\nnums_unique = []\nfor n in numbers:\n    if n not in nums_unique:\n        nums_unique.append(n)\n        nums.append(n)"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n'\nassert solution('3 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n'\nassert solution('4 1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO\\n'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n'\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1 1 3 3 3 3\\n') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3\\n') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n') == 'NO'\nassert solution('1\\n10\\n') == 'YES\\n10'\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'YES'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('5 2') == 'NO'\nassert solution('10 -5') == 'YES'\nassert solution('10 -2') == 'YES'\nassert solution('10 0') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'YES'\nassert solution('4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('4 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\n\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\n\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n5 -2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"3 4\\n4 6\\n4 -2\\n1 3\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\") == \"YES\"\n\n'''\n\nimport sys\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\nassert solution('10 1 2\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\n\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\n\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nassert solution(\"7 1 5\\n3\") == \"NO\"\n\nassert solution(\"7 1 5\\n6\") == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nstdin = open(0)"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\n\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\n\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\n\nimport numpy as np"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result\nprint('Test Completed')\n\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 0\nassert solution(\"se\") == 1\n\"\"\"\n\ns = input()\nt = input()\n\nd = {}\nfor i in range(len(s)):\n    d[s[i]] = i\nfor i in range(len(t)):\n    try:\n        index = d[t[i]]\n    except KeyError:\n        print(0)\n        exit()\n    for j in range(index, len(s)):\n        d[s[j]] = j\n        if len(s[index:j+1]) == len(t):\n            print(len(s[index:j+1]))\n            exit()\nprint(len(s[index:j+1]))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 3\nassert solution(\"se\") == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('test') == 3\nassert solution('tst') == 3\nassert solution('tt') == 2\nassert solution('et') == 3\nassert solution('') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 3\nassert solution(\"\") == 0"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"e\") == 0\nassert solution(\"tt\") == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"aaaaa\") == 1\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('sdfasd') == 3\nassert solution('abcde') == 0\nassert solution('12345') == 0\n\"\"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('aa') == 0\nassert solution('aaab') == 1\nassert solution('abab') == 1\nassert solution('abab') == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"asdfasdf\") == 3\nassert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 2\n\"\"\"\n\ns, t = input().strip(), input().strip()\nd = {}\n\nfor i, c in enumerate(s):\n    d[c] = i\n\nfor c in t:\n    if c in d:\n        d.pop(c)\n\nprint(max(d.values()) + 1)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 3\nassert solution(\"ab\") == 1\nassert solution(\"sdfsf\") == 0\nassert solution(\"sdfsfasdf\") == 3\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"1.200000\"\n) == \"3 2\"\nassert solution(\n\"2.572479\"\n) == \"10 3\"\nassert solution(\n\"4.024922\"\n) == \"9 9\"\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n\nfrom math import floor, log10\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.2') == '1 9'\nassert solution('2.00') == '2 8'\nassert solution('2.03') == '2 9'\nassert solution('2.07') == '3 9'\nassert solution('3.4') == '5 5'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4.024922') == '9 9'\nassert solution('1.200000') == '3 2'\n\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3\\n\") == \"YES\"\nassert solution(\"6 3 3\\n\") == \"NO\"\nassert solution(\"10 4 3\\n\") == \"YES\"\nassert solution(\"8 5 3\\n\") == \"YES\"\n\n'''\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 3\\n1 2\\n4 1\\n1 3\") == \"YES\"\nassert solution(\"6 3 3\\n1 2\\n4 1\\n1 3\\n5 2\\n2 6\") == \"NO\"\nassert solution(\"6 2 3\\n1 2\\n4 1\\n1 3\\n5 2\\n2 6\") == \"YES\"\nassert solution(\"8 5 3\\n1 2\\n4 1\\n1 3\\n5 6\\n2 7\\n3 8\\n6 7\\n8 2\\n4 3\") == \"YES\"\nassert solution(\"10 4 3\\n1 2\\n4 1\\n1 3\\n5 6\\n2 7\\n3 8\\n6 7\\n8 2\\n4 3\\n5 10\\n3 9\\n7 10\\n9 1\") == \"NO\"\n\nimport re"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 3\\n') == 'YES\\n1 2\\n3 4'\nassert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nn, d, k = map(int, input().strip().split())\n\ng = [[] for i in range(n)]\n\nfor i in range(n - 1):\n    a, b = map(int, input().strip().split())\n    a, b = a - 1, b - 1\n    g[a].append(b)\n    g[b].append(a)\n\nimport collections\n\nq = collections.deque([[0, 0]])\nd = [None] * n\nwhile q:\n    p, dp = q.popleft()\n    for np in g[p]:\n        if d[np] is not None:\n            continue\n        ndp = dp + 1\n        if dp > d[np]:\n            continue\n        if ndp >= k:\n            continue\n        d[np] = ndp\n        q.append([np, ndp])"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"5 5 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 2\") == \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1100\") == \"1100\"\nassert solution(\"0011\") == \"1100\"\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"11101\") == \"110010\"\nassert solution(\"11110\") == \"100110\"\nassert solution(\"111110\") == \"011001\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100110\") == \"110010\"\n\"\"\"\n\n\nimport sys\nimport itertools\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11101') == '101010'\nassert solution('111001') == '101100'\nassert solution('101101') == '101110'\nassert solution('111010') == '101110'\nassert solution('111111') == '111010'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 6') == '101100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\nassert solution('5 3 6') == '01010100'"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 1') == '1100'\n\nassert solution('3 3 3') == '101100'\n\nassert solution('5 3 6') == '01010100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ba\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ac\") == \"abc\"\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom collections import Counter\n\nn = int(input())\ns = input()\nt = input()\n\ncount = Counter(s)"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"cb\"\nassert solution(\"ca\") == \"cac\"\nassert solution(\"bb\") == \"cbb\"\nassert solution(\"abcc\") == \"acbac\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"cb\") == \"cacbacb\"\nassert solution(\"aa\") == \"cacbacb\"\nassert solution(\"bc\") == \"abc\"\nassert solution(\"ca\") == \"acb\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"acb\"\n\nassert solution(\"bc\") == \"cba\"\n\nassert solution(\"ca\") == \"cab\"\n\nassert solution(\"cb\") == \"cab\"\n\nassert solution(\"cc\") == \"ccb\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"NO\"\nassert solution(\"bc\") == \"NO\"\nassert solution(\"ca\") == \"bb\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"acbbac\"\nassert solution(\"bb\") == \"acbbacb\"\nassert solution(\"\") == \"abc\"\nassert solution(\"a\") == \"ab\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"cab\"\nassert solution(\"aa\") == \"cac\"\nassert solution(\"ac\") == \"acbac\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"bbac\"\nassert solution(\"bb\") == \"cba\"\nassert solution(\"cc\") == \"cba\"\nassert solution(\"bc\") == \"bbac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cab\"\nassert solution(\"bb\") == \"acb\"\nassert solution(\"ac\") == \"cab\"\n\n-----Input-----\n4\na\nbc\n\n-----Output-----\nYES\nbacb\n\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3 1 2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\nassert solution('4 1 2') == '4 1 2'\nassert solution('5 1 -1') == '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n\") == '3 1 2'\nassert solution(\"5\\n1 1 1 1\\n\") == '1 2 3 4 5'\nassert solution(\"4\\n-1 2 2\\n\") == '-1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"1 2 3 4\"\nassert solution(\"7 3 2\") == \"3 1 4 2 7\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 -1 2\") == \"5 1 2 3 4\"\nassert solution(\"4 1 -1\") == \"1 2 3 4\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n-1 1\") == \"1 2\"\nassert solution(\"4\\n1 1 1 1\") == \"1 2 3 4\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1 2 3 4 5 6\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"-1\"\nassert solution(\"4\\n-1 2 2\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 -2 1') == '3 1 2'\nassert solution('5 -1 2') == '-1'\nassert solution('4 1 2') == '1 2 3 4'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 2\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 -1 2\") == \"4 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\n\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n\"\"\"\nimport sys\nimport logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s : %(levelname)s : %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S',\n    handlers=[logging.FileHandler('../log.txt'), logging.StreamHandler(sys.stdout)])"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"2\\n1 2\") == \"1\"\n\"\"\"\n\nn = int(input())\n\nlst = [int(i) for i in input().split()]\n\ndp = [0 for i in range(n)]\ndp[0] = abs(lst[0] - lst[1])\n\nfor i in range(1, n):\n    dp[i] = dp[i - 1] + abs(lst[i] - lst[i - 1])\n\nprint(dp[n - 1])\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 2 3 3\") == \"2\"\nassert solution(\"5\\n1 2 2 3 3\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == 5\nassert solution('4') == 0\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('0') == 0\n\"\"\"\n\nfrom sys import stdin\nimport math\nimport pdb"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"5\"\nprint(solution(\"10\"))\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('3') == '3'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5') == '5'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2\\n0 1 1\\n1 1 0'\n) == '0 1'\nassert solution(\n    '3\\n0 0 3\\n3 0 0'\n) == '3 3'\nassert solution(\n    '686\\n479 178 29\\n11 145 530'\n) == '22 334'\nassert solution(\n    '319\\n10 53 256\\n182 103 34'\n) == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\") == \"1 2\"\nassert solution(\"3 2 1\") == \"1 2\"\nassert solution(\"1 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"1 0 0\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1\\n1 1 0\") == \"0 1\"\nassert solution(\"1\\n0 0 3\") == \"0 1\"\nassert solution(\"3\\n0 0 3\") == \"0 3\"\nassert solution(\"3\\n5 5 5\") == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"0 22\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"1 119\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == (\"0 0\", \"0 0\")\nassert solution(\"1 1 1\") == (\"0 0\", \"0 0\")\nassert solution(\"3 0 3\") == (\"1 2\", \"2 1\")\nassert solution(\"3 1 1\") == (\"1 1\", \"1 1\")\nassert solution(\"3 1 2\") == (\"2 2\", \"0 0\")\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\nimport sys\nfrom collections import defaultdict, deque\nfrom typing import Deque, List, DefaultDict, Tuple\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 3\\n2 0 0\") == \"0 1\"\nassert solution(\"3\\n1 1 3\\n0 1 0\") == \"0 2\"\nassert solution(\"3\\n1 2 3\\n0 1 0\") == \"0 1\"\nassert solution(\"3\\n1 2 3\\n1 0 0\") == \"0 2\"\nassert solution(\"3\\n1 2 3\\n2 0 0\") == \"0 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n4 1 2 2 1 5 3\n''') == '3'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\n\nassert solution('''5\n4 1 2 2 1 5 3\n''') == '3'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"1 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 2 1 5 3') == \"3\"\nassert solution('7 1 2 2 1 5 3') == \"3\"\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == \"2\"\nassert solution('4 1 1 1') == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('7 5 4 3 2 1') == '2'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4 1 1 1') == '4'\nassert solution('1 1 1 1') == '4'\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 1 1 1\n''') == '4\\n4\\n1 1\\n2 2\\n3 3\\n'\n\n\"\"\"\n\nfrom collections import Counter\n\na = Counter(map(int, stdin.split('\\n')[1].split()))\nprint(a.most_common(1)[0][1])\nprint(*map(lambda x:''.join(map(str, x)), a.most_common(1)[0][0]))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"7\\n4 1 2 2 1 5 3\"\n) == \"3\\n7 7\"\nassert solution(\n\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\n) == \"2\\n3 4\"\nassert solution(\n\"4\\n1 1 1 1\"\n) == \"4\\n4 4\"\nassert solution(\n\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\n) == \"2\\n3 4\"\nassert solution(\n\"4\\n1 1 1 1\"\n) == \"4\\n4 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('4\\n0 0 0 0') == '4\\n4 4'\nassert solution('4\\n-1 -2 -3 -4') == '4\\n1 1'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\n\"\"\"\n\n\"\"\"\nThe idea is to sort the numbers first, then to merge them into one list.\nThe idea of the solution is to work through a matrix with the last row being the sorted list and to drop out the lowest number of the row in each step."
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"2 2 2\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 1 2\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n3 1 2') == 'NO'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nassert solution(\"4 1 5 3\") == \"YES\"\nassert solution(\"6 6 6 6 6 6\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 3 1 2') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"acbd\") == \"abdc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aaaa\") == \"aaaa\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"abdfec\") == 4\nassert solution(\"abcdef\") == 3\n\nstdin = input().splitlines()\nassert len(stdin) == 2\nassert len(stdin[0]) == 5\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"acd\") == -1\nassert solution(\"abdcef\") == 4\n\n\"\"\"\n\nimport sys\nimport unittest\nfrom collections import deque\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcde\") == \"abcdec\"\nassert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"accd\") == \"accd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(data) == expected\n\nprint('Hooray!')\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcd') == '0'\nassert solution('accd') == '-1'\nassert solution('abccd') == '4'\nassert solution('abcde') == '5'\nassert solution('abcdee') == '3 5 4 5'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"accd\") == -1\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abdcef') == 'abdcef'\nassert solution('abcdef') == 'abdcef'\nassert solution('abdcfe') == 'abdcef'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"S\"\nassert solution(\"ab\") == \"P\"\nassert solution(\"ac\") == \"S\"\nassert solution(\"abc\") == \"S\"\n\nassert solution(\"aaa\") == \"PPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nba\\n\\na\\n\\nabab\\n\\na\\n\\nab\\n\\naba\\n\\n\") == 'SPPSPSPS'\nassert solution(\"3\\n\\n\\na\\n\\n\\naa\\n\\n\\n\\n\\naa\\n\\n\\n\\na\") == 'PPSS'\nassert solution(\"2\\n\\n\\na\\n\\n\\n\\n\\naa\\n\\n\\n\\n\\naa\\n\\n\\n\\na\") == 'PS'\nassert solution(\"2\\n\\na\\n\\n\\naa\\n\\n\\n\\n\\n\\naa\\n\\n\\n\\na\") == 'PS'\nassert solution(\"5\\nba\\n\\na\\n\\nabab\\n\\na\\n\\nab\\n\\naba\\n\\n\") == 'SPSPSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"S\"\nassert solution(\"ababa\") == \"PPSS\"\nassert solution(\"aaaa\") == \"PS\"\nassert solution(\"ac\") == \"SP\"\nassert solution(\"abacab\") == \"SPSP\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"c\") == \"PS\"\nassert solution(\"abac\") == \"PPS\"\nassert solution(\"bc\") == \"PPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ba\") == \"SPPS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PPS\"\n\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"abc\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPS\"\nassert solution(\"abc\") == \"PS\"\n\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ababa\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPS\"\nassert solution(\"aa\") == \"PS\"\nassert solution(\"ac\") == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba') == 'PSPSPSPS'\nassert solution('3\\na\\naa\\naa\\na\\n') == 'PS'\nassert solution('2\\na\\nc\\n') == 'PS'\n\n\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPSS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPSS\"\nassert solution(\"aba\") == \"PPSS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\n\nassert solution(\"aba\") == \"PPS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in a:\n    if i >= 2 and i <= 4:\n        cnt += 1\nprint(cnt)"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '2'\n\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n-----\n\n\n'''\na = [2, 4, 6, 8, 10]\n\nfrom itertools import combinations\n\nfor i in range(1, len(a) + 1):\n    for j in list(combinations(a, i)):\n        print(j)\n\n\nprint(list(combinations(a, 3)))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''\n2 4 6 8 10\n'''\n) == '1'\n\nassert solution(\n'''\n2 6 8 10\n'''\n) == '0'\n\nassert solution(\n'''\n9 5 1 1 1\n'''\n) == '0'\n\nassert solution(\n'''\n3 5 5 5\n'''\n) == '2'\n\nassert solution(\n'''\n1 1 1 1\n'''\n) == '0'\n\nprint('Example 1:')\nprint('Output:', solution(\n'''\n2 4 6 8 10\n'''\n))\n\nprint('Example 2:')\nprint('Output:', solution(\n'''\n1 1 1 1\n'''\n))\n\nprint('Example 3:')\nprint('Output:', solution(\n'''\n1 1 1 1\n'''\n))\n\nprint('Example 4:')\nprint('Output:', solution(\n'''\n9 5 1 1 1\n'''\n))\n\nprint('Example 5:')\nprint('Output:', solution(\n'''\n3 5 5 5\n'''\n))\n\nprint('Example 6:')\nprint('Output:', solution(\n'''\n1 1 1 1\n'''\n))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nprint(solution(\"2 4 6 8 10\"))\n\"\"\"\n\nnums = [int(num) for num in stdin.split()]\nmin_num = min(nums)\nmax_num = max(nums)"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 8 10\") == '1'\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\") == '0'\nassert solution(\"5\\n1 1 1 1\") == '0'\nassert solution(\"4\\n1 1 1 1\") == '0'\nassert solution(\"5\\n1 1 1 1\") == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 1 0') == '0'\nassert solution('5\\n0 1 1 1') == '0'\nassert solution('5\\n0 1 1 1') == '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5 1 1 0 0 0') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5 1 1 0 0 0\") == \"0\"\nassert solution(\"4 1 1 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == 2\nassert solution('5\\n1 1 0 0 0') == 0\n\"\"\"\n\nimport sys\n\nassert sys.version_info >= (3, 7)  # make sure we have Python 3.7+\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1 1\\n') == 0\nassert solution('4\\n0 0 0 0\\n') == 0\nassert solution('5\\n1 1 1 1\\n') == 0\n\"\"\"\n\nn = int(input())\n\nlights = list(map(int, input().split()))\n\ndisturbance = 0\n\nfor i in range(1, n - 1):\n    if lights[i - 1] == 1 and lights[i + 1] == 1 and lights[i] == 0:\n        disturbance += 1\n\nprint(disturbance)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 0 0 0') == '0'\nassert solution('3\\n1 1 1') == '0'\nassert solution('5\\n1 1 0 1 1') == '2'\nassert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 1 1') == '0'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1'\nassert solution('''6\n6 90 12 18 30 18''') == '4'\nassert solution('''3\n1 5 3''') == '2'\nassert solution('''4\n1 2 3 4''') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6 90 12 18 30 18') == '4'\n\"\"\"\n\na = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 5 6 8\\n6 90 12 18 30 18') == '2'\nassert solution('4 2 5 6 8\\n6 90 12 18 30 18') == '4'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''6\n6 90 12 18 30 18\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3 4 5\") == 1\nassert solution(\"6 90 12 18 30 18\") == 4\n\nimport sys\nassert solution(sys.stdin.read()) == result\n\n----\n3 1 4 1 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 90 12 18 30 18\") == \"4\"\n\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_simple(self):\n        self.assertEqual(solution(\"6 90 12 18 30 18\"), \"4\")\n        self.assertEqual(solution(\"6 12 18 30 18\"), \"4\")\n        self.assertEqual(solution(\"6 36 12 18 30 18\"), \"4\")\n        self.assertEqual(solution
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '4', 'Test #1'\n\nassert solution('4\\n3 2 1 4') == '0', 'Test #2'\n\nassert solution('7\\n1 7 2 6 3 4 5') == '4', 'Test #3'\n\nassert solution('7\\n8 3 6 5 2 1') == '1', 'Test #4'\n\nassert solution('9\\n1 9 2 8 3 4 5 6 7') == '7', 'Test #5'"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\") == \"1\"\n\nassert solution(\"2\\n1\\n1\") == \"2\"\n\nassert solution(\"2\\n3\\n4\") == \"2\"\n\nassert solution(\"1\\n100\") == \"1\"\n\nassert solution(\"2\\n1\\n1\") == \"2\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\") == '1'\nassert solution(\"1\\n2\\n2\") == '2'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = list(map(int, sys.stdin.readline().split()))\n\nd = {}\n\nfor i in a:\n    if d.get(i, False):\n        d[i] += 1\n    else:\n        d[i] = 1\n\nprint(min(d.values()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '2'\nassert solution(\"5\\n1 2 3 4 5\") == '2'\nassert solution(\"4\\n1 1 2 2\") == '1'\nassert solution(\"7\\n1 2 3 4 5 6 7\") == '2'\nassert solution(\"1\\n100\") == '1'\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\n\n---\n\nclass Solution:\n    def minPockets(self, a: list) -> int:\n        n = len(a)\n        a.sort()\n        a = [x for x in set(a)]\n        result = 0\n        for i in a:\n            result += 1\n            left = a[:a.index(i)]\n            right = a[a.index(i):]\n            result += max(len(left) + len(right), 0)\n        return result\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('1 2') == 2\nassert solution('1 2 3') == 3\nassert solution('1 2 3 4') == 3\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\nassert solution(\"1\\n100\") == 1\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n0 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\n\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('10 10\\n0 0 0 0 0 0') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == '2'\nassert solution(\"10 3\") == '-1'\nassert solution(\"10 10\") == '0'\nassert solution(\"5 10\") == '3'\nassert solution(\"6 2\") == '3'"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n0 0 1 1\\n\") == \"2\"\nassert solution(\"5 3\\n0 0 0 0 1\\n\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"1 2\\n1 0\\n\") == \"1\"\nassert solution(\"2 3\\n0 1 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"10 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_stdout\n\"\"\"\n\nn, r = map(int, input().split())\narr = [int(c) for c in input().split()]\n\nh_cnt = 0\nfor i in range(len(arr)):\n    if arr[i] == 1:\n        h_cnt += 1\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 0 1 0\") == \"2\"\nassert solution(\"6 2\\n0 0 1 0 0 1\") == \"3\"\nassert solution(\"5 10\\n0 0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n1 0 0 0 1') == '2'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('5 10\\n0 0 0 0 0 1') == '-1'\nassert solution('10 3\\n1 1 1 1 0 0 0 0 0 0') == '1'"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '2'\nassert solution('10 3\\n0 0 0 0 0 0') == '-1'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 0 0 0 1') == '3'\nassert solution('0 0 0 0 0') == '0'\nassert solution('1 1 0 1 1') == '-1'\nassert solution('0 0 0 0 0') == '0'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 2\") == \"3\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"3\\n\"\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 3\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"3\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3''') == '''3'''\n\nassert solution('''2''') == '''1'''\n\nassert solution('''1''') == '''0'''\n\nassert solution('''3''') == '''3'''\n\nassert solution('''3\n2\n1\n3\n3\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n3\n1\n2\n1''') == '''28'''"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == '3'\nassert solution(1) == '1'\n\"\"\"\n\nfrom math import ceil, sqrt\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('100') == '64'\n\nprint('All tests passed.')"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 3\n'''\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('1\\n') == '0'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(((()))())\") == 6\n\nassert solution(\"()())()\") == 0\n\nassert solution(\")(\") == 0\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''(((())\n''') == 3\nassert solution('''()()()\n''') == 0\nassert solution('''()())(\n''') == 0\nassert solution(''')(()\n''') == 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(((())') == 3\nassert solution('()()()') == 0\nassert solution(')(') == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()\") == 1\nassert solution(\"(()\") == 0\nassert solution(\"()()\") == 2\nassert solution(\"()(\") == 0\nassert solution(\"((()\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"())\") == 0\nassert solution(\"(())\") == 1\nassert solution(\"())()\") == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()\") == 1\nassert solution(\"()()\") == 2\nassert solution(\"(()\") == 0\n\nassert solution(\"((((((())))((())))\"\n    == 0\nassert solution(\"((((((())))((())))\"\n    == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()((()))\") == 2\nassert solution(\"(())(())\") == 3\nassert solution(\"()(((()))\") == 3\nassert solution(\"()()(()())\") == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((()))\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(((()))\") == 2\nassert solution(\"((())\") == 0\nassert solution(\"((()))(())(()(()()))\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()())\") == 0\nassert solution(\"(((()))\") == 3\nassert solution(\"(()())()\") == 3\nassert solution(\"())\") == 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('(((())') == 3\nassert solution('())') == 0\n\"\"\"\nimport re\n\nn = int(input())\ns = input()\nres = 0\nfor i in range(n):\n    if s[i] == '(':\n        res += 1\nprint(res)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sdfasd') == 3\nassert solution('s') == 0\nassert solution('asdf') == 3\nassert solution('asd') == 1\nassert solution('fasd') == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaa') == 0\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba', 'bb') == 3, \"First\"\nassert solution('baaba', 'ab') == 2, \"Second\"\nassert solution('abcde', 'abcde') == 0, \"Third\"\nassert solution('asdfasdf', 'fasd') == 3, \"Fourth\"\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!');\n\nprint(solution(stdin))\n\"\"\"\n\ns = stdin.split(\"\\n\")[0]\nt = stdin.split(\"\\n\")[1]\n\nlength_s = len(s)\nlength_t = len(t)\ni, j = 0, 0\n\nmax_len = 0\nwhile i < length_s:\n    if s[i] == t[j]:\n        max_len = max(max_len, j + 1)\n        i += 1\n        j += 1\n    elif j > 0:\n        j = j - 1\n    else:\n        i += 1\n\nprint(max_len)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('baaba') == 3\nassert solution('asdfasdf') == 3\nassert solution('abcde') == 0\nassert solution('fasd') == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabebcdd\") == \"3\"\nassert solution(\"abebcdd\") == \"2\"\nassert solution(\"ebcdd\") == \"0\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 1\nassert solution('abab') == 2\nassert solution('abcdef') == 1\nassert solution('abcde') == 0\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"\") == 0\nassert solution(\"testtest\") == 0\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bbaba') == 3\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\nassert solution(\"\") == 0"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd') == 0\nassert solution('abcdee') == 1\nassert solution('abcdeeee') == 2\nassert solution('abcdef') == 0\nassert solution('abcdefgh') == 1\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == '2'\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nprint(solution(\"1 2 1 1\")) # 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"3 2 4 1\") == \"10\"\nassert solution(\"0 0 0 0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\"\n\nimport math\n\na, b, c, d = map(int, input().strip().split())\nprint(math.ceil(a/c) * math.ceil(b/d))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 4 4 6 7\") == 2\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\nassert solution('8\\n9 1 4 4 6 7') == '2'\nassert solution('10\\n9 1 4 4 6 7') == '1'\n\nimport sys; print(solution(sys.stdin.readlines()))\n\n\"\"\"\nN = int(input())\narr = list(map(int, input().split()))\n\ncount = 0\nfor i in range(1, len(arr)):\n    if arr[i] <= arr[i-1]:\n        count += 1\n\nprint(count)\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n9 1 4 4 6 7') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 1 4 4 6 7') == '2'\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n\") == \"1\"\nassert solution(\"5\\n1 5 2 3 4\\n\") == \"3\"\nassert solution(\"6\\n9 1 4 4 6 7\\n\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\nimport sys\nfrom itertools import accumulate\n\na = [int(x) for x in sys.stdin.readline().split()]\nn, h, l, r = a[0], a[1], a[2], a[3]\na = [int(x) for x in sys.stdin.readline().split()]\nsleep_schedule = list(accumulate(a))\nmax_sleep_times = 0\n\nfor i in range(n):\n    if i!= 0 and i % 2 == 0:\n        sleep_schedule = [x + (i + 1) % 2 for x in sleep_schedule]\n    if sleep_schedule[i] >= h - l:\n        max_sleep_times += 1\n\nprint(max_sleep_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ncurr_time = 0\nans = 0\nfor i, ai in enumerate(a):\n    if i > 0:\n        ans += 1\n        curr_time += (ai - a[i - 1])\n    if curr_time >= l and curr_time <= r:\n        ans += 1\n        curr_time += (r - a[i])\n\nprint(ans)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\nassert solution('2 2 2 1\\n1 1 1 1 1') == '1'\nassert solution('7 24 21 23\\n16 17 14 20 20 11 22\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '3'\nassert solution('7 24 21 23\\n16 17 14 20 20 11 22\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 24 21 23''') == '3'\n'''\n7,24,21,23\n0,1,1,2\n0,1,2,3\n'''\n\nassert solution('''7 24 21 23''') == '3'\n'''\n7,24,21,23\n0,1,1,2\n0,1,2,3\n'''\n\nassert solution('''5 8 7 10 11''') == '1'\n'''\n5,8,7,10,11\n0,1,1,2,3\n0,1,2,3,4\n'''\n\nassert solution('''1 1 1 1 1 1 1''') == '0'\n'''\n1,1,1,1,1,1,1\n0,1,2,3,4,5,6\n'''\n\nassert solution('''1 1 1 1 1 1 1''') == '0'\n'''\n1,1,1,1,1,1,1\n0,1,2,3,4,5,6\n'''"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nimport sys\n\nn, h, l, r = [int(i) for i in sys.stdin.readline().strip().split(' ')]\na = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n\ngood = 0\ni = 0\nwhile i < n:\n    if l <= a[i] <= r:\n        good += 1\n    i += 1\n\nprint(good)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 24 21 23''') == '''3'''\nassert solution('''7 6 7 10''') == '''0'''\nassert solution('''7 12 13 19''') == '''2'''\nassert solution('''7 9 9 10''') == '''1'''\n\nassert solution('''6 6 6 9''') == '''1'''\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == 3\n\"\"\"\n\n\"\"\"\nsolution for BOG\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = [int(x) for x in input().split()]\n\nres = 0\nfor i in range(n):\n    res += (min(h - (a[i] - 1), r) - max(l, a[i] - 1))\n\nprint(res)\n\n\"\"\"\nsolution for AF\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nres = 0"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 24 21 23\") == 3\nassert solution(\"16 17 14 20 20 11 22\") == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split(' ')]\nc = 0\ncount = 0\na.sort()\nfor i in range(1,n):\n    if a[i] <= a[i-1]*2:\n        count +=1\n    else:\n        break\nprint(n - count)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\nassert solution('5\\n4 7 12 100 150 199') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 2 10 100 250\\n') == 1\nassert solution('5 2 10 100 250\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10 50 110 250') == '1'\nassert solution('5 10 50 110 250') == '3'\nassert solution('6 4 7 12 100 150 199') == '3'\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"5\\n1 2 5 6 7 10\\n\") == \"1\\n\"\nassert solution(\n\"6\\n4 7 12 100 150 199\\n\") == \"3\\n\"\nassert solution(\n\"4\\n4 7 12 100 150 199\\n\") == \"1\\n\"\n\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == 4\nassert solution('5\\n2 10 50 110 250\\n') == 1\nassert solution('6\\n4 7 12 100 150 199\\n') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '4'\nassert solution('2 3 4 5') == '6'\nassert solution('3 4 5 6') == '7'\nassert solution('3 4 5 7') == '8'\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('a\\n') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\n\"\"\"\n\n\nfrom itertools import combinations\nfrom math import lcm"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 11 3 7\") == '1 4'\nassert solution(\"6 2 11 3 7\") == '2 4'\nassert solution(\"10 5 20 5 3\") == '1 4'\nassert solution(\"10 11 20 11 3\") == '1 4'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10\\n2\\n3\\n5\") == '1\\n2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 11 3 7\") == '1 2'\nassert solution(\"5 2 11 3 7\") == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\n\"\"\"\n\n\"\"\"\n\nNote.\n\nThe least common multiple (LCM) of two integers $a$ and $b$ is the smallest integer greater than $0$ such that:\n\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by this integer.\n$a$ and $b$ are both divisible by"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"110110\") == \"110120\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('121') == '021'\nassert solution('000000') == '001122'\nassert solution('211200') == '211220'\nassert solution('120110') == '120120'\n\nimport sys\nassert sys.stdin.readline().rstrip() == '121'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('120110') == '120120'\n\nassert solution('010010') == '101010'\n\nassert solution('011010') == '101010'\n\nassert solution('101010') == '101010'\n\nassert solution('111011') == '111010'"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('121') == '021'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('121') == '021'\n\nassert solution('101') == '11010'\n\nassert solution('0111') == '11110'\n\nassert solution('1211') == '21120'\n\nassert solution('11110') == '121110'"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(123) == \"012\"\nassert solution(1234) == \"1023\"\nassert solution(12345) == \"10111\"\nassert solution(123456) == \"101111212\"\nassert solution(1234567) == \"1011112121313\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12010') == '120120'\nassert solution('11010') == '120111'\nassert solution('110110') == '120110'\nassert solution('1110110') == '1210100'\nassert solution('11101110') == '1210110'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('120110') == '120120'\nassert solution('211200') == '211220'\nassert solution('110110') == '110120'\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211200\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211220'\n\n'''\n\nn = int(input())\nstring = input()\ns = '0'*(n//3)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n3\\n\") == '4'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3\\n4\\n2\\n5\\n1\\n6\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"6\"\nassert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n1\\n2\\n3\\n4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3\\n4\\n2\\n5\\n2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n3\\n\") == '4'\nassert solution(\"6 1\\n3\\n\") == '6'\n\n---Problem---\nA sequence of integers is said to be a scad sequence if the difference between any two consecutive elements is greater than 1.\nFor example, [2, 4, 3, 7, 4, 10] is a scad sequence while [1, 4, 3, 7, 4, 10] is not.\nLet X(n) be the number of scad sequences that are of length n.\nFor example, X(5) = 7.\nFind X(10^7).\n\n-----Constraints-----\n 1 \\leq n \\leq 10^6\n\n-----Input-----\nn = 10^7\n\n-----Output-----\nX(10^7) = 2528104501986751\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1\\n3') == '4'\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\n\na = [int(x) for x in stdin.split()][1:m + 1]"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\nimport math\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2\\n\") == \"4\"\nassert solution(\"4 5\\n1\\n\") == \"0\"\nassert solution(\"4 5\\n2\\n3\\n\") == \"0\"\nassert solution(\"4 5\\n2\\n1\\n3\\n\") == \"4\"\nassert solution(\"4 5\\n2\\n3\\n4\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\") == \"4\"\nassert solution(\"4\\n3\\n5\") == \"0\"\nassert solution(\"4\\n3\\n5\\n2\") == \"0\"\nassert solution(\"4\\n3\\n5\\n2\\n7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1\\n2\\n3\\n4\") == \"5\"\nassert solution(\"4 2\\n1\\n2\\n3\\n4\\n5\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"5 6 -3\") == \"3\"\nassert solution(\"3 3 3\") == \"0\"\n\"\"\"\n\nimport math\n\n_, K, D = map(int, input().split())\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4') == 2\n\n\"\"\"\n\nfrom math import inf\nimport sys\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\nassert solution(\"1 1 1\\n\") == \"0\"\n\nassert solution(\"10 2 2\\n\") == \"5\"\nassert solution(\"10 1 2\\n\") == \"5\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import product, chain\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2 4\\n') == 2\n\"\"\"\n\nimport sys\n\nX, K, D = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"0 5 5\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n\nX, K, D = map(int, stdin.readline().split())"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n\nX, K, D = input().split(' ')\n\nX = int(X)\nK = int(K)\nD = int(D)\n\nprint(min(abs(X - D), abs(X + D)))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nassert solution(\"2128506\") == \"3\"\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 10\nassert solution(2128506) == 3\n\n\nimport timeit\navg_time = 0.\ntests = ['11', '14', '61441', '2128506']\nfor t in tests:\n    avg_time += timeit.timeit(lambda: solution(t), number=10000)\nprint(f'avg_time: {avg_time / len(tests)}')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"61441\") == 2\nassert solution(\"2128506\") == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"2128506\") == 3\nassert solution(\"87613\") == 5\nassert solution(\"124530\") == 4\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 2\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"61441\") == 2\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == 2\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('571576') == 10\nassert solution('61441') == 2"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\n\nprint(a ** 2 + a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5') == 25\n\nprint(solution(''))\nprint(solution('5'))\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 27\n'''\n\na = int(input())\nprint(a**3)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 27\n-------------------\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '27'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 27\n-----\n\nimport sys\na = int(input())"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\nprint(\"all tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == 1\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == 1\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\nprint('Hint #1: Divide the number by 11, take the remainder, and test it against 11. If the remainder is not equal to 11, the number is divisible by 11, so output 1. Otherwise, the number is not divisible by 11, so output 0. Then, output 1 if the number is divisible by 7, 0 if it is not.')\nprint('Hint #2: You can either use a classical algorithm, or use the following very clever trick:')\nprint('If the number is divisible by 11, then it is divisible by 7.')\nprint('If the number is divisible by 7, then it is divisible by 11.')\nprint('If the number is divisible by 11 or 7, then it is divisible by both.')\nprint('Hint #3: If you are interested in whether the number is divisible by 11, check it against the variable divisible11.'\nprint('If the remainder of the number is not equal to divisible11, then the number is not divisible by 11.')\nprint('Hint #4: If you are interested in whether the number is divisible by 7, check it against the variable divisible7.'\nprint('If the remainder of the number is not equal to divisible7, then the number is not divisible by 7.')\nprint('Hint #5: If you are interested in whether the number is divisible by 11 or 7, check it against the variable divisible.'\nprint('If the remainder of the number is not equal to divisible, then the number is neither divisible by 11 nor 7.')\nprint('Hint #6: You could use a classical algorithm for the first test, but it is only applicable to the number 3, 5, and 7.')\nprint('You can use the following trick for the first test:')\nprint('If the number is divisible by 3, then the number is divisible by 7.')\nprint('If the number is divisible by 5, then the number is divisible by 3 and by 7.')\nprint('If the number is divisible by 3 and 5, then the number is divisible by 3, 5, and 7.')\nprint('Hint #7: Similarly, you could use a classical algorithm for the second test, but it is only applicable to the number 2 and 4.')\nprint('If the number is divisible by 2, then the number is divisible by 4.')\nprint('If the number is divisible by 2 and 4, then the number is divisible by 2, 4, and 7.')\nprint('If the number is divisible by 4, then the number is divisible by 2 and by 7.')\n\nprint('Input #1: 13')\nprint('Output #1: 1')\n\nprint('Input #2: 927')\nprint('Output #2: 1')\n\nprint('Input #3: 48')\nprint('Output #3: 0')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nprint('All tests passed.')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 5 3 1') == '4'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(4) == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    if a[i] == 1:\n        a[i] = 2\n    elif a[i] == 2:\n        a[i] = 5\n    elif a[i] == 3:\n        a[i] = 1\n    elif a[i] == 5:\n        a[i] = 3\n    elif a[i] == 4:\n        a[i] = 4\n\nfor i in range(n):\n    if a[i] == 2:\n        a[i] = 5\n    elif a[i] == 5:\n        a[i] = 2\n\nprint(a)"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 5 1\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('2\\n1 2') == ''\nassert solution('4\\n1 2 3 4') == ''\nassert solution('4\\n1 2 3 5') == ''"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5 3 1') == 4\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5 3 1') == 4\n\n-----\n\nfrom collections import deque\n\nn = int(input())\n\na = deque(map(int, input().split()))\n\na.appendleft(0)\na.append(0)\n\nprint(max(map(lambda x: abs(x[0] - x[1]), list(zip(a, a[1:])))))\n\n\n-----\n\nimport heapq\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nheapq.heapify(a)\nprint(heapq.nlargest(2, a)[-1])\n\n\n-----\n\nfrom itertools import count, islice\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nfor i in islice(count(0), n):\n    print(a[i])\n\n\n-----\n\nfrom itertools import accumulate, count\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(count(), lambda x: x, 0))))\n\n\n-----\n\nfrom itertools import accumulate, count\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(count(), lambda x: x, 0))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(map(lambda x: abs(a[x[0]] - a[x[1]]), accumulate(chain(count(), count(0)), lambda x, y: y - x))))\n\n\n-----\n\nfrom itertools import accumulate, chain\n\nn = int(input())\n\na = list(map(int, input().split()"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 5 1\") == 4\n\nassert solution(\"5 2 4 1\") == 3\n\nassert solution(\"3 1 2\") == 1\n\nprint(solution(\"7 5 8 9 2 1 3\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n2 5 3 1''') == 4"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 6\nassert solution('1 2') == 3\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 5 1') == '4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\n\n-----Code-----\n```python\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nwhile True:\n    try:\n        text = stdin.readline()\n        if text == '\\n':\n            break\n        text = text.split()\n        n = int(text[0])\n        k = int(text[1])\n        count = 0\n        for i in range(1, k + 1):\n            for j in range(i, k + 1):\n                if i * j == n:\n                    count += 1\n        stdout.write(str(count) + '\\n')\n    except:\n        break\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 999997 33\\n9 1\\n9 1\") == \"999999733\\n1\\n1\"\nassert solution(\"8 999997 33\\n9 1\\n9 1\") == \"999999733\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 2\\n3\\n4 5\\n') == '1'\nassert solution('1 1\\n1 1\\n3\\n4 5\\n') == '1'\nassert solution('1 2\\n1 1\\n1 1\\n3\\n4 5\\n') == '1'\nassert solution('1 2\\n1 2\\n2\\n4 5\\n') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\") == \"8\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\nSolution:\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n\nfrom collections import Counter\nimport sys\nimport pprint\n\nassert sys.stdin.read() == \"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2\\n1') == '2'\nassert solution('1 2\\n2') == '0'\nassert solution('1 2\\n2\\n2') == '0'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 1 2\\n0 1\") == \"1\"\nprint(\"Test 1 passed\")\nassert solution(\"4 2\\n2 1 2\\n0 1\") == \"1\"\nprint(\"Test 2 passed\")\nassert solution(\"4 2\\n2 1 2\\n0 1\") == \"1\"\nprint(\"Test 3 passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"4 2\\n1 2 2 1\\n1 2\\n0 1\\n0 2\") == \"4\"\nassert solution(\"4 3\\n1 2 1 2\\n0 1\\n0 2\\n0 3\") == \"7\"\n\n-----------------------\nimport sys\n\nfrom collections import Counter, defaultdict\n\nn, m = map(int, sys.stdin.readline().split())\n\ngroups = defaultdict(set)\nfor i in range(m):\n    x, y, z = map(int, sys.stdin.readline().split())\n    groups[x].add(y)\n    groups[x].add(z)\n    groups[y].add(z)\n    groups[y].add(x)\n    groups[z].add(x)\n    groups[z].add(y)\n\nlights = {}\nfor i in range(1, n + 1):\n    lights[i] = {i}\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        a = groups[i + 1].intersection(groups[j + 1])\n        if len(a) % 2:\n            lights[i + 1].update(a)\n            lights[j + 1].update(a)\n        else:\n            lights[i + 1] |= a\n            lights[j + 1] |= a\n\ntotal = 0\nfor i in range(1, n + 1):\n    total += len(lights[i])\nprint(total)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\nprint(\"Test 1 successful.\")\n\nassert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\nprint(\"Test 2 successful.\")\n\nassert solution(\"5 5\\n1 2 3 4 5\\n0 1\\n1 0\\n0 0\\n0 1\\n\") == \"0\"\nprint(\"Test 3 successful.\")\n\nassert solution(\"5 5\\n1 2 3 4 5\\n0 1\\n1 0\\n0 0\\n0 1\\n\") == \"0\"\nprint(\"Test 4 successful.\")\n\nassert solution(\"6 6\\n1 2 3 4 5 6\\n0 1\\n1 0\\n0 0\\n0 1\\n0 1\\n\") == \"0\"\nprint(\"Test 5 successful.\")"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\n\"\"\"\nfrom collections import defaultdict, Counter\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n\nfrom collections import Counter\n\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        return (len(s) % 2 == 0 and Counter(s) == Counter('01')) or (len(s) % 2 == 1 and Counter(s) == Counter('11'))\n\n    def check(self, n: int, m: int, k: list, s: list, p: list) -> int:\n        ans = 0\n        for i in range(n):\n            cnt = 0\n            for j in range(m):\n                if s[i] == '1' and self.isValid(str(k[j]) + str(i)):\n                    cnt += 1\n            if cnt % 2 == p[i]:\n                ans += 1\n        return ans\n\n    def totalNumberOfWays(self, n: int, m: int, k: list, s: list, p: list) -> int:\n        if not self.isValid(''.join(map(str, k))):\n            return 0\n        return self.check(n, m, k, s, p) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3 4 9 0) == 5\n\"\"\"\n\na, b, h, m = [int(x) for x in stdin.split()]\n\nang = (m*12+h)*60\nh = ang//360\nm = ang%360//60\nprint(a*m + b*h)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 9 0') == '5.000000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 6 1\") == \"4.0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == output\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('3 5 9 0') == '10.00000000000000000000'\nassert solution('3 3 9 0') == '13.00000000000000000000'\nassert solution('3 3 1 0') == '13.00000000000000000000'\nassert solution('3 2 9 0') == '12.00000000000000000000'\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(r\"3 4 9 0\") == r\"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 1 1\") == \"6\"\n\nprint(solution(\"5 4\\n1 4 5 60 4\"))\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"6\"\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == 8\nassert solution(\"3 1\\n1 1 1\\n\") == 6\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\\n\") == 97\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\nassert solution(\"3 1\\n1 1 1\\n\") == \"6\"\n\n\"\"\"\nimport math\nfrom bisect import bisect_left\nfrom collections import Counter, defaultdict, deque\nfrom functools import lru_cache\nfrom itertools import combinations, permutations\nfrom math import inf\nfrom typing import Any, Dict, List, Optional, Set, Tuple\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \"\"\"O(NlogN) / O(1)\n        \"\"\"\n        n, m = map(int, stdin.splitlines()[:2])\n        a = list(map(int, stdin.splitlines()[2:]))\n\n        cnt = Counter(a)\n\n        left, right = 0, n - 1\n        mid = math.ceil(n / 2)\n\n        while True:\n            if left >= mid and right <= mid:\n                break\n            if left >= mid:\n                left -= 1\n            elif right <= mid:\n                right += 1\n            else:\n                if a[left] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif a[right] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif a[left] < m < a[right]:\n                    return f\"{left + 1} {right + 1}\"\n                else:\n                    left += 1\n                    right -= 1\n        left, right = 0, n - 1\n        left_a, right_a = a[left:mid], a[mid:right+1]\n        left_cnt, right_cnt = cnt[a[left]], cnt[a[right]]\n        while True:\n            if left_cnt <= right_cnt:\n                if left_a[-1] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif right_a[0] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif left_a[-1] < m < right_a[0]:\n                    return f\"{left + 1} {right + 1}\"\n                else:\n                    left += 1\n                    right -= 1\n                    left_cnt += cnt[a[left]]\n                    right_cnt += cnt[a[right]]\n                    left_a, right_a = a[left:mid], a[mid:right+1]\n            else:\n                if left_a[0] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif right_a[-1] == m:\n                    return f\"{left + 1} {right + 1}\"\n                elif left_a[0] < m < right_a[-1]:\n                    return f\"{left + 1} {right + 1}\"\n                else:\n                    left += 1\n                    right -= 1\n                    left_cnt += cnt[a[left]]\n                    right_cnt += cnt[a[right]]\n                    left_a, right_a = a[left:mid], a[mid:right+1]\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '7\\n2\\n1 4'\nassert solution(\"3 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '7\\n2\\n3 2'\nassert solution(\"3 3\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '0\\n0'\nassert solution(\"1 0\\n1000000\\n\") == '0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\\n\"\nassert solution(\"5 4 2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n1 4\\n', 'wrong result'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n', 'wrong result'\nassert solution('1 0\\n1000000\\n') == '0\\n0\\n', 'wrong result'"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6'\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5''') == '7'\nassert solution('''1 0\n1000000''') == '0'\nassert solution('''5 5\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5''') == '7'\nassert solution('''1 0\n0''') == '0'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\nassert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\nassert solution(\"az\\naa\\nbad\\nbabc\") == \"No\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\nassert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\"\n\n\"\"\"\nfrom typing import List, Set"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\"\nassert solution(\"az\\naa\\nbad\\nbabc\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4\") == \"2 1\"\nassert solution(\"5 4\") == \"2 1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"1 0\") == \"0 0\"\nassert solution(\"100000 100000\") == \"0 0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Dict, Union\n\nInput = List[Union[int, Tuple[int, int]]]\nOutput = int\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\n\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6\\n2\\n4 1'\n\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5\n''') == '7\\n2\\n3 2'\n\nassert solution('''1 0\n1000000\n''') == '0\\n0'\n\n\n\n\n-----Explanation-----\n\nIn the first example the array $b$ will be $[0, -4, 1, 1, 2]$.\n\nIn the second example the array $b$ will be $[2, -3, 1, -1, 4]$.\n\nIn the third example the array $b$ will be $[0, -4, 1, -1, 4]$.\n\n\n-----Theory-----\n\nMaximize the value $\\max\\limits_{i=1}^{n}b_i - \\min\\limits_{i=1}^{n}b_i$.\n\nLet us denote the number of elements in the array by $n$.\n\nLet us denote the number of segments by $m$.\n\nThere are three possible cases:\n\n    1. The array is empty so the maximal value is $0$;\n    2. We can apply any segment and the array will become empty;\n    3. The array is not empty.\n\nAll of the three possible cases can be treated separately by taking the case (2) and multiplying by $n$.\n\nThen we have to choose the segments in the following way:\n\n    1. The array is empty, so we cannot choose any segment.\n    2. The array is not empty, so we can choose any segment.\n\nThe solution is just the value $\\max\\limits_{i=1}^{n}b_i - \\min\\limits_{i=1}^{n}b_i$.\n'''\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n4 1\"\nassert solution(\"2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n4 1\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n4 1\"\nassert solution(\"6 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\n\n\"\"\"\n\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 5 4 3') == '4', 'wrong result'\nassert solution('5 6 5 7 4') == '7', 'wrong result'\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nmaxi = 0\nq = []\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRLL\\n\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRL\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 2 5 4 3') == '7'\nassert solution('1 3 5 6 7 4') == '7'\nassert solution('1 2 3') == '3'\nassert solution('1 2 4 3') == '4'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 2\nassert solution(\"1 2\") == 2\nassert solution(\"7 6 5 4 3 2 4 3\") == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3 4\") == \"4\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"7 6 5 4 3 2 4 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"5 4 3 2 4 3\") == \"2\"\nassert solution(\"7 6 5 4 3 2 4 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('6 5 4 3 2 4 3') == '2'\nassert solution('1 2') == '2'\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 3 5 2 4 6') == '3'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 1') == '5'\nassert solution('5 2') == '1'\nassert solution('5 3') == '0'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n\") == \"1\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\n\nn, k = list(map(int, input().split()))\nnumbers = list(map(int, input().split()))\ncounter = Counter(numbers)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n1\\n2\\n3\\n1\\n2\\n3') == '1'\nassert solution('1\\n1\\n2\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 3\n1 2 2 4 5\"\"\") == \"\"\"1\n\nassert solution(\"\"\"5 3\n1 2 3 3 3\"\"\") == \"\"\"0\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == 1\nassert solution(\"5 3\\n1 2 3 4 5\") == 2\nassert solution(\"5 3\\n1 2 3 3 3\") == 0\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\nassert solution(\"1 2 2 2 2\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\") == \"0\"\nassert solution(\"8 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nN, A, B = map(int, stdin.split())\nprint(A * N - B * (N - 1))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\nThe first four balls in the row will be bbbrrrrb, among which there are four blue balls.\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3 4') == '4'"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3 4\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 4\") == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == '48\\n4'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n\"\"\"\n\nfrom math import gcd\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = [int(i) for i in input().split()]\n    l = [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18, 20, 24, 30, 36, 40, 45, 48, 50, 60, 63, 64, 72, 75, 80, 81, 90, 96, 100, 120, 125, 128, 150, 160, 162, 180, 192, 200, 240, 288, 300, 360, 400, 450, 480, 500, 600, 900, 1000]\n    a = set(d)\n    b = set(l)\n    if a.intersection(b) == set():\n        print(-1)\n    else:\n        c = d\n        for i in c:\n            if i > n:\n                c.remove(i)\n        print(c[0])\n\nassert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == \"48\\n4\"\nassert solution(\"2\\n1\\n2\") == \"1\\n-1\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n8\\n2\\n12\\n6\\n4\\n24\\n16\\n3\\n\") == \"48\\n4\\n\"\nassert solution(\"4\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n\") == \"-1\\n\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\ndivs = Counter()\nfor _ in range(n):\n    divs.update(map(int, input().split()))"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('2\\n1') == '2'\nassert solution('2\\n3') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == '48\\n4'\n\nassert solution(\"2\\n1\\n2\") == '-1'\n\"\"\"\n\nimport math\nimport sys\n\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2\\n8\\n12\\n6\\n4\\n24\\n16\\n3\\n\") == \"48\"\n\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\") == \"48\"\nassert solution(\"8\\n2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48\\n4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n8\\n2\\n6\\n1\\n24\\n16\\n3') == '48'\nassert solution('2\\n1\\n2\\n') == '-1'\nassert solution('2\\n1\\n1\\n') == '-1'\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('6\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('10\\n10 10 10 10 10 10 10 10 10 10') == '10\\n10 10 10 10 10 10 10 10 10 10'\nassert solution('1\\n1') == '1\\n1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 6 6 6 6') == '1\\n6'\nassert solution('2 4 2 4 4') == '2\\n2 4'\nassert solution('5 6 6 6 6') == '1\\n6'\nassert solution('5 6 6 6 6') == '1\\n6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 6 6 6 6\") == \"2 6\"\nassert solution(\"5 5 5 5 5\") == \"1 5\"\nassert solution(\"1 2 2 2 2\") == \"1 2\"\nassert solution(\"1 2 3 4 4\") == \"1 2 3\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('6\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('6\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('6\\n1 1 1 1 1') == '1\\n1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3\\n2 1') == '1\\n1'\nassert solution('3\\n1 2') == '1\\n2'\nassert solution('3\\n1 2 3') == '1\\n2'\nassert solution('3\\n1 2 3\\n4 5') == '1\\n2'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 6\") == \"6\"\nassert solution(\"2 4 2 4 4\") == \"2\"\nassert solution(\"5 6 6 6 6\") == \"1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2 4 4\") == \"2\"\nassert solution(\"6 6 6 6 6\") == \"1\"\nassert solution(\"1 5 5 1 6 1\") == \"3\"\nassert solution(\"1 2 2 4 4\") == \"2\"\nassert solution(\"2 2 2\") == \"1\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n6 6 6 6 6') == '1\\n6'\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"6\\n1 2 2 4 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n1 5 5 5 1\") == \"3\\n1\"\nassert solution(\"5\\n1 2 2 4 4\") == \"2\\n2 4\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(12) == 13\nassert solution(15) == 16\nassert solution(24) == 25\nassert solution(31) == 32\nassert solution(10) == 11\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"432\"\n) == \"435\"\nassert solution(\n    \"99\"\n) == \"103\"\nassert solution(\n    \"237\"\n) == \"237\"\nassert solution(\n    \"42\"\n) == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''432'''\n) == '435'\nassert solution(\n'''99'''\n) == '103'\nassert solution(\n'''237'''\n) == '237'\nassert solution(\n'''42'''\n) == '44'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nprint('All tests passed.')\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n\na = input()\nb = list(a)\nb.reverse()\nc = list(a)\nd = []\nfor i in b:\n    d.append(i)\ne = int(''.join(d))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"-125\") == \"-125\"\n\"\"\"\n\na = int(input())\n\ns = str(a)\nfor i in range(len(s)):\n    s = s.replace(str(a), \"\", 1)\n\nprint(int(s) + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aab') == 'aa'\nassert solution('aac') == 'aac'\nassert solution('aa') == 'aa'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbab\") == \"ababa\"\nassert solution(\"abaab\") == \"ababa\"\nassert solution(\"ababa\") == \"ababa\"\nassert solution(\"abcdefghi\") == \"abcdghi\"\nassert solution(\"aaba\") == \"aaab\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"abac\") == \"aac\"\nassert solution(    \"abc\") == \"b\"\nassert solution(    \"abba\") == \"aba\"\nassert solution(    \"ecoosdcefr\") == \"codeforces\"\nassert solution(    \"abac\") == \"aac\"\n\n----"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"aac\") == \"aac\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\nprint(\"Success\")"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\nassert solution(\"aaab\") == \"a\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 'b'\n\"\"\"\n\n\"\"\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('26') == 'z'\nassert solution('27') == 'aa'\nassert solution('701') == 'zz'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'b'\nprint(solution('2'))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == 'b'\n\"\"\"\nimport re\nimport sys\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'b'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'b'\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aab aa bb\") == 6\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"AB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab a a b ab a a b c') == 13\nassert solution('aa bb aa aa bb bb') == 11\nassert solution('aa ab aa ab bb') == 9\n\nprint(solution(stdin))"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n4 5 1 2 3') == '4\\n5 1 2 3 4'\nassert solution('7\\n4 5 6 1 2 3 7 8') == '7\\n5 1 2 3 4 6 7 8'\nassert solution('8\\n1 2 3 4 5 6 7 8 9 10') == '9\\n1 2 3 4 5 6 7 8 9 10'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '11\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\nassert solution('3\\n2 3 1') == '3\\n3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == 12\n\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nwords = sys.stdin.readline().strip().split()\n\ns = \"\"\nfor i in range(n):\n    s += words[i][0].upper()\n\nprint(len(s))"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\nto be or not to be\n\"\"\"\n) == \"12\"\n\nassert solution(\n\"\"\"\n10\na ab a a b ab a a b c\n\"\"\"\n) == \"13\"\n\nassert solution(\n\"\"\"\n6\naa bb aa aa bb bb\n\"\"\"\n) == \"11\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"5 3\\n1 1 1 1 1\") == \"2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '8 3\\n5 4 2 6 5 1 9 2'\n) == '20\\n3 2 3'\nassert solution(\n    '5 1\\n1 1 1 1 1'\n) == '1\\n5'\nassert solution(\n    '4 2\\n1 2000 2000 2'\n) == '4000\\n2 2'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 3 4 5') == '1 2 2'\nassert solution('5 1\\n1 2 3 4 5') == '1'\nassert solution('4 2\\n1 2') == '1 3'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\nprint('Passed all tests.')\n\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/contest/1543/submission/86293975\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2''') == '20'\nassert solution('''5 1\n1 1 1 1 1''') == '5'\nassert solution('''4 2\n1 2000 2000 2''') == '4000'\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 -5 3 2\n''') == '1'\n\nassert solution('''5\n4 -2 3 -9 2\n''') == '0'\n\nassert solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\n\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\n\nassert solution(\"5 -2 3 -9 2\") == \"0\"\n\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 -5 3 2') == '1'\nassert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\n\nassert solution(\"5 -11 10 5 4 -4\") == \"3\"\n\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n\n\n\nclass Solution:\n    def solution(self, arr):\n        if len(arr) < 3:\n            return 0\n        else:\n            n = len(arr)\n            if arr[0] * n < 0:\n                sign = -1\n            else:\n                sign = 1\n            result = 0\n            start = 0\n            end = 0\n            start_sum = 0\n            end_sum = 0\n            while end < n - 1:\n                if arr[end] * sign > 0:\n                    start_sum += arr[end]\n                else:\n                    start = end\n                    end_sum = 0\n                    start_sum = 0\n                    while start < n and arr[start] * sign < 0:\n                        start_sum += arr[start]\n                        start += 1\n                    if start_sum == 0 and end_sum == 0:\n                        result += 1\n                    start -= 1\n                    start_sum -= arr[start]\n                end += 1\n                end_sum += arr[end]\n                if end_sum == 0 and start_sum == 0:\n                    result += 1\n            return result\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == \"1\"\nassert solution(\"5\\n4 -2 3 -9 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 -5 3 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 1 -1 1 1') == '0'\nassert solution('8 -1 1 -1 1 1 1 1 -1 -1') == '3'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n') == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\nassert solution('1 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n') == '0\\n2\\n9\\n1000000000\\n2000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == '3'\nassert solution(\"3 4\") == '0'\nassert solution(\"5 5\") == '0'\nassert solution(\"1 100\") == '0'\nassert solution(\"2 2\") == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"1 100\") == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 100\\n1 2 3 4\") == '0'\nassert solution(\"4 100\\n1 2 3 5\") == '6'\nassert solution(\"4 100\\n1 2 3 6\") == '6'\nassert solution(\"4 100\\n1 2 3 7\") == '14'\nassert solution(\"4 100\\n1 2 3 8\") == '14'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '0\\n2\\n10\\n1000000000\\n2000000000'\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == '0\\n2\\n10\\n1000000000\\n2000000000'\nprint('Test pass.')"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 100\\n2 2\\n1 100\") == \"0\\n2\\n10\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '4'\nassert solution('11') == '1'\nassert solution('1101') == '2'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == 4\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\nprint(solution(stdin))\n'''\n\nimport math"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"7777\") == \"4\"\n\"\"\"\n\nk = int(input())\ni = 0\nc = 0\nwhile i < len(str(k)):\n    if k % 10 ** i == 0:\n        c += 1\n        i += 1\n    else:\n        i += 1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"101101\") == \"3\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(None) == None\nassert solution(\"\") == \"\"\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"5 4\", \"2 4 5 3 1\"]) == \"4\"\nassert solution([\"5 5\", \"1 2 3 4 5\"]) == \"1\"\nassert solution([\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"]) == \"48\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4', \"Wrong answer\"\nassert solution('5 5\\n1 2 3 4 5') == '1', \"Wrong answer\"\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48', \"Wrong answer\"\n\"\"\"\nfrom typing import List\n\nfrom tools import timing\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\nfrom sys import stdin\n\nn, m = list(map(int, stdin.readline().split()))\narr = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\nimport bisect"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == ans\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n-----Notes-----\n\nThe first line of the input contains two integers $n$ and $m$ \u2014 the number of cups of coffee and the number of pages in the coursework.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ \u2014 the caffeine dosages of coffee in the $i$-th cup.\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().strip().split(' ')]\na = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n\na.sort(reverse=True)\ns = 0\nfor i in range(len(a)):\n    if i < m:\n        s += a[i]\n    else:\n        s += a[i] - i\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\n\n\"\"\"\n\n\nimport math\nimport sys\nsys.stdin = open(\"input.txt\")\n\n\n\nn, m = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\na.sort()\n\nimport sys\n\nsys.stdin = open(\"input.txt\")\n\nn, m = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\na.sort()"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 36\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '4'\nassert solution('7 10') == '2'\nassert solution('5 16') == '-1'\nassert solution('5 26') == '-1'\n\nassert solution('5 15') == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nn, m = input().split()\na = [int(i) for i in input().split()]\nd = [0] * (n + 1)\nfor i in range(n):\n    max_ = 0\n    for j in range(i + 1):\n        max_ = max(a[j] - j + 1, max_)\n    d[i + 1] = d[i] + max_\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\"\"\"\n\n\n\n\"\"\"\n:input:\n4 11\n3 5 2 3 6 6 2 3 5\n\n:output:\n4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24 21 14 10') == 3\nassert solution('500 500') == 0\nassert solution('14 5 1') == -1\nassert solution('1 3 6 9 12') == 1\n\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 5 1\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1234567890') == '9'\nassert solution('12345678901234567890') == '3'\nassert solution('100') == '1'\nassert solution('100 123') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"24 21 14 10\") == \"3\"\n\nassert solution(\"500 500\") == \"0\"\n\nassert solution(\"1 3 6 9 12\") == \"1\"\n\nassert solution(\"14 5 1\") == \"-1\"\n\"\"\"\n\nimport numpy as np\n\nstdin = open(0).read().split()\nn = int(stdin[0])\nb = list(map(int, stdin[1:]))"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10 16 25\") == \"0\"\nassert solution(\"4 10 16 21\") == \"0\"\nassert solution(\"4 10 16 20\") == \"1\"\nassert solution(\"4 10 16 19\") == \"1\"\nassert solution(\"4 10 16 18\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\") == \"3\"\nassert solution(\"2 5 1\") == \"0\"\nassert solution(\"3 5 1\") == \"-1\"\nassert solution(\"5 1 2\") == \"1\"\nassert solution(\"5 1 3\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('5\\n1 3 6 9 12') == '1'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n14 5 1') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('5\\n1 3 6 9 12') == '1'\n\"\"\"\n\nfrom collections import Counter, defaultdict\n\nn = int(stdin.readline().strip())\n\nseq = list(map(int, stdin.readline().strip().split()))\n\nd = defaultdict(set)\n\nfor i in range(len(seq)):\n    for j in range(i+1, len(seq)):\n        d[seq[i]].add(seq[j])\n\nvisited = set()"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 10 100 1000') == '4'\nassert solution('5 2\\n1 2 15 15 15') == '5'\nassert solution('6 1\\n36 4 1 25 9 16') == '2'\nassert solution('4 4\\n1 10 100 1000') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"2\"\nassert solution(\"5 3\\n1 10 100 1000\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2\n1 2 15 15 15''') == '5'\nassert solution('''6 1\n36 4 1 25 9 16''') == '2'"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"./input.txt\", sep=\" \", header=None, engine=\"python\")\na = df[0].values\nb = df[1].values\n\nc = np.concatenate((a, b))\nd = np.diff(c)\n\nprint(np.unique(d).size)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 10 100 1000') == '4'\nassert solution('4 3\\n1 10 100 1000') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\nassert solution('6 1\\n36 4 1 25 9 16\\n') == '2'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nprint(sum([a[i] * (a[i] + 5) // 2 for i in range(n)]) // k)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 10 100 1000') == '4'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"6 10 6\\n1 2 3 4 5\") == \"6\"\nassert solution(\"3 10 5\\n2 5 4\") == \"-1\"\n\"\"\"\nfrom math import ceil\n\nn, k, m = list(map(int, input().split()))\nscores = list(map(int, input().split()))\nscores = scores[:-1]\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\"\n\nimport sys\n\nn, m, k = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\narr = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\n\narr.sort()\nprint(arr[-1] + k - arr[-2])"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == 8\nassert solution('4 9 10\\n9 7 9 10') == 9\nassert solution('3 3 10\\n1 2 3') == -1\nassert solution('1 2 3\\n0 1 2') == 3\nassert solution('1 2 3\\n2 0 1') == 3\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nimport sys\n\nN, K, M = [int(x) for x in sys.stdin.readline().strip().split()]\nscores = [int(x) for x in sys.stdin.readline().strip().split()]\n\nmin_ = 0\nfor i in range(N):\n    if scores[i] < K:\n        min_ += scores[i]"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 5\\n4 5 2 1\\n1 2 3 4\\n5 6 7 8\") == \"4\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"6 10 4\\n8 7 7 7\\n5 9 3 9\\n4 4 4 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\nassert solution(\"5 10 7\\n8 9 3 6\") == '8'\nassert solution(\"5 10 7\\n8 10 3 6\\n1 1 1\") == '1'\nassert solution(\"5 10 7\\n8 10 3 6\\n1 1 1\\n10 10 10\") == '-1'\nassert solution(\"5 10 7\\n8 9 3 6\\n1 1 1\\n10 10 10\\n1 1 1\") == '3'\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == 8\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\"\n\nN, K, Q = [int(i) for i in stdin.readline().split()]\nscores = [K] * N\nfor i in range(Q):\n    score = int(stdin.readline())\n    scores[score - 1] -= 1\nfor i in scores:\n    if i <= 0:\n        print('No')\n    else:\n        print('Yes')"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('5 3 4\\n3\\n1\\n3\\n2\\n5') == 'No\\nNo\\nYes\\nNo\\nNo'\nassert solution('6 2 7\\n1\\n2\\n2\\n3') == 'No\\nNo\\nYes'\n\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nn, k, q = map(int, input().split())\nscores = [k] * n\nfor _ in range(q):\n    a = int(input())\n    scores[a - 1] -= 1\n    for i in range(n):\n        scores[i] += 1 if i!= a - 1 else -1\n\nprint('\\n'.join(['Yes' if score <= 0 else 'No' for score in scores]))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"6 3 4\"\n) == \"No\"\n\nassert solution(\n    \"3 3 4\"\n) == \"No\"\n\nassert solution(\n    \"2 3 4\"\n) == \"No\"\n\nassert solution(\n    \"3 1 4\"\n) == \"No\"\n\nassert solution(\n    \"6 1 1\"\n) == \"No\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\"\n\nprint(solution(\"6 3 4\\n3\\n1\\n3\\n2\"))"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"2 3 1\\n1\\n1\") == \"Yes\\nNo\"\nassert solution(\"1 3 1\\n2\\n1\") == \"No\\nYes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n10'\nassert solution('3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'\n\n-----Solution-----\n\n\"\"\"\n\n\"\"\"\nIn the first line we read 2 integers - the size of the matrix.\n\nIn the next lines we read the matrix. We read a matrix of 2 dimensions - matrix[i][j].\n\nInverting the matrix is a bit more complicated, so we have to create a new one.\n\nSo, let's start with an empty array.\n\n\"\"\"\n\nn, m = map(int, input().split())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\n\"\"\"\nWe have a matrix of size n x m.\n\nSo, we have n lines and m columns.\n\nInverting a row means:\n\ninvert all elements in the row.\n\nInverting a column means:\n\ninvert all elements in the column.\n\nThat means, for each element we want to change it into its opposite value.\n\nSo, we have to change each element in every row and column:\n\n1. change all elements in every column to their opposite value,\n2. change all elements in every row to their opposite value.\n\nSo, if a matrix has n rows and m columns, it will be inverted n + m times.\n\nWe need a new matrix of n + m size.\n\nWe initialize a new matrix with zeros:\n\nnew_matrix[i][j] = 0\n\nWe iterate through the matrix, so for every element we change it:"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\") == \"YES\\n010\\n0000\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('1\\n') == '1\\n'\nassert solution('0\\n') == '0\\n'\nassert solution('1\\n') == '1\\n'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\nassert solution(\"1 1\\n0 1\") == 'NO'\nassert solution(\"1 2\\n1 1\") == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"YES\\n010\\n01010\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n1 1 1\") == \"NO\\n1010\"\n\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n\n5. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0417\u0430\u0434\u0430\u043d\u0430 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0412\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430\u0434 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u044e. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0451 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0435\u0451 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0442\u0430\u043b\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e, \u0441\u0432\u0435\u0440\u0445\u0443 \u0432\u043d\u0438\u0437.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b n. \u0414\u0430\u043b\u0435\u0435 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0447\u0438\u0441\u0435\u043b \u2014 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a \u0447\u0438\u0441\u0435\u043b. \u0427\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432.\n\nSample Input 1:\n\n2\n\nSample Output 1:\n\nYES\n01\n\nSample Input 2:\n\n3\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n4\n\nSample Output 3:\n\nYES\n10 22 41\n02 10 22\n02 10 22\n\nSample Input 4:\n\n5\n\nSample Output 4:\n\nYES\n01 03 02\n10 11 12\n01 10 20\n30 31 32\n\nSample Input 5:\n\n2\n\nSample Output 5:\n\nNO\n\nSample Input 6:\n\n1\n\nSample Output 6:\n\nYES\n10"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\nassert solution(\"1 1\\n0 1\") == 'NO'\n\"\"\"\nimport collections\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\n\na = [[int(x) for x in sys.stdin.readline().split()] for _ in range(n)]\n\ninv_row_dict = collections.defaultdict(int)\ninv_col_dict = collections.defaultdict(int)\n\nfor row in range(n):\n    for col in range(m):\n        inv_row_dict[row] += a[row][col]\n        inv_col_dict[col] += a[row][col]"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('253') == 'Yes'\nassert solution('121') == 'No'\nassert solution('109') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('121') == 'Yes'\nassert solution('37') == 'Yes'\nassert solution('21') == 'No'\nprint('Test pass.')"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"412\") == \"No\"\nassert solution(\"123\") == \"Yes\"\nassert solution(\"21\") == \"No\"\nassert solution(\"41\") == \"Yes\"\nassert solution(\"432\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"413\") == \"Yes\"\nassert solution(\"373\") == \"Yes\"\nassert solution(\"436\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"9\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"273\") == \"Yes\"\nassert solution(\"959\") == \"Yes\"\nassert solution(\"987\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"32\") == \"No\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1\\n1 1 0 0\") == 3\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == 3\nassert solution(\"5 2 1\\n1 1 0 1 0\") == 3\nassert solution(\"6 2 1\\n0 0 0 1 0 1\") == 5\nassert solution(\"6 2 1\\n0 0 0 1 0 1\\n1 1 0 1 0\") == 5\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"5 1 1\\n1 0 0 1 0\") == \"0\"\nassert solution(\"6 1 1\\n1 0 0 1 0\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn, b, a = map(int, stdin.readline().split())\ns = list(map(int, stdin.readline().split()))\n\nc = 0\nfor i in range(n):\n    if s[i] == 0:\n        c += 1\n\nmax_c = c\n\nfor i in range(n):\n    if s[i] == 1:\n        c -= 1\n    if c > max_c:\n        max_c = c\n    if s[i] == 0:\n        c += 1\n\nprint(max_c)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\nassert solution('3 2 1\\n1 0 0') == '0'\nassert solution('7 3 3\\n0 1 0 0 0 1') == '0'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\nfrom typing import List\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\\n\") == \"3\"\n\"\"\"\n\nfrom collections import deque\n\nINPUT_LINES = 3\n\nB, A = list(map(int, input().split()))\na = deque(list(map(int, input().split())))\n\nb = []\nwhile a:\n    b.append(a.popleft())\n\nmax_segments = 0\nbattery_segments = 0\naccumulator_segments = 0\n\nwhile b:\n    while b and (battery_segments < A or accumulator_segments < A):\n        if b[0] <= A - battery_segments:\n            battery_segments += b.pop(0)\n        else:\n            accumulator_segments += b.pop(0)\n    max_segments += 1\n    battery_segments = 0\n    accumulator_segments = 0\n\nprint(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == 5\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == 3\nassert solution('10 10 10\\n0 0 0 0 0 0 0 0 0 0\\n') == 10\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"7 2 1\\n1 0 0 1 0 1 1\") == \"6\"\n\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"1+1+1+1+1\") == \"33\"\nassert solution(\"1+1+1+1+1+1+1+1+1+1+1\") == \"11\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\nassert solution(\"112-37\") == \"375\"\n\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"6\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\nprint(\"Well done!\")\n-----\n\n\u0412\u044b \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u043b\u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n-----\n\n\u0412\u0430\u0448\u0435\u043c\u0443 \u043e\u0442\u0432\u0435\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430.\n\u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0436\u0435 \u0437\u043d\u0430\u0435\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430.\n\u0414\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b \u0443\u0436\u0435 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u043f\u0440\u0430\u0432\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u0442\u0435\u043a\u0441\u0442\u0435 \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0442\u044c\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (\\n).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\u0422\u0435\u0441\u0442 1\n\nInput\n\n8-7+6-5+4-3+2-1-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 2\n\nInput\n\n2+2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 3\n\nInput\n\n112-37\n\nOutput\n\n375\n\n\u0422\u0435\u0441\u0442 4\n\nInput\n\n2+2-2*2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 5\n\nInput\n\n1+1*2-2/2\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 6\n\nInput\n\n1+2+2-2*2+2-2*2\n\nOutput\n\n-1\n\n\u0422\u0435\u0441\u0442 7\n\nInput\n\n9+9-9*9/9+9-9*9\n\nOutput\n\n8\n\n\u0422\u0435\u0441\u0442 8\n\nInput\n\n7+7*7*7-7*7+7*7-7\n\nOutput\n\n-5\n\n\u0422\u0435\u0441\u0442 9\n\nInput\n\n8-7+6-5+4-3+2-1-0+0-0+0+0-0+0-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 10\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 11\n\nInput\n\n1+1*2-2*2+2-2+2*2-2*2\n\nOutput\n\n-1\n\n\u0422\u0435\u0441\u0442 12\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 13\n\nInput\n\n9+9-9+9*9+9-9*9+9*9+9*9*9*9-9*9*9+9*9*9+9\n\nOutput\n\n8\n\n\u0422\u0435\u0441\u0442 14\n\nInput\n\n8+7+6-5+4-3+2-1-0+0-0+0+0-0+0-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 15\n\nInput\n\n2+2-2*2+2-2+2*2-2*2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 16\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 17\n\nInput\n\n9+9-9+9*9+9-9*9+9*9+9*9*9*9-9*9*9+9*9*9+9\n\nOutput\n\n8\n\n\u0422\u0435\u0441\u0442 18\n\nInput\n\n7+7*7*7-7*7+7*7-7+7+7*7*7*7*7-7*7*7+7*7*7+7\n\nOutput\n\n-5\n\n\u0422\u0435\u0441\u0442 19\n\nInput\n\n1+1*2-2*2+2-2+2*2-2*2\n\nOutput\n\n-1\n\n\u0422\u0435\u0441\u0442 20\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 21\n\nInput\n\n8-7+6-5+4-3+2-1-0+0-0+0+0-0+0-0\n\nOutput\n\n4\n\n\u0422\u0435\u0441\u0442 22\n\nInput\n\n2+2-2*2+2-2+2*2-2*2\n\nOutput\n\n-46\n\n\u0422\u0435\u0441\u0442 23\n\nInput\n\n1+1-1+1+1*1*1-1*1+1+1-1+1+1+1\n\nOutput\n\n0\n\n\u0422\u0435\u0441\u0442 24\n\nInput\n\n9+9-9+9*9+9-9*9"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"1+1\") == \"2\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\"))\nprint(solution(\"2+2\"))\nprint(solution(\"112-37\"))\n\n\n\n7.1 Write a program that prompts for a list of numbers as above and at the end prints out both the maximum and minimum of the numbers instead of the average.\n\n\n-----Input-----\n\nEnter a number: 6\nEnter a number: 2\nEnter a number: 9\nEnter a number: 3\nEnter a number: 5\nEnter a number: 102\nEnter a number: 9\nEnter a number: 3\nEnter a number: 12\nEnter a number: 4\n\n-----Output-----\n\nThe minimum number is 2\nThe maximum number is 102"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1')\nassert solution('13 4\\n') == 'NO'\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n3 1\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'YES'\n\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n''') == \"YES\\n3 1\\n1 3\"\n\nassert solution('''10 4\n''') == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\"\n\nassert solution('''13 4\n''') == \"NO\"\n\nassert solution('''2 2\n''') == \"NO\"\n\nassert solution('''1 3\n''') == \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\n\nassert solution('''10 4\n''') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'''\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2'\nassert solution('10 4') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 1\\n1 100 1 1\\n') == '100'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"6 2 3\\n1 100 1 1\") == -1\nassert solution(\"6 2 3\\n1 100 1 1\") == -1\n\n-----Notes-----\n\nIn the first test input the program should return \"18\" because at the beginning Vova can repost only the first three pictures (because there are only three consecutive pictures).\n\nIn the second test input the program should return \"100\" because at the beginning Vova can repost only the first picture, but there are five consecutive pictures. After that Vova has to skip the first and the second picture, because he has to repost at least one of them. He can then repost the third and the fourth picture. The last picture is reposted because it's the last one in the segment.\n\nIn the third test input the program should return \"-1\" because there are only four pictures in the news feed and there is no segment of at least size 2 in it.\n\nIn the fourth test input the program should return \"-1\" because there are only four pictures in the news feed and there is no segment of at least size 2 in it.\n\nIn the fifth test input the program should return \"100\" because there are six pictures in the news feed and one of them is reposted.\n\n\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2 3\n1 100 1 1''') == '100'\n\nassert solution('''4 2 4\n1 100 1 1\n\n''') == '-1'\n\nassert solution('''4 2 3\n1 100 1 1\n\n''') == '100'\n\nassert solution('''5 2 3\n1 100 1 1\n\n''') == '100'\n\nassert solution('''5 2 3\n1 100 1 1\n\n''') == '100'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''5 1 3\n5 1 3 10 1'''\n) == '18'\n\nassert solution(\n'''6 1 5\n10 30 30 70 10 10'''\n) == '-1'\n\nassert solution(\n'''4 3 1\n1 100 1 1'''\n) == '100'\n\nassert solution(\n'''6 2 5\n1 100 1 1 1'''\n) == '100'\n\nassert solution(\n'''6 2 5\n1 100 1 1 5'''\n) == '110'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == 18\nassert solution('6 1 5\\n10 30 30 70 10 10') == -1\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1\n''') == '18'\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3\\n5 1 3 10 1') == '18'\nassert solution('4 2 3\\n5 1 3 10') == '-1'\nassert solution('5 2 3\\n3 1 10 1 1') == '11'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 1 5\\n1 1 1') == '1'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 1\nassert solution(\"11110\") == 5\nassert solution(\"11111\") == 11\nassert solution(\"11101\") == 5\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 4\nassert solution(\"011101\") == 5\nassert solution(\"011110111111110111\") == 21\nassert solution(\"1101111011110111\") == 19\n\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111011111') == '7'\nassert solution('11111111') == '8'\nassert solution('111011110') == '10'\nassert solution('101111011') == '9'\nassert solution('111110111') == '12'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('1 1') == 1\nassert solution('1111') == 3\nassert solution('1100') == 2\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00100') == 3\nassert solution('11110') == 0\nassert solution('10111') == 2\nassert solution('11111') == 1\nassert solution('10000') == 2\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution) == \"5\\n3\\n21\\n4\\n\"\n\n\"\"\"\n\nfrom typing import Tuple\nfrom sys import stdin\n\nn_k: Tuple[int, int] = tuple(map(int, stdin.readline().split()))\nrooms: str = stdin.readline().strip()\n\nrouter_spots: list[int] = [i for i, room in enumerate(rooms) if room == \"1\"]\n\nrouters: list[int] = []\ncost: int = 0\n\nfor i in range(n_k[0]):\n    if i not in router_spots:\n        routers.append(i)\n\nrouters.sort()\n\nfor router in routers:\n    cost += router\n    for room in range(router - n_k[1], router + n_k[1] + 1):\n        if room in router_spots:\n            router_spots.remove(room)\n\nprint(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1111') == 3\nassert solution('101010') == 1\nassert solution('1110010101010') == 6\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00100') == 3\nassert solution('0000') == 1\nassert solution('11110') == 10\nassert solution('11111') == 20\nassert solution('11111000001') == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10011') == 21\nassert solution('11010') == 5\nassert solution('10010') == 4\nassert solution('10100') == 7\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('10') == '10'\nassert solution('100') == '101'\nassert solution('1110') == '1110'\nassert solution('111111') == '111111'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('python') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\", \"apple\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('azzel') == 'Yes'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"banana\") == \"No\"\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('ab') == 'ba'\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('5\\n4 4 3 3 4') == '20'\nassert solution('5\\n4 4 3 3 4\\n') == '20'\nassert solution('5\\n4 4 3 3 4\\n2 3 1 1 2\\n') == '7'\nassert solution('5\\n4 4 3 3 4\\n2 3 1 1 2\\n4 2 2 1 1\\n') == '11'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6 1 1 10 1\") == \"50\"\nassert solution(\"5 4 0 1 10 1\") == \"25\"\nassert solution(\"5 3 0 1 10 1\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 50 -25 -15 10 100\") == \"75\"\nassert solution(\"5 50 -25 -15 10 100\") == \"75\"\nassert solution(\"10 100 -25 -15 100\") == \"100\"\nassert solution(\"10 100 -25 -15 100\") == \"100\"\nassert solution(\"50 100 -25 -15 100\") == \"100\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '1'\nassert solution('10000') == '0'\nassert solution('1 10') == '10'\nassert solution('10 10') == '0'\nassert solution('10 20') == '10'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 7 8 10\") == \"9\"\nassert solution(\"4 3 3 2 1\") == \"3\"\nassert solution(\"4 3 1 2 1\") == \"1\"\nassert solution(\"2 2 2 2 2\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"24\"\nassert solution(\"6 12\") == \"47\"\nassert solution(\"3 10\") == \"22\"\nassert solution(\"2 10\") == \"20\"\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 3 5\") == \"11\"\nassert solution(\"2 3 1 1 1\") == \"11\"\nassert solution(\"3 3 1 1 1\") == \"10\"\nassert solution(\"4 3 1 1 1\") == \"16\"\nassert solution(\"5 3 1 1 1\") == \"15\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABAB\\n3\\n1 2 3') == 'YES'\nassert solution('ABAB\\n3\\n1 2 2') == 'NO'\nassert solution('ABAABABBBAB\\n4\\n1 2 2 2 3') == 'YES'\nassert solution('ABAABABBBAB\\n4\\n1 2 2 3 4') == 'NO'\nassert solution('ABAABABBBAB\\n4\\n1 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 4 2\") == \"5\"\nassert solution(\"5 2 4 2 3\") == \"3\"\nassert solution(\"10 9 10 7 4 4\") == \"10\"\nassert solution(\"10 1 10 7 4 4\") == \"10\"\nassert solution(\"8 5 10 5 5 3 1\") == \"12\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3 4\") == \"8\"\nassert solution(\"3 3 2\") == \"0\"\nassert solution(\"3 3 2 0\") == \"3\"\nassert solution(\"0 5 5\") == \"7\"\nassert solution(\"5 5 10\") == \"11\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport sys\n\nD, G = map(int, sys.stdin.readline().strip().split(\" \"))\n\nscores = {}\nfor _ in range(D):\n    p, c = map(int, sys.stdin.readline().strip().split(\" \"))\n    scores[p] = c\n\nscores_p_1 = {}\nscores_p_2 = {}\n\nfor i in range(1, D+1):\n    score = 100*i\n    if score not in scores:\n        scores_p_1[score] = 0\n    else:\n        scores_p_1[score] = scores[score]\n\nfor i in range(1, D+1):\n    score = 100*i\n    if score+100 not in scores:\n        scores_p_2[score] = 0\n    else:\n        scores_p_2[score] = scores[score+100]"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('1 1\\n1 1') == '0'\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\n\n\nimport itertools\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"3 500\\n5 800\") == \"2\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\") == '3'\nassert solution(\"3 500\") == '1'\nassert solution(\"5 800\") == '4'\n\"\"\"\n\nfrom collections import Counter\n\nD, G = list(map(int, stdin.readline().split()))\nproblems = dict()\nfor i in range(1, D + 1):\n    problems[i] = int(stdin.readline())\n\np_points = Counter(problems.values())"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\n\n\n\"\"\"\nSolution 1\n\"\"\"\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 500\\n3 800\\n5 800\\n') == '3'\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 4 5 5 6') == '2'\nassert solution('7 8 8 7 8 4 4 5') == '2'\nassert solution('9 2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\\n\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\\n\") == \"3\"\n\"\"\"\n\nnum_candies = int(input())\ncandies_weights = [int(i) for i in input().split()]\ncandies_weights_sorted = sorted(candies_weights)\nresult_sum = 0\n\nfor i in range(num_candies):\n    if i % 2 == 0:\n        result_sum += candies_weights_sorted[i]\n\nprint(result_sum)"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 1 1 2 3 1 3 1 1 2 3 1 3 2 1 2 3 2 3 3 3 2 1 2 2 1 2 3 3 3 1 3 1 3 1 2 3 1 2 3 1 3 2 3 2 3 1 3 1 1 1 1 3 1 2 3 1 2 2 3 1 3 1 1 1 1 1 1 3 2 3 3 3 3 3 3 2 2 3 2 1 1 3 1 3 2 1 2 2 1 2 3 1 3 1 2 1 3 1 3 2 1 1 1 1 2 2 3 3 1 1 1 1 1 1 1 1 3 2 1 3 1 3 3 1 1 1 1 1 1 1 1 3 2 3 1 1 2 3 2 1 2 3 1 2 1 1 3 1 2 2 1 1 2 3 3 3 2 1 3 1 2 2 1 1 2 2 1 1 2 1 1 2 2 1 1 2 2 3 2 1 1 2 3 2 3 3 2 2 2 1 3 2 2 1 1 1 1 2 2 2 1 1 2 3 3 3 2 2 1 1 1 2 1 1 2 1 1 1 1 3 2 1 2 3 3 3 2 1 2 3 2 1 1 2 1 2 1 2 1 2 2 3 1 1 2 1 2 3 1 1 2 2 1 1 2 2 2 1 1 1 1 2 1 2 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == 2\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == 2\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline().rstrip('\\n'))\narr = list(map(int, stdin.readline().rstrip('\\n').split()))\nd = {arr[0]: 0}\n\nodd = 0\neven = 0\nfor i in range(1, n):\n    odd += i if (i + 1) % 2 else arr[i]\n    even += i if i % 2 else arr[i]\n    if arr[i] == odd:\n        if arr[i]!= even:\n            d[i + 1] = 0\n    if arr[i] == even:\n        if arr[i]!= odd:\n            d[i + 1] = 0"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 4 5 5 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\nassert solution(\"7\\n8 2 3 1 1 2 4 6\") == \"3\"\nassert solution(\"7\\n6 4 4 4 6 6 6\") == \"0\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 5\\n1 100 1 1\") == \"100\"\n\"\"\"\n\nn, k, x = [int(x) for x in input().split()]\n\na = [int(x) for x in input().split()]\n\nsum_a = sum(a)"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == -1\nassert solution(\"4 1 5\\n1 100 1 1\") == 100\n\"\"\"\n\nn, k, x = map(int, input().split())\nbeauty = list(map(int, input().split()))"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == 18\nassert solution('''4 2 1\n1 100 1 1''') == 100\nassert solution('''6 1 5\n10 30 30 70 10 10''') == -1\n\nprint('Hooray!')\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"4 3 1\\n10 30 30 70 10 10\") == \"100\"\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n1 100 1 1\") == \"100\"\nassert solution(\"4 2 3\\n1 100 1 1\\n5 1 2 10 1\") == \"100\"\nassert solution(\"5 2 3\\n1 100 1 1\\n5 1 2 10 1\\n5 1 3 20 1\") == \"110\"\nassert solution(\"5 2 3\\n1 100 1 1\\n5 1 2 10 1\\n5 1 3 20 1\\n3 1 1 100 1\") == \"110\"\n\n-----Note-----\nIn the first sample Vova can repost all the pictures in the news feed, but he is not able to repost some of them to have a total sum of beauty values equal to maximum possible.\n\nIn the second sample, Vova can repost the first picture and the second one. He is not able to repost any picture, because after reposting the second picture he has to wait for at least two consecutive pictures, so he has no choice.\n\nIn the third sample, Vova can repost all the pictures except the last one.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\") == \"10\"\nassert solution(\"4 1 5\") == \"10\"\nassert solution(\"4 1 5 2 5\") == \"12\"\nassert solution(\"4 1 5 2 5 3 10 5\") == \"10\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 3 10 1') == '18'\nassert solution('6 1 5') == '-1'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\nprint(\"Hooray!\")\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11\\n') == 'Yes'\nassert solution('10\\n') == 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == 'No'\nassert solution('7\\n') == 'Yes'\nassert solution('10\\n') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 'Yes'\nassert solution('15') == 'No'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n\") == \"Yes\"\nassert solution(\"20\\n\") == \"Yes\"\nassert solution(\"4\\n\") == \"Yes\"\nassert solution(\"1\\n\") == \"No\"\nassert solution(\"2\\n\") == \"No\"\n\"\"\"\n\n\"\"\"\nI asked the TA why I get no output for the last test case, but I guess it is due to the fact that the inputs are given from stdin (which is not meant for a human).\n\"\"\"\n\nn = int(stdin.readline())\n\nfor i in range(2**n):\n    cake_sum = 0\n    doughnut_sum = 0\n    for i in range(n):\n        if (i < n // 2):\n            cake_sum += 4\n            doughnut_sum += 7\n        else:\n            cake_sum += 7\n            doughnut_sum += 4\n    if (cake_sum == doughnut_sum and cake_sum == n):\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"12\") == \"Yes\"\nassert solution(\"13\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 'Yes'\nassert solution('20') == 'No'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == 'Yes'\nassert solution('9\\n') == 'No'\nassert solution('7\\n') == 'Yes'\nassert solution('3\\n') == 'No'\nassert solution('10\\n') == 'No'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\nassert solution(\"3\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 1 3\"\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_COMMANDS = INPUT_LINES[1:]\nOUTPUT_COMMANDS = []\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\nassert solution('4\\n3 4 5\\n2 1 5\\n1 2 5\\n3 2 5') == '3 3 5'\n\"\"\"\n\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n1 1 1\\n1 1 1\") == \"1 1 1\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abaa\") == 4\nassert solution(\"abab\") == 2\nassert solution(\"aaba\") == 2\nassert solution(\"aaaa\") == 0\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('redcoder') == '1'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('redcoder') == '1'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abcdedcba\") == 0\n\"\"\"\n\n\"\"\"\nInput:\ncoder\n\nOutput:\n3\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"abba\") == \"abba\"\nassert solution(\"abab\") == \"abba\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\n\n\"\"\"\ninput\n10\n\noutput\nYes\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"Yes\"\nassert solution(3) == \"Yes\"\nassert solution(4) == \"No\"\nassert solution(5) == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == 'Yes'\nassert solution('100') == 'No'\n\"\"\"\n\nn = int(input())\n\nfor i in range(1, 9+1):\n    for j in range(1, 9+1):\n        if (n % i == 0 and n % j == 0):\n            print('Yes')\n            exit()\n\nprint('No')"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == 'Yes'\nassert solution('1') == 'No'\nassert solution('10') == 'Yes'\nassert solution('11') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == \"No\"\nassert solution(13) == \"Yes\"\nassert solution(10) == \"Yes\"\nassert solution(2) == \"No\"\n\"\"\"\n\nn = int(input())\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if n == i * j:\n            print(\"Yes\")\n            break\n    else:\n        continue\n    break\nelse:\n    print(\"No\")\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('10') == 'Yes'\nassert solution('9') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"15\") == \"Yes\"\nassert solution(\"30\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\n\nN = int(input())\n\nfor i in range(1, 10):\n    if N % i == 0:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"8\") == \"Yes\"\nassert solution(\"16\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(7) == \"No\"\nassert solution(12) == \"Yes\"\nassert solution(15) == \"No\"\nassert solution(20) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def find_triplets(self, sticks: List[int]) -> int:\n        sticks.sort()\n        count = 0\n        for i in range(0, len(sticks) - 2):\n            j = i + 1\n            k = len(sticks) - 1\n            while j < k:\n                if sticks[i] + sticks[j] + sticks[k] > sticks[i] * sticks[j] * sticks[k]:\n                    k -= 1\n                    count += (k - j)\n                else:\n                    j += 1\n        return count\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n4 4 9 7 5''') == 5\n\n----\n\n'''\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\nassert solution('2 20') == '-1'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\n\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\nfrom sys import stdin\n\nfor line in stdin:\n    print(int(line.split(' ')[0]) * int(line.split(' ')[1]))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"10\"\nassert solution(\"2 5\") == \"-1\"\nassert solution(\"6 7\") == \"42\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 2\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"2 4\\n1 2 2 1\") == \"2\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"1 1\\n5\") == \"2\"\n\n\"\"\"\n\nimport sys\n\n_, *arr = [line.strip() for line in sys.stdin]\narr = list(map(int, arr[0].split()))\nM, N = arr[0], arr[1]\n\ncurr = 0\ncount = 0\nwhile curr < M and count < N:\n    while curr < M and count < N and arr[curr+1]!= arr[curr]:\n        curr += 1\n    if curr == M - 1 and count < N:\n        count += 1\n        curr = 0\n    if count < N:\n        curr += 1\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == 5\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\n-----\n2 5\n10 12 1 2 14\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\n\n---Problem---\nA student is standing at position 0 on a number line. The i-th student has a positive integer score of scores[i] lying on the number line alongside him.\n\nAs the student makes a move, they can change their position to:\n\n1. Keep their current position.\n2. Move one place to the left.\n3. Move one place to the right.\n\nWhat is the minimum score of a single move that the student can make to ensure they reach a maximum score of max_score?\n\n-----Solution------\nTo ensure that they are at the maximum score, the maximum score must lie on the left or rightmost position.\nWe can start with the leftmost position, then calculate the minimum score for each of the students on the left of the position.\nWe can start with the rightmost position, then calculate the minimum score for each of the students on the right of the position.\nWe can find the minimum score for each student by first finding the maximum score of the left side, then finding the maximum score of the right side.\nThe maximum of the left and right side will be the minimum score of the student.\nWe can find the maximum score on the left and right side by traversing the scores in the sorted order,\nand then finding the minimum score by traversing the scores in the reversed sorted order."
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"10 20 2 2 1\") == \"7\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\nassert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\nassert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"111100\"\n\n\"\"\"\n\n\nfrom collections import deque, Counter\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n111010\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example1) == '2'\n\nassert solution(example2) == '1'\nassert solution(example3) == '1'\nassert solution(example4) == '2'\n\nassert solution(example5) == '2'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import ceil\nfrom typing import Dict, List, Tuple, Set, Optional\n\n\nclass Paths:\n    _N = int\n    _roads = List[Tuple[int, int]]\n    _reversed_roads: Dict[Tuple[int, int], Tuple[int, int]]\n    _dists: Dict[int, int]\n\n    def __init__(self, n: int, roads: List[Tuple[int, int]]) -> None:\n        self._N = n\n        self._roads = roads\n        self._reversed_roads = {(b, a) for a, b in roads}\n        self._dists = defaultdict(int)\n\n    def __repr__(self) -> str:\n        return f'N: {self._N}; dists: {self._dists}'\n\n    def is_connected(self, city: int, start: Optional[int] = None) -> bool:\n        if start is None:\n            start = self.capital\n\n        cur = start\n        visited = {start}\n        while cur is not None:\n            next_city = self.next_city(cur)\n            if next_city == city:\n                return True\n            elif next_city in self._dists:\n                return False\n            cur = next_city\n            visited.add(cur)\n\n        return False\n\n    def is_connected_from_capital(self, city: int) -> bool:\n        return self.is_connected(city)\n\n    def dist(self, city1: int, city2: int) -> int:\n        if city1 < city2:\n            city1, city2 = city2, city1\n        return self._dists[(city1, city2)]\n\n    def next_city(self, city: int) -> Optional[int]:\n        for road in self._roads:\n            if road[1] == city:\n                return road[0]\n        return None\n\n    def update_dist(self, city1: int, city2: int, dist: int) -> None:\n        if city1 < city2:\n            city1, city2 = city2, city1\n        self._dists[(city1, city2)] = dist\n\n    @property\n    def capital(self) -> int:\n        return self._roads[0][0]\n\n    @property\n    def cities(self) -> Set[int]:\n        return set(self._dists.keys())\n\n    @property\n    def roads(self) -> Set[Tuple[int, int]]:\n        return set(self._roads)\n\n    @property\n    def reversed_roads(self) -> Dict[Tuple[int, int], Tuple[int, int]]:\n        return self._reversed_roads\n\n    @property\n    def dists(self) -> Dict[int, int]:\n        return self._dists\n\n    def dists_as_tuples(self) -> List[Tuple[int, int]]:\n        return list(self._dists.keys())\n\n    def dists_as_list(self) -> List[int]:\n        return list(self._dists.values())\n\n\nclass MinimalSolutions:\n    _K = int\n    _N = int\n    _cities = Set[int]\n    _solutions: List[Tuple[Tuple[int, int],...]]\n\n    def __init__(self, n: int, k: int) -> None:\n        self._K = k\n        self._N = n\n        self._cities = set(range(1, n + 1))\n\n    def __repr__(self) -> str:\n        return f'N: {self._N}; solutions: {self._solutions}'\n\n    def __len__(self) -> int:\n        return len(self._solutions)\n\n    def solution_to_str(self, solution: Tuple[int,...]) -> str:\n        result = ''\n        for road in solution:\n            result += '1' if road in self.reversed_roads else '0'\n        return result\n\n    @property\n    def solutions(self) -> List[Tuple[int,...]]:\n        return self._solutions\n\n    @property\n    def reversed_roads(self) -> Dict[Tuple[int, int], Tuple[int, int]]:\n        return {(b, a) for a, b in self.roads}\n\n    @"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n101001\\n\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"1\\n101001\\n\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"2\\n111100\\n\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"1\\n111000\\n\"\nassert solution(\"4 6 2\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"2\\n111100\\n\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n111010\"\nassert solution(\"5 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"2\\n111010\\n111100\"\n\n-----Explanation-----\n\"\"\"\n\"\"\"\n1. We have a set of $n$ cities. Each city has a number from $1$ to $n$. Cities are numbered from $1$ to $n$. The capital is the city with number $1$.\n\nWe have $m$ roads. Each road connects two different cities. There is at most one road between two different cities.\n\nWe have $k$ possible options to choose roads for repair. The president has given us the number $m \\cdot k$ of possible options.\n\nWe want to choose $n-1$ roads for repair to preserve the connectivity of the country, and the sum of distances from city $1$ to all cities should be minimized (where we can only use the $n-1$ chosen roads).\n\nIt is possible to find a minimum number of roads in the $n-1$ roads that preserve this connectivity, and minimize the sum of distances from city $1$ to all cities.\n\nOur goal is to find $k$ possible ways to choose roads for repair.\n\nIf there are fewer than $k$ of them, then we need to find all possible valid options.\n\nWe can print the set of $k$ possible options in any order.\n\nWe can print each one of the $k$ possible options as a string of $m$ characters, where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included.\n\nWe can print an option as a string of $m$ characters where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included.\n\nWe can print an option as a string of $m$ characters where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included.\n\nSince we have $m \\cdot k \\le 10^6$, the total length of all the $t$ lines will not exceed $10^6$.\n\nSince the maximum length of the line in the output is $10^6$, we can print all the $k$ options one line at a time.\n\nIf there are several answers, we can print any of them.\n\nExample:\n\nn = 4, m = 4, k = 3\n\nroads = [\n    [1, 2],\n    [1, 3],\n    [2, 3],\n    [1, 4],\n]\n\n1 -> 2 -> 3 -> 4\n\ninput = \"4 4 3\n1 2\n2 3\n1 4\n4 3\"\n\n1. We can choose 2 roads that connect cities 1 and 2, and 3 and 4.\n\n1 -> 2 -> 3 -> 4\n\n2. We can choose 2 roads that connect cities 1 and 2, and 3 and 4.\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n3. We can choose 1 road that connects cities 1 and 3, and 2 and 4.\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\n2. We can choose 2 roads that connect cities 1 and 2, and 3 and 4.\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\nWe can print these options in any order.\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n1 -> 2 -> 3 -> 4\n\n1 -> 3 -> 2 -> 4\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('11\\n') == ''\nassert solution('101\\n') == ''\nassert solution('1111\\n') == ''\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '2'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '1'\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '2'\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"101101\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"101101\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"111100\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"111100\"\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\nroads = [list(map(int, input().split())) for _ in range(m)]\nt = min(k, m + 1)\nres = []\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import permutations, combinations\nfrom typing import Dict, Set, List, Deque, Tuple\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n2 5 3\\n4 5 6\") == \"YES\"\nassert solution(\"2 1 1 2 5\\n2 1 2 3\\n4 5 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3\") == \"YES\"\nassert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 3\") == \"NO\"\n\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"NO\"\n\nSolution:\n    \n    \n    from collections import Counter\n    n = int(stdin.readline())\n    wall = list(map(int, stdin.readline().split()))\n    counter = Counter(wall)\n    if max(counter.values()) < 2 or n == 1:\n        print(\"YES\")\n        return\n    if max(counter.values()) < 3:\n        print(\"NO\")\n        return\n    if n > 2 and max(counter.values()) == 3:\n        print(\"YES\")\n        return\n    if n > 2 and max(counter.values()) == 4:\n        print(\"NO\")\n        return\n    if n > 3 and max(counter.values()) == 4:\n        print(\"NO\")\n        return\n    if n > 4 and max(counter.values()) == 4:\n        print(\"NO\")\n        return\n    if n > 3 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 4 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 5 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 6 and max(counter.values()) == 5:\n        print(\"NO\")\n        return\n    if n > 5 and max(counter.values()) == 6:\n        print(\"NO\")\n        return\n    if n > 6 and max(counter.values()) == 6:\n        print(\"NO\")\n        return\n    if n > 7 and max(counter.values()) == 6:\n        print(\"NO\")\n        return\n    if n > 6 and max(counter.values()) == 7:\n        print(\"NO\")\n        return\n    if n > 7 and max(counter.values()) == 7:\n        print(\"NO\")\n        return\n    if n > 8 and max(counter.values()) == 7:\n        print(\"NO\")\n        return\n    if n > 7 and max(counter.values()) == 8:\n        print(\"NO\")\n        return\n    if n > 8 and max(counter.values()) == 8:\n        print(\"NO\")\n        return\n    if n > 9 and max(counter.values()) == 8:\n        print(\"NO\")\n        return\n    if n > 9 and max(counter.values()) == 9:\n        print(\"NO\")\n        return\n    if n > 10 and max(counter.values()) == 9:\n        print(\"NO\")\n        return\n    if n > 10 and max(counter.values()) == 10:\n        print(\"NO\")\n        return\n    if n > 11 and max(counter.values()) == 10:\n        print(\"NO\")\n        return\n    if n > 11 and max(counter.values()) == 11:\n        print(\"NO\")\n        return\n    if n > 12 and max(counter.values()) == 11:\n        print(\"NO\")\n        return\n    if n > 12 and max(counter.values()) == 12:\n        print(\"NO\")\n        return\n    if n > 13 and max(counter.values()) == 12:\n        print(\"NO\")\n        return\n    if n > 13 and max(counter.values()) == 13:\n        print(\"NO\")\n        return\n    if n > 14 and max(counter.values()) == 13:\n        print(\"NO\")\n        return\n    if n > 14 and max(counter.values()) == 14:\n        print(\"NO\")\n        return\n    if n > 15 and max(counter.values()) == 14:\n        print(\"NO\")\n        return\n    if n > 15 and max(counter.values()) == 15:\n        print(\"NO\")\n        return\n    if n > 16 and max(counter.values()) == 15:\n        print(\"NO\")\n        return\n    if n > 16 and max(counter.values()) == 16:\n        print(\"NO\")\n        return\n    if n > 17 and max(counter.values()) == 16:\n        print(\"NO\")\n        return\n    if n > 17 and max(counter.values()) == 17:\n        print(\"NO\")\n        return\n    if n > 18 and max(counter.values()) == 17:\n        print(\"NO\")\n        return\n    if n > 18 and max(counter.values()) == 18:\n        print(\"NO\")\n        return\n    if n > 19 and max(counter.values()) == 18:\n        print(\"NO\")\n        return\n    if n > 19 and max(counter.values()) == 19:\n        print(\"NO\")\n        return\n    if n > 20 and max(counter.values()) == 19:\n        print(\"NO\")\n        return\n    if n > 20 and max(counter.values()) == 20:\n        print(\"NO\")\n        return\n    if n > 21 and max(counter.values()) == 20:\n        print(\"NO\")\n        return\n    if n > 21 and max(counter.values()) == 21:\n        print(\"NO\")\n        return\n    if n > 22 and max(counter.values()) == 21:\n        print(\"NO\")\n        return\n    if n > 22 and max(counter.values()) == 22:\n        print(\"NO\")\n        return\n    if n > 23 and max(counter.values()) == 22:\n        print(\"NO\")\n        return\n    if n > 23 and max(counter.values()) == 23:\n        print(\"NO\")\n        return\n    if n > 24 and max(counter.values()) == 23:\n        print(\"NO\")\n        return\n    if n > 24 and max"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2 5\") == 'YES'\nassert solution(\"3 1 2 5\") == 'YES'\nassert solution(\"3 1 2 5\") == 'YES'\nassert solution(\"5 5 5 5\") == 'YES'\nassert solution(\"4 5 3\") == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n4 5 6') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('2\\n3 4') == 'YES'\nassert solution('1\\n10') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 3') == 'NO'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'YES'\nassert solution('''2\n10 10''') == 'YES'\nassert solution('''3\n1 2 3''') == 'NO'\nassert solution('''1\n2 3''') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nH, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nB = deque([0])\n\nwhile True:\n    d = B.popleft()\n    if H <= 0:\n        print(d + 1)\n        break\n    if d > N:\n        print(-1)\n        break\n    H = H + A[d]\n    B.append(d + 1)"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == -1\nassert solution('1 1\\n') == -1\nassert solution('1\\n0\\n') == 0\nassert solution('1 1\\n0\\n') == 0\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '1'\nassert solution('1\\n0\\n0') == '1'\nassert solution('1\\n0\\n0\\n0') == '1'\nassert solution('1\\n0\\n0\\n0\\n0') == '1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('  ') ==' '\nassert solution('1') == '1'\nassert solution('1  ') ==' '\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 4\") == \"110\"\nassert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\"\n\nH, n = map(int, input().split(' '))\n\nd = list(map(int, input().split(' ')))"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'ab'\nassert solution('zzzaa') == 'zz'\n\nprint('Hooray!')\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BBAABBBA') == 'BB'\nassert solution('ZZZAA') == 'ZZ'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\n\nassert solution(\"ZZZAA\") == \"ZZ\"\n\nassert solution(\"ABACABA\") == \"AB\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == 'AB'\nassert solution(\"ZZZAA\") == 'ZZ'\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\nimport re"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABCABCABCABC\") == \"ABC\"\nassert solution(\"ABCABCABCABCABCABC\") == \"ABC\"\nassert solution(\"ABCABCABCABCABCABCABC\") == \"ABC\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 2, \"First\"\nassert solution(\"codeforces\") == 9, \"Second\"\nassert solution(\"yes\") == 7, \"Third\"\nassert solution(\"b\") == 1, \"Fourth\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('test') == 2\nassert solution('codeforces') == 9\nassert solution('yes') == 7\nassert solution('b') == 1\nprint('all tests passed')\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('where') == 'here'\nassert solution('a') == ''\nassert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\nassert solution(\"b\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == \"2\"\nassert solution(\"west\") == \"2\"\nassert solution(\"codeforces\") == \"9\"\nassert solution(\"yes\") == \"7\"\nassert solution(\"b\") == \"1\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\n\"\"\"\nGiven a positive integer X, the next greater number will be one more than the next greatest number of X\n\nExample:\nX = 8, then the next greater number is 9\nX = 10, then the next greater number is 11\n\nYou have to write the function next_greater_element which finds the next greater number of X using the same approach of finding the next greater number of a number in a list.\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sample_inputs.input_1)) == str(sample_outputs.output_1)\nassert solution(str(sample_inputs.input_2)) == str(sample_outputs.output_2)\nassert solution(str(sample_inputs.input_3)) == str(sample_outputs.output_3)\n\nprint('Hooray!')"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\nimport sys\n\nN, X = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nInput\n3 2\n1 7\n\nOutput\n1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\n\"\"\"\n    :type n: int\n    :type x: int\n    :type a: List[int]\n    :rtype: int\n\"\"\"\n\"\"\"\n    \u6700\u5f8c\u306b\u8a08\u7b97\u3057\u305f\uff12\u4e57\u304b\u3089\uff11\u4e57\u306b\u5909\u63db\u3057\u3001\u8a08\u7b97\u6642\u9593\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u30c0\u30d6\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\nimport sys\n\nN, X = list(map(int, sys.stdin.readline().split()))\nx = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abb\") == \"Yes\"\nassert solution(\"abccba\") == \"Yes\"\nassert solution(\"abcdefgfedcba\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\n\n----\nsolution = 'Yes' if ''.join(x) in ''.join(x)[::-1] else 'No'\n\n----\nsolution = 'Yes' if (s.replace('a', '').replace('b', '')) in s else 'No'\n\n----\nS = input()\nfor i in range(int((len(S)+1)/2)):\n    print(S[i] == S[-(i+1)])\n\n----\n\nS = input()\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abacba\") == \"Yes\"\nassert solution(\"aaabbbb\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"ab\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"nannanana\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"akasaka\") == \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")\n\nA, B = map(float, sys.stdin.readline().split())\nprint(\"{:.0f}\".format(A * B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '2'\nassert solution('2\\n1.5') == '2.5'\nassert solution('4\\n2.67') == '4.25'\nassert solution('4\\n1.67') == '4.0'\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\n\n\"\"\"\n    Find the solution using the \"Traditional\" Method\n    1. Find the greatest common divisor of a and b\n    2. Find the greatest common divisor of a' and b'\n    3. Multiply a' by the inverse of b' to find the second greatest common divisor\n    4. Multiply a' by the inverse of b' by the inverse of the first common divisor to find the final solution\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\nprint(\"Passed\")\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7') == '1'\nassert solution('10\\n7') == '0'\nassert solution('3\\n2') == '0'\nassert solution('2\\n1') == '1'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 1\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 2\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n7\\n1\\n2\\n3\\n2000000000\\n763243547\") == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('2000000000') == '999999999'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n4\") == \"0\"\nassert solution(\"7\\n4\") == \"2\"\nassert solution(\"2\\n2\\n2\\n5\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\") == \"0\"\nassert solution(\"9 9 1\") == \"3\"\nassert solution(\"5 4 5\") == \"1\"\nassert solution(\"5 4 4\") == \"0\"\nassert solution(\"5 1 5\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"0\"\nassert solution(\"4 3 4\") == \"0\"\nassert solution(\"9 7 1\") == \"2\"\nassert solution(\"9 9 1\") == \"3\"\nassert solution(\"2 2 0\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"3\"\nassert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"1\"\nassert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"0\"\nassert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\"\"\") == \"3\"\nassert solution(\"\"\"5 4 5\n1 2\n2 3\n3 4\n4 1\"\"\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\\n6 5\\n7 9\") == \"3\"\nassert solution(\"4 3\\n4 5\\n5 6\\n7 9\") == \"1\"\nassert solution(\"9 8\\n8 7\\n7 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nassert solution(\"9 7\\n8 6\\n7 1\\n7 2\\n6 3\\n5 1\\n1 2\\n1 3\\n1 4\\n2 4\") == \"0\"\nassert solution(\"9 7\\n8 6\\n7 1\\n7 2\\n6 3\\n5 1\\n1 2\\n1 3\\n1 4\\n2 4\") == \"0\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nweights = list(map(int, sys.stdin.readline().split()))\n\nmax_ = 0\nfor i, w in enumerate(weights):\n    for j, w2 in enumerate(weights[i + 1:], i + 1):\n        for k, w3 in enumerate(weights[j + 1:], j + 1):\n            if w + w2 + w3 > max_:\n                max_ = w + w2 + w3\n\nprint(max_)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\nassert solution(\"6\\n1 1 1 4 4 4\") == 5\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nboxers = list(map(int, sys.stdin.readline().split()))\n\nboxers.sort()\n\nmax_weight = 0\nsum_weight = 0\n\nfor weight in boxers:\n    if weight > max_weight:\n        sum_weight = weight\n        max_weight = weight\n    elif weight > max_weight:\n        sum_weight += weight\n        max_weight = weight\n\nprint(sum_weight)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 4 1') == '4'\nassert solution('6 1 1 4 4 4') == '5'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"4\\n2 3 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\") == \"000001000002\\n000001000001\\n000010001020\\n00001010011\\n\"\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n1 32\n2 63\n1 12\n\"\"\") == \"000001000002\\n000002000001\\n000001000001\"\n\n\"\"\"\nU\n\n\"\"\"\n\n\"\"\"\nD\n\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3\\n1 32\\n2 63\\n1 12\"\n) == \"000001000002\\n000002000001\\n000001000001\"\n\n\"\"\"\n\nimport sys\nfrom typing import Dict, List\n\n\nclass Solution:\n    def __init__(self, N: int, M: int, prefectures: Dict[int, List[int]]) -> None:\n        self.N = N\n        self.M = M\n        self.prefectures = prefectures\n\n    def get_city_id(self, city_id: int) -> str:\n        prefectures = self.prefectures\n        id_list = []\n        for prefecture_id, year_list in prefectures.items():\n            if city_id < year_list[0]:\n                continue\n            id_list.append(prefecture_id)\n\n        if len(id_list) == 0:\n            return \"0\" * (self.N * 6)\n\n        id_list.sort()\n\n        len_id_list = len(id_list)\n\n        remainder = city_id - id_list[0]\n        digits = len_id_list * 6\n\n        return str(id_list[0]) + str(remainder).zfill(digits - len_id_list * 6)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N M\\nP_1 Y_1\\n:') == '000002000001'\nassert solution('N M\\nP_1 Y_1\\n:') == '000001000002'\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split(' ')]\n\nassert n >= 1\nassert n <= 10000\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport sys\n\n_ = input()\nprefectures = list(map(int, sys.stdin.readline().split()))\ncities = list(map(int, sys.stdin.readline().split()))\n\nprefectures.sort()\ncities.sort()\n\nfor prefecture, year in zip(prefectures, cities):\n    print(prefecture * 10000 + year)\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 8 40\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 8 40') == '2'\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 8 40') == '2'\n\"\"\"\n\nimport sys\nimport heapq\n\nT = int(sys.stdin.readline().strip())\n\n\nfor i in range(T):\n    A = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    heapq.heapify(A)\n    while len(A) > 1:\n        heapq.heappush(A, heapq.heappop(A) + heapq.heappop(A))\n    print(A[0])\n\n\"\"\"\nimport sys\nimport heapq\n\nT = int(sys.stdin.readline().strip())\n\n\nfor i in range(T):\n    A = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    heapq.heapify(A)\n    while len(A) > 1:\n        A = [heapq.heappop(A) + heapq.heappop(A) for _ in range(len(A)//2)]\n    print(A[0])\n\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 10 8 40') == '2'\n'''"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?(___+__-__):-___>__') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(_-/___+_*__):-___>__\") == \"0250341\"\nassert solution(\"?(_-_+_/_____):-__>__,_____<__\") == \"false\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__\") == \"false\"\n\n-----Notes-----\n\nThe returned string must be the lexicographically smallest.\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"?(____+___):-____<_,_<___,-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(____):-____>__\") == \"01010\"\nassert solution(\"?(_________/_____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__________+__+___+____):-____>__.__<__,__<___,__<____,__<__,__<____,__<_____,__<______,__<_______.\") == \"0210\"\nassert solution(\"?(__________+____):-____>__.__<__,__<___,__<____,__<__,__<____,__<_____,__<______,__<_______.\") == \"0210\"\nassert solution(\"?(_____):-_____>__.__<__,__<___,__<____,__<__,__<____,__<_____,__<______,__<_______.\") == \"0210\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(___+__):-___>__\") == \"0101\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______\") == \"0250341\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">+-</\") == \"1000\"\nassert solution(\">-<\") == \"1\"\nassert solution(\"-><\") == \"false\"\nassert solution(\">-</\") == \"false\"\nassert solution(\"--0\") == \"0\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(_-/___*__):-___>__\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__\") == \"false\"\nassert solution(\"?(______________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(____+____):-____>__.__\") == \"0250341\"\nassert solution(\"?(____+____):-____<__.__\") == \"false\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == 3\n\nassert solution(\"3 4 2\") == 5\n\nassert solution(\"3 4 1000000000000000000\") == 0"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"1 3 3 3\") == 1\nassert solution(\"0 3 3 2\") == 0\n\nprint(solution(\"3 3 11\"))\nprint(solution(\"3 4 2\"))\nprint(solution(\"3 4 1000000000000000000\"))\nprint(solution(\"1 3 3 3\"))\nprint(solution(\"0 3 3 2\"))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 11\\n2 1 5\\n7 10 0\\n12 6 4') == '3'\nassert solution('3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1') == '5'\nassert solution('3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 11') == 3\n\nassert solution('3 4 2') == 5\n\nassert solution('3 4 1000000000000000000') == 0\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('rocesfedoc') == 'codeforces'\nassert solution('z') == 'z'\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\nassert solution(\"z\") == \"z\"\nassert solution(\"a\") == \"a\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == 19\n\"\"\"\n\nimport sys\n\nnums = [int(a) for a in sys.stdin.readline().split()]\n\nprint(nums[0] + nums[1])\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 14') == 19\nassert solution('381 492') == 873\n\"\"\"\na, b = map(int, input().split())\nprint(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 14\") == \"19\"\n\nassert solution(\"381 492\") == \"873\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == 19\nassert solution('381 492') == 873\nprint('Success')\n\nInput\n0 0\n\nOutput\n0\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint(solution('381 492'))"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\n\na,b=map(int,input().split())\nprint(a+b)"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\n\n\nfrom collections import defaultdict\n\nclass BrainFuckInterpreter:\n    def __init__(self):\n        self.memory = defaultdict(int)\n        self.command = ''\n        self.stdin = ''\n        self.pointer = 0\n        self.code = []\n        self.stdout = ''\n        self.steps = 0\n\n    def input(self,command:str):\n        self.command = command\n\n    def input_stdin(self,stdin:str):\n        self.stdin = stdin\n\n    def output(self,value:int):\n        self.stdout += chr(value)\n\n    def execute_command(self,command:str):\n        if command == ',':\n            self.input(input())\n        elif command == '.':\n            self.output(ord(self.stdin[self.pointer]))\n            self.pointer += 1\n        elif command == '+':\n            self.memory[self.pointer] += 1\n            if self.memory[self.pointer] > 255:\n                self.memory[self.pointer] = 0\n        elif command == '-':\n            self.memory[self.pointer] -= 1\n            if self.memory[self.pointer] < 0:\n                self.memory[self.pointer] = 255\n        elif command == '<':\n            self.pointer -= 1\n            if self.pointer < 0:\n                self.pointer = 0\n        elif command == '>':\n            self.pointer += 1\n            if self.pointer > len(self.stdin)-1:\n                self.pointer = len(self.stdin)-1\n\n    def execute_code(self):\n        for command in self.code:\n            self.execute_command(command)\n            self.steps += 1\n            if self.steps > 5000000:\n                break\n            if self.stdout!= '':\n                break\n        return self.stdout"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+') == '<[<+>-]<'\nassert solution('-') == '<[<-><+>]>'\nassert solution('+-') == '>'\nassert solution('+5') == '>5>'\nassert solution('5+') == '>+5<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2+3') == '++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2+3') == '+>'\nassert solution('9-7') == '+++++++++>'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+2-3\") == \"++++++>++++<[-]<\"\nassert solution(\"-9+1\") == \"++++++++>++++<[>+>+<<-]<\"\n\n\"\"\"\n\nclass Tape:\n    def __init__(self, cells, _cell_width, _cell_number=1):\n        self._cell_width = _cell_width\n        self._cell_number = _cell_number\n        self.cells = cells\n\n    def write(self, i, c):\n        if i > self._cell_number - 1:\n            return\n        self.cells[i] = c\n\n    def read(self, i):\n        if i > self._cell_number - 1:\n            return ''\n        return self.cells[i]\n\n    def __repr__(self):\n        result = ''\n        for i in range(self._cell_number):\n            result += self.cells[i] * self._cell_width\n        return result\n\n    def __str__(self):\n        return self.__repr__()\n\n\nclass Interpreter:\n    def __init__(self, program):\n        self.program = program\n        self.tape = Tape([None for _ in range(1_000_000)], 1)\n        self.pointer = 0\n        self.step = 0\n\n    def step_back(self, number_of_steps):\n        self.step -= number_of_steps\n        self.pointer -= number_of_steps\n\n    def step_forward(self, number_of_steps):\n        self.step += number_of_steps\n        self.pointer += number_of_steps\n\n    def step_left(self, number_of_steps):\n        self.step += number_of_steps\n\n    def step_right(self, number_of_steps):\n        self.step -= number_of_steps\n\n    def execute_command(self, command):\n        if command == '>':\n            self.pointer += 1\n        elif command == '<':\n            self.pointer -= 1\n        elif command == '+':\n            self.tape.write(self.pointer, 1)\n        elif command == '-':\n            self.tape.write(self.pointer, 0)\n        elif command == '.':\n            print(chr(self.tape.read(self.pointer)), end='')\n        elif command == ',':\n            self.tape.write(self.pointer, ord(input()[0]))\n        elif command == '[':\n            if not self.tape.read(self.pointer):\n                while True:\n                    command = self.program[self.step]\n                    if command == ']':\n                        break\n                    self.execute_command(command)\n                return\n        elif command == ']':\n            if self.tape.read(self.pointer):\n                while True:\n                    command = self.program[self.step]\n                    if command == '[':\n                        break\n                    self.execute_command(command)\n                return\n        else:\n            raise Exception('Unknown command')\n\n    def interpret(self):\n        self.pointer = 0\n        self.step = 0\n        while self.step < len(self.program):\n            command = self.program[self.step]\n            self.execute_command(command)\n            self.step += 1\n        return self.tape\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"22+22\") == \"++++++++++>\\n++++++++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"0+0\") == \"+0\\n0\"\nassert solution(\"0-0\") == \"-0\\n0\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n', 'Wrong answer'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n', 'Wrong answer'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '3'\nassert solution('1\\n2\\n3\\n4\\n') == '4'\n\n'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112233445566778899010\") == \"9\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1'\nassert solution('2 2') == '2'\nassert solution('1 2') == '2'\nassert solution('2 3') == '0'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112233445566778899\") == \"9\"\nassert solution(\"1123456789\") == \"9\"\nassert solution(\"9123456789\") == \"9\"\nassert solution(\"91234567890\") == \"0\"\nassert solution(\"912345678910\") == \"8\"\n\nSolution"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('112123123412345$\\dots$') == '2'\nassert solution('1234512345123451234512345$\\dots$') == '0'\nassert solution('12345123451234512345123451234512345$\\dots$') == '5'\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112123123412345\") == \"1\"\nassert solution(\"1121221111112222222233333\") == \"1\"\nassert solution(\"112123123412345\") == \"2\"\nassert solution(\"11211212311112222222233333\") == \"2\"\nassert solution(\"1111111122222222222233333\") == \"0\"\n\n\"\"\"\n\n\n\nimport re\nimport sys\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3\\n20\\n38\\n56\\n\") == \"2\\n5\\n2\\n0\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nassert solution('''4\n2132\n506\n999999999999999999\n1000000000000000000''') == '''8\n2\n4\n1'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('101') == '0'\nassert solution('1011') == '1'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5$5\\n1 2 3 4 5"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == '4'\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"4\"\n\n\"\"\"\n\nN = int(stdin.readline().strip())\n\nsans = set()\n\nfor i in range(1, N + 1):\n    seven = i % 10 == 7\n    five = i % 10 == 5\n    three = i % 10 == 3\n    seven_five_three = seven or five or three\n    if seven_five_three and str(i) not in sans:\n        sans.add(str(i))\n\nprint(len(sans))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == '4'\nprint(solution('575'))\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nimport math\n\nimport sys"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == 4\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 1\nassert solution('4') == 0\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5\\n') == ''\nassert solution('10\\n') == ''\nassert solution('23\\n') == ''\nassert solution('20\\n') == ''\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nn = int(stdin.readline().rstrip('\\n'))\nseven, five, three = 0, 0, 0\nfor i in range(1, n + 1):\n    s = str(i)\n    if '7' in s and '5' in s and '3' in s:\n        seven += 1\n    elif '7' in s and '5' in s:\n        five += 1\n    elif '7' in s:\n        three += 1\nprint(seven + five + three)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == ''\nassert solution('3\\n2\\n5\\n7') == '0'\nassert solution('3\\n1\\n2\\n3') == '1'\nassert solution('3\\n2\\n5\\n7\\n9') == '2'\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin_contents) == output\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11010101') == '1'\nassert solution('010101010') == '2'\nassert solution('11100010') == '3'\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1110') == 2\nassert solution('0110') == 1\nassert solution('1010') == 0\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1110111') == 5\nassert solution('10111') == 3\nassert solution('1110110') == 3\nassert solution('101110') == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(1)\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101\") == 1\nassert solution(\"11000\") == 1\nassert solution(\"11110\") == 2\nassert solution(\"111110\") == 3\nassert solution(\"11100010\") == 4\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''0''') == 1\nassert solution('''01''') == 2\nassert solution('''101010''') == 0\nassert solution('''111111111''') == 0\nassert solution('''0''') == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110110\") == 3\n\"\"\"\n\nS = input()\nblack = 0\nwhite = 0\nfor i in range(len(S)):\n    if S[i] == '1':\n        white += 1\n    else:\n        black += 1\n\nprint(min(black, white))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0101010\") == 3\nassert solution(\"0110110\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111\") == 3\nassert solution(\"1010\") == 1\n\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"1 2 3 4 5\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\nassert solution('6\\n7 9 10 31') == 'APPROVED'\nassert solution('7\\n9 10 31') == 'APPROVED'\nassert solution('8\\n10 31') == 'APPROVED'\nassert solution('9\\n10 31') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 6 7 8 9 10') == 'APPROVED'\nassert solution('4\\n5\\n3\\n2\\n1') == 'DENIED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\nassert solution('4\\n6 7 9 10') == 'DENIED'\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\n\"\"\"\nimport unittest\nfrom collections import deque\n\n\nclass TestClass(unittest.TestCase):\n\n    def test_given_case(self):\n        self.assertEqual(solution('RUDLUDR'), 'Yes')\n\n    def test_duplicates_in_input_are_ignored(self):\n        self.assertEqual(solution('RUUDLUDR'), 'Yes')\n\n    def test_empty_input(self):\n        self.assertEqual(solution(''), 'Yes')\n\n    def test_large_input(self):\n        self.assertEqual(solution('L'*100), 'Yes')\n\n    def test_only_RUDLR_input(self):\n        self."
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('RUDLUDR') == 'Yes'\nassert solution('LDRUDR') == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LDRUULR\") == \"No\"\nassert solution(\"RDDLRLU\") == \"Yes\"\nassert solution(\"DDLDRLLU\") == \"No\"\nassert solution(\"UDRLDDRLLUDRLRRUULDLLDDL\") == \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RLRUDR\") == \"No\"\nassert solution(\"UUUUDD\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\"\n\nimport sys\nimport string\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LURD\") == \"Yes\"\nassert solution(\"RUDLRUULRDRD\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LURDDR') == 'No'\nassert solution('UDLUR') == 'Yes'\nassert solution('RDUUR') == 'No'\n\"\"\"\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('RUDLUDR'), 'Yes')\n        self."
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5\\n') == '7'\nassert solution('5\\n3\\n2\\n4\\n3\\n5\\n') == '7'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '0'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '0'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '0'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nimport sys\n\ninput_list = sys.stdin.readlines()\n\nn = int(input_list[0].strip())\na, b, c, d, e = list(map(int, input_list[1].strip().split(\" \")))"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"10 5 2 4 3 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\nfrom math import ceil\n\nn, a, b, c, d, e = list(map(int, stdin.readline().split()))\nans = 0\n\nfor i in range(n):\n    ans += ceil(min(a, b, c) / min(a, b, c, d, e))\nprint(ans)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"1 1 1 1 1\") == \"2\"\nassert solution(\"10 100 10 100 100 100\") == \"110\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 2 4 3 5') == '7'\nassert solution('3 3 3 4 4') == '12'\nassert solution('1 1 1 1 1 1 1') == '30'\nassert solution('100 100') == '120'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom itertools import count\nimport sys\n\nN, A, B, C, D, E = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"10 10 10 10 10 10\") == \"15\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"31\"\nassert solution(\"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\") == \"501\"\nassert solution
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input().strip())\ncount = Counter(list(map(int, input().split())))\nres = 0\nfor i in range(10):\n    if count[i] == 0 or count[9 - i] == 0:\n        continue\n    res += 1\nprint(res % (10**9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\n\"\"\"\n\nn = int(input())\ncount = 0\ni = 1\nwhile i <= n:\n    if 9 in (0, i):\n        count += 1\n    if 0 in (0, i):\n        count += 1\n    i += 1\n\nprint(count)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0') == 1\nassert solution('5\\n1') == 1\nassert solution('5\\n9') == 0\nassert solution('5\\n11') == 0\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0\\n1\\n1\\n0\\n0\\n9\\n9\") == \"2\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N') == ''\nassert solution('N\\n') == ''\nassert solution('1\\n') == '0'\nassert solution('3\\n') == '1'\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3') == '2'\nassert solution('5') == '6'\n'''\n\nn = int(stdin.readline().strip())\nA = [0]\nA.extend([9]*(n-1))"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 5\n\"\"\"\nfrom collections import defaultdict\n\nfrom collections import Counter\n\n\nclass Solution:\n    def solve(self, stdin):\n        N = int(stdin)\n        seq = defaultdict(Counter)\n        a = Counter()\n        b = Counter()\n        for i in range(1, N + 1):\n            seq[i][0] = 1\n        for i in range(1, N + 1):\n            for j in range(i + 1, N + 1):\n                seq[i][9] += seq[j][9] + seq[j][0]\n        for i in range(1, N + 1):\n            for j in range(i + 1, N + 1):\n                if i + j == N:\n                    seq[i][0] += seq[j][0]\n                    seq[i][9] += seq[j][9]\n        for i in range(1, N + 1):\n            a[seq[i][0]] += 1\n            b[seq[i][9]] += 1\n        ans = 0\n        for i in range(1, 9):\n            ans += a[i] * b[9 - i]\n        return ans % (10 ** 9 + 7)\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"23\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"5\"\nassert solution(\"23\\n\") == \"23\"\nassert solution(\"20\\n\") == \"23\"\nassert solution(\"10\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == 7\nassert solution(\"20\") == 23\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"23\"\nprint('Hooray')\n\n'''\n'''\n\n'''\n'''\n\n'''\n'''\n\n'''\n\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"23\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20') == '23'\nassert solution('3') == '2'\nassert solution('0') == '2'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(20) == 23\nprint(solution(20))\n\n'''\nfrom math import sqrt\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        if int(stdin) < 2:\n            return 2\n        else:\n            for i in range(int(stdin)):\n                if i > 1:\n                    for j in range(2, int(sqrt(i)) + 1):\n                        if i % j == 0:\n                            break\n                    else:\n                        return i\n        return -1"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == 7\nassert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"3\") == 5\nassert solution(\"20\") == 23\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\nassert solution(\"4 3 1 3 2\") == \"0\"\nassert solution(\"4 3 1 3 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 3 2') == '1'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nS = list(map(int, stdin.readline().strip().split(' ')))\n\nn = len(S)\ni = 0\nj = n-1\ncount = 0\n\nwhile i < j:\n    if S[i] == S[j]:\n        i += 1\n        j -= 1\n    else:\n        count += 1\n        i += 1\n        j -= 1\n\nprint(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 1 3 2') == 1\n\n\"\"\"\n\nimport sys\nimport functools\nimport collections"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\nassert solution(\"3 1 3 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nn, *v = map(int, stdin.split())\nn = int(n)\nv = list(v)\n\ncount = 0\nfor i in range(n - 1):\n    if v[i] == v[i + 2]:\n        count += 1\n        v[i] = 1\n        v[i + 2] = 1\n\nprint(count)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(bamboo_input) == optimal_output\n\n\"\"\"\nimport math"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"1 100 1 1\") == \"0\"\nassert solution(\"3 100 100 200\") == \"4\"\nassert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n\n\"\"\"\nI'll look into this later, but it's a good question.\nThe main problem is that I'm not sure what to store the results of the functions that consumes mp in.\n\nThe function that consumes mp is a recursive function that gets called three times.\nIt returns a tuple (cost, mp_consumed, combo_bamboo_bamboo_length, length_of_bamboo_length_1, length_of_bamboo_length_2)\n\nSo, we need to store the values returned by the first two recursive calls.\nThe first one consumes 1 mp, so we store it.\nThe second one consumes 10 mp, so we store it.\n\"\"\"\n\nimport unittest\nfrom collections import namedtuple\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 100 90 80\"\n) == \"23\"\n\"\"\"\n\n########################################################################\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\n\"\"\"\nYou are given the following variables:\n - N, a positive integer\n - A, a positive integer\n - B, a positive integer\n - C, a positive integer\n - D, a positive integer\nYour task is to determine the minimum amount of money you need to rob this house at the earliest,\nwithout alerting the police.\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == '23'\nprint(solution(stdin))"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nfrom utils.trees.btree import TreeNode\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\nassert solution(\"SHINCHAN\") == \"CDEFGHA\"\n\nassert solution(\"AB\") == \"CD\"\n\nassert solution(\"ABCDE\") == \"CDEFG\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\n\"\"\"\n\nimport os\nimport sys\nimport collections\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6\nABCXYZ\n''') == 'CDEZAB'\n\nassert solution('''\n2\nABCXYZ\n''') == 'CDEZAB'\n\nassert solution('''\n0\nABCXYZ\n''') == 'ABCXYZ'\n\nassert solution('''\n26\nABCXYZ\n''') == 'ABCXYZ'\n\nassert solution('''\n27\nABCXYZ\n''') == 'ABCXYZ'"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\nassert solution(\"ABCXYZ\", 3) == \"ADGZAB\"\nassert solution(\"ABCXYZ\", 26) == \"ABCXYZ\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('3 5 2 3 2 4 5') == '3 4 2 5'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1 2 3'\nassert solution('2 3 1\\n') == '3 2 1'\nassert solution('2 5 3 4\\n') == '5 4 3 2'\nassert solution('2 5 3 5\\n') == '5 5 3 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())\n\n\nhttps://codeforces.com/gym/1296/problem/A\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\n\"\"\"\n\nfrom math import ceil, sqrt\nfrom itertools import permutations\n\nimport math\nimport itertools"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 3 2 4\") == \"3 4 2\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nres = ''\nfor i in range(n):\n    curr_cnt = 0\n    curr_max_pr = 0\n    for j in range(n):\n        if j == i:\n            continue\n        if arr[j] <= curr_max_pr:\n            curr_cnt += 1\n        if curr_cnt == k:\n            if i < n - 1:\n                res += '11'\n            else:\n                res += '22'\n            break\n        elif curr_cnt > k:\n            break\n        curr_max_pr = max(curr_max_pr, arr[j])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '21112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"1111111111\"\nassert solution(\"5 1\") == \"2222222221\"\nassert solution(\"7 1\") == \"1122221222\"\nassert solution(\"5 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5 2\"\n) == \"1111\"\nassert solution(\n\"7 1\"\n) == \"22112\"\nassert solution(\n\"5 1\"\n) == \"21112\"\nassert solution(\n\"7 1\"\n) == \"22112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1') == '211'\nassert solution('5 1') == '2112'\nassert solution('7 1') == '11212'\nassert solution('5 2') == '22212'\nassert solution('7 2') == '2222212'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n2 4 5 3 1\"\"\") == \"11111\"\nassert solution(\"\"\"5 1\n2 1 3 5 4\"\"\") == \"21112\"\nassert solution(\"\"\"7 1\n7 2 1 3 5 4 6\"\"\") == \"1121122\"\nassert solution(\"\"\"5 1\n2 4 5 3 1\"\"\") == \"21112\"\nassert solution(\"\"\"7 1\n7 2 1 3 5 4 6\"\"\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('7 2') == '22111'\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 2) == \"21112\"\nassert solution(5, 1) == \"22112\"\nassert solution(7, 1) == \"1121122\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('2\\n1 1') == 2\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''5\n1 2 1 2 3\n''') == 2\n\nassert solution(\n'''2\n100 1\n''') == 2\n\nassert solution(\n'''4\n1 3 3 7\n''') == 4"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('4\\n1 3 3 7') == 4\n\"\"\"\n\n\"\"\"\nInput\n3\n3 1 3 2\n\nOutput\n3\n\nInput\n3\n1 2 3\n\nOutput\n2\n\"\"\"\n\na = [int(i) for i in input().split()]\nn = len(a)"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1 2 3') == 2\nassert solution('100 1') == 2\nassert solution('100 2') == 4\nassert solution('100 3') == 8\nassert solution('100 4') == 16\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"4\\n2\"\nassert solution(\"6\\n1 3 7 9 15\") == \"6\\n1\"\nassert solution(\"3\\n1 2 3\") == \"1\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\n\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 1 2 3\n''') == 2\n\nassert solution('''2\n1 3\n''') == 4\n\nassert solution('''4\n1 3 7\n''') == 4\n\nassert solution('''4\n100 1\n''') == 4\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7\") == 3\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations, permutations\nfrom math import factorial\nfrom typing import Dict, Iterable, List, Tuple, Callable\n\nfrom helpers import print_assert\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('4\\n1 3 3 7') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"4\\n100 1\") == \"2\"\n\nprint(solution(input().strip()))\n\n\n\n\n\n-----\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\nassert solution('1 2 3 4 5') == '2'\n\nassert solution('16') == '1'\n\nassert solution('1 1 1 1023') == '0'\n\nassert solution('4 7 1 5 4 9') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n4 7 1 5 4 9') == '1'\nassert solution('5\\n1 2 3 4 5') == '2'\nassert solution('1\\n16') == '1'\nassert solution('4\\n1 1 1 1023') == '0'\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0011') == '4'\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11110') == '4'\nassert solution('11000') == '1'\nassert solution('10000') == '0'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1110111\") == 4\n\"\"\"\nimport time\n\nfrom typing import List\n\nclass Cube:\n    def __init__(self, s: str) -> None:\n        self.colors: List[str] = [s] * len(s)\n        self.colors[0] = \"1\"\n        self.colors[-1] = \"0\"\n        self.colors[-2] = \"1\"\n        self.colors[1] = \"0\"\n\n    def remove(self, i: int, j: int) -> None:\n        if i < 0 or j < 0 or i >= len(self.colors) or j >= len(self.colors):\n            raise ValueError(f\"Invalid indices: {i}, {j}\")\n        if self.colors[i]!= \"1\" or self.colors[j]!= \"0\":\n            raise ValueError(f\"At least one cube is not red or blue: {i}, {j}\")\n        self.colors[i] = \"0\"\n        self.colors[j] = \"0\"\n\n    def can_remove(self, i: int, j: int) -> bool:\n        if i < 0 or j < 0 or i >= len(self.colors) or j >= len(self.colors):\n            return False\n        if self.colors[i]!= \"1\" or self.colors[j]!= \"0\":\n            return False\n        return True\n\n    def get_color(self, i: int) -> str:\n        return self.colors[i]\n\n    def to_string(self) -> str:\n        return \"\".join(self.colors)\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110111\") == 4\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            min_red, max_blue = min(red), max(blue)\n            if red.index(min_red) < blue.index(max_blue):\n                return min_red - blue.index(max_blue) + 1\n            else:\n                return -1\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\"\n        low, high = 0, len(l) - 1\n        while low < high:\n            mid = low + (high - low) // 2\n            if pos:\n                if l[mid] + mid + 1 >= len(l):\n                    high = mid\n                else:\n                    low = mid + 1\n            else:\n                if l[mid] + mid >= len(l):\n                    high = mid - 1\n                else:\n                    low = mid + 1\n        return low\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\"\n        low, high = 0, len(l) - 1\n        while low < high:\n            mid = low + (high - low) // 2\n            if pos:\n                if l[mid] + mid + 1 >= len(l):\n                    high = mid\n                else:\n                    low = mid + 1\n            else:\n                if l[mid] + mid >= len(l):\n                    high = mid - 1\n                else:\n                    low = mid + 1\n        return low\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\"\n        low, high = 0, len(l) - 1\n        while low < high:\n            mid = low + (high - low) // 2\n            if pos:\n                if l[mid] + mid + 1 >= len(l):\n                    high = mid\n                else:\n                    low = mid + 1\n            else:\n                if l[mid] + mid >= len(l):\n                    high = mid - 1\n                else:\n                    low = mid + 1\n        return low\n\nSolution to the above problem:\nclass Solution:\n    def remove_cubes(self, s: str) -> int:\n        \"\"\"\n        Args:\n          s: str: string representation of cube states\n        Returns:\n          int: number of cubes removed\n        \"\"\"\n        red, blue = [], []\n        for i, c in enumerate(s):\n            if c == \"0\":\n                red.append(i)\n            else:\n                blue.append(i)\n        \n        if not red and not blue:\n            return 0\n        elif not red or not blue:\n            return -1\n        else:\n            red = self.binary_search(red, True)\n            blue = self.binary_search(blue, False)\n            if red < blue:\n                return red - blue + 1\n            else:\n                return -1\n    \n    def binary_search(self, l: List[int], pos: bool) -> int:\n        \"\"\"\n        Args:\n          l: List[int]: list of positions for red cubes\n          pos: bool: whether red cubes must be on top (True) or bottom (False)\n        Returns:\n          int: lowest index in l that is greater than or equal to the number of red cubes on top (or on the bottom)\n        \"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1111') == 1\nassert solution('0111') == 1\nassert solution('1100') == 2\nassert solution('1010') == 2\nassert solution('1001') == 2\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101110011') == 4\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0011\") == 4\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0011') == 4\nassert solution('0111') == 3"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10011') == '4'\nassert solution('11101') == '1'\nassert solution('111111') == '0'\nassert solution('11111') == '0'\nassert solution('100') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11001100110011001111110011') == 12\nassert solution('111011110111111110111101111011') == 17\nassert solution('1111111011111111110111101111011') == 22\nassert solution('11101111011111111110111101111011') == 17\nassert solution
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\n---------------------------------------"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"2 2\\n1 3\\n2 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"4 2\\n3 4\\n1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\nassert solution('''3 2\n1 2\n2 3''') == '3'\nassert solution('''5 5\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6''') == '0'\nassert solution('''5 5\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6\n1 2\n3 4\n5 6''') == '5'\n\n---\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n5 6') == '2'\nassert solution('4 2\\n1 3\\n2 4') == '2'\nassert solution('3 2\\n2 3\\n1 2') == '0'\nassert solution('3 2\\n2 2\\n1 2') == '1'\n\"\"\"\n\n\"\"\"\nGiven the number of ID cards N and the number of gates M, followed by N lines, each containing two integers L_i and R_i (separated by a space):\n\n- Each ID card has a range of L_i to R_i, inclusive.\n- All the ID cards must have at least one card with range L_i to R_i.\n- If there is at least one card with range L_i to R_i, then the gate can be passed.\nHow many of the ID cards allow us to pass all the gates alone?\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq L_i \\leq R_i \\leq N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nL_1 R_1\nL_2 R_2\n\\vdots\nL_M R_M\n\n-----Output-----\nPrint the number of ID cards that allow us to pass all the gates alone.\n\n-----Sample Input-----\n4 2\n1 3\n2 4\n\n-----Sample Output-----\n2\n\nTwo ID cards allow us to pass all the gates alone, as follows:\n - The first ID card does not allow us to pass the second gate.\n - The second ID card allows us to pass all the gates.\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 1\") == 2\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n\nsys.setrecursionlimit(15000)\n\n\"\"\"\nO(N) solution with optimized space\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\nprint('Test pass.')"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\n-----\nGiven an integer array A of size N. The task is to remove all the duplicates from it. You need to change the order of the elements too.\n\nNote: You should change the order of the element, not remove or add any element.\n\nInput Format:\nFirst line of input contains T, number of testcases. Its followed by 2T lines. First line of each testcase contains N, the size of the array A. The next line contains N space separated integers of array A.\n\nConstraints:\n1 <= T <= 100\n1 <= N <= 106\n1 <= A[i] <= 106\n\nOutput Format:\nFor each testcase, print the sorted array on a new line.\n\nSample TestCase 1\nInput\n2\n5\n1 2 2 2 3\n4\n1 1 1 1\nOutput\n2 3\n1 1 1\n\n-----\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\nimport sys\nfrom math import inf"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 1\") == \"2\"\nassert solution(\"6 3 7 6 8 9\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nThis problem is a variation of job scheduling problem.\nIn this problem, we can schedule jobs on the basis of their start time. So, the idea is to schedule the jobs in such way that there is no overlap in job's schedules.\n\nFor a particular job j, we can pick the time interval (a, b) in which j will be executed. We can pick any time interval (a, b) such that all the previously scheduled jobs are done before b.\nWe can pick (a, b) in the following way:\n - Pick the time interval (a, b) such that there is no overlap with previously scheduled jobs.\n - (a, b) is a local optimum.\nNote that if (a, b) is not an optimum, (a, b') and (a', b) are also local optima.\n\nSo, the problem is now reduced to scheduling n jobs. We can solve this by applying dynamic programming.\n\"\"\"\n\nfrom typing import List\nfrom bisect import bisect_left\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5\n2 1 -3\"\"\") == \"3\"\n\nassert solution(\"\"\"2 4\n-1 1\"\"\") == \"4\"\n\nassert solution(\"\"\"4 10\n2 4 1 2\"\"\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n2 1 -3') == '3'\nassert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n-1 1') == '4'\nassert solution('4 10\\n1 1') == '0'"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\\n1 1\") == \"4\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"3 3\\n2 1 -3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n2 4 1 -3') == '3'\nassert solution('4 10\\n2 4 1 2') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 5\n2 1 -3\n''') == '3'\nassert solution('''\n4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nprint(solution(\"4 8 6 3 12 9\"))\n\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nprint(solution(\"42 28 84 126\"))\n\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nprint(solution(\"1000000000000000000 3000000000000000000\"))"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n\n\"\"\"\n\nimport numpy"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\", 'Test 1 failed'\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\", 'Test 2 failed'\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\", 'Test 3 failed'\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 6 3 12 9\\n') == '9 3 6 12 4 8'\nassert solution('42 28 84 126\\n') == '126 42 84 28'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('-1 2 5 8 11') == '1'\n\nprint('The code ran Correctly')\n\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\nassert solution(\"5\\n2 3 4 7 10 12\") == \"1\"\nassert solution(\"5\\n2 3 4 8 10 12\") == \"1\"\nassert solution(\"5\\n2 3 4 8 11 12\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3') == '0 2'\nprint('Test pass.')\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 3\n''') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\n\"\"\"\nSolution 3"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '0 2'\n\n\"\"\"\n\nfrom pydantic import BaseModel, validator\n\nclass CodingTest(BaseModel):\n    a: int\n    b: int\n    k: int\n\n    @validator('a', 'b', 'k')\n    def check_length(cls, value):\n        if len(str(value)) > 12:\n            raise ValueError('Length of integers should be less or equal to 12')\n        return value"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == '0 2'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1\") == \"0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"100\") == \"1\"\n\"\"\"\n\nX = int(input())\nbalance = 100\nyear = 0\nwhile balance < X:\n    balance *= (1 + 0.01)\n    year += 1\n\nprint(year)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '1'\nassert solution('100') == '5'\nassert solution('101') == '1'\nassert solution('103') == '3'\n\nprint('PASSED')\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('103') == '3'\nprint(solution(stdin), end='')\n\nSample Input\n100\n\nSample Output\n3\n\nExplanation\nThe first year's interest is 1 yen, which is discarded.\nThe second year's interest is 1 yen, which is discarded.\nThe third year's interest is 2 yen, which is added to the balance.\nThus, the third year is 103 yen, which is above the limit.\nThus, it takes three years for the balance to reach 103 yen or above.\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\nimport math\n\nX = int(input())\n\nprint(math.floor(math.log(X, 10) / math.log(1 + 1, 10)) + 1)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '1'\nassert solution('103') == '3'\nassert solution('100') == '0'\nassert solution('105') == '2'\nassert solution('1020') == '5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"103\") == '3'\nassert solution(\"100\") == '1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nans = 0\n\nwhile N >= 100:\n    ans += 1\n    N = N - 100 * (1 + 1 / 100)\n\nprint(ans)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101\\n102\\n103') == '3'\n\"\"\"\n\nx = int(stdin.readline())\ncnt = 0\nwhile True:\n    if x >= 100:\n        x += (1/100) * x\n        cnt += 1\n    else:\n        break\nprint(cnt)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '12'\nassert solution('4') == '28'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline())\n\n\"\"\"\nf(a, b, c) = 1 + min(f(a-1, b, c), f(a, b-1, c), f(a, b, c-1))\n\"\"\"\n\ndp = [[[0 for _ in range(K + 1)] for _ in range(K + 1)] for _ in range(K + 1)]\n\nfor a in range(1, K + 1):\n    for b in range(1, K + 1):\n        for c in range(1, K + 1):\n            if a == 1 and b == 1 and c == 1:\n                dp[a][b][c] = 1\n                continue\n\n            dp[a][b][c] = 1 + min(\n                dp[a - 1][b][c],\n                dp[a][b - 1][c],\n                dp[a][b][c - 1]\n            )\n\nprint(sum([sum([sum(row) for row in dp]) for _ in range(K + 1)]) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '9'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '9'\nassert solution('2\\n3') == '6'\nassert solution('3\\n3') == '1'\nassert solution('4\\n4') == '1'\nassert solution('5\\n5') == '1'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 6') == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 6') == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3 4 6') == 10\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\") == \"10\"\nprint(solution(\"3 4 6\"))\n\n\n3 4 6\n\n3 4 6\n\n-----Explanation-----\nFor m = 0, f(m) = 0.\nFor m = 1, f(m) = 0 + 4 + 6 = 10.\nFor m = 2, f(m) = 0 + 4 + 6 = 10.\nFor m = 3, f(m) = 0 + 4 + 6 = 10.\nFor m = 4, f(m) = 4 + 6 = 10.\nFor m = 5, f(m) = 0 + 4 + 6 = 10.\nFor m = 6, f(m) = 0 + 4 + 6 = 10.\nFor m = 7, f(m) = 0 + 4 + 6 = 10.\nFor m = 8, f(m) = 0 + 4 + 6 = 10.\nFor m = 9, f(m) = 0 + 4 + 6 = 10.\nFor m = 10, f(m) = 0 + 4 + 6 = 10.\n10 is the maximum value of f.\n\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2\\n1 2 3 4') == '10'\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\\n6\") == \"10\"\nprint(solution(\"3\\n4\\n6\"))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == ans\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split(\" \")]\n\narr.sort()\ntotal = 0\n\nfor i in range(n):\n    total += arr[n - i - 1]\n\nprint(total)\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n2 2\\n') == 'Yes'\nassert solution('2 1\\n2 2\\n3 1\\n3 3\\n') == 'No'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n6 6\\n4 4\\n3 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nprint(solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\") == \"No\"\nassert solution(\"2\\n3 3\") == \"Yes\"\nassert solution(\"2\\n1 1\") == \"Yes\"\nassert solution(\"5\\n1 1 1 2 2\") == \"Yes\"\nassert solution(\"5\\n1 1 1 3 3\") == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\"\n\nN = int(stdin.readline())\ndice = []\nfor i in range(N):\n    dice.append(list(map(int, stdin.readline().split())))\n\nfirst, second = None, None\nfor i in range(N):\n    if not first:\n        if dice[i][0] == dice[i][1]:\n            first = i\n    elif not second:\n        if dice[i][0] == dice[i][1]:\n            second = i\n    else:\n        if dice[i][0] == dice[i][1] and dice[i+1][0] == dice[i+1][1]:\n            if i-first >= 3:\n                print(\"Yes\")\n                return\n\nprint(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\nassert solution(\"5\\n1 2\\n3 3\\n4 4\\n3 3\\n\") == \"No\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\nr = int(input())\n\nx = r - 1\n\nprint(x * x)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\nprint(solution('2'))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == 1\nassert solution('5\\n') == 2\nassert solution('6\\n') == 3\nassert solution('7\\n') == 5\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 0\nassert solution(\"100\") == 0\nassert solution(\"1.5\") == 0\nassert solution(\"0\") == 0\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nimport math\n\nr = int(input())\nprint(math.ceil(r ** 2 * 4 / math.pi))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nn = int(input())\nprint(n * (n + 1) // 2)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\n\"\"\"\n1.1\n\nGiven r, how many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n1.2\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n2.1\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n2.2\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n2.3\n\nGiven is an integer r. How many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n3.1\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length 1 and width 1?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length 1 and width 1, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n3.2\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length 1 and width r?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length 1 and width r, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n3.3\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length r and width 2?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length r and width 2, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 2.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n4.1\n\nGiven is an integer r. How many times is the area of a rectangle of length r and width 1 larger than the area of a rectangle of length r and width 2?\nIt can be proven that the answer is always an integer under the constraints given.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint the area of a rectangle of length r and width 1, divided by the area of a rectangle of length r and width 2, as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe area of a rectangle of length 2 is 4 times larger than the area of a rectangle of length 1 and width 2.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n\"\"\"\n\n\"\"\"\n4.2\n\nGiven is an integer r. How many times is the"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 8 5 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('4\\n1 2 4 3') == 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"5\\n4 3 2 1\") == \"No\"\nassert solution(\"2\\n1 1\") == \"Yes\"\nassert solution(\"5\\n4 3 2 1\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n3 8 5 1''') == \"Yes\"\nassert solution('''4\n8 2 5 1''') == \"No\"\nassert solution('''3\n8 5 5 2''') == \"No\"\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n8 9 5 1') == 'Yes'\n\n\"\"\"\n\nN = int(input())\nL = [int(item) for item in input().split(' ')]\n\nmax_index = L.index(max(L))\nfor i, item in enumerate(L):\n    if i!= max_index:\n        if L[i] > L[max_index] + L[i]:\n            print('No')\n            break\nelse:\n    print('Yes')\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n3 8 5 1'\n) == 'Yes'\nassert solution(\n    '4\\n3 6 5 1'\n) == 'No'\nassert solution(\n    '6\\n3 6 5 1'\n) == 'Yes'\nassert solution(\n    '5\\n3 8 5 1'\n) == 'Yes'\nassert solution(\n    '5\\n3 7 5 1'\n) == 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 8 5 1\") == \"Yes\"\nassert solution(\"4 3 8 6 1\") == \"No\"\nassert solution(\"3 8 5 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nn = int(input().strip())\nl = list(map(int, input().strip().split()))\n\nmax_l = l[0]\nfor i in range(1, n):\n    max_l = max(max_l, l[i])\n\ncount = 0\nfor i in range(n):\n    count += l[i]\n\nprint(\"Yes\" if count > max_l else \"No\")\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\nassert solution(\"5 5\\n1 7\\n3 2\\n1 7\\n3 2\\n1 7\") == \"703\"\n\"\"\"\n\nN, M = map(int, input().split())\ns, c = [], []\nfor _ in range(N):\n    s.append(int(input()))\n    c.append(int(input()))\n\ns = sorted(s)\nc = sorted(c)\n\ns_idx = c_idx = 0\ns_min = s_max = 0\nc_min = c_max = 0\nwhile s_idx < N and c_idx < M:\n    if s[s_idx] >= c[c_idx]:\n        s_min, s_max = s[s_idx] + c[c_idx], s[s_idx] + c[c_idx]\n        break\n    s_idx += 1\n    c_min, c_max = c[c_idx] + s[s_idx], c[c_idx] + s[s_idx]\n\nprint(c_min if c_min < s_max else -1)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\n'''\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(''), -1)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7\\n') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\nimport sys"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\n\"\"\"\n3 3\n1 7\n3 2\n1 7\n\n2\n1 7\n3 2\n1 7\n\n-1\n\n2\n1 7\n3 2\n1 7\n\n-1\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 5\\n3 2\\n4 4\\n2 3\") == \"702\"\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == 9\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"9\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3') == '9'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3,2) == 9\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n\") == \"9\"\n\"\"\"\n\n\"\"\"\n    Solution\n    \n    N, K = map(int, stdin.readline().split())\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if (i + j) % K == 0 and (i * j) % K == 0:\n                count += 1\n    print(count)\n    \n    \n    \n    Notes\n    \n    - I'd like to be able to test this solution if I have the time\n    - I have the problem to solve to be like this\n    - When I tried to use modulus %, I got a runtime error.\n    - It was unclear whether I was using the left or the right hand side of the modulus\n    - There was no way for me to find out what was wrong\n\"\"\"\n\n\"\"\"\n    Solution\n    \n    N, K = map(int, stdin.readline().split())\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if (i + j) % K == 0 and (i * j) % K == 0:\n                count += 1\n    print(count)\n    \n    \n    \n    Notes\n    \n    - I'd like to be able to test this solution if I have the time\n    - I have the problem to solve to be like this\n    - When I tried to use modulus %, I got a runtime error.\n    - It was unclear whether I was using the left or the right hand side of the modulus\n    - There was no way for me to find out what was wrong\n\"\"\"\n\n\"\"\"\n    Solution\n    \n    N, K = map(int, stdin.readline().split())\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if (i + j) % K == 0 and (i * j) % K == 0:\n                count += 1\n    print(count)\n    \n    \n    \n    Notes\n    \n    - I'd like to be able to test this solution if I have the time\n    - I have the problem to solve to be like this\n    - When I tried to use modulus %, I got a runtime error.\n    - It was unclear whether I was using the left or the right hand side of the modulus\n    - There was no way for me to find out what was wrong\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 6\nassert solution(\"100 11\") == 12\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 2\") == \"9\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1,1) == 1\nassert solution(3,2) == 9\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2\n''') == 9\nprint(\"test passed\")\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nfrom enum import Enum\nfrom functools import reduce\n\nclass Solution:\n    def binary_to_decimal(self, binary: str) -> int:\n        \"\"\"\n        1. Create an enum for every character.\n        2. Return the sum of the enum of the characters of binary, power of 2, which is the base -2 representation.\n        \"\"\"\n        class Binary(Enum):\n            zero = 0\n            one = 1\n        return reduce(lambda x, y: x + (y.value * (2**int(y))), [x for x in Binary if x in binary], 0)\n\n    def decimal_to_binary(self, decimal: int) -> str:\n        \"\"\"\n        1. Create an enum for every character.\n        2. For every character in Binary, divide the decimal number by (-2), keep modulo of the value by 2 and append to the list.\n        3. Reverse the list, return the string.\n        \"\"\"\n        class Binary(Enum):\n            zero = 0\n            one = 1\n        return \"\".join([x.name for x in [Binary(int(i)) for i in bin(decimal)[2:]]])[::-1]"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == '1011'\nassert solution('3') == '11'\nassert solution('8') == '1000'\nassert solution('6') == '110'\nassert solution('11') == '1001'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\n\"\"\"\nAn integer can be expressed as the sum of all powers of 2 in base -2. \nIn other words, for every integer N, there exists an integer M, such that N = 2^M + 1.\n\nWhat is the largest integer N such that there is no integer M such that N = 2^M + 1?\n\n-----Constraints-----\n - N \\leq 10^9\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'\nassert solution('9') == '1001'\nassert solution('10') == '1010'\nassert solution('-10') == '1010'\nassert solution('100') == '1011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-9') == '1011'\nassert solution('9') == '1001'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11) == '11'\nassert solution(10) == '101'\nassert solution(0) == '0'\nassert solution(1) == '1'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\nassert solution(\"4 5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100\\n1 101\\n1 102\\n1 103\\n1 104\\n1 105\\n1 106\\n1 107\\n1 108\\n1 109\\n1 110\\n1 111\\n1 112\\n1 113\\n1 114\\n1 115\\n1 116\\n1 117\\n1 118\\n1 119\\n1 120\\n1 121\\n1 122\\n1 123\\n1 124\\n1 125\\n1 126\\n1 127\\n1 128\\n1 129\\n1 130\\n1 131\\n1 132\\n1 133\\n1 134\\n1 135\\n1 136\\n1 137\\n1 138\\n1 139\\n1 140\\n1 141\\n1 142\\n1 143\\n1 144\\n1 145\\n1 146\\n1 147\\n1 148\\n1 149\\n1 150\\n1 151\\n1 152\\n1 153\\n1 154\\n1 155\\n1 156\\n1 157\\n1 158\\n1 159\\n1 160\\n1 161\\n1 162\\n1 163\\n1 164\\n1 165\\n1 166\\n1 167\\n1 168\\n1 169\\n1 170\\n1 171\\n1 172\\n1 173\\n1 174\\n1 175\\n1 176\\n1 177\\n1 178\\n1 179\\n1 180\\n1 181\\n1 182\\n1 183\\n1 184\\n1 185\\n1 186\\n1 187\\n1 188\\n1 189\\n1 190\\n1 191\\n1 192\\n1 193\\n1 194\\n1 195\\n1 196\\n1 197\\n1 198\\n1 199\\n1 200\\n1 201\\n1 202\\n1 203\\n1 204\\n1 205\\n1 206\\n1 207\\n1 208\\n1 209\\n1 210\\n1 211\\n1 212\\n1 213\\n1 214\\n1 215\\n1 216\\n1 217\\n1 218\\n1 219\\n1 220\\n1 221\\n1 222\\n1 223\\n1 224\\n1 225\\n1 226\\n1 227\\n1 228\\n1 229\\n1 230\\n1 231\\n1 232\\n1 233\\n1 234\\n1 235\\n1 236\\n1 237\\n1 238\\n1 239\\n1 240\\n1 241\\n1 242\\n1 243\\n1 244\\n1 245\\n1 246\\n1 247\\n1 248\\n1 249\\n1 250\\n1 251\\n1 252\\n1 253\\n1 254\\n1 255\\n1 256\\n1 257\\n1 258\\n1 259\\n1 260\\n1 261\\n1 262\\n1 263\\n1 264\\n1 265\\n1 266\\n1 267\\n1 268\\n1 269\\n1 270\\n1 271\\n1 272\\n1 273\\n1 274\\n1 275\\n1 276\\n1 277\\n1 278\\n1 279\\n1 280\\n1 281\\n1 282\\n1 283\\n1 284\\n1 285\\n1 286\\n1 287\\n1 288\\n1 289\\n1 290\\n1 291\\n1 292\\n1 293\\n1 294\\n1 295\\n1 296\\n1 297\\n1 298\\n1 299\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 10\\n1 10\") == \"20\"\nassert solution(\"4 5\\n1 10\\n1 10\\n1 10\") == \"30\"\nassert solution(\"4 5\\n1 10\\n1 10\\n1 10\\n1 10\") == \"40\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\") == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\nassert solution(\"5 10\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\nn, m = map(int, sys.argv[1:])\n\nA = [0] * n\nB = [0] * n\n\nfor i in range(n):\n    a, b = map(int, sys.stdin.readline().split())\n    A[i] = a\n    B[i] = b\n\nB = list(map(lambda x: x-1, B))\n\nresult = 0\nfor i in range(n):\n    for j in range(m):\n        if B[i] - j < 0:\n            break\n        result += A[i] * (B[i] - j)\n\nprint(result)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\ncans = sorted([[int(a), int(b)] for a, b in [input().split() for _ in range(N)]])\n\ncost = 0\nfor i in range(len(cans)):\n    cost += cans[i][1]\n    if cost > M:\n        print(cost - cans[i][1])\n        sys.exit()\n\nprint(cost)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\"\"\"\n\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nimport sys\n\nN, M = [int(x) for x in input().split()]\n\nA = []\nB = []\nfor i in range(N):\n    a, b = [int(x) for x in input().split()]\n    A.append(a)\n    B.append(b)\n\nA_sum = sum(A)\nB_sum = sum(B)\ntotal_sum = A_sum + B_sum\n\ni = 0\nj = N - 1\nresult = 0\ntotal_sum = 0\nwhile total_sum < M:\n    if j == i:\n        result = max(A_sum, B_sum)\n        break\n    total_sum += A[i] + B[j]\n    i += 1\n    j -= 1\n\nresult = max(result, total_sum)"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nfrom typing import List\nfrom math import ceil\n\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        n, m = map(int, stdin[0].split())\n        a: List[int] = list(map(int, stdin[1].split()))\n        b: List[int] = list(map(int, stdin[2].split()))\n        print(sum(a[i] * b[i] for i in range(n)) // m)\n\n\nsolution = Solution().solve\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 3 4\") == '2'\nassert solution(\"5\\n5 3 4 5\") == '3'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('3 2 1') == '0'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"1\\n3\\n2\") == \"1\"\nassert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nfrom typing import Iterable\n\nN = int(input())\nsequence = list(map(int, input().split()))\n\ncount = 0\nwhile True:\n    if count >= N:\n        break\n    max_height = max(sequence)\n    index = sequence.index(max_height)\n    if index == 0:\n        break\n    sequence = sequence[index - 1:] + sequence[:index - 1]\n    count += 1\n\nprint(count)"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n10 4 8 7 3') == 2\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 8 7 3\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\nThe maximum number of times you can move is the minimum of the heights of all squares you could have reached before.\nIf the height of the square you're currently standing on is H, then the maximum number of times you can move is H - 1.\n\nTime Complexity: O(N)\nSpace Complexity: O(1)\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 1 1 1 1\n''') == '5'\n\nassert solution('''5 3\n3 3 3 3 3\n''') == '0'"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 2 4 5\") == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2 4 5\\n') == 1\nassert solution('1 2 3 4 5\\n') == 2\nassert solution('1 2 2 4 5\\n') == 1\nassert solution('1 2 3 3 3\\n') == 0\n\n\"\"\"\n\nimport heapq\n\nclass Node(object):\n    def __init__(self, index, value, left, right):\n        self.index = index\n        self.value = value\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(index={self.index}, value={self.value}, left={self.left}, right={self.right})'\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n    def __le__(self, other):\n        return self.value <= other.value\n\n    def __gt__(self, other):\n        return self.value > other.value\n\n    def __ge__(self, other):\n        return self.value >= other.value\n\n    def __eq__(self, other):\n        return self.value == other.value\n\n    def __ne__(self, other):\n        return self.value!= other.value\n\n    def __hash__(self):\n        return hash(self.value)"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 3\\n2 2 4 5\") == \"0\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\", \"Wrong answer\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\", \"Wrong answer\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\", \"Wrong answer\"\n\nprint(\"All cases passed\")\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 1 1 1 1') == '0'\nassert solution('5 3\\n1 2 2 2 2') == '0'\nassert solution('5 3\\n1 1 2 2 3') == '1'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('5 4\\n1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 2 3') == '1'\nassert solution('1 2 2 3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == '1'\n\nassert solution(\"5 3\\n1 2 3 4 5\") == '2'\n\nassert solution(\"5 3\\n1 2 3 3 3\") == '0'\n\nprint(solution(\"10 2\\n8 2 9 5 6 7 0 7 0 0\"))"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5\n1 2 2 4 2 3''') == '3'"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 3 4 2''') == '1'\n\nassert solution('''4 3\n1 3 4 2''') == '2'\n\nassert solution('''5 3\n1 3 4 2 5''') == '3'\n\nassert solution('''5 3\n5 5 5 5 5''') == '0'\n\nassert solution('''10 3\n2 2 2 2 2 2 2 2 2 2 2''') == '9'"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 2 3\\n\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 2 2 4 2 3\\n\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5\\n3 3 2 1 1 1 3') == '4'\nassert solution('6 5\\n1 2 2 4 2 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 1\nassert solution(\"8 4\") == 0\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 3 4') == '4'\nassert solution('4 2\\n1 2 1 3') == '0'\nassert solution('7 5\\n1 2 2 4 2 3') == '3'\nassert solution('7 5\\n1 2 2 1 3') == '2'\nassert solution('7 5\\n1 2 3 3 3') == '2'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 2 3\") == \"3\"\nassert solution(\"1 2 2 3 2 1\") == \"4\"\nassert solution(\"1 2 2 3 2 1\") == \"4\"\n\nassert solution(\"3 3 2 1 1 1 3\") == \"4\"\nassert solution(\"3 3 2 1 1 3\") == \"3\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nfirst = 0\nlast = n - 1\n\nmoves = 0\nwhile first < last and a.count(a[first]) < k:\n    first += 1\n    moves += 1\n\nwhile first < last and a.count(a[last]) < k:\n    last -= 1\n    moves += 1\n\nprint(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a_1, a_2,..., a_n) == output\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\n'''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\"\nassert solution(\"4\\n5 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"9\"\nassert solution(\"4\\n5 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"1000\"\nassert solution(\"4\\n5 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"42000000000000\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str) == test_out\nprint(solution(stdin))\n\n-----Problem-----\n\nThis problem was asked by Google.\n\nGiven two strings A and B, find the minimum number of steps required to make A equal to B.\n\nYou can swap any two characters of A for any two characters of B, i.e. swap A[i] with B[j]. Also, you can swap any two characters of B for any two characters of A if this results in a valid string.\n\nFor example, if A = \"XXYYZZ\" and B = \"YYXXZA\" then the minimum number of steps required is 3:\n\n1. Swap A[0] with B[0] -> \"YYXXZZ\"\n2. Swap A[1] with B[2] -> \"YZXXZZ\"\n3. Swap A[2] with B[1] -> \"YXZYZZ\"\n\n\"\"\"\n\ntest_str = \"\"\"10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\n\ntest_out = \"\"\"10\n9\n1000\n42000000000000\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10\\n9\\n1000\\n42000000000000\\n'\n\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import namedtuple, deque"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(example) == answer"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n3 4 5\\n\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"100 30\") == \"7\"\nassert solution(\"100 100\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3\n3 4 5\n''') == '2'\n\n------Solution------\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\\n3 4 5\\n3 4 5\") == 2\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 6) == 2\n\n-------------------------\n\nimport math"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\nassert solution(\"1 1\\n1 1\") == 1\n\nprint(solution(\"3 6\\n3 4 5\")) # 2\nprint(solution(\"1 1\\n1 1\")) # 1"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\n-----Explanation-----\nThe last line was not announced correctly, so the rules of shiritori was not observed.\n\n---"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nhoge\\ngoogle\\ngoogle\\nenigma') == 'No'\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\nhoge\nenglish\nhoge\nenigma\n''') == 'Yes'\nassert solution('''\n5\nhoge\nenglish\nhoge\nhoge\nenglish\n''') == 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == \"Yes\"\nprint(solution(sys.stdin.read()))\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == 6\n\"\"\"\n\n\"\"\"\nTest case\n2 3\n5 10\n2 2\n10 10\n2 10\n10 10\n2 2\n10 10\n2 10\n10 10\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == 6\nassert solution(\"4 4\") == 8\nassert solution(\"10 10\") == 40\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6'\nassert solution('1 10') == '6'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4') == '2\\n2'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"6 6\") == \"2\"\n\n-------"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"4 6\") == \"4\"\n\"\"\"\n\na, b = map(int, input().split())\n\nc = (a + b) // 2\n\nprint(c + a % 2)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '6'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint(solution('sardine'))"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\nimport unittest\n\nclass TestReplace(unittest.TestCase):\n    def test_replace(self):\n        self.assertEqual(solution('sardine'), 'xxxxxxx')"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint(solution('sardine'))\n\n-You can use stdin.readline() to read a single line of input.\n-You can use stdin.readlines() to read all lines of input.\n-You can use print(stdin.read()) to print the entire input.\n-You can use stdin.readlines() to read the entire input.\n\nThe input() function in Python 2 will only accept one argument. If you want to allow multiline input, use the raw_input() function instead.\n\n-Python 3 does not have any built in functions that only take a single argument.\n-For reading a single line, use sys.stdin.readline(). For reading multiple lines, use sys.stdin.readlines()\n-For printing output, use the print(variable, end='') function.\n\n-As an exercise, read a single line of input from the user, and output the result back to the user.\n\n-Consider using the input() function in Python 2.7 only, as it allows for multiline input.\n\n-When writing your own functions, you can reuse the built in functions."
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nprint(solution(\"sardine\"))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('sardine') == 'xxxxxxx'\nassert solution('abcde') == 'xxxxxxx'\nassert solution('aaaaaa') == 'xxxxxxx'\nassert solution('abc') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 1 3') == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nYou are given a string. You have to perform the following operations:\n\n- Remove the characters of the string which have even index values and those whose ASCII values are less than or equal to 32.\n- Remove the characters of the string which have odd index values and those whose ASCII values are less than or equal to 32.\n- Print the resulting string.\n\nNote: We can't use.split() and.join() operations. We can only use split() operation to split a string on spaces.\n\nInput Format\nA string, S.\n\nOutput Format\nThe new string, obtained after performing the given operations.\n\nConstraints\n1 < |S| < 10^4\n\nSample Input 1\nR@#et\n\nSample Output 1\nrce\n\nSample Input 2\n@$#%!^&\n\nSample Output 2\n@$#%!^&\n\nSample Input 3\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == 'No'\nassert solution('5\\n1 2 3 4 5') == 'Yes'\nassert solution('7\\n4 2 2 2 5 1 5 3') == 'Yes'\nassert solution('8\\n1 5 2 4 2 3 3 5 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 1 1 3\\n') == 'Yes'\n\n-----\n1. sort\n2. reversed\n3. loop\n4. while loop\n5. if else\n\n----\n'''\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n1\\n1\\n3') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3 -10\\n\"\n    \"1 2 3\\n\"\n    \"3 2 1\"\n    ) == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n3 2 1\\n1 2 2\") == 1\n\"\"\"\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())\nb_l = list(map(int, sys.stdin.readline().split()))\na_l = []\nfor line in sys.stdin:\n    a_l.append(list(map(int, line.split())))\n\ncnt = 0\nfor i in range(len(a_l)):\n    for j in range(len(a_l[i])):\n        if a_l[i][j] * b_l[j] + c > 0:\n            cnt += 1\nprint(cnt)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n-----TEST 1-----\n\n-----Test 2-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\n----\n\"\"\"\n\nimport ast\nimport sys\nfrom typing import List\n\nfrom typing import List\n\nINPUT_PREFIX_LEN = 3\nINPUT_INFIX_LEN = 2\nINPUT_INFIX_DELIM =''\nINPUT_POSTFIX_LEN = 1\nINPUT_LINE_SEPARATOR = '\\n'\nINPUT_ARRAY_SEPARATOR =''\n\nassert INPUT_INFIX_DELIM not in INPUT_INFIX_LEN\nassert INPUT_INFIX_LEN == INPUT_INFIX_LEN.__len__()\nassert INPUT_POSTFIX_LEN == INPUT_POSTFIX_LEN.__len__()\nassert INPUT_LINE_SEPARATOR == INPUT_LINE_SEPARATOR.__len__()\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\") == 1\nprint(solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\"), 1)\nprint(solution(\"3 3 0\\n2 4 7\\n5 6 2\\n1 3 4\\n3 1 2\\n6 1 1\\n1 3 3\\n4 5 1\\n5 2 2\\n4 6 9\\n2 6 3\\n2 5 1\\n2 1 4\\n1 4 2\\n6 5 4\\n4 1 3\\n1 2 3\\n6 5 3\\n1 2 3\\n4 5 1\\n5 3 1\\n5 1 3\\n4 3 2\\n6 2 5\\n5 3 2\\n3 4 2\\n6 5 3\\n3 1 2\\n5 1 1\\n2 3 4\\n6 4 4\\n2 1 1\\n6 4 2\\n4 5 4\\n6 3 2\\n6 2 5\\n4 2 4\\n6 4 1\\n2 4 1\\n3 5 3\\n3 1 4\\n5 2 3\\n3 2 2\\n6 2 3\\n3 4 2\\n4 3 3\\n1 4 1\\n6 2 2\\n5 2 3\\n4 1 5\\n2 2 1\\n6 5 1\\n4 5 4\\n6 2 4\\n4 4 3\\n3 5 4\\n4 2 1\\n4 1 3\\n5 2 4\\n5 4 3\\n2 1 3\\n3 5 2\\n2 2 4\\n4 4 4\\n2 2 1\\n3 5 3\\n6 3 3\\n3 2 3\\n6 5 1\\n4 4 5\\n6 1 5\\n6 5 2\\n4 5 2\\n3 2 1\\n5 2 3\\n3 4 2\\n4 1 1\\n6 2 2\\n6 4 1\\n1 5 1\\n3 1 5\\n1 4 3\\n3 4 1\\n2 3 2\\n6 2 5\\n5 1 1\\n4 1 4\\n5 2 1\\n6 2 4\\n1 2 1\\n1 2 2\\n6 3 2\\n2 5 2\\n2 3 3\\n3 5 3\\n4 2 1\\n4 2 1\\n6 4 4\\n5 3 3\\n4 1 1\\n1 2 1\\n1 3 4\\n4 3 2\\n1 1 3\\n6 5 1\\n6 5 2\\n5 1 1\\n5 1 1\\n4 1 1\\n6 1 5\\n3 2 5\\n5 4 2\\n2 4 1\\n4 6 1\\n1 1 1\\n6 3 1\\n1 1 4\\n5 3 2\\n3 4 4\\n6 1 2\\n5 2 2\\n4 6 3\\n1 4 4\\n2 5 1\\n1 5 1\\n1 1 1\\n6 1 4\\n5 2 4\\n2 1 1\\n3 6 3\\n5 6 4\\n6 4 3\\n2 6 1\\n4 1 4\\n4 2 1\\n6 2 2\\n5 6 3\\n4 5 5\\n5 1 4\\n1 3 5\\n5 2 4\\n6 4 1\\n6 3 3\\n3 2 5\\n6 4 5\\n5 3 3\\n1 1 4\\n2 4 2\\n6 1 5\\n6 1 5\\n2 4 1\\n5 6 2\\n4 1 4\\n6 4 3\\n6 4 1\\n2 2 1\\n4 2 2\\n1 3 3\\n6 2 4\\n6 1 5\\n6 5 2\\n4 3 5\\n6 5 3\\n5 1 1\\n5 2 4\\n4 3 5\\n6 2 2\\n5 5 3\\n5 2 4\\n1 2 1\\n6 2 1\\n5 5 1\\n6 3 2\\n6 3 3\\n5 1 1\\n1 3 4\\n3 5 2\\n6 4 1\\n4 5 2\\n6 5 4\\n5 2 2\\n2 1 1\\n4 1 3\\n6 4 2\\n6 4 2\\n6 3 4\\n1 4 1\\n5 4 1\\n6 1 3\\n5 1 1\\n6 3 3\\n1 1 1\\n5 2 3\\n3 1 4\\n1 2 1\\n6 2 4\\n6 1 1\\n6 3 1\\n1 1 5\\n5 6 4\\n6 5 4\\n1 1 1\\n3 5 2\\n2 1 1\\n2 1 1\\n5 6 3\\n5 4 3\\n6 2 3\\n6 1 5\\n4 4 3\\n1 1 3\\n3 2 1\\n4 4 1\\n2 2 1\\n6 4 2\\n3 6 2\\n1 2 2\\n6 2 2\\n4 6 3\\n1 1 3\\n2 6 3\\n5 6 2\\n1 2 4\\n2 5 1\\n2 1 1\\n6 2 3\\n6 2 2\\n4 5 2\\n5 2 1\\n6 2 2\\n5 2 1\\n6 3 1\\n5 6 4\\n4 6 3\\n3 1 5\\n6 3 5\\n6 5 1\\n6 5 4\\n2 2 2\\n3 5 2\\n5 3 1\\n5 2 3\\n1 4 4\\n1 1 3\\n5 1 4\\n6 4 5\\n6 2 2\\n6 3 4\\n6 1 3\\n6 2 1\\n5 6 2\\n6 3 2\\n3 2 5\\n4 1 3\\n6 3 1\\n6 5 1\\n5 2 2\\n5 1 1\\n4 1 2\\n6 1 3\\n5 6 4\\n6 3 3\\n3 1 5\\n6 5 2\\n3 5 2\\n6 1 4\\n2 3 3\\n6 2 2\\n4 5 2\\n6 1 3\\n6 1 1\\n2 4 3\\n6 4 1\\n6 2 1\\n2 2 4\\n4 3 2\\n5 5 3\\n1 1 4\\n5 4 1\\n6 1 3\\n5 2 1\\n6 1 4\\n5 2 3\\n6 2 1\\n6 2 3\\n3 6 3\\n6 2 3\\n6 5 5\\n3 2 5\\n3 1 2\\n6 4 4\\n6 2 4\\n6 3 3\\n5 6 2\\n2 1 1\\n4 2 1\\n6 1 4\\n6 1 4\\n2 1 1\\n6 2 1\\n1 1 1\\n6 1 3\\n6 1 4\\n5 3 2\\n1 1 1\\n4 6 1\\n1 3 5\\n3 2 2\\n6 2"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nclass Code(object):\n    def __init__(self, line):\n        line = line.strip().split(' ')\n        self.B = tuple(map(int, line[:M]))\n        self.A = tuple(map(int, line[M:]))\n        self.solution = None\n\n    def solve(self):\n        if sum(self.A[i] * b for i, b in enumerate(self.B)) + self.C > 0:\n            self.solution = True\n        else:\n            self.solution = False\n\n    def __str__(self):\n        return \" \".join(map(str, self.A)) + \" \" + \" \".join(map(str, self.B)) + \" \" + str(self.C)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == 1\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"1900\") == \"100\"\nprint(\"PASSED\")\n\n-----Explanation-----\nWe have N = 1900.\nWe need to use two 1000-yen bills to pay the price.\nThere is no change, therefore we return 100."
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"1\"\n) == \"0\"\nassert solution(\n    \"100\"\n) == \"100\"\nassert solution(\n    \"5\"\n) == \"10\"\nassert solution(\n    \"10\"\n) == \"10\"\nassert solution(\n    \"1000\"\n) == \"1000\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1902) == 2\nassert solution(1234) == 0\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('19') == '100'\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \"0\"\nassert solution(\"19\") == \"1\"\nassert solution(\"48\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500\") == \"100\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500\") == \"3\"\n\"\"\"\n\nN = int(input())\n\nchange = 1000 - N\n\nprint(change//500 + change % 500 // 100 + change % 500 % 100 // 50 + change % 500 % 100 % 50 // 10 + change % 500 % 100 % 50 % 10 % 5 + change % 500 % 100 % 50 % 10 % 5 % 1)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000') == 0\nassert solution('2000') == 1000\nassert solution('4000') == 2000\n\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1100\") == \"2\"\nassert solution(\"1950\") == \"20\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n2 4\\n') == '9'\nprint('OK')\n\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 5 2\n4 5\n''') == '9'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2\\n4 5\") == \"9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n3 5 2') == '9'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 3\\n') == '9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == 9\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2\\\\n4 5\\\\n\") == \"9\"\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().strip().split())\n\ntmp = b * (a + 1)\nfor i in range(1, a):\n    tmp = tmp - max(0, c - b) * i\n\nprint(tmp)\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\"\"\"\n\n\"\"\"\nThe Nature of the Problem\nTo solve this problem, we must first determine whether war can break out based on given conditions.\nIf war can break out, then the conditions that determine if war will break out are as follows:\n\n- X < Z \\leq Y\n- x_1, x_2,..., x_N < Z\n- y_1, y_2,..., y_M \\geq Z\n\n- All of these conditions must be met.\n\nIf war can not break out, then there is no war, so we print 'No War'.\n\nHow can we determine whether war can break out?\nWe can create a function to determine whether war can break out and then use that to determine the solution to the problem.\n\nWe'll need to determine whether war can break out by creating a function called war_can_break_out(x, y, z).\nWe can determine whether two conditions are met by using an if statement.\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\n-----\n\nSolution:\n\nimport sys\n\nN, M, X, Y = map(int, sys.stdin.readline().split())\nx, y = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == 'No War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"4 6 20 16\\n7 18 19 17\\n18 18\\n19 19\") == \"War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\"\"\"\n\nx, y, z = map(int, input().split())\nX, Y = sorted([x, y])\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == 'No War'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\nassert solution(\": 2; 3\") == '6'\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\\n4\") == \"6\"\n\n-----Test 1-----\n\n-----Test 2-----\n\n-----Test 3-----\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n3') == '6'\nassert solution('2\\n5\\n3') == '5'\nassert solution('4\\n2\\n1\\n1') == '10'\n\n----\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\": 2 3\") == \"6\"\n\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\") == 0\nassert solution(\":1\") == 1\nassert solution(\":2\") == 2\nassert solution(\":3\") == 3\nassert solution(\":2:1\") == 4\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"4\\n1\\n2\\n3\\n4\") == \"4\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2\n2\n3\n\"\"\"\n) == \"6\"\n\nassert solution(\n\"\"\"\n1\n2\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3\n10\n1\n\"\"\"\n) == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\n545\\n546\\n547\\n548\\n549\\n550\\n551\\n552\\n553\\n554\\n555\\n556\\n557\\n558\\n559\\n560\\n561\\n562\\n563\\n564\\n565\\n566\\n567\\n568\\n569\\n570\\n571\\n572\\n573\\n574\\n575\\"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(':\\n2\\n3\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('2\\n1 2') == '0'\nassert solution('3\\n1 1 3') == '1'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0'\nprint(solution(stdin))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == 0\n\"\"\"\n\nN = int(stdin.readline())\nweights = [int(w) for w in stdin.readline().strip().split()]"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == 0\n\n-------"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3''') == '0'\nassert solution('''2\n1 2 3''') == '0'\nassert solution('''2\n1 3 3''') == '1'\nassert solution('''1\n1''') == '0'\nassert solution('''1\n2''') == '1'\n\nimport sys\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nW = list(map(int, sys.stdin.readline().split()))\nT = int(sys.stdin.readline())\n\nS1, S2 = 0, 0\n\nW.sort()\n\nfor i in range(N):\n    if i > T:\n        S1 += W[i]\n    else:\n        S2 += W[i]\n\nprint(abs(S1 - S2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"sample.in\").read()) == \"0\\n\"\nassert solution(open(\"input.txt\").read()) == \"0\\n\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('4\\n5 2 1 2') == '1'\nassert solution('7\\n9 10 2 5 2 3 4') == '1'\nassert solution('5\\n10 20 30 10 40') == '0'\nassert solution('10\\n15 40 2 10 8 10 1 5 3 7') == '1'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\nassert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '0'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\nassert solution(\"4 4\\n1 2 3 4\\n5 10 7 8\\n9 2 11 12\\n13 14 15 16\") == \"4\"\nassert solution(\"1 1\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9') == '2'\nassert solution('3 3\\n3 2 1\\n1 2 3') == '6'\nassert solution('4 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\\n6 7 8 9\\n10 11 12\") == \"2\"\n\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nmatrix = []\n\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\nmoves = []\n\nfor column in range(m):\n    column_shift = []\n\n    for row in range(n):\n        column_shift.append(matrix[row][column])\n\n    moves.append(column_shift)\n\nprint(moves)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == '5'\nassert solution(\"2\\n1 100\") == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 2\") == \"3\"\nassert solution(\"8 2 5 3 7 4\") == \"1\"\nassert solution(\"8 2 6 2 3 5 4\") == \"5\"\nassert solution(\"8 2 6 2 3 5 1 4\") == \"6\"\nassert solution(\"8 2 6 2 3 5 1 1 4\") == \"6\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('2\\n1 100') == '1'\nassert solution('3\\n1 100 2') == '1'\nassert solution('4\\n1 100 2 3') == '3'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 100\") == \"99\"\n\nassert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n5 10 2 3 14 5''') == '5'\nassert solution('''2\n1 100''') == '99'\n\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 1 0 1 0 1\\n\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == '3'\n\"\"\"\n\n\"\"\"\nA naive solution\n\nInput:\n7\n0 0 0\n\nOutput:\n0\n\nInput:\n7\n1 0 1 1 1 0 1\n\nOutput:\n2\n\nInput:\n7\n1 1 1 1 1 1 1\n\nOutput:\n3\n\nInput:\n7\n1 1 1 1 1 1 1\n\nOutput:\n4\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('3\\n0 0 0') == '0'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\nassert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\nassert solution(\"4\\n0 1 0 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5\\n1 0 1 0 1\"\n) == \"2\"\nassert solution(\n    \"6\\n0 1 0 1 1 0\"\n) == \"2\"\nassert solution(\n    \"7\\n1 0 1 1 1 0 1\"\n) == \"3\"\nassert solution(\n    \"3\\n0 0 0\"\n) == \"0\"\nassert solution(\n    \"5\\n0 1 0 1 0\"\n) == \"2\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0 0\\n\") == \"0\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"2\"\nassert solution(\"1\\n0\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"15\") == \"3\"\nassert solution(\"15\") == \"3\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"17\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '0'\nassert solution('9') == '1'\nassert solution('10') == '1'\nassert solution('11') == '2'\nassert solution('12') == '2'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 0\nassert solution(5) == 0\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n\nprint(solution(input))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '2'\nassert solution('3') == '4'\nassert solution('3\\n2\\n1') == '3\\n2\\n4'\nassert solution('6\\nemmental hard\\nfeta hard\\ngouda hard\\nswiss hard\\nparmesan hard\\n') == '6\\n2\\n4\\n6\\n3\\n1'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == '3'\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == '4'\n\"\"\"\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\") == 3\nassert solution(\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\") == 4\n\nsolution()\n\n\n'''\nimport re\nimport sys\n\nn = int(input())\ndict_cheese = {}\nfor _ in range(n):\n    cheese = input().split()\n    dict_cheese[cheese[0]] = cheese[1]\n\nlines = sys.stdin.readlines()\ncount = 0\nfor line in lines:\n    if re.search(r'[a-zA-Z][a-zA-Z]', line):\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == \"4\"\nassert solution(\"5\\njarlsberg hard\\ntimberland soft\\ngost soft\\nsprengel soft\\njarlsberg hard\\n\") == \"2\"\nassert solution(\"3\\nmozzarella soft\\nmascarpone hard\\n\") == \"1\"\nassert solution(\"2\\ncheddar soft\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n') == '3'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(cheese) == cheese_type"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\n\"\"\"\n\nfrom typing import List\nfrom math import gcd\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\nb = list(map(int, stdin.readline().strip().split()))\n\nans = []\nmodulo = 1000000000\nfor i in range(n):\n    ans.append((a[i] + b[i]) % modulo)\nprint(\" \".join(list(map(str, ans))))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import Counter"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a, b) == c\nassert solution(a, b) == c\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1 2 1 1\") == \"1 0 0 0 1\"\nassert solution(\"7\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\nassert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nprint(solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\"))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '0 1 2 3 4 5'\n\n'''\nfrom typing import List\n\n'''\nWrite a function:"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101010\") == \"0\"\nassert solution(\"101010\") == \"0\"\nassert solution(\"111000\") == \"0\"\nassert solution(\"111000\") == \"0\"\nassert solution(\"111000\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"011110\") == \"1\"\nassert solution(\"111011\") == \"0\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0011') == '1'\nassert solution('1011') == '0'\nassert solution('10011') == '0'\nassert solution('11101') == '1'\nassert solution('10111') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"010\") == \"0\"\nassert solution(\"101\") == \"1\"\nassert solution(\"110\") == \"1\"\nassert solution(\"101010\") == \"1\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"010\") == \"0\"\nassert solution(\"110\") == \"1\"\nassert solution(\"00101110\") == \"0\"\nassert solution(\"111011010\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11110') == '1'\nassert solution('11011') == '0'\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101\") == \"1\"\nassert solution(\"11010\") == \"0\"\nassert solution(\"01100\") == \"0\"\nassert solution(\"11110\") == \"1\"\nassert solution(\"01110\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('01101') == '0'\nassert solution('11010') == '0'\nassert solution('11111') == '1'\nassert solution('10110') == '0'\nassert solution('10111') == '1'\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0\n1\n1\n0''') == \"0\"\n\n-----Note-----\nThe input and output can only be strings, no variables.\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('001101') == '0'\nassert solution('11100010') == '1'\nassert solution('10011010') == '1'\nassert solution('10111010') == '1'\nassert solution('11111111') == '1'\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 15 32\") == \"No\"\n\"\"\"\nimport math\nD, T, S = list(map(int, stdin.split()))\nprint(\"Yes\") if math.ceil(D / S) <= T else print(\"No\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"10 10 2\") == \"No\"\nassert solution(\"100 200 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"1000 15 80\"\"\") == \"Yes\"\n\"\"\"\n\n-------\nO(1)\n-------\n\nimport math\n\nd, t, s = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n----\n\n'''\n\nimport sys\n\nD, T, S = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1337 5678 9012\") == \"No\"\n\"\"\"\n\nimport math\n\nd, t, s = (int(n) for n in stdin.split())\nt = t - 1\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\nassert solution(a) == b\nassert solution(a) == b\nassert solution(a) == b\nassert solution(a) == b\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"43 89 77\\n99 99 99\\n99 99 98\\n9\\n99\\n9\\n99\\n90\\n90\\n99\") == 'Yes'\nassert solution(\"86 96 43\\n35 93 85\\n54 93 93\\n12\\n86\\n90\\n99\\n15\\n15\\n84\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"90 54 63\\n62 50 33\\n78 91 26\\n92 3 85\\n87 92 37\\n65 34 85\\n45 90 36\\n91 87 46\\n50 93 54\\n76 92 59\\n97 43 32\\n98 93 53\\n39 90 81\\n39 36 96\\n95 97 84\\n83 47 62\\n99 69 21\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport math\nimport time\n\n_stdin = sys.stdin\n_stdout = sys.stdout\nsys.stdin = open(\"problem_4_stdin.txt\")\n\nstart_time = time.time()"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('1') == 'No'\nassert solution('1 1 1') == 'Yes'\nassert solution('1 1 2') == 'No'\nassert solution('1 1 3') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nprint(n * max(a))\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('41 2\\n5 6') == '30'\n\n-------"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('41 2\\n5 6') == '30'\n\"\"\"\n\nn, m = map(int, stdin.readline().split(' '))\ndays = list(map(int, stdin.readline().split(' ')))\n\nmaximum = 0\n\nfor day in days:\n    if day >= maximum:\n        maximum = day"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('41 2\\n5 6\\n') == '30'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''41 2\n5 6''') == '30'\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\nl = list(map(int, stdin.readline().strip().split()))\n\nmax_l = max(l)\ns = sum(l)"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 1') == '1'\nassert solution('2 2\\n1 1') == '-1'\nassert solution('3 2\\n1 1\\n1 2') == '1'\nassert solution('4 2\\n1 1\\n2 1\\n3 1') == '2'\nassert solution('5 2\\n1 1\\n2 1\\n3 1\\n4 1') == '-1'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nn, m = input().split(' ')\n\nassignment = list(map(int, input().split(' ')))\n\nassignment.sort(reverse=True)\n\ndays = 0\nfor i in range(int(n)):\n    days += assignment[i]\n    if days > int(m):\n        print(-1)\n        break\nelse:\n    print(days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2\\n') == '5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n2 3\") == \"2\"\nassert solution(\"0 2\\n1 1\") == \"1\"\nassert solution(\"1 2\\n0 1\") == \"2\"\nassert solution(\"0 3\\n0 1\") == \"1\"\nassert solution(\"1 3\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 5') == '5'\n\"\"\"\n\n\"\"\"\nSolution:\n\n10\n\n9\n\n9\n\n8\n\n8\n\n7\n\n7\n\n6\n\n6\n\n5\n\n5\n\n5\n\n4\n\n4\n\n4\n\n4\n\n3\n\n3\n\n3\n\n3\n\n3\n\n3\n\n3\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\nassert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 2\\n\") == \"1\"\nassert solution(\"0 0\\n\") == \"1\"\nassert solution(\"0 1\\n\") == \"2\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n2 2') == '0'\nassert solution('2 1\\n1 1') == '100'\nassert solution('2 2\\n1 1') == '0'\nassert solution('2 2\\n2 1') == '100'\nassert solution('2 2\\n2 2') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 5\\n') == '5'"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n7 6 8') == '2'\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 6 8\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n7 6 8\\n') == '2'\n\"\"\"\n\n\n\"\"\"\nn = stdin.readline()\narray = list(map(int, stdin.readline().split()))\nprint(max(sorted(array)[-2:]))\n\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 6 8\") == \"2\"\nprint(solution(\"7 6 8\"))\n\n------Solution------\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('N\\nA_1 A_2... A_N') == 'N\\nA_1 A_2... A_N'\n'''"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 6 8\") == 2\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\nprint(\"Test 1 Passed\")\nassert solution(\"4 3 2 1\") == \"4 1 3 2\"\nprint(\"Test 2 Passed\")\nassert solution(\"10 4 5 2 3 9 8 7 6 1\") == \"10 4 5 2 3 9 8 7 6 1\"\nprint(\"Test 3 Passed\")\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 2\") == \"1 2 3 4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\nfor i in arr:\n    print(i, end=\" \")\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"1\\n2\") == \"2 1\"\n\"\"\"\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1\\n') == '3 1 2'\nassert solution('3 3 1\\n') == '3 1 2'\nassert solution('3 1 3\\n') == '3 1 2'\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 1 1000\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def main(self, input_string: str) -> str:\n        a, b, x = (int(n) for n in input_string.split())\n        max_price = (10 ** 9) * a + (10 ** 9) * b\n\n        # for i in range(1, max_price + 1):\n        #     if i % a == 0 and i % b == 0:\n        #         return i\n        return f\"{max_price // (a * 10 ** 9) * a} {max_price // (b * 10 ** 9) * b}\"\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        input_string = \"10 7 100\"\n        expected = \"9\"\n        self.assertEqual(Solution.main(input_string), expected)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 7 100') == '9'"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\"\n\n\nfrom decimal import Decimal"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 8 100\") == \"8\"\nassert solution(\"100 5 100\") == \"0\"\nassert solution(\"1 1 100\") == \"0\"\nassert solution(\"100 0 100\") == \"0\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 10 10 10\") == \"0\"\nassert solution(\"1 100 2 0\") == \"0\"\nassert solution(\"1 1 1 100\") == \"100\"\nassert solution(\"100 100 2 0\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nA, B, X = list(map(int, input().split()))\n\nmax_num = 0\nfor i in range(1, 10 ** 9 + 1):\n    if A * i + B * len(str(i)) <= X:\n        max_num = i\n\nprint(max_num)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10, 7, 100) == 9\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"3 5 7\") == \"0\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\nprint(\"Test pass.\")\n\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\nh = sorted(h, reverse=True)\nprint(sum(h[i] >= k for i in range(n)))"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\nprint(sum(1 for h_i in h if h_i >= k))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200\\n') == '2'\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\n\"\"\"\n\n\nimport os\nimport sys"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n\"\"\"\nfrom __future__ import annotations\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Yes'\nassert solution('4 1\\n5 4 2 1') == 'Yes'\nassert solution('4 2\\n5 4 2 1') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4 1\\n5 4 2 1'\n) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nfrom typing import List, Tuple\nimport math"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 3 2\\n.'\n    '#\\n.'\n    '#\\n'\n) == '5'\nassert solution(\n    '3 2 4\\n.'\n    '#\\n.'\n    '#\\n'\n) == '3'\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#..##....####...###....\") == 5\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 3 2\n..#\n###\n\"\"\") == \"5\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2 3 2\"\n) == 5\nassert solution(\n\"1 1 1\"\n) == 1\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\nprint(solution(\"2 3 2\\n..#\\n###\\n\"))"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n..#\\n###') == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#..#.##.#.#.#.###.###\") == \"26\"\nassert solution(\".#.###.#####.#.###.###\") == \"6\"\nassert solution(\".#.###.#####.#.###.#####.#####.###.###.####.###.###.###\") == \"1308\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 2\\n..#\\n###') == 5\n\"\"\"\n\nh, w, k = [int(x) for x in stdin.readline().strip().split()]\nc = [stdin.readline().strip() for i in range(h)]\n\nans = 0"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#.#\") == 2\nassert solution(\"##.\") == 1\nassert solution(\".#.#\") == 2\nassert solution(\"##.\") == 1\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys\n\nfrom input_handler import input_handler\nfrom typing import Callable\nfrom pydantic import BaseModel\nfrom enum import Enum, auto\n\n\nclass InputHandler(Enum):\n    INT = auto()\n    INT_ARRAY = auto()\n    INT_SET = auto()\n\n\nInputDataType = Callable[[list], int]\n\n\nclass Solution:\n    # Minimise the time complexity by storing the value of i x j\n    # in a hash table, and only checking values that are\n    # divisible by 2019.\n\n    def __init__(self):\n        self.mod = 2019\n        self.divisor_dict = {}\n\n    def compute_divisors(self, x: int) -> int:\n        return (\n            x\n            if x == 1\n            else 1\n            + self.compute_divisors(x // 2)\n            + self.compute_divisors(x // 3)\n            + self.compute_divisors(x // 4)\n        )\n\n    def compute(self, l: int, r: int) -> int:\n        for i in range(l, r + 1):\n            for j in range(l, r + 1):\n                if (i * j) % self.mod in self.divisor_dict:\n                    return self.divisor_dict[(i * j) % self.mod]\n\n        return -1\n\n    def execute_input_handler(self, input_handler: InputHandler, inp: str) -> int:\n        inp_data = input_handler.value(inp)\n        return self.compute(inp_data[0], inp_data[1])\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2020 2040') == 2\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(2020)) == str(2)\nassert solution(str(2040)) == str(2)\n\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2020, 2040) == 2"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nprint(solution(\"2020 2040\"))\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == 'AC'\nassert solution(\"AtCoder\") == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nprint(solution(\"AtCoder\"))\n\n-----\nS = input()\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n\nfrom collections import Counter\nimport string"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"atCoder\") == \"WA\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin='1214') == '2'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nprint(solution(\"1214\"), \"2\")\nassert solution(\"1428\") == \"4\"\nprint(solution(\"1428\"), \"4\")\nassert solution(\"1333224444\") == \"3\"\nprint(solution(\"1333224444\"), \"3\")\nassert solution(\"133333333322224444444444444444\") == \"7\"\nprint(solution(\"133333333322224444444444444444\"), \"7\")\nassert solution(\"1333333333333333333333333333333333333333333333333333333333333333\") == \"8\"\nprint(solution(\"1333333333333333333333333333333333333333333333333333333333333333\"), \"8\")\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1333224444\") == \"2\"\nassert solution(\"133333333322224444444444444444\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1333224444\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1214') == '2'\nassert solution('17') == '7'\nassert solution('2223') == '4'\nassert solution('3333') == '3'\nassert solution('4444') == '4'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1214\") == \"2\"\n\nprint(solution(\"1214\"))\n\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\nassert solution('1234') == '4'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"hello\"\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0430 \u0446\u0438\u0444\u0440\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u0430 \"one\", \"two\"\n\u0412\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u0438\u0437 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0432\u044b\u0445 \u0431\u0443\u043a\u0432, \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0431\u0443\u043a\u0432.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u043e \u043d\u0430\u0434\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \"One\", \"Two\"\n\u0415\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u0434\u043b\u0438\u043d\u043e\u0435, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 N \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u0430 \"the\"\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0430 \u0446\u0438\u0444\u0440\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u0430 \"one\", \"two\"\n\u0412\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u0438\u0437 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0432\u044b\u0445 \u0431\u0443\u043a\u0432, \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0431\u0443\u043a\u0432.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u043e \u043d\u0430\u0434\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \"One\", \"Two\"\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443,\n\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: \"one two three four five six seven eight nine ten\"\n\u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 \u0431\u0443\u043a\u0432 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435: \"One Two Three Four Five Six Seven Eight Nine Ten\"\n\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u043d\u0430 \u043d\u0438\u0436\u043d\u0438\u0439: \"one two three four five six seven eight nine ten\"\n\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 N \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u0430 the: \"one two three four five six seven eight nine ten\"\n\u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0431\u0443\u043a\u0432 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430: \"One two three four five six seven eight nine ten\"\n\u0432\u044b\u0437\u043e\u0432 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: \"one two three four five six seven eight nine ten\"\n\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"one two three four five six seven eight nine ten\"\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\"One two three four five six seven eight nine ten\"\n\"\"\"\nimport re"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('2 3 1 5 4') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n5 2 3 4 1''') == 'YES'\nassert solution('''3\n3 1 2''') == 'NO'\nassert solution('''5\n3 1 2 4 5''') == 'YES'\n'''\nfrom collections import Counter"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('5 2 4 1 3') == 'YES'\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('5 2 3 4 1') == 'YES'\nassert solution('3 2 5 1 4') == 'YES'\nassert solution('1 2 3 5 4') == 'NO'\nassert solution('4 3 2 1 5') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('1000000000000000000000000000000000') == 33\nassert solution('201920181') == 4\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\n\"\"\"\n\ns = int(stdin)\ncount = 0\nwhile s % 3 == 0:\n    count += 1\n    s = s // 3\n\nprint(count)\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == '2'\nassert solution('3\\n13 37 39\\n1 2 3') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6') == '3'\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\nprint(\"Success\")"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == '2'\nassert solution('3\\n13 37 39\\n1 2 3') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6') == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == 2\nassert solution('3\\n13 37 39') == 2\nassert solution('4\\n0 0 0 0') == 0\nassert solution('3\\n1 2 -1') == 3\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\n\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\n\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\nimport functools"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"1 2 -1\\n-6 -12 6\") == \"3\"\nassert solution(\"13 37 39\\n1 2 3\\n\") == \"2\"\n\n\n\n\n\n\n\n-----\nYou are given two strings, $a$ and $b$.\n\nYou are allowed to perform at most $k$ operations on each string.\n\nIn one operation, you can choose any character of the string and replace it by any other character.\n\nYour goal is to make a difference between the strings. The difference can be measured as the number of characters that are different between the strings.\n\nYou can also measure the difference using Levenshtein distance, which is a dynamic programming algorithm that computes the minimum number of operations required to convert one word into another.\n\nWhat is the minimum possible difference between the strings, if you allow at most $k$ operations?\n-----\n\nfrom math import factorial as fact"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\nfrom typing import List"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('hellocode') == 0\n\n\"\"\"\n\nimport numpy as np\nfrom utils.testcase import TestCase\nfrom utils.decorators import stats_path\n\n\n@stats_path\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\\ndodivthree\") == \"5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\\n\"\nassert solution(\"abaca\\nb\") == \"5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n\"\nassert solution(\"codeforces\\nhellocode\") == \"0\\n\"\nassert solution(\"bambarbia\\nhellocode\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n\"\nassert solution(\"codeforces\\nhellocode\\nb\") == \"5\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n\"\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarria\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"abc???????\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '10'\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n\nassert solution(\"a?b\") == 0\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"abaca?b\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(codeforces) == 5\nassert solution(dodivthree) == 5\nassert solution(bambarbia) == 0\nassert solution(hellocode) == 0\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('abaca?b') == '5'\nassert solution('zabbbcc') == '0'\n\"\"\"\nfrom typing import List, Set, Dict\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('bambarbia') == 0\nassert solution('hellocode') == 0\n\nassert solution('codeforces') == 5\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7\n4 1 2 2 1 5 3\n\"\"\") == '3\n7 7\n2 3\n4 5\n\nassert solution(\"\"\"11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\"\"\") == '2\n3 4\n1 1\n2 2\n3 3\n\nassert solution(\"\"\"4\n1 1 1 1\n\"\"\") == '4\n4 4\n1 1\n2 2\n3 3\n\nassert solution(\"\"\"4\n-1 -1 -1 -1\n\"\"\") == '4\n1 1\n2 2\n3 3\n\nassert solution(\"\"\"1\n-1\n\"\"\") == '1\n1 1\n1 1\n1 1"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7\\n2 3\\n4 5'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4\\n1 1\\n2 2'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == '3'\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2'\nassert solution(\"7 4 1 2 2 1 5 3\") == '3'\n\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\\n\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2 3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_string) == output_string"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"2\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"8 1 5 2 3 7 2 1 2\") == \"4\"\nassert solution(\"12 1 5 2 3 7 2 1 2\") == \"4\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 11\n45 1 10 12 11 7''') == 7\nassert solution('''4 2\n2 78 4 10''') == 12\nassert solution('''5 2\n3 7 19 3 3''') == 0\nassert solution('''5 2\n3 7 19 3 3''') == 0\nassert solution('''5 2\n3 7 19 3 3''') == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2 78 4 10\") == \"12\"\nassert solution(\"3 7 19 3 3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"45 1 10 12 11 7\") == \"7\"\nassert solution(\"2 78 4 10\") == \"12\"\nassert solution(\"3 7 19 3 3\") == \"0\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\ntotal = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (a[i] + a[j]) % k == 0:\n            total += 1\n\nprint(total)"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 1') == '0'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 11\n3 7 19 3 3\n\"\"\") == '12'\n\nassert solution(\"\"\"\n4 2\n2 78 4 10\n\"\"\") == '0'\n\nassert solution(\"\"\"\n5 2\n3 7 19 3 3\n\"\"\") == '0'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"45 1 10 12 11 7\") == 7\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n\nprint(\"Well done!\")"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\nassert solution(\"5 3\\n3 7 19 3 3\") == 0\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 5') == 9\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5\") == \"9\"\nassert solution(\"6\\n2 3 4 5 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('2\\n1 5') == '9'\nassert solution('4\\n5 1 0 2') == '12'\nassert solution('3\\n5 1 0 2') == '9'\nassert solution('4\\n0 1 2 3') == '6'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n\") == 9\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n\n\n\nfrom itertools import accumulate"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 7 4 4') == '14'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nassert solution(\"3\\n-2 5\") == \"9\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n-1 -1 -1 -1\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\n-------------Problem-------------\n\nHackerLand University has the following grading policy:\n - Every student receives a grade in the inclusive range from 0 to 100.\n - Any grade less than 40 is a failing grade.\n\nTask.\n - Given a list of grades, determine the number of failing grades.\n\nInput Format.\n - The first line contains a single integer, n, the number of grades.\n - The next n lines contains a single integer, grade[i].\n\nConstraints.\n - There are at most 100 students.\n - Grade < 40\n\nOutput Format.\n - Print the number of failing grades.\n\nSample Input 0.\n - 5\n - 73\n - 67\n - 38\n - 33\n - 34\n\nSample Output 0.\n - 3\n\nSample Input 1.\n - 6\n - 33\n - 67\n - 55\n - 34\n - 20\n\nSample Output 1.\n - 4\n\n-------------Solution-------------"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10''') == '110'\n\n\"\"\"\n\nfrom typing import List, NamedTuple, Dict, Optional\nfrom collections import defaultdict\n\nclass Quadruple(NamedTuple):\n    a: int\n    b: int\n    c: int\n    d: int\n\n    def __eq__(self, other):\n        return all(map(lambda x, y: x == y, self, other))\n\nclass Scores:\n    def __init__(self, scores):\n        self.scores = scores\n\n    def get_score(self, a: int, b: int, c: int) -> int:\n        score = 0\n        for d in self.scores[b]:\n            if self.scores[a][0] - d == c:\n                score += d\n        return score\n\nclass Scores:\n    def __init__(self, scores):\n        self.scores = scores\n        self.scores_map = defaultdict(list)\n        for a, b, c, d in self.scores:\n            self.scores_map[a].append(d)\n            self.scores_map[b].append(d)\n\n    def get_score(self, a: int, b: int, c: int) -> int:\n        return sum([d for d in self.scores_map[b] if self.scores_map[a][0] - d == c])"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\n------Solution------"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 2\\n1 2 3 4\\n1 3 2 4\\n2 4 3 4\") == \"110\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('2 3') == '0'\nassert solution('3 3') == '0'\nassert solution
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(    '4\\n1 4 6 3\\n') == '5'\nassert solution(    '4\\n5 2 8 6\\n') == '9'\nassert solution(    '4\\n5 2 8 1\\n') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n1 4 6 3''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 6 3\") == 5\nprint(\"Passed\")\n\n--------------------------------------------"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 4 6 3\n''') == '5'\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\nprint(\"assertions passed\")\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''3\n0 0\n1 0\n0 1'''\n) == '2.276142'\n\nassert solution(\n'''5\n0 0\n1 0\n0 1\n1 1\n0 0'''\n) == '1.41421356237'\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math\nimport typing"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == '4'\nassert solution(\"6 6\") == '0'\nassert solution(\"1 100\") == '100'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 4') == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 4') == '4'\nassert solution('1 1') == '0'\nassert solution('2 1') == '1'\nassert solution('2 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == '4'\nassert solution('2 4') == '0'\nassert solution('10 20') == '10'\n\"\"\"\nimport sys"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''12 4''') == '4'\nassert solution('''4 3''') == '0'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 4\\n') == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 4') == '4'\nassert solution('10 1') == '9'\nassert solution('5 6') == '0'\nassert solution('1 0') == '0'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12, 4) == 4\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 4') == '4'\nassert solution('12 5') == '4'\nassert solution('18 20') == '0'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '3'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1110') == '1111'\nassert solution('1234') == '1234'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '3'\n\"\"\"\n\nN = int(input())\nA = 1\nwhile N // A!= 0:\n    A *= 10\n    A //= 2\n\nB = 1\nwhile N // B!= 0:\n    B *= 10\n\nprint(max([len(str(A)), len(str(B))]))\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"10\") == '1'\nassert solution(\"100\") == '1'\nassert solution(\"1000\") == '1'\nassert solution(\"10000\") == '1'\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 2\nassert solution('100') == 1\nassert solution('1000') == 2\nassert solution('10000') == 3\nassert solution('100000') == 3\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10000') == '3'\nassert solution('9999') == '6'\nassert solution('1') == '1'\nassert solution('9') == '2'\n\nfrom itertools import combinations\n\nn = int(stdin.readline())\n\nans = min(sum(map(lambda x: len(str(x[0])),combinations(range(1,n+1),2)))\nfor x,y in combinations(range(1,n+1),2)\n)\nprint(ans)\n\nn = int(stdin.readline())\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"32\") == \"2\"\nassert solution(\"999\") == \"9\"\nassert solution(\"9876543210\") == \"10\"\n\"\"\"\nfrom math import log10"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100') == 3\nassert solution('10000') == 3\nassert solution('3') == 3\nassert solution('11') == 2\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('7 8\\n4 1 2 3 4 5 6') == 0\n'''"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == 1\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n2 1 3\\n3 1 2 3') == '1'\nassert solution('2 2\\n1 2\\n2 1') == '2'\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(1)\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_str) == expected_result\n\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def num_likes(self, n: int, m: int, array_of_like_counts: List[List[int]]) -> int:\n        result = 0\n        for i in range(m):\n            result += len([x for x in array_of_like_counts[i] if x > 0])\n        return result\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == '1'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nlist_food = []\n\nfor i in range(n):\n    list_food.append(list(map(int, stdin.readline().split())))\n\nlist_food = sum(list_food, [])\n\nset_food = set(list_food)\n\nprint(len(set_food))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 2 3 4 5\\n2 1 2\\n2 3 2\\n2 4 2\\n2 5 2\\n1 1 1\\n2 2 2\\n3 3 3\\n2 1 1\\n1 1 1') == '3'\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('100\\n') == '0.5'\nassert solution('1\\n') == '1.0'\nassert solution('5\\n') == '0.8'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '0.5'\nprint(solution('4'))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '0.5'\nassert solution('8') == '0.6410256410256411'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 0.5\n\"\"\"\nfrom math import e\nfrom fractions import Fraction"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0.5'\nassert solution('3\\n') == '0.25'\nassert solution('4\\n') == '0.125'\nassert solution('10\\n') == '0.0625'\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n\") == '0.5'\n\"\"\"\n\nn = int(stdin.readline())\n\ncounter = 0\nfor i in range(1, n+1):\n    if i % 2!= 0:\n        counter += 1\n\nresult = counter/n\nprint(result)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('5\\n') == '0.25'\nassert solution('6\\n') == '0.375'\nassert solution('7\\n') == '0.4375'\nassert solution('8\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2 3\\n2\\n1 1\\n1\") == '2'\nassert solution(\"2\\n1\\n2 1\") == '0'\nassert solution(\"4\\n1\\n2 1\\n1\\n1 1\\n1\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nprint('Test pass.')\n\n------------------\nSample input:\n6\n3\n3 1\n3 0\n2 1\n2 0\n2 0\n:\n1\n1 1\n\nSample output:\n3\n\n-------------------\nSample input:\n8\n5\n3 1\n1\n1 0\n1\n1 0\n2\n1\n1 1\n\nSample output:\n4\n\n-------------------\nSample input:\n5\n1\n4 0\n2 1\n3 1\n1 0\n2 0\n2 0\n\nSample output:\n5\n\n-------------------\nSample input:\n6\n1\n2 0\n2 0\n3 1\n1 0\n1 1\n\nSample output:\n4\n\n-------------------\nSample input:\n6\n5\n3 0\n3 1\n1 0\n1 1\n3 0\n\nSample output:\n3\n\n-------------------\nSample input:\n7\n1\n3 1\n3 0\n1 1\n1 1\n1 0\n1 0\n2 0\n\nSample output:\n3\n\n-------------------\nSample input:\n7\n1\n3 1\n3 1\n3 0\n1 1\n1 0\n1 0\n2 0\n\nSample output:\n3\n\n-------------------\nSample input:\n8\n1\n3 1\n3 0\n1 1\n1 0\n1 0\n2\n1\n1 1\n\nSample output:\n4\n\n-------------------\nSample input:\n9\n1\n1 1\n3 1\n2 1\n1 0\n1 0\n2\n1 1\n2 1\n2 0\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n2 1\n3 1\n3 0\n2 1\n2 0\n1 0\n1 1\n2 1\n1 0\n2 0\n\nSample output:\n5\n\n-------------------\nSample input:\n9\n1\n2 1\n3 1\n2 1\n1 1\n3 0\n2 1\n1 0\n2 0\n\nSample output:\n5\n\n-------------------\nSample input:\n9\n1\n3 1\n3 0\n2 1\n2 1\n2 0\n1 0\n1 0\n2 0\n\nSample output:\n4\n\n-------------------\nSample input:\n11\n1\n3 1\n3 1\n3 0\n2 1\n2 1\n2 1\n2 1\n1 1\n1 0\n1 1\n2 1\n\nSample output:\n5\n\n-------------------\nSample input:\n15\n2\n5 1\n3 1\n1 1\n1 0\n1 0\n2 0\n1 1\n1 1\n2 0\n1 0\n2 0\n1 0\n1 0\n2 0\n1 0\n2 1\n3 1\n\nSample output:\n6\n\n-------------------\nSample input:\n16\n1\n2 1\n1 1\n1 1\n1 0\n1 0\n2 1\n2 1\n2 0\n1 1\n1 0\n2 0\n1 0\n1 1\n1 1\n2 0\n1 1\n2 1\n2 1\n2 0\n\nSample output:\n7\n\n-------------------\nSample input:\n16\n3\n1 0\n1 0\n1 1\n1 1\n1 0\n1 0\n1 1\n1 0\n2 0\n1 0\n2 0\n1 0\n1 1\n2 1\n1 1\n1 0\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n16\n1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n16\n1\n3 1\n1 1\n1 1\n2 1\n3 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 0\n1 0\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\nSample output:\n7\n\n-------------------\nSample input:\n16\n1\n3 1\n1 0\n2 0\n3 1\n1 1\n1 0\n1 1\n1 1\n2 0\n1 0\n1 1\n1 0\n2 1\n1 1\n1 0\n1 1\n1 1\n1 1\n1 1\n\nSample output:\n7\n\n-------------------\nSample input:\n10\n1\n3 1\n1 1\n2 1\n3 1\n3 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n1 1\n1 0\n1 1\n1 1\n2 1\n3 1\n1 1\n1 1\n1 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n2 1\n2 1\n1 1\n1 0\n1 1\n1 1\n1 1\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n3 1\n3 1\n3 1\n3 1\n1 1\n1 1\n1 1\n1 1\n3 1\n2 1\n2 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n1 1\n3 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 0\n2 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n2 1\n3 1\n3 1\n1 1\n1 1\n1 1\n3 1\n3 1\n3 1\n3 1\n\nSample output:\n4\n\n-------------------\nSample input:\n10\n1\n2 0\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n2 0\n3 1\n1 1\n2 1\n1 1\n3 1\n1 1\n3 1\n3 1\n1 1\n1 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n1 1\n2 1\n1 1\n2 1\n1 1\n2 1\n2 1\n2 1\n2 1\n1 1\n1 1\n\nSample output:\n5\n\n-------------------\nSample input:\n10\n1\n2 1\n1 1\n3 1\n1"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\n\"\"\"\n\nfrom collections import namedtuple\nimport re\n\n\nTestCase = namedtuple('TestCase', ['n', 'as_list', 'xys_list'])\n\nTESTS = [\n    TestCase(n=2, as_list=[1, 1], xys_list=[[1, 1], [1, 1]]),\n    TestCase(n=3, as_list=[1, 2], xys_list=[[1, 1, 0], [1, 2, 1]]),\n    TestCase(n=3, as_list=[1, 3], xys_list=[[1, 1, 0], [2, 1, 1]]),\n    TestCase(n=3, as_list=[2, 1], xys_list=[[1, 1, 1], [2, 1, 1]]),\n]\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\nstdin = \"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\"\n\nn = int(stdin.split()[0])\n\nnumbers = set()\n\nfor _ in range(n):\n    numbers.add(int(stdin.split()[1]))"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n1\\n1\\n0\\n1\") == 2\nassert solution(\"3\\n2\\n1\\n1\\n0\\n1\") == 2\nassert solution(\"3\\n2\\n1\\n2\\n0\\n1\") == 2\nassert solution(\"3\\n2\\n1\\n2\\n1\\n0\\n1\") == 1\nassert solution(\"3\\n2\\n1\\n2\\n1\\n1\\n0\\n1\") == 1\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == '2'\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\": 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"edifice\") == \"edifice\"\nassert solution(\"thequickbrownfoxjumpsoverthelazydog\") == \"thequickbrownfoxjumpsoverthelazydog\"\n\nimport re\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\n-------\ncode = \"\"\nwith open(\"code_input.txt\", \"r\") as ins:\n    code = ins.read()\nassert solution(code) == \"nikoand...\\n\"\n\n-------\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"solstice\") == \"solcest\"\nassert solution(\"an\") == \"an\"\nassert solution(\"e\") == \"e\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\nimport stdin"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd123456\") == \"abcd123456\"\nassert solution(\"123456\") == \"123456\"\nassert solution(\"abcdefghijklmnop\") == \"abcdefghijklmnop\"\nassert solution(\"abcdefghijk\") == \"abcdefghijk\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice has a length of 15, which exceeds K=7. We should extract the first 7 characters in this string, append... to the end of them, and print the result nikoand...\") == \"nikoand...\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(Taknese) == TaknesePlural\nprint(solution(Taknese))\n\n----Problem-----\nIn the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n - If a noun's singular form does not end with s, append s to the end of the singular form.\n - If a noun's singular form ends with s, append es to the end of the singular form.\nYou are given the singular form S of a Taknese noun. Output its plural form.\n\n\"\"\"\n\n\"\"\"\n1. S ends with s, append es to the end.\n2. S ends with e, append s to the end.\n3. S ends with anything else, append s to the end.\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('dog') == 'dogs'\nassert solution('onion') == 'onions'\nassert solution('laptop') == 'laptops'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('taknese') == 'takneses'\n\n---Problem 027---\nGiven the names and grades for each student in a class of  students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade.\n\nNote: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.\n\nExample\n\nThe ordered list of scores is, so the second lowest score is. There are two students with that score:. Ordered alphabetically, the names are printed as:\n\nalpha\nbeta\nInput Format\n\nThe first line contains an integer,, the number of students.\nThe  subsequent lines describe each student over  lines.\n- The first line contains a student's name.\n- The second line contains their grade.\n\nConstraints\n\nThere will always be one or more students having the second lowest grade.\nOutput Format\n\nPrint the name(s) of any student(s) having the second lowest grade in. If there are multiple students, order their names alphabetically and print each one on a new line.\n\nSample Input 0\n\n5\nHarry\n37.21\nBerry\n37.21\nTina\n37.2\nAkriti\n41\nHarsh\n39\nSample Output 0\n\nBerry\nHarry\nExplanation 0\n\nThere are  students in this class whose names and grades are assembled to build the following list:\n\npython students = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41], ['Harsh', 39]]\n\nThe lowest grade of  belongs to Tina. The second lowest grade of  belongs to both Harry and Berry, so we order their names alphabetically and print each name on a new line.\n\"\"\"\n\nimport sys\nimport math\nimport array as arr"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        return stdin + \"s\" if stdin[-1]!='s' else stdin + \"es\"\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        self.assertEqual(self.solution(\"apple\"), \"apples\")"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('apple') == 'apples'\n\nprint(solution('apple'))\n\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'\nassert solution('grape') == 'grapes'\nassert solution('melon') =='melons'\nassert solution('tomato') == 'tomatoes'\nassert solution('zucchini') == 'zucchinis'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apple') == 'apples'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n-----Constraints-----\n - stdin - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\n\u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\n\n-----Output-----\n3\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n-----Constraints-----\n - stdin - \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\n1\n\n-----Output-----\n\"1\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\n\n-----Constraints-----\n - stdin - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\nThe quick brown fox jumps over the lazy dog.\n\n-----Output-----\nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u0432\u0441\u0435 \u043b\u0438 \u043d\u0430\u0431\u043e\u0440 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b\n\n-----Constraints-----\n - stdin - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438\n - stdin - \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n-----Input-----\nThe quick brown fox jumps over the lazy dog.\n\n-----Output-----\nTrue\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\n\"\"\"\n\nn, k = map(int, input().strip().split())\nsnuke_snack = {}\nfor i in range(1, k + 1):\n    snuke_snack[i] = set(map(int, input().strip().split()))\n\nsnuke_snack_unique = {}\nfor k, v in snuke_snack.items():\n    for snack in v:\n        if snack not in snuke_snack_unique:\n            snuke_snack_unique[snack] = set()\n        snuke_snack_unique[snack].add(k)\n\nans = 0\nfor snuke_num in range(1, n + 1):\n    if snuke_num not in snuke_snack_unique:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\n------Solution------\n\nThe solution is based on the following observations:\n1. Every Snuke has at least one Snack, and for each Snuke the Snacks are sorted.\n2. Takahashi starts by picking up all the Snacks of Snuke 1, and then after that he picks up Snack 2, Snack 3 and so on.\n3. This way, Takahashi will pick up all Snacks of Snuke N.\n4. Therefore, Takahashi has Snuke N Snacks and Snuke 1 Snacks, and all Snacks in between are discarded.\n5. Thus, the total number of Snacks picked up by Takahashi is N * (K + 1) / 2.\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n2\n1 3\n1\n3\n''') == '1'\nassert solution('''\n5 4\n1\n1 2\n1 3\n1 4\n2\n1 2\n1 3\n2 3\n2 4\n3 4\n''') == '5'\n\"\"\"\n\nN, K = map(int, stdin.readline().strip().split(' '))\nSnakes = [0] * N\nfor i in range(K):\n    snake = list(map(int, stdin.readline().strip().split(' ')))\n    Snakes[snake[0] - 1] += 1\nvictim = 0\nfor i in range(N):\n    if Snakes[i] == 0:\n        victim += 1\nprint(victim)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n\nlines = iter(sys.stdin.readlines())\nN, K = map(int, next(lines).split())\nsnakes = [list(map(int, line.split())) for line in lines]\n\nsnake_set = set()\n\nfor i in range(K):\n    snake_set.update(snakes[i])\n\nfor _ in range(N):\n    if snakes[_][0] in snake_set:\n        snake_set.remove(snakes[_][0])\n\nprint(len(snake_set))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\n-------------"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('N Snukes called Snuke 1, Snuke 2,..., Snuke N live in a town.\\nThere are K kinds of snacks sold in this town, called Snack 1, Snack 2,..., Snack K. The following d_i Snukes have Snack i: Snuke A_{i, 1}, A_{i, 2}, \\cdots, A_{i, {d_i}}.\\nTakahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi\\'s mischief?') == '1'\n'''\n\n\n'''\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\nsnakes = []\nfor i in range(1, n + 1):\n    snakes.append(int(sys.stdin.readline()))\n\nsnakes = sorted(snakes)\nprint(snakes[n - 1])\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\nhttps://www.codewars.com/kata/59835dbcbc92f05eb0000c1/train/python\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"aabbbbaaca\"]) == \"5\"\n\"\"\"\n\n\"\"\"\nGiven the number of slimes S and the string S of their colors, determine the number of slimes that will finally remain after the processes described above.\n\n-----Input-----\nThe first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe second line contains a string S consisting of N lowercase English letters.\n\n-----Output-----\nPrint a single line containing one integer - the final number of slimes.\n\n-----Sample Input-----\n2\n1\na\n2\naba\n\n-----Sample Output-----\n1\n4\n\"\"\"\n\n\"\"\"\nTest Case #0\nS = \"a\"\nOutput:\n1\n\nTest Case #1\nS = \"ab\"\nOutput:\n2\n\nTest Case #2\nS = \"aba\"\nOutput:\n2\n\nTest Case #3\nS = \"abbbabbaa\"\nOutput:\n2\n\"\"\"\n\n\"\"\"\nSolution #1\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"aba\"\nassert solution(\"aabbbbb\") == \"b\"\nassert solution(\"aabbbbccc\") == \"b\"\nassert solution(\"aabaa\") == \"ab\"\nassert solution(\"aab\") == \"a\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaabbbbaa') == 'ababa'\nassert solution('aabbbbaa') == 'ababa'\nassert solution('aabbbbbaa') == 'ababa'\nassert solution('aabbbbaaa') == 'ababa'\nassert solution('aabbbbaaaa') == 'ababa'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbbbaaca') == '5'\n\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n\n\"\"\"\nsolution:\nSince the input is valid, we can initialize an array of length N of zeros. \nFor every adjacent pair of indices, we check if the two values are the same. \nIf they are, we change the value at the first index to be the sum of the two. \nWe iterate through the array, incrementing the index by 1. \nAfter all iterations, the largest value in the array will be the answer. \nWe can do this because if the two values are not the same, we can never fuse them together. \n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbbbbbb\") == \"a\"\nassert solution(\"aabbbbbaaca\") == \"a\"\nassert solution(\"abbbbbaaacaaaa\") == \"a\"\nassert solution(\"abbbbbaaaacaaaa\") == \"aa\"\nassert solution(\"abbbbbaaaaaacaaaa\") == \"aaaa\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\naabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"3\\n2 4 6\") == \"2\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n5 2 4\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n4\n9 4 6 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n7\n1 2 3 4 5 6 7\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n7\n1 2 3 4 5 6 7\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n):\n    while True:\n        if (a[i] % 2 == 0 and a[i] % 3!= 0) or (a[i] % 2!= 0 and a[i] % 3 == 0):\n            break\n        else:\n            a[i] = a[i] // 2 if a[i] % 2 == 0 else a[i] * 3\n            count += 1\n            if a[i] < 2:\n                break\n\nprint(count)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 1\") == '3'\nassert solution(\"4\\n1 1 1 1\") == '2'\nassert solution(\"5\\n1 1 1 1 1\") == '1'\nassert solution(\"6\\n1 1 1 1 1 1\") == '0'\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nA = list(map(int, sys.stdin.readline().strip().split()))\n\nA.sort()\n\nans = 0\n\nfor i in range(N):\n    if A[i] % 2!= 0:\n        ans += 1\n        A[i] //= 2\n        \n    A[i] *= 3\n\nfor i in range(N):\n    if A[i] % 2!= 0:\n        ans += 1\n        A[i] //= 2\n        \n    A[i] *= 3\n\nprint(ans)"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 4\\n') == 3\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '9'\nassert solution('1 2 3 5') == '15'\nassert solution('1 2 -1 3') == '4'\nassert solution('0 -1 -1 -1 1') == '0'\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n\n\nimport sys\nimport os\nimport time\nimport bisect\nimport math"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == 2\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n\nfrom src.main.python.functions import is_prime"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nprint(\"All Tests Passed.\")\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 1 1 1 1\") == \"2\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"1 0 0 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 1 1 3'\n) == '2'\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"6 10\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 8\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n5 5\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n6 6\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n6 9\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n1 2\n\"\"\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"4 8\") == \"No\"\nassert solution(\"4 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"2 6\") == \"No\"\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\nassert solution(\"2 5\\n\") == \"No\"\nassert solution(\"1 100\\n\") == \"Yes\"\nassert solution(\"5 4\\n\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10') == 'Yes'\nassert solution('10 10') == 'Yes'\nassert solution('5 5') == 'No'\nassert solution('10 5') == 'No'\nassert solution('10 5') == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8') == 'Yes'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 3') == '2'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4') == '1'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4') == '0'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4\\n1 4\\n3 4') == '2'\n\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n4 4\\n1 3\\n2 4') == '0'\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n4 3') == '2'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\\n4 1\") == \"2\"\nassert solution(\"7 4\\n1 2\\n1 3\\n2 4\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"3\"\n\n------\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == 2\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n4 5\\n\") == \"2\"\nassert solution(\"5 3\\n1 2\\n1 3\\n2 3\\n4 5\\n\") == \"0\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nprint(solution(\"3 3\\n1 2\\n1 3\\n2 3\"))"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 3') == '2'\nassert solution('2 3\\n2 3') == '1'\n\"\"\"\n\nn, m = map(int, input().split())\ngraph = []\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    graph.append((a, b))\n    graph.append((b, a))\n\ngraph = list(set(graph))\n\nadj = [0] * (n + 1)\nfor x, y in graph:\n    adj[x] += 1\n    adj[y] += 1\n\nadj_sum = 0\nfor i in range(1, n + 1):\n    adj_sum += adj[i]\n\nprint(adj_sum - 1)\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n4 3\") == \"2\"\nassert solution(\"6 7\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n3 5\\n4 5\\n6 7\\n5 6\") == \"4\"\n\n\"\"\"\n\nn,m = input().split(\" \")\nn,m = int(n),int(m)\n\nd = {str(i):[] for i in range(1,n+1)}\n\nfor _ in range(m):\n    x,y = input().split(\" \")\n    x,y = int(x),int(y)\n    d[str(x)].append(y)\n    d[str(y)].append(x)"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 3 4 5 6') == '18'\n\"\"\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\n\"\"\"\nA.k.a. Apple Farm\n\nhttps://www.codewars.com/kata/523f5d21c841566fde000009\n\nAlex just got a new hula hoop, he loves it but feels discouraged because his little brother is better than him\n\nWrite a program where Alex can input (n) how many times the hoop goes round and it will return him an encouraging message :)\n\nIf Alex gets 10 or more hoops, return the string \"Great, now move on to tricks\".\nIf he doesn't get 10 hoops, return the string \"Keep at it until you get it\".\n\nExamples:\n\nhoop_count(1)? \"Keep at it until you get it\"\nhoop_count(2)? \"Great, now move on to tricks\"\nhoop_count(10)? \"Great, now move on to tricks\"\n\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Dict, List\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.read()"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1\\n1\\n2\\n3\\n5') == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n') == '18'\nprint('Success')\n\n----------------------"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"1\"\nassert solution(5) == \"1\"\nassert solution(15) == \"1\"\nassert solution(25) == \"1\"\nassert solution(30) == \"1\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5''') == 5\nassert solution('''10''') == 55\nassert solution('''15''') == 60\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n\n\"\"\"\nLet us define the FizzBuzz sequence a_1,a_2,... as follows:\n - If both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\n - If the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\n - If none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\n - If none of the above holds, a_i=i.\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\n-----Sample Input-----\n15\n\n-----Sample Output-----\n60\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(15) == 60\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n\nimport sys\nfrom fractions import gcd\n\nfor line in sys.stdin:\n    n = int(line)\n    def FizzBuzz(n):\n        def FizzBuzz(n):\n            if not n:\n                return []\n            elif n == 1:\n                return [1]\n            if 3 * n + 1 > n * n:\n                return [i for i in range(1, n + 1)]\n            return FizzBuzz(3 * n + 1) + FizzBuzz(n - (3 * n + 1) / 2 - (n - 3 * n + 1) / 2)\n    result = [n for n in FizzBuzz(n) if n % 3!= 0 and n % 5!= 0]\n    print(sum(result))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15') == '60'\nassert solution('2') == '2'\nassert solution('5') == '15'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\na, n = [int(i) for i in input().strip().split(' ')]\narr = list(map(int, input().strip().split(' ')))\narr.sort()"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 7 10 6 5''') == '8'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 10 6 5') == '8'\nassert solution('3 4 7 10 6 5') == '7'\nassert solution('3 4 10 6 5') == '7'\nassert solution('3 10 6 5') == '7'\nassert solution('10 6 5') == '7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\nassert solution('1 10\\n2 3 4 5 6 7 8 9 10') == '9'\nassert solution('6 8\\n4 7 10 6 5') == '8'\nassert solution('3 4\\n1 2') == '1'\nassert solution('5 4\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 10 6 5\\n') == 8\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2 1''') == '1'\nassert solution('''3 2\n2 1\n2 1\n''') == '0'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1\\n') == ''\nassert solution('2\\n2\\n') == '1'\nassert solution('3\\n3\\n') == '6'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n1 1\") == \"1\"\n\nassert solution(\"1 1\\n3 3\") == \"0\"\n\nassert solution(\"3 3\\n1 1\") == \"1\"\n\nassert solution(\"3 3\\n3 3\") == \"6\"\n\nassert solution(\"4 4\\n1 2\") == \"0\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2 1') == '1'\nprint('Test Successful')\n\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\", \"3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nseq = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"7 4\"\n) == \"6\"\nassert solution(\n    \"7 2\"\n) == \"-1\"\nassert solution(\n    \"7 1\"\n) == \"1\"\nassert solution(\n    \"6 2\"\n) == \"2\"\nassert solution(\n    \"7 0\"\n) == \"1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '7 4\\n3 7 5 1 10 3 20'\n) == '6'\nassert solution(\n    '7 2\\n3 7 5 1 10 3 20'\n) == '-1'\n\"\"\"\nimport sys\n\n\"\"\"\n\u0427\u0435\u0440\u0435\u0437 \u0432\u0441\u0442\u0430\u0432\u043a\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e x.\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\nassert solution(\"7 2\\n1 2 3 3 4 1 4 1\") == \"2\"\nassert solution(\"7 2\\n1 2 3 3 4 1 4 1\") == \"2\"\nassert solution(\"7 3\\n1 2 3 4 5 5 6 6\") == \"1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n\nimport sys\n\nnumber_of_elements, number_to_find = sys.stdin.readline().split()\nsequence = sys.stdin.readline().split()\nprint(str(sorted(sequence)[int(number_to_find)-1]))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(input()))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution_2(str(input())))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\"\"\") == '3\\n2 2 1\\n3 3 1\\n3 4 1\\n'\n\nassert solution(\"\"\"\n3 3\n.*.\n.*.\n*.*\n\"\"\") == '-1\\n'\n\nassert solution(\"\"\"\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\"\"\") == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\n\nassert solution(\"\"\"\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\"\"\") == '-1\\n'\n\nassert solution(\"\"\"\n3 3\n.*.\n.*.\n*.*\n\"\"\") == '-1\\n'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1 1\\n\") == \"0\"\nassert solution(\"2 3\\n..*..\\n...**\\n*....\\n....*\\n\") == \"3\"\nassert solution(\"3 4\\n.*..\\n..*.*\\n.*.**\\n\") == \"-1\"\nassert solution(\"5 6\\n.*..*\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n\") == \"7\"\nassert solution(\"5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\n\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"2 2 1\"\n\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.*...\\n.*...\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"3 2\\n.*..\\n.*..\") == \"3\\n3 2 1\\n3 2 1\"\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n.*...\\n.*...\\n.*...\") == '3\\n2 2 1\\n3 3 1\\n3 4 1'\nassert solution(\"5 5\\n*.*\\n.*.\\n*.*\") == '-1'\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == '-1'\nassert solution(\"3 3\\n*.*\\n.*\\n*.*\") == '-1'\nassert solution(\"3 3\\n.*\\n.*\\n*.*\") == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"2\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"2\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n2 2 1\\n3 3 1'\nassert solution('3 3\\n.*\\n.*\\n.*') == '-1'\nassert solution('6 8\\n.*...\\n...**\\n..****\\n...**.\\n.****.\\n*......\\n........') == '3\\n3 4 1\\n3 5 2'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"2 2 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n.**..\\n.*.*\\n.*.*\\n.*.*\\n.....\") == \"3\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n....\") == \"0\"\nassert solution(\"3 3\\n***\\n.*\\n***\") == \"1\"\nassert solution(\"3 3\\n***\\n.*\\n.*\\n.*\") == \"-1\"\nassert solution(\"3 3\\n***\\n.*\\n.*\\n.*\") == \"-1\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('good') == 0\nassert solution('abc') == 1\nassert solution('xyyx') == 2\nassert solution('bad') == 1\nassert solution('aabc') == 2\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('good') == 0\nassert solution('bad') == 2\nassert solution('string') == 3\nassert solution('xyyx') == 1\nassert solution('aaaa') == 4\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('good') == 0\nassert solution('bad') == 1\nassert solution('xyyx') == 2\nassert solution('aabc') == 2\nassert solution('aaa') == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('good') == '0'\nassert solution('aa') == '2'\nassert solution('aabc') == '2'\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xyyxxyy\") == \"xyxy\"\nassert solution(\"good\") == \"xx\"\nassert solution(\"aabc\") == \"ab\"\nassert solution(\"aaa\") == \"a\"\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"yyxyxyx\") == 3\nassert solution(\"yyxyxyxy\") == 4\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('good') == 0\nassert solution('string') == 0\nassert solution('xyxy') == 2\nassert solution('aaa') == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('good') == 0\nassert solution('string') == 0\nassert solution('xyyx') == 2\nassert solution('aaa') == 3\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s='abc') == 'ab'\nassert solution(s='aaaaa') == 'aa'\nassert solution(s='xxyyy') == ''\nassert solution(s='zzzzz') == 'z'\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaa\") == \"3a\"\nassert solution(\"ababa\") == \"2b\"\nassert solution(\"aaaaaaaa\") == \"5a\"\nassert solution(\"aaaaaaaaa\") == \"6a\"\n\nassert solution(\"aaaa\") == \"5a\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n2 3\\n3 1\\n2 1\\n2 3\\n2 1\\n') == '10100'\n\nassert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n') == 'YES\\n10100'\n\nassert solution('6 5\\n2 3\\n3 1\\n2 1\\n2 3\\n2 1\\n') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\\n2 3\\n\") == \"YES\\n010\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('a') == 'NO'\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 1\") == \"YES\\n10110\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n1 2\\n3 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 2\\n2 1\\n1 3\\n3 1\\n4 2\\n1 5\\n5 1\") == \"NO\"\nassert solution(\"2 4\\n1 2\\n2 1\\n1 3\\n3 1\\n4 2\\n1 5\\n5 1\") == \"YES\\n10100\"\nassert solution(\"2 3\\n1 2\\n2 1\\n1 3\\n3 1\") == \"NO\"\nassert solution(\"2 3\\n1 2\\n2 1\\n1 3\\n3 1\") == \"YES\\n101\"\nassert solution(\"2 3\\n1 2\\n2 1\\n1 3\\n3 1\") == \"YES\\n11\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == solution_output\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 3\\n3 4') == '1010'\nassert solution('8 10\\n4 5\\n5 6\\n4 8\\n8 9\\n9 10\\n5 4\\n6 7\\n7 8\\n10 4') == '101011010'\nassert solution('5 5\\n2 3\\n4 1\\n1 2\\n5 2') == '101'\nassert solution('1 1\\n1 1') == 'NO'\nassert solution('2 2\\n1 2\\n2 1') == 'NO'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\nassert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\n\n\n\n-----Hints-----\n\nThink about the tree representation of graphs and the binary strings.\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 3\\n1 2\\n1 3\\n2 3\\n1 2\\n2 1\\n3 2\\n2 3\\n3 1\\n1 2\\n2 1\\n3 2\\n3 1\\n\") == \"10100\"\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 5\") == \"YES\\n010\"\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\nassert solution('1 7\\n1 7\\n') == '0'\nassert solution('1 7\\n1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n\n'''"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 2\\n3 2\\n4 2\\n5 2\") == \"2\"\nassert solution(\"1 2\\n2 2\\n3 2\\n4 2\\n5 2\\n6 2\\n7 2\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7') == '0'\nassert solution('3 5') == '2'\nassert solution('1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n2 2\\n1 3\\n2 4\") == \"0\\n1\\n2\\n3\\n4\\n\"\n\"\"\"\n\nn, m = map(int, input().split())\n\npoints = {(i, 0) for i in range(1, m+1)}\n\nsegments = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n    points -= set((i, 0) for i in range(l, r+1))\n\nprint(len(points))\nprint(*sorted(points))"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(A, B, C, D) == result\nprint(solution(A, B, C, D))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\nfrom sys import stdin\nfrom math import gcd\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 9 2 3') == '0'\nassert solution('1 2 2 3') == '3'\nassert solution('1 2 1 3') == '0'\nassert solution('1 1 1 1') == '4'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"23456\") == \"No\"\nassert solution(\"242588\") == \"Yes\"\n\"\"\"\n\nfrom utils.number_theory.basic.is_multiple import is_multiple\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123456789') == 'Yes'\n\n-------------\n\nimport numpy as np"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('0') == 'No'\nassert solution('1') == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\"\n\n\"\"\"\nProblem Statement:\nA number is considered perfect if its digits sum up to exactly 10.\nGiven a positive integer N, find the smallest perfect number greater than or equal to N.\n\nInput Format:\nThe first and the only line of the input contains a single integer N (0 <= N < 10^6).\n\nOutput Format:\nPrint a single line denoting the respective minimum perfect number.\n\nNote: The number obtained should be printed modulo 10^9 + 7.\n\nExample:\nInput 1:\n29\n\nOutput 1:\n328\n\nExplanation 1:\nThe smallest perfect number greater than 29 is 32, which is the answer.\n\nInput 2:\n18\n\nOutput 2:\n19\n\nExplanation 2:\nThe smallest perfect number greater than 18 is 19, which is the answer.\n\"\"\"\n\n\"\"\"\nSolution Approach:\nWe can see that the number can be created by summing up the digits of the number.\nThe digits of a number can be obtained by performing the following operations on the number:\n1. Divide the number by 10.\n2. The remainder of the operation is called the last digit of the number.\n3. Repeat the above two steps until the number is reduced to 0.\n\nNow, if the number is divisible by 9, then the sum of its digits is divisible by 9.\nIf the above steps cannot reduce the number to 0, then the number is not divisible by 9.\n\nTo find the minimum number, we need to take the smallest possible last digits of the numbers that can be created.\nTo check whether a number is divisible by 9 or not, we can use the property of modular arithmetic.\n\nFirst we define a function that generates all possible numbers that can be created by taking the last digits.\nThen, we can check the numbers whether they are divisible by 9 or not.\n\nBy using the property of modular arithmetic, we know that the sum of the last digits of the number will be divisible by 9.\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"69\") == \"No\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('12346789') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == '4'"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127\\n') == '4'\nassert solution('1\\n') == '1'\nassert solution('999\\n') == '15'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"127\") == \"4\"\n\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('127') == '4'\nassert solution('131') == '6'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('8') == '2'\nassert solution('9') == '3'\nassert solution('11') == '3'\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hello\") == \"olleh\"\nassert solution(\"hellothere\") == \"ellothereh\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"lucia\") == \"tucia\"\n\nsolution(\"lucia\")\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"bcda\"\nassert solution(\"abcd\", \"bcad\") == \"No\"\nassert solution(\"abcd\", \"bcda\") == \"Yes\"\nassert solution(\"mjtoqabxjzrvgeqt\", \"szgxqrjytkivmnb\") == \"Yes\"\nassert solution(\"mjtoqabxjzrvgeqt\", \"szgxqrjytkivmno\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"nagaokoro\") == \"No\"\nassert solution(\"manggu\") == \"No\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"a\"*2) == \"No\"\nassert solution(\"tokyo\"*2) == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('k') == 't'\nassert solution('y') == 'o'\nassert solution('z') == 'k'\nassert solution('l') == 'i'\nassert solution('a') == 'o'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcde') == 'ebcda'\nassert solution('abracadabra') == 'raebcaca'\nassert solution('babab') == 'babab'\nassert solution('a') == 'a'\nassert solution('yummy') == 'ummyy'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"ab\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tokyo\") == \"kyoto\"\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()\n\nprint('Yes' if a == a[::-1] else 'No')\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\"\"\"\n\nimport pytest"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('abcdef') == ''\nassert solution('cabacc') == '1'\nassert solution('abaccdef') == '2'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cabacc') == '1'"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n\nS = input()\nT = input()\nprint(S.count(T))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\ncabacc\nabc\n''') == '1'\n\nassert solution('''\ncabacc\nxyz\n''') == '3'\n\nassert solution('''\nabc\nxyz\n''') == '2'\n\nassert solution('''\na\na\n''') == '0'\n\nassert solution('''\na\na\na\n''') == '0'"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cabacc') == '1'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nprint(solution(\"8 12 2\"))\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 12 2') == '2'\n\nassert solution('8 12 4') == '4'\n\nassert solution('7 17 8') == '8'\n\nassert solution('1 1 1000000000') == '1'\n\n'''\n\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n-----Explanation-----\nTime: O(n*log(n))\nSpace: O(1)\n\n'''"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\n\"\"\"\n------SOLUTION------\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n') == '1'\nassert solution('2 6 9\\n') == '2'\nassert solution('3 9 12\\n') == '4'\n\"\"\"\n\nimport sys\n\nA, B, K = sys.stdin.read().split()\nA, B, K = int(A), int(B), int(K)\n\ndivs = list(range(1, B+1))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"1024\"\n) == \"2020\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1024\") == \"2020\"\n\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\n\"\"\"\nimport sys\n\nX = int(sys.stdin.readline().strip())\n\nhappiness = 0\n\nwhile X >= 500:\n    happiness += (X // 500) * 1000\n    X = X % 500\n\nwhile X >= 100:\n    happiness += (X // 100) * 500\n    X = X % 100\n\nwhile X >= 50:\n    happiness += (X // 50) * 100\n    X = X % 50\n\nwhile X >= 10:\n    happiness += (X // 10) * 50\n    X = X % 10\n\nwhile X >= 5:\n    happiness += (X // 5) * 10\n    X = X % 5\n\nwhile X >= 1:\n    happiness += (X // 1) * 5\n    X = X % 1\n\nprint(happiness)\n\"\"\"\nimport sys\n\nX = int(sys.stdin.readline().strip())\n\nhappiness = 0\n\nwhile X >= 500:\n    happiness += (X // 500) * 1000\n    X = X % 500\n\nwhile X >= 100:\n    happiness += (X // 100) * 500\n    X = X % 100\n\nwhile X >= 50:\n    happiness += (X // 50) * 100\n    X = X % 50\n\nwhile X >= 10:\n    happiness += (X // 10) * 50\n    X = X % 10\n\nwhile X >= 5:\n    happiness += (X // 5) * 10\n    X = X % 5\n\nwhile X >= 1:\n    happiness += (X // 1) * 5\n    X = X % 1\n\nprint(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == '1001'\nassert solution('10') == '110'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\n\"\"\"\n    The idea is to count the number of times we can add 1 or subtract 1 in order to maximize the number of points from the given input.\n    Since we have five kind of coins, we can add or subtract 1 to either of the coins to maximize the number of points.\n    So, we can say that our dynamic programming table is going to look something like this:\n    \\begin{pmatrix}\n    0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    \\\\\n    0    & 1    & 1    & 1    & 1    & 1    & 1    & 1    & 1    \\\\\n    0    & 1    & 2    & 2    & 2    & 2    & 2    & 2    & 2    \\\\\n    0    & 1    & 3    & 3    & 3    & 3    & 3    & 3    & 3    \\\\\n    0    & 1    & 4    & 4    & 4    & 4    & 4    & 4    & 4    \\\\\n    0    & 1    & 5    & 5    & 5    & 5    & 5    & 5    & 5    \\\\\n    0    & 1    & 6    & 6    & 6    & 6    & 6    & 6    & 6    \\\\\n    0    & 1    & 7    & 7    & 7    & 7    & 7    & 7    & 7    \\\\\n    0    & 1    & 8    & 8    & 8    & 8    & 8    & 8    & 8    \\\\\n    0    & 1    & 9    & 9    & 9    & 9    & 9    & 9    & 9    \\\\\n    0    & 1    & 10    & 10    & 10    & 10    & 10    & 10    & 10    \\\\\n    \\end{pmatrix}\n    The number of rows in the matrix is 10. The number of columns in the matrix is 10.\n    For each row, we are trying to find out what is the maximum number of points that can be earned when we take the coins in that row and add or subtract 1 to it in order to maximize the number of points.\n    To do this, we need to find out the maximum of the values of the elements in each row.\n    The maximum element in each row is the value of the coin we will use to increase or decrease the number of points, the maximum number of points that can be earned is the sum of all the elements in the row.\n    So, the last column of the matrix represents the maximum number of points that can be earned when taking the coins in that row.\n    We can look at the code below to see what is happening:\n    \\begin{pmatrix}\n    0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    \\\\\n    0    & 1    & 2    & 3    & 4    & 5    & 6    & 7    & 8    \\\\\n    0    & 2    & 4    & 6    & 8    & 10    & 12    & 14    & 16    \\\\\n    0    & 3    & 6    & 9    & 12    & 15    & 18    & 21    & 24    \\\\\n    0    & 4    & 8    & 12    & 16    & 20    & 24    & 28    & 32    \\\\\n    0    & 5    & 10    & 15    & 20    & 25    & 30    & 35    & 40    \\\\\n    0    & 6    & 12    & 18    & 24    & 30    & 36    & 42    & 48    \\\\\n    0    & 7    & 14    & 21    & 28    & 35    & 42    & 49    & 56    \\\\\n    0    & 8    & 16    & 24    & 32    & 40    & 48    & 56    & 64    \\\\\n    0    & 9    & 18    & 27    & 36    & 45    & 54    & 63    & 72    \\\\\n    0    & 10    & 20    & 30    & 40    & 50    & 60    & 70    & 80    \\\\\n    \\end{pmatrix}\n    The above matrix represents the dynamic programming table.\n    We can see that the last column is the maximum number of points that can be earned when taking the coins in that row.\n    For example, if we take the coins in row 2, we can increase the number of points in row 3 or decrease the number of points in row 1 by 1 point, increasing the number of points by 1.\n    Now, we can do this process again, but this time we will change the value of the row and the column.\n    In this way, we can change the value of the number of points that can be earned in row 2, and we can see that the maximum number of points that can be earned when taking the coins in row 2 is 6.\n    Similarly, we can also see that the maximum number of points that can be earned when taking the coins in row 10 is 60.\n    In the last step, we can also see that the maximum number of points that can be earned when taking the coins in row 2 is the maximum number of points that can be earned when taking the coins in row 10.\n    Therefore, we can conclude that we will get the maximum number of points that can be earned when taking the coins in row 2 as the maximum number of points that can be earned when taking the coins in row 10.\n    Now, we will add the maximum values of the elements in the rows to the last column of the matrix to get the final number of points that can be earned.\n    After that, we can see that the maximum number of points that can be earned when taking the coins in row 2 is the same as the maximum number of points that can be earned when taking the coins in row 10.\n    To visualize the above process, you can see the code below:\n    \\begin{pmatrix}\n    0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    & 0    \\\\\n    0    & 1    & 2    & 3    & 4    & 5    & 6    & 7    & 8    \\\\\n    0    & 2    & 4    & 6    & 8    & 10    & 12    & 14    & 16    \\\\\n    0    & 3    & 6    & 9    & 12    & 15    & 18    & 21    & 24    \\\\\n    0    & 4    & 8    & 12    & 16    & 20    & 24    & 28    & 32    \\\\\n    0    & 5    & 10    & 15    & 20    & 25    & 30    & 35    & 40    \\\\\n    0    & 6    & 12    & 18    & 24    & 30    & 36    & 42    & 48    \\\\\n    0    & 7    & 14    & 21    & 28    & 35    & 42    & 49    & 56    \\\\\n    0    & 8    & 16    & 24    & 32    & 40    & 48    & 56    & 64    \\\\\n    0    & 9    & 18    & 27    & 36    & 45    & 54    & 63    & 72    \\\\\n    0    & 10    & 20    & 30    & 40    & 50    & 60    & 70    & 80    \\\\\n    \\end{pmatrix}\n    The above matrix represents the dynamic programming table.\n    So, the code below does the rest of the processes.\n    First, we define the function get_max_points that takes in the number of coins and the number of happiness points that can be earned for each coin and returns the maximum number of points that can be earned.\n    Then, we initialize the variable number_of_coins with the number of coins given by the user.\n    Next, we initialize the variable max_points with 0.\n    Then, we iterate through"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\\n\") == 5\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n4') == '5'\nassert solution('2\\n1 4') == '5'"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"2\\n1 4\"\n) == \"5\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 4') == 5\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 4\\n\") == \"5\"\nassert solution(\"4 4\\n1 4\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4\") == \"5\"\nassert solution(\"5\\n1 4 2 3 5\") == \"3\"\nassert solution(\"4\\n1 2 3 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4\\n\") == \"5\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2\\n') == 5\n\"\"\"\n\nimport math"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10') == '3'\nassert solution('2 3') == '2'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == \"3\"\nprint(solution(\"4 10\"))\n'''"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n\") == \"3\"\n\"\"\"\n\nA, B = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10') == '3'\nassert solution('4 4') == '0'\nassert solution('4 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nfrom collections import Counter"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n\nstdin = input()\ncount = 0\nfor i in range(0, 3):\n    if stdin[i] == \"C\":\n        if stdin[i + 1] == \"S\":\n            count += 1\n        if stdin[i + 1] == \"R\":\n            count += 0\n    if stdin[i] == \"R\":\n        if stdin[i + 1] == \"S\":\n            count += 1\n        if stdin[i + 1] == \"C\":\n            count += 0\nprint(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('CSR') == 2\nassert solution('CSS') == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\nassert solution(\"CSC\") == \"1\"\nassert solution(\"SCC\") == \"1\"\nassert solution(\"SCR\") == \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 0\nassert solution(\"CCS\") == 1\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 1\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\nassert solution(\"6\\n1 3 5 6 4 2\") == \"4\"\nassert solution(\"9\\n1 3 5 6 7 9 8 2 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 5 4') == '2'\nassert solution('6\\n1 3 3 3 3 4 4') == '1'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 5 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 3 5 4 2''') == 2\n\nassert solution('''5\n2 3 1 4 5''') == 2\n\nassert solution('''2\n3 2''') == 0\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 5 4 2') == '2'\nassert solution('3\\n1 3 2 5 4') == '0'\nassert solution('5\\n1 3 5 4 2') == '2'"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\nimport math\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __str__(self):\n        return f'Point({self.x}, {self.y})'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\n\"\"\"\n\nfrom math import atan2, sqrt\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\n\nassert solution('2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.040'\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == '6.720'\n\n\"\"\"\n\nimport sys\nimport math\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass\nclass Point:\n    x: Union[float, int]\n    y: Union[float, int]"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n') == '5.410'\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '6.040'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.720'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\n\nprint(solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62'))\nprint(solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66'))\nprint(solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76'))\nprint(solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06'))\nprint(solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92'))\n\n\"\"\"\nimport os\nimport io\nimport unittest\nimport random\n\n\nclass MyTest(unittest.TestCase):\n    def test(self):\n        dir_path = os.path.dirname(os.path.realpath(__file__))\n        file = open(dir_path + \"/solutions/test.txt\", \"r\")\n        test_cases = file.readlines()\n        test_cases = [x.strip() for x in test_cases]\n        test_cases = [x for x in test_cases if len(x) > 0]\n        test_cases = [x for x in test_cases if x[0]!= '#']\n        file.close()\n        number_of_test_cases = int(test_cases[0])\n        test_cases = test_cases[1:]\n\n        for i in range(number_of_test_cases):\n            # read the test case\n            test_case_parts = test_cases[i].split(';')\n            stdin = test_case_parts[0]\n            correct_stdout = test_case_parts[1]\n            print(stdin, correct_stdout)\n            # solve the test case and check whether is equals to the correct_stdout\n            solution = open(dir_path + \"/solutions/my_solution.txt\", \"r\")\n            student_solution = solution.read()\n            solution.close()\n            self."
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\n\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\\n\") == \"6.720\"\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.040\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('7') == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\") == \"2\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"1\"\nassert solution(\"5 26\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == solution(\"5 8\\n2 3 1 1 2\")\nassert solution(input()) == solution(\"7 10\\n1 3 4 2 1 4 2\")\nassert solution(input()) == solution(\"5 15\\n5 5 5 5 5\")\nassert solution(input()) == solution(\"5 26\\n5 5 5 5 5\")\nassert solution(input()) == solution(\"5 16\\n5 5 5 5 5\")\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"2\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"4 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2, 3, 1, 1, 2) == 4\nassert solution(5, 8, 2, 1, 2) == 4\nassert solution(5, 15, 5, 5, 5) == 2\nassert solution(5, 16, 5, 5, 5) == 2\nassert solution(5, 26, 5, 5, 5) == -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\\n\") == \"1 2 3\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = [int(i) for i in input().split()]\n\ndp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp[i][1] = dp[i - 1][1] + s[i - 1]\n\nfor i in range(1, k + 1):\n    dp[1][i] = dp[1][i - 1] + s[0]\n\nfor i in range(2, n + 1):\n    for j in range(2, k + 1):\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + s[i - 1]\n\nprint(*dp[n][k:k + 1])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 1 2') == '1 1 2 2'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"1 3\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 1 2\") == \"1 1\"\nassert solution(\"1 1 1 1\") == \"1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 2 4 3 1') == '1 2 3'\nassert solution('1 2 1 2 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\nassert solution('1 2 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\nprint('Hooray!')\n\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == '3'\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == \"5\"\n\nassert solution('''2 4\n1 2 3 4\n10 3 7 3''') == \"0\"\n\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == \"3\"\n\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == \"0\"\n\nassert solution('''1 1\n1''') == \"0\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == 5\n\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == 3\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n3\") == '3'\nassert solution(\"4 2\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"4 2\\n1 2 3 4\\n10 3 7 3\") == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\\n\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == '3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, \"xxoxx\") == 0\nassert solution(6, \"xxxiii\") == 1\nassert solution(10, \"xxxxxxxxxx\") == 8\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nassert solution(\"xx\") == \"0\"\nassert solution(\"xx\") == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxixxx\") == \"xxix\"\nassert solution(\"xxiixxx\") == \"xxxxx\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nassert solution(\"xxxxxx\") == \"3\"\nassert solution(\"xx\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\nassert solution(\"zzz\") == 3\nassert solution(\"hippopotamuses\") == 6\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 'xxxx') == 0\nassert solution(3, 'xxx') == 0\nassert solution(6, 'xxxi') == 1\nassert solution(7, 'xxxxx') == 1\nassert solution(10, 'xxxxxxxxxx') == 8\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '48'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"3\") == \"27\"\nassert solution(\"10\") == \"1260\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 48\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nimport math\n\nr = int(input())\n\narea = r * r * math.sqrt(3) / 2\n\nprint(int(area))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '48'\nprint('Passed')\n\n'''\n\nimport math\nimport sys\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 48\nassert solution(\"10\") == 454\nassert solution(\"1\") == 36\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == 48\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\nassert solution(\"4 0\\n\") == \"safe\"\nassert solution(\"5 5\\n\") == \"unsafe\"\nassert solution(\"5 0\\n\") == \"safe\"\n\"\"\"\nimport math\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n') == 'unsafe'\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"5 4\") == \"unsafe\"\nassert solution(\"6 3\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\n\n\"\"\"\nInput:\n3 4\n\nOutput:\nsafe\n\nInput:\n4 5\n\nOutput:\nunsafe\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\nfrom math import ceil\n\ns, w = input().split()\ns, w = int(s), int(w)"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('4 5') == 'unsafe'\nassert solution('5 5') == 'unsafe'\nassert solution('5 4') =='safe'\nassert solution('4 4') =='safe'\n\n-----\n1. First, the program should read the two input parameters: S and W.\n\n2. Then, it should check whether W is less than or equal to S, and print \u201cunsafe\u201d if W is less than or equal to S, and \u201csafe\u201d otherwise.\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\n-----Tests-----\n1) test(S,W) where S = 0, W = 0, expected: \"safe\"\n2) test(S,W) where S = 1, W = 0, expected: \"safe\"\n3) test(S,W) where S = 2, W = 0, expected: \"safe\"\n4) test(S,W) where S = 3, W = 0, expected: \"safe\"\n5) test(S,W) where S = 4, W = 0, expected: \"safe\"\n6) test(S,W) where S = 5, W = 0, expected: \"unsafe\"\n7) test(S,W) where S = 6, W = 0, expected: \"unsafe\"\n8) test(S,W) where S = 7, W = 0, expected: \"unsafe\"\n9) test(S,W) where S = 8, W = 0, expected: \"safe\"\n10) test(S,W) where S = 9, W = 0, expected: \"unsafe\"\n11) test(S,W) where S = 10, W = 0, expected: \"unsafe\"\n12) test(S,W) where S = 11, W = 0, expected: \"unsafe\"\n13) test(S,W) where S = 12, W = 0, expected: \"safe\"\n14) test(S,W) where S = 13, W = 0, expected: \"unsafe\"\n15) test(S,W) where S = 14, W = 0, expected: \"unsafe\"\n16) test(S,W) where S = 15, W = 0, expected: \"unsafe\"\n17) test(S,W) where S = 16, W = 0, expected: \"unsafe\"\n18) test(S,W) where S = 17, W = 0, expected: \"unsafe\"\n19) test(S,W) where S = 18, W = 0, expected: \"unsafe\"\n20) test(S,W) where S = 19, W = 0, expected: \"safe\"\n21) test(S,W) where S = 20, W = 0, expected: \"safe\"\n22) test(S,W) where S = 21, W = 0, expected: \"unsafe\"\n23) test(S,W) where S = 22, W = 0, expected: \"unsafe\"\n24) test(S,W) where S = 23, W = 0, expected: \"safe\"\n25) test(S,W) where S = 24, W = 0, expected: \"safe\"\n26) test(S,W) where S = 25, W = 0, expected: \"unsafe\"\n27) test(S,W) where S = 26, W = 0, expected: \"unsafe\"\n28) test(S,W) where S = 27, W = 0, expected: \"unsafe\"\n29) test(S,W) where S = 28, W = 0, expected: \"unsafe\"\n30) test(S,W) where S = 29, W = 0, expected: \"safe\"\n31) test(S,W) where S = 30, W = 0, expected: \"safe\"\n32) test(S,W) where S = 31, W = 0, expected: \"unsafe\"\n33) test(S,W) where S = 32, W = 0, expected: \"unsafe\"\n34) test(S,W) where S = 33, W = 0, expected: \"safe\"\n35) test(S,W) where S = 34, W = 0, expected: \"unsafe\"\n36) test(S,W) where S = 35, W = 0, expected: \"unsafe\"\n37) test(S,W) where S = 36, W = 0, expected: \"unsafe\"\n38) test(S,W) where S = 37, W = 0, expected: \"unsafe\"\n39) test(S,W) where S = 38, W = 0, expected: \"unsafe\"\n40) test(S,W) where S = 39, W = 0, expected: \"safe\"\n41) test(S,W) where S = 40, W = 0, expected: \"safe\"\n42) test(S,W) where S = 41, W = 0, expected: \"unsafe\"\n43) test(S,W) where S = 42, W = 0, expected: \"unsafe\"\n44) test(S,W) where S = 43, W = 0, expected: \"safe\"\n45) test(S,W) where S = 44, W = 0, expected: \"safe\"\n46) test(S,W) where S = 45, W = 0, expected: \"unsafe\"\n47) test(S,W) where S = 46, W = 0, expected: \"unsafe\"\n48) test(S,W) where S = 47, W = 0, expected: \"unsafe\"\n49) test(S,W) where S = 48, W = 0, expected: \"unsafe\"\n50) test(S,W) where S = 49, W = 0, expected: \"unsafe\"\n51) test(S,W) where S = 50, W = 0, expected: \"unsafe\"\n52) test(S,W) where S = 51, W = 0, expected: \"safe\"\n53) test(S,W) where S = 52, W = 0, expected: \"safe\"\n54) test(S,W) where S = 53, W = 0, expected: \"unsafe\"\n55) test(S,W) where S = 54, W = 0, expected: \"unsafe\"\n56) test(S,W) where S = 55, W = 0, expected: \"unsafe\"\n57) test(S,W) where S = 56, W = 0, expected: \"unsafe\"\n58) test(S,W) where S = 57, W = 0, expected: \"unsafe\"\n59) test(S,W) where S = 58, W = 0, expected: \"unsafe\"\n60) test(S,W) where S = 59, W = 0, expected: \"unsafe\"\n61) test(S,W) where S = 60, W = 0, expected: \"unsafe\"\n62) test(S,W) where S = 61, W = 0, expected: \"unsafe\"\n63) test(S,W) where S = 62, W = 0, expected: \"unsafe\"\n64) test(S,W) where S = 63, W = 0, expected: \"unsafe\"\n65) test(S,W) where S = 64, W = 0, expected: \"unsafe\"\n66) test(S,W) where S = 65, W = 0, expected: \"unsafe\"\n67) test(S,W) where S = 66, W = 0, expected: \"unsafe\"\n68) test(S,W) where S = 67, W = 0, expected: \"unsafe\"\n69) test(S,W) where S = 68, W = 0, expected: \"unsafe\"\n70) test(S,W) where S = 69, W = 0, expected: \"unsafe\"\n71) test(S,W) where S = 70, W = 0, expected: \"unsafe\"\n72) test(S,W) where S = 71, W = 0, expected: \"unsafe\"\n73) test(S,W) where S = 72, W = 0, expected: \"unsafe\"\n74) test(S,W) where S = 73, W = 0, expected: \"unsafe\"\n75) test(S,W) where S = 74, W = 0, expected: \"unsafe\"\n76) test(S,W) where S = 75, W = 0, expected: \"unsafe\"\n77) test(S,W) where S = 76, W = 0, expected: \"unsafe\"\n78) test(S,W"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'unsafe'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == 6\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3 4 5) == 6\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint('Test pass.')\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == 6\n\"\"\"\n\n\"\"\"\n\nTriangles problem:\n\nFor each triangle ABC, write a line of code that finds the area of triangle ABC.\n\nInput Format\nIn this section, you will be given three integers - A, B and C.\n\nOutput Format\nIn this section, print the area of triangle ABC, rounded off to the nearest integer.\n\nSample Input\n3 4 5\n\nSample Output\n6\n\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"Test 1 Passed\")\nassert solution(\"1 1 1\") == \"0\"\nprint(\"Test 2 Passed\")\nassert solution(\"3 4 5\") == \"6\"\nprint(\"Test 3 Passed\")\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == 6\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\") == 4\nassert solution(\"1 100 100\") == 1\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n1, 10, 2\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 11 4') == 4\n\n\"\"\"\n\nimport sys\n\nA, B, C = map(int, sys.stdin.readline().strip().split())\n\nsumm = A + (B * C)"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 11 4\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"3 0 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11 4\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 1 2\") == 2\n\"\"\"\n\nA, B, C = map(int, input().split())\nprint(B // (C + 1))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nA, B, C = input().split(\" \")\nA = int(A)\nB = int(B)\nC = int(C)\nans = 0\nfor i in range(A, B + 1):\n    ans += 1\n    if i % C == 0:\n        ans -= 1\n        break\nprint(ans)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 5) == 10\n\n---Solution---\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nfrom math import prod"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == 10\n\n'''\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\n\nprint(solution(stdin))\n\n\"\"\"\n\"\"\"\n2 5\n\n2 * 5 = 10\n\"\"\"\n\na, b = map(int, input().split())\nprint(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\nprint(solution(\"1 1 1\"))\nprint(solution(\"2 10 3\"))\nprint(solution(\"5 10 10\"))"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7') == '10'\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\") == 10\n\"\"\"\n\nA, B, T = [int(i) for i in stdin.split()]\n\ntotal = 0\nbiscuits = 0\nfor i in range(int(T / A) + 1):\n    biscuits += A\n    total += biscuits\n    biscuits = A * (i + 1)\n    print(total)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 5 7''') == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nassert solution(\"1 1 10\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\") == 10\n\na, b, t = [int(x) for x in stdin.split(' ')]"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\n\"\"\"\nSolution 3"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5 7''') == 10\n'''\n'''\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 567') == 'OK'\nassert solution('567 7') == 'NG'\n\"\"\"\n\nA, B, K = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 500 600\") == \"OK\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''7\n500 600'''\n) == 'OK'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n500 600') == \"OK\"\nassert solution('7\\n500 600\\n456 123') == \"NG\"\nassert solution('2\\n1 100') == \"NG\"\nassert solution('2\\n2 2') == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"7\n500 600\n\"\"\"\n) == 'OK'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 500 600') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('K 500 600') == 'NG'\nassert solution('K 7 100') == 'OK'\nassert solution('K 7 10') == 'NG'\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 10') == 'NG'\nassert solution('7\\n1 10') == 'OK'\nassert solution('7\\n100 500') == 'OK'\nassert solution('7\\n100 500') == 'NG'\nassert solution('7\\n100 500') == 'NG'\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n\") == \"2.66666667\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nt, x = input().split()\nt, x = int(t), int(x)\n\nprint(f\"{math.floor(t / x):.6f}\")\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 3\n''') == '2.6666666667'\nassert solution('''8 2\n''') == '3.0'\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\nprint(\"{0:.3f}\".format(T / X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\na, b = [int(i) for i in stdin.strip().split(\" \")]\nprint(f\"{a * b / a:.3f}\")\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '0.5'\nassert solution('2 3') == '1.0'\nassert solution('1 2 3') == '1.5'\n'''"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\n\"\"\"\nGiven two integers A and B, the task is to find the number of ways you can form a number of A using digits from {1,2,3,4,5,6,7,8,9} such that the number obtained from such way is less than B.\nExamples:\nInput: A = 3, B = 10\nOutput: 7\n\nInput: A = 3, B = 16\nOutput: 2\nExplanation:\n{1, 8, 9} -> 3\n{1, 2, 2, 3} -> 4\n{1, 2, 2, 2, 8} -> 9\n{1, 2, 2, 2, 2, 9} -> 10\n\n[+]Temporal marker            : Tue, 9:33 | Feb 19, 20\n[+]Temporal marker untethered : Tue, 9:45 | Feb 19, 20\n[+]Comments                   : *implemented straightforward, works fine for low A and B\n                                *Solved\n[+]Level                      :\n[+]Tread Speed                :\n[+]LINK                       : https://www.interviewbit.com/problems/ways-to-form-number-less-than-b/\n[+] Supplement Sources         : N/A\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\"\n\na,b,c = input().split()\nb = int(b)\nc = int(c)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '6 4 3'\n) == '1'\nassert solution(\n    '0 0 0'\n) == '0'\nassert solution(\n    '6 2 3'\n) == '0'\nassert solution(\n    '6 2 1'\n) == '0'\nassert solution(\n    '3 0 2'\n) == '0'\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 4 3') == '1'\nprint('Test Successful')"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '6 4 3'\n) == '1'\n\"\"\"\n\n\"\"\"\nBOTTLE CAPACITY, A BOTTLE OF WATER, A LINE OF DIGITS"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('6 4 3') == '1'\nassert solution('10 11 12') == '10'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4\\n3 1 2 4') == '3'\nassert solution('4\\n3 1 2 4\\n1 3 2 4') == '0'\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n---Problem---\n\nImplement function solution(P, Q, N) which takes in two permutations P and Q and a number N and returns the absolute difference between the largest element in P and the smallest element in Q.\n\n-----Solution-----\n\nIt is easy to see that if we sorted the permutation P and Q, then the difference between the largest and smallest element would be the difference between the N-1th and 1st element of sorted P and Q.\n\nSince N-1 is always greater than or equal to 1, we know that we can find the indices of the smallest element and the largest element in sorted P and Q, and then sort them and return the difference between the indices (which are a and b).\n\nFrom here, we can begin solving the problem recursively. For example, we can assume we have already computed the indices of the smallest element and the largest element in P and Q, and we want to find the absolute difference between the indices in the sorted versions of P and Q.\n\nIn this case, we can compute the absolute difference between the indices in P and Q. If the absolute difference between the indices in P and Q is greater than the absolute difference between the indices of the elements in Q and P, then the absolute difference would be the difference between the elements in Q and P.\n\nOtherwise, we can simply return the difference between the indices in the sorted versions of P and Q.\n\nSince we have already computed the indices of the smallest element in P and the largest element in Q, we can just use those indices to compute the indices of the smallest element in Q and the largest element in P.\n\nWe then recursively call the function solution(P, Q, N - 1) where N = N - 1 to compute the absolute difference between the indices in Q and P, then return the solution from the previous call.\n\nThe solution below uses a similar approach to solve the problem.\n\n'''\nimport math\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"2\\n1 3\\n2 1\") == \"1\"\n\n-----\n2. Assume that you are given n integers (a_1,~a_n). We can define an array of size n - 1 that satisfies the following properties:\n\nFor every i, a_i > a_{i + 1}.\nFor every i, a_i >= 0.\nThe array is called an increasing sequence if a_1 < a_2 <... < a_n.\nThere is an array of size n - 1, called increasing sequences of length n - 1, such that all the elements in the array are increasing sequences of length n - 1.\nFor every increasing sequence array a, find the number of increasing sequences of length n that can be formed using elements of array a.\n\n-----Notes-----\nArray is defined as an array of size n - 1 that satisfies the following properties:\n\nFor every i, a_i > a_{i + 1}.\nFor every i, a_i >= 0.\nThe array is called an increasing sequence if a_1 < a_2 <... < a_n.\nThere is an array of size n - 1, called increasing sequences of length n - 1, such that all the elements in the array are increasing sequences of length n - 1.\nFor every increasing sequence array a, find the number of increasing sequences of length n that can be formed using elements of array a.\n\n-----Constraints-----\n - n \\leq 100\n - 1 \\leq a_i \\leq 1000\n\n-----Input-----\nThere are three lines in the input:\n\nn - the number of elements in the array\na_1,~a_n - the elements of the array, separated by a space\n\n-----Output-----\nPrint the number of increasing sequences of length n that can be formed using elements of array a_1,~a_n.\n\n-----Sample Input-----\n5\n1 3 4 2 5\n\n-----Sample Output-----\n5\n\nThere are 5 increasing sequences of length 5: (1, 2, 3, 4, 5), (1, 3, 4, 2, 5), (1, 3, 4, 5, 2), (1, 3, 5, 4, 2), and (1, 3, 5, 2, 4).\n\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 2') == '3'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\nassert solution('''\n2\n3 1 2\n3 1 2\n''') == '0'\nassert solution('''\n2\n3 1 2\n2 1 3\n''') == '1'\nassert solution('''\n4\n1 2 3 4\n4 3 1 2\n''') == '3'\nassert solution('''\n4\n2 1 3 4\n4 3 2 1\n''') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"2\\n1 2\\n1 2\") == \"0\"\nassert solution(\"4\\n1 3 2 4\\n3 1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\\n1 3 2\\n2 3 1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n\nassert solution('''\n4\n1 4 3 2\n2 1 3 4\n''') == '0'\n\nassert solution('''\n5\n1 4 3 2 5\n5 1 4 3 2\n''') == '2'\n\nprint('Success')"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(S) == output\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"AT\") == 1\nassert solution(\"ATC\") == 2\nassert solution(\"ATCODER\") == 3\nassert solution(\"ATCODERATC\") == 8\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(T) == result\nprint(solution(T))\n\nSolution\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"AC\") == 1\n\"\"\"\n\nimport collections\nfrom typing import Deque\n\n\nclass Solution:\n    def __init__(self, string):\n        self.string = string\n\n    def longest_acgt_string_substring(self) -> int:\n        \"\"\"\n        Finds the longest substring of S that only contains A, C, G, T\n        Returns the length of that substring\n        \"\"\"\n        # The longest substring can be either A, C, G, T or an empty string\n        max_substring = min(len(self.string), 4)\n        substring = \"\"\n        while max_substring > 0:\n            substring = self.string[0:max_substring]\n            # If the substring is a valid ACGT string, return the length of it\n            if self.is_valid_acgt_string(substring):\n                return len(substring)\n            max_substring -= 1\n        # If the string is invalid, return 0\n        return 0\n\n    def is_valid_acgt_string(self, substring: str) -> bool:\n        \"\"\"\n        Determines whether a substring is a valid ACGT string or not\n        \"\"\"\n        # For each character in the substring, check if it is A, C, G, T\n        # If it is not then return False\n        for c in substring:\n            if c!= \"A\" and c!= \"C\" and c!= \"G\" and c!= \"T\":\n                return False\n        # Otherwise return True\n        return True\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '9'\nassert solution('1') == '0'\nassert solution('21') == '6'\nassert solution('121') == '0'\n\"\"\"\n\n\"\"\"\nBEST SOLUTION\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == \"9\"\nprint(solution('11'))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '9'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == \"4\"\nassert solution(10) == \"9\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1234\") == \"5\"\nassert solution(\"2345\") == \"8\"\nassert solution(\"12345\") == \"6\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == '9'\n\"\"\"\nfrom typing import Iterable, List, Union, Dict\n\nfrom icontract import require, ensure\n\n\nclass Entry:\n    def __init__(self, value: Union[int, float], count: int):\n        self.value = value\n        self.count = count\n\n\nclass Bucket:\n    def __init__(self, entries: List[Entry]):\n        self.entries = entries\n\n    def __str__(self) -> str:\n        return f\"{self.entries}\"\n\n\nclass Histogram:\n    def __init__(self, buckets: List[Bucket]):\n        self.buckets = buckets\n\n    def __str__(self) -> str:\n        return f\"{self.buckets}\"\n\n    @property\n    def count_greater_than_or_equal_to_one(self) -> int:\n        \"\"\"Count of values >= 1\"\"\"\n        return len(list(filter(lambda b: b.count >= 1, self.buckets)))\n\n    @property\n    def count_greater_than_or_equal_to_five(self) -> int:\n        \"\"\"Count of values >= 5\"\"\"\n        return len(list(filter(lambda b: b.count >= 5, self.buckets)))\n\n    @property\n    def count_greater_than_or_equal_to_ten(self) -> int:\n        \"\"\"Count of values >= 10\"\"\"\n        return len(list(filter(lambda b: b.count >= 10, self.buckets)))\n\n    @property\n    def count_greater_than_or_equal_to_fifteen(self) -> int:\n        \"\"\"Count of values >= 15\"\"\"\n        return len(list(filter(lambda b: b.count >= 15, self.buckets)))\n\n    def values_count_greater_than_or_equal_to_fifteen(self) -> Dict[int, int]:\n        \"\"\"Count of values >= 15\"\"\"\n        return dict((k, v) for k, v in\n                    enumerate(self.buckets, start=1) if v.count >= 15)\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofcookies\") == \"cupofcookies\"\n\nprint(solution(\"cupofcoffee\"))\nprint(solution(\"cupofcookies\"))\n\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofhottea') == 'cupofcoffee'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cupofcoffee') == 4\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 4\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == \"coffee\"\nassert solution(\"cupofhottea\") == \"hottea\"\nassert solution(\"cupofcoffee\") == \"coffee\"\nassert solution(\"cupofhottea\") == \"hottea\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cupofcoffee') == '4'"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"b\") == 1\nassert solution(\"ab\") == 2\nassert solution(\"bab\") == 2\nassert solution(\"aba\") == 2\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"cuhtofeeea\"\nassert solution(\"cupofhottea\") == \"cuhtohottea\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nfrom typing import List\n\nimport sys"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\") == \"5 6 7 8 9\"\n\"\"\"\n\nimport sys\n\nK, X = [int(i) for i in sys.stdin.readline().rstrip().split()]\n\nprint(\" \".join([str(i) for i in range(X - K + 1, X + K)]))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\"\n\nk, x = input().split()\nk, x = int(k), int(x)"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 7''') == '''5 6 7 8 9'''\nassert solution('''3 8''') == '''6 7 8 9'''\nassert solution('''5 4''') == '''5'''\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\n\"\"\"\n\nfrom math import ceil\n\nx = int(stdin.readline().strip())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"No\"\n\nprint(solution(\"25\"))\n\n-----Test 3-----\n\nYou will turn on the air conditioner if, and only if, the temperature of the room is 30 degrees Celsius or above.\nThe current temperature of the room is X degrees Celsius. Will you turn on the air conditioner?\n\n-----Constraints-----\n - -40 \\leq X \\leq 40\n - X is an integer.\n\n-----Input-----\n20\n\n-----Output-----\nNo"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30') == 'No'\nassert solution('25') == 'Yes'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\nassert solution('15') == 'Yes'"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"27\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30') == 'Yes'\nassert solution('25') == 'No'\n\"\"\"\n\n\"\"\"\nInput: \n-40\n\nOutput:\nYes\n\ninput: int\noutput: str\n\n30\n26\n-40\n-15\n\"\"\"\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25\\n') == 'No'"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 1') == '1'"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2\\n3 4\") == \"1\"\nassert solution(\"2 2\\n1 1\") == \"0\"\nassert solution(\"4 1\\n1 2 1 2 1\") == \"1\"\nassert solution(\"4 1\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\nassert solution('1 1\\n1 1') == '0'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\nfrom typing import Tuple\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\nassert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('12345') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1235\") == \"Bad\"\nassert solution(\"2234\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"1243\") == \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"12aa\") == \"Bad\"\nassert solution(\"aaaa\") == \"Bad\"\nassert solution(\"0000\") == \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3776\") == \"Bad\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Bad\"\n\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1235\") == \"Good\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1244\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1123\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"3.5\"\nassert solution(\"2 4\") == \"3.5\"\nassert solution(\"2 5\") == \"3.5\"\nassert solution(\"3 6\") == \"3.5\"\nassert solution(\"3 7\") == \"3.6\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 3.5\nassert solution('1 2') == 1.5\nassert solution('10 100') == 100\nassert solution('5 10') == 5.5\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n') == '3.5'\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('1\\n3 4') == '4'\nassert solution('3\\n1 2') == '2.5'\nassert solution('3\\n3 4') == '3.5'\nassert solution('3\\n1 1') == '1.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 4\") == '3.5'\nprint('Hooray!')\n\nassert solution(\"3\\n3 4\") == '3.5'\nprint('Hooray, again!')\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2\\n3 4'\n) == '3.5'\n\nassert solution(\n    '2\\n5 5'\n) == '3.5'\n\nassert solution(\n    '2\\n0 1'\n) == '1'\n\nassert solution(\n    '2\\n0 0'\n) == '0'\n\nassert solution(\n    '3\\n1 2 3'\n) == '2'"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\n\"\"\"\n\"\"\"\nNo need for arrays here.\nThe trick is to get the minimum possible number from one ingredient and then do the same thing with it.\nI'll go through the process of reducing the minimum possible number from one ingredient to zero.\n\n1) We start with the largest possible number. In this case, the largest possible number is 1_000_000.\n\n2) We reduce each number to its lowest possible number. In this case, the lowest possible number is 1.\n\n3) We calculate the average of the numbers that were reduced. In this case, the average is 2.\n\n4) We repeat the process until we get the lowest possible number (in this case, 1).\n\n5) We take the average of the numbers that were reduced and it is our minimum possible number.\n\n6) We repeat the process once more to obtain the next lowest number.\n\n7) We take the average of the numbers that were reduced and it is our next minimum possible number.\n\n8) We repeat the process once more until we get the next lowest number (in this case, 1).\n\n9) We take the average of the numbers that were reduced and it is our third minimum possible number.\n\n10) We repeat the process once more to obtain the fourth lowest number.\n\n11) We take the average of the numbers that were reduced and it is our fourth lowest possible number.\n\n12) We repeat the process once more to obtain the fifth lowest number.\n\n13) We take the average of the numbers that were reduced and it is our fifth lowest possible number.\n\n14) We repeat the process once more to obtain the sixth lowest number.\n\n15) We take the average of the numbers that were reduced and it is our sixth lowest possible number.\n\n16) We repeat the process once more to obtain the seventh lowest number.\n\n17) We take the average of the numbers that were reduced and it is our seventh lowest possible number.\n\n18) We repeat the process once more to obtain the eighth lowest number.\n\n19) We take the average of the numbers that were reduced and it is our eighth lowest possible number.\n\n20) We repeat the process once more to obtain the ninth lowest number.\n\n21) We take the average of the numbers that were reduced and it is our ninth lowest possible number.\n\n22) We repeat the process once more to obtain the tenth lowest number.\n\n23) We take the average of the numbers that were reduced and it is our tenth lowest possible number.\n\n24) We repeat the process once more to obtain the eleventh lowest number.\n\n25) We take the average of the numbers that were reduced and it is our eleventh lowest possible number.\n\n26) We repeat the process once more to obtain the twelfth lowest number.\n\n27) We take the average of the numbers that were reduced and it is our twelfth lowest possible number.\n\n28) We repeat the process once more to obtain the thirteenth lowest number.\n\n29) We take the average of the numbers that were reduced and it is our thirteenth lowest possible number.\n\n30) We repeat the process once more to obtain the fourteenth lowest number.\n\n31) We take the average of the numbers that were reduced and it is our fourteenth lowest possible number.\n\n32) We repeat the process once more to obtain the fifteenth lowest number.\n\n33) We take the average of the numbers that were reduced and it is our fifteenth lowest possible number.\n\n34) We repeat the process once more to obtain the sixteenth lowest number.\n\n35) We take the average of the numbers that were reduced and it is our sixteenth lowest possible number.\n\n36) We repeat the process once more to obtain the seventeenth lowest number.\n\n37) We take the average of the numbers that were reduced and it is our seventeenth lowest possible number.\n\n38) We repeat the process once more to obtain the eighteenth lowest number.\n\n39) We take the average of the numbers that were reduced and it is our eighteenth lowest possible number.\n\n40) We repeat the process once more to obtain the nineteenth lowest number.\n\n41) We take the average of the numbers that were reduced and it is our nineteenth lowest possible number.\n\n42) We repeat the process once more to obtain the twentieth lowest number.\n\n43) We take the average of the numbers that were reduced and it is our twentieth lowest possible number.\n\n44) We repeat the process once more to obtain the twenty-first lowest number.\n\n45) We take the average of the numbers that were reduced and it is our twenty-first lowest possible number.\n\n46) We repeat the process once more to obtain the twenty-second lowest number.\n\n47) We take the average of the numbers that were reduced and it is our twenty-second lowest possible number.\n\n48) We repeat the process once more to obtain the twenty-third lowest number.\n\n49) We take the average of the numbers that were reduced and it is our twenty-third lowest possible number.\n\n50) We repeat the process once more to obtain the twenty-fourth lowest number.\n\n51) We take the average of the numbers that were reduced and it is our twenty-fourth lowest possible number.\n\n52) We repeat the process once more to obtain the twenty-fifth lowest number.\n\n53) We take the average of the numbers that were reduced and it is our twenty-fifth lowest possible number.\n\n54) We repeat the process once more to obtain the twenty-sixth lowest number.\n\n55) We take the average of the numbers that were reduced and it is our twenty-sixth lowest possible number.\n\n56) We repeat the process once more to obtain the twenty-seventh lowest number.\n\n57) We take the average of the numbers that were reduced and it is our twenty-seventh lowest possible number.\n\n58) We repeat the process once more to obtain the twenty-eight lowest number.\n\n59) We take the average of the numbers that were reduced and it is our twenty-eight lowest possible number.\n\n60) We repeat the process once more to obtain the twenty-ninth lowest number.\n\n61) We take the average of the numbers that were reduced and it is our twenty-ninth lowest possible number.\n\n62) We repeat the process once more to obtain the twenty-tenth lowest number.\n\n63) We take the average of the numbers that were reduced and it is our twenty-tenth lowest possible number.\n\n64) We repeat the process once more to obtain the twenty-eleventh lowest number.\n\n65) We take the average of the numbers that were reduced and it is our twenty-eleventh lowest possible number.\n\n66) We repeat the process once more to obtain the twenty-twelfth lowest number.\n\n67) We take the average of the numbers that were reduced and it is our twenty-twelfth lowest possible number.\n\n68) We repeat the process once more to obtain the twenty-thirteenth lowest number.\n\n69) We take the average of the numbers that were reduced and it is our twenty-thirteenth lowest possible number.\n\n70) We repeat the process once more to obtain the twenty-fourteenth lowest number.\n\n71) We take the average of the numbers that were reduced and it is our twenty-fourteenth lowest possible number.\n\n72) We repeat the process once more to obtain the twenty-fifteenth lowest number.\n\n73) We take the average of the numbers that were reduced and it is our twenty-fifteenth lowest possible number.\n\n74) We repeat the process once more to obtain the twenty-sixteenth lowest"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == '3.5'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6') == 14\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\nassert solution('5 3 6 9 1\\n5 8 7 4 2\\n8 6 3 7 5') == '34'\n\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\n\"\"\"\nclass AllYouCanEat:\n    def __init__(self):\n        self.dishes = dict()\n        self.total_score = 0\n\n    def add_dish(self, dish_num: int, score: int, after_score: int):\n        self.dishes[dish_num] = (score, after_score)\n\n    def get_total_score(self):\n        return self.total_score\n\n    def eat(self, dish_num: int):\n        score, after_score = self.dishes[dish_num]\n        self.total_score += score\n        for i in range(dish_num + 1, len(self.dishes)):\n            next_dish, (next_dish_score, _) = self.dishes[i]\n            self.total_score += next_dish_score * after_score\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == '14'\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6\\n') == '14'\n\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 5\\n3 6') == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == 14\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\nassert solution(\"ZABCDBABCQAAA\") == 4\nassert solution(\"ZABCDBABCQAAAB\") == 3\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 ZABCDBABCQ\") == \"2\"\nassert solution(\"10 ZABCDBABCQ\") == \"2\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ZABCDBABCQ\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 ABCDBABCQ\") == \"2\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2, \"WA\"\nassert solution(\"ZABCDBABC\") == 2, \"WA\"\nassert solution(\"ZABACABACABACABACABAC\") == 4, \"WA\"\nassert solution(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\") == 22, \"WA\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AAAABBBBCCCCDDDD') == '4'\nassert solution('ABBCDDDD') == '4'\nassert solution('AAA') == '3'\nassert solution('AA') == '1'\nassert solution('AAAAAAAAAABBBBBB') == '16'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"10\\n\"\n\"ZABCDBABCQ\") == 2, \"Error!\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCDBABCQ') == 2\n\n-----\n1. \u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0430 \u043f\u043e\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u043e \u0438 \u0441\u0442\u0440\u043e\u043a\u0430. \u041d\u0430\u0439\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0440\u043e\u043a\u0443."
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nMASHIKE\\nRUMOI\\nOBIRA') == '2'\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nOBIRA\\nMIXTA\\nMASHIKE\\nRUMOI\") == \"2\"\nprint(\"PASSED\")\n\nassert solution(\"5\\nRUMOI\\nMIXTA\\nMASHIKE\\nOBIRA\\nHOROKANAI\") == \"2\"\nprint(\"PASSED\")\n\nassert solution(\"4\\nMASHIKE\\nMIXTA\\nOBIRA\\nHOROKANAI\") == \"2\"\nprint(\"PASSED\")\n\nassert solution(\"3\\nOBIRA\\nMASHIKE\\nHOROKANAI\") == \"1\"\nprint(\"PASSED\")\n\nassert solution(\"7\\nMASHIKE\\nRUMOI\\nOBIRA\\nMIXTA\\nHABORO\\nHOROKANAI\") == \"1\"\nprint(\"PASSED\")"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\nimport unittest\n\nclass TestSum(unittest.TestCase):\n\n    def test_case_1(self):\n        assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n    def test_case_2(self):\n        assert solution('''3\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '0'\n    def test_case_3(self):\n        assert solution('''5\nKANJIRI\nTEMPURU\nCISANNE\nSALMOSO\nHIEMPIRE''') == '3'\n    def test_case_4(self):\n        assert solution('''2\nYAGOKI\nRUEMI\nOBIRA\nHABORO\nHOROKANAI''') == '1'\n    def test_case_5(self):\n        "
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nn = int(input())\ns = input().split()\na = [x for x in s if x.startswith(\"A\")]\nr = [x for x in s if x.startswith(\"R\")]\nc = [x for x in s if x.startswith(\"C\")]\nh = [x for x in s if x.startswith(\"H\")]\n\nsolution = 0\nfor i in a:\n    for j in r:\n        for k in c:\n            for l in h:\n                if i!= j and i!= k and i!= l and j!= k and j!= l and k!= l:\n                    solution += 1\n\nprint(solution)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stub1) == \"expected_result\"\nassert solution(stub2) == \"expected_result\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 3\\n2 3\\n1 2\\n1 3\\n') == 'Yes'\n\nassert solution('3 3\\n2 3\\n1 3\\n1 2\\n1 3\\n') == 'No'\n\nassert solution('3 3\\n3 2\\n3 1\\n2 3\\n') == 'No'\n\nassert solution('3 3\\n1 3\\n3 2\\n1 2\\n1 3\\n') == 'Yes'\n\nassert solution('5 3\\n1 3\\n1 3\\n2 3\\n1 2\\n') == 'Yes'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('3 1') == 'No'\nassert solution('4 2') == 'No'\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('2 4') == 'No'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\ninput = list(map(lambda s: s.strip(), input))\n\nn, m = map(int, input[0].split())\n\nassert 1 <= n <= 100\nassert 0 <= m <= n\n\nfor i in range(1, n + 1):\n    assert 0 <= m <= i\n\nprint('Yes')\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 1\\n1 2\\n2 3') == 'Yes'\nassert solution('2 2\\n1 1\\n2 1') == 'No'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2\\n3 1') == 'Yes'\nassert solution('5 5\\n2 3\\n4 5\\n5 2\\n3 4') == 'Yes'\nassert solution('10 10\\n1 1\\n3 3\\n5 5\\n7 7\\n9 9\\n2 2\\n4 4\\n6 6\\n8 8\\n') == 'No'\nassert solution('2 2\\n1 1') == 'Yes'\nassert solution('7 7\\n4 4\\n3 3\\n2 2\\n1 1\\n5 5') == 'No'\n\n---\n\nimport sys\n\nsys.stdin.readline().split()\nn, m = int(sys.stdin.readline().split()[0]), int(sys.stdin.readline().split()[0])\n\nfor _ in range(m):\n    if n == 0:\n        print('Yes')\n    else:\n        print('No')\n        n -= 1\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 3\\n1 3\\n\") == \"Yes\"\nassert solution(\"3 2\\n2 3\\n1 3\\n\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"5 2\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 1\\n2 1\\n3 1\\n\") == \"Yes\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"5 5\") == \"Yes\"\n\nimport sys"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sippuu') == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"puuus\") == \"No\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"soooo\") == \"No\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"adada\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nprint(solution(\"sippuu\"))\n\nassert solution(\"cappu\") == \"No\"\nprint(solution(\"cappu\"))\n\nassert solution(\"appu\") == \"Yes\"\nprint(solution(\"appu\"))\n\nassert solution(\"appu\") == \"Yes\"\nprint(solution(\"appu\"))\n\nassert solution(\"sippuu\") == \"Yes\"\nprint(solution(\"sippuu\"))"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('hmmmmm') == 'No'\nassert solution('floofy') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"rndrndrndrnd\") == \"No\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 70\n7 60\n1 80\n4 50''') == '4'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 70\n7 60\n1 80\n4 50\n\"\"\"\n) == \"4\"\n\nprint(solution(\n\"\"\"\n3 70\n7 60\n1 80\n4 50\n\"\"\"\n))\n\nassert solution(\n\"\"\"\n2 70\n1 60\n4 50\n\"\"\"\n) == \"TLE\"\n\nassert solution(\n\"\"\"\n1 70\n1 60\n4 50\n\"\"\"\n) == \"TLE\"\n\nassert solution(\n\"\"\"\n2 70\n1 60\n1 60\n\"\"\"\n) == \"TLE\"\n\nassert solution(\n\"\"\"\n3 70\n4 50\n1 60\n1 60\n\"\"\"\n) == \"TLE\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\"\"\"\n\n\"\"\"\nYou have a map of a circular road with some steps, marked with 1, 2, 3, 4, 5, and 6.\n\nThere is a starting point on the road.\n\nYou can walk for one hour in a direction (one of the 6 directions), then you must choose between two options:"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\") == \"4\"\n\ntry:\n    assert solution(\"7 60\\n1 80\\n4 50\\n\") == \"TLE\"\nexcept AssertionError as e:\n    print(f\"Assertion Error!\\n{e}\")\n    exit(1)\n\ntry:\n    assert solution(\"7 60\\n1 80\\n4 50\\n7 40\") == \"TLE\"\nexcept AssertionError as e:\n    print(f\"Assertion Error!\\n{e}\")\n    exit(1)\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 9\\n') == '8'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('1 1 1') == '0'\nassert solution('1 0 0') == '0'\nassert solution('10 10 10') == '50'\nassert solution('50 10 10') == '50'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9\\n') == '8'\nassert solution('1 3 2\\n') == '3'\nassert solution('5 5 20\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"aa\") == \"aa\"\nassert solution(\"aabb\") == \"aabb\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"aabcde\") == \"aabcde\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"acornistnt\") == \"1\"\nassert solution(\"peanutbomb\") == \"0\"\nassert solution(\"constraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('acornistnt') == 1\nassert solution('peanutbomb') == 0\nassert solution('constraint') == 1\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"acornistnt\") == 1\nassert solution(\"peanutbomb\") == 0\nassert solution(\"constraint\") == 1\n\"\"\"\n\nfrom collections import Counter\n\nn = int(stdin.readline())\nstrings = [stdin.readline().strip() for _ in range(n)]\n\nfor i in range(n):\n    strings[i] = Counter(strings[i])\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        if i!= j:\n            if strings[i] == strings[j]:\n                count += 1\n\nprint(count)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1111111111111111111111\"\n\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('112') == '1'\nassert solution('1121') == '1'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"112122$\\dots$\") == \"1\"\nassert solution(\"1121221212$\\dots$\") == \"2\"\nassert solution(\"11212212121212$\\dots$\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n3\\n20\\n38\\n56\") == \"2\\n5\\n9\\n8\"\n\"\"\"\n\nfrom math import log2, ceil\n\nstdin = open(\"./input.txt\", \"r\").read().rstrip()\nstdin = [int(x) for x in stdin.split('\\n')]\n\nq = stdin[0]\nseq = [1] + list(range(2, 1001))\n\nfor k in stdin[1:]:\n    i = seq.index(k)\n    seq = seq[:i] + [seq[i]//seq[i-1]] + seq[i+1:]\n    if len(seq) == k:\n        break\n\nseq = [int(log2(x)) for x in seq]\n\nwhile q:\n    print(seq[ceil(stdin[q+1]) - 1])\n    q -= 1\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11212312341234512345612345671234567812345678912345678910') == '1\\n2\\n5\\n2\\n0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1122334455556666777788889999') == '1'\nassert solution('123456789101112131415161718192021222324252627282930313233343536') == '3'\nassert solution('12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912112222322425262728293031323334353637383940414243444546474849505"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11223344556677\") == \"7\"\n\"\"\"\n\nfrom itertools import count\n\nq = int(input())\nfor _ in range(q):\n    k = int(input())\n    n = 0\n    for i in count(1):\n        if not i % k:\n            print(i % 10)\n            break"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\\n2\\n5\\n2\\n0\"\nassert solution(\"111$\\dots$\") == \"1\\n1\\n1\\n1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('112123123412345') == '1'\nassert solution('11212312341234512345') == '2'\nassert solution('1121231234123451234512345') == '5'\nassert solution('112123123412345123451234512345') == '2'\nassert solution('11212312341234512345123451234512345') == '0'\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2\\n1 2 1 1 2'\n\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1 2'\nassert solution('1 2\\n3 4') == '1 2 1 2 3 4'\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 4\\n4 3\\n3 5\\n3 6\") == \"2\\n1 1 2 3 2 3 1 3 1\"\nassert solution(\"4 2\\n1 4\\n4 3\\n3 5\\n3 6\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n8 9\\n8 10\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 4\\n2 3\\n3 5\\n\") == \"1 2 1 1 2\"\nassert solution(\"5 2\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 5\\n3 6\\n5 2\\n\") == \"1 2 1 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n2 4\") == \"2\"\nassert solution(\"1 3\\n2 4\\n5 6\") == \"2\"\nassert solution(\"1 3\\n2 4\\n5 6\\n7 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3 1 1 1 2 1 3 1 1 1 2 1 3 2 3 2 1 3 2 3 1 1 1 2 2 1 3 3 1 1 1 3 2 1 1 2 1 1 2 2 3 1 2 3 1 3 1 1 2 2 2 2 2 1 2 2 1 1 1 2 1 1 1 1 2 2 1 3 3 1 3 1 1 1 2 2 1 1 2 3 1 1 1 2 2 2 2 1 2 1 1 1 3 1 1 1 2 1 1 1 1 1 2 1 1 2 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 2 1 2 2 2 1 2 3 2 1 1 2 3 2 1 1 2 2 3 1 1 1 1 1 2 1 1 1 1 2 2 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 2 1 1 1 1 1 2 2 1 2 1 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2', 'wrong result'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9''') == '3', 'wrong result'\n'''\n\nSample test(s)\n\nInput\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\nOutput\n2\n1 2 1 1 2 \n\nInput\n4 2\n3 1\n1 4\n1 2\n\nOutput\n1\n1 1 1 \n\nInput\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\nOutput\n3\n1 1 2 3 2 3 1 3 1\n\nInput\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\nOutput\n2\n1 2 1 1 2 \n\nInput\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\nOutput\n3\n1 1 2 3 2 3 1 3 1\n'''\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2\\n1 2 1 1 2'\n\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'\n\nassert solution('''\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3\\n1 1 2 3 2 3 1 3 1'\n\nassert solution('''\n5 2\n3 1\n1 4\n1 2\n2 5\n''') == '1\\n1 1 1'\n\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\nx_max = max(arr)\nx_min = 1\nmin_occ = 0\nmax_occ = 0\nfor i in range(n):\n    if arr[i] == x_max:\n        min_occ += 1\n    elif arr[i] == x_min:\n        max_occ += 1\n    elif arr[i] > x_min:\n        if arr[i] > x_max:\n            max_occ += 1\n        else:\n            min_occ += 1\nprint(min_occ, max_occ)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 4\") == \"2 4\"\nassert solution(\"1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7 4 3 1 4 3 3\") == \"3 6\"\n\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 4\") == '2 4'\nassert solution(\"5\\n1 1 3 4 4\") == '3 8'\n\nassert solution(\"9\\n4 3 7 1 4 3 3\") == '3 6'\nassert solution(\"7\\n4 3 7 1 4 3 3\") == '3 6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 4 4\") == \"2 4\"\nassert solution(\"9 1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7 4 3 1 4 3 3\") == \"3 6\"\n\n\"\"\"\n\nimport collections\n\nN = int(stdin.readline())\ncoordinates = [int(x) for x in stdin.readline().split()]\n\ndeq = collections.deque(coordinates)\ndeq.appendleft(0)\ndeq.append(N+1)\noccupied = []\nwhile deq:\n    cur = deq.popleft()\n    occupied.append(cur)\n    for i in range(-1, 2):\n        if cur + i > 0 and cur + i <= N and cur + i not in deq:\n            deq.appendleft(cur + i)\n\noccupied.sort()\nprint(occupied[0], occupied[-1])"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\n\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '2 4'\nassert solution('4 4 4') == '2 4'\nassert solution('1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7 1 4 3 3') == '3 6'\nassert solution('7 4 3 1 4 3') == '3 6'\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == '3 2 4 1 5'\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3 3\\n1 1\\n2 2') == '1 2 3'\nassert solution('2 10\\n1 1\\n2 2') == '2 1'\nassert solution('3 5\\n3 4\\n1 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('2 10\\n1 1\\n2 2') == '2 1'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2 3\\n3 1\") == \"3 1 2\"\nassert solution(\"4 2\\n2 3\\n1 1\") == \"1 2 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3\\n1 2\\n1 2') == '3 2 1 2'\nassert solution('5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n1 2\\n1 2') == '3 1 2'\nassert solution('4\\n1 3\\n2 3\\n1 4\\n2 4') == '3 1 4 2'\nassert solution('3\\n1 1\\n1 1') == '3 1 1'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3\\n3 1\\n1 2\\n\") == \"3 1 2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2\\n') == '3 1 2'\nassert solution('7\\n3 6\\n1 5\\n4 7\\n1 2\\n4 3\\n2 5\\n6 7\\n') == '3 1 4 7 2 6'\nassert solution('6\\n4 7\\n1 5\\n2 6\\n3 7\\n1 4\\n2 5\\n3 6\\n') == '4 2 3 1 7 5 6'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\nassert solution('''3\n2 3\n3 1\n1 2''') == '3 1 2'\nassert solution('''3\n1 2\n3 1\n2 3''') == '3 1 2'\nassert solution('''3\n1 2\n2 3\n1 3''') == '3 1 2'\nassert solution('''3\n2 1\n3 1\n2 3''') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == 3\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '10'\nassert solution('''\n6\n1 1000 10000 10 100 1000000000\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('123') == '3'\nassert solution('123 123') == '0'\n\"\"\"\nfrom collections import Counter\n\nstdin = open(0).read().split('\\n')\na = list(map(int, stdin[1].split()))\n\ns = sorted(Counter(a).items(), key=lambda x: x[1], reverse=True)\na = [k for k, v in s]\n\nprint(a[0] if len(a) > 0 else 0)\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 17 12 15 2\") == \"3\"\nassert solution
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"5\\n3 5 4 2 1\") == \"3\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"2\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n1 1000 10000\") == \"1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3\") == \"2\"\nassert solution(\"10 5 3 2\") == \"2\"\nassert solution(\"15 5 3 2\") == \"2\"\nassert solution(\"15 5 4 3\") == \"-1\"\nassert solution(\"15 5 2 1\") == \"2\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n15 5 3 2\") == '4'\nassert solution(\"3\\n5 2 1\") == '-1'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution(\"2 5 2 2\\n3 1 2 2\\n3 3 4 1\\n2 2 3 3\\n1 3 4 1\") == '-1\\n0'\nassert solution(\"10 2 4 2\\n10 2 6 2\\n10 10 10 10\\n10 4 1 1\\n10 3 4 2\\n10 10 1 2\\n10 10 3 2\\n10 10 3 3\\n10 4 3 3\\n10 10 4 2\\n10 10 4 2\\n10 10 4 3\\n10 10 5 4\\n10 10 5 4\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\n10 10 5 5\\"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5\\n2\\n0\\n1'\nassert solution('5 2 3 2\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '-1\\n5\\n5\\n5\\n5'\nassert solution('5 2 3 2\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '-1\\n5\\n5\\n5\\n5'\n\"\"\"\n\nimport sys\n\ntests = int(sys.stdin.readline().strip())\n\nfor _ in range(tests):\n    battery, turns, a, b = map(int, sys.stdin.readline().strip().split())\n    if battery < a:\n        print(-1)\n    elif battery < b:\n        print(turns)\n    else:\n        print(0)\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15 5 3 2\") == '4'\nassert solution(\"15 5 4 3\") == '-1'\nassert solution(\"15 5 2 1\") == '5'\nassert solution(\"15 5 5 1\") == '2'\nassert solution(\"16 7 5 2\") == '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a?b?c\") == \"16\"\nassert solution(\"a???c\") == \"2835\"\nassert solution(\"a??b?c\") == \"27\"\nassert solution(\"a??c?b\") == \"26\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ac?b?c') == '24'\n\nassert solution('???????') == '2835'\nassert solution('a???c') == '46'\nassert solution('cccbbbaaa') == '0'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a??c\") == \"2835\"\nassert solution(\"????????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\nassert solution(\"a???c\") == \"46\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('ac???c') == 24\nassert solution('ac?b??c') == 24\nassert solution('ac??b??c') == 24\nassert solution('ac?b?c?') == 24\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('cccbbbaaa') == 0\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('ac?b?c'), 24)\n        self.assertEqual(solution('???????'), 2835)\n        self."
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\nassert solution(\"a???c\") == \"46\"\nassert solution(\"abc\") == \"3\"\n\n\n\n\n---"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\n\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('a???c') == '46'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\nassert solution(\"5 3\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\") == \"16\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5''') == '5'\nassert solution('''4 0\n1 3 3 7''') == '16'\nassert solution('''5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15''') == '18'\n\n'''"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\") == \"5\"\n\nassert solution(\"\"\"4 0\n1 3 3 7\n\"\"\") == \"16\"\n\nassert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\"\"\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"16\"\nassert solution(\"1 2 8\") == \"12\"\nassert solution(\"1 3 10\") == \"10\"\nassert solution(\"1 4 7\") == \"10\"\nassert solution(\"1 5 15\") == \"15\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5\n2 1 1''') == '5'\n\nassert solution('''4 0\n1 3 3 7\n''') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\nassert solution(\"10 1 1\\n0 9\\n9 5\\n\") == \"25\"\nassert solution(\"10 1 1\\n0 9\\n9 5\\n\") == \"25\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 4\\n1 2\\n2 3\\n3 4\") == \"14\"\nassert solution(\"4 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"4 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '14'\nassert solution('1 2 3 4 5 6 7 8 9') == '-1'\nassert solution('1 2 3 4 5 6 7') == '45'\n\"\"\"\n\n\"\"\"\nThe idea is to process the input and collect information about the rain.\n\nAs we do not care about the points of falling rain, we can use a set to keep only the unique rain points.\n\nThe set `rain_points` contains all rain points, the key is a rain point and the value is a list of segments.\n\"\"\"\n\nrain_points = dict()\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\"\"\"\n) == \"14\"\nassert solution(\n\"\"\"\n10 1 1\n0 9\n0 5\n\"\"\"\n) == \"-1\"\n\n\"\"\"\n[-1]\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == '14'\nassert solution(\n'''\n10 1 1\n0 9\n0 5\n''') == '45'\nassert solution(\n'''\n10 1 1\n0 9\n1 5\n''') == '-1'\nassert solution(\n'''\n10 1 1\n0 9\n1 5\n''') == '-1'\nassert solution(\n'''\n10 1 1\n0 9\n1 5\n''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 1 1 0 9 0 5 1') == '-1'\nassert solution('10 2 4 3 7 8 10 3 4') == '14'\n\"\"\"\n\nimport math\n\na, n, m = [int(x) for x in input().split(' ')]\n\nlst = [int(x) for x in input().split(' ')]\n\nd = {}\n\nfor i in range(n):\n    l, r = [int(x) for x in input().split(' ')]\n    if l in d:\n        d[l].append(r)\n    else:\n        d[l] = [r]\n    if r in d:\n        d[r].append(l)\n    else:\n        d[r] = [l]\n\numbrellas = {}\n\nfor i in range(m):\n    x, p = [int(x) for x in input().split(' ')]\n    umbrellas[x] = p\n\nf = {}"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\n\"\"\"\n\na, b, c = [int(i) for i in stdin.split(\" \")]"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 5\") == 'Yes'\nassert solution(\"1 2 2\") == 'No'\nassert solution(\"4 4 6\") == 'No'\n\n-------"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5\\n') == \"Yes\"\nassert solution('7 7 7\\n') == \"No\"\n\"\"\"\n\nA, B, C = map(int, stdin.split())\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 6 7\") == \"No\"\nassert solution(\"4 7 7\") == \"No\"\nassert solution(\"5 5 5\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2') == 'Yes'\nassert solution('5 1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"2 1 2\") == \"Yes\"\nassert solution(\"3 1 3\") == \"No\"\nassert solution(\"4 1 4\") == \"Yes\"\nassert solution(\"5 1 5\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 5 7\") == \"No\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == '1'\nassert solution(\"3\\n25 85\\n34 92\\n80 150\") == '2'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n12 5\\n1000 2000\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(3000)\n\ninp = sys.stdin.readlines()\nN = int(inp[0])\nT, A = map(int, inp[1].split())\nH = list(map(int, inp[2].split()))\n\nH.sort()\n\nmin_d = 1000"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12 5\\n1000 2000 3000 4000 5000') == '1'\n\"\"\"\n\nfrom collections import OrderedDict\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nprint(\"Passed.\")\n\n---"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '0'\nassert solution('2 2\\n3 4') == '1'\nassert solution('3 2\\n1 2 2') == '1'\nassert solution('1 2\\n3 4\\n5 6') == '0'\n\"\"\"\n\nimport sys\n\nA, T = map(int, sys.stdin.readline().split())\n\nh = list(map(int, sys.stdin.readline().split()))\n\nd = []\nfor i, _ in enumerate(h):\n    d.append((i, A - _ * 0.006))\n\nd.sort(key=lambda x: x[1])\n\nprint(d[0][0])\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 12 1000 2000\") == \"1\"\n'''"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == 1\nassert solution(\"5 3\") == 2\nassert solution(\"3 5\") == 0\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('N M\\n1 2\\n') == '1'\nassert solution('N M\\n1 2\\n3 4\\n') == '1'\n\"\"\"\n\n\"\"\"\nLet's assume that the first N balls are even. Then the numbers on the next M balls are odd.\n\nIn fact, there are C(N, 2) combinations of N balls, where the first ball is even and the second one is odd.\nSo the number of ways for choosing the first ball is C(N, 2). \nIf we assume that the first ball is odd, we can reduce the number of ways of choosing the first ball from C(N, 2) to C(N - 1, 2) by 1.\n\nThus, the number of ways for choosing the first ball is C(N, 2) + C(N - 1, 2).\n\nSimilar conclusions apply to the second ball.\n\nThe total number of ways is the product of C(N, 2) + C(N - 1, 2) + C(N - 2, 2) +... + C(1, 2) + C(0, 2).\n\nThis expression is simply the binomial coefficient 2N.\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n') == 1\n\n------\n|  |\n----\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is odd;\n - If we choose the two balls with 1 and 4, the sum is odd;\n - If we choose the two balls with 2 and 4, the sum is even.\nThus, the answer is 1.\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '1'\nassert solution('2 1') == '0'\nassert solution('2 2') == '1'\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1\n''') == '1'\n\nassert solution('''3 2\n''') == '2'\n\nassert solution('''3 2\n''') == '2'\n\nassert solution('''1 10\n''') == '0'\n\nassert solution('''4 2\n''') == '1'"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == 1\n\"\"\"\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 4\") == \"0\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACTACG\", 3, 7) == 2\nassert solution(\"ACTACG\", 3, 3) == 0\nassert solution(\"ACTACG\", 3, 2) == 3\n\"\"\"\n\n\n\nclass Solution:\n    # @param A : string\n    # @param B : list of integers\n    # @return a strings\n    def solve(self, A, B):\n        res = 0\n        for i in range(len(B)):\n            l = B[i]\n            r = B[i+1]\n            cur_str = A[l:r]\n            res += cur_str.count(\"AC\")\n        return res\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ACACTACG', 3, 7) == '2'\nassert solution('ACACTACG', 3, 3) == '0'\nassert solution('ACACTACG', 3, 1) == '3'\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ACACTACG') == 2\nassert solution('ACTACG') == 0\nassert solution('CATGCATG') == 3\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"GACTACG\") == \"1\"\nassert solution(\"ACTACG\") == \"0\"\nassert solution(\"GGGACTACG\") == \"3\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ACACTACG') == '2'\nassert solution('ATCODER') == '5'\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ACACTACG') == '2'\nassert solution('TTTAAACCAATCAGCTAATC') == '3'\nassert solution('TTTAAACCAATCAGCTAATC') == '3'\nassert solution('TTTAAACCAATCAGCTAATC') == '3'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('AC') == 'AC'\nassert solution('AG') == 'AC'\nassert solution('AT') == 'AT'\nassert solution('CG') == 'CC'\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str_a) == \"2\\n0\\n3\"\nassert solution(str_b) == \"1\\n1\\n0\"\nassert solution(str_c) == \"2\\n0\\n3\"\nassert solution(str_d) == \"2\\n1\\n1\"\nassert solution(str_e) == \"1\\n1\\n0\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == \"ACTAC\"\nassert solution(\"ACACTACG\", 2, 3) == \"CA\"\nassert solution(\"ACACTACG\", 1, 8) == \"ACACTACG\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ACACTACG', 3, 7) == '2'\nassert solution('ACACTACG', 3, 0) == '0'\nassert solution('ACACTACG', 8, 3) == '3'\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == '210'\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\n'''\n\nN, K = [int(n) for n in stdin.readline().split()]\n\nnums = [int(n) for n in stdin.readline().split()]\n\narr = []\nfor i in range(1, N+1):\n    for j in range(K):\n        if i == j:\n            continue\n        else:\n            arr.append(i * nums[j])\n\nprint(min(arr))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n10 20 30 40\\n\") == \"60\"\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"6\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"9\"\n\"\"\"\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == 210\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().strip().split())\nprices = list(map(int, sys.stdin.readline().strip().split()))\n\ntotal = 0\nfor _ in range(K):\n    total += min(prices)\n    prices.remove(min(prices))\n\nprint(total)\n\n\"\"\"\npython3 shop.py < shop.txt\n5 3\n50 100 80 120 80\n210\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"1 3 4\"\n) ==\n\"4\"\nassert solution(\n\"3 1 3\"\n) ==\n\"7\"\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == 4\nassert solution('2 3 4') == 7\nassert solution('3 3 4') == 7\nassert solution('5 5 4') == 10\nassert solution('1 3 6') == 9\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('2 5 2') == '3'\nassert solution('4 1 1') == '4'\n\n-------------"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == '4'\n\n-----------\nYou are given a graph with n vertices and m edges.\nEach vertex is described by an integer between 1 and n.\nThere is an edge between the vertices with IDs a and b if and only if a and b share a common factor greater than 1.\nFor example, there is an edge between vertices 1 and 2, because 2 and 4 share the factor 2.\n\nWrite a function that computes for each vertex v the number of edges that are incident to v.\n\n-----Constraints-----\n - n \\geq 1\n - 1 \\leq m \\leq n(n-1)/2\n - Each vertex is described by an integer between 1 and n.\n\n-----Input-----\nThe first line of the input contains one integer t (1 \\leq t \\leq 100) \u2014 the number of test cases.\n\nEach of the next t lines contains two integers n and m (1 \\leq n,m \\leq n(n+1)/2) \u2014 the number of vertices and the number of edges, respectively.\n\n-----Output-----\nPrint the number of edges incident to each vertex.\n\n-----Sample Input-----\n5\n4 2\n1 1\n2 1\n1 3\n2 3\n\n-----Sample Output-----\n1\n0\n3\n2\n3\n\n-----------\nYou are given an unweighted, directed graph consisting of m vertices and n edges.\n\nWrite a function that can find all of its vertices k in O(m + n lg(n)) time.\n\nFor example, consider the following graph:\n\n0---1\n| \\  |\n|  \\ |\n4-3-2\nThe vertices in a graph are its edges.\n\nYour function should return the list [0, 1, 2, 3, 4].\n\n-----------\nYou are given a directed graph with n vertices and m edges.\n\nWrite a function that returns a list of all its vertices.\n\nYou can assume that the graph may have vertices with a number of edges greater than 1.\n\n-----------\nYou are given a directed graph with n vertices and m edges.\n\nWrite a function that returns a list of all its vertices in the ascending order of their degrees.\n\nIf there are several vertices with the same degree, they must appear in the returned list in the order of their occurrence in the initial array.\n\nYou can assume that the graph may have vertices with a number of edges greater than 1.\n\n-----------\nYou are given a directed graph with n vertices and m edges.\n\nWrite a function that computes the minimum spanning tree of this graph.\n\nIt should return an integer that represents the sum of all edges that do not belong to the minimum spanning tree.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum distance between each vertex of this graph and returns the minimum distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the diameter of this graph.\n\nIt should return the maximum distance between any two vertices in the graph.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the average distance between each vertex of this graph and returns the average distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the number of connected components and returns the number of connected components.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\nIt should return a list of edges to add.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the maximum of the lengths of all simple paths between each pair of vertices.\n\nA simple path is a path that does not pass through any vertex more than once.\n\nIf there are no simple paths, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between two of its vertices.\n\nIf there is no path between two given vertices, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between any two vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum distance between each vertex of this graph and returns the minimum distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the diameter of this graph.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the average distance between each vertex of this graph and returns the average distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the number of connected components and returns the number of connected components.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the maximum of the lengths of all simple paths between each pair of vertices.\n\nA simple path is a path that does not pass through any vertex more than once.\n\nIf there are no simple paths, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between two of its vertices.\n\nIf there is no path between two given vertices, the function should return -1.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the length of the longest simple path between any two vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum number of edges to be added to this graph to connect all its vertices.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the minimum distance between each vertex of this graph and returns the minimum distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the diameter of this graph.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes the average distance between each vertex of this graph and returns the average distance.\n\n-----------\nYou are given an undirected graph with n vertices and m edges.\n\nWrite a function that computes"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 1 4\") == \"7\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\n\n-----\n\nfrom sys import stdin"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\". 1 3 4\") == '4'\nassert solution(\"1 3 4\") == '4'\nassert solution(\"1 3 2\") == '6'\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\n\"\"\"\n- P, Q, R: 1 \\leq P,Q,R \\leq 100\n- all values in input are integers\n- read a single line of input containing three integers P, Q, and R\n\n- compute the sum of the flight times\n- compute the minimum possible sum of the flight times\n- print the minimum possible sum of the flight times\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\nassert solution(\"4 3 2\") == \"7\"\n\nassert solution(\"10 9 7\") == \"19\"\n\nassert solution(\"100 99 98\") == \"198\"\n\nassert solution(\"3 6 9\") == \"12\""
    }
]