[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '1 4 3'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\nfrom queue import Queue"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == '5\\n1 8 6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '5\\n1 5 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('12\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n5 8\\n6 9\\n7 10\\n7 11\\n8 12\\n11 13\\n10 14\\n14 15\\n13 16\\n12 17\\n17 18\\n16 19\\n18 20') == '5\\n1 20 14 6'\nassert solution('20\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n5 8\\n6 9\\n7 10\\n7 11\\n8 12\\n8 13\\n9 14\\n10 15\\n10 16\\n11 17\\n11 18\\n12 19\\n12 20\\n13 21\\n13 22\\n14 23\\n15 24\\n15 25\\n16 26\\n17 27\\n17 28\\n18 29\\n18 30\\n19 31\\n20 32\\n20 33') == '5\\n1 32 14 20 33 7'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"5\"\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n1 6\") == \"5\"\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n5 1\") == \"6\"\n\n\"\"\"\n\nimport sys\nimport math\n\n\nclass Tree:\n    def __init__(self, n):\n        self.n = n\n        self.edges = list()\n\n    def add_edge(self, a, b):\n        self.edges.append((a, b))\n\n    def n_edges(self):\n        return len(self.edges)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7') == '5\\n1 7 6'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6') == '5\\n1 6 4'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7') == '5\\n1 7 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n') == '5\\n1 8 6'\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 1 2 4 1 5 4 8 1 20 4 5\") == \"20 8\"\nassert solution(\"10 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n2\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n3\\n2\\n1\\n2\\n1\\n3\\n1\\n3\\n2\\n1\\n1\\n2\\n2\\n1\\n3\\n1\\n3\\n1\\n2\\n1\\n3\\n1\\n3\\n1\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n3\\n3\\n3\\n3\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n3\\n3\\n3\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n2\\n3\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n3\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n3\\n2\\n1\\n3\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n3\\n1\\n3\\n2\\n1\\n2\\n3\\n1\\n1\\n1\\n2\\n2\\n3\\n1\\n2\\n1\\n2\\n1\\n2\\n2\\n3\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n2\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n3\\n1\\n3\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1\\n3\\n2\\n3\\n1\\n2\\n1\\n3\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n2\\n1\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n2\\n3\\n1\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n3\\n1\\n2\\n2\\n3\\n1\\n3\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n3\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n3\\n1\\n3\\n1"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '2 1'\nassert solution('2\\n3') == '3 2'\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n4 1 2 3') == '1 2 4'\nassert solution('6\\n6 1 2 3 4 5 6') == '1 2 3 6 4 5'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n2 8 1 2 4 1 20 4 5\") == '20 8'\n\nassert solution(\"4\\n1 4\") == '4 1'\nassert solution(\"6\\n1 2 3 6 2 1\") == '3 6'\nassert solution(\"8\\n1 2 2 3 4 5 6 7 8\") == '8 1'\nassert solution(\"10\\n2 8 1 2 4 1 20 4 5\") == '20 8'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 8\\n') == '20 8'\nassert solution('10 8\\n') == '20 8'\n\n-----Question-----\n\nhttps://codeforces.com/problemset/problem/1411/B\n'''"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\nfrom typing import List\n\nn, m, k = [int(i) for i in stdin.readline().split()]\nmatrix = [[int(j) for j in stdin.readline().split()] for _ in range(n)]\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4'\n) == '24'\nassert solution(\n    '5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6'\n) == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\"\"\") == \"56\"\nassert solution(\"\"\"3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\"\"\") == \"24\"\nassert solution(\"\"\"1 2 3 4\n5 2 2 2\n7 1 1 4\"\"\") == \"0\"\nassert solution(\"\"\"5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\"\"\") == \"56\"\n\n\"\"\"\nimport sys\n\nn, m, k = [int(i) for i in sys.stdin.readline().strip().split(' ')]\na = [list(map(int, sys.stdin.readline().strip().split(' '))) for _ in range(n)]\n\nimport itertools\nfrom fractions import Fraction"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 5 4') == '56'\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\nassert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == '24'\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == '56'\n\n-----\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 3 5 6 5 4 2\") == \"LRLRRR\"\nassert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"LRLRRR\"\nassert solution(\"6\\n1 3 5 6 5 4 2\") == \"LRLRRR\"\nassert solution(\"4\\n1 2 4 3\") == \"LLRR\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 4 3 2') == 4\nassert solution('7\\n1 3 5 6 5 4 2') == 6\nassert solution('3\\n2 2 2') == 1\nassert solution('4\\n1 2 4 3') == 4\nassert solution('5\\n1 2 4 3 2') == 4\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str([1, 2, 4, 3, 2])) == 4\nassert solution(str([1, 2, 3, 4])) == 2\nassert solution(str([1, 2, 3])) == 3\nassert solution(str([2, 2, 2])) == 1\nassert solution(str([2, 4, 3, 2])) == 4\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2') == 'L'\nassert solution('1 2 4 3 2') == 'LRRR'\n'''\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 2') == '1\\nR'\nassert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR', solution('5\\n1 2 4 3 2')\n\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR', solution('7\\n1 3 5 6 5 4 2')\n\nassert solution('3\\n2 2 2') == '1\\nR', solution('3\\n2 2 2')\n\nassert solution('4\\n1 2 4 3') == '4\\nLLRR', solution('4\\n1 2 4 3')\n\nassert solution('8\\n1 2 3 4 5 6 7 8') == '7\\nLRLRLRLRLR', solution('8\\n1 2 3 4 5 6 7 8')"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == '4\\nLRRR'\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"2\", \"8\"]) == \"3\"\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nd = {}\n\nfor i in a:\n    d[i] = False\n\nm = int(input())\n\nfor i in range(m):\n    x, y = input().split()\n    x = int(x)\n    y = int(y)\n    if d[x]:\n        d[x] = False\n    if d[y]:\n        d[y] = False\n    d[x] = True\n    d[y] = True\n\nfor i in d.values():\n    if i:\n        print(-1)\n        break\nelse:\n    print(max(d.keys()) - min(d.keys()))"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 5 2 5\") == 3\nassert solution(\"4\\n1 3 3 7\") == -1\nassert solution(\"6\\n1 4 4 7 4 1\") == 3\nassert solution(\"6\\n2 2 5 2 5\") == 3\nassert solution(\"6\\n2 8\") == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 5 2 5\") == 3\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n\n\"\"\"\n\nfrom typing import Iterable"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n4 9') == '3'\nassert solution('2 5 7 2 5\\n2 3 4 5 6') == '3'\nassert solution('5 4\\n1 3 3 7 4') == '3'\nassert solution('1 4\\n1 4') == '-1'\nassert solution('1 3\\n1 2') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2 4 1') == 3\nassert solution('6 6 6 8 6') == -1\nassert solution('1 2 1 1 1') == 2\nassert solution('1 3 2 3 1') == 3\nassert solution('4 7 5 2 4') == 4\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 4 4 7 4 1\n''') == '3'\nassert solution('''\n5\n2 2 5 2 5\n''') == '3'\nassert solution('''\n4\n1 3 3 7\n''') == '-1'\nassert solution('''\n2\n2 8\n''') == '3'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\n\nprint(solution('2 2 4 4'))\nassert solution('2 2 4 4') == 'NO'\n\nprint(solution('3 1 7 5'))\nassert solution('3 1 7 5') == 'YES'\n\nprint(solution('5 2 10 5'))\nassert solution('5 2 10 5') == 'YES'\n\nprint(solution('0 0 1000000 1000000'))\nassert solution('0 0 1000000 1000000') == 'YES'\n\nprint(solution('0 0 499999 1000000'))\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2 4 4\n1 1 3 5\n3 1 5 5''') == 'NO'\nassert solution('''3 3 7 5\n0 0 4 6\n0 0 7 4''') == 'YES'\nassert solution('''5 2 10 5\n3 1 7 6\n8 1 11 7''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000''') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 7 6\\n8 1 11 7') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000') == 'YES'\nassert solution('5 2 10 5\\n0 0 10 10') == 'NO'\nassert solution('2 2 4 4\\n1 1 3 5') == 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 4 4\n1 1 3 5\n3 1 5 5''') == 'NO'\nassert solution('''5 2 10 5\n3 1 7 6\n8 1 11 7''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000''') == 'YES'\n\n'''\n'''\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1098) == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\n\"\"\"\n\nfrom typing import Dict, List\n\nclass Solution:\n    def solution(self, n: str) -> int:\n        def f(x: int) -> int:\n            if x == 0: return 1\n            x += 1\n            while x % 10 == 0:\n                x //= 10\n            return x\n\n        count: Dict[int, int] = {}\n        for x in range(1, int(n) + 1):\n            for y in range(x):\n                count[x] = count.get(x, 0) + 1\n                count[f(x)] = count.get(f(x), 0) + 1\n\n        return sum(1 for x in count.values() if x >= 2)"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('100') == 101\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1098') == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n\"\"\"\nimport math"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1098) == 20\nassert solution(10) == 19\n\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('10099') == 20\nassert solution('100') == 19\nassert solution('101') == 20\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n5\\n0\\n2\\n4\\n') == '5\\n3\\n1\\n2\\n4'\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\n\n-----\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\nassert solution('''5\n2 1 0 0 0''') == '2 1 4 5 3'\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test1) == '5 1 2 3 4'\nassert solution(test2) == '7 1 4 2 3 6 5'\nassert solution(test3) == '7 4 2 3 6 5 1'\nassert solution(test4) == '7 4 2 3 6 5 1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(textwrap.dedent(\"\"\"\\\n    5\n    5 0 0 2 4\n    \"\"\")) == \"5 3 1 2 4\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    7\n    7 0 0 1 4 0 6\n    \"\"\")) == \"7 3 2 1 4 5 6\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    7\n    7 4 0 3 0 5 1\n    \"\"\")) == \"7 4 2 3 6 5 1\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    5\n    2 1 0 0 0\n    \"\"\")) == \"2 1 4 5 3\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    5\n    1 0 0 0\n    \"\"\")) == \"1 4 5 2 3\"\n\n\"\"\"\n- 6 friends\n- each friend want to give a gift to a friend\n- each friend can give a gift to himself\n- if the friend don't know whom he want to give a gift to then he don't want to give a gift to anybody\n\n1 1 1 1\n2 1 1 2\n3 1 1 2\n4 1 2 1\n5 1 2 2\n6 1 2 3\n\n1 2 3 4 5 6\n\nn = 6\nf = [0, 2, 1, 1, 3, 4]\n0 0 0 0 2 2 1\n0 0 2 2 1 1 0\n0 2 1 1 1 0 2\n0 1 1 2 1 2 0\n0 1 2 2 1 0 3\n2 1 2 0 3 0 1\n\n0 0 0 2 2 1\n0 0 2 2 1 1\n0 2 1 1 1\n0 1 1 2 1\n0 1 2 2 1\n2 1 2 0 3\n0 1 2 2 1 0\n2 1 2 0 3 0\n\n[0, 2, 1, 1, 3, 4]\n[2, 1, 1, 3, 4, 1]\n[2, 3, 1, 4, 1, 1]\n[2, 3, 4, 1, 1, 1]\n[2, 4, 1, 1, 3, 1]\n[2, 4, 1, 3, 1, 1]"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\nassert solution('''5\n2 1 0 0 0''') == '2 1 4 5 3'\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n1 1 2 1 2\") == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 2 3') == 'YES'\nassert solution('3 2 1 2 3') == 'YES'\nassert solution('2 1 1 2 1') == 'NO'\nassert solution('3 2 1 2 3') == 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n1 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n1 2 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('5 2\\n1 2 1 2 1') == 'YES\\n1 1 2 2 1'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 2'\nassert solution('5 2\\n3 2 2 3 2') == 'NO'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\nn, x, y = [int(x) for x in stdin.split(\" \")]\n\ncount = 0\n\nwhile x > 0 and y > 0:\n    if n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = (n + 1) / 2\n    else:\n        n = 0\n\n    if n % 10 == 1:\n        n = (n * 10) + 9\n    elif n % 10 == 0:\n        n = n / 10\n        count += 1\n    else:\n        n = (n * 10) + 1\n        count += 1\n\n    x -= 1\n    y -= 1\n\nprint(count)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(11, 5, 2) == 1\nassert solution(11, 5, 1) == 3\n\"\"\"\n\nfrom typing import List\n\nfrom helpers import print_assert\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''11 5 2\n11010100101''') == '1'\nassert solution('''11 5 1\n11010100101''') == '3'\nassert solution('''11 6 2\n110101001010''') == '1'\nassert solution('''11 6 1\n110101001010''') == '4'\n\nassert solution('''2 2 1\n01010\n''') == '2'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 2\") == \"YES\"\nassert solution(\"3\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"3\\n1 3 2\") == \"NO\"\nassert solution(\"3\\n1 3 3\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n2\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"5\\n2\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n\n\"\"\"\n\nimport math\nfrom itertools import combinations\nimport sys\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\\nNO\\nNO\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\\nNO\\nNO\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\\nNO\\nNO\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"5\\n2\\n1 1 2\\n4\\n1 2 2 1\\n3\\n1 1 2\\n4\\n1 2 2 1\\n\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"5\\n3\\n1 2 1\\n4\\n1 2 2 1\\n3\\n1 2 2 1\\n\") == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n\") == 'YES\\nNO'\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'NO\\nNO\\nYES\\nYES\\nNO'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nNO\\nNO'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nNO\\nYES'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nNO\\nNO'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 5 3 4 7\") == \"1 4 4 3 3 3 3\"\nassert solution(\"5 5 2 9 8 3\") == \"5 5 2 9 8 3\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"22\") == \"22\"\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0435\u0432\u044f\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0438 \u0442\u0440\u0438 \u043a\u043b\u0435\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0430\u043b\u0435\u0439. \u0414\u0430\u043d\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0432 \u043a\u043b\u0435\u0442\u043a\u0430\u0445, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u043a\u0430\u043a\u043e\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0432 \u043a\u043b\u0435\u0442\u043a\u0438, \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0432\u043d\u0430\u044f \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0432 \u043e\u0434\u043d\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u0432\u0441\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0443\u044e \u043a\u043b\u0435\u0442\u043a\u0443, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0435\u0439.\n\n-----Input-----\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0435\u0442\u043e\u043a $n \\in [0; 10]$ (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0435\u0442\u043e\u043a \u0440\u0430\u0432\u043d\u043e\u0435 0 \u0438\u043b\u0438 10), \u0438 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u044b\u0445 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435 \u0447\u0438\u0441\u0435\u043b:\n\n$a_1, \\, a_2, \\, a_3$ ($1 \\le a_1, \\, a_2, \\, a_3 \\le 9$).\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u0435\u0442\u0430\u043b\u0435\u0439.\n\n-----Examples-----\nInput\n5\n1 1 1 1\n1 1 1 1\nOutput\n2\nInput\n1\n9\nOutput\n1\n\"\"\"\n\na, b, c = map(int, input().split())\nprint((a+b+c)//3)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4\\n1337'\n) == '1553'\nassert solution(\n    '5\\n11111'\n) == '99999'\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1337') == '1553'\nprint(solution('4\\n1337'))"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1337\") == \"1553\"\nassert solution(\"5\\n11111\") == \"99999\"\nassert solution(\"2\\n33\") == \"33\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\n1337\n1 2 5 4 6 6 3 1 9\n\"\"\") == \"1557\"\nassert solution(\"\"\"5\n11111\n9 8 7 6 5 4 3 2 1\n\"\"\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    a,b,c = map(int, input().split())\n    c1 = c//a\n    c2 = c//b\n    a1 = a//b\n    a2 = a//c\n    b1 = b//c\n    b2 = b//a\n    if a1<=c2<=a2 or a1<=b2<=a2 or c1<=b2<=c2:\n        print(2)\n        print(c,a,b)\n    elif b1<=a2<=b2 or b1<=c2<=b2 or a1<=c2<=b2:\n        print(1)\n        print(c,b,a)\n    else:\n        print(0)\n        print(a,b,c)"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123 321 456') == '1\\n1 1 3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\nprint(\"Passed\")\n\n----------------------------------------"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"102\"\nassert solution(\"5 10 15\") == \"4\"\nassert solution(\"15 18 21\") == \"4 8 16\"\nassert solution(\"100 100 101\") == \"7\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"\"\"1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\"\"\"\n\nprint(solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\"))\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"123 321 456\"\n) == \"1 1 3\"\nassert solution(\n    \"15 18 21\"\n) == \"4\"\nassert solution(\n    \"5 10 15\"\n) == \"1 1 3\"\nassert solution(\n    \"1 2 3\"\n) == \"1 1 3\"\nassert solution(\n    \"1 2 3\"\n) == \"1 1 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\\n1 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3\\n123 321 456') == '1'\n\n\"\"\"\n\nfrom typing import Iterator\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('123 321 456') == '1 1 3'\nassert solution('5 10 15') == '3'\nassert solution('15 18 21') == '4'\nassert solution('100 100 101') == '1'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n12 3 4\\n5 10 15\\n') == '1\\n1 1 3\\n'\nassert solution('1 2 3\\n12 3 4\\n5 10 15\\n1 20 30') == '2\\n2 8 16\\n'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\na.pop(0)\nprint(sum(a) - a[0])\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 3 3 7\n''') == '2'\nassert solution('''\n2\n1 100000\n''') == '0'\nassert solution('''\n2\n1 100000\n''') == '0'\nassert solution('''\n2\n1 3\n''') == '1'\nassert solution('''\n1\n1\n''') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 3 7') == 2\n\nassert solution('2\\n1 100000') == 0\n\nassert solution('4\\n1 3 3 7') == 2\n\nassert solution('2\\n1 100000') == 0\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\nassert solution(\"2\\n1 100000\") == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('5 2\\n1 3 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"5 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 1\\n1 5 1\\n\") == \"1 2 3 0 3\"\nassert solution(\"1 3 1\\n1 2 1\\n\") == \"1 2 3 0 3\"\nassert solution(\"1 3 1\\n1 2 1\\n\") == \"1 2 3 0 3\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n4 2\") == \"2 1 0 1\"\nassert solution(\"2 1\\n5 5\") == \"2 1 0 1 1\"\nassert solution(\"2 2\\n4 7 2\") == \"2 2 0 4 3 4\"\nassert solution(\"2 2\\n4 9 3\") == \"2 2 0 4 3 4\"\nassert solution(\"4 4\\n1 9 3\\n1 10 1\\n1 10 3\\n1 11 1\\n1 11 3\") == \"4 4 0 1 0 3 4 4 0 1 0 3 4 0 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 2 1 1 0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n\n\"\"\"\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin.read().split('\\n')\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"120 51840\") == 7\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == -1\nassert solution(\"1 10^8\") == -1\nassert solution(\"1 9 2 9\") == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('1 1') == '-1'\nassert solution('2 4') == '1'\nassert solution('5 10') == '2'\nassert solution('5 20') == '2'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\n\nprint(solution(\"cat\", 2))"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba', 3) == 'ababababa'\nassert solution('cat', 2) == 'catcat'\nprint('all tests passed...')\n\n\n------Input-----\n\n3 4\nabc\n\nOutput\nabca\n\n------Input-----\n\n5 1\nabababa\n\nOutput\nabababa\n\n------Input-----\n\n5 3\nababa\n\nOutput\nababa\n\"\"\"\n\nn, k = list(map(int, input().split()))\nt = input()"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"a\") == \"aa\"\nassert solution(\"abc\") == \"abcabc\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\", 'Wrong answer'\nprint('Test passed')\n\nInput\n5 4\nababab\n\nOutput\nabababababababababab\n\nassert solution(\"ababab\", 5) == \"abababababababababab\", 'Wrong answer'\nprint('Test passed')\n\nInput\n1 1\na\n\nOutput\na\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\", 3) == \"aba\"\nassert solution(\"abababa\", 4) == \"abababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba', 3) == 'ababababa'\n\n------Problem------\nGiven two strings s and t of lengths m and n respectively,\ncheck if they are equal except for an additional character in one of them.\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'ababa'\nassert solution('cat') == 'catcat'\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'abab'\nassert solution('aba') == 'abababa'\nassert solution('ababa') == 'abababa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\", 3) == \"abababa\"\nassert solution(\"cat\", 2) == \"catcat\"\nassert solution(\"abcd\", 2) == \"abcdabcd\"\n\"\"\"\n\nn, k = [int(i) for i in input().split(' ')]\nt = input()\n\nl = 0\nr = n - 1\nfor _ in range(k):\n    if r < l:\n        break\n    if t[l]!= t[r]:\n        l += 1\n        r -= 1\n    else:\n        l += 1\n        r -= 1"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catcat\") == \"catcatcatcat\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 2 2') == '3\\n4 1 5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5 1 2 2') == '3'\nassert solution('8 3 5 2') == '2'\nassert solution('8 3 5 2 9') == '1'\nassert solution('2 1 2 4 3') == '0'\nassert solution('2 1 2 4 1 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 5 1 2 2\n''') == '3\\n4 1 5'\nassert solution('''4\n8 3 5 2\n''') == '2\\n1 4'\nassert solution('''5\n2 1 2 4 3\n''') == '0'\nassert solution('''5\n2 1 2 4 3\n''') == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 5 1 2 2') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 2 4 3') == '0'\nassert solution('4\\n8 3 5 2') == '2'\nassert solution('5\\n2 1 2 4 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 2 4 3\") == \"0\"\nassert solution(\"5\\n2 1 2 4 3\") == \"2\\n1 4\"\nassert solution(\"5\\n8 3 5 2\") == \"2\\n1 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n\nprint('Success')\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == k\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 5 2\") == \"0\"\nassert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"2 1 2 4 5\") == \"1 4\"\nassert solution
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaa\") == \"15\"\nassert solution(\"5 7 aaaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 aaaaa\") == 15\nassert solution(\"5 7 aaaaa\") == -1\n\n-----\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\n\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import List\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7\", \"aaaaa\") == -1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4\\n'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 4\\n2 3\\n3 4\\n'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'NO\\n'\n\n\n\n\n\n-----\n\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 n, m \u0438 D \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e i \u043e\u0442 1 \u0434\u043e m \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0430\u0444, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c D+1 \u0440\u0430\u0437 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435:\n\n\n-----\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0430\u0444 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0438 -1 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f n, m, D \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u0432\u043e\u0434: 3 4 1\n\u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 1, \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0434\u0435\u043b\u044c\u0442\u0430\u0445, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u0440\u0451\u0431\u0440\u0430 \u043f\u043e\u0434\u0433\u0440\u0430\u0444\u0430.\n\n\u0412\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0432\u044b\u0432\u043e\u0434\u0435:\n2 2\n\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0430\u0444 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440 D = 1.\n\n\n-----\n\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 n, m \u0438 D \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0432\u0435\u0440\u0448\u0438\u043d \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0435 \u0438\u043d\u0434\u0435\u043a\u0441, \u043e\u043d\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u0434\u0433\u0440\u0430\u0444 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c D+1 \u0440\u0430\u0437 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435:\n\n\n-----\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f n, m, D \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u0432\u043e\u0434: 3 4 1\n\u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 1, \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0434\u0435\u043b\u044c\u0442\u0430\u0445, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u0440\u0451\u0431\u0440\u0430 \u043f\u043e\u0434\u0433\u0440\u0430\u0444\u0430.\n\n\u0412\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\ufffd"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n\nclass DisjointSet:\n    def __init__(self, n):\n        self.n = n\n        self.rank = [0]*n\n        self.parent = list(range(n))\n\n    def union(self, u, v):\n        ru, rv = self.find(u), self.find(v)\n        if ru == rv:\n            return False\n\n        if self.rank[ru] < self.rank[rv]:\n            self.parent[ru] = rv\n        elif self.rank[ru] > self.rank[rv]:\n            self.parent[rv] = ru\n        else:\n            self.parent[rv] = ru\n            self.rank[ru] += 1\n\n        return True\n\n    def find(self, u):\n        if u!= self.parent[u]:\n            self.parent[u] = self.find(self.parent[u])\n\n        return self.parent[u]\n\n    def get(self):\n        return self.parent\n\n\nclass Solution:\n    def main(self, stdin):\n        n, m, d = [int(x) for x in stdin.readline().split()]\n        edges = []\n        for i in range(m):\n            edges.append([int(x) for x in stdin.readline().split()])\n\n        ds = DisjointSet(n)\n        roots = {}\n        for edge in edges:\n            if ds.union(edge[0], edge[1]):\n                if edge[0] not in roots:\n                    roots[edge[0]] = ds.parent[edge[0]]\n                if edge[1] not in roots:\n                    roots[edge[1]] = ds.parent[edge[1]]\n\n        if len(roots) == n:\n            print(\"YES\")\n            for edge in edges:\n                print(edge[0], edge[1])\n        else:\n            print(\"NO\")\n\n    def test(self):\n        assert self.main(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\n\nSolution().test()"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n\nimport sys\nimport collections\n\nclass Graph:\n    def __init__(self, n_vertices, n_edges, first_vertex, edges):\n        self.n_vertices = n_vertices\n        self.n_edges = n_edges\n        self.first_vertex = first_vertex\n        self.edges = edges\n\n    def __str__(self):\n        return f'{self.n_vertices}, {self.n_edges}, {self.first_vertex}, {self.edges}'\n\n    def __repr__(self):\n        return self.__str__()\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\n\"\"\"\n\n\n\nfrom collections import defaultdict\nfrom queue import Queue\nfrom typing import Dict, List, Set, Tuple, Union\n\n\nclass Graph:\n    def __init__(self, n: int):\n        self.n = n\n        self.graph = defaultdict(set)\n        self.degrees = [0 for _ in range(self.n)]\n        self.set_nodes = set()\n\n    def add_edge(self, v: int, u: int):\n        self.graph[v].add(u)\n        self.graph[u].add(v)\n        self.degrees[v] += 1\n        self.degrees[u] += 1\n\n    def bfs(self, start: int, D: int):\n        q = Queue()\n        q.put(start)\n        visited = [False for _ in range(self.n)]\n        visited[start] = True\n        self.set_nodes.add(start)\n        cur_degree = 1\n        while cur_degree!= D and not q.empty():\n            cur_degree = D\n            size = q.qsize()\n            for _ in range(size):\n                v = q.get()\n                for u in self.graph[v]:\n                    if not visited[u]:\n                        visited[u] = True\n                        self.set_nodes.add(u)\n                        q.put(u)\n                        cur_degree += 1\n\n    def has_spanning_tree(self, D: int) -> bool:\n        if D > self.n:\n            return False\n        if self.degrees[0] == D:\n            return True\n        self.bfs(0, D)\n        if len(self.set_nodes) == self.n:\n            return True\n        return False\n\n\nclass Solution:\n    def __init__(self):\n        self.res = None\n\n    def solution(self, stdin: str) -> str:\n        n, m, D = tuple(map(int, stdin.split()))\n        graph = Graph(n)\n        for _ in range(m):\n            v, u = tuple(map(int, stdin.split()))\n            graph.add_edge(v-1, u-1)\n        if graph.has_spanning_tree(D):\n            print(\"YES\")\n            for node in sorted(graph.set_nodes):\n                print(node + 1)\n            return\n        print(\"NO\")\n        return\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\nimport sys\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\n\n\nclass Node:\n    def __init__(self, val: int):\n        self.val = val\n        self.neighbors = set()\n\n    def __str__(self):\n        return f'Node[val={self.val}, neighbors={self.neighbors}]'\n\n    __repr__ = __str__\n\n    def add_neighbor(self, neighbor):\n        self.neighbors.add(neighbor)\n\n    def is_isolated(self):\n        return len(self.neighbors) == 0\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4\\n1 2\\n2 3\\n3 4') == 'YES\\n2 1'\nassert solution('1 2\\n1 3\\n2 3\\n3 4') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 4\\n2 3\\n3 4'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 2 1\\n1 2\\n1 3\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'NO'\nassert solution('4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'NO'\n\n\n\"\"\"\n\n\nfrom collections import defaultdict\nimport math\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 4\\n4 1\\n'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n\n-----Hint-----\n\nThe task is to build a spanning tree such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$ (or say that there are no such spanning trees).\n\nFind a spanning tree by implementing Prim's algorithm with a priority queue to store edges.\n\nThe input graph is not necessarily a simple graph.\n\nYou can assume that there are no self-loops or multiple edges in the given graph.\n\nYou can assume that the given graph is connected, i. e. you can simply ignore the edge (v, u) if (u, v) is also in the list of edges.\n\nFor each edge (v, u) in the list of edges, consider the following steps:\n\nIf there is a spanning tree T, such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$, print \"YES\" and then print $n-1$ lines describing the edges of T such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$.\n\nIf there is no such spanning tree, print \"NO\".\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 4\\n4 1'\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'NO'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '03:02'\nassert solution('11:00') == '11:00'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30 11:00\"\nassert solution(\"11:10 11:12\") == \"11:11 11:12\"\nassert solution(\"01:02 03:02\") == \"02:02 03:02\"\n\n------END-------\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('11:12') == '11:11'\nassert solution('01:02') == '02:02'"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\n\nassert solution(\"11:10\\n11:12\") == \"11:11\"\n\nassert solution(\"01:02\\n03:02\") == \"02:02\"\n\"\"\"\n\nimport os\nimport sys\nfrom dataclasses import dataclass\n\nFILE_DIR = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(os.path.dirname(FILE_DIR))\n\nfrom helper import get_raw_input_as_int_array_with_default_input\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\nassert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10:00 11:00') == '10:30'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'\n\"\"\"\n\nimport sys\nimport time\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\n\"\"\"\n\nimport sys\nfrom datetime import datetime"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\n\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\nprint('All tests passed.')\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 1\n\nassert solution('4') == 2\n\nassert solution('27') == 5\n\nassert solution('42') == 6\n\nprint('Success')\n\n'''"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\nimport math\na = int(input())\n\nb = math.ceil(math.log(a, 2))\n\nprint(b)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"42\") == \"6\"\nassert solution(\"27\") == \"5\"\n\"\"\"\n\na = int(input().strip())"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == ''\nassert solution('2\\n2\\n0\\n0') == '0'\nassert solution('3\\n3\\n1\\n1') == '0'\nassert solution('3\\n3\\n4\\n4') == '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == '1\\n'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == '2\\n'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == '0\\n'\nassert solution(\"2\\n3 10\\n1 5\\n\") == '7\\n'\nassert solution(\"2\\n3 10\\n1 5\\n\") == '7\\n'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1 3\") == \"0\"\nassert solution(\"3 10 2 6\") == \"2\"\nassert solution(\"4 5 3 7\") == \"4\"\nassert solution(\"3 3 4 5\") == \"0\"\nassert solution(\"5 1 7 2 4 8\") == \"6\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\"\n) == '2'\nassert solution(\n    \"4\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\"\n) == '1'\nassert solution(\n    \"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\"\n) == '0'\nassert solution(\n    \"3\\n4 5\\n1 2\\n9 20\\n\"\n) == '0'\nassert solution(\n    \"2\\n3 10\\n1 5\\n\"\n) == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n\n\n\n------Solution------\n\nmemo[i]: maximal possible length of the intersection of the last i segments, given that you remove the last segment\nmemo[0] = 0\nmemo[1] = 0\nmemo[2] = 0\n...\nmemo[i] = max(memo[j]) + r[i] - l[i]\n\nn = int(input())\nsegments = [tuple(map(int, input().split())) for _ in range(n)]\nsegments = sorted(segments)\nmemo = [0 for _ in range(n)]\nmemo[0] = segments[0][1] - segments[0][0]\nmemo[1] = segments[1][1] - segments[1][0]\nmemo[2] = segments[2][1] - segments[2][0]\nfor i in range(3, n):\n    memo[i] = max(memo[j]) + segments[i][1] - segments[i][0]\nprint(max(memo))\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\\n1 3\") == \"1\\n\"\nassert solution(\"3 10\\n1 5\\n2 6\") == \"2\\n\"\nassert solution(\"4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"5 3\\n2 6\\n1 3\\n0 4\\n1 20\") == \"2\\n\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 3\n2 6\n0 4\n3 3\n''') == '1'\nassert solution('''\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2'\nassert solution('''\n3\n4 5\n1 2\n9 20\n''') == '0'\nassert solution('''\n2\n3 10\n1 5\n''') == '7'\nprint('Passed!')"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = lambda: int(INPUT_LINES.pop(0))\nINPUT_INTs = lambda: map(int, INPUT_LINES.pop(0).split())\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"4 5 3\\n\") == \"NO\"\nassert solution(\"10 10\\n\") == \"YES\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('1\\n10 10') == 'NO'\nassert solution('5\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(5) == \"NO\"\nassert solution(10) == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 5 3\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('1\\n10 10') == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = deque()\n\nfor i in range(n):\n    while q and a[i] >= a[q[-1]]:\n        q.pop()\n    if not q:\n        q.append(i)\n    else:\n        if i - q[0] > 2:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaa\") == 15\nassert solution(\"asdf\") == 4\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == -1\nassert solution(\"bbbbbbbbbbbbbbbbbbb\") == -1\nassert solution(\"abcdefghij\") == 20\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ajihiushda') == '233'\nassert solution('aaaaa') == '15'\nassert solution('asdf') == '4'\n\nassert solution('ajihiushda') == '233'\nassert solution('aaaaa') == '15'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\naaaaa\\n') == '4'\nassert solution('4 5\\najihiushda\\n') == '233'\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\nassert solution('10 100\\najihiushda') == '233'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaca\") == 'abaca'\nassert solution(\"abacaabaca\") == 'abacaabaca'\nassert solution(\"aaaaa\") == 'aaaaa'\nassert solution(\"aaaaaabaca\") == 'aaaaaabaca'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaaa\", \"bbbbb\") == \"15\"\nassert solution(\"aaaaa\", \"bb\") == -1\nassert solution(\"aaaaa\", \"a\") == \"233\"\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\n\nassert solution('10 100') == '233'\n\"\"\"\nimport sys\nfrom tools import timing\n\nn, k = tuple(map(int, sys.stdin.readline().split()))\ns = sys.stdin.readline().strip()\nres = set()\nmin_cost = 0\ncost = 0\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n') == '4'\nassert solution('3 2 2\\n') == '7'\nassert solution('1 100 1\\n') == '3'\nassert solution('30 20 10\\n') == '39'\n\n\"\"\"\n\nfrom math import inf\n\na, b, c = map(int, stdin.readline().split())\nn = 1\nwhile a + b + c!= 7 * 10 ** 8:\n    n += 1\n    a, b, c = map(int, stdin.readline().split())\n\nprint(n)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\nfrom itertools import permutations"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == 4\nassert solution(\"3 2 2\") == 7\nassert solution(\"1 100 1\") == 3\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 100 1\") == 3\nassert solution(\"3 2 2\") == 7\nassert solution(\"30 20 10\") == 39\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\"\n\na, b, c = map(int, input().split())\nday = [a, b, c]\n\nprint(max(day.count(i) for i in range(1, 4)))"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"4 4\\n1 1\\n1 1\\n1 2\\n2 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"NO\"\nassert solution(\"2 2\\n1 1\\n1 1\\n2 2\") == \"NO\"\nassert solution(\"5 3\\n1 1\\n2 2\\n2 2\\n1 1\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n1\\n1\\n1\\n1') == 'NO'\nassert solution('2\\n2\\n1 1\\n1 1\\n1 1\\n2 2\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n1 1') == 'YES'\nassert solution('3\\n2\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n1 1') == 'YES'\nassert solution('4\\n2\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n1 1\\n1 1') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n2 1\") == 'YES'\nassert solution(\"4 5\\n5 4\") == 'YES'\nassert solution(\"1 1\\n1 1\") == 'YES'\nassert solution(\"1 2\\n2 1\") == 'NO'\nassert solution(\"4 5\\n5 4\") == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == 'YES'\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\nS = set()\nC = {}\nfor i in range(N):\n    a, b = map(int, input().split())\n    S.add(a)\n    S.add(b)\n    if b not in C:\n        C[b] = [a]\n    else:\n        C[b].append(a)\n\nS = list(S)\n\nfor i in range(M):\n    for j in range(i+1, M):\n        if S[i] == S[j] or S[i] in C[S[j]] or S[j] in C[S[i]]:\n            print('YES')\n            sys.exit()\nprint('NO')\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'\n\"\"\"\nfrom collections import Counter, deque"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('3 3') == 'YES'\n\n[Image]\n\n----\n\nMasha has $n$ types of tiles of size $2 \\times 2$. Each cell of the tile contains one integer. Masha has an infinite number of tiles of each type.\n\nMasha decides to construct the square of size $m \\times m$ consisting of the given tiles. This square also has to be a symmetric with respect to the main diagonal matrix, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.\n\nSymmetric with respect to the main diagonal matrix is such a square $s$ that for each pair $(i, j)$ the condition $s[i][j] = s[j][i]$ holds. I.e. it is true that the element written in the $i$-row and $j$-th column equals to the element written in the $j$-th row and $i$-th column.\n\nYour task is to determine if Masha can construct a square of size $m \\times m$ which is a symmetric matrix and consists of tiles she has. Masha can use any number of tiles of each type she has to construct the square. Note that she can not rotate tiles, she can only place them in the orientation they have in the input.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 100$) \u2014 the number of types of tiles and the size of the square Masha wants to construct.\n\nThe next $2n$ lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. \n\nThe first line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\n\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.\n\n\n-----Output-----\n\nFor each test case print the answer: \"YES\" (without quotes) if Masha can construct the square of size $m \\times m$ which is a symmetric matrix. Otherwise, print \"NO\" (withtout quotes).\n\n\n-----Example-----\nInput\n3\n3 3\n1 2\n1 2\n2 1\n1 1\n3 4\n1 3\n1 3\n1 2\n2 3\n2 1\n\nOutput\nYES\nNO\nYES\n\n\n-----Note-----\n\nThe first test case of the input has three types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"1 100\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport math\n\nassert len(sys.argv) == 2\nn, m = map(int, sys.argv[1].split())"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n5 6\") == \"NO\"\nassert solution(\"1 1\\n1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\") == \"YES\"\n\n\n---Problem 1---\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: n \u0438 m (1 <= n, m <= 100) - \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 n \u0441\u0442\u0440\u043e\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b: \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u0442\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435, \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e; \u043e\u0431\u0430 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 m \u0441\u0442\u0440\u043e\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b: \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u0442\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435, \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e; \u043e\u0431\u0430 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435.\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: t - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 t \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b: \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a\u0438. \u0427\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043b\u043e\u0432\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100.\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e,"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('5\\n') == '1'\nassert solution('6\\n') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 0\nassert solution('5') == 1\nassert solution('6') == 1\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == 0\nassert solution('1\\n2\\n3\\n4') == 1\nassert solution('1\\n2\\n3\\n4\\n5') == 1\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 1\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1, 2, 3') == 0\nassert solution('1, 2, 5') == 1\nassert solution('1, 3, 4') == 1\nassert solution('1, 5, 6') == 1\nassert solution('1, 2, 3, 4, 5') == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n\n\nclass Solution:\n    def minAbsSumDiff(self, nums: str) -> int:\n        nums = list(map(int, nums.split()))\n        n = len(nums)\n        nums.sort()\n        return min(abs(sum(nums) - 2 * sum(nums[:n // 2])), abs(sum(nums) - 2 * sum(nums[n // 2:])))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n\nassert solution('6') == '1'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))()\") == 4\nassert solution(\"(()(()))()\") == 4\nassert solution(\"()((()))()\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n((()))()\\n\"\n) == \"5\"\n\nassert solution(\n    \"3\\n(())\\n\"\n) == \"4\"\n\nassert solution(\n    \"2\\n((()\\n\"\n) == \"0\"\n\nassert solution(\n    \"4\\n((())\\n\"\n) == \"0\"\n\nassert solution(\n    \"10\\n(((())())\\n\"\n) == \"35\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(((())))') == 5\nassert solution('(()((()()))())') == 4\nassert solution('(()((()())(())()))()') == 8\nassert solution('(()((()())(())())((((()))))') == 8\nassert solution('(()(((())())())())())') == 16\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 0\nassert solution(\"(()(()))()\") == 4\nassert solution(\"((()())\") == 0\n\"\"\"\n\n\"\"\"\n--- Part Two ---\n\nYou have come to the Brown Hotel for a long time. It is famous for its comfort food, which is made from brown rice. However, the food is hard to make and they don't have a cook machine in the kitchen any more.\n\nNow, you're going to figure out what the machine should have. The first step is to calculate the amount of brown rice to use. The brown rice comes in packages of 10 units, and the packages have to be used in the following way:\n\nTake the first package, and move it from the Brown Hotel to the Hotel North Pole.\nFind the brown rice that is leftover after using the first package (it doesn't matter whether you take that many packages, or less. If there is not enough brown rice, you will need to start over with the next package.\nRepeat this process until you run out of brown rice.\nThe brown rice at the North Pole will come in ten-unit packages, and you already have one. If you need to make more brown rice, you will need to go to the Brown Hotel to buy more.\n\nOnce you have enough brown rice, you can begin producing the soup. You will need to use three different pots for this process. Each pot can hold a maximum of 5 units of brown rice, and you can only use a pot to make soup once it has 5 units of brown rice.\n\nTo make soup, you must take the first pot and the third pot, and put the brown rice from the first pot into the fourth pot. Then, you must put the brown rice from the third pot into the second pot. Once you have three pots holding five units each, you must take the first pot and the second pot, and put the brown rice from the first pot into the third pot. Then, you must put the brown rice from the second pot into the fourth pot. Once you have all three pots holding five units of brown rice, you can combine them into soup and put it into the fourth pot. When you have all three pots holding five units each, you can take the first pot and the second pot, and put the brown rice from the first pot into the third pot. Then, you can take the third pot and the fourth pot, and put the brown rice from the second pot into the fourth pot. When you have all three pots holding five units of brown rice, you can combine them into soup and put it into the fourth pot.\n\nOnce you have the four pots holding five units each, you can combine them into soup and put it into the fourth pot. Now, you can make soup! Once you have made soup, you will need to put the pot back to the Brown Hotel.\n\nYou will have a certain amount of brown rice upon returning to the hotel after making soup. Calculate the number of brown rice you will have upon returning to the hotel.\n\nInput\n\nThe input consists of a single line containing the string s. s is guaranteed to be a valid string containing at most 200 characters.\n\nOutput\n\nPrint a single integer \u2014 the number of brown rice that you will have upon returning to the hotel.\n\n\n-----Sample Input-----\n\n)))}))}))}}}\n\n-----Sample Output-----\n\n11\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == 4\nassert solution(\"((()()))\") == 5\nassert solution(\"((((((()()))()()))()((()))())\") == 9\nassert solution(\"(((((((()((((())))))()((()))())())())())())())\") == 50\nassert solution(\"((()))((()))((()())())((()))()\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()()))()\") == 5\nassert solution(\"(()())(())(()(()))\") == 10\nassert solution(\"(((((((((((((((((((((((((((((())))))))))())(()))())(()((()))((()))((()()((())((((()))(((((()))))))(()))((()((((()()()(()(((((((()))()((((((())))))))(()()(()(((((((((((((((((((((((((((((())))))))(()()(()(((((((((((((((((((((((((((((((((((((((((()))))))(((()(()(()(((((((((((((((((((((((((((((((((((((((((((()))))))((()((()(((((((((((((((((((((((((((((((((((((((((((((((())))))))))()(((((()((()(((()(((((((((((((((((((((((((((((((((((((((((()))))))))))(()(((()((()(((()(((()(((((((((((((((((((((((((((((((((((((()))))))(((((())(()(((()(((((((((((((((((((((((((((((((((((((((((()))))))(((((()((()(((()(((()(((((((((((((((((((((((((((((((((((((((((()))))))))))(((()(((()(((()(((((((((((((((((((((((((((((((((((((((((((()))))))(((((()((()((()(((()(((()(((((((((((((((((((((((((((((((((((((()))))))(((((((()(((()(((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))(((((((())(())())())()(((((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))()(()(((((()(()(((()(((()(((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))()()(()(((((()(((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(()))()\") == 4\nassert solution(\"(((()))())\") == 5\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()())\") == 4\nassert solution(\"(()())(())\") == 0\nassert solution(\"(((((\") == 0\nassert solution(\"(((((((((((())\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"((()))\") == 5\nassert solution(\"(()((()))())\") == 3\nassert solution(\"(()((()))())\") == 3\nassert solution(\"((()()))()()\") == 1\nassert solution(\"()((()))()\") == 1\n\"\"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()(()))()\") == 4\nassert solution(\"()(((()))()\") == 0\nassert solution(\"(((()))())(((())(((()))())())())())\") == 0\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(5071)) == \"4\"\nassert solution(str(705)) == \"1\"\nassert solution(str(1241367)) == \"-1\"\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"505\") == 2\nassert solution(\"5071\") == 4\nassert solution(\"705\") == -1\nassert solution(\"12341367\") == -1\nassert solution(\"1110\") == 2\n\"\"\"\n\n\nimport sys\nimport itertools"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '-1'\nassert solution('1241367') == '-1'"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\nassert solution('872665') == '3'\nassert solution('7551234') == '4'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\"\"\"\nimport numpy as np\nimport sys\n\nclass Solution:\n    def getDivisible(self, n: str) -> int:\n        # Get the number of ones in the binary representation\n        ones = 0\n        while n > 0:\n            ones += n%2\n            n //= 2\n        \n        # Return 0 if there are more than 10 ones\n        if ones > 10:\n            return 0\n        \n        # Return the number of moves to get an even number\n        return (10 - ones)\n        \n    def solution(self, n: int) -> int:\n        moves = 0\n        \n        # Loop over each number\n        while n > 0:\n            moves += self.getDivisible(n)\n            n //= 25\n        \n        # Return -1 if the result is not divisible by 25\n        if n > 0:\n            return -1\n            \n        return moves\n        \n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\nassert solution('314159265') == '8'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\nprint(\"Successfully passed all test cases!\")\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/56ee89a6c7ec3c5a0c00002d/train/python\n\n\u0418\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437, \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 3, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c 3 \u0440\u0430\u0437\u0430, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \"3 3 3\".\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437, \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 3, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c 3 \u0440\u0430\u0437\u0430, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \"3 3 3\".\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437 \u0447\u0438\u0441\u043b\u043e, \u0432\u044b\u0432\u043e\u0434\u044f \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1 2 3 4 5\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1 2 3 4 5\n3 3 3 3\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4 7 2 9 6\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4 7 2 9 6\n4 4 4 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 1 6 2 5\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n5 1 6 2 5\n4 4 4 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1 2 3\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1 2 3\n3 3 3\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4 6 2 5 3\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4 6 2 5 3\n4 4 4 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4 6 2 5 3\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4 6 2 5 3\n4 4 4 4\n\"\"\"\n\n\nimport random\nimport collections"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n\nprint(\"OK\")\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('aa') == '1 1 1 1 1'\nassert solution('aabb') == '1 2 1 2 1'\nassert solution('abab') == '1 2 1 2 1'\nassert solution('abc') == '1 1 1 1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == 2\nassert solution('aaabbcbb') == 2\nassert solution('abcde') == 1\nassert solution('abcdedc') == 3\nassert solution('aabbbccc') == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n\"\"\"\n\nn = int(input())\ns = input()\n\ncolors = []\n\nfor c in s:\n    if len(colors) == 0:\n        colors.append(1)\n        continue\n    \n    color = 1\n    for i in range(len(colors)):\n        if c < colors[i]:\n            break\n        color += 1\n    \n    colors.append(color)\n\nprint(len(colors))\nfor c in colors:\n    print(c, end=' ')"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == 2, \"First\"\nassert solution(\"aaabbcbb\") == 2, \"Second\"\nassert solution(\"abcdedc\") == 3, \"Third\"\nassert solution(\"abcde\") == 1, \"Forth\"\n\"\"\"\n\nimport sys\nimport time\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"1 1 1 1 2 2 2\"\nassert solution(\"abcef\") == \"1 1 1 1 2 3 3\"\nassert solution(\"abcdec\") == \"1 1 2 1 2 1 1\"\nassert solution(\"abcdee\") == \"1 1 2 1 1 2 2\"\nassert solution(\"abcdef\") == \"1 1 1 1 2 2 2\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacbecfd') == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"abacbecfd\") == \"2\"\nassert solution(\n    \"aaabbcbb\") == \"2\"\nassert solution(\n    \"abcdedc\") == \"3\"\nassert solution(\n    \"abcde\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcde\") == \"1\"\nassert solution(\"\") == \"1\"\nassert solution(\"abcdea\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"1 1 2 1 2\"\nassert solution(\"\") == \"1 1 2 1 2\"\nassert solution(\"bcb\") == \"1 1 2 1 2\"\nassert solution(\"baac\") == \"1 1 2 1 2\"\nassert solution(\"bacb\") == \"1 1 2 1 2\"\n\n\"\"\"\n\ns = stdin.split()[1]\nn = len(s)\ncolors = [0] * n\nfor i in range(n):\n    colors[i] = 1\n\nfor i in range(n - 1):\n    if s[i] > s[i + 1]:\n        colors[i] += 1\n\nfor i in range(n - 1, 0, -1):\n    if s[i - 1] > s[i]:\n        colors[i - 1] += 1\n\nres = max(colors)\nprint(res)\nprint(\" \".join([str(i) for i in colors]))\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == 'YES'\nassert solution(\"abacaba\") == 'YES'\nassert solution(\"a\") == 'YES'\nassert solution(\"aab\") == 'YES'\nassert solution(\"aaba\") == 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\"\nassert solution(\"5\\na\\nabacaba\\nba\\naba\\nabab\") == \"NO\"\nassert solution(\"3\\nqwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\na\\naba\\nabacaba\\nba\\na\\naba\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"qwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\"\nassert solution(\"aba\\naba\\naba\") == \"YES\\naba\\naba\"\nassert solution(\"abacaba\\nba\\naba\\nabacaba\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"YES\\na\\nbacaba\\na\\nbacaba\\na\\nbacaba\\na\\nbacaba\"\nassert solution(\"a\") == \"YES\\na\"\nassert solution(\"ba\") == \"YES\\na\\nbacaba\\na\\nbacaba\\na\\nbacaba\"\nassert solution(\"qwerty\") == \"YES\\nq\\nw\\nr\\nt\\ny\\nq\\nw\\nr\\nt\\ny\\nq\\nw\\nr\\nt\\ny\\nq\\nw\\nr\\nt\\ny\"\nassert solution(\"aab\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"abba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin=\"5\\na\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 'YES\\na\\nb\\nc\\nd\\n'\n\"\"\"\n\nn = int(input())\n\nstrings = []\nfor _ in range(n):\n    strings.append(input())\n\nfor i in range(n):\n    for j in range(i+1,n):\n        if any([substring in strings[j] for substring in strings[i]]):\n            print(\"YES\")\n            print(strings[i])\n            print(strings[j])\n            break\n    else:\n        print(\"NO\")\n        break\n    "
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\na\\na\\n\") == 'YES\\na\\naba\\nba\\naba\\nabacaba\\n'\nassert solution(\"a\\naba\\nabacaba\\nba\\na\\nab\\n\") == 'NO'\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == 'YES\\nqwerty\\nqwerty\\nqwerty'\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a\\naba\\nabacaba\\nba\\naba\\nabab') == 'YES\\na\\na\\naba\\naba\\nabacaba\\nba\\naba\\nabab'\nassert solution('a\\na\\naba\\naba\\nabacaba\\nba\\naba\\nabab') == 'NO'\nassert solution('a\\na\\na\\na\\naba\\naba\\nabacaba\\nba\\naba\\nabab') == 'NO'"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n3 1 2 1 3') == '5'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == 5\nassert solution('5 2\\n3 1 2 1 3') == 0\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"10 4\") == \"0\"\nassert solution(\"10 2\") == \"1\"\nassert solution(\"7 100\") == \"5\"\nassert solution(\"7 1000\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 100\\n12 34 55 43 21') == '5'\nassert solution('6 100\\n12 34 55 43 21') == '6'\nassert solution('1 100\\n12 34 55 43 21') == '0'\nassert solution('2 100\\n12 34 55 43 21') == '0'\nassert solution('3 100\\n12 34 55 43 21') == '0'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n---"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"12 34 55 43 21\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\nassert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"8 4\\n4 1 3 1 5 1 6 4\") == \"5\"\nassert solution(\"8 4\\n4 1 3 1 5 1 6 4\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\nprint('Success')\n\n----"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '4'\nassert solution('2 3') == '5'\nassert solution('4 3') == '11'\nassert solution('4 5') == '12'\nassert solution('7 9') == '17'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == 12\nassert solution(\"3 9\") == 14\nassert solution(\"9 3\") == 14\nassert solution(\"3 6\") == 12\nassert solution(\"506 2708\") == 3218\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0110\"\nassert solution(\"abdd\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\\n\"\nassert solution(\"abcde\") == \"YES\\n00000\"\nprint('all tests passed...')\n\nsolution(stdin)\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"a\") == \"YES\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('abacbecfd') == 'NO'\nassert solution('aaabbcbb') == 'YES'\nassert solution('abcdedc') == 'NO'\nassert solution('abcde') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"0110\"\n\nassert solution(\"abcde\") == \"0110\"\n\nassert solution(\"abacbe\") == \"01101101\"\n\nassert solution(\"abcdedc\") == \"01101101\"\n\nassert solution(\"abcde\") == \"01101101\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"YES\\n010\"\nassert solution(\"abcdee\") == \"YES\\n100\"\nassert solution(\"abacbb\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('a') == 'YES'\nassert solution('aa') == 'YES'\nassert solution('ab') == 'YES'\nassert solution('aab') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\nassert solution(\"abcd\") == \"NO\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacbecfd\") == \"YES\", \"Wrong solution for the 1st example\"\nassert solution(\"abcdedc\") == \"NO\", \"Wrong solution for the 2nd example\"\nassert solution(\"aaabbcbb\") == \"YES\", \"Wrong solution for the 3rd example\"\nassert solution(\"abcde\") == \"YES\", \"Wrong solution for the 4th example\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1 1000000000\") == \"1\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"-1\"\nassert solution(\"2 2\") == \"25\"\nassert solution(\"100 3\") == \"-1\"\nassert solution(\"4 5\") == \"25\"\nassert solution(\"4 6\") == \"10\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2, 2) == 25\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nassert solution('1 1') == '-1'\n\nassert solution('2 2') == '25'\n\nassert solution('1 2') == '-1'\n\nassert solution('1 10') == '5'"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 3') == '-1'\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\nans = 10**9\nfor i in range(1, B+1):\n    for j in range(1, A+1):\n        if i * 0.08 <= j and j <= i * 0.1:\n            ans = min(ans, j)\n\nprint(ans) if ans!= 10**9 else print(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n25\\n8\\n10\\n') == '25'\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"5 2\") == \"15\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"2 4\") == \"15\"\n\"\"\"\nimport sys\nimport math\nfrom math import floor\n\na, b = map(int, sys.stdin.readline().split())\n\nprice = 0\nfor i in range(a, b + 1):\n    if floor((i * 0.1)) > 0:\n        price = i\n        break"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\nassert solution('3 10') == '-1'\nassert solution('50 50') == '25'\nassert solution('60 10') == '25'\nassert solution('40 10') == '-1'\n\n-----\nYou want to make a profit of at least 100 yen.\n\nThe price of a product before tax is A yen.\nThe amount of consumption tax on the product is B yen.\n\nWhat is the price of the product after tax?\n\n-----Constraints-----\n - 1 \\leq A \\leq B \\leq 100\n - A and B are integers.\n - A \u2264 B\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint an integer representing the lowest price of a product after tax such that the profit is at least 100 yen.\n\n-----Sample Input-----\n3 6\n\n-----Sample Output-----\n18\n\n-----\nA = A - B * 0.8\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'YES\\n1'\nassert solution('2 2') == 'NO'\nassert solution('4 4') == 'NO'\nassert solution('8 4') == 'NO'\nassert solution('10 5') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4\") == \"NO\"\nassert solution(\"8 3\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\nassert solution(\"5 8\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 'YES\\n1'\nassert solution(\"6 1\") == 'NO\\n'\nassert solution(\"8 1\") == 'YES\\n1 1 1 1 1 1 1'\nassert solution(\"10 2\") == 'YES\\n1 1 1 1 1 1 1 1 1 1 1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"YES\\n2 4\"\nassert solution(\"5 3\") == \"NO\"\n\nassert solution(\"9 9\") == \"NO\"\nassert solution(\"7 7\") == \"YES\\n5 5 5 5 5\"\n\nassert solution(\"9 5\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n\"\"\"\nimport math"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('26 6\\n') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3\\n') == 'NO\\n'\nassert solution('1 1\\n') == 'YES\\n1'\nassert solution('9 4\\n') == 'NO\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"4 6\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"7 2\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('5 6') == 'NO'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == 3\n\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5\n\nassert solution('3 2\\n300 -300\\n1 299\\n1 123') == 3\n\nprint('Success')"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n\"\"\"\n\nstdin = \"\"\"3 4\n4 6\n10 -2\n8 -1\"\"\"\n\nn, r = [int(i) for i in stdin.split('\\n')[0].split(' ')]\na, b = [int(i) for i in stdin.split('\\n')[1].split(' ')]\nd = {a: b}\nfor i in range(2, n):\n    a, b = [int(i) for i in stdin.split('\\n')[i].split(' ')]\n    if a not in d:\n        d[a] = b\n    else:\n        if b > d[a]:\n            d[a] = b\nprint(max([i for i in d.keys() if r - d[i] >= 0]))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 5\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n\"\"\"\n\nn, r = list(map(int, input().split()))\narr = [tuple(map(int, input().split())) for _ in range(n)]\narr.sort(key=lambda x: x[0], reverse=True)\n\ns = r\nans = 0\nfor a, b in arr:\n    if s >= a:\n        s -= a\n        ans += 1\n    else:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\nimport itertools\nimport math"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\n\nsolution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') # YES\nsolution('3\\n1 1 1 1 1 3 3 3 3') # YES\nsolution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') # NO\nsolution('1\\n10') # YES\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\"\nassert solution(\"1\\n10\\n\") == \"YES\\n10 \n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\\n\"\nassert solution(\"4\\n2 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n-----Description-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u043e $n$. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0443\u0436\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0447\u0438\u0441\u0435\u043b \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e $n$. \u0415\u0441\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \"NO\".\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n \\ge 1$, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043e\u0442 1 \u0434\u043e $n$. \u0415\u0441\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \"NO\".\n\n\nSample Input 1:\n\n3\nSample Output 1:\n\n1 2 3\nSample Input 2:\n\n3\n1 1 1 1\nSample Output 2:\n\nNO\nSample Input 3:\n\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 1 1 1 1 3 3 3 3') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\n\nprint(\"Successfully passed all tests.\")\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n'"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\\n\"\nassert solution(\"1\\n10\") == \"YES\\n10 \n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\nassert solution('''4 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n\n'''\n\u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0448\u0430\u0440\u0430 \u0441 \u0440\u0430\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c d \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 v \u0437\u0430 \u043e\u0434\u043d\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 t\n\u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0448\u0430\u0440\u0430 \u0441 \u0440\u0430\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c d \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 v \u0437\u0430 \u043e\u0434\u043d\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 t\n\n\u0412\u044b\u0441\u043e\u0442\u0430 \u043f\u043e\u043b\u044f: h\n\u0428\u0430\u0440\u0438\u043a: R\n\u041f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c: O\n\u0420\u0430\u0437\u043c\u0435\u0440 \u0448\u0430\u0440\u0438\u043a\u0430: r\n\u041d\u043e\u043c\u0435\u0440 \u043e\u0442\u0440\u0435\u0437\u043a\u0430: num\n\u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u0448\u0430\u0440\u0438\u043a\u0430: d\n\u0412\u0435\u043a\u0442\u043e\u0440 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430: v\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0441\u0432\u043e\u0431\u043e\u0434\u044b \u043e\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f\n\u041e\u0442\u0440\u0435\u0437\u043a\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c num\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044e \u0448\u0430\u0440\u0438\u043a\u0430\n\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0448\u0430\u0440\u0438\u043a\u0430 \u0432 \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0448\u0430\u0440\u0438\u043a\u0430: r\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c \u043d\u0435\u0442 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432\n\u041a\u0430\u043a \u043c\u044b \u0443\u0437\u043d\u0430\u043b\u0438, \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0431\u0438\u043a \u0438\u043c\u0435\u0435\u0442 \u0437\u0430\u043a\u0440\u0430\u0448\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u043f\u043e\u043b\u0435 \u043a\u0443\u0431\u0438\u043a\u0430 (0, 0, 0). \u0412\u044b\u0441\u043e\u0442\u043e\u0439 \u043f\u043e\u043b\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 h.\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 'YES'\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == 'NO'\nassert solution(\"1 10\\n10 1\\n10 -1\\n10 0\\n\") == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n\"\"\"\n\nn, r = map(int, input().split())\np = [tuple(map(int, input().split())) for _ in range(n)]\np.sort(key=lambda x: x[1], reverse=True)\n\ncur = r\nfor a, b in p:\n    if cur >= a:\n        cur += b\n    else:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\n-----Problem-----\n\n\u0423\u0447\u0435\u0431\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u0430, \u0447\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043a \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0431\u0443\u0434\u0435\u0442 O(log(logn)). \u0422\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e 10 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0447\u0430\u0441\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0422\u043e\u0433\u0434\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $l$ \u2014 \u0434\u043b\u0438\u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u0430.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$.\n\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $k$.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $k$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u043e $k$ \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10000 \u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 $l$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \"YES\", \u0435\u0441\u043b\u0438 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \"NO\".\n\n\n-----Bite-----"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\n\nassert solution('''\n3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\n\nassert solution('''\n4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\n\nassert solution('''\n3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\n\n'''"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == 'YES\\n0 1 0 2 2 0 3 '\nassert solution(\"10 1 11\\n1\") == 'YES\\n0 0 0 0 0 0 0 0 0 0 1 '\nassert solution(\"10 1 5\\n2\") == 'YES\\n0 0 0 0 1 1 0 0 0 0 0 '\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\nassert solution(\"100 1 10\\n100\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3\\n'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1\\n'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0\\n'\nassert solution('10 1 5\\n3\\n') == 'NO\\n'\nassert solution('10 1 5\\n4\\n') == 'NO\\n'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 3\nassert solution(\"asdfasdf\") == 3\nassert solution(\"a\") == 1\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('asdfasdf') == 3\nassert solution('abcde') == 0\nassert solution('bbaba') == 3\n\"\"\"\nimport sys\n\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\nlength = len(s)\nmax_len = 0\nfor i in range(length):\n    # if t == '' or s[i:i+len(t)] == t:\n    if t in s:\n        start_idx = s.index(t[0])\n        end_idx = s.index(t[-1])\n        # if start_idx > end_idx:\n        #     s = s[:start_idx] + s[end_idx+1:]\n        # else:\n        s = s[:start_idx] + s[end_idx+1:]\n    else:\n        max_len = max(max_len, len(s[i:]))\n        s = s[:i] + s[i+1:]\n\nprint(max_len)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcde') == 3\nassert solution('abcd') == 2\nassert solution('sadfsdf') == 3\nassert solution('asdfasdf') == 3\nassert solution('asdf') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdfasdf\") == \"3\"\nassert solution(\"bbaba\") == \"3\"\nassert solution(\"bb\") == \"1\"\nassert solution(\"ab\") == \"1\"\nassert solution(\"bc\") == \"1\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"asdfasdf\") == 3\nassert solution(\"\") == 0\nassert solution(\"a\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('abcde') == 0\nassert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == \"tt\"\nassert solution(\"\") == \"\"\nassert solution(\"tst\") == \"tst\"\nassert solution(\"tstt\") == \"stt\"\nassert solution(\"tttt\") == \"tt\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('test') == 1\nassert solution('test') == 1\nassert solution('tst') == 1\nassert solution('tt') == 1\nassert solution('et') == 1\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\n\n\"\"\"\n\nimport math\nfrom decimal import *"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.5') == '10 9'\nassert solution('2.3') == '11 11'\nassert solution('2.4') == '12 12'\nassert solution('2.2') == '10 10'\nassert solution('2.6') == '11 11'\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nfrom math import ceil, floor"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\nassert solution(\"3.1415\") == \"3 5\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.572479\") == \"9 3\"\nassert solution(\"1.200000\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\n\nassert solution('6 2 3\\n') == 'NO\\n'\n\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\n\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n\nprint(solution(stdin))\n\n\n-----P3-----\n\nThere is an undirected graph with $n$ vertices and $m$ edges, and after removing exactly $k$ edges, the graph becomes a tree. Find the number of connected components of this graph after removing the edges.\n\nInput\nThe first line of the input contains integers $n$ and $m$ ($1 \\le n \\le 100, \\; 1 \\le m \\le \\frac{n(n-1)}{2} \\le 10^{5}$) \u2014 the number of vertices and the number of edges, respectively.\n\nThe next $m$ lines of the input contain $2$ integers each ($1 \\le a, b \\le n$), meaning that the line $i$ of the input contains two integers $a_i$ and $b_i$ \u2014 the endpoints of the edge that was removed on the line $i$, and it is guaranteed that no two edges share the same endpoints.\n\nIt is guaranteed that after the removal of the given $k$ edges, there are exactly $n - k$ connected components.\n\nOutput\nPrint the number of connected components of the graph after removing the edges.\n\nExamples\nInput\n4 2\n2 1\n3 2\n1 4\nOutput\n1\n\nInput\n6 5\n2 5\n3 2\n4 3\n3 6\n4 2\n5 1\nOutput\n2\n\nInput\n8 7\n1 7\n2 7\n3 8\n4 8\n5 8\n6 8\n7 5\n7 6\nOutput\n2\n\nInput\n5 4\n1 2\n3 1\n4 2\n5 1\nOutput\n1\n\nInput\n5 5\n1 2\n1 3\n2 4\n3 5\n4 5\nOutput\n1\n\n-----P2-----\n\nYou are given a string s of even length consisting of digits from 0 to 9. You are also given 3 integers t, c and k.\n\nYour task is to replace all the digits in s by digits from the set {0, 1,..., k} such that the resulting string is the lexicographically smallest one that contains exactly c digits 0's and exactly t digits 1's.\n\nReturn the lexicographically smallest string with the given conditions and length as a string.\n\nIf it is impossible to replace the digits in s to obtain the lexicographically smallest string with the given conditions, return the empty string.\n\nExamples\n1) s = \"111110111\" t = 2 c = 5 k = 2\noutput = \"1110010111\"\nExplanation: Replace the digits in s at indices 2, 4, 6, 7 and 8 to get the lexicographically smallest string with 2 0's and 5 1's.\n\n2) s = \"101111010\" t = 3 c = 4 k = 3\noutput = \"1110110111\"\nExplanation: Replace the digits in s at indices 3, 6, 7, 10, 11 and 12 to get the lexicographically smallest string with 3 0's and 4 1's.\n\n3) s = \"111111\" t = 1 c = 1 k = 2\noutput = \"11\"\nExplanation: There are no possible strings with one 0 and one 1 since the given conditions do not allow to replace more than 1 digit.\n\n4) s = \"1011110111111011011111\" t = 5 c = 4 k = 5\noutput = \"\"\nExplanation: Since there are no possible strings with 4 0's and 5 1's, return the empty string.\n\n-----P1-----\n\nYou are given a string s and a single character c.Your task is to modify the string in the following way:\n\nremove all occurrences of c from s\nconcatenate the character c with itself to all of the substrings of s that were not modified so far.\nReturn the resulting string.\n\nExamples\n1) s = \"azxxzy\" c = \"z\"\noutput = \"axaxax\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axaxax\"\nNote that the substrings that contain c will not be modified.\n\n2) s = \"axaxaxax\" c = \"x\"\noutput = \"axaxaxax\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axaxaxax\"\nNote that the substrings that contain c will not be modified.\n\n3) s = \"axxx\" c = \"x\"\noutput = \"axxx\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axxx\"\nNote that the substrings that contain c will not be modified.\n\n4) s = \"axxaxx\" c = \"x\"\noutput = \"axaxaxx\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axaxaxx\"\nNote that the substrings that contain c will not be modified.\n\n-----P0-----\n\nYou are given a string s consisting of digits.\n\nLet's denote the index of the rightmost non-zero digit in the decimal representation of this string by r.\n\nYou are also given an integer k.\n\nYour task is to modify the string in the following way:\n\ndelete all digits from s except for the rightmost r digits with the k'th ones on the right side of the deleted digits\nappend the remaining digits to the end of the number\nReturn a string consisting of only non-zero digits from s.\n\nNote: this is a famous \"Russian Peasant\" problem.\n\nExamples\n1) s = \"1234567890\" and k = 1\noutput = \"9\"\nExplanation:\n\nDelete all digits from s except for the rightmost 1 digit on the right side of the deleted digits:\n\ns becomes \"1234\", r = 2\n\nDelete all digits from s except for the rightmost 2 digits on the right side of the deleted digits:\n\ns becomes \"12\", r = 2\n\nDelete all digits from s except for the rightmost 2 digits on the right side of the deleted digits:\n\ns becomes \"\", r = 0\n\nAppend all remaining digits to the end of the string:\n\ns"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == \"NO\"\n\nassert solution('8 5 3') == \"YES\"\nassert solution('10 4 3') == \"YES\"\nassert solution('6 2 3') == \"NO\"\nassert solution('10 4 5') == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"6 3 3\"), \"YES\")\n        self.assertEqual(solution(\"6 2 3\"), \"NO\")\n        self.assertEqual(solution(\"10 4 3\"), \"YES\")\n        self."
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\"\nassert solution(\"6 3 3\\n\") == \"NO\"\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 8 3\") == \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"101010\") == \"110010\"\nassert solution(\"111111\") == \"101110\"\nassert solution(\"100100\") == \"110110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == '1100'\nassert solution('2 2 1') == '1100'\nassert solution('1 2 2') == '1101'\nassert solution('1 2 3') == '1110'\nassert solution('2 2 3') == '1110'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"11\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 1\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"110110\") == \"101110\"\nassert solution(\"111010\") == \"101010\"\nassert solution(\"111011\") == \"101011\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\") == \"110010\"\nassert solution(\"111001\") == \"110010\"\nassert solution(\"011010\") == \"110010\"\nassert solution(\"010101\") == \"110011\"\nassert solution(\"101111\") == \"110100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == \"1100\"\nassert solution(\"11101\") == \"101100\"\nassert solution(\"101010\") == \"110010\"\nassert solution(\"1111111011110101010\") == \"10110110011100101010\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111000\") == \"101010\"\nassert solution(\"101010\") == \"111010\"\n\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111001\") == \"101100\"\nassert solution(\"111010\") == \"110010\"\nassert solution(\"111011\") == \"100110\"\nassert solution(\"111111\") == \"101101\"\nassert solution(\"111110\") == \"111011\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ac') == 'acbac'"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"ab\"\nassert solution(\"bc\") == \"cb\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"ac\"\nassert solution(\"ac\") == \"bc\"\nassert solution(\"aa\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_str) == output_str"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bbac'\nassert solution('bb') == 'acbbac'\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n\n\nres = ''\nfor i in range(2*n):\n    if s[i%2] == 'a':\n        if t[i%2] == 'c':\n            res += 'c'\n        else:\n            res += 'a'\n    elif s[i%2] == 'b':\n        if t[i%2] == 'c':\n            res += 'a'\n        else:\n            res += 'b'\n    else:\n        if t[i%2] == 'b':\n            res += 'b'\n        else:\n            res += 'c'"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cbac\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"cc\") == \"ac\"\nassert solution(\"aa\") == \"ac\"\nassert solution(\"bc\") == \"ac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cac\"\nassert solution(\"bb\") == \"bac\"\n\nassert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"abccccc\") == \"ccc\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bbac\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"bc\") == \"bbac\"\nassert solution(\"bcb\") == \"bbac\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('4\\n1 2 2') == '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == '3 1 2'\nassert solution(\"5 1 1 1\") == '1 2 3 4 5'\nassert solution(\"4 1 2\") == '-1'\n\n------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 -1 1 1') == '3 1 2 4'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"1 2 3 4\"\nassert solution(\"5 1 2\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1') == '1 1 1'\nassert solution('2\\n1\\n2') == '2 1'\nassert solution('4\\n1\\n2\\n3\\n4') == '4 3 2 1'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '8 7 6 5 4 3 2 1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 -1 2\") == \"1 2 3 4 5\"\n\"\"\"\n\n\"\"\"\n    n = int(stdin.readline().strip())\n    line = stdin.readline().strip().split(' ')\n    arr = [int(i) for i in line]\n    if len(arr) < 1 or len(arr) > 200 or len(set(arr))!= len(arr):\n        return -1\n    else:\n        for i in range(n-1):\n            arr[i+1] -= arr[i]\n            if arr[i] < 1 or arr[i+1] < 1 or arr[i] > n or arr[i+1] > n:\n                return -1\n        return''.join([str(i) for i in arr])\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('4\\n1 1 1') == '1 2 3 4'\nassert solution('4\\n1 -1') == -1\nassert solution('4\\n-1 1') == -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('4\\n-1 2 2') == '-1'\n\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\n\"\"\"\nimport numpy as np\nn = int(input())\nq = np.array(list(map(int, input().split())))\np = np.zeros(n, dtype=int)\nfor i in range(n):\n    p[i] = q[i] + (i+1)\np[-1] = q[-1] + (n+1)\nfor i in range(n-1):\n    if p[i] == p[i+1]:\n        print(-1)\n        exit()\nfor i in range(n-1):\n    if p[i] > p[i+1]:\n        print(-1)\n        exit()\nfor i in range(n-1):\n    if p[i] < p[i+1]:\n        print(*p[i:i+2])\n        exit()"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nimport itertools\n\nn = int(input())\nq = list(map(int, input().split()))\n\nq = [-1 if i == 0 else i for i in q]\n\nfor i in itertools.permutations(q[:-1]):\n    if i == q[:-1]:\n        print(*i, sep=\" \")\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == 1\nassert solution('5\\n2 2 2 3 3') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"5\\n3 3 4 5 5\") == \"3\"\nassert solution(\"4\\n6 5 7 8\") == \"0\"\n\"\"\"\nimport unittest\n\nclass Test_2020_July_20(unittest.TestCase):\n    def test_solution(self):\n        "
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 3\") == \"1\"\n\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\n\n\"\"\"\nimport math\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 2 3 3\") == \"2\"\nassert solution(\"3 2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n1 2 3\"\n) == \"1\"\n\nassert solution(\n    \"5\\n2 2 2 3 3\"\n) == \"2\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '5'\nprint(solution('10'))\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5'"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('100') == '10'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '5'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == '1\\n1\\n0'\nassert solution('2\\n5') == '2\\n1\\n1\\n0'\n\ntry:\n    n = int(stdin)\n    print(5)\nexcept:\n    print(5)\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\n\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\n\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\n\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"119 226\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 3\") == \"0 1\"\nassert solution(\"5 5 5\") == \"0 15\"\nassert solution(\"0 0 3\") == \"3 3\"\nassert solution(\"3 0 0\") == \"3 3\"\nassert solution(\"686\") == \"119 226\"\n\n\"\"\"\n\nn = int(stdin.readline().rstrip())\nalice = [int(x) for x in stdin.readline().rstrip().split(' ')]\nbob = [int(x) for x in stdin.readline().rstrip().split(' ')]\n\na = [0] * n\nb = [0] * n\n\na[0] = alice[0]\nb[0] = bob[0]\nfor i in range(1, n):\n    a[i] = a[i - 1] + alice[i]\n    b[i] = b[i - 1] + bob[i]\n\na = [i % 2 for i in a]\nb = [i % 2 for i in b]\n\na = sum(a)\nb = sum(b)\n\nprint(min(a, b), max(a, b))"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '0 1'\nassert solution('15 5 5') == '0 15'\nassert solution('3 0 3') == '3 3'\nassert solution('686 479 178 29') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1\\n'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3\\n'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334\\n'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1 1\") == \"0 1\"\nassert solution(\"3\\n0 0 3\") == \"3 3\"\nassert solution(\"686\\n479 178 29\") == \"22 334\"\n\"\"\"\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\nb = list(map(int, input().strip().split()))\n\nalice = 0\nbob = 0\n\nfor i in range(n):\n    if a[i] > b[i]:\n        alice += 1\n    elif a[i] < b[i]:\n        bob += 1\n    else:\n        pass\nprint(alice, bob)"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1 1 1\\n1 1 1\") == \"0 0\"\nassert solution(\"1 0 1\\n1 1 1\") == \"0 1\"\nassert solution(\"1 0 1\\n1 1 1\") == \"0 1\"\nassert solution(\"1 0 1\\n1 1 1\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'b'\nassert solution('aa\\nbb') == 'aa'\nassert solution('aaa\\nbbb') == 'aaa'\n\nassert solution('5 5 5\\n5 5 5') == '0 15'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"1\\n1\") == \"1\\n1 1\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\n\nprint(\"Success\")\n\n\"\"\"\nfrom typing import List\n\nfrom bisect import bisect_left, bisect_right\nfrom itertools import accumulate"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 4 1 2 2 1 5 3') == '3'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 1 2 2 1 5 3') == '3'\n\nassert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 1 2\") == \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == \"YES\"\nassert solution('3\\n3 1 2') == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 2 3') == 'YES'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 3 1 2') == 'NO'\nassert solution('3 2 1 1') == 'NO'\nassert solution('3 2 2') == 'YES'\n\n'''\n\n'''\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n3 1 2') == 'NO'\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 1\") == \"NO\"\nassert solution(\"4 1 2 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 1 2\") == \"YES\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"abcde\") == \"1\"\nassert solution(\"abcdef\") == \"2\"\nassert solution(\"abcdefg\") == \"3\"\nassert solution(\"abcdefgh\") == \"4\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('abcd') == '0'\nassert solution('abce') == '0'\nassert solution('abdfec') == '0'\nassert solution('abcdef') == '0'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == solution(test_data).split('\\n')\nassert solution(test_data) == correct_solution(test_data)\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"abdfec\") == \"abdfce\"\nassert solution(\"abcde\") == \"accde\"\nassert solution(\"abcdefg\") == \"abcdeg\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"aaaaa\") == \"aaaa\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s=\"abcdef\", t=\"abdcef\") == 4\nassert solution(s=\"abcd\", t=\"accd\") == -1\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == 0\nassert solution(\"accd\") == -1"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\"\"\"\n\n\nfrom copy import deepcopy"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"aaa\") in [\"SPS\", \"PSPS\"]\nassert solution(\"ac\") in [\"SP\", \"PS\"]\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\na\\n\") == \"PPSS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"SPS\"\nassert solution(\"abc\") == \"PSPS\"\nassert solution(\"aba\") == \"SPS\"\nassert solution(\"abc\") == \"PSPS\"\nassert solution(\"aba\") == \"SPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'PS'\nassert solution('b') == 'PS'\nassert solution('abab') == 'PSPSPS'\nassert solution('aaa') in ('PSPS', 'PSPS')\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"SP\"\nassert solution(\"aaaa\") == \"PPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"\") == \"PPSSPSP\"\nassert solution(\"aa\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'P'\nassert solution('aa') == 'PS'\nassert solution('aaa') == 'PS'\nassert solution('aab') == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ba\") == \"SPPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"abab\") == \"PSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"ab\") == \"PS\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nprefixes = {}\nsuffixes = {}\n\nfor _ in range(N):\n    length = len(sys.stdin.readline().strip())\n    prefixes[length] = []\n    suffixes[length] = []\n    for prefix in prefixes:\n        if prefix > length:\n            break\n        prefixes[length].append(prefix)\n    for suffix in suffixes:\n        if suffix > length:\n            break\n        suffixes[length].append(suffix)"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\na\\na\") == \"PPSS\"\nassert solution(\"2\\na\\nc\") == \"PS\"\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('2 4 6 8 10') == 1\nassert solution('2 4 6 8 10') == 1\n\nassert solution('3 4 6 8 10') == 2\nassert solution('3 4 6 8 10') == 2\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('1 2 2 3 4') == 2\nassert solution('1 2 2 3 5') == 1\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8\") == \"2\"\nassert solution(\"2 4 6 8 11\") == \"1\"\nassert solution(\"2 4 6 8 12\") == \"0\"\nassert solution(\"2 4 6 8 13\") == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('6 8 10') == '0'\nassert solution('8 10') == '0'\nassert solution('8 10 10') == '0'\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10') == 1\n\nassert solution('2 4 6 8 10 2') == 2\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 1 1 1 1\") == 1\nassert solution(\"3 3 3 3 3\") == 1\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10\") == 1\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"1 2 4 5 6 7 8 9 10\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == 2\nassert solution('5\\n1 1 0 0 0') == 0\nassert solution('4\\n1 1 1 1') == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 1 0 0 0\n''') == '0'\nassert solution('''5\n1 1 1 1\n''') == '0'\nassert solution('''4\n1 1 1 1\n''') == '0'\n\n\"\"\"\nimport timeit\nimport random\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 1\n\nfor i in range(n - 1):\n    if a[i] == 0 and a[i + 1] == 0:\n        ans += 1\n    if a[i] == 1 and a[i + 1] == 1:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\n\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\nassert solution('5\\n12\\n24\\n36\\n42') == '3'\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('5\\n1 2 3 4 10') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1'\nassert solution('''6\n6 90 12 18 30 18''') == '4'\n'''\n\n---"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\\n6 90 12 18 30 18\") == \"4\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([2, 4, 6, 2, 10])) == 2\nassert solution(str([1, 2, 3, 4, 5])) == 2\n\n---"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 2\\n2\\n3\\n2\\n') == '2'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == 2\nassert solution(\"3\\n1 1 1\") == 2\nassert solution(\"3\\n2 2 2\") == 1\nassert solution(\"4\\n1 2 3 4\") == 3\nassert solution(\"4\\n1 1 1 2\") == 3\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"5\", \"1st example\"\nassert solution(\"1 2\") == \"2\", \"2nd example\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\na.sort()\nfor i in a:\n    print(i, end=\" \")"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\n\nimport io, os, time\nassert os.path.basename(__file__) == os.path.basename(__file__.replace('.py', '.out'))\n\nwith open(os.path.join(os.path.dirname(os.path.abspath(__file__)), f'{os.path.basename(__file__).replace(\".py\", \".out\")}'), 'w') as f:\n    f.write(str(solution(open(os.path.join(os.path.dirname(os.path.abspath(__file__)), f'{os.path.basename(__file__)}')).read())))\n\ntime_elapsed = time.time() - since\nprint(f'{os.path.basename(__file__)}: solved in {time_elapsed:.4f}s')\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n2\\n3') == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n100') == '1'\nassert solution('1\\n1') == '2'\nassert solution('1\\n2') == '1'\nassert solution('3\\n
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n1 2 3 4') == '2'\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\\n3\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n1\") == \"0\"\nassert solution(\"1\\n2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4 3 3 2') == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nfrom math import factorial\nfrom typing import List"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == 3\n\nassert solution(\"5 10\") == -1\n\nassert solution(\"5 3\") == 2\n\nassert solution(\"1 0 0 0 1\") == 2\n\nassert solution(\"10 3\") == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 0 0 0\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\"\nassert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 10\\n0 0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"6 5\\n0 0 0 0 0 1\\n\") == \"2\"\n\"\"\"\n\n\n\"\"\"\nThis solution is a very smart. We use a greedy approach and do a binary search.\n\nWe start by filling the house with heaters to the left of the first heater (this heater is in the middle by default). So, for every additional heater we add one to the count of heaters.\n\nWe then run a binary search to find the maximum number of heaters we could add to the house. We do this by calculating the maximum possible number of heaters we could have before a certain position. In other words we calculate the number of heaters we could have before an element at position $i$. This number is equal to the number of heaters we have added so far plus the number of heaters we could have before the first heater in the house (because the first heater is in the middle by default).\n\nFinally we subtract one to this value because the next heater should be considered.\n\nWe then repeat the process for the house to the right of the last heater.\n\nAfter we've finished going through the house we have the maximum number of heaters we can add to the house. If this number is less than the number of heaters we already have, then we know that we can't have the whole house warmed up. If it's equal we can replace all the heaters because we can warm up the whole house. If it's greater then we replace all heaters that are closer to the middle of the house.\n\nNote that if our number of heaters is equal to the number of elements in the house we're not able to replace any heaters (because we're not able to add any to the house) so we return -1.\n\nFinally, we return the minimum number of heaters needed to warm the house.\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"6 2\n0 1 1 0 0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5 3\n0 0 0 0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"5 10\n0 0 0 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"10 3\n0 0 1 1 0 1 0 0 0 1\n\"\"\") == \"3\"\n\n\n\"\"\"\n\n4 5\n1 0 0 0 1\n\n3 3\n0 0 1 1\n\n4 8\n0 0 1 1 0 1\n\n2 2\n1 0\n\n3 3\n1 0 0 1\n\n4 8\n0 0 1 1 0 1\n\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1\\n') == '3'\n\nassert solution('5 3\\n1 0 0 0 1\\n') == '2'\n\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\n\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == '3'"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n0 0 0 0 0\\n') == '3'\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0 1 0 0 1') == '3'\nassert solution('5 10') == '-1'\nassert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('10 3') == '3'\n\n'''\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('5 10') == '-1'\nassert solution('10 3') == '3'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\n\nassert solution(\"5 3\\n0 0 0 0 1\\n\") == \"2\"\n\nassert solution(\"5 10\\n0 0 0 0 0\\n\") == \"-1\"\n\nassert solution(\"10 3\\n0 0 0 0 0 0\\n\") == \"3\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n0 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\nassert solution(\"7 3\\n0 0 0 0 0 0 0 1\") == -1\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(int(input()))) == str(int(input()))\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '2'\nassert solution('5\\n') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('3\\n') == '3\\n'\nassert solution('3\\n3') == '3\\n3\\n'\nassert solution('3\\n2\\n1') == '3\\n1\\n1\\n'\nassert solution('10\\n2\\n3') == '10\\n2\\n3\\n'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"7\"\nassert solution(\"6\") == \"12\"\nassert solution(\"7\") == \"14\"\nassert solution(\"9\") == \"40\"\n\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nprint(solution('3'))"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"2\") == 2\n\nprint(\"PASSED\")\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nsolutions = []\n\nfor a in range(1, n):\n    for b in range(a, n):\n        c = (n - a - b) / 2\n        if a * b + c == n and c > 0 and a > 0 and b > 0:\n            solutions.append(str(a) + \" \" + str(b) + \" \" + str(c))\n\nprint(len(solutions))\nfor s in solutions:\n    print(s)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()()\") == 0\nassert solution(\"))(((((\") == 0\n\nassert solution(\"((((((((\") == 9\nassert solution(\"(\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"())\") == 0\nassert solution(\"(((()))((((((()()((()())((()))()(())))((())))(())))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())\") == 0\nassert solution(\"(()\") == 1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(((()))(((((())))))\") == 0\nassert solution(\"()())\") == 1\nassert solution(\"(()())\") == 0\nassert solution(\"(()(()))((((())))()\") == 0\nassert solution(\"(((((((((((((((())))())())())())())())())())())((()(((()((()())()(((())))((()))()(())(()((((((()))(())))(((()()()((()())((()(())))((())((((()))))(((((()(())))((()((()()()((((((((((()))()))(())(()))(()()(()((())((()()(((()(()(()()((((()(()(((((((((()))(())(()(()(()((((((((((()))(())()(()()()()(((()))(()((()(()((()()(()((((((((((()))()))(())(()()(()(((())(((()((((((()))()(()()(()(()((((()(((((((((((((((((())(()()(()(()(()((()(((((((((((((((((()((()()()((()(()(((((((((((((((((((((((((())))))()(()(()(()(()(()((()()(((((((((()))((((()()(()(()(()((()(((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(((()))\") == 3\nassert solution(\"((()))\") == 0\nassert solution(\"()()()\") == 0\nassert solution(\"(((()))\") == 3\n\nprint(\"\\nCorrect!\")\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == 1\n\"\"\"\n\n\"\"\"\nimport string\nimport sys\nsys.setrecursionlimit(100010)"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()())\") == 3\nassert solution(\"())())(\") == 2\nassert solution(\"((())(())()(()))((()))(()(()))()(()())((()))(())(())(()(()))(())(()())()(()())(()(()))(())()()()(())((()))(()(())()(())()(()(()))(()(())(())())(()()(())((())(()))(()()(())()))(()((()())((()))()(()((()))(()(()))(()(())((())))(()(())((()))()))()()(())()()(()()))()(()(((()(())(((())())((()((()))((((((())))((())(())(((((())))((()(()(((((((())((())((()(()))(()(()(()(()(()()))(()(()()()((()()(()()(()(()(()()))(()()(()(((())((((()(())((()()(()((()()(()((((((()))(())())((()(()()((((((((()()()(()(((()(()(()(()((((((()(())())(()((())((()((((((()))(())(((()))(()(()(()(()(((((((((()()))())((()(()(()((()(()()(((())(((((()(())((()(()()((()(()(()(()((((((((()(()(()(()(((()(((()((((((()))((((((((()(()((((((())(()(()(()(((((((((((((((((((()()(())()(()((()(()(()(((((((((((((((((((()))(((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()((()))\") == 1\nassert solution(\"(())(())()\") == 3\nassert solution(\"((()())(())()(()))\") == 0\nassert solution(\"(()((()())())()))\") == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((((((((((\") == 3\nassert solution(\"(((((((((((\") == 0\nassert solution(\"(((((((((((\") == 4\nassert solution(\"(((((((((((\") == 2\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Deque, Set\nfrom functools import lru_cache\nfrom sys import stdin, stdout\n\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> int:\n        n = int(stdin.pop(0))\n        stack = deque()\n        while len(stdin) > 0:\n            c = stdin.pop(0)\n            if c == \")\":\n                if len(stack) == 0:\n                    stack.append(c)\n                else:\n                    if stack[-1] == \"(\":\n                        stack.pop()\n                    else:\n                        stack.append(c)\n            else:\n                stack.append(c)\n\n        count = 0\n        for i, s in enumerate(stack):\n            if s == \"(\":\n                count += 1\n\n        return count\n\n\nclass Solution2:\n    def solution(self, stdin: List[str]) -> int:\n        stack = deque()\n        count = 0\n        for c in stdin:\n            if c == \")\":\n                if len(stack) > 0:\n                    if stack[-1] == \"(\":\n                        stack.pop()\n                        count += 1\n                    else:\n                        stack.append(c)\n                else:\n                    stack.append(c)\n            else:\n                stack.append(c)\n\n        return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"())\") == 0\nassert solution(\"(())\") == 0\nassert solution(\"())\") == 0\nassert solution(\"()())\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\")(\") == 3\nassert solution(\"()())\") == 3\nassert solution(\"()())\") == 3\nassert solution(\"())(\") == 3\nassert solution(\"()()\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'a'\nassert solution('ba') == 'a'\nassert solution('aab') == 'aa'\nassert solution('ab') == 'a'\nassert solution('aa') == 'a'\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"se\") == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aa') == 0\nassert solution('ab') == 0\nassert solution('abc') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('test') == 'tst'\nassert solution('tst') == 'tst'\nassert solution('tt') == 't'\nassert solution('et') == 'te'\nassert solution('se') =='st'\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('test') == 0\nassert solution('tst') == 0\nassert solution('tt') == 0\nassert solution('et') == 0\nassert solution('se') == 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"test\", \"t\") == 0\nassert solution(\"test\", \"tes\") == 1\nassert solution(\"test\", \"test\") == 0\n\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"a\") == 1\nassert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\n\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bbaba') == 3, \"Test 1 FAILED\"\nassert solution('bb') == 0, \"Test 2 FAILED\"\nassert solution('asdfasdf') == 3, \"Test 3 FAILED\"\nassert solution('abcde') == 0, \"Test 4 FAILED\"\nassert solution('aaaaa') == 1, \"Test 5 FAILED\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\nassert solution('1 1 1 1') == '1'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 1 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 1') == '2'\n\n-------"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == '2'\nassert solution('2 1 1 1') == '2'\nassert solution('2 3 1 1') == '6'\nassert solution('2 3 5 1') == '10'\nassert solution('2 3 5 10') == '50'\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 1') == '2'\n\n\"\"\"\nimport sys\nimport os\nimport math\nimport random\nimport re\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\nfrom scipy.stats import binom\nfrom scipy.special import comb\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                             os.path.pardir))\nfrom polynomials import Polynomial\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == expected"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"4 5 6 7\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 1') == 2\nassert solution('4 5 6 8') == 24\nassert solution('5 6 7 4') == 90\nassert solution('3 4 5 6') == 180\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(b'6\\n9 1 4 4 6 7\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 4 4 6 7\\n5\") == 2\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom math import log2, ceil, log\nfrom collections import Counter\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\n9 1 4 4 6 7''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 6 7\\n5 1 4 4 6 7\") == \"2\"\n\"\"\"\n\nfrom math import ceil\n\nn = int(input())\nlst = list(map(int, input().split()))\n\nans = 1\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"8\n4 1 7 5 1 1 5 1\n\"\"\") == \"2\"\nassert solution(\"\"\"4\n4 1 2 1\n\"\"\") == \"1\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 1 4 4 6 7\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 9 1 4 4 6 7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1 9 1 1 1\") == \"3\"\nassert solution(\"4 9 9 9\") == \"1\"\nassert solution(\"8 9 9 9 9\") == \"0\"\n\nassert solution(\"3 1 2 1 3\") == \"0\"\nassert solution(\"2 1 2 1 3\") == \"3\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 4 4 6 7\") == \"2\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\n\nA = 0\nB = 0\nC = 0"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '6\\n9 1 4 4 6 7'\n) == '2'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == 3\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nm = 0\nfor i in range(n):\n    if (a[i] > l) and (a[i] < r):\n        m += 1\nprint(m)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 3 1 1') == '3'\nassert solution('2 1 1 3') == '1'\n\"\"\"\n\n\"\"\"\nSOLUTION:"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n\n\"\"\"\n\nfrom typing import List, Tuple, Union\n\na_list = [16, 17, 14, 20, 20, 11, 22]\nn = 7\nh = 24\nl = 0\nr = h - 1\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 24 21 23''') == '3'\nassert solution('''16 17 14 20 20 11 22''') == '3'\nassert solution('''7 10 6 11''') == '2'\nassert solution('''10 20 16 20 20 10 15 10''') == '4'\nassert solution('''10 20 16 20 20 10 15 10''') == '4'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 24 21 23') == 3"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4 5 8') == '6'\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == 4\nassert solution('5\\n2 10 50 110 250') == 1\nassert solution('6\\n4 7 12 100 150 199') == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport itertools\n\nn = int(sys.stdin.readline().rstrip())\n\nd = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\ncount = 0\nmax_count = 0\nfor x in itertools.combinations(d, n):\n    if len(x) == 1:\n        count += 1\n    else:\n        if x[0] == 2 * x[1] - 1:\n            count += 1\n        else:\n            count = 0\n    if count > max_count:\n        max_count = count\n\nprint(max_count)"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\na.sort()\ndp = [1 for _ in range(n)]\nfor i in range(n):\n    for j in range(i):\n        if a[i] % 2 == 0 and a[i] * 2 <= a[j]:\n            dp[i] = max(dp[i], dp[j] + 1)\nprint(max(dp))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n2 10 50 110 250'\n) == '1'\n\nassert solution(\n    '6\\n4 7 12 100 150 199'\n) == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == 4\nassert solution(\"5\\n2 10 50 110 250\") == 1\nassert solution(\"6\\n4 7 12 100 150 199\") == 3\n\n\n---\nIf you like it, please consider a small tip:\n\nIf you solve this task in the first attempt, don't forget to check your solution for errors in the comments.\n\nThis task was taken from coding train, so the code should be relatively clean and readable.\n\nIf you have any questions, please do not hesitate to ask them in the comments.\n\nHave a nice solution!\n\"\"\"\nimport sys"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('5\\n5 2 11 3 7') == '2 4'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n\"\"\"\nimport math"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 11 3 7\") == \"1 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\nassert solution(\"5 2 10 1 10 2\") == \"1 4\"\nassert solution(\"5 2 11 3 7\") == \"1 4\"\n\nimport sys; print(solution(sys.stdin.readline()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(['5', '2', '11', '3', '7']) == '1 4'\nassert solution(['6', '2', '10', '1', '10', '2']) == '1 4'\n\"\"\"\n\nfrom math import gcd\n\nn = int(input())\na = list(map(int, input().split()))\n\nmin_lcm = a[0]\nfor i in range(n):\n    min_lcm = gcd(min_lcm, a[i])\n\nfor i in range(n):\n    if a[i] // min_lcm == 0:\n        print(i+1, i+1)\n        break\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 1'\nassert solution('2 1') == '1 1'\nassert solution('1 2') == '1 1'\nassert solution('5 1') == '5 1'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\n\n'''\nfrom math import lcm"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '1 2'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('121') == '021'\nassert solution('11011') == '11112'\nassert solution('10111010') == '11112'\n\"\"\"\n\ns = stdin"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"00111000\") == \"111122\"\nassert solution(\"110110\") == \"111122\"\nassert solution(\"110111\") == \"121110\"\nassert solution(\"1110011\") == \"121110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0110') == '1010'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211200\"\nassert solution(\"120110\") == \"120120\"\n\nassert solution(\"011\") == \"1011\"\nassert solution(\"111000\") == \"111010\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('01010') == '01110'\nassert solution('10101010') == '11101110'\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(121) == '021'\nassert solution(211200) == '211220'\nassert solution(120110) == '120120'\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100110\") == \"210012\"\nassert solution(\"100101\") == \"210110\"\nassert solution(\"1110010\") == \"1110110\"\nassert solution(\"1111010\") == \"1111110\"\nassert solution(\"1111110\") == \"1111100\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"001111\") == \"011110\"\n\"\"\"\n\nimport functools\n\nclass Solution:\n    def __init__(self, s):\n        self.s = s\n\n    def balance(self):\n        \"\"\"\n        The main idea is to replace the characters with another characters in the string which are '0', '1' and '2' (in that order).\n        That way, the string will be balanced. The string is balanced iff the number of '0' characters is equal to the number of '1' characters and the number of '2' characters is equal to the number of '2' characters.\n        \"\"\"\n        # The following numbers are the number of '0' characters, '1' characters, and '2' characters respectively.\n        counts = [self.s.count('0'), self.s.count('1'), self.s.count('2')]\n        # The following variable represents the minimum number of replacements.\n        min_count = functools.reduce(lambda acc, x: acc if x > acc else x, counts)\n\n        # If the string is already balanced, we will return the same string.\n        if counts[0] == min_count and counts[1] == min_count and counts[2] == min_count:\n            return self.s\n\n        # If the string is not balanced, we will replace the minimum number of characters with '0', '1', '2'.\n        for i in range(3):\n            if counts[i] > 0:\n                min_count = min(min_count, counts[i])\n                counts[i] = 0\n        \n        # We will replace the characters with other characters in the order '0', '1', '2'.\n        for i in range(min_count):\n            counts[0] -= 1\n            counts[1] += 1\n            counts[2] -= 1\n            self.s = self.s.replace('0', '0', 1)\n            self.s = self.s.replace('1', '1', 1)\n            self.s = self.s.replace('2', '2', 1)\n        \n        return self.s"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == '021'\nassert solution('100') == '110'\nassert solution('100100') == '101010'\nassert solution('1010') == '10111'\nassert solution('1011010') == '1011111'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\n\nprint(solution(\"211200\"))"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 1\n3\n''') == '6'\nassert solution('''\n6 1\n3\n''') == '4'\nassert solution('''\n6 2\n3\n3\n''') == '3'\nassert solution('''\n3 3\n2\n2\n''') == '1'\nassert solution('''\n4 2\n1\n1\n''') == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n3\") == \"4\"\nassert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\nfrom typing import List\n\nMODULO = 1000000007\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 2 1') == '4'\nassert solution('3 2 2') == '2'\n'''"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('N M\\n a_1\\n a_2\\n.\\n.\\n.\\n a_M') == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1\\n\") == \"1\"\nassert solution(\"5 1\\n1\\n\") == \"2\"\nassert solution(\"5 2\\n1\\n3\\n\") == \"3\"\n\n'''\n\nimport math\nfrom functools import reduce\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 1\n3''') == '4'\nassert solution('''7 2\n1\n1\n3\n3\n5\n8''') == '0'\nassert solution('''10 5\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '6'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n3\\n3\\n3\") == \"0\\n\"\nassert solution(\"3 2\\n3\\n3\") == \"2\\n\"\nassert solution(\"4 2\\n3\\n3\\n3\") == \"4\\n\"\nassert solution(\"4 5\\n3\\n3\\n3\\n3\") == \"0\\n\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n1\\n2\\n\") == \"2\"\nassert solution(\"6\\n5\\n4\\n4\\n3\\n2\\n1\\n1\\n\") == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3') == '4\\n'\nassert solution('6\\n2') == '8\\n'\n\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 0 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"./input.txt\") == \"1\"\n\"\"\"\n\nimport sys\n\nX, K, D = map(int, sys.stdin.readline().rstrip().split())\nresult = abs(X - K * D)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 2 4''') == 2\n\"\"\"\n\nimport sys\n\nX, K, D = [int(x) for x in sys.stdin.readlines()[0].split()]\n\ndestination = (K * D - X) / (K - 1)"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"12 10 2\") == \"6\"\nassert solution(\"6 3 1\") == \"4\"\n\n\"\"\"\nimport re\n\ninput_string = re.sub(r\"\\s+\", \" \", input())\nX, K, D = [int(n) for n in re.findall(r\"[-+]?\\d+\", input_string)]\n\nprint(min(abs(X - (K * D)), abs(X + (K * D))))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n') == '2'\n\"\"\"\n\nfrom math import floor\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 4\") == 2\n\n------------------------------------------------------------------------------------------------------------------------\n\n###"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\n\"\"\"\n\ud480\uc774\n\nTakahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\n\n\uc774\uc9c4 \ud0d0\uc0c9\uc73c\ub85c \uacb0\uad6d\uc5d0\ub294 \uadf8\ub0e5 \uadf8 \uac70\ub9ac\ub85c \uc774\ub3d9\ud574\uc11c \uac00\uc7a5 \uc791\uc740 \uac70\ub9ac\ub85c \ubcc0\uacbd\n\nTakahashi \ud3ec\uc9c0\uc158\uacfc \uac70\ub9ac\ub9cc \uc900\ub2e4.\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == 0\n\nassert solution(\"11\") == 2\n\nassert solution(\"14\") == 0\n\nassert solution(\"61441\") == 2\n\nassert solution(\"571576\") == 10\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"61441\") == 2\nassert solution(\"2128506\") == 3\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('61441') == 2\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 2\nassert solution(\"571576\") == 10\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2128506\") == 3\nassert solution(\"61441\") == 2\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n\nimport math\n\nfrom textwrap import dedent\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 2\n\nassert solution(\"61441\") == 10\n\nassert solution(\"571576\") == 3\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 3\nassert solution('5') == 5\nassert solution('3') == 3\nassert solution('6') == 6\nassert solution('7') == 7\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n\"\"\"\n\nimport math"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 27\nprint(solution(\"3\"))\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\n\nprint(a * 9)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 27\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 17\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == 1\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nassert solution('33') == '0'\nassert solution('23') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n\nprint(solution(\"13\"))\nprint(solution(\"927\"))\nprint(solution(\"48\"))\n\n\n\n--------Test cases---------\n\n4\n5\n6\n7\n8\n9\n15\n16\n18\n19\n20\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n866\n867\n868\n869\n870\n871\n872\n873\n874\n875\n876\n877\n878\n879\n880\n881\n882\n883\n884\n885\n886\n887\n888\n889\n890\n891\n892\n893\n894\n895\n896\n897\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == 1\n\nassert solution(\"927\") == 1\n\nassert solution(\"48\") == 0\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\nprint(\"Passed\")"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\nassert solution('6') == 0\n\n\"\"\"\nfrom collections import Counter\nfrom itertools import product\n\nfrom util.helpers import readlines\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(input()))\n\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 5 3 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\"\"\"\n\nimport unittest\n\nclass Testing(unittest.TestCase):\n\n    def test_1(self):\n        self.assertEqual(solution(\"2 5 3 1\"), 4)\n\n    def test_2(self):\n        self.assertEqual(solution(\"5 6 7 10\"), 14)\n\n    def test_3(self):\n        self.assertEqual(solution(\"5 6 7 10\"), 14)\n\n    def test_4(self):\n        self.assertEqual(solution(\"5 6 7 10\"), 14)"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split()]\n\nprint(sum(arr) if all([a < 10 for a in arr]) else 0)\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 3 1') == 4\n\n\n-----Example solution-----\n\n\n\"\"\"\n\n\"\"\"\n\nint main() {\n    int N;\n    int M;\n    cin >> N >> M;\n    int a[N];\n    for (int i = 0; i < N; i++) {\n        cin >> a[i];\n    }\n\n    sort(a, a+N);\n\n    int res = 0;\n    for (int i = 1; i <= M; i++) {\n        int cur = a[N-1-i];\n        int next = a[N-2-i];\n        res ^= cur;\n        if (cur == next) {\n            res ^= next;\n        }\n    }\n\n    cout << res;\n}\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 3 1\") == \"4\"\n\nprint(solution(\"2 5 3 1\"))\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 3 1') == 4\nassert solution('1 2 3 4') == 0\n\n-----Explanation-----\nFor n = 4, the integers are sorted in descending order, and the largest is 5:\n\nGiven array A: [2, 5, 3, 1]\n\nsorted_arr = [1, 3, 5, 2]\n\nThe largest integer is 5:\n\nindex 3 = 2, 1 + 3 = 4\n\nYou need to return 4.\n\n-------\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1 1 1 1') == 0\nassert solution('2 2 2') == 0\nassert solution('1 2 3 4') == 0\nassert solution('2 3 3 3') == 0\n'''\nimport os\nimport io\nimport unittest\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\n\"\"\"\nimport math\nimport sys\nimport pprint\n\npp = pprint.PrettyPrinter(indent=4)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\\n8 1\\n6 10\") == \"2\\n8\\n1\"\nassert solution(\"4 7\\n8 10\\n6 10\") == \"1\\n8\\n1\"\nassert solution(\"4 7\\n8 10\\n6 11\") == \"1\\n8\\n1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('9 10\\n999999733 999999732\\n999999733 999999733') == '0\\n999999733\\n1'\nassert solution('1 10\\n999999733 999999732\\n999999733 999999733') == '999999733\\n1'\nassert solution('0 10\\n999999733 999999732\\n999999733 999999733') == '0\\n0'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"7 10\\n999999733 999999733\") == \"1\\n999999733\\n1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n-----Tests-----\nYour code should pass the following tests.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java tests --\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n3\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('2 2\n1 2\n1 2\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 1 2\n0 1''') == \"1\"\nprint(\"Passed\")\n\n\"\"\"\n2\n5 2\n1 2\n0 1\n1 2\n0 1\n3 2\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1\\n') == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\nassert solution('2 2\\n1 2\\n1 1\\n0 1') == '0'\nassert solution('3 3\\n1 1 2\\n1 1 3\\n1 2 3\\n0 1 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"3 1\\n1 2\\n2 3\\n0 1\\n0 2\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n\n---------------------\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n2 1 2\\n2 0 2\\n0 1\") == \"3\"\nassert solution(\"2 2\\n1 2 1\\n0 1\") == \"0\"\nassert solution(\"1 1\\n0 1\") == \"0\"\nassert solution(\"2 2\\n1 1 1\\n0 1\") == \"1\"\nassert solution(\"2 1\\n1 2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\nprint(\"Test Completed\")\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n\nlines = stdin.splitlines()\nN, M = [int(i) for i in lines[0].split()]\n\nbulbs = dict()\nfor i in range(1, N + 1):\n    bulbs[i] = [int(i) for i in lines[i].split()[1:]]\n\nstates = dict()\nfor i in range(N, N + M + 1):\n    for switch in lines[i].split():\n        states[int(switch)] = 0\n\non_count = 0\nfor k, v in states.items():\n    count = Counter([bulbs[i][v] for i in k])\n    if sum(count.values()) % 2 == 0:\n        on_count += 1\n\nprint(on_count)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 9 0') == '5.0'\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\"\n\nimport math\nimport sys\nimport typing"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"3 1 1 0\") == \"0.0\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"8\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"6 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '8'\nassert solution('3 1') == '6'\nassert solution('15 2') == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == '8'\nassert solution(\"3 1\") == '6'\nassert solution(\"15 2\") == '97'\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\n\"\"\"\n\nfrom typing import Iterator, List, Tuple\n\n\nclass MedianIterator:\n    \"\"\"\n    Iterator to check number of medians\n    \"\"\"\n    def __init__(self, values: List[int]) -> None:\n        \"\"\"\n        :param values: list of values\n        \"\"\"\n        self._values: List[int] = values\n        self._median: int = values[0]\n        self._left: int = 0\n        self._right: int = len(self._values)\n\n    def __iter__(self) -> Iterator[Tuple[int, int]]:\n        \"\"\"\n        :return: iterator of pairs\n        \"\"\"\n        return self\n\n    def __next__(self) -> Tuple[int, int]:\n        \"\"\"\n        :return: next pair\n        \"\"\"\n        if self._right - self._left > 1:\n            self._right -= 1\n            if self._median >= self._values[self._right]:\n                self._left += 1\n        if self._right - self._left == 1:\n            if self._median >= self._values[self._right]:\n                self._left += 1\n            self._median = self._values[self._left]\n        else:\n            self._median = (\n                self._values[self._left] + self._values[self._right]\n            ) // 2\n        return self._left, self._right\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == 8\nassert solution('3 1\\n1 1 1') == 6\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == 97\n\"\"\"\n\nn, m = [int(x) for x in input().split(' ')]\ns = [int(x) for x in input().split(' ')]\n\ncount = 0\n\nfor i in range(0, n - 1):\n    for j in range(i + 1, n):\n        sorted_s = sorted(s[i:j + 1])\n        if len(sorted_s) % 2!= 0:\n            median_index = len(sorted_s) // 2\n            if median_index == m:\n                count += 1\n        else:\n            median_index = len(sorted_s) // 2\n            if sorted_s[median_index] == m:\n                count += 1\n\nprint(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\nimport sys\nimport math\n\nassert len(sys.argv) == 2\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\") == \"\"\"\n6\n2\n1 4 \n\"\"\"\n\nassert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5\n\"\"\") == \"\"\"\n7\n2\n3 2 \n\"\"\"\n\nassert solution(\n\"\"\"\n1 0\n1000000\n\"\"\") == \"\"\"\n0\n0\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 3\\n4 5') == '3', 'case1'\nassert solution('3 2\\n4 3\\n1 5') == '2', 'case2'\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6', 'case3'\nassert solution('1 0\\n1000000') == '0', 'case4'\nassert solution('1 0\\n0') == '0', 'case5'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6\\n2\\n1 4'\n\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5''') == '7\\n2\\n3 2'\n\nassert solution('''1 0\n1000000''') == '0\\n0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == result\n\n\"\"\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"5 4\") == \"7\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 1000000\") == \"0\"\nassert solution(\"2 -2 3 1 2\") == \"6\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n4 1\"\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2 -2 3 1 2\") == \"6\"\nassert solution(\"5 4 3 -2 3 1 2\") == \"7\"\nassert solution(\"1 0\") == \"0\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"5\", \"4\", \"-2\", \"3\", \"1\", \"2\"]) == \"6\"\nassert solution([\"5\", \"4\", \"-2\", \"3\", \"1\", \"2\", \"1\", \"3\"]) == \"7\"\nassert solution([\"1\", \"0\"]) == \"0\"\nassert solution([\"1\", \"1000000\"]) == \"0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\nnums = [int(x) for x in stdin.split(\"\\n\")[1:-1]]\nsegments = [int(x) for x in stdin.split(\"\\n\")[2:]]\nprint(nums, segments)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n\n\nfrom collections import deque\nfrom functools import lru_cache\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3\\n') == '4'\nassert solution('7\\n1 3 5 6 7 4 2\\n') == '7'\nassert solution('3\\n1 2 3\\n') == '3'\nassert solution('4\\n1 2 4 3\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_1) == output_1\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 4 3\") == \"4\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\nassert solution('7\\n1 3 5 6 7 4 2') == 7\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\nassert solution(\"2\\n1 3\") == \"1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 5 4 3\") == '4'\nassert solution(\"1 2 3 4 5\") == '5'\nassert solution(\"1 3 5 7 4 2\") == '7'\nassert solution(\"1 3 5 7 4 2\") == '7'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 5 3 4\n''') == '4'\nassert solution('''\n1 2 5 3 4\n''') == '4'\n\nassert solution('''\n1 2 5 3 4\n''') == '4'\nassert solution('''\n1 2 5 3 4\n''') == '4'\n\nassert solution('''\n1 2 5 3 4\n''') == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 4\nassert solution(\"6 5 4 3 2 4 3\") == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\\n\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\\n\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 2 4 3\\n') == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 5 3 4') == '4'\n\nassert solution('6 5 4 3 2 4 3') == '2'\nassert solution('1 2') == '2'\nassert solution('1 2 3 4 5') == '5'\n\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set, Sequence, Optional"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 2\nassert solution(\"1 2 5 3 4\") == 2"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 2 2 4 5''') == '1'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 3 3 3\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"1 2 2 4 5\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\nn, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ncounter = Counter(a)\nprint(sum(1 for i in counter.values() if i >= k))"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 3 4 5\") == \"0\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\n\"\"\"\nimport math\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 3\n1 2 2 4 5\"\"\") == \"1\"\nassert solution(\"\"\"5 3\n1 2 3 4 5\"\"\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('7 5\\n1 2 2 3 3 5 3 4') == '2'\nassert solution('7 5\\n1 2 3 3 5 3 4 5') == '2'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\nimport unittest\n\n\nclass TestPseudoRandomNumberGenerator(unittest.TestCase):\n\n    def test_solution1(self):\n        self.assertEqual(solution(8, 3, 4), 4)\n\n    def test_solution2(self):\n        self.assertEqual(solution(8, 3, 5), 0)\n\n    def test_solution3(self):\n        self.assertEqual(solution(16, 5, 6), 0)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n') == '4'\nassert solution('3 3 3\\n') == '0'\n\n-----Test 1-----\nstdin:\n8 3 4\n\n-----Test 2-----\nstdin:\n5 3 4\n\n-----Test 3-----\nstdin:\n4 2 1\n\n'''\n\n'''\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 4\") == '4'\n\n-----------\n\nN A B\n\nN     Number of balls\nA     Number of blue balls\nB     Number of red balls\n\n1     If all the balls in the row are blue, then the result is B\n2     Otherwise, the result is B + (A - 1) * r\n\n3     Therefore, the result is (A - 1) * r + B * r\n\n-----------"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3 4\\n') == '4'\nassert solution('8 3 5\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('1\\n2') == '-1'\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6\n4 2 3\n8\n8 2 12 6 4 24 16 3\n5\n2 3 5\n7\n2 4 6 7\n''') == '48', 'Incorrect'\nassert solution('''\n6\n4 2 3\n8\n8 2 12 6 4 24 16 3\n5\n2 3 5\n7\n2 4 6 7\n''') == '4', 'Incorrect'\n\"\"\"\n\nfrom math import ceil, gcd"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1\\n2\") == \"48\\n\"\nassert solution(\"8\\n8\\n2\") == \"4\\n\"\nassert solution(\"8\\n8\\n2\\n1\\n1\\n1\\n1\\n1\") == \"4\\n\"\nassert solution(\"8\\n8\\n2\\n2\\n2\\n1\\n1\\n1\\n1\") == \"-1\\n\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n8 2 12 6 4 24 16 3''') == '48'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom collections import defaultdict\n\nfrom typing import List, Set\n\nfrom icontract import require, ensure\n\n\n@ensure(lambda result: result > 0, \"greater than 0\")\n@ensure(lambda result: result < 2 ** 32, \"less than 2 ** 32\")\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '48'\nassert solution('''\n2\n1\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '4'\nassert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '-1'\nassert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '-1'\n\nassert solution('''\n1\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 16 24') == '48'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"3\\n6\"\nassert solution(\"1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n1 5 1 6 1\") == \"3\\n5 6 1\"\n\"\"\"\n\nn = int(input())\nmy_list = [int(num) for num in input().split(' ')]\nmy_set = set()\nmy_list_final = []\nfor i in range(n):\n    if my_list[i] not in my_set:\n        my_set.add(my_list[i])\n        my_list_final.append(my_list[i])\nprint(len(my_list_final))\nprint(' '.join(map(str, my_list_final)))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 3') == '2 1 3'\nassert solution('2 4 2 4') == '2 4'\nassert solution('6 6 6 6 6') == '1 6'\nassert solution('5 6 6 6 6') == '1 6'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\nassert solution(\"5 4 4 4 4\") == \"1 5\"\nassert solution(\"2 4 4 4 4\") == \"2 4\"\nassert solution(\"2 4 2 4 4\") == \"2 4\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 5 6 6') == '2'\nassert solution('2 4 2 4 4') == '2'\nassert solution('6 6 6 6 6') == '1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6') == '1\\n6'\nassert solution('5\\n5 5 1 6 1') == '2\\n5 6 1'\n\"\"\"\nimport math"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '6\\n1 5 5 1 6 1'\n) == '3\\n5 6 1'\n\nassert solution(\n    '5\\n2 4 2 4 4'\n) == '2\\n2 4'\n\nassert solution(\n    '5\\n6 6 6 6 6'\n) == '1\\n6'\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"1 5 5 1 6 1\") == \"3 5 6 1\"\nassert solution(\"5 4 2 4 4\") == \"2 4\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\n\n'''\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n\nimport math\n\na = int(input())\n\ni = 0\nsum = 0\nwhile a!= 0:\n    sum += a % 10\n    a //= 10\n    i += 1\n\nsum = sum + i\n\nwhile True:\n    if (sum % 4 == 0):\n        break\n    else:\n        sum += 1\n\nprint(sum)"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nassert solution('634') == '634'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\n\"\"\"\n\nfrom math import ceil, floor"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n432\n\"\"\"\n) == \"\"\"\n435\n\"\"\"\n\nassert solution(\n\"\"\"\n99\n\"\"\"\n) == \"\"\"\n103\n\"\"\"\n\nassert solution(\n\"\"\"\n237\n\"\"\"\n) == \"\"\"\n237\n\"\"\"\n\nassert solution(\n\"\"\"\n42\n\"\"\"\n) == \"\"\"\n44\n\"\"\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('aeiou') == 'aeiou'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\nimport re\nimport sys"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(\"Hooray!\")\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 'abc'\nassert solution('aba') == 'aba'\nassert solution('abac') == 'aac'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\nimport collections\nimport heapq\nimport functools"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"ab\") == \"a\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import accumulate\nfrom typing import List\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"b\"\nassert solution(\"26\") == \"z\"\nassert solution(\"27\") == \"aa\"\nassert solution(\"28\") == \"ab\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'b'\nassert solution('1000000000000001\\n') == 'z'\nassert solution('27\\n') == 'aa'\nassert solution('703\\n') == 'zzz'\nassert solution('18279\\n') == 'zzzz'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == 'b'\nassert solution('27\\n28') == 'aa'\nassert solution('703\\n704') == 'aaa'\nassert solution('18279\\n18280') == 'aaaa'\nassert solution('475255\\n475256') == 'aaaaa'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('7') == 'a'\nassert solution('1') == 'a'\nassert solution('723') == 'zz'\nassert solution('735') == 'zzz'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nfrom itertools import product, count\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2''') == 'b'\nassert solution('''1000000000000001''') == 'z'\n'''\nfrom typing import List\nfrom itertools import chain"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == 'b'\nassert solution(27) == 'a'\nassert solution(70) == 'z'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('aa bb aa aa bb bb') == 11\nassert solution('aa bb aa aa bb bb') == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aa bb aa aa bb bb') == '11'\nassert solution('to be or not to be') == '12'\nassert solution('aa bb aa aa bb bb') == '11'"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\n\"\"\"\n\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'AB aa AB bb'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"ab aa ab bb\") == 6"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\nto be or not to be\n''') == '12'\nassert solution('''10\na ab a a b ab a a b c\n''') == '13'\nassert solution('''6\naa bb aa aa bb bb\n''') == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nmemo = defaultdict(deque)\nmemo[0] = deque([0])\n\nfor i, d in enumerate(a):\n    if i < k:\n        memo[i].append(d)\n    else:\n        memo[i % k].append(d)\n\nans = 0\nfor k in memo:\n    if len(memo[k]) <= 1:\n        continue\n    i = a[k]\n    t = 0\n    for d in memo[k]:\n        if d > i:\n            break\n        t += d\n    else:\n        ans = max(ans, t)\n\nprint(ans)\n\nfor k in memo:\n    if len(memo[k]) > 1:\n        i = a[k]\n        t = 0\n        for d in memo[k][:-1]:\n            if d > i:\n                break\n            t += d\n        else:\n            ans = max(ans, t)\n            print(memo[k][:-1])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n\nINPUT_LINES = sys.stdin.read().splitlines()\nn, k = list(map(int, INPUT_LINES[0].split()))\na = list(map(int, INPUT_LINES[1].split()))\n\ndp = [[0] * (k + 1) for _ in range(n + 1)]\n\nqueue = deque([(a[0], 0)])\nfor i in range(1, n):\n    while queue and queue[0][1] == i - 1:\n        dp[i][queue.popleft()[1]] = max(dp[i][queue.popleft()[1]], a[i])\n    queue.appendleft((a[i], i))\n    queue.append((dp[i][i], i))\n\nfor i in range(k, n):\n    while queue and queue[0][1] == i - 1:\n        dp[i][queue.popleft()[1]] = max(dp[i][queue.popleft()[1]], dp[i - 1][queue.popleft()[1]])\n    queue.append((dp[i][i], i))\n    queue.append((dp[i - 1][i], i))\n\nprint(dp[n - 1][k - 1])\nfor i in range(k - 1, -1, -1):\n    print(dp[n - 1][i], end=\" \")"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '5'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\n\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\n\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -5 3 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\nassert solution(\"8 -2 -1 2 -8 1 2 -2 -8\") == \"3\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -1 3 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n-2 3 -9 2') == '0'\nassert solution('5\\n4 -2 3 -9 2') == '0'\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 -5 3 2') == '1'\n\nassert solution('5\\n4 -2 3 -9 2') == '0'\n\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\n\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"10\"\nassert solution(\"2 3\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 100') == '0'\nassert solution('2\\n2 2') == '1'\nassert solution('5\\n5 5') == '0'\nassert solution('2\\n1000000000') == '2'\nassert solution('1000000000 1000000000') == '1000000000'\n\"\"\"\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self."
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2 3 4 5') == '0'\nassert solution('3 3\\n1 2 3') == '0'\nassert solution('2 1\\n1 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\") == \"0\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"5 10\") == \"2\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 100\") == \"0\"\nassert solution(\"5\\n2 2\") == \"2\"\nassert solution(\"5\\n5 5\") == \"10\"\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 000000000 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('2 1000000000') == '2000000000'\nassert solution('1 000000000 1000000000') == '2000000000'\n\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\nassert solution(\"5 100\\n1 1\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n1\\n10\\n1000000000\\n2000000000\"\nassert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n1000000001 1000000000\") == \"0\\n2\\n10\\n1000000001\\n2000000000\"\nassert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n1000000010 1000000000\") == \"0\\n2\\n10\\n1000000010\\n2000000000\"\nassert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n100000000100 1000000000\") == \"0\\n2\\n10\\n100000000100\\n2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 100\\n2 2\") == \"0\"\nassert solution(\"1 100\\n2 1000000000\") == \"2000000000\"\nassert solution(\"1 100\\n5 5\") == \"2\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"2000000000\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\nassert solution('1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\n\"\"\"\nNotes:\n\nI have no idea how to solve this, so I'm just going to brute force it.\nSo, I guess I'll try to come up with a O(n) solution and then see if that works.\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '4'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"011\") == \"1\"\nassert solution(\"101\") == \"4\"\n\"\"\"\n\nimport math\n\nK = int(input(''))\ncount = 0"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '4'\nassert solution('10') == '-1'\nassert solution('11') == '-1'\nassert solution('13') == '-1'\nassert solution('14') == '-1'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101\\n777') == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nK = int(input())\n\nfirst = -1\nfor i in range(1, K + 1):\n    if i % K == 0:\n        first = i\n        break\n\nprint(first)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n\"\"\"\nimport math\nimport collections\n\nfrom typing import Dict, List, Set, Tuple"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 5 1 3 4\") == \"5\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"0\"\nassert solution(\"6 5\") == \"0\"\nassert solution(\"6 6\") == \"1\"\nassert solution(\"7 7\") == \"1\"\nassert solution(\"8 5\") == \"0\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == '1'\nassert solution(\"5 4\") == '1'\nassert solution(\"5 5\") == '1'\nassert solution(\"1 2 3 4 5\") == '1'\nassert solution(\"5 3 1 4 2\") == '0'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4\n2 4 5 3 1''') == '4'\n\nassert solution('''5 5\n1 2 3 4 5''') == '1'\n\nassert solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48'\n\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8\\n1 7 2 6 3 4 5\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('4 8') == '4'\nassert solution('1 3 1 1 2') == '4'\nassert solution('5 15') == '2'\nassert solution('5 26') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom typing import List\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\ndays = 0\nfor i in range(n):\n    if a[i] <= i + 1:\n        days += 1\n    else:\n        days += i + 1"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\\n\") == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"5 16\") == \"2\"\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 24 21 14 10\") == 3\nassert solution(\"2 500 500\") == 0\nassert solution(\"3 14 5 1\") == -1\nassert solution(\"5 1 3 6 9 12\") == 1\nprint('The code ran successfully')\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"5 500 500\") == \"0\"\nassert solution(\"5 14 3 6 9 12\") == \"1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"-1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 6 9 12') == '1'\nassert solution('500 500') == '0'\nassert solution('14 5 1') == '-1'\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21 14 10\") == 3\nassert solution(\"500 500\") == 0\nassert solution(\"1 3 6 9 12\") == -1\nassert solution(\"1 2 4 5\") == 0\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n24 21 14 10''') == '3'\nassert solution('''5\n1 3 6 9 12''') == '1'\nassert solution('''2\n500 500''') == '0'\nassert solution('''3\n14 5 1''') == '-1'\nassert solution('''5\n1 3 6 9 12''') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('5\\n1 3 6 9 12') == '-1'\nassert solution('3\\n14 5 1') == '1'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected_result\n\n-----Test-----\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\nassert solution('6 1\\n36 4 1 25 9 16') == 2\nassert solution('4 4\\n1 10 100 1000') == 4\n\"\"\"\n\n\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nn, k = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n\nskills = list(map(int, lines[1].split(' ')))"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n15 15\\n') == '5'"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n------Time Limit Exceeded in Pypy3------\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nprint(\"Test pass.\")\n\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 10 3 6\") == 8\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nn, k, m = input().split()\nn, k, m = int(n), int(k), int(m)\nsubjects = [int(i) for i in input().split()]\n\npoints = 0\nfor i in range(1, n):\n    points += subjects[i - 1]\n\npoints = points + k * (n - 1)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nimport sys\nimport numpy as np\n\nN, K, M = [int(x) for x in sys.stdin.readline().strip().split(' ')]\nscores = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n\navg_score = 0\nfor i in range(N-1):\n    avg_score += scores[i]\n\nscores = np.array(scores)\navg_score = avg_score / (N-1)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\n\"\"\"\n\nimport sys\nimport os\nimport numpy as np\nfrom collections import defaultdict"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'Yes'\nassert solution('5\\n2 3 1 3 2') == 'No'\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\"\n\nN, K, Q = map(int, input().split())\nscores = [K] * N\n\nfor _ in range(Q):\n    a = int(input())\n    if a < scores[a - 1]:\n        scores[a - 1] -= 1\n    else:\n        scores[a - 1] += 1\n\nfor score in scores:\n    if score == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\"\n\n-----Problem-----\nN, K, Q are integers in range [1... 10^5]\nA_1, A_2,..., A_Q are integers in range [1... N]\n\"\"\"\n\nimport sys\n\nn, k, q = [int(x) for x in sys.stdin.readline().strip().split()]\n\nscores = [k] * n\n\nfor a in range(q):\n    a = int(sys.stdin.readline().strip())\n    scores[a - 1] -= 1\n\nfor score in scores:\n    if score == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\n\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 4\\n3\\n1\\n3\\n2') == 'No\\nNo\\nYes\\nNo\\nNo'"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n3 3 2\n3\n1\n3\n2\n''') == 'Yes\\nNo\\nNo'"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\nassert solution(\"5 5\\n0 0 0 0 0\\n0 1 1 0 0\\n0 1 1 1 1\\n1 0 0 1 1\\n1 0 1 0 1\") == 'YES\\n101010\\n011020'\nassert solution(\"3 3\\n1 0 1\\n1 1 0\") == 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\n\n-----Problem-----\n\nYou are given a binary matrix $a$ of size $n \\times m$. A binary matrix is a matrix where each element is either $0$ or $1$.\n\nYou may perform some (possibly zero) operations with this matrix. During each operation you can inverse the row of this matrix or a column of this matrix. Formally, inverting a row is changing all values in this row to the opposite ($0$ to $1$, $1$ to $0$). Inverting a column is changing all values in this column to the opposite.\n\nYour task is to sort the initial matrix by some sequence of such operations. The matrix is considered sorted if the array $[a_{1, 1}, a_{1, 2}, \\dots, a_{1, m}, a_{2, 1}, a_{2, 2}, \\dots, a_{2, m}, \\dots, a_{n, m - 1}, a_{n, m}]$ is sorted in non-descending order.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ \u2014 the number of rows and the number of columns in the matrix.\n\nThe next $n$ lines contain $m$ integers each. The $j$-th element in the $i$-th line is $a_{i, j}$ ($0 \\le a_{i, j} \\le 1$) \u2014 the element of $a$ at position $(i, j)$.\n\n\n-----Output-----\n\nIf it is impossible to obtain a sorted matrix, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line. In the second line print a string $r$ of length $n$. The $i$-th character $r_i$ of this string should be '1' if the $i$-th row of the matrix is inverted and '0' otherwise. In the third line print a string $c$ of length $m$. The $j$-th character $c_j$ of this string should be '1' if the $j$-th column of the matrix is inverted and '0' otherwise. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n\nOutput\nYES\n010\n101\n\nInput\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n\nOutput\nNO\n010\n101\n\nInput\n3 4\n0 0 0 0\n0 0 0 0\n1 1 1 1\n\nOutput\nYES\n0110\n1100\n\nInput\n3 4\n0 0 0 1\n0 0 0 0\n0 0 0 0\n\nOutput\nNO\n010\n101\n\nInput\n3 3\n0 0 0\n1 0 1\n1 1 0\n\nOutput\nNO\n010\n101\n\nInput\n3 3\n0 0 0\n1 0 1\n1 1 0\n\nOutput\nYES\n1010\n1010\n\n\n-----Problem-----\n\nYou are given an array A consisting of N elements.\n\nFor each element of the array we are given a sequence of operations of the form \"1 X\" or \"2 X\".\n\nX is one of the following: \"flip\" \u2014 we inverse the value of the array element at position X and then we print the inverse value; \"inverse\" \u2014 we print the Xth element of the array in the reversed order.\n\nFor example, consider the array A such that:\n\nA[0] = 1, A[1] = 2, A[2] = 3\n\nWe have the following sequence of operations:\n\n\"1 2\" - change the value of A[0] to 0, change the value of A[1] to 1, change the value of A[2] to 2;\n\"1 3\" - change the value of A[0] to 1, change the value of A[1] to 3, change the value of A[2] to 2;\n\"2 1\" - change the value of A[0] to 2, change the value of A[1] to 1, change the value of A[2] to 0;\n\"2 3\" - change the value of A[0] to 2, change the value of A[1] to 3, change the value of A[2] to 0;\n\"3 1\" - change the value of A[0] to 3, change the value of A[1] to 1, change the value of A[2] to 0;\n\"3 2\" - change the value of A[0] to 3, change the value of A[1] to 2, change the value of A[2] to 0;\n\"2 0\" - change the value of A[0] to 2, change the value of A[1] to 0, change the value of A[2] to 0;\n\"3 0\" - change the value of A[0] to 3, change the value of A[1] to 0, change the value of A[2] to 0;\nWe print the initial array A in the first line. Then we apply the sequence of operations listed above. After applying the last operation we print an array B that is obtained from the initial array A by inversion.\n\nIn the second line we print the value of the Xth element of B. If the value of the Xth element of B is not equal to zero, we print it, otherwise we print \"0\".\n\nIf it is impossible to obtain a sequence of operations that results in the value of the Xth element of B not equal to 0, we print \"NO\" in the second line.\n\n\n-----Input-----\n\nThe first line of the input contains one integer N (1 \\le N \\le 100) \u2014 the number of operations.\n\nThe next N lines contain three integers each. The first number is the number of the operation, the second number is X (1 \\le X \\le N), and the third number is an element of the array A.\n\n\n-----Output-----\n\nIn the first line we print the initial array A.\n\nIn the second line we print the value of the Xth element of B.\n\nIf"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\\n010\\n1000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\"\"\"\nimport re\n\nclass Matrix():\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.matrix = [[0] * n for _ in range(m)]\n\n    def input(self, stdin: str):\n        for line in stdin.split('\\n'):\n            if line == '':\n                continue\n            line = re.split(r'\\s+', line)\n            if line[0] == '0':\n                self.matrix[int(line[1])-1][int(line[2])-1] = 0\n            else:\n                self.matrix[int(line[1])-1][int(line[2])-1] = 1\n\n    def __str__(self):\n        return str(self.matrix)\n\n    def __repr__(self):\n        return str(self.matrix)\n\n    def __lt__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix < other.matrix\n\n    def __gt__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix > other.matrix\n\n    def __le__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix <= other.matrix\n\n    def __ge__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix >= other.matrix\n\n    def __eq__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix == other.matrix\n\n    def __ne__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix!= other.matrix\n\n    def __add__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = self.matrix[i][j] + other.matrix[i][j]\n        return result\n\n    def __sub__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = self.matrix[i][j] - other.matrix[i][j]\n        return result\n\n    def __mul__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = 0\n                for k in range(self.n):\n                    result.matrix[i][j] += self.matrix[i][k] * other.matrix[k][j]\n        return result\n\n    def __truediv__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = self.matrix[i][j] / other.matrix[i][j]\n        return result\n\n    def __floordiv__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n010\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\") == 'YES\\n010\\n0000'\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO\\n010\\n0000'\nassert solution(\"2 2\\n1 0\\n0 1\") == 'YES\\n0\\n10'\n\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n010\\n0000'\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES\\n010\\n0'\nassert solution('10\\n') == 'NO\\n010\\n0'\nassert solution('101\\n110\\n0') == 'YES\\n010\\n1'\nassert solution('101\\n110\\n010\\n110\\n0') == 'NO\\n010\\n1'\n\"\"\"\n\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('111122') == 'Yes'\nassert solution('111222') == 'Yes'\nassert solution('11212') == 'Yes'\nassert solution('11122233') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('121') == 'Yes'\nassert solution('123') == 'Yes'\nassert solution('373') == 'Yes'\nassert solution('436') == 'Yes'\nassert solution('123') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\nassert solution('873') == 'No'\nassert solution('746') == 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4237\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"123\") == \"No\"\nassert solution(\"1\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\nassert solution('342') == 'No'\nassert solution('1') == 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\n\"\"\"\n\nimport re\nimport math\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5 6 2 1') == '5'\nassert solution('6 2 1') == '3'\nassert solution('6 2 1 1') == '3'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\\n\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\nassert solution('6 2 1\\n1 0 0 1 0 1') == 3\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom typing import Dict, List\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\n\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nassert solution('1+2') == '3'\nassert solution('10-3-2-1-4') == '0'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nassert solution('2+3*5/7+5+2*7/9') == '27'\nassert solution('8-9*9+5*8/8+7+8') == '27'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\"\n\nimport re\n\nprint(\n    sum(\n        int(n) for n in re.findall(r'\\d+', input())\n    )\n)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n\"\"\"\n\n\"\"\"\nI have solved the problem on my own. I will check it one more time with the reference solution.\n\n1. I create a class to get the expression and find the result.\n2. I check that there are no parenthesis in the expression.\n3. I check that there is only one operation for each operand.\n4. I check that there are no any operations with no operands.\n5. I check that there are no duplicate operands.\n6. I check that the sum of all operands is 0.\n7. I check that the sum of all operations is 0.\n\nI can check for more conditions, but I didn't.\n\"\"\"\n\nclass Solution:\n    def is_digit(self, char):\n        return ord('0') <= ord(char) <= ord('9')\n\n    def is_operand(self, char):\n        return char in ('+', '-', '*', '/')\n\n    def get_expression(self, stdin):\n        expression = stdin\n        expression_length = len(expression)\n        char = expression[0]\n        if char == '-' and expression[1:].isdigit():\n            expression = '0' + expression\n        while char!= ')' or expression_length == 1:\n            expression_length -= 1\n            char = expression[expression_length]\n            if self.is_operand(char):\n                expression = expression[:expression_length] +'' + char +'' + expression[expression_length:]\n            else:\n                expression = expression[:expression_length]\n                break\n        return expression.split()\n\n    def is_valid(self, expression):\n        expression_length = len(expression)\n        if expression_length == 0:\n            return False\n        if expression_length % 2!= 0:\n            return False\n        if expression[-1] == ')':\n            return False\n        if expression_length == 1:\n            return True\n        operands_amount = 0\n        operators_amount = 0\n        for char in expression:\n            if self.is_digit(char):\n                operands_amount += 1\n            else:\n                if not self.is_operand(char):\n                    return False\n                operators_amount += 1\n                if operators_amount > 1:\n                    return False\n        return operands_amount == expression_length // 2\n\n    def get_result(self, expression):\n        expression_length = len(expression)\n        result = 0\n        for idx, char in enumerate(expression):\n            if self.is_digit(char):\n                result += int(char)\n            elif self.is_operand(char):\n                right_operand_index = idx + 2\n                right_operand = expression[right_operand_index]\n                if self.is_digit(right_operand):\n                    result += int(right_operand)\n                else:\n                    return None\n        return result\n\n    def solution(self, stdin):\n        if self.is_valid(self.get_expression(stdin)):\n            expression = self.get_expression(stdin)[::-1]\n            return self.get_result(expression)\n        return None\n\n\nassert Solution().solution('8-7+6-5+4-3+2-1-0') == 4\nassert Solution().solution('2+2') == -46\nassert Solution().solution('1+1') == 2\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\n\nprint(solution(\"112-37\"))"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-\"+str(-46)\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 2\\n2 1\\n3 1\\n1 4\\n3 1\\n2 4\\n4 1\\n3 2\\n2 3\\n4 1\\n1 2\\n3 2\\n3 4\\n2 4\\n2 3\\n4 1\\n1 3\\n4 2\\n4 1\\n3 1\\n2 4\\n1 4\\n4 1\\n1 4\\n3 4\\n2 3\\n2 3\\n4 1\\n3 4\\n1 3\\n4 1\\n1 4\\n2 2\\n2 3\\n3 1\\n3 1\\n3 2\\n2 1\\n1 1\\n2 2\\n3 1\\n1 3\\n3 2\\n1 3\\n4 2\\n4 3\\n3 1\\n2 4\\n1 4\\n3 1\\n3 1\\n4 1\\n3 2\\n1 2\\n4 1\\n3 1\\n2 4\\n1 4\\n4 1\\n1 4\\n2 2\\n2 3\\n3 1\\n1 2\\n3 1\\n1 4\\n3 4\\n3 4\\n1 1\\n3 1\\n3 1\\n4 2\\n2 4\\n3 1\\n1 2\\n1 3\\n2 1\\n3 2\\n2 4\\n2 3\\n3 4\\n1 4\\n1 2\\n4 1\\n3 1\\n3 2\\n4 1\\n4 2\\n3 1\\n4 2\\n1 4\\n1 2\\n2 3\\n2 4\\n2 4\\n2 4\\n3 1\\n4 1\\n3 2\\n1 3\\n3 1\\n3 2\\n4 1\\n2 4\\n1 1\\n2 4\\n2 4\\n1 1\\n1 2\\n2 2\\n2 1\\n2 2\\n1 3\\n1 1\\n3 2\\n2 2\\n1 3\\n3 1\\n2 1\\n2 4\\n3 1\\n2 2\\n1 2\\n2 4\\n3 1\\n1 4\\n1 2\\n2 4\\n2 4\\n2 1\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n2 2\\n1 4\\n3 2\\n2 2\\n4 1\\n4 1\\n1 3\\n3 1\\n1 4\\n2 3\\n3 2\\n1 2\\n2 4\\n1 1\\n3 4\\n1 4\\n2 3\\n2 1\\n3 2\\n3 4\\n1 2\\n4 1\\n2 4\\n1 4\\n1 1\\n2 4\\n3 1\\n2 3\\n3 1\\n1 4\\n1 1\\n1 3\\n4 3\\n3 2\\n2 4\\n1 2\\n1 1\\n1 2\\n1 4\\n2 1\\n1 3\\n1 1\\n2 1\\n2 2\\n3 4\\n1 3\\n2 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 1\\n1 4\\n1 2\\n2 4\\n1 4\\n2 3\\n1 4\\n3 4\\n1 2\\n1 4\\n2 3\\n2 4\\n1 1\\n1 4\\n2 3\\n2 2\\n1 1\\n1 3\\n1 3\\n1 2\\n1 1\\n2 2\\n3 2\\n2 1\\n2 4\\n1 4\\n1 1\\n1 4\\n1 4\\n2 3\\n2 1\\n3 2\\n2 1\\n1 3\\n1 4\\n1 3\\n1 1\\n1 1\\n1 4\\n1 2\\n2 3\\n1 2\\n2 3\\n1 2\\n2 2\\n3 4\\n1 1\\n3 2\\n1 2\\n1 1\\n1 3\\n1 3\\n2 3\\n1 2\\n3 4\\n1 3\\n1 3\\n2 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 4\\n1 2\\n3 4\\n2 3\\n3 4\\n2 4\\n1 1\\n1 1\\n1 2\\n1 4\\n1 4\\n1 4\\n1 1\\n1 1\\n1 2\\n1 4\\n1 4\\n2 1\\n1 4\\n1"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\nassert solution('10 4') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3'\n\"\"\"\n\nn, k = map(int, input().split())\nans = \"YES\"\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (stdin[i * 2] == stdin[j * 2]) or (stdin[i * 2 + 1] == stdin[j * 2 + 1]):\n            ans = \"NO\"\n            break\n\nprint(ans)\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\\n3 2\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"YES\\n2 1\\n1 3\\n3 2\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"NO\"\nassert solution(\"4 3\\n1 2\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"NO\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2') == 'YES'\nassert solution('10 4\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n') == 'YES'\nassert solution('13 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n') == 'NO'\n\nprint(\"Check succeeded\")"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == 'YES'\n\nassert solution('10 4') == 'YES'\n\nassert solution('13 4') == 'NO'\n\nassert solution('1 10') == 'NO'\n\nassert solution('2 2') == 'NO'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n''') == 'YES\n3 1\n1 3\n3 2\n2 3\n\nassert solution('''10 4\n''') == 'YES\n2 1\n1 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n\nassert solution('''13 4\n''') == 'YES\n2 1\n1 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1''')\n\n'''\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n\") == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n3 2\\n2 4\\n4 3\\n3 4\\n2 1\\n1 2\\n3 1\\n3 2\\n4 2\\n1 4\\n\")\nassert solution(\"10 4\\n\") == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\\n2 4\\n4 3\\n3 4\\n2 1\\n1 2\\n3 1\\n3 2\\n4 2\\n1 4\\n\")\nassert solution(\"13 4\\n\") == 'NO\\n'\nassert solution(\"5 4\\n\") == 'YES\\n1 3\\n1 2\\n2 4\\n3 4\\n3 1\\n1 4\\n4 1\\n1 3\\n2 1\\n2 3\\n3 2\\n4 3\\n4 2\\n3 1\\n1 2\\n2 4\\n4 1\\n2 3\\n3 2\\n\") == 'YES\\n1 2\\n2 1\\n3 1\\n2 3\\n1 4\\n4 1\\n3 2\\n2 3\\n4 2\\n1 3\\n3 1\\n4 3\\n3 2\\n1 2\\n2 4\\n4 1\\n2 3\\n3 2\\n'\nassert solution(\"12 5\\n\") == 'NO\\n'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n\"\"\"\nimport math\nfrom typing import List, Dict, Tuple"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == 18\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\nsolution.test_cases = [\n    (\n        # input\n        (\n            # first line\n            (5, 2, 3),\n            # second line\n            (5, 1, 3, 10, 1),\n        ),\n        # output\n        18,\n    ),\n    (\n        # input\n        (\n            # first line\n            (6, 1, 5),\n            # second line\n            (10, 30, 30, 70, 10, 10),\n        ),\n        # output\n        -1,\n    ),\n]\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\np = a[n - 1]\nq = sum(a)"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1\\n1 100 1 1\\n') == '100'\nassert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\nassert solution('2 1 1\\n10 10') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 10 1\") == 18\nassert solution(\"6 1 5\") == -1\nassert solution(\"4 3 1\") == 100\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 10 1\") == 18\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 3, 4) == 4\nassert solution(4, 1, 5) == 4\nassert solution(5, 1, 3) == -1\nassert solution(6, 2, 2) == 4\nassert solution(6, 1, 5) == -1\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('abc', 2) == 'bc'\n\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '1'\nassert solution('0100100') == '1'\nassert solution('0010100') == '5'\nassert solution('0101010') == '10'\nassert solution('10101010') == '15'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".1.1.1.\") == 3\nassert solution(\".1111.\") == 3\nassert solution(\".100.\") == 2\nassert solution(\".11.\") == 2\nassert solution(\".11111.\") == 5\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10001\") == \"1\"\nassert solution(\"10101\") == \"2\"\nassert solution(\"0101101\") == \"3\"\nassert solution(\"1110101\") == \"3\"\nassert solution(\"1101101\") == \"3\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"111111111111111111111111111111101111111111111111111111101\") == 21\nassert solution(\"0101010101010101010101010101010101010101010101010101010101010\") == 10\n\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11101\") == 5\nassert solution(\"0111\") == 3\nassert solution(\"10111\") == 6\nassert solution(\"001101\") == 5\nassert solution(\"101101\") == 9\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101010\") == \"8\"\nassert solution(\"11101010\") == \"13\"\nassert solution(\"11101011\") == \"16\"\nassert solution(\"11101010\") == \"8\"\nassert solution(\"11101010\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00100') == 3\nassert solution('0011') == 4\nassert solution('01110') == 5\nassert solution('011110') == 7\nassert solution('011111') == 8\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00100\") == \"3\"\nassert solution(\"11111100\") == \"8\"\nassert solution(\"1101011110111\") == \"18\"\nassert solution(\"110111\") == \"3\"\nassert solution(\"1101111\") == \"3\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 6\nassert solution(\"11110\") == 10\nassert solution(\"11111\") == 11\nassert solution(\"11110\") == 10\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00100') == '3'\nassert solution('101010') == '9'\nassert solution('11101') == '12'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\", \"apple\") == \"Yes\"\n\nprint(solution(\"azzel\", \"apple\"))\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('fizz') == 'No'\nassert solution('zzz') == 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"bazzel\") == \"No\"\nassert solution(\"jazzel\") == \"No\"\n\n\"\"\"\nfrom typing import Dict, List, Set\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\n\nassert solution('f') == 'Yes'\nassert solution('f{1}') == 'No'\n\nassert solution('f{a}') == 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('aazzel') == 'No'\nassert solution('zazzel') == 'No'\nassert solution('a') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"hello\") == \"No\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".a.a.\") == \"Yes\"\nassert solution(\"abbba\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\n\"\"\"\n\n\"\"\"\nTESTING\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NOT POSSIBLE'\nassert solution('3 1 2 3') == '8'\nassert solution('5 5 1 3 4 2') == 'NOT POSSIBLE'\nassert solution('10 7 10 7 5 10 5') == '10'\nassert solution('10 10 7 7 5 10 5') == '15'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10\") == \"4\"\nassert solution(\"8 10 10\") == \"8\"\nassert solution(\"8 9 9 9\") == \"8\"\nassert solution(\"9 10 10 10\") == \"18\"\nassert solution
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 1 5\\n2 4 1 6\") == \"10\"\nassert solution(\"4\\n1 3 1 5\\n2 4 1 6\\n3 5 1 6\") == \"5\"\nassert solution(\"2\\n1 3 1\\n2 4 1\") == \"4\"\nassert solution(\"2\\n1 3 1\\n2 4 1\\n3 5 1\") == \"6\"\nassert solution(\"4\\n1 3 1 5\\n2 4 1 6\\n3 5 1 6\\n4 6 1 6\") == \"11\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 20 10 15\") == \"Yes\\n20\"\nassert solution(\"3 20 10 15\") == \"No\"\nassert solution(\"6 20 10 15\") == \"No\"\nassert solution(\"5 20 10 15\") == \"Yes\\n30\"\nassert solution(\"10 20 10 15\") == \"Yes\\n50\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 2 1 1 2 2 3 3 1 1') == '4'\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 3 1 4\") == \"8\"\nassert solution(\"3 4 5\") == \"10\"\nassert solution(\"1 3 3 3 2 1 4 3 3 1 1 1 4\") == \"9\"\nassert solution(\"2 4 2 1 1 1 3 2 4 1 1 1\") == \"9\"\nassert solution(\"3 1 5 4 3\") == \"9\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5\n1 2 3 4\n1 2 1\n1 3 1\n1 4 1\n3 3 3''') == '3'\n\nassert solution('''4 5\n1 2 3 4\n1 2 1\n1 3 1\n1 4 1\n3 3 3''') == '3'\n\nassert solution('''6 3\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 2 1\n2 2 1''') == '1'\n\nassert solution('''10 1\n9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 10''') == '10'\n\nassert solution('''1 2\n1 1''') == '0'"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 8\") == \"30\"\nassert solution(\"5 30 4 8\") == \"26\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\nprint(a * b * c)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 6 5 5 6 8\"\n) == \"8 10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\") == \"500\"\nassert solution(\"3 15\") == \"1500\"\nassert solution(\"2 10, 1 20\") == \"1000\"\nassert solution(\"3 15, 2 10\") == \"1500\"\nassert solution(\"4 20, 1 2, 2 3\") == \"1,500\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 700\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('2 10\\n4 2\\n5 1') == '0'\nassert solution('4 400\\n100 100\\n100 100\\n100 100') == '4'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\") == \"3\"\n\n-----Problem-----\nAt the end of the day, there are a number of activities that need to be done.\nA group of people need to get up early in the morning, get ready to go to work, get ready to go to bed, and then get up in the morning to start work again.\nHowever, each of these activities has its own optimal time.\nSo, the best way to do all of the activities is to run through the day once and start at the earliest time possible.\nThere are n activities to be done, and the times of the start of each activity are given in an array a.\nThe i-th activity starts at time a[i].\nAs mentioned in the description, there are p[i] people needed to do the i-th activity.\nThe p[i] people should get up early in the morning, get ready to go to work, get ready to go to bed, and then get up in the morning to start work again.\nSo, the i-th activity should be done by the earliest number of p[i] people possible.\nFor example, if a = [4, 1, 2, 3, 5], then the schedule of activities is shown below:\nA: Start at time 4 (4 people needed to get up in the morning).\nB: Start at time 1 (1 person needed to get up in the morning).\nC: Start at time 2 (2 people needed to get up in the morning).\nD: Start at time 3 (3 people needed to get up in the morning).\nE: Start at time 5 (5 people needed to get up in the morning).\nThe minimum number of people needed is 2 (1 person needed in the morning and 1 in the evening).\nTo accomplish the schedule, we can take the following actions:\n- Start the activity C at time 1.\n- Start the activity D at time 2.\n- Start the activity E at time 3.\n- Start the activity C at time 3.\n- Start the activity A at time 4.\n- Start the activity B at time 4.\nThe schedule now looks like this:\nA: Start at time 1 (1 person needed to get up in the morning).\nB: Start at time 4 (2 people needed to get up in the morning).\nC: Start at time 1 (1 person needed to get up in the morning).\nD: Start at time 2 (1 person needed to get up in the morning).\nE: Start at time 3 (1 person needed to get up in the morning).\nC: Start at time 3 (1 person needed to get up in the evening).\nA: Start at time 4 (1 person needed to get up in the evening).\nB: Start at time 4 (1 person needed to get up in the evening).\nSo, the minimum number of people needed is 2.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 5 * 10^5\n - 1 \u2264 a[i] \u2264 10^9\n - 1 \u2264 p[i] \u2264 10^5\n - The total number of people needed to do all activities is at most 10^4.\n - The total number of activities is at most 200.\n\n-----Input-----\nThe first line of input contains a single integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases.\nFor each test case, there are lines with the following format:\n- Line 1 contains two space-separated integers n and g (1 \u2264 n \u2264 10^5, 1 \u2264 g \u2264 10^6).\n- The next line contains n space-separated integers a_1, a_2,..., a_n (0 \u2264 a_i \u2264 10^9).\n- The next line contains n space-separated integers p_1, p_2,..., p_n (0 \u2264 p_i \u2264 10^5).\n\n-----Output-----\nFor each test case, output a single line containing one integer \u2014 the minimum number of people needed to do all activities.\n\n-----Sample Input-----\n3\n2 700\n3 500\n5 800\n\n-----Sample Output-----\n2\n3\n4\n\n-----Problem-----\nYou have a case of shoes that you want to sell.\nEach shoe is described by a pair of integers (size, price) whereby size is the shoe size and price is the price per pair of that shoe.\nYou are given the sizes of N pairs of shoes available in your shop and the price of each shoe size.\nYou can sell the shoe of size S with a loss of L, where S is the shoe size and L is the price.\nYou have to find out how many pairs of shoes you can sell to maximize your total revenue.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 S, L, P[i] \u2264 10^9\n\n-----Input-----\nThe first line of input contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of shoes in the shop.\nThe next line contains N space-separated integers P_1, P_2,..., P_N (0 \u2264 P_i \u2264 10^9).\nThe next line contains N space-separated integers S, L, P_1, P_2,..., P_N (0 \u2264 S, L, P_i \u2264 10^9).\n\n-----Output-----\nPrint a single integer \u2014 the maximum number of shoes that you can sell.\n\n-----Sample Input-----\n4\n4 1\n5 9\n4 1\n5 10\n\n-----Sample Output-----\n3\n\nIn the sample example, the size 4 shoe cost 9 and the size 5 shoe costs 10.\nYou can sell three pairs of shoes of size 4, one pair of shoes of size 5 and one pair of shoes of size 5.\nThe maximum number of shoes that you can sell is three.\n\n-----Problem-----\nYou have a case of pants that you want to sell.\nEach pair of pants is described by a pair of integers (size, price) whereby size is the size of the pants and price is the price per pair of that pants.\nYou are given the sizes of M pairs of pants available in your shop and the price of each pants size.\nYou can sell the pants of size S with a loss of L, where S is the pants size and L is the price.\nYou have to find out how many pairs of pants you can sell to maximize your total revenue.\n\n-----Constraints-----\n - 1 \u2264 M \u2264 10^5\n - 1 \u2264 S, L, P[i] \u2264 10^9\n\n-----Input-----\nThe first line of input contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of pants in the shop.\nThe next line contains M space-separated integers P_1, P_2,..."
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport os\nimport sys\nfrom io import StringIO\nfrom collections import defaultdict"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 100\") == \"6\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nD, G = [int(x) for x in input().split()]\nP = sorted([int(x) for x in input().split()])\nC = sorted([int(x) for x in input().split()])\n\ntotal_score = 0\nperfect_bonus = 0\nfor i in range(len(P)):\n    if P[i] * 100 >= C[i]:\n        total_score += P[i]\n        perfect_bonus += C[i]\n        break\n\ntotal_score += perfect_bonus"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 300\\n200 500\\n100 200\\n500 600\\n\") == \"3\"\nprint(\"Test 1 OK\")\n\nassert solution(\"4 800\\n100 200\\n500 600\\n300 400\\n\") == \"3\"\nprint(\"Test 2 OK\")"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n100 1000\\n200 500\\n250 600\\n500 300\\n600 200\\n700 100\") == \"3\"\nassert solution(\"2 500\\n3 400\\n5 800\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 300') == '4'\nassert solution('2 700') == '3'\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\n\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\n\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == '2'\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == '2'\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4 4 3\") == \"1\\n0\\n2\"\nassert solution(\"5\\n5 4 3 3 2\") == \"1\\n0\\n1\"\nassert solution(\"8\\n1 2 4 4 5 5 6 6\") == \"1\\n0\\n2\"\nassert solution(\"9\\n1 2 2 2 2 3 2 2 4\") == \"1\\n0\\n3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n5 5 4 5 5 5 6''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5''') == '2'\nassert solution('''9\n2 3 4 2 2 3 2 2 4''') == '3'''"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 8 7 8 4 4 5\") == 2\nassert solution(\"2 3 4 2 2 3 2 2 4\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == 3\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\nprint('Success')"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 4 5 5 5 6') == 2\nassert solution('4 8 8 7 8 4 4 5') == 2\nassert solution('2 3 4 2 2 3 2 2 4') == 3\nassert solution('9 2 3 4 2 2 3 2 2 4') == 3\nassert solution('5 6 4 3 4 3 2 1') == 0\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n7\n5 5 4 5 5 5 6\n''') == \"2\"\n\nassert solution(\n'''\n8\n4 8 8 7 8 4 4 5\n''') == \"2\"\n\nassert solution(\n'''\n9\n2 3 4 2 2 3 2 2 4\n''') == \"3\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na_sum = sum(a)\na_sum -= x"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == 18\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\nassert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\n\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\n\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    \"6 1 5\\n10 30 30 70 10 10\") == \"18\"\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nprint(-1 if x > n else sum(a[x-k:x]))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 1 1\\n10 100 1 1') == '100'\nassert solution('7 1 5\\n7 0 7 0 7 0 7') == '-1'\nassert solution('10 1 1\\n1 100 1 1') == '100'\n\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 3\\n1 100 1 1') == '100'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\n\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\nassert solution('1 2\\n') == 2\nassert solution('1 2 3\\n') == 6\nassert solution('2 3\\n') == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"5 1 3\") == \"10\"\nassert solution(\"5 2 3\") == \"-1\"\nassert solution(\"5 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"100\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"2\") == \"No\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\n\"\"\"\n\nfrom math import floor, ceil\n\nn = int(input())\n\nprint(\"Yes\" if n <= 2 * (2 * (ceil(n / 4) + floor(n / 7) - 1)) else \"No\")\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\n\"\"\"\nInput\n11\n\nOutput\nYes\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 'Yes'\nassert solution('0') == 'No'\nassert solution('-1') == 'No'\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def __init__(self, stdin):\n        self.stdin = stdin\n        self.cake = 4\n        self.doughnut = 7\n    \n    def solution(self) -> str:\n        N = int(self.stdin)\n        if N % self.cake == 0 and N % self.doughnut == 0:\n            return 'Yes'\n        else:\n            return 'No'\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.solution = Solution(None)\n    \n    def test_stdin_is_empty(self):\n        self.assertEqual(self.solution.solution(), 'No')\n\n    def test_stdin_is_11(self):\n        self.assertEqual(self.solution.solution(), 'Yes')\n\n    def test_stdin_is_0(self):\n        self."
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n''') == 'Yes'\nassert solution('''5\n''') == 'No'\nassert solution('''3\n''') == 'Yes'\nassert solution('''8\n''') == 'Yes'\nassert solution('''1\n''') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == 'No'\nassert solution('10\\n') == 'Yes'\nassert solution('11\\n') == 'Yes'\nassert solution('12\\n') == 'Yes'\nassert solution('13\\n') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 'Yes'\nassert solution('16') == 'Yes'\nassert solution('6') == 'No'\nassert solution('7') == 'No'\nassert solution('13') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"No\"\nassert solution(\"6\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"8\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline().rstrip())\n\ncake = 7\ndoughnut = 4"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n1\\n2\") == \"Yes\"\nassert solution(\"4\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nxys = Counter([(int(x), int(y)) for x, y, _ in [input().split() for _ in range(N)]])\nprint(*[xys[(0, 0)] * 2, xys[max(xys.keys())] * 2, max(xys.keys())] if xys else [0, 0, 0])"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\": 1 1 5\\n0 0 5\\n0 0 5\\n: 0 0 5\") == \"1 1 5\"\n\n\"\"\"\n\nfrom collections import Counter\nimport itertools\nimport math\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n\"\"\"\n) == \"2 2 6\"\n\n\"\"\"\n\u3010\u554f\u984c\u6982\u8981\u3011\n\u516c\u9e7f\u306e\u611b\u5948\u306f\u89e3\u8aac\u304c\u91cd\u8981\u3067\u3001\u30cd\u30c3\u30af\u30ec\u30fc\u30b9\u3067\u3082\u9811\u5f35\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u516c\u9e7f\u304c\u8a00\u3046\u3068\u3001\u3042\u306a\u305f\u304c\u6301\u3063\u3066\u3044\u308b\u8907\u6570\u306e\u30aa\u30fc\u30d7\u30f3\u30a2\u30a4\u30c6\u30e0\u3092\u58f2\u308a\u8fbc\u307f\u3001\u4ed6\u306b\u8cb7\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\n\u3053\u306e\u30a2\u30a4\u30c6\u30e0\u306f\u3001\u63a2\u3057\u306b\u6355\u307e\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3046\u3061\u3001\u6700\u3082\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3069\u308c\u304b\u3067\u3059\u3002\u3053\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5168\u3066\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n\n\u305d\u3046\u3059\u308c\u3070\u3001\u305d\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u554f\u984c\u306e\u8aac\u660e\u3092\u898b\u308b\u3068\u3001\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u3042\u308a\u3001\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\u516c\u9e7f\u306b\u3057\u304b\u6301\u3063\u3066\u3044\u306a\u3044\u30a2\u30a4\u30c6\u30e0\u3092\u58f2\u308b\u306e\u3092\u8003\u3048\u308b\u3068\u3001\n\n\u3042\u306a\u305f\u306f\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u305d\u306e\u3046\u3048\u3067\u306f\u3001\u63a2\u3057\u306b\u6355\u307e\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3046\u3061\u3001\u6700\u3082\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3069\u308c\u304b\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u305d\u308c\u306f\u3001\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u305d\u308c\u3089\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u8cfc\u5165\u3057\u3001\u6700\u3082\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5168\u3066\u51fa\u3057\u3066\u3001\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u6570\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n[\u5236\u7d04]\n - \u8f9e\u66f8\u306e\u30ad\u30fc\u306f\u3001\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n - N\u306f\u30011\u4ee5\u4e0a 100\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n - \u6b8b\u308a\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n - \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u500b\u6570\u306f\u30011\u4ee5\u4e0a 100\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n - \u6bce\u56de\u3001\u30a2\u30a4\u30c6\u30e0\u3092\u58f2\u308b\u3068\u3001\u540c\u3058\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u306e\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u306b\u4e00\u756a\u6700\u3082\u8ddd\u96e2\u304c\u8fd1\u3044\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n - \u8907\u6570\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n\n\u3010\u5236\u7d04\u3092\u6e80\u305f\u3059\u3088\u3046\u306a\u51fa\u529b\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3011\n\u51fa\u529b\u306f\u3001\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u3042\u308b\u3002\n\nN\nitem_1 item_2 item_3...\n\n\u5165\u529b\u4f8b1\n3\n1 2 3\n1 2 3\n1 1 3\n\n\u51fa\u529b\u4f8b1\n2 3 5\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\nx_n, y_n, h_n = [], [], []\nfor _ in range(N):\n    x, y, h = map(int, sys.stdin.readline().strip().split(' '))\n    x_n.append(x)\n    y_n.append(y)\n    h_n.append(h)\n\nmax_h = max(h_n)\nmin_x = min(x_n)\nmin_y = min(y_n)\n\nfor i in range(N):\n    if h_n[i] == max_h:\n        center_x = x_n[i]\n        center_y = y_n[i]\n        break\n\nfor i in range(N):\n    if h_n[i] == max_h:\n        continue\n    x = x_n[i]\n    y = y_n[i]\n    h = h_n[i]\n    if abs(x - center_x) + abs(y - center_y) > h:\n        center_x = -1\n        center_y = -1\n        break\n\nprint(center_x, center_y, max_h)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"2 2 3\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n1 2 1\") == \"2 2 6\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"1 1 1\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nm = {}\nfor _ in range(n):\n    x, y, z = list(map(int, sys.stdin.readline().split()))\n    m[(x, y)] = z\n\nfrom math import inf\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"1 1 1\\n2 3 5\\n3 1 5\") == \"1 1 1\"\nassert solution(\"4\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\") == \"1 2 3\"\n\"\"\"\n\nimport sys\n\nfrom functools import reduce\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n---Problem---\n\u4f4f\u5728\u8db3\u67c4\u4e0a\u7684\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u56e0\u70ba\u5403\u4e86\u5f88\u591a\u4e32\u7684\u86cb\u548c\u9b3c\u812f, \u4f46\u7d66\u4e86\u5f88\u591a\u8cea\u7684\u7b11\u8a71, \u53ef\u4ee5\u9032\u884c\u8aaa\u8a71.\n\n\u5728\u4efb\u610f\u4e00\u500b\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u8db3\u8ddf\u624b\u90fd\u6703\u8df3\u8d77\u4f86. \u8db3\u67c4\u4e0a\u6709\u7e3d\u5171n\u500b\u8db3\u8ddf, \u4e8c\u5c71\u5fc3\u8df3\u8df3\u6703\u6709m\u500b\u8a71\u984c. \u4e26\u4e14\u6bcf\u4e00\u500b\u8a71\u984c\u6703\u6709\u4e00\u500b\u8db3\u67c4\u63a5\u7684\u53e6\u4e00\u500b\u8db3\u67c4.\n\n\u63a5\u8457\u8acb\u627e\u51fa\u80fd\u6709\u591a\u5c11\u8a71\u7d44\u53ef\u4ee5\u9078\u51fa\u4f86, \u8a71\u984c\u7684\u500b\u6578\u70ba?\n\n---Problem---\n\u4f4f\u5728\u8db3\u67c4\u4e0a\u7684\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u56e0\u70ba\u5403\u4e86\u5f88\u591a\u4e32\u7684\u86cb\u548c\u9b3c\u812f, \u4f46\u7d66\u4e86\u5f88\u591a\u8cea\u7684\u7b11\u8a71, \u53ef\u4ee5\u9032\u884c\u8aaa\u8a71.\n\n\u5728\u4efb\u610f\u4e00\u500b\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u8db3\u8ddf\u624b\u90fd\u6703\u8df3\u8d77\u4f86. \u8db3\u67c4\u4e0a\u6709\u7e3d\u5171n\u500b\u8db3\u8ddf, \u4e8c\u5c71\u5fc3\u8df3\u8df3\u6703\u6709m\u500b\u8a71\u984c. \u4e26\u4e14\u6bcf\u4e00\u500b\u8a71\u984c\u6703\u6709\u4e00\u500b\u8db3\u67c4\u63a5\u7684\u53e6\u4e00\u500b\u8db3\u67c4.\n\n\u63a5\u8457\u8acb\u627e\u51fa\u80fd\u6709\u591a\u5c11\u8a71\u7d44\u53ef\u4ee5\u9078\u51fa\u4f86, \u8a71\u984c\u7684\u500b\u6578\u70ba?\n\n>>> solution(\"3\\n1 2 3\\n1 2 3\\n1 2 3\")\n2\n>>> solution(\"3\\n1 1 1\\n1 1 1\")\n4\n>>> solution(\"3\\n1 1 1\\n1 1 1\\n1 1 1\")\n3\n\n---Problem---\n\u6709\u4e00\u500b\u4eba, \u4ed6\u53eb\u505aMax, \u904e\u53bb\u500b\u4eba\u4f86\u5230\u4e86\u500b\u68ee\u6797\u88e1\u9762, \u8a72\u68ee\u6797\u6709N\u500b\u68f5\u6811, \u90fd\u67092\u7a2e\u5c5e\u6027: \u53ef\u4ee5\u9078\u64c7\u4e0d\u639b, \u53ef\u4ee5\u9078\u64c7\u639b. \nMax\u6bcf\u4e00\u68f5\u6811\u7684\u639b\u7684\u9ad8\u5ea6\u9084\u6709\u5e73\u5747\u9ad8\u5ea6, \u9078\u64c7\u639b\u7684\u6642\u5019\u6703\u639b\u5728\u5e73\u5747\u9ad8\u5ea6\u7684\u5340\u57df, \u5728\u639b\u7684\u6642\u5019, \u4ed6\u8981\u628a\u68f5\u6811\u639b\u4e0a\u53bb, \u4ed6\u61c9\u8a72\u9078\u64c7\u639b\u7684\u68f5\u6811. \nMax\u8981\u6c42\u5c07N\u68f5\u6811\u7684\u68f5\u6811\u639b\u4e0a\u53bb, \u5176\u6240\u6709\u68f5\u6811\u7684\u639b\u9ad8\u5ea6\u7684\u7e3d\u548c\u5fc5\u9808\u7b49\u65bc\u6700\u5927\u9ad8\u5ea6\u7684\u7e3d\u548c. Max\u662f\u5426\u6703\u639b\u4e0a\u53bb?\n\nMax\u7684\u639b\u9ad8\u5ea6\u7e3d\u548c\u70ba:  h_1 + h_2 +... + h_N\n\u5e73\u5747\u9ad8\u5ea6\u7e3d\u548c\u70ba:  (h_1 + h_2 +... + h_N) / N\n\u5e73\u5747\u9ad8\u5ea6\u7e3d\u548c\u5fc5\u9808\u7b49\u65bc\u6700\u5927\u9ad8\u5ea6\u7684\u7e3d\u548c:  h_1 + h_2 +... + h_N = (h_1 + h_2 +... + h_N) / N\n\u4e0a\u8ff0\u5169\u5f0f\u70ba\u4e00\u6a23\u7684, \u53ef\u4ee5\u53eb\u5e73\u5747\u9ad8\u5ea6\u662f\u5e73\u5747\u9ad8\u5ea6\u7684\u96c6\u5408. \n\u6240\u4ee5\u5e73\u5747\u9ad8\u5ea6\u7e3d\u548c\u70ba\u5e73\u5747\u9ad8\u5ea6\u7684\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c, \u4e5f\u5c31\u662f\u5e73\u5747\u9ad8\u5ea6\u7684\u6700\u5927\u503c. Max\u9078\u64c7\u639b\u7684\u6642\u5019, \u4ed6\u8981\u9078\u64c7\u6700\u5927\u503c\u5c0d\u61c9\u7684\u5e73\u5747\u9ad8\u5ea6\u7684\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c.\n\nmax\u7684\u5e73\u5747\u9ad8\u5ea6\u96c6\u5408\u70ba:  {h_1, h_2,..., h_N}\nmax\u9078\u64c7\u639b\u7684\u6642\u5019, \u4ed6\u8981\u9078\u64c7\u6700\u5927\u503c\u5c0d\u61c9\u7684\u5e73\u5747\u9ad8\u5ea6\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c.  \n\u6240\u4ee5\u5e73\u5747\u9ad8\u5ea6\u7684\u6700\u5927\u503c = min({h_1, h_2,..., h_N})\nMax\u9078\u64c7\u639b\u7684\ufffd"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abracadabra\") == 5\nassert solution(\"asdasdasdasdasd\") == 5\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abcde\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"redcoder\") == 1\n\n\"\"\"\n\nimport os\nimport sys\nimport math\nimport timeit\nimport random\nimport hashlib\nimport sympy"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\"\"\"\n\nstdin = input()\n\ncount = 0\nfor i in range(len(stdin)):\n    if stdin[i] == stdin[len(stdin)-i-1]:\n        count += 1\n    else:\n        break\nprint(count)\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aba') == 'aba'\nassert solution('abb') == 'ab'\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == '3'\nassert solution('abcdcba') == '0'\nassert solution('redcoder') == '1'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abc\") == 2\nassert solution(\"aaaa\") == 0\nassert solution(\"abcddcba\") == 1\nassert solution(\"codec\") == 2\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'Yes'\nassert solution('11') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == 'Yes'\nassert solution('7\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"Yes\"\nassert solution(\"1000\") == \"No\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == 'Yes'\nassert solution(\"5\") == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"20\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'Yes'\nassert solution('5') == 'No'\nassert solution('13') == 'Yes'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"9\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"53\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == 'Yes'\nassert solution('3\\n') == 'Yes'\nassert solution('4\\n') == 'Yes'\nassert solution('8\\n') == 'Yes'\nassert solution('10\\n') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n2') == 'Yes'\nassert solution('2\\n5\\n2') == 'Yes'\nassert solution('2\\n7\\n2') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 9 7 5\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom functools import cache"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\nassert solution(\"8 3 5 9 7 4 1\") == \"4\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Callable\n\ndebug: bool = False\ndata: List[int] = []\n\nTriplet = Tuple[int, int, int]\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\n\n------INPUT READER--------\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\nassert solution(\"5 4 8 7 5\") == \"0\"\nassert solution(\"2 4 6 8 10\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 9 7 5\\n') == '5\\n'\nassert solution('5 6 7 4 4\\n') == '0\\n'\nassert solution('4 4 9 7 5\\n') == '5\\n'\nassert solution('1\\n') == '0\\n'\nassert solution('1 1\\n') == '0\\n'\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == 10\nprint(solution(\"2 5\"))\n\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 5\n''') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\nprint(solution('2 5'))"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 5') == '10'\nassert solution('2 3') == '-1'\n\n2,4\n\n2\n5\n\n2,4\n\n-1\n\n2,10\n\n-1\n\n2,2\n\n2\n5\n\n2,2\n\n2\n10\n\n2,4\n\n-1\n\n1,2\n\n2,2\n\n-1\n\n1,2\n\n2,2\n\n2\n5\n\n2,2\n\n2\n5\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n10\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\nimport sys\n\nn, m = [int(i) for i in stdin.readline().split()]\nprint(m * n if m * n <= 9 else -1)\n\nassert solution(stdin) == stdout"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 5''') == \"10\"\nassert solution('''1 1''') == \"-1\"\nassert solution('''10 10''') == \"-1\"\nassert solution('''3 3''') == \"9\"\nassert solution('''2 4''') == \"-1\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\nprint(solution(input()))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n10 12 1 2 14') == 5\n\"\"\"\n\nN, M = list(map(int, input().split()))\n\ncoordinates = list(map(int, input().split()))\n\nx_set = set(coordinates)"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n1 2 3 4 5\\n\") == \"4\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n10 12 1 2 14\\n\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == 5\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '1\\n101001\\n111010'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n|   | 1 0 0 0 0 0 |\n| 1 0 1 1 0 0 0 |\n| 0 1 1 1 0 1 0 |\n| 0 0 1 1 0 1 1 |\n| 0 0 0 1 1 0 1 |\n| 0 0 0 0 1 1 0 |\n| 0 0 0 0 0 1 1 |\n| 0 0 0 0 0 0 0 |"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"101001\"\nassert solution(\"4 5 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"111010\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"111100\"\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '111100'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '101001'\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '111010'\nassert solution(\"1 2\\n2 3\") == '11'\nassert solution(\"1 1\\n1 1\") == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"2\"\n\"\"\"\n\nimport math\n\nn, m, k = list(map(int, input().split()))\n\nroad_array = [list(map(int, input().split())) for _ in range(m)]\n\nroad_list = []\nfor road in road_array:\n    road_list.append([road[0], road[1]])\n    road_list.append([road[1], road[0]])\nroad_list = set(road_list)"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '101001'\n\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') in ['111010', '101110']\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n111010'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '2\\n111100\\n110110'\nassert solution('4 3 2\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n111010'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4 5 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '2\\n'\nassert solution(\n    '4 5 2\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '1\\n'\nassert solution(\n    '5 6 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '2\\n'\nassert solution(\n    '5 6 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '1\\n'\nassert solution(\n    '4 5 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '2\\n'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n3 3 3\") == \"NO\"\n\"\"\"\nfrom collections import Counter\n\nn = int(input())\nlst = list(map(int, input().split()))\ncnt = Counter(lst)\nprint(\"YES\" if cnt[lst[0]] >= n - 1 and cnt[lst[n-1]] >= n - 1 else \"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"5\\n2 1 1 2 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n1 2 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n2 1 1 2 5\"\n) == \"YES\"\n\nassert solution(\n    \"3\\n1 2 3\"\n) == \"YES\"\n\nassert solution(\n    \"2\\n10 10\"\n) == \"YES\"\n\nassert solution(\n    \"3\\n1 2 3\"\n) == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1\\n') == 'YES'\nassert solution('5\\n2 1 1 2 5\\n') == 'YES'\nassert solution('3\\n1 2 3\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\n\n\n-----Python-----"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n\nH, n = list(map(int, stdin.readline().split()))\nd = [int(c) for c in stdin.readline().split()]\n\ncurr_hp = H\nfor i in range(n):\n    curr_hp += d[i]\n    if curr_hp <= 0:\n        print(i + 1)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\"\n\nimport math\n\nH, n = [int(i) for i in input().split()]\nd = [int(i) for i in input().split()]\n\ni = 0\nwhile H > 0 and i < n:\n    H += d[i]\n    i += 1\n    if H <= 0:\n        print(i)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\\n\") == \"4999999999996\"\nprint('Passed!')"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input().split())\nprint(solution(str(input())))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('100 100\\n0 1 0 1') == '2'\nassert solution('10000 2\\n0 -1 0 1') == '-1'\nassert solution('10001 10001\\n1 0 -1 1') == '-1'\n\nprint(\"Successfully tested.\")\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('7 6') == '9'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\n\"\"\"\n\nfrom collections import deque\n\nH, N = map(int, input().split())\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\", \"-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\", \"-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nfrom collections import deque\n\nH, n = map(int, stdin.readline().split())\nd = list(map(int, stdin.readline().split()))\nq = deque([(d[0], 1)])\n\nfor i in range(1, n):\n    prev, curr = q.popleft()\n    if prev > 0:\n        q.append((prev + d[i], i + 1))\n    if curr > 0:\n        q.append((curr + d[i], i + 1))\n\nprint(-1 if q[0][0] <= 0 else q[0][1])\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"AZAAAZAA\") == \"AZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nprint(\"Passed\")"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCAABAA\") == \"AB\"\nassert solution(\"ABCAABAABAB\") == \"AB\"\nassert solution(\"ABBCBABBB\") == \"AB\"\nassert solution(\"ABBAABABBB\") == \"AB\"\nassert solution(\"ABCAABAABABAAB\") == \"AB\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BA\") == \"AB\"\nassert solution(\"AZ\") == \"AZ\"\nassert solution(\"AA\") == \"AA\"\nassert solution(\"ZA\") == \"ZA\"\nassert solution(\"ZZ\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCD\") == \"AB\"\nassert solution(\"ABCABCABCABCABC\") == \"ABCABC\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\"\n\nimport sys\n\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"where\") == \"here\"\nassert solution(\"where\") == \"here\"\nassert solution(\"codeforces\") == \"codeforces\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 1\nassert solution(\"b\") == 1\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 8\nassert solution(\"yes\") == 1\n\nprint(solution(\"test\"))\nprint(solution(\"west\"))\nprint(solution(\"codeforces\"))\nprint(solution(\"yes\"))\n\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 1\nassert solution(\"b\") == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\nassert solution(\"test\") == 2\nassert solution(\"b\") == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 3\n1 7 11\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n\nD = int(stdin.readline())\nn = int(stdin.readline())\nx = [int(stdin.readline()) for _ in range(n)]\nx.sort()\n\nresult = 0\n\nfor i in range(n):\n    result = max(result, abs(x[i] - (x[i] + D)))\n    result = max(result, abs(x[i] - (x[i] - D)))\n\nprint(result)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 3\\n1 7 11\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nN, X = [int(i) for i in stdin.split(\" \")]\narr = [int(i) for i in stdin.split(\" \")]\n\narr.sort()\n\ncurrent_max = arr[0]\ncount = 0\n\nfor i in range(1, len(arr)):\n    if arr[i] - arr[i - 1] > current_max:\n        count += 1\n        current_max = arr[i] - arr[i - 1]\n\nprint(count + 1)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\") == \"1\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"7 5\") == \"2\"\nassert solution(\"8 10\") == \"3\"\nassert solution(\"3 3\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n\u672c\u984c\u6642\u9593\u505a\u4e0d\u51fa\u4f86\uff0c\u7d93\u5178\u984c\u76ee\u4e0d\u898b\u4efb\u4f55\u985e\u4f3c\u984c\u76ee\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"kukaku\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'Yes'\nassert solution('abba') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('madam') == 'No'\nassert solution('madman') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('kodok') == 'No'\nassert solution('babad') == 'No'\nassert solution('cbbd') == 'Yes'\nassert solution('aaaa') == 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline()\n\nwhile S:\n    if len(S) < 3 or len(S) > 99:\n        print(\"No\")\n    else:\n        for i in range(0, len(S)//2):\n            if S[i] == S[len(S)-1-i]:\n                continue\n            else:\n                print(\"No\")\n                break\n        else:\n            print(\"Yes\")\n    S = sys.stdin.readline()"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\u2018akasaka\u2019) == \u2018Yes\u2019\nassert solution(\u2018kawakawaka\u2019) == \u2018Yes\u2019\nassert solution(\u2018racecar\u2019) == \u2018Yes\u2019\nassert solution(\u2018hannah\u2019) == \u2018Yes\u2019\nassert solution(\u2018abcdcb\u2019) == \u2018Yes\u2019\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(aks) == 'Yes'\nassert solution('sasas') == 'Yes'\nassert solution('asas') == 'Yes'\nassert solution('asasas') == 'Yes'\nassert solution('asasa') == 'No'\n\"\"\"\n\nimport math\nfrom collections import deque"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaka\") == 'Yes'\nassert solution(\"akasaka\") == 'Yes'\nassert solution(\"aasa\") == 'No'\n\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"abb\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(akasaka) == 'Yes'\n\nprint(solution(stdin))"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('akasaka') == 'Yes'\n\nprint(solution(stdin))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport sys\n\na, b = sys.stdin.readline().strip().split()\n\nprint(int(int(a) * float(b)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2\\n3\\n5\\n6') == '3\\n0\\n0\\n1\\n999999999\\n'\nassert solution('2\\n1\\n1') == '2\\n0\\n0\\n1\\n'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\") == \"2\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"4\\n2\") == \"1\"\nassert solution(\"7\\n2\") == \"3\"\nassert solution(\"3\\n2\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == \"3\"\nassert solution(5) == \"1\"\nassert solution(7) == \"3\"\nassert solution(6) == \"0\"\n\"\"\"\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5') == '0'\nassert solution('3\\n4') == '1'\nassert solution('2\\n1') == '0'\nassert solution('4\\n2000000000') == '999999999'\nassert solution('6\\n763243547') == '381621773'\n\"\"\"\nimport math\nimport numpy\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nimport sys"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\\n\"\n\n\n\nimport sys\nimport math\nfrom collections import Counter\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1]).readlines()\n\nfor line in lines:\n    line = line.rstrip()\n    print(solution(line))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '0'\nassert solution('7') == '0'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n5') == '0'\nassert solution('7\\n3\\n1\\n2') == '1'\nassert solution('3\\n7\\n1\\n2') == '0'\nassert solution('4\\n1\\n2') == '1'\nassert solution('4\\n1\\n2\\n3') == '999999999'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"0\"\n\"\"\"\n\n\nfrom sys import stdin\n\nn, m, s = [int(x) for x in stdin.readline().split()]\nd = [set() for _ in range(n)]\nfor _ in range(m):\n    u, v = [int(x) for x in stdin.readline().split()]\n    d[u - 1].add(v - 1)\n    d[v - 1].add(u - 1)\n\nq = [s - 1]\nvis = {s - 1}\nwhile q:\n    u = q.pop()\n    for v in d[u]:\n        if v not in vis:\n            vis.add(v)\n            q.append(v)"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\n\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n\nprint(\"Finished tests\")\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom collections import deque\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2\") == \"3\"\nassert solution(\"5 9 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 8\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n2 3\\n1 2\\n1 5\") == \"2\"\nassert solution(\"1 3\\n2 3\\n1 2\\n1 5\\n1 3\") == \"0\"\n\n-----Error in My Solution-----\n\nThe solution is incorrect.\nIt should be \"0\" but is \"1\".\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set, FrozenSet, DefaultDict\nfrom collections import defaultdict, deque\n\n\nclass City:\n    def __init__(self, index: int) -> None:\n        self.index = index\n        self.connected_cities: Set[City] = set()\n    \n    def __repr__(self) -> str:\n        return f\"City(index={self.index})\"\n\n\nclass Solution:\n    # Time complexity: O(n + m)\n    # Space complexity: O(n)\n    def solution(self, stdin: str) -> str:\n        n, m, s = [int(x) for x in stdin.split()]\n\n        cities = [City(i + 1) for i in range(n)]\n        edges: Dict[City, List[City]] = defaultdict(list)\n\n        for i in range(m):\n            city_1, city_2 = [int(x) for x in stdin.split()]\n            city_1, city_2 = cities[city_1 - 1], cities[city_2 - 1]\n\n            edges[city_1].append(city_2)\n            edges[city_2].append(city_1)\n\n        def is_reachable(city: City) -> bool:\n            queue = deque()\n            queue.append(city)\n\n            reachable = {city}\n            while queue:\n                current = queue.pop()\n                for next_city in edges[current]:\n                    if next_city in reachable:\n                        continue\n                    reachable.add(next_city)\n                    queue.appendleft(next_city)\n            return len(reachable) == n\n\n        min_extra_roads = m\n\n        for city in cities:\n            if is_reachable(city):\n                continue\n            \n            for i in range(m):\n                if is_reachable(city):\n                    break\n                if (city in edges[cities[i]]) or (cities[i] in edges[city]):\n                    continue\n                \n                cities[i].connected_cities.add(city)\n                min_extra_roads -= 1\n        \n        return min_extra_roads\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n2 3\\n3 4\") == \"1\"\nassert solution(\"7 7 1\\n1 2\\n2 3\\n3 4\\n4 1\\n5 6\\n6 7\\n7 1\") == \"0\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 1') == '2'\nassert solution('5 4 5') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 4 1\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\nassert solution(\"5 4 0\\n1 2\\n2 3\\n3 4\\n4 1\") == '0'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\n\"\"\"\nfrom typing import List, Dict\n\nclass Solution:\n    def find_max_people(self, boxers: List[int]) -> int:\n        boxers_weights = {}\n        for boxer_weight in boxers:\n            boxers_weights[boxer_weight] = 1 if boxer_weight not in boxers_weights else boxers_weights[boxer_weight] + 1\n        boxers_weights = sorted(boxers_weights.items(), key=lambda item: item[1], reverse=True)\n        return len([boxer_weight for boxer_weight in boxers_weights if boxer_weight[1] >= boxers_weights[0][1]])\n\nassert Solution().find_max_people([3, 2, 4, 1]) == 4\n\"\"\"\n\nclass Solution:\n    def find_max_people(self, boxers: List[int]) -> int:\n        boxers_weights = {}\n        for boxer_weight in boxers:\n            if boxer_weight not in boxers_weights:\n                boxers_weights[boxer_weight] = 1\n            else:\n                boxers_weights[boxer_weight] = boxers_weights[boxer_weight] + 1\n        boxers_weights = sorted(boxers_weights.items(), key=lambda item: item[1], reverse=True)\n        return len([boxer_weight for boxer_weight in boxers_weights if boxer_weight[1] >= boxers_weights[0][1]])\n\nassert Solution().find_max_people([3, 2, 4, 1]) == 4\nassert Solution().find_max_people([1, 1, 1, 1, 1]) == 5\nassert Solution().find_max_people([1, 1, 1, 1, 1, 1]) == 5\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 4 1\") == '4'\nassert solution(\"6\\n1 1 1 4 4 4\") == '5'\n\"\"\"\n\nn = int(stdin.readline())\n\nweights = list(map(int, stdin.readline().split()))\n\nm = min(weights)"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"5\"\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\nFirst it's necessary to find all unique values, then sort them, then find the biggest number which is divisible by two.\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1 4 4 4\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n3 2 4 1''') == '4'\nassert solution('''6\n1 1 1 4 4 4''') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n\nimport sys\nimport os\nfrom collections import Counter\n\nimport typing\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 4 1') == '4'\n\nassert solution('6 1 1 4 4 4') == '5'\n\nassert solution('5 1 1 1 4 4 4') == '5'\n\nassert solution('3 1 1 4 4 4') == '3'\n\nassert solution('3 2 4 1') == '4'"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\nassert solution('2 1\\n1 12') == '000001000001'\nassert solution('1 1') == '0'\nassert solution('3 3\\n1 3\\n2 3\\n3 3') == '00010\\n00100\\n1010'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\n\"\"\"\nimport sys\nimport os\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '''\n000001000002\n000002000001\n000001000001\n'''\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001'\n\n-------------------\n\nimport math\n\nn, m = map(int, input().split())\nprefectures = [list() for _ in range(n)]\ncities = [list() for _ in range(n)]\nfor _ in range(m):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    prefectures[x].append(y)\n    cities[y].append(x)\n\nresult = [0] * n\nfor i in range(n):\n    if not prefectures[i]:\n        continue\n    for j in prefectures[i]:\n        result[j] = (result[j] + math.floor(i) * math.pow(10, 6))\n\nfor i in range(n):\n    if not cities[i]:\n        continue\n    for j in cities[i]:\n        result[j] = (result[j] + math.floor(i) * math.pow(10, 6))\n\nfor r in result:\n    print(r)\n\n------"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\\n2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 10 8 40\n''') == 2\n\n\"\"\"\nn, *a = map(int, stdin.split())\nh = [a[i] for i in range(n)]\n\nd = dict()\nfor i in range(n):\n    if h[i] == 0:\n        d[i] = 1e9\n    else:\n        d[i] = h[i]\n\nwhile len(d) > 1:\n    # d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    t = list(d.keys())[0]\n    for i in d:\n        if i!= t:\n            d[i] = min(d[i], d[t])\n    d[t] = 0\n\nprint(list(d.keys())[0])\n\n\"\"\"\n\nimport collections\nn, *a = map(int, stdin.split())\nh = [a[i] for i in range(n)]\n\nd = collections.defaultdict(int)\nfor i in range(n):\n    if h[i] == 0:\n        d[i] = 1e9\n    else:\n        d[i] = h[i]\n\nwhile len(d) > 1:\n    # d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    t = list(d.keys())[0]\n    for i in d:\n        if i!= t:\n            d[i] = min(d[i], d[t])\n    d[t] = 0\n\nprint(list(d.keys())[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\nassert solution(\"3 10 4 50\") == \"4\"\nassert solution(\"1 10 10 10\") == \"1\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\"\"\"\n\nimport sys\nimport random\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n2 10 8 40''') == '2'\nassert solution('''5\n1 7 6 3 10''') == '1'\nassert solution('''7\n2 5 4 6 10 9''') == '7'\nassert solution('''5\n10 9 8 7 6''') == '10'\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 8 40\") == 2\n\"\"\"\n\nimport sys\nfrom math import inf"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom functools import reduce\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 8 40\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\n\n\"\"\"\nimport sys\nimport random\nimport math\n\nclass Solution:\n    # Solution 1\n    \"\"\"\n    def solve(self, A):\n        A.sort()\n        n = len(A)\n        i = 0\n        while i < n:\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    i += 1\n                    break\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    A[j] -= A[i]\n                    i += 1\n                    break\n        return A[n-1]\n    \"\"\"\n\n    # Solution 2\n    \"\"\"\n    def solve(self, A):\n        A.sort()\n        n = len(A)\n        i = 0\n        while i < n:\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    i += 1\n                    break\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    A[j] -= A[i]\n                    i += 1\n                    break\n        return A[n-1]\n    \"\"\"\n\n    # Solution 3\n    \"\"\"\n    def solve(self, A):\n        A.sort()\n        n = len(A)\n        i = 0\n        while i < n:\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    i += 1\n                    break\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    A[j] -= A[i]\n                    i += 1\n                    break\n        return A[n-1]\n    \"\"\"\n\n    # Solution 4\n    \"\"\"\n    def solve(self, A):\n        n = len(A)\n        sum_ = 0\n        for x in range(n):\n            sum_ += A[x]\n        A.sort()\n        for i in range(n - 1, 0, -1):\n            sum_ -= A[i]\n            A[i] = sum_\n            A.sort()\n            print(A[i])\n        return A[0]\n    \"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a1') == 'a1'\nassert solution('a1a') == 'a1a'\nassert solution('a1b') == 'a1a'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?(___-_+____):-____<____,____<____,_____<____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(___+___-___):-___>__.\\n\") == \"010\"\nassert solution(\"?(__+__/__-__):-__>__,__<__.\\n\") == \"false\"\nassert solution(\"?(___/___+___-___):-__>__.\\n\") == \"false\"\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(_____+___+____):-___>__.___+____<____,____<_____,_____<_____,_____<_____,_____<_____.___+____<___,___<____,____<_____,_____<_____\") == \"0250341\"\nassert solution(\"?(____+____+_____):-____>__,____<____,____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____.____+____<____,____<_____,_____<_____,_____\") == \"0101\"\nassert solution(\"?(_____+____+_____):-_____>__,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____._____+_____<_____,_____<_____,_____,_____\") == \"0010\"\nassert solution(\"?(_____+____+_____):-_____>__,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____._____+_____<_____,_____<_____,_____,_____\") == \"1010\"\nassert solution(\"?(_____+____+_____):-_____>__,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____._____+______<_____,_____<_____,_____,_____\") == \"1010\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?(__+___+__-___):-___>__.') == '01010'\nassert solution('?(__+___+__-___):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'\nassert solution('?(____-_+_/____):-__>__,_____<__.') == '0010'\nassert solution('?(____+___+____-__):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'\nassert solution('?(_____+_/_____):-__>__,_____<__.') == '0010'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('?(__+___+__-___):-___>__.') == '0250341'\nassert solution('?(__-___+__):-___>__.') == '0250'\nassert solution('?(__-___+__):-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0250341\"\n\nassert solution(\"?(_______):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(_______):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(_____):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(________):-__>__,_____<__.\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('?(___):-___>__.___<') == '010'\nassert solution('?(__+_*_/____):-__>__,_____<__') == 'false'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0250341'\nassert solution('?(____+_____+_____):-___>__,_____<__,____<_____,_____<______,______<_______') == '0250341'\nassert solution('?(_____+_____+_____):-___>__._____<__.____<_____,_____<______,______<_______') == '0101'\nassert solution('?(_____+_____+_____):-___>__,_____<__,____<_____,_____<______,______<_______') == '0250341'\nassert solution('?(_____+_____+_____):-___>__,_____<__,____<_____,_____<______,______<_______') == '0250341'\n\n'''"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__,___<___,____<____,____<____,_____<_____,______<_______.\") == \"0250341\"\nassert solution
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\nassert solution('3 3 3') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\n\"\"\"\n\n\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"3 4 1\") == 3\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1\") == \"5\"\nassert solution(\"2 3 5\") == \"2\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == 3\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 5\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 0\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"secrofedoc\"\nassert solution(\"orecesfedoc\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nfrom itertools import takewhile"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\nassert solution(\"babbajack\") == \"abbajack\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == 19\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\nimport re\n\nregex = r\"\\d+ \\d+\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == 19\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('5 13') == '18'\nassert solution('1 2') == '3'\nassert solution('0 5') == '5'\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint('The solution is correct!')"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\nprint(solution('5 14'))\nprint(solution('381 492'))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == 19\nassert solution(\"381 492\") == 873\nprint(solution(\"5 14\"))\nprint(solution(\"381 492\"))\n\nsolution(\"5 14\")"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2+3') == '++++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\nimport re\n\n\nclass Solution:\n    def compute(self, exp):\n        mem = [0] * 30000\n        p = 0\n        i = 0\n        while i < len(exp):\n            if re.match(r\"\\d+\", exp[i:i+1]):\n                mem[p] = int(exp[i:i+1])\n            elif exp[i:i+1] == \",\":\n                p += 1\n            elif exp[i:i+1] == \"+\":\n                mem[p] = mem[p] + 1\n                if mem[p] > 255:\n                    mem[p] %= 256\n            elif exp[i:i+1] == \"-\":\n                mem[p] = mem[p] - 1\n                if mem[p] < 0:\n                    mem[p] %= 256\n            elif exp[i:i+1] == \"<\":\n                p -= 1\n                if p < 0:\n                    p = 29999\n            elif exp[i:i+1] == \">\":\n                p += 1\n                if p > 29999:\n                    p = 0\n            i += 1\n        return \"\".join(map(lambda x: chr(x), mem))\n\n\ns = Solution()\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2+3\") == \"+>\\n+++\\n<[<+>-]<\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\nassert solution(\"9*7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\nassert solution(\"8-9\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\nassert solution(\"0-0\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+++++>+++++<<<<<[>++++>[>-]>+[<+>-]<<<<<-]>[>----]<[<+>-]<<<<<-]<[<+>-]>+[>++++++]>') == '>+++++'\nassert solution('[>++++>[>-]>+[<+>-]<<<<<-]>[>----]<[<+>-]<<<<<-]<[<+>-]>+[>++++++]>') == '>+++++'\nassert solution('[>++++>[>-]>+[<+>-]<<<<<-]>[>----]<[<+>-]<<<<<-]<[<+>-]>+[>++++++]>') == '>+++++'\nassert solution('>++++>') == '>++++>'\n\"\"\"\n\n\nclass BrainFuck:\n    def __init__(self):\n        self.memory = [0] * 30000\n        self.pointer = 0\n        self.code = []\n        self.direction = 1\n\n    def _move(self, n):\n        for _ in range(n):\n            self.pointer += self.direction\n\n    def _turn(self, n):\n        if n == 0:\n            self.direction = -self.direction\n        else:\n            self.direction = int(not self.direction)\n\n    def _input(self, n):\n        assert 0 <= n <= 255\n        self.memory[self.pointer] = n\n        self._move(1)\n\n    def _output(self):\n        self._move(1)\n        return self.memory[self.pointer]\n\n    def _add(self):\n        self.memory[self.pointer] += 1\n        self._move(1)\n\n    def _sub(self):\n        self.memory[self.pointer] -= 1\n        self._move(1)\n\n    def _less_than(self):\n        self._move(1)\n        if self.memory[self.pointer] == 0:\n            self._turn(1)\n\n    def _greater_than(self):\n        self._move(1)\n        if self.memory[self.pointer]!= 0:\n            self._turn(1)\n\n    def _equal(self):\n        self._move(1)\n        if self.memory[self.pointer]!= 0:\n            self._turn(1)\n\n    def _not_equal(self):\n        self._move(1)\n        if self.memory[self.pointer] == 0:\n            self._turn(1)\n\n    def _loop_start(self):\n        self._move(1)\n        return self.memory[self.pointer]\n\n    def _loop_end(self, n):\n        self._move(n)\n        self._move(1)\n        if n == 0:\n            self._turn(1)\n\n    def _increment_loop(self, n):\n        self.memory[self.pointer] += n\n        self._move(1)\n        self._turn(1)\n\n    def _decrement_loop(self, n):\n        self.memory[self.pointer] -= n\n        self._move(1)\n        self._turn(1)\n\n    def _increment_position(self, n):\n        self.memory[self.pointer] += n\n        self._move(1)\n\n    def _decrement_position(self, n):\n        self.memory[self.pointer] -= n\n        self._move(1)\n\n    def _increment_value(self, n):\n        self.memory[self.pointer] += n\n        self._move(1)\n\n    def _decrement_value(self, n):\n        self.memory[self.pointer] -= n\n        self._move(1)\n\n    def _loop_body(self, n, cmds):\n        for c in cmds:\n            self._turn(c)\n        self._move(n)\n        self._turn(0)\n\n    def _decrement_loop_body(self, n, cmds):\n        for c in cmds:\n            self._turn(c)\n        self._move(n)\n        self._turn(1)\n\n    def _parse_commands(self, commands):\n        i = 0\n        while i < len(commands):\n            if commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands[i] == '.':\n                yield self._output()\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands[i] == '.':\n                yield self._output()\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands[i] == '.':\n                yield self._output()\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '[':\n                self.code.append(1)\n            elif commands[i] == ']':\n                n = self._loop_start()\n                if self.code[-1]:\n                    self._loop_body(n, commands[i + 1:])\n                else:\n                    self._loop_end(n)\n                self.code = self.code[:-1]\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3+4+5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3-4-5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3*4*5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3+4-5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3*4+5\") == \">+++>\\n<[<+>-]<\\n\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2+3') == '<[<+>-]<'\nassert solution('9-7') == '+++++++++>'\n\n\"\"\"\n\n\"\"\"\nBASIC INFORMATION\n\nBrainfuck interpreters are a family of programs for storing and modifying a single string of memory cells. These programs are often used to simulate a primitive version of the famous computer programming language BASIC (http://en.wikipedia.org/wiki/BASIC).\n\nIn this problem, we will write a simple Brainfuck interpreter. You will be given a string containing a brainfuck program, and you must print the result of its execution.\n\nThe interpreter will be able to read the instructions and do some operations on memory cells. To be more specific:\n\nmemory cells store integers from 0 to 255 with unsigned 8-bit wraparound.\nmemory cells can be read with the command.\nmemory cells can be written with the command <.\nmemory cells can be incremented with the command +.\nmemory cells can be decremented with the command -.\nYou will need to test the correctness of your solution by using the Brainfuck program given in the input data.\n\n-----Instructions-----\n\nWrite 5 lines of code to test the correctness of solution:\nIn this problem you will write a simple generator of Brainfuck (https://en.wikipedia.org/wiki/Brainfuck) calculators.\n\nYou are given an arithmetic expression consisting of integers from 0 to 255 and addition/subtraction signs between them. Output a Brainfuck program which, when executed, will print the result of evaluating this expression.\n\nWe use a fairly standard Brainfuck interpreter for checking the programs:\n\n\n 30000 memory cells.\n\n memory cells store integers from 0 to 255 with unsigned 8-bit wraparound.\n\n console input (, command) is not supported, but it's not needed for this problem.\n\n\n-----Input-----\n\nThe only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive. The calculations result is guaranteed to be an integer between 0 and 255, inclusive (results of intermediary calculations might be outside of these boundaries).\n\n\n-----Output-----\n\nOutput a Brainfuck program which, when executed, will print the result of evaluating this expression. The program must be at most 5000000 characters long (including the non-command characters), and its execution must be complete in at most 50000000 steps.\n\n\n-----Examples-----\nInput\n2+3\n\nOutput\n++>\n+++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\nInput\n9-7\n\nOutput\n+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\n\n-----Note-----\n\nYou can download the source code of the Brainfuck interpreter by the link http://assets.codeforces.com/rounds/784/bf.cpp. We use this code to interpret outputs.\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"2+3\"\n) == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\n    \"9-7\"\n) == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">++++[>++++[>++[>>++++>>+<<[<<<-]>>[-]>>>>>>+<<<<<-]>>]>>.>.\") == \"+++++++++++.>>.>.>\"\nassert solution(\"<-<.>-<<.<<-<.>>\") == \"<<[-].[-[-]<.[-]<.[[-]<.[-[-]<.[-]<.[-]<.[-[-]<.[-]<.\"\nassert solution(\"<<[-]<.<<<.>-<<+>>.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+3+1-3\") == \"++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\n\"\"\"\n\nimport collections\nimport re\n\nProgram = collections.namedtuple('Program', 'code output')\n\nBASE = 30000"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('3\\n2') == '2'\nassert solution('4\\n3') == '3'\nassert solution('5\\n4') == '4'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\n\"\"\"\n\n\nfrom math import log2, ceil\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\n\nassert solution('''4\n2132\n506\n999999999999999999\n1000000000000000000''') == '''8\n2\n4\n1'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\"\n\nimport math\n\nq = int(input())\nfor _ in range(q):\n    k = int(input())\n    i = 1\n    s = \"1\"\n    while len(s) < k:\n        s += str(i)\n        i += 1\n    print(s[k - 1])\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345\") == '8'"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5123465\") == \"5\"\nassert solution(\"513456\") == \"6\"\nassert solution(\"523456\") == \"6\"\nassert solution(\"5123456\") == \"5\"\nassert solution(\"512345678912345678910\") == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\n\nassert solution(\"112123123412345$\\dots$11223$\\dots$\") == '1'\n\nassert solution(\"112123123412345$\\dots$111111122222$\\dots$\") == '0'\n\nassert solution(\"112123123412345$\\dots$111111122222$\\dots$1111111111111111111111$\\dots$\") == '0'\n\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\n\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\") == \"1\\n2\\n5\\n2\\n0\"\n\"\"\"\n\nimport os"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('5\\n') == '2'\nassert solution('7\\n') == '1'\nassert solution('20\\n') == '9'\nassert solution('33\\n') == '5'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == '4'\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n575\n''') == 4\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"5750\") == \"4\"\nassert solution(\"1000\") == \"7\"\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"13\") == \"1\"\nassert solution(\"35\") == \"1\"\nassert solution(\"1234\") == \"0\"\nassert solution(\"1111\") == \"1\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 4\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"4\"\nprint('all tests passed.')\n\n-------"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"1\") == 1\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == 1\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == 0\nassert solution('010') == 1\nassert solution('011') == 2\nassert solution('000') == 1\nassert solution('110') == 0\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"100\") == 0\nassert solution(\"101\") == 2\nassert solution(\"111\") == 3\nassert solution(\"10101010\") == 0\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 1\nassert solution('1110') == 1\nassert solution('11110') == 2\nassert solution('11110') == 2\nassert solution('11110') == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"000\") == 1\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1110011\") == 3\nassert solution(\"1110010\") == 0\nassert solution(\"1110001\") == 3\nassert solution(\"1110110\") == 4\nassert solution(\"1110101\") == 3\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == answer\n\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0110\") == 1\n\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\n\nd = {}\nfor c in S:\n    if c in d:\n        d[c] += 1\n    else:\n        d[c] = 1\n\nprint(d['0'] - d['1'])\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('111') == '0'\nassert solution('010') == '0'\nassert solution('100') == '1'\nassert solution('110') == '1'\nassert solution('101') == '2'\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101010') == 5\nassert solution('110101') == 3\nassert solution('101010') == 5\nassert solution('101101') == 4\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 30\") == \"APPROVED\"\nassert solution(\"1 5\") == \"DENIED\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 6 7 10\") == \"APPROVED\"\nassert solution(\"4 6 9 11 12 15 16\") == \"DENIED\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nli = [int(stdin.readline().strip()) for i in range(n)]\n\nfor num in li:\n    if num % 2 == 0:\n        if num % 3 == 0 or num % 5 == 0:\n            print('APPROVED')\n        else:\n            print('DENIED')\n    else:\n        print('DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9 3\") == \"APPROVED\"\nassert solution(\"5 9 3\") == \"DENIED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 7 10 12\") == \"APPROVED\"\nassert solution(\"5 6 7 10 12 31\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\n\nfor i in range(N):\n    if a[i] % 2 == 0 and (a[i] % 3 == 0 or a[i] % 5 == 0):\n        print(\"APPROVED\")\n    else:\n        print(\"DENIED\")\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RURDRRU') == 'Yes'\nassert solution('RUUDRU') == 'No'\n\nprint(solution(stdin.readline()))\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n-------"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RULDRDR') == 'No'\nassert solution('RDRDRUULRDRR') == 'Yes'\n\n\"\"\"\n\n\"\"\"\nBy following the rules of a strum of pipes, if you stay at the same position for the same number of consecutive pipes, then you must flip the pipe. If you flip a pipe, then it is now in the opposite position.\n\nYou can pass a pipe, as long as there are no consecutive pipes in the same position.\n\nFor example
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LRUDDR\") == \"No\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LLR') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULUDR\") == \"No\"\nassert solution(\"RUDD\") == \"No\"\nassert solution(\"RUDDUDUDR\") == \"No\"\nassert solution(\"RRUDRR\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRUULR') == 'No'\nassert solution('RUDLUDRUD') == 'Yes'\nassert solution('RUDRUULRU') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LLRRDDLUUDDDRR\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\nimport re"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5\\n') == '7'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '0'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5\\n') == '7'\n\"\"\"\nfrom typing import Dict, List, Tuple"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 4 3 5\") == \"7\"\nassert solution(\"5 3 2 4 3\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 5 6\") == \"7\"\nassert solution(\"3 3 3 3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\\n\") == \"7\"\nassert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == \"7\"\nassert solution(\"5\\n1\\n1\\n1\\n1\\n1\\n\") == \"0\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nN, A, B, C, D, E = [int(x) for x in input().split('\\n')]\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 2 4 3 5') == '7'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n2\\n1\\n0') == 1\nassert solution('6\\n4\\n5\\n3\\n0\\n2') == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 2\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n\") == \"2\"\n\n-----\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '4'\nassert solution('2\\n2') == '2'\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2\\n1\") == '1'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"7\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '2'\nassert solution('4') == '3'\nassert solution('11') == '11'\nassert solution('7') == '7'\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == '23'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(22) == 23\nassert solution(20) == 23\nassert solution(19) == 19\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u043c. \u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0435, \u0435\u0441\u043b\u0438 \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043e\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00abYES\u00bb \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u00abif\u00bb \u0438 \u0435\u0433\u043e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 if else.\n\nSample Input 1:\n\n2\n\nSample Output 1:\n\nYES\n\nSample Input 2:\n\n3\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n5\n\nSample Output 3:\n\nYES\n\nSample Input 4:\n\n7\n\nSample Output 4:\n\nNO\n\nSample Input 5:\n\n7\n\nSample Output 5:\n\nYES\n\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_1) == expected_1\nassert solution(input_2) == expected_2\nassert solution(input_3) == expected_3\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20') == '23'"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == '23'"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23\") == \"23\"\nassert solution(\"20\") == \"23\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"5\"\n\nimport math\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"20\") == \"23\"\nassert solution(\"100\") == \"101\"\nassert solution(\"101\") == \"101\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\n\"\"\"\n\n\"\"\"\nInput\n4\n3 1 3 2\n\nOutput\n1\n\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == 1\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"0\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nlines = sys.stdin.readlines()\nn = int(lines[0])\nsequence = list(map(int, lines[1].split()))\n\nsequence = list(map(int, lines[1].split()))\n\ncounter = Counter(sequence)\n\ncount = 0\n\nfor key in counter:\n    if counter[key] % 2!= 0:\n        count += 1\n        if count > 1:\n            break"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n3 1 3 2''') == '1'\n\n'''\nTo solve this we can use a sliding window algorithm. \nWe will keep a set of numbers seen so far and a variable that keeps track of how many of the numbers are in our set so far. \nWe will scan through the sequence, if we have two distinct numbers then we increment our counter and decrement the numbers we've seen so far. \nIf we have 3 distinct numbers we know we can replace at least one of the numbers, and if we have all three distinct numbers we can replace all the numbers. \nIn both cases we'll decrement the counter and add the current number to the set.\nAt the end we'll check our counter and return the minimum number of elements we need to replace.\n\nSince we are scanning through the sequence in O(n) and all of the operations are constant we will have an O(n) time complexity.\n'''\nimport collections"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\nassert solution(\"4 1 3 3\") == \"2\"\nassert solution(\"4 1 3 3\") == \"2\"\nassert solution(\"4 1 3 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 3 2\") == 1\n'''"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"4\\n3 1 3 2\"\n) == '1'\n\nassert solution(\n\"8\\n4 1 3 2 2 1 3 2\"\n) == '3'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 100 90 80') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"3 5 7\") == \"12\"\nassert solution(\"9 100 8 100\") == \"24\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"5 100 90 80\"\n) == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == '23'\nprint(solution(\"5 100 90 80\"))\n\n-----\n5 100 90 80\n98\n40\n30\n21\n80\n\n23\n\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nn, a, b, c = list(map(int, stdin.split()))\n\ncosts = dict()\ncosts[(a, 0)] = 0\ncosts[(b, 0)] = 0\ncosts[(c, 0)] = 0\n\nfor _ in range(n):\n    l = int(stdin.readline())\n    costs[(l, 1)] = costs[(l, 1)] or (100 + costs[(l - 1, 0)] + costs[(l - 1, 1)])\n    costs[(l, 0)] = costs[(l, 0)] or (costs[(l - 1, 1)] + 100)\n    costs[(l, 2)] = costs[(l, 2)] or (costs[(l - 2, 0)] + 200 + costs[(l - 1, 1)])\n\nprint(min(costs[(a, 0)] + costs[(b, 0)] + costs[(c, 0)], costs[(a, 1)] + costs[(b, 1)] + costs[(c, 1)],\n          costs[(a, 2)] + costs[(b, 2)] + costs[(c, 2)]))\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 60 20 30\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 100 90 80\"\n) == \"23\"\nassert solution(\n    \"3 95 94\"\n) == \"10\"\nassert solution(\n    \"4 90 85\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\nprint(\"Test 1:\", solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\"))\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == '23'\nassert solution(\"4 5 10\\n8\\n5\\n3\\n1\\n2\") == '11'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n\nimport unittest\nimport sys\n\n\nclass Solution:\n    def solve(self, stdin):\n        a, b, c = map(int, stdin.readline().split())\n        n = int(stdin.readline())\n        s = set()\n        for i in range(n):\n            s.add(int(stdin.readline()))\n\n        return self.search(a, b, c, s)\n\n    def search(self, a, b, c, s):\n        if a + b < c:\n            return -1\n\n        n = 1\n\n        while True:\n            mp = 0\n            while mp < n and len(s) > 0:\n                if (c + mp) in s:\n                    break\n                mp += 1\n\n            if mp == n:\n                return -1\n\n            if mp >= 2 and b >= (c + mp - 1):\n                mp -= 1\n\n            if mp < 2:\n                n += 1\n            else:\n                if n < mp:\n                    n = mp\n\n                break\n\n        return n * 10\n\n\nclass TestSolution(unittest.TestCase):\n    def test_case_1(self):\n        stdin = sys.stdin.read()\n        expected = sys.stdin.read()\n        self.assertEqual(Solution().solve(stdin), expected)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"FGHIJ\") == \"JKIABC\"\nassert solution(\"AB\") == \"AB\"\n\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('A') == 'Z'\nassert solution('Z') == 'A'\nassert solution('ABC') == 'CDE'\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nprint(solution('ABCXYZ'))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('RSTUVW') == 'FGHIJKL'\nassert solution('MNOPQR') == 'STUVWX'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution( \"ABCXYZ\" ) == \"CDEZAB\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\n\"\"\"\nFirst Solution\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"B\"\nassert solution(\"AB\") == \"BC\"\nassert solution(\"ABC\") == \"BCD\"\nassert solution(\"ABBC\") == \"BCCD\"\nassert solution(\"ABBCD\") == \"BCDA\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 2 3 2 4') == '3 4 2'\n\"\"\"\n\nn = int(input())\nb = list(map(int, input().split()))\nnums = []\nfor num in range(2, 275010):\n    if num % 2 == 1:\n        nums.append(num)\n\nans = []\n\nfor i in range(0, n * 2, 2):\n    ans.append(nums[b[i] % len(nums)])\nprint(' '.join(map(str, ans)))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5 2 3 2 4') == '3 4 2'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import sqrt\n\nfrom typing import List"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\n\nimport itertools\nimport math\n\nimport sys\n\nsys.setrecursionlimit(10000)\n\nprimes = [2, 3, 5]\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"3 4 2\"\nassert solution(\"5 2 3 4\") == \"3 4 2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = [0] * 2 * n\nfor i in range(n):\n    if a[i] < 3:\n        b[2 * i] = a[i]\n    else:\n        b[2 * i] = a[i] % 3\n        for j in range(2, int(a[i] ** 0.5) + 1):\n            if a[i] % j == 0:\n                b[2 * i + 1] = j\n        if a[i] ** 0.5 == int(a[i] ** 0.5):\n            b[2 * i + 1] = int(a[i] ** 0.5)\nprint(*b)"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\n\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\n\nprint(solution('5 1\\n2 1 3 5 4'))\nprint(solution('7 1\\n7 2 1 3 5 4 6'))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"212121\"\nassert solution(\"7 1\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1\") == \"11111\"\nassert solution(\"1 1\\n1\") == \"11111\"\nassert solution(\"1 1\\n1\\n2\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"11111\"\n\"\"\"\n\nn, k = [int(n) for n in stdin.readline().split()]\narr = [int(n) for n in stdin.readline().split()]\n\nfirst = []\nsecond = []"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '112122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('3\\n1 2 3') == '4'\nassert solution('4\\n1 2 3 7') == '4'\n\"\"\"\n\nfrom math import comb\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('4\\n1 3 3 7') == 4\n\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n100 100 100 100\") == \"4\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 1 2 3''') == 2\n\nassert solution('''4\n1 3 3 7''') == 4\n\nassert solution('''10\n5 1 2 2 5 3 7 9 8 3\n''') == 10\n\nassert solution('''10\n3 3 3 3 3 3 3 3 3 3\n''') == 1\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\n\n\"\"\"\n\nfrom itertools import product\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\nnumbers = set()\n\nfor l, r in product(range(n), range(n)):\n    if l <= r and a[l] == a[r]:\n        numbers.add(a[l])\n    elif a[l] < a[r]:\n        numbers.add(a[l])\n    elif a[l] > a[r]:\n        numbers.add(a[r] + 1)\n\nprint(len(numbers))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n2\\n1\\n3\") == 2\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 1 2 3\n''') == 2\n\nassert solution('''\n6\n1 2 3 1 2 3\n''') == 2\n\nassert solution('''\n5\n1 3 2 1 2\n''') == 2\n\nassert solution('''\n5\n1 2 3 2 1\n''') == 2\n\nassert solution('''\n5\n1 3 1 3 1\n''') == 4"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 1 2 3''') == 2\n\nassert solution('''2\n100 1''') == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\n\nprint(solution(stdin))\n'''\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\"\"\"\nfrom itertools import combinations\nfrom typing import List"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 1 5 4 9') == 1\n\nassert solution('1 2 3 4 5') == 2\n\nassert solution('1 1 1 1023') == 1\n\nassert solution('7 39 89 25 89') == 0\n\nassert solution('16') == 1"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '6\\n4 7 1 5 4 9\\n'\n) == '1\\n'\nassert solution(\n    '5\\n1 2 3 4 5\\n'\n) == '2\\n'\nassert solution(\n    '1\\n16\\n'\n) == '1\\n'\nassert solution(\n    '4\\n1 1 1 1023\\n'\n) == '0\\n'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 1 5 4 9\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"16\\n\") == \"1\"\nassert solution(\"1 1 1 1023\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 1 5 4 9\") == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"7 39 89 25 89\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin='1110') == '2'\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11111\") == \"1111\"\nassert solution(\"01110\") == \"11110\"\nassert solution(\"11110\") == \"1111\"\nassert solution(\"1111\") == \"11111\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1110110111\") == \"7\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110111\") == 5\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0011') == 4\nassert solution('0111') == 6\n\"\"\"\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10111') == '4'\nassert solution('100010') == '2'\nassert solution('100010') == '2'\nassert solution('1111111') == '2'\nassert solution('101101') == '0'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101010') == 4\nassert solution('1110111') == 3\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0011\") == \"4\"\nassert solution(\"1011\") == \"4\"\nassert solution(\"1111\") == \"0\"\nassert solution(\"10111010\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0011') == '4'\n\"\"\"\nimport os\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"110\") == 1\nassert solution(\"11110\") == 2\nassert solution(\"1111110\") == 3\nassert solution(\"11111111110\") == 4\nassert solution(\"1111111111110\") == 4\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\n\nassert solution('''4 1\n2 4''') == '0'\n\nassert solution('''3 3\n1 3\n1 4\n2 4''') == '1'\n\nassert solution('''5 5\n1 2\n1 3\n2 4\n2 5\n4 1''') == '1'\n\nassert solution('''10 10\n1 5\n1 6\n2 3\n2 7\n5 1\n2 8\n5 9\n2 10\n8 1\n1 7\n5 2\n4 6\n4 8\n5 10\n5 6\n9 4\n4 10\n1 2\n9 3\n6 2\n1 8\n3 9\n6 7\n7 3\n3 1\n6 4\n9 5\n2 9\n1 6\n6 5\n9 8\n9 7\n4 8\n4 1\n7 9\n2 3\n7 2\n1 5\n9 5\n6 7\n4 8\n5 10\n4 10\n1 3\n8 1\n4 8\n6 2\n5 6\n7 10\n3 9\n6 10\n1 2\n8 5\n3 6\n10 10\n5 6\n8 10\n3 10\n7 2\n6 10\n3 10\n7 2\n10 1\n3 4\n8 1\n7 3\n6 5\n3 9\n5 2\n3 1\n7 3\n4 9\n7 7\n4 9\n3 4\n7 10\n6 8\n6 6\n5 9\n7 1\n6 7\n5 8\n10 7\n6 10\n6 7\n4 10\n10 9\n3 6\n10 10\n8 7\n6 10\n3 4\n5 10\n9 9\n5 3\n3 5\n4 10\n8 6\n4 9\n9 5\n5 3\n6 10\n3 1\n3 2\n3 1\n4 5\n2 10\n3 5\n6 1\n5 1\n5 9\n8 3\n2 5\n1 2\n3 7\n6 1\n10 9\n3 6\n5 8\n4 5\n8 3\n3 9\n2 4\n5 2\n1 1\n9 2\n7 8\n10 4\n3 3\n10 2\n2 7\n6 10\n7 10\n9 1\n3 9\n4 4\n7 7\n8 10\n4 5\n2 5\n9 3\n7 8\n5 9\n9 1\n6 10\n8 4\n1 7\n9 5\n4 5\n3 3\n2 5\n4 4\n8 2\n2 3\n3 1\n7 10\n7 2\n5 6\n2 9\n6 5\n4 3\n4 10\n10 8\n4 1\n5 5\n7 1\n7 4\n2 1\n10 9\n4 8\n6 1\n8 9\n9 7\n4 1\n6 7\n4 4\n5 8\n2 2\n3 4\n10 1\n6 1\n10 1\n4 8\n5 10\n3 2\n5 7\n7 1\n8 1\n5 1\n2 2\n3 7\n2 5\n4 1\n7 10\n1 3\n5 10\n4 10\n5 1\n6 8\n5 10\n9 2\n4 5\n7 5\n7 9\n8 2\n7 7\n2 7\n5 10\n8 7\n5 3\n8 7\n5 8\n8 6\n3 1\n1 1\n7 8\n8 5\n9 2\n3 2\n5 4\n8 4\n8 4\n5 4\n8 6\n6 3\n3 9\n8 2\n2 3\n5 9\n9 2\n9 2\n5 5\n3 4\n7 6\n3 5\n5 4\n7 1\n5 4\n5 8\n8 8\n5 1\n2 6\n3 9\n9 1\n6 1\n6 7\n2 10\n4 7\n8 3\n3 9\n6 5\n8 2\n4 3\n5 2\n3 1\n4 6\n6 6\n8 7\n3 1\n1 3\n5 2\n3 5\n8 5\n2 7\n4 4\n5 4\n1 5\n2 4\n6 1\n8 1\n1 2\n4 9\n3 1\n1 2\n2 3\n8 4\n8 1\n6 5\n3 2\n6 1\n5 3\n1 3\n3 7\n4 8\n5 2\n3 5\n7 3\n6 5\n9 5\n8 1\n3 5\n2 2\n4 6\n8 1\n5 8\n7 7\n8 7\n2 2\n6 5\n8 4\n8 1\n7 1\n7 8\n4 4\n9 2\n5 6\n4 2\n3 4\n7 2\n3 2\n2 4\n3 4\n7 9\n7 7\n5 1\n3 7\n9 5\n1 9\n2 5\n4 5\n1 2\n4 4\n7 9\n7 2\n4 8\n5 9\n2 1\n4 8\n9 7\n6 1\n2 7\n4 2\n1 3\n7 10\n7 9\n6 9\n3 5\n3 2\n6 10\n4 7\n1 3\n5 7\n5 9\n7 6\n3 6\n7 8\n9 8\n9 9\n2 7\n3 5\n4 6\n8 10\n9 8\n4 6\n5 7\n2 9\n6 1\n3 8\n6 5\n2 1\n4 1\n4 4\n5 2\n4 5\n8 8\n5 2\n3 9\n8 2\n4 1\n9 3\n7 1\n7 2\n8 2\n3 3\n6 1\n4 8\n7 4\n4 9\n6 3\n2 9\n3 1\n4 2\n5 1\n7 1\n6 3\n9 8\n5 2\n3 3\n8 3\n7 4\n1 1\n2 3\n5 5\n3 9\n3 1\n6 6\n8 3\n9 7\n4 2\n3 4\n2 1\n5 2\n5 4\n1 1\n7 3\n2 4\n5 5\n5 1\n5 3\n2 5\n2 4\n6 10\n7 1\n1 4\n8 6\n6 1\n5 2\n6 1\n3 1\n3 2\n4 1\n5 2\n6 3\n6 7\n2 4\n4 7\n2 3\n3 3\n5 4\n4 7\n9 1\n5 9\n5 4\n6 1\n5 6\n5 2\n4 1\n6 4\n3 1\n6 2\n8 1\n4 2\n6 2\n5 6\n5 1\n3 7\n5 2\n5 3\n9 8\n3 4\n4 8\n2 5\n4 7\n1 6\n2 7\n6 3\n2 8\n6 7\n5 3\n3 3\n5 4\n8 3\n5 1\n4 2\n3 1\n7 7\n6 4\n3 7\n5 7\n9 2\n8 8\n1 5\n1 5\n9 7\n8 5\n7 2\n2 1\n3 1\n2 7\n9 4\n4 3\n2 1\n7 7\n3 1\n5 1\n8 2\n9 8\n7 1\n7 2\n3 3\n4 1\n2 4\n5 5\n6 10\n3 1\n6 5\n3 1\n6 1\n7 6\n1 1\n5 6\n8 8\n9 5\n1 1\n8 1\n1 3\n3 9\n2 3\n5 1\n4 1\n5 7\n6 2\n8 7\n9 7\n7 7\n2 7\n4 8\n5 3\n5 8\n3 5\n3 2\n6 2\n6 4\n7 3\n7 1\n2 2\n3 8\n5 1\n5 1\n3 2\n3 3\n9 1\n4 7\n6 10\n5 8\n3 4\n7 3\n9 3\n7"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nimport math\nfrom functools import reduce"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    N, M = map(int, sys.stdin.readline().split())\n    left, right = [], []\n    for _ in range(M):\n        l, r = map(int, sys.stdin.readline().split())\n        left.append(l)\n        right.append(r)\n    print(sum(1 for i in range(N) if i in left or i in right))\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == '1'\n\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\"\"\"\nGift Wrap\n\nThe wrapping paper must be wrapped around the gift.\nThe rule of wrapping is as follows:\n\nTake a rectangular sheet of paper with upper edge length L and lower edge length M.\nOn one edge of the sheet, write down consecutive integers from 1 to N in such a way that the sum of numbers written on the edge is equal to L. On the other edge of the sheet, write down the same integers in the same way, but in the reverse order.\nFor example, if we have L = 3 and M = 5, then on one edge we will write down 1, 2, 3 and on the other edge we will write 3, 2, 1.\n\nNow, we have one gift (m, M). It is very easy to wrap it.\nTake a look on the other two edges.\n\nFor example, if we have L = 3 and M = 5, then our gift will be wrapped on both sides.\n\nIf the gift is wrapped on both sides, then the task is easy: just count total number of gifts (m, M) on the sheet of paper.\n\nHowever, if the gift is wrapped only on one side, then we need to find the maximum possible number of gifts which will fit.\n\nTo solve this problem, we will use the observation that the maximum number of gifts that will fit is equal to the total number of gifts divided by two.\n\nIf this maximum number of gifts is greater than M, then we can't wrap the gift on the other side.\n\nOn the other side, if the maximum number of gifts is less than M, then we can wrap the gift on the other side.\n\nTo find the maximum number of gifts on the first side, we will write down the numbers from 1 to N.\n\nIf the number of written numbers on the first edge is less than the total number of gifts, we write more numbers.\n\nOn the first edge, we write the numbers from the smallest to the largest.\n\nLet's look at the second edge.\n\nIf the number of written numbers on the second edge is less than the total number of gifts, we write more numbers.\n\nOn the second edge, we write the numbers from the largest to the smallest.\n\nTo wrap the gift, we need to find the number of written numbers on the first edge and the number of written numbers on the second edge, which will give us the maximum number of gifts which can fit on the one side.\n\nWe can calculate it using the following formulas:\n\nThe number of gifts on the first side is equal to the total number of gifts minus the number of written numbers on the second edge.\nThe number of gifts on the second side is equal to the total number of gifts minus the number of written numbers on the first edge.\n\nWrite a program which reads one integer - the length of the first edge, followed by one integer - the length of the second edge.\n\nThen your program should print one integer - the maximum number of gifts which can fit on one of the sides of the rectangular sheet of paper.\n\n-----Sample Input-----\n3\n5\n\n-----Sample Output-----\n3\n\n\"\"\"\n\n\"\"\"\nMinimize the value |(A[0] +... + A[P-1]) - (A[P] +... + A[N-1])|.\n\n-----Constraints-----\n1 \\leq P \\leq N \\leq 1,000,000, 1 \\leq A_i \\leq 10,000,000, 0 \\leq i \\leq P, N\n\n-----Input-----\nThe first line contains integers P and N separated by a single space.\nThe second line contains P integers - A_1, A_2,..., A_P.\n\n-----Output-----\nPrint the value of the difference minimized by the second constraint.\n\n-----Sample Input-----\n3 2\n1 5 3\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\nYou are given an array of integers,. Your task is to find the maximum sum of all possible contiguous subarrays of.\n\nWrite a function:"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 1') == '2'\nassert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1') == 2\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 2 1''') == '2'\nassert solution('''4\n2 2 2 1''') == '0'\nassert solution('''5\n1 2 2 1 2''') == '0'\n\n'''\n\n1 2 2 1\n\n1 2 2 1\n\n2 2 2 1\n\n'''\n\nimport sys\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nh = list(map(int, sys.stdin.readline().strip().split()))\n\nl, r = 1, N\ncount = 0\n\nfor i in range(N):\n    while l <= r and h[l - 1] <= h[i]:\n        l += 1\n    while l <= r and h[r - 1] <= h[i]:\n        r -= 1\n    count += r - l + 1\n    r += 1\n    l += 1\n\nprint(count)"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\nassert solution(\"4\\n1 3 4 2\") == 1\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\ns = 0\n\nfor i in range(n):\n    s += (arr[i] - 1 - s)\n\nprint(s)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\n\n\"\"\"\n\nimport math\nimport sys\n\ni_n, w = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * (w + 1)\ndp[0] = 1\nfor i in range(i_n):\n    for j in range(w, a[i] - 1, -1):\n        dp[j] = dp[j - a[i]] + dp[j]"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n-1 1') == '4'\nassert solution('4 10\\n0 0 0 0') == '0'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n'''\n\n\nfrom typing import List\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\na = [0] + a\n\ndp = [[0 for _ in range(w + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, w + 1):\n        dp[i][j] = dp[i - 1][j]\n        if j - a[i] >= 0:\n            dp[i][j] += dp[i - 1][j - a[i]]\nprint(dp[-1][-1] % (10 ** 9 + 7))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n-----"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n2 1 -3\") == '3'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\nassert solution(\"4 10\\n2 4 1 -3\") == '4'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n\nimport unittest\nfrom functools import reduce\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\n'''"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n\n\nfrom functools import reduce"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1000000000000000000 3000000000000000000\\n') == '3000000000000000000 1000000000000000000'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5 2 1') == '2 5 3 4 1'"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nprint(\"PASSED\")"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 0\") == \"0 1\"\nassert solution(\"2\\n2 0\") == \"0 2\"\nassert solution(\"2\\n2 1\") == \"1 0\"\nassert solution(\"2\\n3 0\") == \"0 3\"\nassert solution(\"2\\n4 0\") == \"0 4\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1000000000000000000 3000000000000000000\") == '3000000000000000000 1000000000000000000'\n\"\"\"\n\nfrom typing import List, Set, Tuple, Dict\nimport collections\nimport itertools\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 3\") == \"1 2 3\"\nassert solution(\"3 5 4 7 10 12\") == \"7 3 5\"\nassert solution(\"5 -1 2 5 8 11\") == \"1 8\"\nassert solution(\"2 10 2 12 6 20\") == \"12 6 20\"\nassert solution(\"5 -1 2 5 8 11\") == \"1 8\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ncoordinates = list(map(int, sys.stdin.readline().split()))\n\ndistances = set()\n\nfor i in range(n-1):\n    for j in range(i+1, n):\n        d = (coordinates[i] - coordinates[j])\n        distances.add(abs(d))\n\ndistances = list(distances)\n\nm = 0\nindex = 0\nwhile index < len(distances):\n    x = 2 ** distances[index]\n    if x > m:\n        m = x\n        m_index = index\n    index += 1\n\nprint(m)\n\nfor i in range(m):\n    print(coordinates[m_index - i], end=\" \")\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == '3\\n7 3 5'\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('-1 2 5 8 11') == '1'"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 5 4 7 10 12') == '3'\nassert solution('5\\n-1 2 5 8 11') == '1'\nassert solution('6\\n1 2 3 4 5 6') == '3'\nassert solution('7\\n1 2 3 4 5 6 7') == '1'\nassert solution('7\\n3 5 4 7 10 12') == '3'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 5 8 11') == '3'\nassert solution('5 8 11') == '1'\nassert solution('1 2 5 8 11') == '3'\nassert solution('-1 2 5 8 11') == '1'\nassert solution('3 5 4 7 10 12') == '3'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2 3 3\\n'\n) == '0 2'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\n\n\"\"\"\nID: pramp\nTASK: cookies\nLANG: PYTHON3\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == '0 2'\nassert solution(\"1 1 1\") == '1 1'\nassert solution(\"1 1 0\") == '0 0'\nassert solution(\"1 2 3\") == '1 0'\nassert solution(\"0 1 0\") == '0 0'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"0 3 3\") == \"0 0\"\nassert solution(\"1 1 1\") == \"0 0\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"1 0 1\") == \"1 1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '0 2'\nassert solution('1 1 1') == '0 1'"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    101\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    103\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    103\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    10000000000\n    \"\"\"\n    ) == \"6\"\n\nassert solution(\n    \"\"\"\n    101\n    \"\"\"\n    ) == \"3\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"101\") == \"3\"\nassert solution(\"102\") == \"2\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"102\") == \"2\"\nassert solution(\"103\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103\") == \"3\"\nprint(solution(\"103\"))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103\") == '3'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103') == '3'\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"3\"\nassert solution(\"103\") == \"3\"\nassert solution(\"1000\") == \"18\"\nassert solution(\"1111\") == \"12\"\n\"\"\"\n\n\"\"\"\n\nPlease edit this file in any way you want, this is just an example to help you test your code.\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 9\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '9'\n\"\"\"\n\n\"\"\"\n2\n\n-----Sample Output-----\n9\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1') == '9'\nassert solution('2\\n2') == '9'\nassert solution('2\\n3') == '9'\nassert solution('2\\n4') == '9'\nassert solution('2\\n5') == '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n''') == '9'\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1\\n2') == '9'\nassert solution('3\\n1\\n2\\n3') == '6'\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"9\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '6'\nassert solution('4') == '6'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2\\n') == ''\nassert solution('1 2 3\\n') == ''\nassert solution('1 2 3 4\\n') == ''\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 6') == 10\n\n----\n>>> s = '3 4 6'\n>>> print(f'{s = }')\ns = '3 4 6'\n>>> a = list(map(int, s.split()))\n>>> print(f'{a = }')\na = [3, 4, 6]\n>>> print(f'{max(a) = }')\nmax(a) = 6\n>>> print(f'{(11 % 3) + (11 % 4) + (11 % 6) = }')\n(11 % 3) + (11 % 4) + (11 % 6) = 10\n\n'''"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n3 4\\n5 6\") == \"10\"\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '11', \"Wrong solution\"\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n3 4 6'\n) == '10'\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\""
    }
]